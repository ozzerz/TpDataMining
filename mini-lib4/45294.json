{
  "comments": [
    "Using 1021, I got this in the .log file:\nError Oct 21, 2003 12:04:11.500 An internal error occurred during: \"Status Line\nUpdate\".\njava.lang.NullPointerException\nat org.eclipse.swt.widgets.Display.asyncExec(Display.java:461)\nat org.eclipse.ui.progress.UIJob.run(UIJob.java:76)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:62)\n\nNo steps to reproduce. It might happen when I tried to remove a breakpoint\nduring a workspace background build.",
    "Line 461 of Display is:\n\tsynchronizer.asyncExec (runnable);\n\nThe synchronizer must be null!  John, any idea here?\n\nOlivier, which VM are you using?\n",
    "I am using Sun JDK1.4.1_02.",
    "Synchronizer is set to null when the Display is disposed.  This is the only time\nit can possibly be null.  I suspect a UIJob is being scheduled after the display\nhas been disposed (quite possible, since some are launched by job listeners on\nnon-UI jobs that may still be running during shutdown). Even if the UIJob\nprotects itself with if (!display.isDisposed()) ... there will be a race\ncondition between dispose and asyncExec\n\nDevice.dispose does:\n  synchronizer \u003d null;\n  ... other stuff, including OS calls to destroy widgets ... \n  disposed \u003d true;\n\nasyncExec does:\n  if (disposed) throw Error(...);\n  synchronizer.asyncExec(runnable)\n\nSo there is a non-trivial window where disposed\u003dfalse and synchronizer\u003dnull\nwhere this can happen.  You might be able to convince SWT to change the order in\nDevice.dispose to set disposed\u003dtrue before other cleanup work.  This greatly\nreduces the possibility of the race condition when other threads try to\nasyncExec while it is being disposed.",
    "Thanks for the analysis John.  Moving to SWT for consideration.\n",
    "This should be moved to back Tod afterwards to add the isDisposed() check before\ninvoking asyncExec.",
    "The right answer for SWT is probably to add a lock for the shut down process \nso that other threads can\u0027t get into asyncExec().  I will talk to Silenio \nabout this.\n\nIn any case, the job manager needs to be shut down before the display is \ndisposed.  This will fix the problem for Eclipse but not for SWT.\n\nThoughts?",
    "Agreed that a mechanism to explicitly shutdown the job manager will fix the\nEclipse case. I have entered core bug 46492 for this.",
    "Instead of getting an NPE, I think the right thing to do now is get a \nSWT.ERROR_DEVICE_DISPOSED.\n\nTalking to Silenio about it, the syncExec() method is getting called from \nanother thread while the Display is being disposed.  If it was called a little \nbit later, syncExec() would throw SWT.ERROR_DEVICE_DISPOSED.  This means that \napplication code already needs to be aware that this can happen.\n\nSSQ?",
    "That sounds reasonable.  I suspect that application code of the form:\n\nif (!display.isDisposed()) display.syncExec(...)\n\nwill be surprised if syncExec throws a device disposed error, but short of an\natomic syncExecIfNotDisposed method there will always be a window where this can\nhappen. A disposed display error is certainly more logical than an NPE.",
    "I agree. We should protected our code so that we do not cause\na NullPointerException, but application code should get an\nexception because it needs to know that the runnable is\nnot going to be executed, since we are in the process of being\ndisposed.",
    "*** Bug 106984 has been marked as a duplicate of this bug. ***",
    "*** Bug 145435 has been marked as a duplicate of this bug. ***",
    "*** Bug 137373 has been marked as a duplicate of this bug. ***",
    "Fixed \u003e 20070815"
  ],
  "commentCreationDates": [
    "2003-10-21T18:43:42+02:00",
    "2003-10-22T04:40:00+02:00",
    "2003-10-22T14:29:20+02:00",
    "2003-10-22T22:33:49+02:00",
    "2003-10-23T03:59:42+02:00",
    "2003-10-23T17:32:16+02:00",
    "2003-11-12T16:06:41+01:00",
    "2003-11-12T16:44:38+01:00",
    "2004-02-25T20:49:19+01:00",
    "2004-02-25T21:24:49+01:00",
    "2004-02-26T00:19:15+01:00",
    "2007-07-04T18:26:05+02:00",
    "2007-08-15T15:22:04+02:00",
    "2007-08-15T15:23:27+02:00",
    "2007-08-15T16:59:47+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.swt.widgets.Display.asyncExec",
          "source": "Display.java:461"
        },
        {
          "method": "org.eclipse.ui.progress.UIJob.run",
          "source": "UIJob.java:76"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:62"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "45294",
      "date": "2003-10-21T18:43:42+02:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "major"
    }
  ],
  "groupId": "45294",
  "bugId": "45294",
  "date": "2003-10-21T18:43:42+02:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "major"
}