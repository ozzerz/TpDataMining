{
  "comments": [
    "This small test case will cause the scanner/parser to fail \n\n#define NPL_Signature(s)\t(s)\n\nint main(int argc, char *argv[]) {\n\n\tint i \u003d NPL_Signature(\u0027NPL_\u0027);\n\n\treturn EXIT_SUCCESS;\n}",
    "Dave, what is the indication of failure?  \nSearch/Outline View? \nis there anything in the .metadata/plugins/cdt.core/.log file? ",
    "the only problem I see with this example is that EXIT_SUCCESS is from \nstdlib.h, which is not included.  thomas has raised a defect upon that already \nthough (C vs. C++ style checking).   ",
    "It causes the indexer to fail, which causes a endless reindex of the project\nwhich contains this failure, which in my case happens to have \u003e 1000 files.\n\nSo everytime a perform a search, it starts indexing 1000+ files, then fails, I\nsearch again... starts indexing 1000+ files, then fails.... and the cycle\ncontinues....",
    "I guess my test case was simplified a little too much, I dug some more and looks\nlike there is somthing else in the original source file that is causing it. This\nshould give you that same result as what I see.\n---\n\n/*\n**----------------------------------------------------------------------------\n**\tIncludes\n**----------------------------------------------------------------------------\n*/\n#include \u003cstring.h\u003e\n#include\t\"npl_shim.h\"\n#include\t\"npl_view.h\"\n#include\t\"npl_doc.h\"\n#include\t\"npl_sink.h\"\n\n#include\t\"utl_view.h\"\n\n/* ----------------------------------------------------\n\t\tdefines \u0026 macros\n   ----------------------------------------------------\t\n*/\n\n/*\tthis macro takes a 4-byte long word signature like \u0027NPL_\u0027\n\tand lays it out in memory in order.  On Intel, the bytes\n\twould normally show up as \u0027_LPN\u0027.  This macro will\n\tconvert it to a 4 byte text array as \u0027NPL_\u0027.\n\tOn mac, no conversion is necessary\n*/\n#define NPL_GetByte(s,b)\t(s \u003e\u003e (b * 8))\n\n#define NPL_Signature(s)\t(s)\n/*------------------------------------------------------\n\t\t\ttypes\n------------------------------------------------------*/\n\n\n/*-----------------------------------------------------------\n\t\t\tprototypes\n*------------------------------------------------------------------*/\nstatic SM_Result x_ShowPlugin(NPLView *pView);\nstatic SM_Result x_HidePlugin(NPLView *pView);\t\nstatic SM_Result x_CacheArgList(NPLView *pView, int argc, const char **argn,\nconst char **argv);\nstatic void x_DestroyArgCache(NPLView *pView);\nstatic int x_GetArgValue(NPLView *pview,const char *arg);\n\n\nNPLDocument *x_GetDocument(NPLView *pView);\nNPLInstance *x_GetInstance(NPLView *pView);\nNPP\t\t\tx_GetNPPInstance(NPLView *pView);\n\n/*\n**----------------------------------------------------------------------------\n**\tCode\n**----------------------------------------------------------------------------\n*/\n/* ---------------------------------------------------------------- */\nstatic SM_Result SM_WTKAPI NPLVIEW_GetAPIList(const SM_View *pView, SM_APIList\n**ppAPIList)\n{\n\tSM_APIList\t\t*pAPIList;\n\tSM_ApiReference\t*pAPIs; \n\nSM_Unused(pView);\n\n\t/* be safe */\n\t*ppAPIList \u003d NULL;\n\n\tpAPIList \u003d (SM_APIList *) SM_CALLOC(1, sizeof(SM_APIList));\n\n\tif (!pAPIList)\n\t\treturn SM_RESULT_LOWMEM;\n\n\tpAPIList-\u003eiCountAPIs \u003d 1;\n\n\tpAPIs \u003d (SM_ApiReference *) SM_CALLOC(pAPIList-\u003eiCountAPIs,\nsizeof(SM_ApiReference));\t\t\n\n\tif (!pAPIs)\n\t{\n\t\tSM_FREE(pAPIList);\n\t\treturn SM_RESULT_LOWMEM;\n\t}\n\n\tpAPIList-\u003epAPIs \u003d pAPIs;\n\n\tpAPIList-\u003epAPIs[0].iApiCode \u003d SM_API_VIEW;\n\tpAPIList-\u003epAPIs[0].pAPI \u003d (void *) \u0026g_NPLVIEW_API;\n\n\t/* all set */\n\t*ppAPIList \u003d pAPIList;\n\n\treturn SM_RESULT_OK;\n}\n/* ---------------------------------------------------------------- */\n\nstatic SM_Result SM_WTKAPI NPLVIEW_FreeAPIList(const SM_View *pView, SM_APIList\n*pAPIList)\n{\nSM_Unused(pView);\n\n\tif (pAPIList)\n\t{\n\t\tSM_FREE(pAPIList-\u003epAPIs);\n\t\tSM_FREE(pAPIList);\n\t}\n\treturn SM_RESULT_OK;\n}\n\n/* ---------------------------------------------------------------- */\nSM_Result SM_WTKAPI NPLVIEW_New(SM_Document *pSMDoc, \n\t\t\t\t\t\t\t\t\tunsigned long flags, \n\t\t\t\t\t\t\t\t\tint argc, \n\t\t\t\t\t\t\t\t\tconst char **argn, \n\t\t\t\t\t\t\t\t\tconst char **argv, \n\t\t\t\t\t                SM_ScriptExtObject  *opener,\n\t\t\t\t\t\t\t\t\tSM_View **ppView, SM_View_Options *view_options)\n{\n\tNPLView\t\t*pView;\n\tSM_View\t\t*pSMView;\n\tSM_Result\tresult;\n\n\t*ppView \u003d NULL;\t\t/* assume we fail */\n\t\n\tif(!pSMDoc) return SM_RESULT_BADARGS;\n\n\t/* make a view data structure */\n\tpView \u003d (NPLView*) SM_CALLOC(1, sizeof (NPLView));\n\tif (!pView) return SM_RESULT_LOWMEM;\n\n\t/* parameter check */\n\tpSMView \u003d (SM_View*) SM_CALLOC(1, sizeof(SM_View));\n\tif (!pSMView)\n\t{\n\t\tSM_FREE(pView);\n\t\treturn SM_RESULT_LOWMEM;\n\t}\n\n\t/* initialize the pSMView structure */\n\tpSMView-\u003eGetAPIList \u003d \u0026NPLVIEW_GetAPIList;\n\tpSMView-\u003eFreeAPIList \u003d \u0026NPLVIEW_FreeAPIList;\n\tpSMView-\u003einstance_data \u003d pView;\n\n\t/* initialize the pView structure*/\n\tpView-\u003epParent\t\t\u003d NULL;\n\tpView-\u003epParentAPI\t\u003d NULL;\n\tpView-\u003epDoc\t\t\t\u003d (NPLDocument*)pSMDoc-\u003einstance_data;\n\tpView-\u003epSMDoc\t\t\u003d pSMDoc;\n\tpView-\u003eflags\t\t\u003d flags;\n\tpView-\u003esignature\t\u003d NPL_Signature(\u0027NPL_\u0027);\n\tpView-\u003epSMView\t\t\u003d pSMView;\n\tpView-\u003ebHasFocus\t\u003d FALSE;\n\tpView-\u003ebRealized\t\u003d FALSE;\n\tpView-\u003ebShown\t\t\u003d FALSE;\n\t/*\n\t\tnow copy all the arguments into our structure.\n\t\twe assume the calling component will free this memory\n\t\tso we copy all the contents into a local struct\n\t*/\n\tif (argc \u003e\u003d 0)\n\t{\n\t\tresult \u003d x_CacheArgList(pView, argc, argn, argv);\n\t\tif (SM_RESULT_OK !\u003d result)\n\t\t{\n\t\t\tgoto ExceptionExit;\t/* dang! */\n\t\t}\n\t}\n\n\t/*\n\t\tGrab height and width argements,\n\t\twherever they may be in the arguement list\n\t*/\n\tpView-\u003ewidth \u003d x_GetArgValue(pView,\"width\");\n\tpView-\u003eheight \u003d x_GetArgValue(pView,\"height\");\n\n\n\tpView-\u003epDoc-\u003epView \u003d pView;\t/* attach the view to the document */\n\tresult \u003d SM_RESULT_OK;\n\t*ppView \u003d pSMView;\n\treturn SM_RESULT_OK;\nExceptionExit:\n\tif (result !\u003d SM_RESULT_OK)\n\t{\n\t\tif (pView)\n\t\t{\n\t\t\tif(pView-\u003epSMView)\n\t\t\t{\n\t\t\t\tSM_FREE(pView-\u003epSMView);\n\t\t\t}\n\t\t\tx_DestroyArgCache(pView);\t/* error: everyone out of the pool! */\n\t\t\tSM_FREE(pView);\n\t\t\tpView \u003d NULL;\n\t\t}\n\t}\n\t*ppView \u003d(SM_View*) NULL;\n\n\treturn result;\n}",
    "Please zip up the entire project sourcebase and send it to me (by mail if you \nlike) ... without the inclusions, I cannot get very far.  \n\nI assume this is for Linux? ",
    "That would be difficult since this code is part of a product we have here which\ncannot be distributed outside of QNX.  \n\nDoes the new code sample not show the same problems I see, for you? I have the\none file in a simple make project and I hit the NPE every time I open the\nproject or try and preform a search from the file.",
    "Here is the backtrace that is spit out on the console when this happens... \nif this helps...\n\njava.lang.NullPointerException\n\tat org.eclipse.cdt.internal.core.parser.Scanner.ungetChar(Scanner.java:601)\n\tat org.eclipse.cdt.internal.core.parser.Scanner.nextToken(Scanner.java:1216)\n\tat org.eclipse.cdt.internal.core.parser.Scanner.nextToken(Scanner.java:633)\n\tat\norg.eclipse.cdt.internal.core.parser.Scanner.getMacroParameters(Scanner.java:2241)\n\tat org.eclipse.cdt.internal.core.parser.Scanner.expandDefinition(Scanner.java:2307)\n\tat org.eclipse.cdt.internal.core.parser.Scanner.nextToken(Scanner.java:782)\n\tat org.eclipse.cdt.internal.core.parser.Scanner.nextToken(Scanner.java:629)\n\tat org.eclipse.cdt.internal.core.parser.Parser.fetchToken(Parser.java:4979)\n\tat org.eclipse.cdt.internal.core.parser.Parser.LA(Parser.java:5012)\n\tat org.eclipse.cdt.internal.core.parser.Parser.LT(Parser.java:5031)\n\tat org.eclipse.cdt.internal.core.parser.Parser.errorHandling(Parser.java:240)\n\tat org.eclipse.cdt.internal.core.parser.Parser.translationUnit(Parser.java:205)\n\tat org.eclipse.cdt.internal.core.parser.Parser.parse(Parser.java:143)\n\tat\norg.eclipse.cdt.internal.core.search.indexing.SourceIndexer.indexFile(SourceIndexer.java:91)\n\tat\norg.eclipse.cdt.internal.core.search.indexing.AbstractIndexer.index(AbstractIndexer.java:353)\n\tat org.eclipse.cdt.internal.core.index.impl.Index.add(Index.java:110)\n\tat\norg.eclipse.cdt.internal.core.search.indexing.AddCompilationUnitToIndex.indexDocument(AddCompilationUnitToIndex.java:29)\n\tat\norg.eclipse.cdt.internal.core.search.indexing.AddFileToIndex.execute(AddFileToIndex.java:39)\n\tat\norg.eclipse.cdt.internal.core.search.processing.JobManager.run(JobManager.java:368)\n\tat java.lang.Thread.run(Thread.java:536)",
    "I do not get a NPE with the code excerpt you have provided me, running off the \nHEAD with a few extra changes of mine.  I\u0027ll look into putting in better \nerror/trace reporting so that you\u0027ll have an easier time figuring out small \nchunk of code you need to send me.  \n",
    "Added dependency to other defect which tracks the \"error reporting\" problem.  ",
    "After my visit to your office, I believe we had found that this bug had gone \naway.  Is this true, or should I keep it open still?",
    "I believe this is resolved in 1.2.1.  "
  ],
  "commentCreationDates": [
    "2003-10-21T15:46:43+02:00",
    "2003-10-21T16:07:14+02:00",
    "2003-10-21T16:48:45+02:00",
    "2003-10-21T16:49:29+02:00",
    "2003-10-21T17:17:54+02:00",
    "2003-10-21T17:35:26+02:00",
    "2003-10-21T17:50:51+02:00",
    "2003-10-21T17:53:13+02:00",
    "2003-10-21T19:28:33+02:00",
    "2003-10-23T20:40:44+02:00",
    "2004-01-14T18:17:52+01:00",
    "2004-01-31T04:15:51+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.cdt.internal.core.parser.Scanner.ungetChar",
          "source": "Scanner.java:601"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Scanner.nextToken",
          "source": "Scanner.java:1216"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Scanner.nextToken",
          "source": "Scanner.java:633"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Scanner.getMacroParameters",
          "source": "Scanner.java:2241"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Scanner.expandDefinition",
          "source": "Scanner.java:2307"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Scanner.nextToken",
          "source": "Scanner.java:782"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Scanner.nextToken",
          "source": "Scanner.java:629"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Parser.fetchToken",
          "source": "Parser.java:4979"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Parser.LA",
          "source": "Parser.java:5012"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Parser.LT",
          "source": "Parser.java:5031"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Parser.errorHandling",
          "source": "Parser.java:240"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Parser.translationUnit",
          "source": "Parser.java:205"
        },
        {
          "method": "org.eclipse.cdt.internal.core.parser.Parser.parse",
          "source": "Parser.java:143"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.SourceIndexer.indexFile",
          "source": "SourceIndexer.java:91"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.AbstractIndexer.index",
          "source": "AbstractIndexer.java:353"
        },
        {
          "method": "org.eclipse.cdt.internal.core.index.impl.Index.add",
          "source": "Index.java:110"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.AddCompilationUnitToIndex.indexDocument",
          "source": "AddCompilationUnitToIndex.java:29"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.AddFileToIndex.execute",
          "source": "AddFileToIndex.java:39"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.processing.JobManager.run",
          "source": "JobManager.java:368"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:536"
        }
      ],
      "number": 0,
      "commentIndex": 7,
      "bugId": "45274",
      "date": "2003-10-21T17:53:13+02:00",
      "product": "CDT",
      "component": "CDT-parser",
      "severity": "normal"
    }
  ],
  "groupId": "45274",
  "bugId": "45274",
  "date": "2003-10-21T15:46:43+02:00",
  "product": "CDT",
  "component": "CDT-parser",
  "severity": "normal"
}