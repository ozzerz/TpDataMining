{
  "comments": [
    "The following exception has been reported multiple times by our field crash detection tools. I don\u0027t have further information beyond this stack trace.\n\norg.eclipse.jst.j2ee.commonarchivecore.internal.exception.ManifestException: IWAE0015E An IOException occurred reading the manifest in archive: D:\\QA\\Merge\\10.0\\ejbcontrolEar\\ejbcontrolEar\\EarContent\\APP-INF\\lib\\testEJB.jar\nStack trace of nested exception:\njava.io.IOException: java.lang.IllegalStateException: zip file closed\n\tat org.eclipse.jst.j2ee.internal.componentcore.EnterpriseBinaryComponentHelper$BinaryZipFileLoadStrategy.getInputStream(EnterpriseBinaryComponentHelper.java:256)\n\tat org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ContainerImpl.primGetInputStream(ContainerImpl.java:278)\n\tat org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ContainerImpl.getInputStream(ContainerImpl.java:254)\n\tat org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ArchiveImpl.getManifest(ArchiveImpl.java:697)\n\tat org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualArchiveComponent.getManifestClasspath(J2EEModuleVirtualArchiveComponent.java:51)\n\tat org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getManifestClasspath(J2EEModuleVirtualComponent.java:108)\n\tat org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getManifestReferences(J2EEModuleVirtualComponent.java:118)\n\tat org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualArchiveComponent.getReferences(J2EEModuleVirtualArchiveComponent.java:25)\n\tat org.eclipse.jst.j2ee.internal.common.classpath.J2EEComponentClasspathContainer.update(J2EEComponentClasspathContainer.java:174)\n\tat org.eclipse.jst.j2ee.internal.common.classpath.J2EEComponentClasspathContainer.install(J2EEComponentClasspathContainer.java:281)\n\tat org.eclipse.jst.j2ee.internal.common.classpath.J2EEComponentClasspathInitializer.initialize(J2EEComponentClasspathInitializer.java:31)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer(JavaModelManager.java:1900)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer(JavaModelManager.java:1267)\n\tat org.eclipse.jdt.core.JavaCore.getClasspathContainer(JavaCore.java:1470)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:2169)",
    "Created an attachment (id\u003d81616)\nFirst of four stack traces \n\nFirst of sequence of stack traces that I think illustrates the source of this problem.  These stack traces are captured in a debug environment using WTP 2.0.1 source.  Comment to follow the attachments.",
    "Created an attachment (id\u003d81618)\nSecond of four stack traces\n\n",
    "Created an attachment (id\u003d81619)\nThird of four stack traces\n\n",
    "Created an attachment (id\u003d81620)\nFourth of four stack traces\n\n",
    "In a debug environment with a workspace containing two simple JSF projects and one simple EJB project, I set a few breakpoints and acquired the attached sequence of stack traces during workspace startup.  For fun, I had deleted the files in \".metadata\\.plugins\\org.eclipse.jdt.core\" so the \"JavaReconciler\" thread could participate.  I think the fundamental problem is that the \"archive.getManifest()\" calls in J2EEModuleVirtualArchiveComponent.getManifestClasspath() aren\u0027t thread safe.  \n\nThe problem \"begins\" in the first stack trace, where three threads: JavaReconciler, Worker-1 (a job I believe spawned by Worker-4 for the Servers view), and Worker-10 (the \"Initializing Java Tooling\" thread) are all going to attempt to read the same manifest from the same jar from the same project.  In the second stack trace, the JavaReconciler thread has taken the path to cache the Archive and the other two threads have retrieved the cached Archive.  All are ready to get the manifest.  In the third stack trace all three threads have passed the null manifest check and have gotten an InputStream.  In the fourth stack trace, the JavaReconciler thread has advanced to the point where it has read the manifest and is about to close the zip.  Once it has done so, the other threads are doomed to get zip file closed error.\n\nUnderneath all this is EnterpriseBinaryComponentHelper.BinaryZipFileLoadStrategy which provides a physicallyOpen flag, but doesn\u0027t track multiple \"opens\", allowing one thread to close the resource out from under the other threads.  Unfortunately, if the exception occurs in the \"Initializing Java Tooling\" thread, it will stop the thread and display an error dialog.\n\nI don\u0027t yet have a concrete set of steps yet that faithfully reproduces the bug.  One requirement seems to be that the Project Explorer not be visible as its initialization seems to make the offending code run earlier in startup on the main thread.  Also, the Servers view seems to reliably contribute a thread will access getManifestClasspath() if there is at least one server with a project deployed.  If there are multiple projects, it may need to be the one that the \"Initializing Java Tooling\" thread happens to look at first.  If I can find a reliable set of steps to reproduce the problem, I\u0027ll add it to the bug."
  ],
  "commentCreationDates": [
    "2007-04-17T19:13:15+02:00",
    "2007-10-30T19:19:12+01:00",
    "2007-10-30T19:19:59+01:00",
    "2007-10-30T19:20:56+01:00",
    "2007-10-30T19:21:48+01:00",
    "2007-10-30T20:01:35+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "zip file closed",
      "elements": [
        {
          "method": "org.eclipse.jst.j2ee.internal.componentcore.EnterpriseBinaryComponentHelper$BinaryZipFileLoadStrategy.getInputStream",
          "source": "EnterpriseBinaryComponentHelper.java:256"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ContainerImpl.primGetInputStream",
          "source": "ContainerImpl.java:278"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ContainerImpl.getInputStream",
          "source": "ContainerImpl.java:254"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ArchiveImpl.getManifest",
          "source": "ArchiveImpl.java:697"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualArchiveComponent.getManifestClasspath",
          "source": "J2EEModuleVirtualArchiveComponent.java:51"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getManifestClasspath",
          "source": "J2EEModuleVirtualComponent.java:108"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getManifestReferences",
          "source": "J2EEModuleVirtualComponent.java:118"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualArchiveComponent.getReferences",
          "source": "J2EEModuleVirtualArchiveComponent.java:25"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.common.classpath.J2EEComponentClasspathContainer.update",
          "source": "J2EEComponentClasspathContainer.java:174"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.common.classpath.J2EEComponentClasspathContainer.install",
          "source": "J2EEComponentClasspathContainer.java:281"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.common.classpath.J2EEComponentClasspathInitializer.initialize",
          "source": "J2EEComponentClasspathInitializer.java:31"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer",
          "source": "JavaModelManager.java:1900"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer",
          "source": "JavaModelManager.java:1267"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.getClasspathContainer",
          "source": "JavaCore.java:1470"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:2169"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "182790",
      "date": "2007-04-17T19:13:15+02:00",
      "product": "Web Tools",
      "component": "jst.j2ee",
      "severity": "normal"
    }
  ],
  "groupId": "182790",
  "bugId": "182790",
  "date": "2007-04-17T19:13:15+02:00",
  "product": "Web Tools",
  "component": "jst.j2ee",
  "severity": "normal"
}