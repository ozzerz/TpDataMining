{
  "comments": [
    "Hi,\n\nI recently upgraded to org.eclipse.cdt.sdk-3.0.0-I200506132122-win32.x86.zip, \nand my Managed Make project build started failing with missing symbols.  I \neventually tracked this down to the fact that it no longer included the .c files \nin the build, only the .cpp files (I have a mixed project).\n\nI have just tried rolling back to 3.0.0M6, and it includes the .c files fine, \nbut I can\u0027t now open files in the C/C++ Editor:\n\n!ENTRY org.eclipse.jface 4 2 2005-06-17 15:27:26.560\n!MESSAGE Problems occurred when invoking code from plug-in: \"org.eclipse.jface\".\n!STACK 0\njava.lang.NoClassDefFoundError: org/eclipse/cdt/core/filetype/ICFileType\n\tat org.eclipse.cdt.internal.ui.text.CSourceViewerConfiguration.\ngetContentAssistant(CSourceViewerConfiguration.java:220)\n\tat org.eclipse.jface.text.source.SourceViewer.configure(SourceViewer.java:\n332)\n\tat org.eclipse.cdt.internal.ui.editor.CSourceViewer.\nconfigure(CSourceViewer.java:67)\n\tat org.eclipse.ui.texteditor.AbstractTextEditor.\ncreatePartControl(AbstractTextEditor.java:2517)\n\tat org.eclipse.ui.texteditor.StatusTextEditor.\ncreatePartControl(StatusTextEditor.java:53)\n\tat org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.\ncreatePartControl(AbstractDecoratedTextEditor.java:314)\n\tat org.eclipse.cdt.internal.ui.editor.CEditor.createPartControl(CEditor.\njava:781)\n\tat org.eclipse.ui.internal.EditorReference.\ncreatePartHelper(EditorReference.java:585)\n\tat org.eclipse.ui.internal.EditorReference.createPart(EditorReference.\njava:365)\n\tat org.eclipse.ui.internal.WorkbenchPartReference.\ngetPart(WorkbenchPartReference.java:551)\n\tat org.eclipse.ui.internal.EditorReference.getEditor(EditorReference.java:\n214)\n\tat org.eclipse.ui.internal.WorkbenchPage.\nbusyOpenEditorBatched(WorkbenchPage.java:2321)\n\tat org.eclipse.ui.internal.WorkbenchPage.busyOpenEditor(WorkbenchPage.\njava:2254)\n\tat org.eclipse.ui.internal.WorkbenchPage.access$9(WorkbenchPage.java:2246)\n\tat org.eclipse.ui.internal.WorkbenchPage$9.run(WorkbenchPage.java:2232)\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)\n\tat org.eclipse.ui.internal.WorkbenchPage.openEditor(WorkbenchPage.java:\n2227)\n\tat org.eclipse.ui.internal.WorkbenchPage.openEditor(WorkbenchPage.java:\n2208)\n\tat org.eclipse.cdt.internal.ui.util.EditorUtility.\nopenInEditor(EditorUtility.java:174)\n\tat org.eclipse.cdt.internal.ui.util.EditorUtility.\nopenInEditor(EditorUtility.java:111)\n\tat org.eclipse.cdt.internal.ui.util.EditorUtility.\nopenInEditor(EditorUtility.java:91)\n\tat org.eclipse.cdt.internal.ui.cview.OpenFileGroup.\nrunDefaultAction(OpenFileGroup.java:133)\n\tat org.eclipse.cdt.internal.ui.cview.MainActionGroup.\nrunDefaultAction(MainActionGroup.java:266)\n\tat org.eclipse.cdt.internal.ui.cview.CView.handleOpen(CView.java:243)\n\tat org.eclipse.cdt.internal.ui.cview.CView$10.open(CView.java:507)\n\tat org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:\n741)\n\tat org.eclipse.core.internal.runtime.InternalPlatform.\nrun(InternalPlatform.java:1038)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:775)\n\tat org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:44)\n\tat org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:148)\n\tat org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.\njava:739)\n\tat org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.\njava:968)\n\tat org.eclipse.jface.viewers.StructuredViewer$6.\nhandleOpen(StructuredViewer.java:1067)\n\tat org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:\n243)\n\tat org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:238)\n\tat org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:\n277)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:844)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3058)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2691)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1716)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1680)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:\n365)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.\nrun(PlatformActivator.java:226)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.\njava:376)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.\njava:163)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.\ninvoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:334)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:278)\n\tat org.eclipse.core.launcher.Main.run(Main.java:973)\n\tat org.eclipse.core.launcher.Main.main(Main.java:948)\n\n\nCheers,\n\nIan",
    "I meant to say:\n\nEclipse 3.1RC2\nCDT 3.0.0-I200506132122\nWindows XP.\n\nCheers,\n\nIan",
    "I also see that .c files aren\u0027t getting included in managed C++ builds.\n\nI don\u0027t get the error traceback you did. Thing like NoClassDefFoundError errors\ncan be caused by unziping overtop of a previous CDT install. I usually start\nwith a fresh install of eclipse when I get a new CDT build. This might help there.",
    "The way the GNU tool definitions are specified is with inputTypes that are not \nmarked as primary.  This allows the contentTypes behaviour to take over. \nThat\u0027s good.\n\nHowever, the C++ content type does not have .c files mapped to it.\nThis, in theory, makes sense.  However, this prevents the .c files from being \nincluded, because the Tool reports that this extension should be filtered for \nthe C++ project nature.  That\u0027s bad.\n\nI took a look at the extension point schema and I see the following:\n\n*******************\nsourceContentType - The id of an Eclipse content type that describes this type \nof input. Either this attribute or the sources attribute must be specified by \nthis element or a superclass. If both are specified, and the content type \nspecified here is defined by Eclipse, the sources attribute is not used. \n\nsources - A comma-separated list of file extensions that identify files of \nthis input type. Note that the user will not be able to modify the set of file \nextensions as they can when sourceContentType is specified. \n*******************\n\nIf we stick with this model, then we either a) can\u0027t support building .c files \nin C++ projects, or b) have to use the \"sources\" element (i.e. a hardcoded \nextension list) and can\u0027t use content types.\n\nThere is some opposition to giving .c files an additional C++ content type so \nthat option is off the table.\n\nI am looking for feedback on what the right approach is.\n\nMy personal opinion so far is to change the model so that the implementation \nis allowed to use the union of the set of extensions from the hardcoded list \nand the content type.  It might be a bit late in the game to be making major \nchanges in the model like that though, given that API freeze was M6, and the \nextension points are a form of API.",
    "I suppose that the easiest way to make the gnu tool-chain be able to\nbuild the .c files for the managed C++ projects without changing the\nmodel and API is to define one more input type for the gnu cpp compiler\ntool definition that will specify that the c++ compiler is capable of\nbuilding the .c sources, e.g.\n\n\u003cinputType\n\tsourceContentType\u003d\"org.eclipse.cdt.core.cSource\"\n\tsources\u003d\"c\"\n\tdependencyContentType\u003d\"org.eclipse.cdt.core.cHeader\"\n\tdependencyExtensions\u003d\"h\"\n\tdependencyCalculator\u003d\"org.eclipse.cdt.managedbuilder.makegen.gnu.Default\nGCCDependencyCalculator\"\n\tid\u003d\"cdt.managedbuild.tool.gnu.cpp.compiler.c.input\"\u003e\n\u003c/inputType\u003e\n\nBut although this might be correct from the MBS point of view, this\nmight be incorrect for CDT/Eclipse in general, because by default the\ng++ will treat the .c sources as c++, but not as c. Anyway, changing the\nmodel in the way Cris proposed, that both contentType and hard-coded\nextensions are taken into account is OK for me. I suppose we might\ncurrently wait for Leo to come from vacations (later this week) because\nhe developed that code and he might know some fine points and aspects\nthat I\u0027m not aware of.\n",
    "FYI: I switched the GNU tool-chain integration to specifying the \nsourceContentType at the last moment since the content type support in Eclipse \nwas not complete until M7.  Unfortunately, I didn\u0027t anticipate this problem.\n\nI don\u0027t see any obviously \"best\" solution to this.\n\nWe could:\n\n1.  Remove the sourceContentType attribute from the Gnu C++ compiler \ndefinitions, but that would mean that a user could not modify the set of file \nextensions using the content type UI.\n\n2.  As Chris suggests, we could use the union of the sourceContentType and \nsources file extensions, but this would mean that a user could not REMOVE an \nextension that was specified in the sources attribute through the content type \nUI.\n\n3.  As Mikhail suggests, we could define a second InputType that specified the \nC source file content type.  I\u0027m not sure that this will work with the curent \nimplementation.  I think only input files of the \"primary\" input type will \ncause the generation of a rule.  A variant of this suggestion that might work \nbetter is to change sourceContentType to sourceContentTypes and allow a list.  \nEven so, there are the other issues in the rest of CDT regarding allowing C \nsource files in a C++ project.\n\nI\u0027ll think about this some more and welcome any further comments.\n",
    "Here\u0027s another idea, but it would certainly require a non-trivial amount of \nwork.  We could define \"Mixed C++/C\" project types.  The tool chain would \ncontain both compilers.  This could solve the problem for the MBS, but doesn\u0027t \nhelp the problems with the rest of CDT.\n",
    "I have a different proposal for solving this problem.  \n\nThe proposal is to not change the Gnu tool chain definition, but instead to \nhave the project user add *.c to the project specific C++ file types.  This is \na new feature that was added right before M7.  The user would need to select \nthe project -\u003e Properties -\u003e C/C++ File Types, and add *.c as a C++ file type.  \nThen the C++ project will compile .c sources.  I think this is better than \nperpetuating the prior semantics where *.c files were automatically compiled in \nC++ projects.\n\nI can investigate whether the MBS project converter can detect when an old C++ \nproject contains *.c file(s) and display a message box explaining what needs to \nbe done to make the project build in CDT 3.0.\n\nI have to make some changes to get this to work properly.  The MBS code was not \npicking up project-specific content-type settings.  In order to make this work, \nI will need to add an ITool argument to some IInputType \u0026 IOutputType methods.  \nThese are new in 3.0, so I doubt that anyone would be using them at this time.\n\nIf you have an opinion, please reply today, so that I can make the changes, if \neveryone agrees, for RC1.\n",
    "I am worried that users will not find that intuitive.  Unless they go to the \ndocs (assuming the docs will cover this), they will not know why their .c \nfiles aren\u0027t building.  You would have to spell it out for them in the wizard \nor something.\n\nPersonally I\u0027m more in favour of creating the mixed project type, although \nthat is obviously more work.",
    "I suppose that the old style (.c are building by default) is not intuitive \neither, because users might expect that .c files are to be compiled as c, not \nas c++ as done in the managed C++ Gnu projects, so I suppose that forcing user \nto explicitly specify that .c files are to be treated as c++ is a good \napproach. \nI also suppose that we should have a separate mixed project type since this is \nreally a common practice to have mixed c/c++ projects, but I\u0027m not sure whether \nwe could implement this for 3.0. \nAlso note that mixed project types will not have the same behavior as the old-\nstyle C++ gnu managed project-types, because I expect that .c files will be \ncompiled as c for the mixed gnu project type, while they were actually compiled \nas c++ for the old-style C++ gnu projects (g++ was used for compiling .c \nfiles). So if we decide to switch from the C++ project to the mixed project, \nthe user will still need to make almost the same adjustments in order to \nmake .c files compiled as c++ (as was for the CDT 2.1 C++ managed gnu projects)\n\nRegards,\nMikhail",
    "Actually, we\u0027d love to remove the whole aspect of language orientation for\nprojects. We generally use the content type in the core to figure out what kind\nof file we are working with. The only problem we have there is with .h files\nwhich could be C or C++ depending on who includes those files. Theoretically, we\ncould ask the index for this information.\n\nThe build model was originally designed to allow this. Unfortunately, Sean\ndidn\u0027t have enough time to fully implement it. But you should be able to have\nmixed languages in a project where each language invokes it\u0027s own compiler\n(tool). A common example of this is with lex/yacc files which are intermixed\nwith C and/or C++ files. Understanding the relationships between the different\ntypes of files, you should be able to generate a Makefile to handle it.",
    "(In reply to comment #10)\n\u003e The build model was originally designed to allow this. Unfortunately, Sean\n\u003e didn\u0027t have enough time to fully implement it. But you should be able to have\n\u003e mixed languages in a project where each language invokes it\u0027s own compiler\n\u003e (tool). A common example of this is with lex/yacc files which are intermixed\n\u003e with C and/or C++ files. Understanding the relationships between the different\n\u003e types of files, you should be able to generate a Makefile to handle it.\n\nI think make file generation can handle this sort of thing now.  What we don\u0027t \nhave is a UI for using a tool-chain other than one that is defined by a project \ncreation wizard.  Currently, we have project creation wizards for a \"C\" variant \nof the tool-chain, and one for a \"C++\" variant.  We don\u0027t have a wizard that \nputs both the C and C++ compilers into the tool-chain, and we have no way yet \nof adding additional tools to a tool-chain (except that Custom Build Steps do \nthis today in a very limited fashion).  \n\nSo, I definitely agree with the need to support mixed languages in the future.  \nRight now, I just want to find the best solution for the immediate problem of \nhandling CDT 2.x C++ projects that contain C source files.\n",
    "I thought that we could handle that. That\u0027s probably why I\u0027ve been confused with\nthis discussion.\n\nI guess my vote would be for C++ toolchains to contain C compilers. At least the\ngnu toolchain should. Actually, the gnu tool chain should probably contain all\nthe compiler variants that are part of the gnu compiler collection.\n\nWhich actually brings up another point. The original build model didn\u0027t have the\nconcept of toolchain. That was somewhat on purpose to allow for mixed content\ntypes and a random collection of tools. I have to admit I haven\u0027t followed\nclosely enough the evolution of the model but hopefully we can get back to where\nthat is easy to do.",
    "\u003e I guess my vote would be for C++ toolchains to contain C compilers.\n\nThe concern I have for this approach is that would complicate the compiler \nproperties UI for a project that really only used C++ files - (why are there 2 \nC compilers here for me to select?).\n\nI don\u0027t want to jump into a mixed-language solution that we might regret later \nin order to solve this problem.\n",
    "Regarding my proposal:\n\n\u003eI can investigate whether the MBS project converter can detect when an old C++ \nproject contains *.c file(s) and display a message box explaining what needs to \nbe done to make the project build in CDT 3.0.\n\nI think that I can detect these projects and automatically add the \"c\" \nextension to the project-specific C++ file list.  If so, is this an acceptable \nsolution for 3.0?\n",
    "*** Bug 102387 has been marked as a duplicate of this bug. ***",
    "I have implemented the solution proposed in comment #14.\n",
    "*** Bug 123357 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2005-06-17T16:28:15+02:00",
    "2005-06-17T16:30:02+02:00",
    "2005-06-17T20:21:26+02:00",
    "2005-06-18T04:30:28+02:00",
    "2005-06-20T15:43:01+02:00",
    "2005-06-22T21:32:58+02:00",
    "2005-06-22T21:41:44+02:00",
    "2005-06-23T20:22:27+02:00",
    "2005-06-23T20:47:43+02:00",
    "2005-06-23T21:34:26+02:00",
    "2005-06-23T22:31:11+02:00",
    "2005-06-23T22:49:35+02:00",
    "2005-06-24T02:45:32+02:00",
    "2005-06-24T05:25:50+02:00",
    "2005-06-24T05:37:27+02:00",
    "2005-06-30T21:45:45+02:00",
    "2005-07-01T17:09:47+02:00",
    "2006-06-05T15:32:29+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "org/eclipse/cdt/core/filetype/ICFileType",
      "elements": [
        {
          "method": "org.eclipse.cdt.internal.ui.text.CSourceViewerConfiguration.getContentAssistant",
          "source": "CSourceViewerConfiguration.java:220"
        },
        {
          "method": "org.eclipse.jface.text.source.SourceViewer.configure",
          "source": "SourceViewer.java: 332"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.editor.CSourceViewer.configure",
          "source": "CSourceViewer.java:67"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor.createPartControl",
          "source": "AbstractTextEditor.java:2517"
        },
        {
          "method": "org.eclipse.ui.texteditor.StatusTextEditor.createPartControl",
          "source": "StatusTextEditor.java:53"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.createPartControl",
          "source": "AbstractDecoratedTextEditor.java:314"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.editor.CEditor.createPartControl",
          "source": "CEditor. java:781"
        },
        {
          "method": "org.eclipse.ui.internal.EditorReference.createPartHelper",
          "source": "EditorReference.java:585"
        },
        {
          "method": "org.eclipse.ui.internal.EditorReference.createPart",
          "source": "EditorReference. java:365"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPartReference.getPart",
          "source": "WorkbenchPartReference.java:551"
        },
        {
          "method": "org.eclipse.ui.internal.EditorReference.getEditor",
          "source": "EditorReference.java: 214"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.busyOpenEditorBatched",
          "source": "WorkbenchPage.java:2321"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.busyOpenEditor",
          "source": "WorkbenchPage. java:2254"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.access$9",
          "source": "WorkbenchPage.java:2246"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage$9.run",
          "source": "WorkbenchPage.java:2232"
        },
        {
          "method": "org.eclipse.swt.custom.BusyIndicator.showWhile",
          "source": "BusyIndicator.java:69"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.openEditor",
          "source": "WorkbenchPage.java: 2227"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.openEditor",
          "source": "WorkbenchPage.java: 2208"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.util.EditorUtility.openInEditor",
          "source": "EditorUtility.java:174"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.util.EditorUtility.openInEditor",
          "source": "EditorUtility.java:111"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.util.EditorUtility.openInEditor",
          "source": "EditorUtility.java:91"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.cview.OpenFileGroup.runDefaultAction",
          "source": "OpenFileGroup.java:133"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.cview.MainActionGroup.runDefaultAction",
          "source": "MainActionGroup.java:266"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.cview.CView.handleOpen",
          "source": "CView.java:243"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.cview.CView$10.open",
          "source": "CView.java:507"
        },
        {
          "method": "org.eclipse.jface.viewers.StructuredViewer$2.run",
          "source": "StructuredViewer.java: 741"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1038"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:775"
        },
        {
          "method": "org.eclipse.ui.internal.JFaceUtil$1.run",
          "source": "JFaceUtil.java:44"
        },
        {
          "method": "org.eclipse.jface.util.SafeRunnable.run",
          "source": "SafeRunnable.java:148"
        },
        {
          "method": "org.eclipse.jface.viewers.StructuredViewer.fireOpen",
          "source": "StructuredViewer. java:739"
        },
        {
          "method": "org.eclipse.jface.viewers.StructuredViewer.handleOpen",
          "source": "StructuredViewer. java:968"
        },
        {
          "method": "org.eclipse.jface.viewers.StructuredViewer$6.handleOpen",
          "source": "StructuredViewer.java:1067"
        },
        {
          "method": "org.eclipse.jface.util.OpenStrategy.fireOpenEvent",
          "source": "OpenStrategy.java: 243"
        },
        {
          "method": "org.eclipse.jface.util.OpenStrategy.access$2",
          "source": "OpenStrategy.java:238"
        },
        {
          "method": "org.eclipse.jface.util.OpenStrategy$1.handleEvent",
          "source": "OpenStrategy.java: 277"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:844"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3058"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2691"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1716"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1680"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java: 365"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:143"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:103"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:226"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter. java:376"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter. java:163"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl. java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:334"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:278"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:973"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:948"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "100581",
      "date": "2005-06-17T16:28:15+02:00",
      "product": "CDT",
      "component": "cdt-build",
      "severity": "major"
    }
  ],
  "groupId": "100581",
  "bugId": "100581",
  "date": "2005-06-17T16:28:15+02:00",
  "product": "CDT",
  "component": "cdt-build",
  "severity": "major"
}