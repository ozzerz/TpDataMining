{
  "comments": [
    "Add a function like the below, and add it as a watch expression.\n\n- See picture I\u0027ll attach. It shows two different values for the\nreturn value.\n- The debugger is hung after having displayed this expression.\n\nint silly()\n{\n\treturn 5;\n}",
    "Created an attachment (id\u003d5456)\nFunction expression shows two different values\n",
    "Works for me. I believe that this is a problem specific to the you are using.\nCan you try this from the command line?",
    "\u003eWorks for me. I believe that this is a problem specific to the you are \n\u003eusing.\n\nI believe you lost a word.\n\n\"to the ?? you\"\n\n?\n\n\u003eCan you try this from the command line?\n\nNext week.\n\n?yvind\n",
    "check out bug #40698. Does it point in the direction of the problem?\n\n?yvind\n",
    "The missing words are \"version of gdb\". \nAs you mentioned the debugger hung after you added this expression to the \nexpressions view. Does it mean the crash of gdb or something else?\nI don\u0027t see any connections to the bug #40968. The JDT and CDT use completely \ndifferent mechanisms for this.",
    "\n\noharboe@lair /cygdrive/c/e21/workspace\n$ arm-elf-gdb -v\nGNU gdb 5.3 (eCosCentric)\nCopyright 2002 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"--host\u003di686-pc-cygwin --target\u003darm-elf\".\n\noharboe@lair /cygdrive/c/e21/workspace",
    "The output from GDB below should reveal the problem with GDB.\n\nHowever, there is a problem with CDT as well:\n\nWhen I right click on the silly() expression I added, the entire Eclipse GUI \nbecomes unresponsive. When I terminate the arm-elf-gdb process, the Eclipse GUI \nbecomes responsive again. It is almost as if the communication with GDB running \non the GUI thread(?).\n\n\n\nprint silly()\n1: silly() () \u003d 5\nThe program being debugged stopped while in a function called from GDB.\nWhen the function (silly()) is done executing, GDB will silently\nstop (instead of continuing to evaluate the expression containing\nthe function call).",
    "Can you please attach the trace? ",
    "\u003eCan you please attach the trace? \n\nPlease excuse my ignorance. Whats a \"trace\" in this context?\n\n?yvind\n",
    "See http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/cdt-\nhome/user/faq.html?cvsroot\u003dTools_Project#debug_50\n\n\"Can I see/log all of the commands which are being driven to gdb?\"",
    "Oyvind,\n in this particular case what is the MI timeout ?\nSee the Preference page in Debug.  The default timeout\nshould be 10 seconds so if GDB does response the MI plugin\nbails out and return the control to the UI by throwing an\nException.\n\n\u003e \u003eCan you please attach the trace? \n\n\u003e Please excuse my ignorance. Whats a \"trace\" in this context?\n\n8-), I think he meant the debug log of the commands sent\nto GDB, maybe even if the command timeout because of the lack\nof responsiveness of GDB, there is something wrong in the UI\ncode ... for example trying again and again to set the watch\nexpression.  The mi log may help sched some lights",
    "\u003e in this particular case what is the MI timeout ?\n\n100 seconds. I\u0027m uploading the app via a serial line @ 38400.\n\n\u003eSee the Preference page in Debug.  The default timeout\n\u003eshould be 10 seconds so if GDB does response the MI plugin\n\u003ebails out and return the control to the UI by throwing an\n\u003eException.\n\nIs it the intended design that the GUI is unresponsive while GDB is \nunresponsive. With embedded targets it is quite normal that GDB is unresponsive \nfor extended periods of time.\n\n?yvind",
    "Created an attachment (id\u003d5593)\nDebug trace\n\nThis is the trace up and until the GUI became unresponsive. I didn\u0027t have to do\n\nanything but add \"silly()\" as an expression. Previously I also had to right\nclick on the expression in the expressions view.\n\n?yvind\n",
    "\u003e Is it the intended design that the GUI is unresponsive while GDB is \n\u003e unresponsive. With embedded targets it is quite normal that GDB is unresponsive \n\u003e for extended periods of time.\n\nOf course not !!!\n\nBut this is the way eclipse works or any other GUI.  In eclipse\nyou have a UI thread responsible for refreshing etc .. the action\nfor refreshing the debug expression is instanciated in the UI\nthread until that thread returns no other UI task can be done.\nThis why you have a timeout.\n\nYou will have the same problem if you debug a Java application\nin the JDT/Debug if the JVM is unresponsive.  Fortunately\nthis is not a problem since most Java application is local\nand JVM proxy debuggger is a far cry from gdb in term of\nintegration and responsiveness.",
    "\u003e Is it the intended design that the GUI is unresponsive while GDB is \n\u003e unresponsive. With embedded targets it is quite normal that GDB is \nunresponsive \n\u003e for extended periods of time.\n\nOf course not !!!\n\n\u003eBut this is the way eclipse works or any other GUI.  In eclipse\n\u003eyou have a UI thread responsible for refreshing etc .. the action\n\u003efor refreshing the debug expression is instanciated in the UI\n\u003ethread until that thread returns no other UI task can be done.\n\u003eThis why you have a timeout.\n\nDo I understand you correctly if I understand that eclipse GUI thread is \nwaiting for GDB to return a value such that the expression can be updated?\n\n\n\n?yvind\n ",
    "Of course not!!! The evaluation of expression is done asynchronously. \nDo you have a breakpoint set inside the \u0027silly\u0027 function?\n \n",
    "\u003eDo you have a breakpoint set inside the \u0027silly\u0027 function?\n\nNo.\n\nIts just:\n\nint silly()\n{\nreturn 5;\n}\n\n\n\n",
    "Your trace shows that there is a breakpoint at main.cc:48. When gdb tries to \nevaluate silly() it hits this breakpoint.\nThe reason I am asking is that I reproduced the problem from the command line.\nI started gdb in the mi mode, set a breakpoint at silly. After \u0027var-create - * \nsilly()\u0027, \u0027info threads\u0027 and \u0027var-evaluate-expression var1\u0027 gdb crashed with \nsegmentation fault.",
    "Any new information on this one?",
    "PR was targeted to the 2.0 release but not resolved, moving target to 2.1",
    "let me check this out and see if it is still a problem",
    "Alain, I made the changes we discussed for the \"canStep\" and \"canStepReturn\" \nfunctions. Please, check how it works now.",
    "This still doesn\u0027t work robustly in the GUI. There are a number of different\nsymptoms:\n\n- sometimes I get no output, no error message and nothing in the GDB trace log\n- others I get two different values as indicated when this PR was submitted\n- sometimes GDB will expectedly fail to evaluate the silly() expresssion(see log\ntrace below). The GUI does not deal gracefully with this condition(session\nterminates w/exception, see below).\n\nFrom the GDB command console it works:\n\nprint silly()\n$2 \u003d 5\n\n[1,101,300,113,359] 83-interpreter-exec console \"print silly()\"\n[1,101,300,113,430] ~\"$2 \u003d 5\"\n[1,101,300,113,430] ~\"\\n\"\n[1,101,300,113,430] 83^done\n[1,101,300,113,430] (gdb) \n\n\n\n\nExample trace of silly() when it is impossible to evaluate silly():\n\n[1,101,300,377,459] 190-interpreter-exec console \"print silly()\"\n[1,101,300,377,529] ~\"\\nProgram received signal \"\n[1,101,300,377,529] ~\"SIGABRT, Aborted.\\n\"\n[1,101,300,377,539] ~\"0x0103153c in silly () at board/RIMIBoard.cc:30\\n\"\n[1,101,300,377,559] ~\"30\\t{\\n\"\n[1,101,300,377,559] \u0026\"The program being debugged was signaled while in a\nfunction called from GDB.\\n\\\n\"\n[1,101,300,377,559] \u0026\"GDB remains in the frame where the signal was received.\\n\"\n[1,101,300,377,559] \u0026\"To change this behavior use \\\"set unwindonsignal on\\\"\\n\"\n[1,101,300,377,559] \u0026\"Evaluation of the expression containing the function\n(silly()) will be abandon\\\ned.\\n\"\n[1,101,300,377,569] 190^error,msg\u003d\"The program being debugged was signaled while\nin a function calle\\\nd from GDB.\\nGDB remains in the frame where the signal was received.\\nTo change\nthis behavior use \\\"\\\nset unwindonsignal on\\\"\\nEvaluation of the expression containing the function\n(silly()) will be aban\\\ndoned.\"\n[1,101,300,377,569] (gdb) \n\n\nIf I subsequently try to add the expression, I get an exception:\n\n\n\n\norg.eclipse.cdt.debug.core.cdi.CDIException: {R,T}xThread terminated[]\n\tat org.eclipse.cdt.debug.mi.core.cdi.model.Target.getCThreads(Target.java:298)\n\tat org.eclipse.cdt.debug.mi.core.cdi.model.Target.getThreads(Target.java:319)\n\tat\norg.eclipse.cdt.debug.internal.core.model.CDebugTarget.refreshThreads(CDebugTarget.java:590)\n\tat\norg.eclipse.cdt.debug.internal.core.model.CDebugTarget.handleSuspendedEvent(CDebugTarget.java:1097)\n\tat\norg.eclipse.cdt.debug.internal.core.model.CDebugTarget.handleDebugEvents(CDebugTarget.java:892)\n\tat org.eclipse.cdt.debug.mi.core.cdi.EventManager.fireEvents(EventManager.java:253)\n\tat org.eclipse.cdt.debug.mi.core.cdi.EventManager.update(EventManager.java:221)\n\tat java.util.Observable.notifyObservers(Unknown Source)\n\tat org.eclipse.cdt.debug.mi.core.MISession.notifyObservers(MISession.java:532)\n\tat org.eclipse.cdt.debug.mi.core.EventThread.run(EventThread.java:46)\n\n\nAnd the trace:\n\n[1,101,300,521,176] 211-data-evaluate-expression silly()\n[1,101,300,521,246] \u0026\"The program being debugged was signaled while in a\nfunction called from GDB.\\n\\\n\"\n[1,101,300,521,246] \u0026\"GDB remains in the frame where the signal was received.\\n\"\n[1,101,300,521,246] \u0026\"To change this behavior use \\\"set unwindonsignal on\\\"\\n\"\n[1,101,300,521,246] \u0026\"Evaluation of the expression containing the function\n(silly()) will be abandon\\\ned.\\n\"\n[1,101,300,521,246] 211^error,msg\u003d\"The program being debugged was signaled while\nin a function calle\\\nd from GDB.\\nGDB remains in the frame where the signal was received.\\nTo change\nthis behavior use \\\"\\\nset unwindonsignal on\\\"\\nEvaluation of the expression containing the function\n(silly()) will be aban\\\ndoned.\"\n[1,101,300,521,246] (gdb) \n[1,101,300,521,246] 212-var-evaluate-expression var1\n[1,101,300,521,256]\n212^done,reason\u003d\"signal-received\",signal-name\u003d\"SIGABRT\",signal-meaning\u003d\"Aborted\"\\\n,thread-id\u003d\"0\",frame\u003d{addr\u003d\"0x0103153c\",func\u003d\"silly\",args\u003d[],file\u003d\"board/RIMIBoard.cc\",line\u003d\"30\"},va\\\nlue\u003d\"{int (void)} 0x1031538 \u003csilly()\u003e\"\n[1,101,300,521,256] (gdb) \n[1,101,300,521,256] 213-stack-info-depth\n[1,101,300,521,266] 214-stack-info-depth\n[1,101,300,521,426] 215-gdb-exit\n",
    "\u003e This still doesn\u0027t work robustly in the GUI. There are a number of different\n\u003e symptoms:\n\nThere is not much we can do, according to your trace gdb died.\nThe problem here is that there is no way we can make a distinction\nbetween gdb going berzerk and normal operation.  So commands\nwill timeout and eventually yes the UI will respond.\n\nThe current head/branch there is some improvement not\nto lock the UI ... but at some point we do need to synchronize.\n\nI will turn this to \"WONTFIX\", if you reopen it, please\nmake the Target Milestone be 3.0  we should no longer stall\nCDT-2.1 for this PR 8-).\n\nThe real fix ... fix gdb.\nBTW my version of gdb is not as bad, alltough I do see your\nproblem.  It will happen only if I have a breakpoint in\nthe function that I\u0027m trying to evaluate.\nIn this case gdb goes bye bye ..\n\n ",
    "This PR is basically about being able to watch expressions like \"silly()\". \n\nThere are various things in this PR that are not going to be pursued, but I\u0027m\njust reopening and retargeting for 3.0, rather than distilling a fresh PR with\nonly the useful and relevant bits since I want to concentrate on other things\nright now.\n\n?yvind\n",
    "\u003e This PR is basically about being able to watch expressions like \"silly()\". \n\n\u003e There are various things in this PR that are not going to be pursued, but I\u0027m\n\u003e just reopening and retargeting for 3.0, rather than distilling a fresh PR with\n\u003e only the useful and relevant bits since I want to concentrate on other things\n\u003e right now.\n\nIf you want, but this can not be \"fixed\", for a number of reasons:\n\n- It is not a problem within the CDT, but rather GDB handling\n  of such expression.\n\n- if you put a breakpoint in function, then ask gdb to evaluate\n  that function call, well bad things happened.\n\nThe correct fix I suppose would be for gdb to remove the breakpoints\nwhen evaluating such expression (probably not easy, since gdb would\nhave to parse the expression see if contains call that may trigger\na breakpoint etc ...)\n\n- In my latest GDB version, it can handle function call evaluation\n  in an expression without too much trouble ... but sometimes\n  GDB becomes unresponsive and the user is left with no other choice\nthen restart the launch.\n\nI do think CDT handles things good, at least in the latest version.\n\nI would like to flip this to \"WONTFIX\" if you do not mind.\n",
    "\u003eI would like to flip this to \"WONTFIX\" if you do not mind.\n\nI don\u0027t see a problem with WONTFIX\u0027ing this PR, as long as evaluating\nexpressions containing fairly well behaved functions is part of CDT\u0027s defined\nfeature set. :-)\n\n?yvind\n",
    "\u003e I don\u0027t see a problem with WONTFIX\u0027ing this PR,\n\nThanks,  this will allow to move along.\n\n\u003e as long as evaluating expressions containing fairly well\n\u003e behaved functions is part of CDT\u0027s defined feature set. :-)\n\nWell we probably will have to come back to this issue, one\nof the feature is for the CDT/debugger to evaluate a snippet of\ncode, the same way JDT is doing.  for example:\n\"\n{\n  int y \u003d 0;\n  if (x \u003d\u003d 4) {\n     y \u003d function(x + 1);\n  } else {\n     y \u003d funtion(x)\n  }\n  return y;\n}\n\"\n\nSo to provide such a feature we will have to do function call\nevaluation ...\n\nBut this is way way down the road.\n"
  ],
  "commentCreationDates": [
    "2003-07-15T12:07:05+02:00",
    "2003-07-15T12:07:37+02:00",
    "2003-07-21T18:02:49+02:00",
    "2003-07-23T20:50:27+02:00",
    "2003-07-24T19:13:09+02:00",
    "2003-07-24T20:19:06+02:00",
    "2003-07-30T09:26:38+02:00",
    "2003-07-30T09:54:13+02:00",
    "2003-07-30T23:11:02+02:00",
    "2003-07-30T23:19:29+02:00",
    "2003-07-30T23:41:04+02:00",
    "2003-07-31T03:11:26+02:00",
    "2003-07-31T09:27:06+02:00",
    "2003-07-31T09:35:43+02:00",
    "2003-07-31T15:58:26+02:00",
    "2003-07-31T16:08:08+02:00",
    "2003-07-31T17:11:13+02:00",
    "2003-07-31T17:13:28+02:00",
    "2003-07-31T17:51:41+02:00",
    "2003-09-30T19:34:26+02:00",
    "2004-07-07T22:33:40+02:00",
    "2004-11-22T20:32:19+01:00",
    "2004-11-24T00:00:49+01:00",
    "2004-11-24T12:50:10+01:00",
    "2004-11-24T22:01:27+01:00",
    "2004-11-25T08:51:19+01:00",
    "2004-11-29T17:40:44+01:00",
    "2004-11-29T18:47:41+01:00",
    "2004-11-29T18:55:14+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.cdt.debug.core.cdi.CDIException",
      "message": "{R,T}xThread terminated[]",
      "elements": [
        {
          "method": "org.eclipse.cdt.debug.mi.core.cdi.model.Target.getCThreads",
          "source": "Target.java:298"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.cdi.model.Target.getThreads",
          "source": "Target.java:319"
        },
        {
          "method": "org.eclipse.cdt.debug.internal.core.model.CDebugTarget.refreshThreads",
          "source": "CDebugTarget.java:590"
        },
        {
          "method": "org.eclipse.cdt.debug.internal.core.model.CDebugTarget.handleSuspendedEvent",
          "source": "CDebugTarget.java:1097"
        },
        {
          "method": "org.eclipse.cdt.debug.internal.core.model.CDebugTarget.handleDebugEvents",
          "source": "CDebugTarget.java:892"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.cdi.EventManager.fireEvents",
          "source": "EventManager.java:253"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.cdi.EventManager.update",
          "source": "EventManager.java:221"
        },
        {
          "method": "java.util.Observable.notifyObservers",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.MISession.notifyObservers",
          "source": "MISession.java:532"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.EventThread.run",
          "source": "EventThread.java:46"
        }
      ],
      "number": 0,
      "commentIndex": 23,
      "bugId": "40087",
      "date": "2004-11-24T12:50:10+01:00",
      "product": "CDT",
      "component": "cdt-debug",
      "severity": "normal"
    }
  ],
  "groupId": "40087",
  "bugId": "40087",
  "date": "2003-07-15T12:07:05+02:00",
  "product": "CDT",
  "component": "cdt-debug",
  "severity": "normal"
}