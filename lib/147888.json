{
  "comments": [
    "I am getting the following error when trying to connect to Jira repository that is using https protocol (server was upgraded to Jira 3.6.2-#156). It seems like http protocol is disabled there.\n\nAnother trouble is that JiraServerFacade.validateServerAndCredentials() method returns true/false and does not show the real error. I believe method should be void and it shoud rethrow exception. So, \"validate connection\" would be able to actually tell why user can\u0027t login.\n\norg.tigris.jira.core.service.exceptions.ServiceUnavailableException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n\tat org.tigris.jira.internal.core.service.soap.SoapJiraService.getServerInfo(SoapJiraService.java:161)\n\tat org.tigris.jira.core.service.CachedRpcJiraServer.initializeServerInfo(CachedRpcJiraServer.java:378)\n\tat org.tigris.jira.core.service.CachedRpcJiraServer.getServerInfo(CachedRpcJiraServer.java:427)\n\tat org.tigris.jira.core.ServerManager.testConnection(ServerManager.java:116)\n\tat org.eclipse.mylar.internal.jira.JiraServerFacade.validateServerAndCredentials(JiraServerFacade.java:132)\n\tat org.eclipse.mylar.internal.jira.ui.wizards.JiraRepositorySettingsPage$1.run(JiraRepositorySettingsPage.java:79)\n\tat org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:113)\n\nUnderneath failure is:\n\nAxisFault\n faultCode: {http://schemas.xmlsoap.org/soap/envelope/}Server.userException\n faultSubcode: \n faultString: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n faultActor: \n faultNode: \n faultDetail: \n\t{http://xml.apache.org/axis/}stackTrace:javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n\tat com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:150)\n\tat com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1476)\n\tat com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:174)\n\tat com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:168)\n\tat com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:847)\n\tat com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:106)\n\tat com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:495)\n\tat com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:433)\n\tat com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:815)\n\tat com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1025)\n\tat com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:619)\n\tat com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59)\n\tat java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\n\tat java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\n\tat org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody(EntityEnclosingMethod.java:502)\n\tat org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:1973)\n\tat org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:993)\n\tat org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:397)\n\tat org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:170)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:396)\n\tat org.apache.axis.transport.http.CommonsHTTPSender.invoke(CommonsHTTPSender.java:196)\n\tat org.apache.axis.strategies.InvocationStrategy.visit(InvocationStrategy.java:32)\n\tat org.apache.axis.SimpleChain.doVisiting(SimpleChain.java:118)\n\tat org.apache.axis.SimpleChain.invoke(SimpleChain.java:83)\n\tat org.apache.axis.client.AxisClient.invoke(AxisClient.java:165)\n\tat org.apache.axis.client.Call.invokeEngine(Call.java:2784)\n\tat org.apache.axis.client.Call.invoke(Call.java:2767)\n\tat org.apache.axis.client.Call.invoke(Call.java:2443)\n\tat org.apache.axis.client.Call.invoke(Call.java:2366)\n\tat org.apache.axis.client.Call.invoke(Call.java:1812)\n\tat com.contegix.atlassian01.rpc.soap.jirasoapservice_v2.JirasoapserviceV2SoapBindingStub.getServerInfo(JirasoapserviceV2SoapBindingStub.java:1635)\n\tat org.tigris.jira.internal.core.service.soap.SoapJiraService.getServerInfo(SoapJiraService.java:159)\n\tat org.tigris.jira.core.service.CachedRpcJiraServer.initializeServerInfo(CachedRpcJiraServer.java:378)\n\tat org.tigris.jira.core.service.CachedRpcJiraServer.getServerInfo(CachedRpcJiraServer.java:427)\n\tat org.tigris.jira.core.ServerManager.testConnection(ServerManager.java:116)\n\tat org.eclipse.mylar.internal.jira.JiraServerFacade.validateServerAndCredentials(JiraServerFacade.java:132)\n\tat org.eclipse.mylar.internal.jira.ui.wizards.JiraRepositorySettingsPage$1.run(JiraRepositorySettingsPage.java:79)\n\tat org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:113)\nCaused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n\tat sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:221)\n\tat sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:145)\n\tat sun.security.validator.Validator.validate(Validator.java:203)\n\tat com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:172)\n\tat com.sun.net.ssl.internal.ssl.JsseX509TrustManager.checkServerTrusted(SSLContextImpl.java:320)\n\tat com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:840)\n\t... 33 more\nCaused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n\tat sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:236)\n\tat java.security.cert.CertPathBuilder.build(CertPathBuilder.java:194)\n\tat sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:216)\n\t... 38 more",
    "Not sure how to do this with Axis, but commons HttpClient allows to specify custom SSL ssocket factory and you can use EasySSLProtocolSocketFactory that allow to authenticate with a self-signed certificates.\n\nSee http://jakarta.apache.org/commons/httpclient/sslguide.html",
    "Brock, can you please look at this? \n\nThe only workaround for this right now is to fetch SSL certificate from http connection and manually import it into the default key stire, which is very inconvenient and ugly.",
    "You will also notice that EasySSLProtocolSocketFactory is *not* for production use.  Certificates are there for your safety, ignoring an invalid certificate is not a smart idea.  The workaround is not as complex as you make it sound.  It only has to be done once and not at all if you have your certificate signed by a valid CA.  If you don\u0027t care about security, don\u0027t use SSL.\n\nIf you are in a corporate environment and can\u0027t afford a valid certificate, why not make your own root CA certificate and install that on all machines.  Any certificate signed by that root certificate will then be considered valid.\n\nA better approach would be to maintain a private keystore and prompt the user when an invalid certificate is encountered (adding it to the private keystore if accepted).  I don\u0027t have the time to implement this, but patches would be considered.",
    "(In reply to comment #3)\n\u003e You will also notice that EasySSLProtocolSocketFactory is *not* for production\n\u003e use.  Certificates are there for your safety, ignoring an invalid certificate\n\u003e is not a smart idea.  The workaround is not as complex as you make it sound. \n\u003e It only has to be done once and not at all if you have your certificate signed\n\u003e by a valid CA.  If you don\u0027t care about security, don\u0027t use SSL.\n\nI don\u0027t care about security and yet I have no option to not use SSL. Jira server is not kind of thing where I need to be paranoid like that, so solution like EasySSLProtocolSocketFactory should be acceptable.\n\n\u003e If you are in a corporate environment and can\u0027t afford a valid certificate, why\n\u003e not make your own root CA certificate and install that on all machines.  Any\n\u003e certificate signed by that root certificate will then be considered valid.\n\nThis is the troublesome part. I have to get to owners of that server and request this certificate, then I have to copy this certificate into every JRE instance that can be used to run Eclipse... on every machine around. Well, I don\u0027t consider this a natural task, especially for not critical content such as Jira access.\n\n\u003e A better approach would be to maintain a private keystore and prompt the user\n\u003e when an invalid certificate is encountered (adding it to the private keystore\n\u003e if accepted).  I don\u0027t have the time to implement this, but patches would be\n\u003e considered.\n\nSuch keystore already provided by Eclipse platform and I would be happy to look at the UI part if you can tell me how to make Axis to use custom SSL factory.",
    "I\u0027ll assume that you guys are looking into this.  Eugene, if you aren\u0027t able to resolve it we should at least get your experiences/instructions into the FAQ (perhaps moving the FAQ to the Wiki if that makes it easier).",
    "An issue should be created in the Jira dashboard issue tracker for this one as nothing can be done in Mylar to fix it.\n\nFixing this issue isn\u0027t as simple as it looks.  It requires writing a socket connection factory for Commons HTTP client and a HTTP Sender for Axis (extending the Commons HTTP Sender).  It might be possible to store certificates in the Eclipse key chain, but it wasn\u0027t designed for it.",
    "(In reply to comment #6)\n\u003e An issue should be created in the Jira dashboard issue tracker for this one as\n\u003e nothing can be done in Mylar to fix it.\n\nAre you suggesting that we should create it for you? :-)\n\n\u003e Fixing this issue isn\u0027t as simple as it looks.  It requires writing a socket\n\u003e connection factory for Commons HTTP client and a HTTP Sender for Axis\n\u003e (extending the Commons HTTP Sender).  It might be possible to store\n\u003e certificates in the Eclipse key chain, but it wasn\u0027t designed for it.\n\nStrange. It seems SVN and CVS are storing this stuff anyways...",
    "(In reply to comment #5)\n\u003e I\u0027ll assume that you guys are looking into this.  Eugene, if you aren\u0027t able to\n\u003e resolve it we should at least get your experiences/instructions into the FAQ\n\u003e (perhaps moving the FAQ to the Wiki if that makes it easier).\n\nMik, I wouldn\u0027t advice anyone to do what I did. Basically even if I could get an SSL key from the server owners there is good chance that it would be in some format that java keytool won\u0027t understand and one would require some 3rd party tool to import it. In my case I can\u0027t get it from admins, so I fetched it from the http connection. then keytool failed with NPE on import, so I had to write another tool to read certstore and append fetched certificate there.",
    "SVN stores them in their own key store (JavaHL and JavaSVN store them in different places).  Not sure what CVS does (think it saves them in a .ssh folder in your home directory).\n\neasy way to install a certificate:\nGo to the site with IE\nAccept certificate\ngo to internet options | content | certificates...\nExport the certificate as der encoded .cer format\nimport it into java\u0027s ca keystore (keytool -importcert -file \u003cfile.cer\u003e -alias \u003calias\u003e -trustcacerts\nWhen prompted for a keystore password enter \"changeit\"\n(this is all from memory, so may be a bit wrong)",
    "(In reply to comment #9)\n\u003e SVN stores them in their own key store (JavaHL and JavaSVN store them in\n\u003e different places).  Not sure what CVS does (think it saves them in a .ssh\n\u003e folder in your home directory).\n\nI am pretty sure JavaSVN added support for Eclipse key chain and for some reason also thought that CVS had it all the time (no it does not save this stuff in .ssh folder)\n\n\u003e easy way to install a certificate:\n\u003e Go to the site with IE\n\u003e Accept certificate\n\u003e go to internet options | content | certificates...\n\u003e Export the certificate as der encoded .cer format\n\u003e import it into java\u0027s ca keystore (keytool -importcert -file \u003cfile.cer\u003e -alias\n\u003e \u003calias\u003e -trustcacerts\n\u003e When prompted for a keystore password enter \"changeit\"\n\u003e (this is all from memory, so may be a bit wrong)\n\nHaven\u0027t tried with IE and FireFox does not have export. Ayways, I wouldn\u0027t recomment anyone to mess up with default cert store...",
    "(In reply to comment #10)\n\u003e I am pretty sure JavaSVN added support for Eclipse key chain and for some\n\u003e reason also thought that CVS had it all the time (no it does not save this\n\u003e stuff in .ssh folder)\n\nversion 0.8.6\n...\n+ SVNClient: auth info is stored in Eclipse key ring when used within Eclipse.\n\nhttp://svn.tmate.org/repos/jsvn/tags/1.1.0.beta2/changelog.txt",
    "However you are right about CVS ssh2 support. It does store ssh keys in \u003chome\u003e/ssh folder by default. Probably for interoperability with the command line cvs client.",
    "I assume you mean EclipseSVNAuthenticationManager (in JavaSVN).  It does use the platform authorization info stuff, but iy doesn\u0027t store the certificate, just the location of it.  The point is there doesn\u0027t appear to be a common trust manager for Eclipse.  JavaSVN has two different places it can store certificates, JavaHL has another and CVS has yet another.\n\nIt looks like something may come out of the equinox project: http://www.eclipse.org/equinox/incubator/security/EJS/rcp/keystore.html\n\nUsing an always accept trust store is an option, so long as it doesn\u0027t affect anyone else using Commons HTTP Client or Axis.  So no setting of global socket factories or system properties.",
    "By the way, bug 144256 seem related.\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d144256 ",
    "Yes, Brock you may want to look at that because Nathan fixed this problem in Bugzilla by providing a ProtocolSocketFactory.  You can retrieve a context or just look at the patch (if you feel like squinting).\n\nEugene, are you going to file a JIRA bug for this?  If so you can mark this one for LATER so that we remenber to follow up at some point.  I sort of wish we could mark as blocked by the JIRA issue, or clone this as a JIRA issue, one day...",
    "(In reply to comment #15)\n\u003e Eugene, are you going to file a JIRA bug for this?  If so you can mark this one\n\u003e for LATER so that we remenber to follow up at some point.  I sort of wish we\n\u003e could mark as blocked by the JIRA issue, or clone this as a JIRA issue, one\n\u003e day...\n\nI\u0027d prefer not to close it. Maybe Brock will have chance to fix it the same way as done for Bugzilla even so he is against this way of doing that. See his comments at http://developer.atlassian.com/jira/browse/JDB-108",
    "bug 144256 has the right idea, but it doesn\u0027t work in one very specific case (which Jira uses).  If the server returns you a redirect response code and you are using automatic redirection the custom protocol handler is lost because the redirect URI is absolute, not relative.  This may be a bug or a feature in HTTPClient.\n\nAxis is also using HTTP Client incorrectly which makes it impossible to use per hsot protocol configurations (they are using absolute URIs).  Working around this bug requires copying the entire CommonsHTTPClient class and making a few small changes.\n\nRegistering a global protocol handler would fix both of these cases, but would prevent us ever using a shared HTTPClient plugin.  For now it might be best to go with registering a global handler and adding another issue to fix it up at some point.",
    "Where do we stand with this?  Should we add a FAQ entry for the time being?",
    "I have tried quite a few options, but none of them worked fully.  For me to fix this properly will require a large amount of re-writing.  I am very tempted to just wait and see what comes out of the equinox security project.  They might come up with an eclipse managed trust store that overlays the JDK one and is responsible for prompting the user to accept new/untrusted certificates.\n\nFOr now it would be best to just have an FAQ for this one.",
    "It would be great if you could add a note to the FAQ on this.  To make this easier I just turned the FAQ into a Wiki: http://wiki.eclipse.org/index.php/Mylar_FAQ#JIRA_Connector_troubleshooting\n\nAlso note that we just generalized the Bugzilla Connector\u0027s SSL support in mylar.internal.tasks.core.UrlConnectionUtil and have a socket factory and trust manager.",
    "(In reply to comment #20)\n\u003e Also note that we just generalized the Bugzilla Connector\u0027s SSL support in\n\u003e mylar.internal.tasks.core.UrlConnectionUtil and have a socket factory and trust\n\u003e manager.\n\nHttpsURLConnection.setDefaultSSLSocketFactory(ctx.getSocketFactory());\n\nDoesn\u0027t seem a good idea to me. It is probably better to use common httpclient instead.",
    "*** Bug 150175 has been marked as a duplicate of this bug. ***",
    "I just sarted experimenting with Mylar (0.7). We have a Jira repository that uses SSL with a self-signed certificate. I have imported the root certificate into the certificate store of the JRE that is running eclipse but I still get the \"SunCertPathBuilderException: unable to find valid certification path to requested target\" exception.\n\nIs there any workaround for this I can use until this issue is resolved ?",
    "Importing certificate is the workaround. You need to make sure that you imported certificate using correct alias.",
    "What is the \"correct alias\" ? Could you please give a little more detail on how to to this ?",
    "Alias is the same as your host name.",
    "(In reply to comment #26)\n\u003e Alias is the same as your host name.\n\u003e \n\nHow do I do this ?\n\nI have a server certificate that I\u0027ve imported into my JRE store using the keytool. I\u0027ve looked inside and it has no hard domain names in it. \n\nI DO know that the Jira server I\u0027m connecting to has multiple domain names but I don\u0027t kow which one the JRE is complaining about,\n\n",
    "(In reply to comment #27)\n\u003e (In reply to comment #26)\n\nMy apologies. I forgot to also import the signing certificate as a trusted signer. The Jira  repository works fine now.\n",
    "Sounds like this would make another good FAQ entry (http://wiki.eclipse.org/index.php/Mylar_FAQ).",
    "It would be much better to fix this issue. I wouldn\u0027t recommend to mess around with default keystore... I hope to look at this next week, unless Brock have chance to.",
    "Eugene, assigning to you for now since I\u0027m not sure if/when Brock will get to it.",
    "I attached working patch to jira soap services at http://developer.atlassian.com/jira/browse/JDB-108",
    "Great. \n\nBrock: can we have that patch applied by early next week so that we can get this into the Mylar 0.9 release?",
    "Brock: any news on this patch?  More people are encountering this problem.",
    "*** Bug 164265 has been marked as a duplicate of this bug. ***",
    "Eugene: it looks like Brock has applied the patch.  Could you synch org.tigris.jira.* and check?",
    "(In reply to comment #36)\n\u003e Eugene: it looks like Brock has applied the patch.  Could you synch\n\u003e org.tigris.jira.* and check?\n\nRight. He did applied my patch and also did few other fixes (including evil hack for reading proxy setting from http.proxyHost and http.proxyPort system properties).\n\nJira services 0.9.3 is on his update site. So, you may be able to check it yourself...\n\n",
    "I\u0027ve tested with code from the HEAD and latest jira services from svn and now I don\u0027t need to import certificate. So it is resolved.",
    "That\u0027s really great Eugene, this one was really getting in a lot of peoples way.  And thanks for getting the patches applied in time for our next release Brock.  The fix is in dev build 0.9.0.v20061124-0730, which should be available in 15-30 min.  If anyone else having this problem could try it out and verify that would be great:\n\n\thttp://www.eclipse.org/mylar/dl.php\n\nEugene, could you take a quick pass at updating any stale instructions in this FAQ section?\n\n\thttp://wiki.eclipse.org/index.php/Mylar_FAQ#JIRA_Connector_troubleshooting",
    "I can\u0027t verify most of the stuff from that section, but if all of it working, then page is correct. :-)"
  ],
  "commentCreationDates": [
    "2006-06-20T17:39:04+02:00",
    "2006-06-20T20:12:58+02:00",
    "2006-06-21T00:15:58+02:00",
    "2006-06-21T00:34:04+02:00",
    "2006-06-21T00:41:45+02:00",
    "2006-06-22T02:27:34+02:00",
    "2006-06-22T02:35:36+02:00",
    "2006-06-22T02:47:21+02:00",
    "2006-06-22T02:52:31+02:00",
    "2006-06-22T03:10:00+02:00",
    "2006-06-22T03:43:42+02:00",
    "2006-06-22T04:32:17+02:00",
    "2006-06-22T04:37:35+02:00",
    "2006-06-22T12:22:10+02:00",
    "2006-06-22T23:53:55+02:00",
    "2006-06-23T02:56:37+02:00",
    "2006-06-23T04:19:21+02:00",
    "2006-06-24T08:44:25+02:00",
    "2006-07-15T03:19:38+02:00",
    "2006-07-15T03:35:36+02:00",
    "2006-07-27T20:43:50+02:00",
    "2006-07-27T21:04:12+02:00",
    "2006-07-27T23:07:01+02:00",
    "2006-10-19T14:37:55+02:00",
    "2006-10-19T15:22:06+02:00",
    "2006-10-19T16:47:06+02:00",
    "2006-10-19T16:51:22+02:00",
    "2006-10-19T17:46:25+02:00",
    "2006-10-19T18:00:48+02:00",
    "2006-10-19T18:15:30+02:00",
    "2006-10-19T18:18:45+02:00",
    "2006-10-20T08:46:25+02:00",
    "2006-10-31T15:35:07+01:00",
    "2006-11-02T20:47:15+01:00",
    "2006-11-14T04:04:34+01:00",
    "2006-11-14T17:35:18+01:00",
    "2006-11-22T00:17:04+01:00",
    "2006-11-22T00:44:50+01:00",
    "2006-11-24T06:04:17+01:00",
    "2006-11-24T16:27:10+01:00",
    "2006-11-24T17:01:27+01:00"
  ],
  "traces": [
    {
      "exceptionType": "sun.security.provider.certpath.SunCertPathBuilderException",
      "message": "unable to find valid certification path to requested target",
      "elements": [
        {
          "method": "org.tigris.jira.internal.core.service.soap.SoapJiraService.getServerInfo",
          "source": "SoapJiraService.java:161"
        },
        {
          "method": "org.tigris.jira.core.service.CachedRpcJiraServer.initializeServerInfo",
          "source": "CachedRpcJiraServer.java:378"
        },
        {
          "method": "org.tigris.jira.core.service.CachedRpcJiraServer.getServerInfo",
          "source": "CachedRpcJiraServer.java:427"
        },
        {
          "method": "org.tigris.jira.core.ServerManager.testConnection",
          "source": "ServerManager.java:116"
        },
        {
          "method": "org.eclipse.mylar.internal.jira.JiraServerFacade.validateServerAndCredentials",
          "source": "JiraServerFacade.java:132"
        },
        {
          "method": "org.eclipse.mylar.internal.jira.ui.wizards.JiraRepositorySettingsPage$1.run",
          "source": "JiraRepositorySettingsPage.java:79"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:113"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "147888",
      "date": "2006-06-20T17:39:04+02:00",
      "product": "Mylyn",
      "component": "Jira",
      "severity": "blocker"
    },
    {
      "exceptionType": "sun.security.provider.certpath.SunCertPathBuilderException",
      "message": "unable to find valid certification path to requested target",
      "elements": [
        {
          "method": "com.sun.net.ssl.internal.ssl.Alerts.getSSLException",
          "source": "Alerts.java:150"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal",
          "source": "SSLSocketImpl.java:1476"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.Handshaker.fatalSE",
          "source": "Handshaker.java:174"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.Handshaker.fatalSE",
          "source": "Handshaker.java:168"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate",
          "source": "ClientHandshaker.java:847"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage",
          "source": "ClientHandshaker.java:106"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.Handshaker.processLoop",
          "source": "Handshaker.java:495"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.Handshaker.process_record",
          "source": "Handshaker.java:433"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord",
          "source": "SSLSocketImpl.java:815"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake",
          "source": "SSLSocketImpl.java:1025"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord",
          "source": "SSLSocketImpl.java:619"
        },
        {
          "method": "com.sun.net.ssl.internal.ssl.AppOutputStream.write",
          "source": "AppOutputStream.java:59"
        },
        {
          "method": "java.io.BufferedOutputStream.flushBuffer",
          "source": "BufferedOutputStream.java:65"
        },
        {
          "method": "java.io.BufferedOutputStream.flush",
          "source": "BufferedOutputStream.java:123"
        },
        {
          "method": "org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody",
          "source": "EntityEnclosingMethod.java:502"
        },
        {
          "method": "org.apache.commons.httpclient.HttpMethodBase.writeRequest",
          "source": "HttpMethodBase.java:1973"
        },
        {
          "method": "org.apache.commons.httpclient.HttpMethodBase.execute",
          "source": "HttpMethodBase.java:993"
        },
        {
          "method": "org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry",
          "source": "HttpMethodDirector.java:397"
        },
        {
          "method": "org.apache.commons.httpclient.HttpMethodDirector.executeMethod",
          "source": "HttpMethodDirector.java:170"
        },
        {
          "method": "org.apache.commons.httpclient.HttpClient.executeMethod",
          "source": "HttpClient.java:396"
        },
        {
          "method": "org.apache.axis.transport.http.CommonsHTTPSender.invoke",
          "source": "CommonsHTTPSender.java:196"
        },
        {
          "method": "org.apache.axis.strategies.InvocationStrategy.visit",
          "source": "InvocationStrategy.java:32"
        },
        {
          "method": "org.apache.axis.SimpleChain.doVisiting",
          "source": "SimpleChain.java:118"
        },
        {
          "method": "org.apache.axis.SimpleChain.invoke",
          "source": "SimpleChain.java:83"
        },
        {
          "method": "org.apache.axis.client.AxisClient.invoke",
          "source": "AxisClient.java:165"
        },
        {
          "method": "org.apache.axis.client.Call.invokeEngine",
          "source": "Call.java:2784"
        },
        {
          "method": "org.apache.axis.client.Call.invoke",
          "source": "Call.java:2767"
        },
        {
          "method": "org.apache.axis.client.Call.invoke",
          "source": "Call.java:2443"
        },
        {
          "method": "org.apache.axis.client.Call.invoke",
          "source": "Call.java:2366"
        },
        {
          "method": "org.apache.axis.client.Call.invoke",
          "source": "Call.java:1812"
        },
        {
          "method": "com.contegix.atlassian01.rpc.soap.jirasoapservice_v2.JirasoapserviceV2SoapBindingStub.getServerInfo",
          "source": "JirasoapserviceV2SoapBindingStub.java:1635"
        },
        {
          "method": "org.tigris.jira.internal.core.service.soap.SoapJiraService.getServerInfo",
          "source": "SoapJiraService.java:159"
        },
        {
          "method": "org.tigris.jira.core.service.CachedRpcJiraServer.initializeServerInfo",
          "source": "CachedRpcJiraServer.java:378"
        },
        {
          "method": "org.tigris.jira.core.service.CachedRpcJiraServer.getServerInfo",
          "source": "CachedRpcJiraServer.java:427"
        },
        {
          "method": "org.tigris.jira.core.ServerManager.testConnection",
          "source": "ServerManager.java:116"
        },
        {
          "method": "org.eclipse.mylar.internal.jira.JiraServerFacade.validateServerAndCredentials",
          "source": "JiraServerFacade.java:132"
        },
        {
          "method": "org.eclipse.mylar.internal.jira.ui.wizards.JiraRepositorySettingsPage$1.run",
          "source": "JiraRepositorySettingsPage.java:79"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:113"
        }
      ],
      "causedBy": {
        "exceptionType": "sun.security.provider.certpath.SunCertPathBuilderException",
        "message": "unable to find valid certification path to requested target",
        "elements": [
          {
            "method": "sun.security.validator.PKIXValidator.doBuild",
            "source": "PKIXValidator.java:221"
          },
          {
            "method": "sun.security.validator.PKIXValidator.engineValidate",
            "source": "PKIXValidator.java:145"
          },
          {
            "method": "sun.security.validator.Validator.validate",
            "source": "Validator.java:203"
          },
          {
            "method": "com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted",
            "source": "X509TrustManagerImpl.java:172"
          },
          {
            "method": "com.sun.net.ssl.internal.ssl.JsseX509TrustManager.checkServerTrusted",
            "source": "SSLContextImpl.java:320"
          },
          {
            "method": "com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate",
            "source": "ClientHandshaker.java:840"
          }
        ],
        "causedBy": {
          "exceptionType": "sun.security.provider.certpath.SunCertPathBuilderException",
          "message": "unable to find valid certification path to requested target",
          "elements": [
            {
              "method": "sun.security.provider.certpath.SunCertPathBuilder.engineBuild",
              "source": "SunCertPathBuilder.java:236"
            },
            {
              "method": "java.security.cert.CertPathBuilder.build",
              "source": "CertPathBuilder.java:194"
            },
            {
              "method": "sun.security.validator.PKIXValidator.doBuild",
              "source": "PKIXValidator.java:216"
            }
          ],
          "number": 0,
          "commentIndex": 0
        },
        "number": 0,
        "commentIndex": 0
      },
      "number": 1,
      "commentIndex": 0,
      "bugId": "147888",
      "date": "2006-06-20T17:39:04+02:00",
      "product": "Mylyn",
      "component": "Jira",
      "severity": "blocker"
    }
  ],
  "groupId": "147888",
  "bugId": "147888",
  "date": "2006-06-20T17:39:04+02:00",
  "product": "Mylyn",
  "component": "Jira",
  "severity": "blocker"
}