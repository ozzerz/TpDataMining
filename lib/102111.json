{
  "comments": [
    "Version: 3.1.0\nBuild id: I20050617-1618\n\nI got the following null pointer exception when synchronizing some projects.  I\nam unable to reproduce this error.\n\njava.lang.NullPointerException\n    at\norg.eclipse.team.internal.ui.synchronize.CompositeModelProvider.clearProviders(CompositeModelProvider.java:241)\n    at\norg.eclipse.team.internal.ui.synchronize.CompositeModelProvider.recursiveClearModelObjects(CompositeModelProvider.java:236)\n    at\norg.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider.recursiveClearModelObjects(ChangeSetModelProvider.java:286)\n    at\norg.eclipse.team.internal.ui.synchronize.AbstractSynchronizeModelProvider.clearModelObjects(AbstractSynchronizeModelProvider.java:812)\n    at\norg.eclipse.team.internal.ui.synchronize.AbstractSynchronizeModelProvider.reset(AbstractSynchronizeModelProvider.java:308)\n    at\norg.eclipse.team.internal.ui.synchronize.SynchronizeModelUpdateHandler.processEvent(SynchronizeModelUpdateHandler.java:247)\n    at\norg.eclipse.team.internal.core.BackgroundEventHandler.processEvents(BackgroundEventHandler.java:329)\n    at\norg.eclipse.team.internal.core.BackgroundEventHandler$1.run(BackgroundEventHandler.java:173)\n    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)",
    "Based on the code, this is impossible. The NPE is happening on an instance \nvariable that is assigned in its definition and is marked final. I\u0027ve seen \nthis several times on Linux and suspect it is a VM bug.",
    "I am on windows, but am ok to leave this as INVALID.  I have not seen this error\nagain since reporting it.",
    "I just had this exception on my hyper-threaded WinXP box:\n\neclipse.buildId\u003dM20050928-1055\njava.version\u003d1.5.0_04\njava.vendor\u003dSun Microsystems Inc.\nBootLoader constants: OS\u003dwin32, ARCH\u003dx86, WS\u003dwin32, NL\u003dde_CH\n\nAre you sure this is not an initialization issue? If the clearProviders() method\nis called from a differnt thread than the one who creates the\nCompositeModelProvider object, then this NPE could happen.\n\nIn the constructor of AbstractSynchronizeModelProvider, the\nCompositeModelProvider being constructed (this) is passed to other methods:\n...\n\t\t    updateHandler \u003d new SynchronizeModelUpdateHandler(this);\n\t\t    getTree().addTreeListener(this);\n...\n\t\t    set.addSyncSetChangedListener(this);\n...\n\nIf those methods post the object under construction to another thread, then the\nCompositeModelProvider could be seen with a not-yet-initialized providers field.\n\nBTW: Bug 94117 look like a dup of this.",
    "The variable is set in the instance initializer (i.e. in the variable \ndefinition). How can an instance be accessible to another thread before it\u0027s \ninitializer completes. I see that the construtor does make the object \navailable to other threads but don\u0027t the instance initializes get run before \nthe constructor?",
    "No, the field initializers are only executed after the super-constructor call\nhas returned. See JLS3 ?12.5 Creation of New Class Instances:\n...\n3. Call super-constructor\n4. initialize instance fields\n5. execute rest of the constructor body\n...",
    "Thanks for the explanation. That certainly makes things interesting. Any \nadvice on how to handle this properly (other than the obvious use of \nsynchronize)?",
    "Hm, I don\u0027t have a ready-made pattern/refactoring/workaround at hand.\n\nA way to avoid synchonization could be to create a new method ...\nprivate ArrayList internalGetProviders() {\n    if (providers !\u003d null)\n        providers\u003d new ArrayList(10);\n    return providers;\n}\n... and use this instead of direct accesses to the field.\n\nAnother way could be to let the creators of AbstractSynchronizeModelProviders do\nthe listener registration, but that would mean that all clients must not forget\nto call a registration method.\n\nA third way could probably be to introduce a method \n    protected initializeFields() {}\nin AbstractSynchronizeModelProvider, call it at the beginning of\nAbstractSynchronizeModelProvider\u0027s constructor and overwrite it in the\nsubclasses to do the field initialization. (I have not tested this, but I think\nit should work;-)",
    "*** Bug 94117 has been marked as a duplicate of this bug. ***",
    "I just saw this bug as well. ",
    "*** Bug 120854 has been marked as a duplicate of this bug. ***",
    "The old synchronize page is being phased out for the new model-based sync. I\u0027ll leave this bug open until we remove the old one entirely.",
    "*** Bug 139156 has been marked as a duplicate of this bug. ***",
    "Fixing this would require a major rework and, since the page is being phased out, will not be done."
  ],
  "commentCreationDates": [
    "2005-06-29T02:22:09+02:00",
    "2005-08-05T16:04:01+02:00",
    "2005-08-06T00:00:55+02:00",
    "2005-09-29T11:14:11+02:00",
    "2005-09-29T15:00:17+02:00",
    "2005-09-29T15:41:06+02:00",
    "2005-09-29T16:06:35+02:00",
    "2005-09-29T16:36:50+02:00",
    "2005-10-12T15:46:43+02:00",
    "2005-10-12T15:46:59+02:00",
    "2005-12-14T15:19:36+01:00",
    "2006-03-11T23:03:16+01:00",
    "2006-04-28T17:30:47+02:00",
    "2006-06-19T22:19:00+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.team.internal.ui.synchronize.CompositeModelProvider.clearProviders",
          "source": "CompositeModelProvider.java:241"
        },
        {
          "method": "org.eclipse.team.internal.ui.synchronize.CompositeModelProvider.recursiveClearModelObjects",
          "source": "CompositeModelProvider.java:236"
        },
        {
          "method": "org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider.recursiveClearModelObjects",
          "source": "ChangeSetModelProvider.java:286"
        },
        {
          "method": "org.eclipse.team.internal.ui.synchronize.AbstractSynchronizeModelProvider.clearModelObjects",
          "source": "AbstractSynchronizeModelProvider.java:812"
        },
        {
          "method": "org.eclipse.team.internal.ui.synchronize.AbstractSynchronizeModelProvider.reset",
          "source": "AbstractSynchronizeModelProvider.java:308"
        },
        {
          "method": "org.eclipse.team.internal.ui.synchronize.SynchronizeModelUpdateHandler.processEvent",
          "source": "SynchronizeModelUpdateHandler.java:247"
        },
        {
          "method": "org.eclipse.team.internal.core.BackgroundEventHandler.processEvents",
          "source": "BackgroundEventHandler.java:329"
        },
        {
          "method": "org.eclipse.team.internal.core.BackgroundEventHandler$1.run",
          "source": "BackgroundEventHandler.java:173"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "102111",
      "date": "2005-06-29T02:22:09+02:00",
      "product": "Platform",
      "component": "Team",
      "severity": "normal"
    }
  ],
  "groupId": "102111",
  "bugId": "102111",
  "date": "2005-06-29T02:22:09+02:00",
  "product": "Platform",
  "component": "Team",
  "severity": "normal"
}