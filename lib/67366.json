{
  "comments": [
    "The parser hiccups on the following input (exclude the lines):\n\n-----------------------------------------\ncall(* m1prot(..));\n//call(* m1prot(..)) \u0026\u0026 within(A1*);\n//call(* m1prot(..)) \u0026\u0026 within(A2);\n//call(* m1prot(..)) \u0026\u0026 withincode(* m1pub(..));\n-----------------------------------------\n\nNote, that putting a newline at the end makes this error go away.\n\nthe stack trace is the following:\n\norg.eclipse.cme.panther.parser.TokenMgrError: Lexical error at line 4, column\n49.  Encountered: \u003cEOF\u003e after : \"\"\n\tat\norg.eclipse.cme.panther.parser.PantherParserTokenManager.getNextToken(PantherParserTokenManager.java:2185)\n\tat org.eclipse.cme.panther.parser.PantherParser.jj_ntk(PantherParser.java:5374)\n\tat org.eclipse.cme.panther.parser.PantherParser.Start(PantherParser.java:269)\n\tat org.eclipse.cme.panther.PantherPatternImpl.parse(PantherPatternImpl.java:116)\n\tat\norg.eclipse.cme.puma.context.impl.QueryContextImpl.evaluateQuery(QueryContextImpl.java:183)\n\tat\norg.eclipse.cme.puma.tests.harness.FileBasedQueryTest.doRun(FileBasedQueryTest.java:181)\n\tat\norg.eclipse.cme.conman.tests.queries.SimplePantherQueryTest.doRun(SimplePantherQueryTest.java:215)\n\tat\norg.eclipse.cme.tests.harness.FileBasedTestCase.setupAndRun(FileBasedTestCase.java:212)\n\tat\norg.eclipse.cme.panther.tests.harness.PantherFileQueryTest.setupAndRun(PantherFileQueryTest.java:70)\n\tat\norg.eclipse.cme.conman.tests.queries.SimplePantherQueryTest.access$0(SimplePantherQueryTest.java:1)\n\tat\norg.eclipse.cme.conman.tests.queries.SimplePantherQueryTest$1.runTest(SimplePantherQueryTest.java:50)\n\tat org.eclipse.cme.conman.tests.loaders.Statics.run(Statics.java:50)\n\tat org.eclipse.cme.conman.tests.loaders.Statics.accept(Statics.java:43)\n\tat\norg.eclipse.cme.conman.tests.queries.SimplePantherQueryTest.setupAndRun(SimplePantherQueryTest.java:48)\n\tat org.eclipse.cme.test.panther.queries.TestCalls.main(TestCalls.java:26)\nException in thread \"main\"",
    "This is due to a limitation of our current parser/lexer generator, I think, \nand the workaround is, as you\u0027ve said, to put \u003cCR\u003e at the end.  It will \nhopefully go away when I complete the port to the new parser/lexer \ngenerators.  I don\u0027t think it\u0027s worth addressing in the old one, as the fix \nrequires a patch to generated code or to the parser generator, and I\u0027m \nseriously dubious about mucking with generated code (and don\u0027t have access to \nthe source of the generator)."
  ],
  "commentCreationDates": [
    "2004-06-15T22:33:14+02:00",
    "2004-08-04T20:46:46+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.cme.panther.parser.TokenMgrError",
      "message": "Lexical error at line 4, column 49.  Encountered: \u003cEOF\u003e after : \"\"",
      "elements": [
        {
          "method": "org.eclipse.cme.panther.parser.PantherParserTokenManager.getNextToken",
          "source": "PantherParserTokenManager.java:2185"
        },
        {
          "method": "org.eclipse.cme.panther.parser.PantherParser.jj_ntk",
          "source": "PantherParser.java:5374"
        },
        {
          "method": "org.eclipse.cme.panther.parser.PantherParser.Start",
          "source": "PantherParser.java:269"
        },
        {
          "method": "org.eclipse.cme.panther.PantherPatternImpl.parse",
          "source": "PantherPatternImpl.java:116"
        },
        {
          "method": "org.eclipse.cme.puma.context.impl.QueryContextImpl.evaluateQuery",
          "source": "QueryContextImpl.java:183"
        },
        {
          "method": "org.eclipse.cme.puma.tests.harness.FileBasedQueryTest.doRun",
          "source": "FileBasedQueryTest.java:181"
        },
        {
          "method": "org.eclipse.cme.conman.tests.queries.SimplePantherQueryTest.doRun",
          "source": "SimplePantherQueryTest.java:215"
        },
        {
          "method": "org.eclipse.cme.tests.harness.FileBasedTestCase.setupAndRun",
          "source": "FileBasedTestCase.java:212"
        },
        {
          "method": "org.eclipse.cme.panther.tests.harness.PantherFileQueryTest.setupAndRun",
          "source": "PantherFileQueryTest.java:70"
        },
        {
          "method": "org.eclipse.cme.conman.tests.queries.SimplePantherQueryTest.access$0",
          "source": "SimplePantherQueryTest.java:1"
        },
        {
          "method": "org.eclipse.cme.conman.tests.queries.SimplePantherQueryTest$1.runTest",
          "source": "SimplePantherQueryTest.java:50"
        },
        {
          "method": "org.eclipse.cme.conman.tests.loaders.Statics.run",
          "source": "Statics.java:50"
        },
        {
          "method": "org.eclipse.cme.conman.tests.loaders.Statics.accept",
          "source": "Statics.java:43"
        },
        {
          "method": "org.eclipse.cme.conman.tests.queries.SimplePantherQueryTest.setupAndRun",
          "source": "SimplePantherQueryTest.java:48"
        },
        {
          "method": "org.eclipse.cme.test.panther.queries.TestCalls.main",
          "source": "TestCalls.java:26"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "67366",
      "date": "2004-06-15T22:33:14+02:00",
      "product": "z_Archived",
      "component": "CME",
      "severity": "normal"
    }
  ],
  "groupId": "67366",
  "bugId": "67366",
  "date": "2004-06-15T22:33:14+02:00",
  "product": "z_Archived",
  "component": "CME",
  "severity": "normal"
}