{
  "comments": [
    "N20060611-0010\n\nThe platform should define a command for cycling through pages of a PageBookView (e.g. Search, Console, Synchronize) or other views that use a notion of switchable pages (e.g. JUnit, Type Hierarchy, Call Hierarchy).\n\nThere should be a retargetable action that can be used by views that want to support easy switching between their pages. The action cannot be bound by default, since some PageBookViews may not want to give the user this power (e.g. Outline), or they need to know about page switching events (e.g. JUnit).\n\nGood default keybindings would be Alt+PageUp / Alt+PageDown.\n\nToday, using such views is often cumbersome, since the views usually only offer a dropdown toolbar button, which has a very small target area to open a menu. Furthermore, opening the menu is unnecessary when the user already knows she wants to go to the previous/next page.",
    "Could this bug please be considered for 3.4?",
    "Created an attachment (id\u003d80703)\nbasic functionality of cycling pages\n\nSo far it works for at least the Console view. It won\u0027t always show the cycle list with a predictable order since PageBookView stores pages in a Map.\n\nThe Search view so far won\u0027t work without some further investigation. It doesn\u0027t seem to store all of its pages in the PageBookView\u0027s Map.\n\nTypeHierarchyViewer will require more investigation since it\u0027s not a PageBookView. Another handler based on CycleBaseHandler should do the trick.\n\nPerformance is ridiculously slow. Still determining the cause.",
    "(From update of attachment 80703)\nThis proposal does not fulfill (and is not extensible to fulfill) the requirements from comment 0:\n\n- The mechanism should be completely independent of the view implementation. PageBookView is just one way to implement views with multiple pages.\n\n- Views should opt-in to get this support. The hack to exclude the Outline view show that including this in PageBookView is not the right approach. Predefined adapters for e.g. a PageBookView could still be worthwile.\n\nFurthermore, I\u0027m not sure if you can add a method to IPageBookViewPage. Its Javadoc says\n * Pages should implement this interface.\nbut Page and IPage say that clients should subclass Page.\n",
    "Created an attachment (id\u003d80790)\ncycling pages v02\n\nRework of the patch:\n\n1) we missed the \"must extend Page\" on IPageBookViewPage, so we\u0027re stuck with IPageBookViewPage2\n2) it is now opt-in.  registerPageSwitchingHandlers() in the createPartControl(*) will active the commands for that view.  The changes to org.eclipse.ui.console show an opt-in example\n\nAny view can contribute handlers to the org.eclipse.ui.navigate.nextPage and previousPage commands.  If you are already using PageBookView, you can get opt-in relatively easily.\n\nOpen issues:\n\n1) anyone can opt in, but they will only get their behaviour without the Cycle handler support as that\u0027s all internal classes ... we can either look at some API around the cycle behaviour or \"switch\" to a simple \"go to the next rec\" version\n\n2) if we continue using the cycle behaviour, we\u0027ll need to enhance it to select the next rec in the list (ours is currently unsorted).  Just starting at the top doesn\u0027t work in this case.\n\n3) do we leave the keybindings in the window context, or move them to a \"page switching\" context that any switching view would have to activate (the way we are currently activating our handlers).\n\nPW\n",
    "(In reply to comment #4)\n\u003e \n\u003e Any view can contribute handlers to the org.eclipse.ui.navigate.nextPage and\n\u003e previousPage commands.  If you are already using PageBookView, you can get\n\u003e opt-in relatively easily.\n\u003e \n\u003e Open issues:\n\u003e \n\u003e 1) anyone can opt in, but they will only get their behaviour without the Cycle\n\u003e handler support as that\u0027s all internal classes ... we can either look at some\n\u003e API around the cycle behaviour or \"switch\" to a simple \"go to the next rec\"\n\u003e version\n\u003e \n\u003e 2) if we continue using the cycle behaviour, we\u0027ll need to enhance it to select\n\u003e the next rec in the list (ours is currently unsorted).  Just starting at the\n\u003e top doesn\u0027t work in this case.\n\u003e \n\nMarkus, we can either leave the fact that these are commands to allow any multi-page view to opt-in and just provide a specific implementation for PageBookView, or we can provide a handler and a public interface that a view could implement to be used with the cycle handler, something like:\n\nICyclePage {\n  public IPageBookViewPage2 getPages();\n  public IPageBookViewPage2 getSelection();\n  public void setPage(IPageBookViewPage2);\n}\n\nDo you have a preference?\n\nPW\n",
    "I still don\u0027t think this should be tied to PageBookView in any way. The management of pages in a page book is entirely up to the subclass, and I don\u0027t think it\u0027s a good idea to add something like IPageBookViewPage2 and a \"default\" handler in PageBookView. The console view example already shows how this approach fails:\n- icons for pages are wrong\n- order in the chooser is wrong\n- TextConsolePage needs to implement IPageBookViewPage2 and delegate getLabel() to the IConsole. It would be bad if all IPageBookViewPages would have to do this, although the managing view already knows how to render page descriptions (e.g. in the history menu). It\u0027s even worse for contributable pages, e.g. ISearchResultPage.\n\nI would take this out into a separate manager class, e.g. something like:\n\npublic abstract class PageSwitcher {\n\tpublic PageSwitcher(IWorkbenchPart part) { /* register handlers */ }\n\t// callbacks to be implemented by clients:\n\tpublic abstract Object[] getPages();\n\tpublic abstract String getName(Object page);\n\tpublic abstract ImageDescriptor getImageDescriptor(Object page);\n\tpublic abstract void activatePage(Object page);\n}\n\nThis would clearly separate the page switching code from the internal implementation of the view and the pages, and it would also allow e.g. MultiPageEditorPart or the type hierarchy to offer the page switcher.\n\nFurthermore, it would be nice if the page switcher popup could be centered in the originating workbench part. The current location (center of the window) can be far away from the active part.\n\n\nNPEs I got with v02:\n\na) When the Console view is empty:\n\njava.lang.NullPointerException\nat org.eclipse.ui.internal.console.ConsoleView.showPageRec(ConsoleView.java:144)\nat org.eclipse.ui.part.PageBookView$CyclePageBookViewHandler.activate(PageBookView.java:203)\n\nb) When you press and hold Alt+PageDown, release PageDown, and then click into the Console view while the chooser is still up:\n\njava.lang.NullPointerException\nat org.eclipse.ui.internal.console.ConsoleView.showPageRec(ConsoleView.java:136)\nat org.eclipse.ui.part.PageBookView$CyclePageBookViewHandler.activate(PageBookView.java:203)",
    "(In reply to comment #6)\n\u003e I would take this out into a separate manager class, e.g. something like:\n\u003e \n\u003e public abstract class PageSwitcher {\n\u003e         public PageSwitcher(IWorkbenchPart part) { /* register handlers */ }\n\u003e         // callbacks to be implemented by clients:\n\u003e         public abstract Object[] getPages();\n\u003e         public abstract String getName(Object page);\n\u003e         public abstract ImageDescriptor getImageDescriptor(Object page);\n\u003e         public abstract void activatePage(Object page);\n\u003e }\n\u003e \n\u003e \n\u003e Furthermore, it would be nice if the page switcher popup could be centered in\n\u003e the originating workbench part. The current location (center of the window) can\n\u003e be far away from the active part.\n\u003e \n\nOK, Tim, could you try and whip up a patch based on this pattern.  Put the PageSwitcher class in org.eclipse.ui.part for now.\n\nPW\n",
    "Created an attachment (id\u003d81304)\ncycling pages v03\n\nThis uses a separate class to provide behavior that CyclePageHandler can use to cycle pages. The Console view has been changed to implement page cycling.\n\n- The dialog still has to be changed to display in the center of the view.\n- Icons are correctly shown for the console pages.\n- The cycle order is shown by MRU.\n\nIt should be easier now to opt-in page cycling behavior. The view will have to implement IPageManager so that the handler can get an instance of IPageSwitcher, which provides the access to switching pages.",
    "Created an attachment (id\u003d81450)\ncycling pages v04\n\nAdded dialog centering on view. Centers on primary monitor if the dialog is out of monitor bounds when centering on view.",
    "Have a go at the patch with the following modifications:\n\nGet rid of IPage* and just create an abstract class PageSwitcher.\n\nImplement the constructor to activate your handler against the part site IHandlerService.  Pass in the page switcher to your handler.\n\nRemove the handler activations from the plugin.xml\n\nIn your Console view example just instantiate the PageSwitcher as an inner class.\n\nJust extract the co-ordinate code from the openDialog and override that in CyclePartHandler.\n\nLater,\nPW",
    "Created an attachment (id\u003d81463)\ncycling pages v05\n\nModified with changes stated in comment 10.",
    "Created an attachment (id\u003d83339)\ncycling pages v06\n\nSome minor modifications.  Please check the CycleBaseHandler for potential changes to center the dialog.\n\nPW\n",
    "Created an attachment (id\u003d83877)\ncycling pages v07\n\n+ Fixed the centering of the dialog on the view.\n+ Added truncation to the dialog item so the dialog is more likely to be within the bounds of the view.",
    "(In reply to comment #13)\n\u003e Created an attachment (id\u003d83877) [details]\n\u003e cycling pages v07\n\nThis is almost there, you just have an image leak in CyclePageHandler in addItems(*):\nitem.setImage(imageDescriptor.createImage());\n\n\nOne of the ways we do this is to create a LocalResourceManager like:\nLocalResourceManager m \u003d new LocalResourceManager(JFaceResources.getResources());\n\nUse that to create the images, and then once the dialog is disposed you can dispose the local manager and null it out.\n\nThen I think this is ready to go.\n\nPW\n",
    "Created an attachment (id\u003d83898)\ncycling pages v08\n\n+ CyclePageHandler disposes of the LocalResourceManager, if it was created.",
    "Released into HEAD \u003e20071130\nThe commands and new API, but not the keybindings.\nPW\n",
    "Verified I20071211-0010"
  ],
  "commentCreationDates": [
    "2006-06-12T18:55:23+02:00",
    "2007-06-21T15:56:14+02:00",
    "2007-10-18T23:02:44+02:00",
    "2007-10-19T12:02:25+02:00",
    "2007-10-19T20:21:19+02:00",
    "2007-10-22T18:53:28+02:00",
    "2007-10-23T14:59:59+02:00",
    "2007-10-23T15:27:23+02:00",
    "2007-10-26T23:09:21+02:00",
    "2007-10-29T14:49:25+01:00",
    "2007-10-29T15:06:33+01:00",
    "2007-10-29T16:02:09+01:00",
    "2007-11-20T16:27:20+01:00",
    "2007-11-27T16:16:57+01:00",
    "2007-11-27T18:10:30+01:00",
    "2007-11-27T21:27:17+01:00",
    "2007-11-30T19:56:45+01:00",
    "2007-12-11T15:12:19+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.ui.internal.console.ConsoleView.showPageRec",
          "source": "ConsoleView.java:144"
        },
        {
          "method": "org.eclipse.ui.part.PageBookView$CyclePageBookViewHandler.activate",
          "source": "PageBookView.java:203"
        }
      ],
      "number": 0,
      "commentIndex": 6,
      "bugId": "146623",
      "date": "2007-10-23T14:59:59+02:00",
      "product": "Platform",
      "component": "UI",
      "severity": "enhancement"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.ui.internal.console.ConsoleView.showPageRec",
          "source": "ConsoleView.java:136"
        },
        {
          "method": "org.eclipse.ui.part.PageBookView$CyclePageBookViewHandler.activate",
          "source": "PageBookView.java:203"
        }
      ],
      "number": 1,
      "commentIndex": 6,
      "bugId": "146623",
      "date": "2007-10-23T14:59:59+02:00",
      "product": "Platform",
      "component": "UI",
      "severity": "enhancement"
    }
  ],
  "groupId": "146623",
  "bugId": "146623",
  "date": "2006-06-12T18:55:23+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "enhancement"
}