{
  "comments": [
    "Created an attachment (id\u003d84907)\nOutput from http://129.6.24.109:9080/LogReader/ \n\nBuild ID: I20070621-1340\n\nSteps To Reproduce:\nWhen I perform a SubmitDocument transaction using the OHF Bridge against a XDS.b repository (NIST) for MESA testing purposes, I\u0027m receiving the following error:\n\nResponse:\n\u003crs:RegistryResponse xmlns:rs\u003d\"urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0\" status\u003d\"urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Failure\"\u003e \n\u003crs:RegistryErrorList\u003e \n\u003crs:RegistryError codeContext\u003d\"Registry rejected metadata submission: \u0026#xa;At least two Registry Objects have the same ID i11973268142501 within a request document\" errorCode\u003d\"XDSRegistryError\" location\u003d\"Exception thrown: java.lang.Exception\u0026#xa;Registry rejected metadata submission: \u0026#xa;At least two Registry Objects have the same ID i11973268142501 within a request document\u0026#xa;java.lang.Exception: Registry rejected metadata submission: \u0026#xa;At least two Registry Objects have the same ID i11973268142501 within a request document\u0026#xa;\u0026#x9;at gov.nist.registry.ws.SubmitObjectsRequest.submit_to_backend_registry(SubmitObjectsRequest.java:325)\u0026#xa;\u0026#x9;at gov.nist.registry.ws.SubmitObjectsRequest.SubmitObjectsRequestInternal(SubmitObjectsRequest.java:205)\u0026#xa;\u0026#x9;at gov.nist.registry.ws.SubmitObjectsRequest.submitObjectsRequest(SubmitObjectsRequest.java:63)\u0026#xa;\u0026#x9;at gov.nist.registry.ws.serviceclasses.RegistryB.SubmitObjectsRequest(RegistryB.java:31)\u0026#xa;\u0026#x9;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\u0026#xa;\u0026#x9;at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\u0026#xa;\u0026#x9;at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\u0026#xa;\u0026#x9;at java.lang.reflect.Method.invoke(Method.java:585)\u0026#xa;\u0026#x9;at gov.nist.registry.ws.receivers.AbstractXDSRawXMLINoutMessageReceiver.invokeBusinessLogic(AbstractXDSRawXMLINoutMessageReceiver.java:96)\u0026#xa;\u0026#x9;at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40)\u0026#xa;\u0026#x9;at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:96)\u0026#xa;\u0026#x9;at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:145)\u0026#xa;\u0026#x9;at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:275)\u0026#xa;\u0026#x9;at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:120)\u0026#xa;\u0026#x9;at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)\u0026#xa;\u0026#x9;at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\u0026#xa;\u0026#x9;at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)\u0026#xa;\u0026#x9;at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\u0026#xa;\u0026#x9;at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:210)\u0026#xa;\u0026#x9;at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\u0026#xa;\u0026#x9;at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\u0026#xa;\u0026#x9;at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\u0026#xa;\u0026#x9;at org.apache.catalina.valves.FastCommonAccessLogValve.invoke(FastCommonAccessLogValve.java:482)\u0026#xa;\u0026#x9;at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:542)\u0026#xa;\u0026#x9;at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\u0026#xa;\u0026#x9;at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)\u0026#xa;\u0026#x9;at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:870)\u0026#xa;\u0026#x9;at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)\u0026#xa;\u0026#x9;at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)\u0026#xa;\u0026#x9;at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)\u0026#xa;\u0026#x9;at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:685)\u0026#xa;\u0026#x9;at java.lang.Thread.run(Thread.java:613)\u0026#xa;\" severity\u003d\"Error\" /\u003e \n\u003c/rs:RegistryErrorList\u003e \n\u003c/rs:RegistryResponse\u003e \n\n\nMore information:",
    "This is a duplicate of an existing bug (don\u0027t have the number) about a hiccup in EBXML 3.0 metadata extraction that requires a SubmissionSet-wide unique ID on each element in metadata.  We didn\u0027t put enough \"uniqueness precision\" on the value, so this is popping up again.  Should be fixed in a new update out shortly.  Thanks."
  ],
  "commentCreationDates": [
    "2007-12-10T22:57:28+01:00",
    "2007-12-11T00:56:08+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "Registry rejected metadata submission: \u0026#xa;At least two Registry Objects have the same ID i11973268142501 within a request document\u0026#xa;\u0026#x9;",
      "elements": [
        {
          "method": "gov.nist.registry.ws.SubmitObjectsRequest.submit_to_backend_registry",
          "source": "SubmitObjectsRequest.java:325"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "212469",
      "date": "2007-12-10T22:57:28+01:00",
      "product": "OHF",
      "component": "xds.source",
      "severity": "critical"
    }
  ],
  "groupId": "212469",
  "bugId": "212469",
  "date": "2007-12-10T22:57:28+01:00",
  "product": "OHF",
  "component": "xds.source",
  "severity": "critical"
}