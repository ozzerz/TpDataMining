{
  "comments": [
    "1) create the class String.java\npackage pack;\npublic class String {\n}\n2) create the class X.java\npublic class X {\n  public static void foo(String s) {\n  }\n  public void foo(pack.String) {\n  }\n}\n3) select the second \u0027foo\u0027 method (foo(pack.String))\n4) do Refactor-\u003eRename \n5) change name to \u0027bar\u0027\n6) do OK\n\nan exception occur\norg.eclipse.jdt.internal.corext.Assert$AssertionFailedException: assertion \nfailed; second condition\n\tat org.eclipse.jdt.internal.corext.Assert.isTrue(Assert.java:136)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RippleMethodFinder.getAllRip\npleMethods(RippleMethodFinder.java:115)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RippleMethodFinder.getRelate\ndMethods(RippleMethodFinder.java:62)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenameMethodProcessor.initia\nlizeMethodsToRename(RenameMethodProcessor.java:161)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenameMethodProcessor.checkF\ninalConditions(RenameMethodProcessor.java:257)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenameVirtualMethodProcessor\n.checkFinalConditions(RenameVirtualMethodProcessor.java:91)\n\tat \norg.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFi\nnalConditions(ProcessorBasedRefactoring.java:134)\n\tat org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run\n(CheckConditionsOperation.java:84)\n\tat org.eclipse.ltk.core.refactoring.CreateChangeOperation.run\n(CreateChangeOperation.java:114)\n\tat org.eclipse.ltk.core.refactoring.PerformChangeOperation.run\n(PerformChangeOperation.java:182)\n\tat org.eclipse.core.internal.resources.Workspace.run\n(Workspace.java:1673)\n\tat org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run\n(WorkbenchRunnableAdapter.java:58)\n\tat org.eclipse.jface.operation.ModalContext$ModalContextThread.run\n(ModalContext.java:101)\n\n\n\nThe problem seems to be inside RippleMethodFinder#declaresAsVirtual(). \nChecks.findSimilarMethod(m, type) return the wrong method (the first method)",
    "We discovered this defect when looking into bug 66271. \nIt is not revealed by fix for bug 66271, as demonstrated with David\u0027s \ntestcase, but if we fix 66271, we get further into refactoring and then this \nbug will occur more often. Scenario is rare, but we have to be careful.",
    "The fix for bug 66271 would IMO not introduce more errors in refactorings.\nRefactorings which can be started from a code selection of a java element in the\neditor can always be started by selecting the java element in e.g. the Package\nExplorer as well.\n\nThe example in comment 0 reveals a deficiency in the RippleMethodFinder: The RMF\nuses IMethod#isSimilar(IMethod method) to find ripple methods in the\nhierarchies. Since IMethod#isSimilar(IMethod method) only compares simple names\nof the parameters\u0027 types, this lookup may fail.\n\nThe assertion in RippleMethodFinder is causing more harm than good: It fails in\nthe only case where the refactoring would work correctly but doesn\u0027t find most\nof the cases where the current implementation doesn\u0027t work correctly.\n\nRename Method (without the offending assert) is correct if the method to rename\nhas only \"similar\" methods declared in the same type. If \"similar\" methods are\nfound in the hierarchies, it often renames too many declarations (and their\nreferences).\n\nConcluding, I opt for giving a go for bug 66271 and removing the assertion in\nRippleMethodFinder for 3.0. Removing the assertion is a no-risk job.\nConsequences of getting more declarations by patch 66271 is low-risk for jdt-ui.",
    "We decided to not fix this for 3.0 since it is too risky and the assert could \nfail since 1.0. It could be triggered using the same test case but executing \nthe rename from the outliner.\n\nTo get this assertion the code must have \n\n- overloaded methods\n- the simple types names of all parameters of the methods must be the\n  same.\n\nI consider this a rare case (that\u0027s why we never got a PR for this).",
    "Markus, was is the state of this bug ?",
    "This has been fixed with the new RippleMethodFinder2."
  ],
  "commentCreationDates": [
    "2004-06-15T17:10:25+02:00",
    "2004-06-15T18:51:46+02:00",
    "2004-06-16T20:57:00+02:00",
    "2004-06-17T15:01:04+02:00",
    "2005-03-24T11:54:23+01:00",
    "2005-03-24T14:37:02+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.jdt.internal.corext.Assert$AssertionFailedException",
      "message": "assertion  failed; second condition",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.corext.Assert.isTrue",
          "source": "Assert.java:136"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RippleMethodFinder.getAllRippleMethods",
          "source": "RippleMethodFinder.java:115"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RippleMethodFinder.getRelatedMethods",
          "source": "RippleMethodFinder.java:62"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameMethodProcessor.initializeMethodsToRename",
          "source": "RenameMethodProcessor.java:161"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameMethodProcessor.checkFinalConditions",
          "source": "RenameMethodProcessor.java:257"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameVirtualMethodProcessor.checkFinalConditions",
          "source": "RenameVirtualMethodProcessor.java:91"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFinalConditions",
          "source": "ProcessorBasedRefactoring.java:134"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run",
          "source": "CheckConditionsOperation.java:84"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CreateChangeOperation.run",
          "source": "CreateChangeOperation.java:114"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.PerformChangeOperation.run",
          "source": "PerformChangeOperation.java:182"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1673"
        },
        {
          "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
          "source": "WorkbenchRunnableAdapter.java:58"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:101"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "67260",
      "date": "2004-06-15T17:10:25+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "67260",
  "bugId": "67260",
  "date": "2004-06-15T17:10:25+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}