{
  "comments": [
    "when starting the new runtime the following NPE was observed.   It likely happened because the registery service was not registered.  The code should be tightened up to handle this case.\n\njava.lang.NullPointerException\n at org.eclipse.core.internal.preferences.PreferencesService.getPrefExtensions(PreferencesService.java:1134)\n at org.eclipse.core.internal.preferences.PreferencesService.initializeScopes(PreferencesService.java:91)\n at org.eclipse.core.internal.preferences.PreferencesService.\u003cinit\u003e(PreferencesService.java:170)\n at org.eclipse.core.internal.preferences.PreferencesService.getDefault(PreferencesService.java:83)\n at org.eclipse.core.internal.preferences.Activator.registerServices(Activator.java:57)\n at org.eclipse.core.internal.preferences.Activator.start(Activator.java:40)\n at org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:994)\n at java.security.AccessController.doPrivileged(Native Method)\n at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:988)\n at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:969)\n at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:316)\n at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:328)\n at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1026)\n at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:573)\n at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:495)\n at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:275)\n at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:455)\n at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:189)\n at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:291)",
    "*** Bug 122762 has been marked as a duplicate of this bug. ***",
    "see bug 118471 which is a consequence of this NPE in preferences activator.",
    "This exception is happening because the Preferences bundle is starting before the Registry bundle.  In the Eclipse SDK the startlevel values are configured to make sure this doesn\u0027t happen, but the Equinox launcher defaults all startlevels to the same value (4) and Preferences is alphabetically before Registry.\n\nThe solution is to only register the Preferences service if the Registry service is available.",
    "Created an attachment (id\u003d32555)\nPatch to org.eclipse.equinox.preferences\n\nThis patch uses ServiceTracker in Preferences\u0027 activator to only register Preferences Service if there is a Registry Service available.",
    "Simon, can you try out this patch?  It should fix bug 118471 as well.  Thanks.",
    "(In reply to comment #5)\n\u003e Simon, can you try out this patch?  It should fix bug 118471 as well.  Thanks.\n\nIt\u0027s a step in the right direction, but unfortunately no.\nI get a swallowed NPE in PreferencesService.getPrefExtensions() when RegistryFactory.getRegistry is called.\n\nThe defaultRegistryProvider is set after the registry service is registered and the ServiceTracker triggered.\n\n--\nAlso, bug 118471 is related but not caused by the NPE.\nI think that there are a number of lifecycle bundle start/stop problems that still need looking at in preferences.",
    "Created an attachment (id\u003d32712)\nImprovement to orginal org.eclipse.equinox.preferences patch\n\nI made a few modifications to attachment 32555\n- made an ordering change in org.eclipse.equinox.registry.Activator startRegistry() to register the provider before the service. This prevents the problem where a listening Customizer uses the RegistryFactory to work with Extensions\n- synchronized the serviceAdded and serviceRemoved in the prefs Activator\n- set the services to null in unregisterServices() in the prefs Activator\n\nWith these changes I\u0027ve done testing and no longer get the NPE problem.\n\nNote: I used the new multi-project patch format here. If that\u0027s a problem let me know and I can re-submit.",
    "Simon\u0027s patch looks good to me.",
    "DJ, can you review the preferences patch?\nPascal, can you review the registry patch?\n\nthanks.",
    "(From update of attachment 32555)\nreview the new patch from Simon.",
    "Should there be a null check in #unregisterServices in case the osgiPreferencesService field has already been cleared? Is this case possible?",
    "A null there seems pretty unlikely - it could only happen if the service was being registered after the bundlecontext was no longer valid.  Still I think it might be possible.  We might as well put a null check in just in case.",
    "I have reviewed and released the code in the equinox.prefs project. I will leave the registry changes for Pascal.",
    "The patch looks good, CC\u0027ed Oleg for further review on potential timing issues.",
    "The startup order for the \"initial\" plugins is rather rigid and is hard to modify. The registry plugin is expected to start before the preferences plugin; I don\u0027t think anybody considered what happens if that is not the case.\n\n\u003cb\u003eJeff / Roy / Simon: can you describe a use case that requires activation order to be switched?\u003c/b\u003e\n\nIf there is a need to do it, we probably can investigate what happens, but to me from the short descriptions in this bug it looks like the proper solution would be to follow the expected activation order.\n\n(By the way, the change in the registry code is a bit of a kludge as RegistryProviderOSGI uses OSGI service to get the registry. Getting the registry is done lazily -  so the change itself is unlikely to present a problem, but logically it is backward.)\n",
    "re:kludge\nI don\u0027t really like the default provider interaction either. It woulde better if the setting of the default provider and registering of this service happened in one atomic step. \n\nFor now, I\u0027d still suggest that swapping the order is a reasonable defensive precaution especially since equinox.prefs tries to use the RegistryFactory in it\u0027s Customizer. \n\nAnother perhaps better approach might be for equinox.prefs to avoid using the RegistryFactory and just use the registry service directly (?) I don\u0027t know if this could work but I think it would be an improvement.\n\n--\nre: use-cases\nI can simulate situations with the console but these are contrived. (e.g. stop and restart the registry) Perhaps an update would trigger problems?\n\nOne thing to note (and I might have this wrong) is that the activation orders were changed partly in reaction to this problem. Would it be worthwhile to make the necessary changes to avoid having an activation order dependency here? With the patch I\u0027m running these two bundles at the same start-level.\n\n\n\n",
    "Avoiding start orderings is DEFINITELY a good thing (tm).  For example, having the prefs come up and wait/listen for a registry service might be just the ticket here.\n\nWe need to look carefully at any place where ordering is important.",
    "re: kludge\n\nMy understanding was that the prefs code still needed to work in a non-OSGi environment (jars on the classpath).  I think I heard this from Tom Watson - Tom?\n\nre: use-cases\n\nI noticed this bug when launching using the \"Equinox OSGi Framework\" launcher in the PDE.  By default this launcher makes all bundles the same startlevel.",
    "Yes, the runtime split bundles need to support running in a stand-alone java application (non-OSGi).",
    "Regarding comment #18 and comment#19:\n\nNo, this is not the case. Registry and common are the only runtime plugins that are supposed to run without OSGi. Preferences definetely expects OSGi to be available.\n\n",
    "hmmm... ok, thanks for the clarification.  For some reason I thought the stuff split out of runtime was supposed to support stand-alone.  This should make it easier to remove the start order dependency between registry and prefs.  Registry should be the only place where we need to be able to handle when OSGi is not present.  All other cases in runtime should be able to handle different start orders by listening for the services they depend on to be registered.  I think this is what Jeff was suggesting in comment 17",
    "Created an attachment (id\u003d33186)\nless kludge for the registry portion\n\nHere\u0027s a less kludgy patch for the registry portion.\n\nI think the IRegistryProvider used in the Activator can be simplified to the point where it just holds and returns the defaultRegistry.\n\nI noticed another problem that this patch corrects. When the bundle was restarted a Core Exception was thrown when RegistryUtils.setRegistryProvider was called from startRegistry() because the old provider was still there. I\u0027ve added RegistryUtils.resetRegistryProvider for stopRegistry() to call so that we can correctly handle bundle lifecycle.\n\nWhat do you think?\n",
    "From a quick glance, the latest patch removes some desired functionality:\n1) registry provider accesses registry via OSGi to create a degree of flexibility\n2) \"pushing out\" default registry is explicitly prohibited - that\u0027s why there is an exception if you try to set a registry provider when another registry provider has been set\n\nThe fact is that, at present, the order of activation of default plugins is rather rigid. Removing this restriction is non-tivial at best.\n\nUnless there is a valid use case, I recommend closing this bug as \"invalid\".\n",
    "Created an attachment (id\u003d33328)\nless kludge for the registry portion 2\n\nI\u0027d like to try one last time and see if we can\u0027t mark this FIXED instead.\n\nThe simplest use case I can think of is the same as Roy\u0027s; running an \"Equinox\" application in the IDE which when run results in a NPE in PreferenceServices.getPrefExtensions(). This behaviour occurs because by default the uncustomized launcher has all bundles with the same startlevel.\n\nBy ensuring that the OSGi provider is available prior to registering the service we no longer get the NPE. (...FIXED...)\n\nThe provider as you say is set once (and only once) for the life of the runtime. This means that the same provider is used despite serveral starts and stops of the bundle. It might look backwards, but I think it\u0027s reasonable to register the provider early given the provider lives outside the scope of the bundlecontext.\n\nIn addition calling RegistryUtils.setRegistryProvider(defaultProvider) each time in startRegistry throws an uncaught CoreException for every subsequent start of the bundle. Ensuring that the provider registers just once in the Activator prevents this problem.\n\nI recognize there are other problems that make startup rigid and I\u0027m not suggesting we remove the current startorder just yet however it\u0027s something to shoot for.",
    "I have not looked at the patch, but I aggree with Simon\u0027s comment 24.  If possible I would really like to see this fixed.",
    "Hi Simon,\nFirst, sorry, I was in a hurry and forgot to say that it is good that you attracted our attention to this problem. I *personally* think that the default registry provider code is over-engineered and I would like to see it simplified - just as you did in the \"less kludge for the registry portion\" patch. That said, either allowing default provider to be pushed out or removing OSGi bridge from the default registry provider should be a conscious explicit decision and that didn\u0027t seem to be the case.\n\nNow to the big picture. I am not feeling enthusiastic about this bug because it tries to deal with a small consequence of a much bigger issue. Let\u0027s say, this NPE is fixed. What would happen if preferences plugin is asked to provide a preference while registry is not available? I don\u0027t know. Even if doesn\u0027t throw an exception, would it return a proper result? \n\nAnd it is not about the preferences plugin only. There are six or seven plugins specified on the initial bundle list. The same thing will apply to all of them. \n\nThe actual situation here is that:\n- We have initial bundles that have to be started in a certain order. \n- The only startup sequence tested and expected to work is the one specified in the osgi.bundles from config.ini\n- Most of the core plugins can\u0027t be re-installed without Eclipse restart. (Update is the area that I know less about, but, at the very least, it was never tested. From the Eclipse viewpoint, everything that causes UI workbench reinstall should cause a restart anyway - and that includes all of the split runtime plugins.)\n\nCould this picture be improved? Yes. However, let me emphasize, that fixing the NPE alone won\u0027t make it happen. It is the other way around - you see the NPE because you are trying to do something not expected from this plugin. In a sense, you are teaching a frog to fly :-).\n\nSo, what could we do?\n\n1. Equinox launcher - making it work \nIf the Equinox launcher plans to include initial bundles into default configuration, it has to specify proper start order for those bundles, just like PDE does. The \"better\" way to do this would be to use osgi.bundles line from config.ini and avoid hardcoding. Also, initial plugins might be put into a special section of the list of bundles included in the configuration.\n\n2. Create a bug/enhancement request to remove start order requirement from initial plugins.\n\nThere are a number of reasons why osgi.bundles line is what it is today. (In case you were wondering, it didn\u0027t arrive to its present way arbitrarily, but as a result of rather long and painful process :-).) Mostly it is based on the order in which functionality is required on startup and can be released on shutdown as well as the requirement to be able to install bundles (org.eclipse.update.configurator).\n\nEven if we can remove startup order restriction (and I would say there is a 50% chance that it won\u0027t be possible), if anybody decided to use the osgi.bundles, the Equinox launcher would be broken again.\n\nTo summarize, I think that there should be: A) a bug/enhancement request opened saying \"Default Equinox launch configuration doesn\u0027t take into account osgi.bundles\"; b) a bug/enhancement request opened saying \"Relax startup order \nrequirements and allow reinstall of the split runtime bundles\".\n",
    "I opened bug 124652 to see about enhancing PDE equinox launcher.",
    "Hi Oleg,\nI understand what you\u0027re saying and am prepared to drop it.\nThere\u0027s too much going on here to resolve all at once.\n\nWhen I get the chance I\u0027ll log a series of bugs/requests to look at fixing the various lifecycle problems in the split runtime (e.g restarting, installing, uninstalling etc.) Eventually once those issues are resolved we can begin to contemplate relaxing start order.\n",
    "*** Bug 126297 has been marked as a duplicate of this bug. ***",
    "We missed the M5",
    "Oleg, can you take another look at this defect again?  I think we have lost some context here.  \n- Does this NPE occur anymore?\n- We have moved to make all the core.runtime split bundles lazy-started (this includes equinox.registry and equinox.jobs).  I think this should ensure all bundles are activated in the correct order as they are needed.\n\nAll core.runtime split bundles are now lazy-started and are set to the default start-level \"4\".  They should all be started successfully as they are needed.  There should not be any more worries about start order.  The only exception is equinox.common which is included on the osgi.bundles list and ensured to start first at start-level \"2\".\n\nI would hope we can mark this as FIXED for M6 (with no futher code changes).  If we cannot then we must evaluate for RC1.",
    "Sorry meant to add a note.\nI think this is FIXED with no further changes needed in the current code base.\n\nIn addition to all the changes you mentioned Preferences no longer mixes using the RegistryFactory API; it just uses the registry service directly.\n",
    "Yes, this seems to be have been fixed by the changes to the startup order.\n ",
    "Fixed for M6 per last two comments.  Thanks.",
    "[contributed patch applied]",
    "adding \"contributed\" keyword to patches contributed by the community."
  ],
  "commentCreationDates": [
    "2005-11-22T03:22:04+01:00",
    "2006-01-05T16:36:29+01:00",
    "2006-01-05T21:08:01+01:00",
    "2006-01-05T22:52:00+01:00",
    "2006-01-05T22:53:38+01:00",
    "2006-01-05T23:08:50+01:00",
    "2006-01-06T05:54:25+01:00",
    "2006-01-09T22:32:12+01:00",
    "2006-01-10T17:37:20+01:00",
    "2006-01-11T19:24:35+01:00",
    "2006-01-11T19:26:13+01:00",
    "2006-01-12T17:26:11+01:00",
    "2006-01-12T19:47:14+01:00",
    "2006-01-12T21:00:44+01:00",
    "2006-01-13T14:59:59+01:00",
    "2006-01-16T15:54:38+01:00",
    "2006-01-16T18:54:17+01:00",
    "2006-01-17T03:57:16+01:00",
    "2006-01-17T15:25:10+01:00",
    "2006-01-17T15:43:09+01:00",
    "2006-01-17T15:48:05+01:00",
    "2006-01-17T16:09:25+01:00",
    "2006-01-18T03:01:38+01:00",
    "2006-01-19T21:01:44+01:00",
    "2006-01-20T04:43:19+01:00",
    "2006-01-20T13:45:56+01:00",
    "2006-01-20T15:08:37+01:00",
    "2006-01-20T15:22:27+01:00",
    "2006-01-20T19:15:16+01:00",
    "2006-02-03T13:30:14+01:00",
    "2006-02-21T21:09:19+01:00",
    "2006-03-27T17:51:50+02:00",
    "2006-03-27T18:27:55+02:00",
    "2006-03-27T20:44:33+02:00",
    "2006-03-27T21:22:46+02:00",
    "2006-04-18T20:36:06+02:00",
    "2006-08-23T21:20:25+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.core.internal.preferences.PreferencesService.getPrefExtensions",
          "source": "PreferencesService.java:1134"
        },
        {
          "method": "org.eclipse.core.internal.preferences.PreferencesService.initializeScopes",
          "source": "PreferencesService.java:91"
        },
        {
          "method": "org.eclipse.core.internal.preferences.PreferencesService.\u003cinit\u003e",
          "source": "PreferencesService.java:170"
        },
        {
          "method": "org.eclipse.core.internal.preferences.PreferencesService.getDefault",
          "source": "PreferencesService.java:83"
        },
        {
          "method": "org.eclipse.core.internal.preferences.Activator.registerServices",
          "source": "Activator.java:57"
        },
        {
          "method": "org.eclipse.core.internal.preferences.Activator.start",
          "source": "Activator.java:40"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run",
          "source": "BundleContextImpl.java:994"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
          "source": "BundleContextImpl.java:988"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
          "source": "BundleContextImpl.java:969"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:316"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.resume",
          "source": "AbstractBundle.java:328"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.resumeBundle",
          "source": "Framework.java:1026"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles",
          "source": "StartLevelManager.java:573"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL",
          "source": "StartLevelManager.java:495"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel",
          "source": "StartLevelManager.java:275"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent",
          "source": "StartLevelManager.java:455"
        },
        {
          "method": "org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent",
          "source": "EventManager.java:189"
        },
        {
          "method": "org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run",
          "source": "EventManager.java:291"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "117418",
      "date": "2005-11-22T03:22:04+01:00",
      "product": "Equinox",
      "component": "Bundles",
      "severity": "normal"
    }
  ],
  "groupId": "117418",
  "bugId": "117418",
  "date": "2005-11-22T03:22:04+01:00",
  "product": "Equinox",
  "component": "Bundles",
  "severity": "normal"
}