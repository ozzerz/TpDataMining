{
  "comments": [
    "During the plugin initialization of the plugin \ncom.ibm.etools.websphere.tools.v4, a resource change listener has been added to \nthe workspace.  When the workbench restarts, the \nIResourceChangeListener.resourceChanged() is called.  This causes the \nIResourceChangeEvent.getDelta() to be called but this method is never returned.  \nThis problem causes the workbench hangs there and fail to startup.\n\nI have added some system out print statements to the resource change listener:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n...\n\t\tpublic void resourceChanged(IResourceChangeEvent event) \n\t\t{\t\t\t\nSystem.out.println(\"Resource changed: \" + event);\t\t\t\n// Print the stack trace.\ntry {\n\tString hello \u003d null;\n\thello.toString();\n} catch (Exception e) {\n\te.printStackTrace();\n}\n\t\t\tIResourceDelta delta \u003d event.getDelta();\nSystem.out.println(\"Resource delta is: \" + delta);\t\t\t\n\t\t\tif (delta \u003d\u003d null)\n\t\t\t\treturn;\n\n\t\t\t// search for changes to remote file transfer instance \nusing a visitor\n\t\t\ttry {\n...\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nHere is the system out that I get when I restart the eclipse workbench:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nResource changed: \norg.eclipse.core.internal.events.ResourceChangeEvent[source\u003dorg.eclipse.core.int\nernal.resources.Workspace@41570edc]\njava.lang.NullPointerException\n        at \ncom.ibm.etools.websphere.tools.EARConfigChangeManager$EARConfigChangeListener.re\nsourceChanged(EARConfigChangeManager.java:77)\n        at \norg.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.j\nava:123)\n        at \norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:817\n)\n        at org.eclipse.core.runtime.Platform.run(Platform.java:395)\n        at \norg.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.\njava:138)\n        at \norg.eclipse.core.internal.events.NotificationManager.broadcastChanges(Notificati\nonManager.java:62)\n        at \norg.eclipse.core.internal.resources.Workspace.broadcastChanges(Workspace.java:13\n4)\n        at \norg.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:748)\n        at \norg.eclipse.core.internal.resources.Workspace.run(Workspace.java:1343)\n        at \norg.eclipse.debug.internal.core.BreakpointManager$3.run(BreakpointManager.java:5\n64)\n        at java.lang.Thread.run(Thread.java:498)\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nFrom the system out, you can see that the \"Resource changed\" line is printed out \nand the stack trace is available.  The \"Resource delta is: ...\" line is not \ndisplayed means that the IResourceChangeEvent.getDelta( ) method never gets \nreturned.  It simply hangs in the event.getDelta( ) method and the CPU usage is \n0%.  Therefore, it does not looks like it goes to an infinite loop of some kind.\n\nHere is the whole resource change listener class EARConfigChangeListener for \nreference: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t/**\n\t * EARConfigChangeListener -- tracks the changes in the application.xml\n\t * in an EAR project.\n\t */\n\tpublic class EARConfigChangeListener implements IResourceChangeListener \n\t{\n\t\t/**\n\t\t * Create a new EARConfigChangeListener.\n\t\t */\n\t\tpublic EARConfigChangeListener() \n\t\t{\n\t\t\tsuper();\n\t\t}\n\t\t/**\n\t\t * Listen for projects being added or removed and act \naccordingly.\n\t\t *\n\t\t * @param event org.eclipse.core.resources.IResourceChangeEvent\n\t\t */\n\t\tpublic void resourceChanged(IResourceChangeEvent event) \n\t\t{\t\t\t\nSystem.out.println(\"Resource changed: \" + event);\t\t\t\n// Print the stack trace.\ntry {\n\tString hello \u003d null;\n\thello.toString();\n} catch (Exception e) {\n\te.printStackTrace();\n}\n\t\t\tIResourceDelta delta \u003d event.getDelta();\nSystem.out.println(\"Resource delta is: \" + delta);\t\t\t\n\t\t\tif (delta \u003d\u003d null)\n\t\t\t\treturn;\n\n\t\t\t// search for changes to remote file transfer instance \nusing a visitor\n\t\t\ttry {\n\t\t\t\tdelta.accept(new IResourceDeltaVisitor() {\n\t\t\t\t\tpublic boolean visit(IResourceDelta \ndelta2) {\n\t\t\t\t\t\tIResource resource \u003d \ndelta2.getResource();\n\t\t\t\t\t\tif (resource \u003d\u003d null)\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\tif \n(EAR_APPLICATION_XML_FILENAME.equals(resource.getName())) {\n\t\t\t\t\t\t\t\nearConfigChanged(resource.getProject());\n\t\t\t\t\t\t} else if (resource instanceof \nIProject) {\n\t\t\t\t\t\t\tprojectChanged(delta2);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (Exception e) {}\t\t\t\n\t\t}\n\t\t/**\n\t\t * React to a change within a project.\n\t\t *\n\t\t * @param delta org.eclipse.core.resources.IResourceDelta\n\t\t */\n\t\tprotected void projectChanged(IResourceDelta delta) \n\t\t{\n\t\t\tIResourceDelta[] children \u003d delta.getAffectedChildren();\n\n\t\t\tint size \u003d children.length;\n\t\t\tfor (int i \u003d 0; i \u003c size; i++) {\n//\t\t\t\tIResourceDelta child \u003d children[i];\n\n\t\t\t\t// look for server instances and configurations\n\t\t\t\ttry {\n\t\t\t\t\tdelta.accept(new IResourceDeltaVisitor() \n{\n\t\t\t\t\t\tpublic boolean \nvisit(IResourceDelta delta2) {\n\t\t\t\t\t\t\tIResource resource \u003d \ndelta2.getResource();\n//\t\t\t\t\t\t\tString resourceName \u003d \nresource.getName();\n\t\t\t\t\t\t\tif \n(EAR_APPLICATION_XML_FILENAME.equals(resource.getName())) {\n\t\t\t\t\t\t\t\t\nearConfigChanged(resource.getProject());\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} catch (Exception e) {}\n\t\t\t}\n\t\t}\n\t}\t\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d",
    "Created an attachment (id\u003d546)\ncode.txt\n",
    "Created attachment with code for improved readability.",
    "Which build are you using?",
    "The driver is based on the M4 driver (based on 0321 stable build)",
    "Your listener code contains an infinite loop.  In projectChanged, you \nrecursively create another visitor on the same project delta.  I think you meant \nto create a vistor on the child delta here.\n\nNote: IResourceChangeEvent.getDelta() is just an accessor method, it doesn\u0027t do \nany work.",
    "Created an attachment (id\u003d547)\nDump stack when eclipse startup hangs\n",
    "I have changed the projectChanged() method to prevent the infinite loop. The \nproblem still exists.  That part of the code never gets executed.  I did a dump \nstack and attached it with the defect.\n\nIt looks like the plugin class loaders have dead locked.  If you take a look at \nthe dump stack, you\u0027ll notice that the main thread and the debug/breakpoint \nmanager thread both have a lock on a different plugin class loader and are \nlocking when trying to obtain a lock on the other\u0027s class loader.\n\nPlugins should not have to worry about the class loader\u0027s behaviour or \npossible deadlocks created by threads started by the workbench, so I am \nreopening this defect.",
    "Any attempt to createExecutableExtension during plugin startup will likely\ncause deadlock in the current implementation.\nOnly simple bookkeeping operations can be done safely.\nThe ServerPlugin is doing much more than this.\nThere is an attempt to improve the robustness of the startup code evaluation,\nbut it is a wise design move to eliminate complex processing from startup.",
    "Changed title to reflect real problem.  See bug 5875 for a more complete \ndiscussion of this issue.  See also \"Note 3\" in the javadoc for \nPlugin.startup.  The culprit seems to be:\n\ncom.ibm.etools.server.core.internal.ServerFactory.getDelegate\n\ncalled from:\n\ncom.ibm.etools.server.core.internal.plugin.ServerPlugin.startup\n\nWe realize this is a limitation of the platform, and we\u0027d like to solve it in \nthe future if we can.  In the short term, it would be best to follow JohnW\u0027s \nadvice and avoid heavy initialization code in Plugin.startup() methods.",
    "John(s):\n\n1) If this is a temporary limitation of the platform, can you give us a quick \nidea of the scope of the problem/fix and whether it is likely to be fixed in \nthis release?\n\n2) Is calling createExecutableExtension() the only case that might cause \ndeadlock? Are there any other method calls that might also hang the workbench \nduring startup? Since the penalty for leaving in one of these calls is severe, \nwe\u0027d like to know exactly what circumstances could trigger the problem.\n\n3) This restriction is not public knowledge, and we know of other plugins that \nmay also load extension points on startup. In a large product with many cross \ndependancies, it\u0027s hard to completely ensure that none of these methods are \nbeing called during plugin startup. (a \"simple\" method call to a required \nplugin may turn around and load other plugins via another method call)\n\nIn light of when a fix might be available and not doing a lot of temporary \nwork, is it reasonable for you to detect these situations and explicitly \ndisallow them in current builds? (For instance, can you throw an exception when \ncreateExecutableExtension() is called during plugin startup?) This would \ncleanly enforce this restriction and ensure that other plugins do not run into \nthe same problem.",
    "1) I don\u0027t think it is likely this will be addressed in the 2.0 timeframe.  This \nis mainly a function of the risk involved with significantly modifying the \nclassloading mechanism.  The fix, if feasible, would be localized within the \nclassloader code, so it would be transparent to all users.  \n\n2) No. Any two orthogonal locking mechanisms can combine to cause deadlock.  The \nclassloader introduces one lock, so if you try to acquire any other lock within \nthe startup() code, deadlock will be possible.  Quite simply, if the startup() \nblocks while waiting on a lock, and the thread that holds that lock attempts a \nclassload in the same plugin, you\u0027ll get deadlock.\n\nWe will consider your suggestion for disallowing createExecutableExtension \nduring startup().  I don\u0027t know how difficult this would be to implement.  \nUnfortunately this is only one instance of a general problem, so it won\u0027t be a \ngreat help.  ",
    "*** Bug 46438 has been marked as a duplicate of this bug. ***",
    "If we don\u0027t fix for 3.0, we should minimally document the behavior (for example \nin Plugin.startup javadoc).",
    "These deadlock cases have been adressed in the osgi based runtime.\n"
  ],
  "commentCreationDates": [
    "2002-04-04T21:14:09+02:00",
    "2002-04-04T21:28:31+02:00",
    "2002-04-04T21:28:50+02:00",
    "2002-04-04T21:35:47+02:00",
    "2002-04-04T21:42:54+02:00",
    "2002-04-04T22:09:38+02:00",
    "2002-04-05T01:04:34+02:00",
    "2002-04-05T01:10:36+02:00",
    "2002-04-05T16:51:55+02:00",
    "2002-04-05T17:51:30+02:00",
    "2002-04-09T03:51:32+02:00",
    "2002-04-09T17:04:21+02:00",
    "2003-11-12T16:16:40+01:00",
    "2004-02-10T19:37:16+01:00",
    "2005-01-05T19:03:45+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "com.ibm.etools.websphere.tools.EARConfigChangeManager$EARConfigChangeListener.resourceChanged",
          "source": "EARConfigChangeManager.java:77"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager$1.run",
          "source": "NotificationManager.j ava:123"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:817 "
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:395"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager.notify",
          "source": "NotificationManager. java:138"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager.broadcastChanges",
          "source": "Notificati onManager.java:62"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.broadcastChanges",
          "source": "Workspace.java:13 4"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.endOperation",
          "source": "Workspace.java:748"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1343"
        },
        {
          "method": "org.eclipse.debug.internal.core.BreakpointManager$3.run",
          "source": "BreakpointManager.java:5 64"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:498"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "12827",
      "date": "2002-04-04T21:14:09+02:00",
      "product": "Platform",
      "component": "Runtime",
      "severity": "major"
    }
  ],
  "groupId": "12827",
  "bugId": "12827",
  "date": "2002-04-04T21:14:09+02:00",
  "product": "Platform",
  "component": "Runtime",
  "severity": "major"
}