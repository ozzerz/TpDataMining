{
  "comments": [
    "Launch Eclipse, choose, Search-\u003eHelp, cancel, shutdown the workbench.\n\nConsole shows:\norg.osgi.framework.BundleException: Exception in \norg.eclipse.core.internal.compatibility.PluginActivator.stop()\n\tat org.eclipse.osgi.framework.internal.core.BundleContext.stop\n(BundleContext.java:1170)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker\n(BundleHost.java:481)\n\tat org.eclipse.osgi.framework.internal.core.Bundle.stop\n(Bundle.java:457)\n\tat org.eclipse.core.internal.plugins.PluginStopper.run\n(PluginStopper.java:101)\n\tat \norg.eclipse.core.internal.runtime.PlatformActivator.stopLegacyBundles\n(PlatformActivator.java:286)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:268)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:104)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:279)\n\tat org.eclipse.core.launcher.Main.run(Main.java:742)\n\tat org.eclipse.core.launcher.Main.main(Main.java:581)\n\nThe reason is that HelpIdePlugin.shutdown() contains the code:\nPlatformUI.getWorkbench() that throws IllegalStateException (subclass of \nRuntimeException.\nThe org.eclipse.help.ide plug-in depends on org.eclipse.ui and \norg.eclipse.ui.ide, so workbench should be well and running until \norg.eclipse.help.ide is shut down first.\nThe workaround would be probably to use PlatformUI.isWorkbenchRunning, but I \nthink it should not be required in case of a shutdown.",
    "The other thing is that Platfrom should do a better job reporting the problem \nas the log is empty and it is not clear which plug-in has the problem from \nlooking at the console messages.",
    "Agreed about the weak problem reporting. Opened bug 52169 to handle that.\n\nRegarding the IllegalStateException, it is being caused because when the\nworkbench application finishes, the workbench instance is being set to null\n(what seems wrong - it should be using the shutdown callback to do this kind of\ncleanup).\n\nMoving to UI for comments.",
    "The UI exits before *any* plugins get shut down.  I.e.,\nPlatformUI.isWorkbenchRunning is not checking if the UI plugin is still running,\nbut if the display is still there.  I would expect PlatformUI.getWorkbench() to\nfail in the shutdown of any plugin (it\u0027s too late to access the worbench at this\npoint). What workbench services do you require at plugin shutdown time?",
    "org.eclipse.help.ide plugin contains a code to synchronize help working sets \nmanaged by UI with help working sets managed by help.base plugin.  So the \nhelp.ide plugin registers a listener with IWorkingSetManager.\n\nAt shutdown of org.eclipse.help.ide plug-in we remove the listener as:\n\nPlatformUI.getWorkbench().getWorkingSetManager().removePropertyChangeListener\n(workingSetListener);\n\nIs this not a wise thing to do?",
    "Moving to Platform/UI...",
    "Interesting problem.  \n\nThe Workbench is no longer the primary application, and no longer assumes that \nit is running until the platform shuts down (actually, it didn\u0027t really make \nthis assumption before, but since it was the primary app, when it exited the \nplatform would also shut down).\n\nThe app can now programmatically create and run the Workbench using \nPlatformUI.createAndRunWorkbench(Display) and can shut it down using \nIWorkbench.close().  Or the user can shut it down as usual.  \nAfter the Workbench shuts down, the app can still do other things, or even \nstart a new Workbench again (this needs work \u003cg\u003e).\n\nClients like Help that talk to the Workbench on plugin startup and shutdown are \nimplicitly assuming that there is only ever one Workbench and that it sticks \naround for the lifetime of the platform.  This is still generally true in the \nIDE app.  But to handle this properly would require new lifecycle events.\nFor example, as just a rough sketch:\n\nPlatformUI.addWorkbenchListener(IWorkbenchListener listener);\n\ninterface IWorkbenchListener {\n    void workbenchOpened(IWorkbench workbench);\n    void workbenchClosed(IWorkbench workbench);\n}\n\nHelp would have to move its call to unhook the working set listener to \nworkbenchClosed.  Of course, there would be little need to do so since the \nWorkbench is closed.  Ideally, the Workbench would remove all listeners when \nclosing anyway (a la SWT).   Help would also have to be prepared for a new \nWorkbench getting started, and would have to re-add its listener in \nworkbenchOpened.  Of course, the first time, the Help plugin is getting \nactivated by an already running Workbench so there would be no workbenchOpened \nnotification in this case so you\u0027d also have to register in startup as you do \nnow.\n\nThis seems very complicated.  Does anyone have any other suggestions?\nDoes OSGi have any recommended patterns for this kind of thing?\n\nThe other approach would be to keep the Workbench as a singleton, which could \nbe shutdown and restarted many times.  Listeners like the Help working set \nlistener would be kept across sessions.  This seems ill-defined though, and the \nsemantics for listeners unclear.\n\n",
    "Sounds like a job for OSGi services.  Could be structured either as Help \nproviding a service that a workbench acquires/releases or as the workbench \nproviding a service that Help acquires/releases.  Either way, when the service \ncomes/goes, interested parties get told and can take the appropriate action.\n",
    "*** Bug 55246 has been marked as a duplicate of this bug. ***",
    "For now, I\u0027ve removed the null-ing out of the Workbench instance on Workbench\nshutdown, so existing 2.1 code which expects to be able to unhook global\nworkbench listeners in their plugin shutdown method still work.\n\nIt also makes the error message in PlatformUI.getWorkbench() more accurate\n(\"Workbench has not been created yet\").\n",
    "Reassigning bugs in component areas that are changing ownership.",
    "Is this still an issue in 3.3? The last comment dates back to 2004..."
  ],
  "commentCreationDates": [
    "2004-02-13T18:31:33+01:00",
    "2004-02-13T18:34:09+01:00",
    "2004-02-16T17:06:55+01:00",
    "2004-02-16T17:09:03+01:00",
    "2004-02-16T17:43:20+01:00",
    "2004-02-16T21:54:21+01:00",
    "2004-02-17T16:08:29+01:00",
    "2004-02-17T16:23:42+01:00",
    "2004-03-19T19:48:29+01:00",
    "2004-03-19T19:50:35+01:00",
    "2006-03-15T16:24:12+01:00",
    "2007-06-19T22:34:22+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.osgi.framework.BundleException",
      "message": "Exception in  org.eclipse.core.internal.compatibility.PluginActivator.stop()",
      "elements": [
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContext.stop",
          "source": "BundleContext.java:1170"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker",
          "source": "BundleHost.java:481"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Bundle.stop",
          "source": "Bundle.java:457"
        },
        {
          "method": "org.eclipse.core.internal.plugins.PluginStopper.run",
          "source": "PluginStopper.java:101"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator.stopLegacyBundles",
          "source": "PlatformActivator.java:286"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:268"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:104"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:279"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:742"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:581"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "51985",
      "date": "2004-02-13T18:31:33+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "51985",
  "bugId": "51985",
  "date": "2004-02-13T18:31:33+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}