{
  "comments": [
    "N20070127-0010 (this is in code I just committed to HEAD)\n\nIf you open the new \u0027Hyperlinking\u0027 preference page (just type that in as keyword to find the page) and resize it a lot of flickering goes on in the UI.\n\nI\u0027m using the new TableColumnAdapter to do the table resizing.",
    "Maybe we need somewhere setRedraw()-calls but the problem is that we don\u0027t know when the resizing is over. Does the flickering result from makeing the Table-Scrollbars visible when resizing or is it just the TableColumns?",
    "Maybe should add some delay and wait if another resize event occurrs within a certain amount of time before resizing the columns?",
    "I have test some code but it always comes to the point that the resize the scrollbars are shown before we get to resize our columns. The only possibility we have is to leave some extra space on the right of the table e.g. 10px and then the scrollbar only shows up short if you resize very fast. I don\u0027t have any other clue how we could manage to resize the columns before the widget shows up the scrollbars.\n\nTo give it a try you can use add the following line to AbstractColumnAdapter#controlResized() \"width -\u003d 10;\" maybe we should at least provide the users the possibility to provide a right-padding?",
    "You could take a look at the editor template preference page code (TemplatePreferencePage). There\u0027s much less flickering when resizing that page. The relevant part is in ColumnLayout.",
    "Created an attachment (id\u003d57876)\nRevised Table/TreeColumn Layout\n\nOk. That\u0027s nice and really completely removes the flickering of the horizontal scrollbar. The drawback is that this works a little different than the what we\u0027ve done before so we may break existing implementors. Even if this code doesn\u0027t make it into JFace you could maybe patch your ColumnLayout implementation which has a problem when the Table pops up starting with no scrollbars. \n\nThe relevant bits are:\n\nprotected void layout(Composite composite, boolean flushCache) {\n\n// For the first time we need to relayout because Scrollbars are not calculate appropiately\nif( composite.getData(RECALCULATE_LAYOUT) \u003d\u003d null ) {\n    composite.setData(RECALCULATE_LAYOUT,Boolean.FALSE);\n    composite.layout();\n}\n\nprivate int computeTrim(Rectangle area, Scrollable table, int tableWidth) {\n\n// ... \n if (!vBar.isVisible() ) {\n    Point vBarSize\u003d vBar.getSize();\n    trim +\u003d vBarSize.x;\n }\n",
    "Thanks Tom. I\u0027d like to see a public solution from JFace. The code has been introduced during 3.3 and we can still break such API for M5. At least in the SDK it seems that I am the only client.",
    "I know I\u0027m the one to blame because I introduced the code. At the time nobody pointed me to ColumnLayout but to TableColumnLayout which is also part of JDT-UI I think. I\u0027m also +1 for the current layout solution the only thing I think be a great thing to have is described in bug #171844 because the user currently needs to write custom code when TableColumns are moveable. \n\nBut I didn\u0027t get any feedback from our UI-Gurus, I think they are all loaded with a lot of work. M5 is really near and I don\u0027t know how can manage to get all my API changes in but this certainly is a really really import change we definately need to make in before M5. Boris, Tod any comments from your side?",
    "A one more thing just came to my mind currently all our layout code has the problem that the Table/Tree has to be the only container. Wouldn\u0027t it make sense to provide dedicated widgets and not expose the layout classes. This way we would have:\n\nTableLayoutComposite talc \u003d new TableLayoutComposite(parent, SWT.FULL_SELECTION);\ntalc.moveLayoutDataWithColumn(true); // control if the layout-data is connected\ntalc.addLayoutData(...);\n\nTreeLayoutComposite trlc \u003d new TreeLayoutComposite(parent,SWT.FULL_SELECTION);\n\nThis way we make it clear that this is a dedicated composite for a table/tree we could even throw an exception when some one tries to set a layout on this composite from external! \n\nCurrently I always find myself write code like this:\n\nComposite realContainer \u003d ....\n\nComposite layoutHelper \u003d new Composite(parent,SWT.NONE);\n\nTableViewer viewer \u003d new TableViewer(layoutHelper);\nTableColumnLayout lc \u003d new TableColumnLayout();\nlayoutHelper.setLayout(lc);\n\nThe great thing with this is that it works also for Trees and bug #164038 is resolved.\n\n",
    "This bug looks like a duplicate of bug #89171",
    "This is a refactored class from org.eclipse.ui.texteditor.templates.ColumnLayout because I couldn\u0027t find it any more yesterday ;-)",
    "This patch is much better because it is a proper SWT Layout which is a much better practise.\n\nA couple of things to mention\n/*\n\t * @see org.eclipse.swt.widgets.Layout#computeSize(org.eclipse.swt.widgets.Composite, int, int, boolean)\n\t */\n\tprotected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache) {\n\t\tSystem.err.println(\"COMPUTE SIZE\"); //$NON-NLS-1$\n\t\treturn computeTableTreeSize(getTableTree(composite), wHint, hHint);\n\t}\n\nWe need to check for calls to System.err.println\n\n-getTableTree should be getControl(). References to TableTree even if accidental must be avoided\n\n- we need to really test this as there are cases where we might lose resize events. Worse case is a bad layout though so I think this is low risk.",
    "Created an attachment (id\u003d58254)\nAddress Tod\u0027s issues\n\n",
    "Do we have a snippet for testing this on the different platforms?",
    "There are Snippet Snippet016 and a new Snippet027 I think to check the layout. Is this enough, they should be included in the patch!",
    "We will be replacing TableColumnAdapter and related classes for M6.  I added a comment to that effect to the Javadoc and marked the classes as deprecated.",
    "Boris, I still use that class hence we should coordinate when it gets replaced. Best it probably after eclipseCon.",
    "Is everybody happy with Tom\u0027s latest patch?  We need to introduce the new API this week.",
    "Tom this patch is out of date - would it be possible to refresh it? I am afraid of missing something if I do it manually.",
    "Created an attachment (id\u003d60729)\nupdated for head\n\n",
    "Tod, Boris, Daniel before we send this patch to the PMC I\u0027d like to discuss the solution for connecting layout data in bug #171844 instead of our current solution.",
    "Created an attachment (id\u003d60741)\nPatch to remove all classes not needed anymore\n\nThis patch only cleans up correctly the patch in bug #171844 is not part of this patch!",
    "+1 on this patch over the solution for Bug 171844\n\nLines like \n\ncolumn.setData(AbstractColumnLayout.LAYOUT_DATA, new ColumnWeightData(50, 100));\n\nexposes our use of the data for storing JFace information which is not API anywhere else. I think this would be very confusing to our consumers. It would also reduce the flexibility in the future for us to potentially rework our internal mapping to SWT should we decide for a r0ute other than the data.\n\nWe can discuss on March 14. Please let me know a good time for you on IRC but right now I think this is the way we want to go.",
    "I agree with Tod.",
    "Please coordinate committing the patch with me as Platform Text will be broken.",
    "Thanks for the help again Dani. I will add the code this week but I won\u0027t delete anything until I have the go ahead from you.\n\nAPI request to follow.",
    "API REQUEST\n\nDelete the experimental deprecated class Table Adapter and replace it\u0027s functionality with the more SWT AbstractColumnLayout\n\nBackground: We required a class that could keep the relative sizes of columns constant during a resize so as to avoid the user resizing all of the columns of a table. In M4 we implemented the TableAdapter which was a subclass of ControlAdapter to handle this. This turned out to cause a lot of flash so we deprecated it in M5 in order to come up with a Layout based solution.\n\nAdd:\nAbstractColumnLayout\nTableColumnLayout - layout class for tables\nTreeColumnLayout - layout class for trees\n\nRemove: (all were added in 3.3, deprecated in M5 and experimental)\nAbstractColumnAdapter\nTreeColumnAdapter\nTableColumnAdpter\n\nRISKS:\nTeams reliant on the old API will have to port. JDT Text is the only known consumer,\n\nRISKS OF NOT TAKING THIS CHANGE\nThe ColumnAdapters are too flashy to be useful. This is a common use case that will be used within the SDK.",
    "added bug #164038 because this would be fixed automatically if this request is accepted",
    "Created an attachment (id\u003d60788)\nonly make things API who really need to\n\n",
    "uups this give compile errors in test suite, patch to follow",
    "Created an attachment (id\u003d60790)\nfix test suite\n\n",
    "Created an attachment (id\u003d60794)\nPatch with some more commenting\n\nHere is a patch that adds some more comments to the private methods",
    "Updated API REQUEST (made the abstract class package visible)\n\nDelete the experimental deprecated class Table Adapter and replace it\u0027s\nfunctionality with the more SWT AbstractColumnLayout\n\nBackground: We required a class that could keep the relative sizes of columns\nconstant during a resize so as to avoid the user resizing all of the columns of\na table. In M4 we implemented the TableAdapter which was a subclass of\nControlAdapter to handle this. This turned out to cause a lot of flash so we\ndeprecated it in M5 in order to come up with a Layout based solution.\n\nAdd:\nTableColumnLayout - layout class for tables\nTreeColumnLayout - layout class for trees\n\nRemove: (all were added in 3.3, deprecated in M5 and experimental)\nAbstractColumnAdapter\nTreeColumnAdapter\nTableColumnAdpter\n\nRISKS:\nTeams reliant on the old API will have to port. JDT Text is the only known\nconsumer,\n\nRISKS OF NOT TAKING THIS CHANGE\nThe ColumnAdapters are too flashy to be useful. This is a common use case that\nwill be used within the SDK.",
    "+1. Do you need to provide a patch for JDT Text code?",
    "The patch I attached doesn\u0027t break JDT. I will do the deletions when Dani gives me the go ahead,",
    "Created an attachment (id\u003d60837)\nto discuss\n\nBoris I\u0027d like to discuss this with you tommorrow because I think connecting TableColumn and LayoutData has multiple advantages (e.g. deleting columns, adding columns, ...). Deleting columns might provide problems with the current implementation.",
    "Mike as said we\u0027d like to request approval to change the introduced API once more?",
    "+1",
    "Patch (\"to discuss\") released \u003e20070316.\n\nLeaving the bug open for now.  If you resize one of the columns, the other columns are not updated.  Tom plans to look at this on the weekend.",
    "Created an attachment (id\u003d61215)\nPatch to make update columns after one is resized\n\nBoris waiting for a comment from you until tomorrow in the morning else I\u0027ll commit it as attached here. Maybe even Dani can give comment on this too \u0027til then.",
    "This seems not to work. I converted my code to use the TableColumnLayout but I get the exception listed below. Maybe it\u0027s because I (re-) use the following column weight: new ColumnWeightData(1)?\n\n\n!ENTRY org.eclipse.ui 4 0 2007-03-19 09:18:07.934\n!MESSAGE Unhandled event loop exception\n!STACK 0\njava.lang.ArrayIndexOutOfBoundsException: 0\n\tat org.eclipse.jface.layout.AbstractColumnLayout.getControl(AbstractColumnLayout.java:294)\n\tat org.eclipse.jface.layout.AbstractColumnLayout.layout(AbstractColumnLayout.java:232)\n\tat org.eclipse.swt.widgets.Composite.updateLayout(Composite.java:999)",
    "Created an attachment (id\u003d61257)\nMy coverted code\n\n",
    "Dani you are assigning the layout to the wrong Component. To make this all work you need assign the layout to the artificial component. In your case I think you need to assign the layout to the parent of the Table which has to have exactly one child namely the Table. This has not changed from the implementation we copied from you.\n\nI haven\u0027t looked thoroughly at your code but I\u0027d say it has to look something like this:\n\n--------------8\u003c--------------\nComposite layoutHelper \u003d new Composite(editorComposite,SWT.NONE);\nTable hyperlinkDetectorTable \u003d new Table(editorComposite,....);\nTableColumnLayout tableColumnLayout \u003d new TableColumnLayout();\nlayoutHelper.setLayout(tableColumnLayout);\n--------------8\u003c--------------\n\nMaybe you can even use the editorComposite if it only has one child. The reuse of the Layout-Object has no influence (currently) although this is not consitent with other layouts where data objects *can not* be reused I\u0027m not sure but maybe this will bring you into trouble some day so I\u0027d suggest that you don\u0027t reuse them.",
    "Mhh. looks a bit strange that I can\u0027t set the layout to the table itself.",
    "Well I think we have no other possibility. This is the only way and as said it\u0027s like you did it in former days with your internal class. The layout needs to be on the parent else we\u0027ll see the flickering as we had it with the control-adapter.",
    "k. but we should improve the Javadoc saying that this is intended for a Composite that contains the table/tree viewer.",
    "I have a locally changed version where I already updated the javadoc like this:\n\n----------------8\u003c----------------\n\u003cp\u003e\n\u003cb\u003eYou can only add the {@link Layout} to a container whose \u003ci\u003eonly\u003c/i\u003e child is the {@link Table} control you want the {@link Layout} applied to. Don\u0027t assign the layout directly the {@link Table}\u003c/b\u003e\n\u003c/p\u003e\n----------------8\u003c----------------",
    "I\u0027ve converted the Platform Text code and released it for I20070319-0800. You can delete the *TableColumnAdapter classes.",
    "Released \u003e\u003d 20070319",
    "Verified by code inspection in I20070321-1800",
    "I\u0027m experimenting with adopting this new support in Jazz. I\u0027ve got a view which adds/removes a column based on preferences. Using the new support, when I add the new column it is initially shown blank (no header text, no text for elements in the column) until I resize the column.\n\nThis is a simplified version of the code. This worked fine before I adopted it to using the TreeColumnLayout support. Am I doing something wrong or does this new support have a problem when columns are added dynamically?\n\nprivate TreeViewer fViewer;\nprivate TreeColumnLayout fTreeColumnLayout;\nprivate TreeColumn fFirstColumn;\n\npublic void createPartControl(Composite parent) {\n    Composite treeComposite \u003d new Composite(parent, SWT.NONE);\n    fTreeColumnLayout \u003d new TreeColumnLayout();\n    treeComposite.setLayout(fTreeColumnLayout);\n    treeComposite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n    fViewer \u003d new TreeViewer(treeComposite, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);\n    Tree tree \u003d fViewer.getTree();\n    tree.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n    fFirstColumn \u003d new TreeColumn(tree, SWT.NONE);\n    updateColumns();\n}\n\nprivate void updateColumns() {\n    boolean show \u003d getColumnVisiblePreference();\n    Tree tree \u003d fViewer.getTree();\n    tree.setHeaderVisible(show);\n    tree.setLinesVisible(show);\n    if (show) {\n        fTreeColumnLayout.setColumnData(fFirstColumn, new ColumnWeightData(80, 20, true));\n        TreeColumn column \u003d new TreeColumn(tree, SWT.RIGHT);\n        fTreeColumnLayout.setColumnData(column, new ColumnWeightData(20, 10, true));\n        column.setText(\"Header\");\n    } else {\n        fTreeColumnLayout.setColumnData(fFirstColumn, new ColumnWeightData(100, 20, true));\n        if (tree.getColumnCount() \u003e 1) {\n            tree.getColumn(1).dispose();\n        }\n    }\n    tree.layout();\n}\n\npublic void propertyChange(PropertyChangeEvent event) {\n    if (isColumnVisibleChange(event)) {\n        updateColumns();\n    }\n}",
    "From your code I can\u0027t see any problem. Did you tried to call treeViewer#refresh() after adding the column?\n\nIf this doesn\u0027t cure the problem can you please\n- Create a snippet we can run to see the problem as a base you can use one of our collection (http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.jface.snippets/Eclipse%20JFace%20Snippets/org/eclipse/jface/snippets/viewers/)\n- File a new bug for this",
    "Is there any reason that the new TableColumnLayout class should not work in a 3.2 Eclipse? I tried copying the code for TableColumnLayout and its parent, AbstractColumnLayout, into classes of my own for use in an Eclipse 3.2-based application. However, the results I\u0027m getting are very strange.\nI was just wondering if these new layouts depend on changes to any other classes that I might have overlooked.\n",
    "There were some bugfixes in SWT that this relies on. Can you use SWT 3.3 while keeping everything else at 3.2?"
  ],
  "commentCreationDates": [
    "2007-01-26T16:48:54+01:00",
    "2007-01-26T18:51:30+01:00",
    "2007-01-26T19:08:32+01:00",
    "2007-01-29T17:25:04+01:00",
    "2007-01-29T17:40:33+01:00",
    "2007-01-30T22:54:21+01:00",
    "2007-01-31T09:46:00+01:00",
    "2007-01-31T09:54:43+01:00",
    "2007-01-31T10:16:40+01:00",
    "2007-02-01T17:05:41+01:00",
    "2007-02-05T12:56:53+01:00",
    "2007-02-05T13:47:09+01:00",
    "2007-02-05T14:23:56+01:00",
    "2007-02-05T14:26:23+01:00",
    "2007-02-05T14:28:20+01:00",
    "2007-02-06T03:33:05+01:00",
    "2007-03-02T12:15:31+01:00",
    "2007-03-13T20:45:13+01:00",
    "2007-03-13T21:38:11+01:00",
    "2007-03-13T21:56:44+01:00",
    "2007-03-13T23:22:08+01:00",
    "2007-03-13T23:26:19+01:00",
    "2007-03-14T01:34:09+01:00",
    "2007-03-14T09:34:10+01:00",
    "2007-03-14T09:36:38+01:00",
    "2007-03-14T12:01:47+01:00",
    "2007-03-14T12:13:22+01:00",
    "2007-03-14T12:41:41+01:00",
    "2007-03-14T13:23:02+01:00",
    "2007-03-14T13:24:32+01:00",
    "2007-03-14T13:29:23+01:00",
    "2007-03-14T14:00:45+01:00",
    "2007-03-14T14:14:13+01:00",
    "2007-03-14T14:52:32+01:00",
    "2007-03-14T14:58:11+01:00",
    "2007-03-14T19:30:09+01:00",
    "2007-03-16T18:42:58+01:00",
    "2007-03-16T19:54:45+01:00",
    "2007-03-16T21:54:47+01:00",
    "2007-03-18T18:34:45+01:00",
    "2007-03-19T09:21:43+01:00",
    "2007-03-19T09:23:32+01:00",
    "2007-03-19T10:11:33+01:00",
    "2007-03-19T10:36:55+01:00",
    "2007-03-19T11:59:38+01:00",
    "2007-03-19T12:09:17+01:00",
    "2007-03-19T12:14:09+01:00",
    "2007-03-19T12:47:39+01:00",
    "2007-03-19T16:01:32+01:00",
    "2007-03-23T09:23:17+01:00",
    "2007-04-24T19:34:24+02:00",
    "2007-04-24T20:03:52+02:00",
    "2007-06-26T00:45:17+02:00",
    "2007-06-26T06:00:09+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "0",
      "elements": [
        {
          "method": "org.eclipse.jface.layout.AbstractColumnLayout.getControl",
          "source": "AbstractColumnLayout.java:294"
        },
        {
          "method": "org.eclipse.jface.layout.AbstractColumnLayout.layout",
          "source": "AbstractColumnLayout.java:232"
        },
        {
          "method": "org.eclipse.swt.widgets.Composite.updateLayout",
          "source": "Composite.java:999"
        }
      ],
      "number": 0,
      "commentIndex": 40,
      "bugId": "171824",
      "date": "2007-03-19T09:21:43+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "171824",
  "bugId": "171824",
  "date": "2007-01-26T16:48:54+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}