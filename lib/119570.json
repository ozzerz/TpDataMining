{
  "comments": [
    "bug 1: Get warning on declare parents in a subaspect of a parameterized aspect that (erroneously?) declares same parents:\n\n\"The method TaggedTexts.PC.ajc$declare_parents_1() does not override the inherited method from NodeImpl\u003cTaggedTexts.Tag,TaggedTexts.Tag\u003e since it is private to a different package.\"\n\nbug 2: The subaspect must declare parents on the concrete types.\n\n--------------------\npackage util;\n\npublic abstract aspect NodeImpl\u003cParent, Child\u003e {\n\n    declare parents : Child implements INode\u003cParent, Child\u003e;\n    declare parents : Parent implements INode\u003cParent, Child\u003e;\n    ...\n}\n\n--------------------\n// somewhere else in the far reaches of the universe...\n\n    static aspect PC extends NodeImpl\u003cTag, Tag\u003e {\n        // bug 1: required, though it shouldn\u0027t be \n        // bug 2: spurious error on this line\n        declare parents : Tag implements INode\u003cTag,Tag\u003e;\n        ...\n    }\n\nLet me know if you need a more complete test.  I believe you\u0027re working in this area and know about it, but can\u0027t tell.\n\nAspectJ version 1.5.0.20051206103951, via AJDT",
    "Hmmmm.... I\u0027m having trouble with this one.  I think I do need a more complete example if you have the time to create one Wes?  On bug #1 it could be the bridge method code misbehaving.\n\nOn bug#2 - you should not have to make that declaration in the sub-aspect - the super aspect should do it.  I wrote some simple code and it was behaving as expected - but I don\u0027t deny there could be something in this area, it *is* rocket science ;)\n\nIt\u0027s interesting that all 3 declare parents statements resolve to be the same thing in this case...\n\nHave you read the latest ParentChildRelationship aspect in the doc (the doc in the tree, not on the website) - that shows a fully working generic aspect.",
    "In case it helps, here\u0027s an exception I got while trying to create a smaller test case for this bug (using batch mode in same version of AJDT/AspectJ):\n\njava.lang.UnsupportedOperationException\nat org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java:218)\nat org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith(ExactTypePattern.java:242)\nat org.aspectj.weaver.patterns.TypePatternList.parameterizeWith(TypePatternList.java:195)\nat org.aspectj.weaver.patterns.DeclareParents.parameterizeWith(DeclareParents.java:77)\nat org.aspectj.weaver.ReferenceType.getDeclares(ReferenceType.java:484)\nat org.aspectj.weaver.ResolvedType.collectDeclares(ResolvedType.java:523)\nat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:488)\nat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:60)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:378)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:388)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:314)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:168)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nUnsupportedOperationException thrown: resolve this type first",
    "code:\n\n-----------------------\npackage bugs;\n\nimport bugsOtherPackage.INode;\nimport bugsOtherPackage.NodeImpl;\n\npublic class ParameterizedDP {\n\n    public static void main(String[] args) {\n        // 1) compile-time error here without \n        //    {unneeded} subaspect declare-parent\n        // Tag as INode\u003cTag, Tag\u003e from PC extends NodeImpl\u003cTag, Tag\u003e\n        ((TaggedTexts.Tag) null).getParent();       \n    }\n\n}\nclass TaggedTexts {\n\n    public static class Text {  }\n\n    public static class Tag {  }\n    static aspect PC extends NodeImpl\u003cTag, Tag\u003e {\n        // unneeded declare-parents duplicates one in NodeImpl\n        // when here, get spurious error message\n        // when commented out, d-p fails and get compiler error at 1) above\n        declare parents : Tag implements INode\u003cTag,Tag\u003e;\n    }\n}\n---------------------------\npackage bugsOtherPackage;\n\nimport java.util.ArrayList;\n\npublic abstract aspect NodeImpl\u003cParent, Child\u003e {\n\n    declare parents : Child implements INode\u003cParent, Child\u003e;\n    declare parents : Parent implements INode\u003cParent, Child\u003e;\n\n    private final ArrayList\u003cINode\u003e INode.fChildren \u003d new ArrayList\u003cINode\u003e();\n\n    // are you not supposed to use type parameters here?\n    private INode\u003cParent, Child\u003e INode.fParent;\n    public final INode\u003cParent, Child\u003e INode.getParent() {\n        return fParent;\n    }\n    public final boolean INode.setParent(INode\u003cParent, Child\u003e newParent) {\n        fParent \u003d newParent;\n        return true;\n    }\n}\n---------------------------\npackage bugsOtherPackage;\n\npublic interface INode\u003cParent, Child\u003e {\n    boolean setParent(INode\u003cParent, Child\u003e p);\n    INode\u003cParent, Child\u003e getParent();\n}\n---------------------------\n",
    "Hmmm.  That program compiles perfectly for me (I\u0027m using HEAD).  I tried with and without the declare parents in the subaspect and it still worked fine.  I changed the body of the main() method to read:\n\n    public static void main(String[] args) {\n        TaggedTexts.Tag tag1 \u003d new TaggedTexts.Tag();\n        TaggedTexts.Tag tag2 \u003d new TaggedTexts.Tag();\n        tag1.getParent();\n        tag1.setParent(tag2);\n        if (!tag1.getParent().equals(tag2)) throw new RuntimeException(\"\");\n    }\n\nso that I could actually run something and it worked fine.\n\nI\u0027ve looked at the resultant classes on the disk, in particular \u0027Tag\u0027 class.  The signature attribute for Tag is:\n\nLjava/lang/Object;LbugsOtherPackage/INode\u003cLbugs/TaggedTexts$Tag;Lbugs/TaggedTexts$Tag;\u003e;;\n\nwhich says \u0027Tag extends Object implements bugsOtherPackage.INode\u003cTag,Tag\u003e\u0027 which\nis what we\u0027d expect.\n\nthere are two fields in the Tag class:\nArrayList ajc$interField$bugsOtherPackage_NodeImpl$bugsOtherPackage_INode$fChildren;\n\nbugsOtherPackage.INode ajc$interField$bugsOtherPackage_NodeImpl$bugsOtherPackage_INode$fParent;\n\nthe methods are as expected - mangled set/get methods for the fields and:\n\npublic final bugsOtherPackage.INode getParent();\npublic final boolean setParent(bugsOtherPackage.INode);\n\n----\n\nDOH!! I should read the information Wes actually supplied.\nI see it was raised against M4.  \n\nRecompiling with M4, I get the kind of problems reported:\n\nWith or without the decp I get:\nC:\\temp\\ajcSandbox\\ajcTest47383.tmp\\NodeImpl.java:16 [error] The field INode\u003cPar\nent,Child\u003e.fParent is not visible\nreturn fParent;\n\nWes - please can you retry on a recent build?",
    "Sorry, I was wrong to put M4.  I wrote AspectJ 1.5.0.20051206103951, which is what\u0027s in the AJDT I\u0027ve been using.  I\u0027ll update and take another look (probably in about 12 hours - I\u0027m not too concerned if you weren\u0027t able to reproduce it, and wouldn\u0027t hold up rc1 for this).",
    "fyi, confirmed that I too get no error from the command line using HEAD, but still get error when using AJDT (which is still using AspectJ 1.5.0.20051206103951).",
    "Looks like some of the options are getting through differently in the AJDT environment.  I\u0027ve recreated Wes\u0027 scenario and get the same warning:\n\nThe method TaggedTexts.PC.ajc$declare_parents_1() does not override the inherited method from NodeImpl\u003cTaggedTexts.Tag,TaggedTexts.Tag\u003e since it is private to a different package.\tParameterizedDP.java\tAP/bugs\tline 25\t12 December 2005 11:23:13\t8155\n\nwhen the decp is in place.\n\nVery peculiar.  I\u0027ve fixed the appearance of this warning.  However, when I remove the declare parents, everything just works - whether I am in AJDT (20051208103628) or on the command line.\n\nWes - when you said \u0027still get the error\u0027 in your last comment, did you mean the silly warning about ajc$declare_parents_1() or another error?  If its another error, what is the text for it?  I find the only way to see errors on this line:\n\n        ((TaggedTexts.Tag) null).getParent(); \n\nis if I have ParameterizedDP open in the java editor rather than the aspectj editor - when the eager parser chokes on it (the code on disk that is built is fine).  this is a known \u0027feature\u0027 of AJDT :)",
    "I\u0027ve gone back in time and recreated this :)  At 1.3.0.20051202173447 - I can recreate it easily, so I\u0027ll now alter this eclipse I\u0027m using to use the latest AJDT and see if it vanishes.",
    "bingo!  recreated on latest after a lot of fiddling - lucky I have the MultiProjectIncremental test mechanism in AJ.  I find I have to do a full build with the decp in, then an incremental build with it commented out, then a full build - in order to see the error.",
    "Ok, sounds resolved - except that I was getting the error without incremental and after cleaning.  hmm.\n\nAs you suggested, the second error is/was in the Java editor on \"((TaggedTexts.Tag) null).getParent();\"\n\nI\u0027m glad you found the difference in AJDT settings - I\u0027m curious what they were. I couldn\u0027t find them.  I did a some scripting to jam the latest AspectJ classes into AJDT and was surprised to find the problem recurring (in AJDT but not from the command line), seemingly no matter what I did via the GUI settings (noinline, etc.)  I figured my script wasn\u0027t right.  Perhaps AJDT 1.3.0.20051202173447 will be pushed to the web?",
    "The bingo was referring to me recreating your problem with getParent() - its not just a java/aj editor problem.  I\u0027ve recreated with HEAD on the command line like this:\n\n\u003eajc -1.5 bugs\\ParameterizedDP.java bugsOtherPackage\\INode.java bugsOtherPackage\\NodeImpl.java\n\nK:\\ws\\aspectj_ws2\\tests\\multiIncremental\\PR119570\\base\\bugs\\ParameterizedDP.java\n:12 [error] The method getParent() is undefined for the type TaggedTexts.Tag\n((TaggedTexts.Tag) null).getParent();\n\n\n1 error\n\nThis variant compiles with no errors:\n\n\u003eajc -1.5 bugsOtherPackage\\INode.java bugsOtherPackage\\NodeImpl.java bugs\\ParameterizedDP.java\n\nThe bug appears to be the order processing not coping with you putting the sub-aspect as a membertype of another type - so if I compile them in one order it works, if I compile in another where ajc doesn\u0027t see the super-aspect first, then it fails.",
    "i\u0027ve fixed this other problem too now.  It was (as I expected) a problem with the sub-aspect being an inner type.\n\n",
    "fix available."
  ],
  "commentCreationDates": [
    "2005-12-07T05:00:15+01:00",
    "2005-12-07T12:04:53+01:00",
    "2005-12-08T16:55:07+01:00",
    "2005-12-08T16:59:47+01:00",
    "2005-12-09T09:12:21+01:00",
    "2005-12-09T11:43:03+01:00",
    "2005-12-11T02:10:03+01:00",
    "2005-12-12T11:56:44+01:00",
    "2005-12-12T15:57:46+01:00",
    "2005-12-12T16:27:22+01:00",
    "2005-12-12T16:38:56+01:00",
    "2005-12-12T17:23:21+01:00",
    "2005-12-12T19:16:13+01:00",
    "2005-12-13T16:40:56+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.UnsupportedOperationException",
      "elements": [
        {
          "method": "org.aspectj.weaver.UnresolvedType.parameterize",
          "source": "UnresolvedType.java:218"
        },
        {
          "method": "org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith",
          "source": "ExactTypePattern.java:242"
        },
        {
          "method": "org.aspectj.weaver.patterns.TypePatternList.parameterizeWith",
          "source": "TypePatternList.java:195"
        },
        {
          "method": "org.aspectj.weaver.patterns.DeclareParents.parameterizeWith",
          "source": "DeclareParents.java:77"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getDeclares",
          "source": "ReferenceType.java:484"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.collectDeclares",
          "source": "ResolvedType.java:523"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers",
          "source": "ResolvedType.java:488"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect",
          "source": "CrosscuttingMembersSet.java:60"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures",
          "source": "AjLookupEnvironment.java:378"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures",
          "source": "AjLookupEnvironment.java:388"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares",
          "source": "AjLookupEnvironment.java:314"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings",
          "source": "AjLookupEnvironment.java:168"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile",
          "source": "Compiler.java:301"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:315"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:811"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:230"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:156"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:122"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "119570",
      "date": "2005-12-08T16:55:07+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "119570",
  "bugId": "119570",
  "date": "2005-12-07T05:00:15+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}