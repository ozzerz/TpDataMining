{
  "comments": [
    "Since the current web connector doesn\u0027t allow one to map the task priority to Mylyns internal priority code, all tasks\nend up with the default P3 priority. Since the Priority sort is only for the first level, it means that the tasks end\nup being show in pretty much random order. It would be nice if the tasks were sorted on a second level by the\nid/summary.",
    "Created an attachment (id\u003d81834)\nUse summary code to sort tasks if the priorities are equal\n\nWhy the element2.getSummary() call?",
    "Created an attachment (id\u003d81835)\nmylyn/context/zip\n\n",
    "George, can you please update your patch and include extended test cases into org.eclipse.mylyn.tasks.tests.TableSorterTest ?\n\nAlso, if you are interested, it may worth to look at some optimizations. For example, getSortableSummaryFromElement() combine task key and summary for the AbstractTask, and then that string is split back into key and summary by TaskKeyComparator, which I think adds significant amount of computation for large task list.",
    "Eugene, I did look at at TableSorterTest and noted that it was only concerned about the whether the two\nelements compared properly. It doesn\u0027t currently care how the elements are sorted. \n\nI\u0027ll try and come up with a sort sequence test case.\n\nI\u0027ll see how I can optimize the code as well.",
    "Created an attachment (id\u003d83022)\nImproved patch\n\nAdded JUnit test. Sped up performance by by-passing the string building/splitting\n\nI created the ITaskListView interface so I could fake out TaskListView for the JUnit test",
    "Created an attachment (id\u003d83023)\nmylyn/context/zip\n\n",
    "Rob: please review.",
    "I\u0027ll review this Tuesday George.",
    "Created an attachment (id\u003d83408)\nupdated patch\n\nGeorge, I\u0027ve clean up the api slightly so that sorting direction/column are held by the TaskListTableSorter.  It is all working nicely with the exception that perhaps in your optimization of TaskKeyComparator, when it gets to the sorting by summary it isn\u0027t working as it did previously.  With your patch applied I\u0027m now seeing   4: foo,   44:foo2,  5: bar, 55:bar2.  This should sort as 4:foo, 5:bar, 44:foo2, 55:bar2.  ",
    "Created an attachment (id\u003d83476)\nProper sorting\n\nSigh, this ended up being ugly. I misunderstood the\nPATTERN used to split up the task string. \n\nI\u0027m not too happy with what I ended up doing to support the \"XXX-NN\", plus I ended up\nchanging the compare() signature. ",
    "Created an attachment (id\u003d83477)\nmylyn/context/zip\n\n",
    "George, your last patch doesn\u0027t contain code but rather the comment text? Might be a bugzilla bug? Anyway, if you don\u0027t mind could you try re-attaching your patch?",
    "Created an attachment (id\u003d83706)\nPatch, again\n\nSee if it gets through the system this time.",
    "Created an attachment (id\u003d83707)\nmylyn/context/zip\n\n",
    "This is looking great so far.  Just one outstanding issue related to sorting of LocalTasks.  I can create an npe if sorting a few local tasks by priority:\n\n\tpublic void testLocalTaskSort() {\n\t\tfinal TaskListTableSorter sorter \u003d new TaskListTableSorter(TaskListView.getFromActivePerspective());\n\t\tAbstractTask task1 \u003d new LocalTask(\"1\", \"task1\");\n\t\tAbstractTask task2 \u003d new LocalTask(\"2\", \"task2\");\n\t\tAbstractTask task3 \u003d new LocalTask(\"3\", \"task3\");\n\t\tAbstractTask[] tasks \u003d { task1, task2, task3 };\n\t\tsorter.sort(new EmptyViewer(), tasks);\n\t}\n\nWe\u0027ll need to guard against nulls within the comparator.  Once we have this covered by unit tests I think we\u0027re done here!\n\njava.lang.NullPointerException\nat org.eclipse.mylyn.internal.tasks.ui.views.TaskKeyComparator.compare(TaskKeyComparator.java:32)\nat org.eclipse.mylyn.internal.context.ui.TaskListInterestSorter.compareKeys(TaskListInterestSorter.java:189)\nat org.eclipse.mylyn.internal.context.ui.TaskListInterestSorter.comparePrioritiesAndKeys(TaskListInterestSorter.java:181)\nat org.eclipse.mylyn.internal.context.ui.TaskListInterestSorter.compare(TaskListInterestSorter.java:113)\nat org.eclipse.jface.viewers.ViewerComparator$1.compare(ViewerComparator.java:187)\nat java.util.Arrays.mergeSort(Arrays.java:1270)\nat java.util.Arrays.sort(Arrays.java:1210)",
    "Created an attachment (id\u003d83728)\nNPE fix\n\nDon\u0027t try to compare using a null task value",
    "Great! Patch applied, ip log update. Flagged as noteworthy since this is such a nice yet subtle feature.",
    "Marking resolved.",
    "Rob: how is this going to be explicit in the UI?  Don\u0027t we need to change the \"Sort by -\u003e Priority\" label to be \"Sort by -\u003e Priority then Summary\"?  Either that or we can add a rule to each manual sorter that it defaults to Summary if it finds two equal entries.  I suggest the latter.",
    "+1 for using summary as second level sorting without cluttering sorting description",
    " (In reply to comment #19)\n\u003e Rob: how is this going to be explicit in the UI?  Don\u0027t we need to change the\n\u003e \"Sort by -\u003e Priority\" label to be \"Sort by -\u003e Priority then Summary\"?  Either\n\u003e that or we can add a rule to each manual sorter that it defaults to Summary if\n\u003e it finds two equal entries.  I suggest the latter.\nI like the default to summary option.  At some point we could investigate using a dialog where sort order can be configured but I think that might be over kill at this point.",
    "Sounds fine."
  ],
  "commentCreationDates": [
    "2007-11-01T08:27:13+01:00",
    "2007-11-01T08:42:26+01:00",
    "2007-11-01T08:42:28+01:00",
    "2007-11-01T18:28:20+01:00",
    "2007-11-01T18:43:00+01:00",
    "2007-11-16T02:52:41+01:00",
    "2007-11-16T02:52:42+01:00",
    "2007-11-17T00:57:54+01:00",
    "2007-11-19T18:46:55+01:00",
    "2007-11-21T08:20:56+01:00",
    "2007-11-21T21:30:00+01:00",
    "2007-11-21T21:30:03+01:00",
    "2007-11-24T17:28:31+01:00",
    "2007-11-24T22:13:58+01:00",
    "2007-11-24T22:14:00+01:00",
    "2007-11-25T07:50:16+01:00",
    "2007-11-26T00:08:22+01:00",
    "2007-11-26T19:34:29+01:00",
    "2007-11-26T19:35:02+01:00",
    "2007-11-27T02:15:38+01:00",
    "2007-11-27T02:34:42+01:00",
    "2007-11-27T03:01:36+01:00",
    "2007-12-11T02:52:43+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.mylyn.internal.tasks.ui.views.TaskKeyComparator.compare",
          "source": "TaskKeyComparator.java:32"
        },
        {
          "method": "org.eclipse.mylyn.internal.context.ui.TaskListInterestSorter.compareKeys",
          "source": "TaskListInterestSorter.java:189"
        },
        {
          "method": "org.eclipse.mylyn.internal.context.ui.TaskListInterestSorter.comparePrioritiesAndKeys",
          "source": "TaskListInterestSorter.java:181"
        },
        {
          "method": "org.eclipse.mylyn.internal.context.ui.TaskListInterestSorter.compare",
          "source": "TaskListInterestSorter.java:113"
        },
        {
          "method": "org.eclipse.jface.viewers.ViewerComparator$1.compare",
          "source": "ViewerComparator.java:187"
        },
        {
          "method": "java.util.Arrays.mergeSort",
          "source": "Arrays.java:1270"
        },
        {
          "method": "java.util.Arrays.sort",
          "source": "Arrays.java:1210"
        }
      ],
      "number": 0,
      "commentIndex": 15,
      "bugId": "208363",
      "date": "2007-11-25T07:50:16+01:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "normal"
    }
  ],
  "groupId": "208363",
  "bugId": "208363",
  "date": "2007-11-01T08:27:13+01:00",
  "product": "Mylyn",
  "component": "Tasks",
  "severity": "normal"
}