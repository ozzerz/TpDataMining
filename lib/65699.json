{
  "comments": [
    "Bloody bugzilla kicked my nice and long decription off, because of missing \ncomponent. Thx.  I take it short.\n\n  Got 3 projects in chain dependency. On first 2 (independent and second \ndepends on first) VE works so far. On third doesn\u0027t show any visual component \nnor pallete. There\u0027s only selection, Marquee and Choose bean in there. You can \nchoose bean but cannot put it anywhere. Java beans and properties views remains \nempty. Each try I get this message into .metadata\\.log\n  \n\n!ENTRY org.eclipse.ve.java.core 4 0 Jun 04, 2004 13:51:00.10\n!MESSAGE Exception thrown.\n!STACK 0\njava.lang.NullPointerException\n\tat \norg.eclipse.ve.internal.java.codegen.java.ExpressionDecoderFactory.getExpDecoder\n(ExpressionDecoderFactory.java:98)\n\tat org.eclipse.ve.internal.java.codegen.model.BeanPart.setEObject\n(BeanPart.java:470)\n\tat org.eclipse.ve.internal.java.codegen.model.BeanPart.createEObject\n(BeanPart.java:798)\n\tat \norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.createJavaInstanc\nes(JavaSourceTranslator.java:626)\n\tat \norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.buildCompositionM\nodel(JavaSourceTranslator.java:707)\n\tat \norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.decodeDocument\n(JavaSourceTranslator.java:816)\n\tat \norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.loadModel\n(JavaSourceTranslator.java:589)\n\tat \norg.eclipse.ve.internal.java.codegen.editorpart.JavaVisualEditorPart$Setup.run\n(JavaVisualEditorPart.java:1278)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:62)",
    "Rich... this might be related to bug 63387",
    "What level of VE are you working with? M8?\n\nHave you tried this on the latest VE integration build? I20040603a? Another bug\nwas opened with the same stack trace with many project dependencies and updating\nto the latest VE seem to have solve this problem. See bug 63387.\n\nIf this doesn\u0027t work, please provide a small project and it\u0027s dependencies so I\ncan try to reproduce this problem and pursue further investigation.\n\n",
    "We are trying to stablize and clean up all critical defects in order to provide\na stable build. Could you please provide an example project(s) with this problem\nso we can investigate it further. \nThanks...",
    " \n  Hi \n\n  I tried to create set of projects to simulate the bug, but I didn\u0027t \nsucceeded. On my new small projects VE was working, but in productive projects \nthe problem still persists. It\u0027s hard to say why. It could be related to \noverall size, classpath length or whatever. Really don\u0027t have clue. I cannot \nsend you productive projects, since they are 100MB and comercial code. \n  The think is that my problem with VE is somewhere else. I say the point of VE \nin general is to get the ability to modify UI of finished forms. Your VE cannot \nbe used for this. It doesn\u0027t respect changes written into form code by hand. \nFor example if you are targetting unix and win platform it\u0027s good to set \nprefered size like :\n \njComboBoxType.setPreferredSize(new Dimension(200, jComboBoxType.getPreferredSize\n().height));\n\nif i do it, VE stops showing the combo. Other example:\n\njComboBoxType \u003d new JComboBox()\n{\n public void paint(Graphics g)\n {\n  super.paint(g);\n  Painter.paintIsRequired(this, g);\n }\n};\n\n After this VE is not able to handle it correctly. You cannot see the component \non screen, but you can still modify its properties. If you add actionlistener \nsometimes the code  appears in the midle of paint method.\n This is problem of all visual editors I know so far. Did you think about \nletting the VE do everything (inline extending, method definig \u0026 overriding) \nand not showing generated code at all ? I remember VE from Foxpro was working \nthe way and it was much better than all java VEs.\n\nPavel",
    "This bug seems to have multiple issues in it.\n\nFirst:   the stack trace:  The stack trace notes that CodeGen could not find a\ndecoder for a component... this will be the case if the object is not available.\n Not having the palette indicate that there is no JRE detected on the class path.\n\nCan you attatch the .classpath file from this project.\n\n\n\n\nSecond:  Code Patterns.  Please open seperate defects for these:\n\n          jComboBoxType.setPreferredSize(new Dimension(200,\njComboBoxType.getPreferredSize\n().height));\n\n          VE should in the future be able to evaluate these kind of expressions,\nthough there is going to be a limit to how complext/deep VE will support.\n\n         jComboBoxType \u003d new JComboBox() { overrides .... }\n         We do not support this today anonymous overrides because in order for\nus to introspect/render these components, we have to be able to instantiate\nthem.   We could allow this by instantiating a non abstract super when possible\nand render it instead (may not be WYSIWYG)\n\n    \n\n          ",
    "We can not recreate this... I do not want to close it as of yet, wanted to see\nif you still have this problem in the latest driver.",
    "same problem here.\nJust installed a fresh Eclipse3.0 and VES20040628 (and corresponding GEF + EMF).\nThen checked out our projects from CVS (multiple projects dependent on each other).\n\nA small extract from dependency graph looks like this:\n\nutil_base \u003c-- gui_base \u003c------------------------- main_project \n                  \\---------- other stuff \u003c--/ \n\n\nWhen I open a visual class in main_project, top left I only see \"Selection\",\n\"Marquee\", and \"Choose Bean\".\nThe visual editor shows nothing at all.\nWithin the same project I can create a new visual class but the same thing there\n-\u003e no output so it doesn\u0027t seem to be related to the actual code within the classe.\nException in .log is the same as mentioned above.\n\nWhen I create a new visual class within gui_base, then everything seems to work\nfine, so it must be related to project settings.\nWhich files do you need for further investigation ?",
    "gotcha!\n\nto reproduce:\n\ncreate project test1 with following classpath:\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003cclasspath\u003e\n\t\u003cclasspathentry kind\u003d\"src\" path\u003d\"src/java\"/\u003e\n\t\u003cclasspathentry kind\u003d\"lib\" path\u003d\"properties\"/\u003e\n\t\u003cclasspathentry kind\u003d\"src\" path\u003d\"/test2\"/\u003e\n\t\u003cclasspathentry sourcepath\u003d\"JRE_SRC\" kind\u003d\"var\" path\u003d\"JRE_LIB\"/\u003e\n\t\u003cclasspathentry kind\u003d\"output\" path\u003d\"classes\"/\u003e\n\u003c/classpath\u003e\n\ncreate project test2 with following classpath:\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003cclasspath\u003e\n\t\u003cclasspathentry kind\u003d\"src\" path\u003d\"src/java\"/\u003e\n\t\u003cclasspathentry output\u003d\"junitclasses\" kind\u003d\"src\" path\u003d\"src/junit\"/\u003e\n\t\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.jdt.launching.JRE_CONTAINER\"/\u003e\n\t\u003cclasspathentry kind\u003d\"output\" path\u003d\"classes\"/\u003e\n\u003c/classpath\u003e\n\n\nnote that both projects seem to use a different way to include the JRE !\n\n\nif I change the order if imports in project1 to:\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003cclasspath\u003e\n\t\u003cclasspathentry kind\u003d\"src\" path\u003d\"src/java\"/\u003e\n\t\u003cclasspathentry kind\u003d\"lib\" path\u003d\"properties\"/\u003e\n\t\u003cclasspathentry sourcepath\u003d\"JRE_SRC\" kind\u003d\"var\" path\u003d\"JRE_LIB\"/\u003e\n\t\u003cclasspathentry kind\u003d\"src\" path\u003d\"/test2\"/\u003e\n\t\u003cclasspathentry kind\u003d\"output\" path\u003d\"classes\"/\u003e\n\u003c/classpath\u003e\n\neverythings works as well !\n\nIf both projects use \n\u003cclasspathentry sourcepath\u003d\"JRE_SRC\" kind\u003d\"var\" path\u003d\"JRE_LIB\"/\u003e\nthe order of imports in project1 doesn\u0027t make a difference.\n\nIf both projects use\n\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.jdt.launching.JRE_CONTAINER\"/\u003e\nit doesn\u0027t work at all again.\n\nMy eclipse is started via:\n\"C:\\Programme\\eclipse 3\\eclipse\\eclipse.exe\" -vm\nC:\\Programme\\JBuilder9\\jdk1.4\\jre\\bin\\javaw.exe -vmargs -Xmx256M\n\n\nhope that helps",
    "Rich, any ideas why reordering the classpath entries would make a difference here?",
    "The first project:\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003cclasspath\u003e\n\t\u003cclasspathentry kind\u003d\"src\" path\u003d\"src/java\"/\u003e\n\t\u003cclasspathentry kind\u003d\"lib\" path\u003d\"properties\"/\u003e\n\t\u003cclasspathentry kind\u003d\"src\" path\u003d\"/test2\"/\u003e\n\t\u003cclasspathentry sourcepath\u003d\"JRE_SRC\" kind\u003d\"var\" path\u003d\"JRE_LIB\"/\u003e\n\t\u003cclasspathentry kind\u003d\"output\" path\u003d\"classes\"/\u003e\n\u003c/classpath\u003e\n\n\nRich, do you still support a JRE_LIB?\nPavel, can you set up yout project with a JRE container instead of a variable.\n\n",
    "Found the problem. The test2 project was ahead of the jre_lib and it hid the\njre_lib. Changed it so that jre_lib/jre_container will never be hidden. The code\nhas not yet been released.",
    "For now the workaround is to move the JRE_LIB ahead of test2 project in test1\u0027s\nbuild path.",
    "This has been released to HEAD",
    "1.0M2 is out, so these are now closed in M2."
  ],
  "commentCreationDates": [
    "2004-06-04T14:27:26+02:00",
    "2004-06-04T15:53:38+02:00",
    "2004-06-07T17:10:49+02:00",
    "2004-06-08T20:22:41+02:00",
    "2004-06-09T10:53:29+02:00",
    "2004-06-14T15:10:42+02:00",
    "2004-06-28T14:34:24+02:00",
    "2004-07-15T09:42:11+02:00",
    "2004-07-15T11:50:36+02:00",
    "2004-07-15T13:32:33+02:00",
    "2004-07-15T13:56:55+02:00",
    "2004-07-15T17:51:47+02:00",
    "2004-07-15T17:52:26+02:00",
    "2004-07-16T17:44:06+02:00",
    "2004-07-31T17:19:53+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.ve.internal.java.codegen.java.ExpressionDecoderFactory.getExpDecoder",
          "source": "ExpressionDecoderFactory.java:98"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.model.BeanPart.setEObject",
          "source": "BeanPart.java:470"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.model.BeanPart.createEObject",
          "source": "BeanPart.java:798"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.createJavaInstances",
          "source": "JavaSourceTranslator.java:626"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.buildCompositionModel",
          "source": "JavaSourceTranslator.java:707"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.decodeDocument",
          "source": "JavaSourceTranslator.java:816"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.loadModel",
          "source": "JavaSourceTranslator.java:589"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.editorpart.JavaVisualEditorPart$Setup.run",
          "source": "JavaVisualEditorPart.java:1278"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:62"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "65699",
      "date": "2004-06-04T14:27:26+02:00",
      "product": "Web Tools",
      "component": "jst.jem",
      "severity": "major"
    }
  ],
  "groupId": "65699",
  "bugId": "65699",
  "date": "2004-06-04T14:27:26+02:00",
  "product": "Web Tools",
  "component": "jst.jem",
  "severity": "major"
}