{
  "comments": [
    "ASTParser in 3.0 can be used in another standalone program to create Eclipse\nASTs without actually running Eclipse. As the documentation says:\n\n  char[] source \u003d ...;\n  ASTParser parser \u003d ASTParser.newParser(AST.JLS2);  // handles JLS2 (J2SE 1.4)\n  parser.setSource(source);\n  CompilationUnit result \u003d (CompilationUnit) parser.createAST(null);\n\nBut this doesn\u0027t work in 3.1 because ASTParser always gets the plugin object,\nand when it is null (in the case of a standalone program), a null pointer\nexception is raised.\n\nPlease look at JavaCore.getOptions(). In 3.0, it tests if the result of\ngetPlugin() is null; in 3.1, the test disappears, hence causing the problem.",
    "You need at least a headless Eclipse. The JDT/Core plugin needs to be initialized.",
    "Looking at the doc I don\u0027t find a reference saying that DOM/AST should work in a\nstand-alone application.",
    "I\u0027m just thinking, if the parser CAN work without being called in a plugin, why\nit SHOULDN\u0027T? A simple test is easy to add to it, and the fix makes it backward\ncompatible with 3.0.",
    "With the new bridging method between the java element and the dom nodes, the\njava model needs to be initialized. This means that the JDT/Core plugin needs to\nbe initialized.",
    "So is this not going to be fixed? We like to write tests for our parsing code\noutside of the environment. We use JUnit and FitNesse. Both sets of tests fail\nwhen we upgrade to 3.1.\n\nIs there a workaround we can use to get our tests running again?",
    "(In reply to comment #4)\n\u003e With the new bridging method between the java element and the dom nodes, the\n\u003e java model needs to be initialized. This means that the JDT/Core plugin needs \nto\n\u003e be initialized.\n\nWhat about making all bridging method return null when JDT/Core is not \ninitialized?",
    "Close as WONTFIX.\nDOM API are designed to work within a headless Eclipse.",
    "You need to define your code within a plugin and run your JUnit tests as JUnit\nplugin tests. Your plugin would have org.eclipse.jdt.core as a requirement.",
    "Olivier\nI understand this is a hard pb.\nI really think this should re-considered though.\nCoudl you at least tempora\nThere is a wealth of treasure available in the JDT core code whic is ready to be\nre-used outside of Eclipse.\nThat would be really sad if none could benefit from it.\nIn the last week i have talkedd to at least three person that asked about it.\n",
    "Could you talk with the team about it?",
    "I think having ASTParser working outside of eclipse and without the need for all\nthe dependencies to run a headless eclipse is important. The JDT compiler is\nstarting to be used outside of eclipse, Tomcat, and we are looking to use it\nwith Drools, http://drools.org, so it\u0027s only natural that projects like these\nwould like to have access to a powerful tool like ASTParser. I fully understand\nthat at this time its not practical, but I think this should be marked as a\nfuture item, not as a WONT FIX.",
    "Sorry but my comments was cut mid-way.\nI was asking if you could at least re-open that bug?",
    "Reopening. Olivier if the change is small, then we may be able to do it. If not,\nkeep it for Later.",
    "(In reply to comment #13)\n\u003e Reopening. Olivier if the change is small, then we may be able to do it. If\n\u003e not,\n\u003e keep it for Later.\n\u003e \n\nI just added two lines of code to use JDT as a stand alone Java parser.\nThis might be a quick and dirty fix, but you folks can make it better.\n\nSung \u003chunkim@gmail.com\u003e\n\nIndex: JavaCore.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nRCS file: /home/eclipse/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java,v\nretrieving revision 1.517\ndiff -u -r1.517 JavaCore.java\n--- JavaCore.java       14 Dec 2005 14:59:11 -0000      1.517\n+++ JavaCore.java       27 Dec 2005 20:06:49 -0000\n@@ -2569,6 +2569,9 @@\n         * @see JavaCorePreferenceInitializer for changing default settings\n         */\n        public static Hashtable getOptions() {\n+               if (getPlugin() \u003d\u003d null) {\n+                       return new Hashtable();\n+               }\n                return JavaModelManager.getJavaModelManager().getOptions();\n        }",
    "We need to do two things to fix this PR properly.\n1) Access to the options when JDT/Core is not initialized.\n2) Provide a name environment in order to be able to get bindings. The bridge methods would not work (since the Java model doesn\u0027t exist), but we must expose the bindings. Right now this assumes that a java project is available. If JDT/Core is not initialized, there is no java project.\nIf someone has an API to propose to fix the second point, please speak up.",
    "*** Bug 93948 has been marked as a duplicate of this bug. ***",
    "For M6 we can target a solution that would allow the creation of the AST, but no binding would be available.",
    "Fixed and released in HEAD.\nMartin,\n\nCould you please try the next integration build? I could use the ASTParser without running the platform.",
    "Olivier, thanks!",
    "(In reply to comment #18)\n\u003e Fixed and released in HEAD.\n\u003e Martin,\n\u003e \n\u003e Could you please try the next integration build? I could use the ASTParser\n\u003e without running the platform.\n\u003e \nYes, it works for me well. Thanks for the quick solution, it helps us very much!",
    "Can anyone summarize what will and will not be available due to the lack of bindings when running outside of Eclipse?  I\u0027m somewhat of a newbie on the AST Parser, so I\u0027m not sure what function is included in the bindings.\n",
    "Bindings contains the resolved information.\nFor example if you have a method header like this:\n\nString foo() {\n...\n}\n\nThen the IMethodBinding for the method foo will tell you that the return type is java.lang.String. Without the bindings, it is impossible to know that String comes from the java.lang package. You could have defined your own class String.\n\nThe reason why no bindings are available when used outside of Eclipse is that there is no context to resolve the bindings. Within Eclipse, the java project provides the context.\nIn order to resolve bindings, we would need to provide a new API that could allow the user to give the context in which the bindings will be resolved. But this is beyond the scope of this bug report.",
    "Verified for 3.2 M6 using build I20060328-0010",
    "*** Bug 97444 has been marked as a duplicate of this bug. ***",
    "I m trying to create and parse AST using the following code.  I use eclipse IDE to do so.  I have tried both eclipse 3.1 and 3.2.  When I went through the forum I found few others are also facing the same problem, and reply posted to them was that they may be running it outside eclipse.  In my case I am running it in the eclipse environment.  Pls help.....\n\nErrors that I got:\n\nException in thread \"main\" java.lang.ExceptionInInitializerError\nat org.eclipse.jdt.core.JavaCore.getOptions(JavaCore.java:2401)\nat org.eclipse.jdt.core.dom.ASTParser.initializeDefaults(ASTParser.java:222)\nat org.eclipse.jdt.core.dom.ASTParser.\u003cinit\u003e(ASTParser.java:204)\nat org.eclipse.jdt.core.dom.ASTParser.newParser(ASTParser.java:109)\nat provaCompilatore.parse(provaCompilatore.java:21)\nat provaCompilatore.main(provaCompilatore.java:46)\nCaused by: java.lang.NullPointerException\nat org.eclipse.jdt.internal.core.search.indexing.IndexManager.getJavaPluginWorkingLocation(IndexManager.java:284)\nat org.eclipse.jdt.internal.core.search.indexing.IndexManager.\u003cinit\u003e(IndexManager.java:50)\nat org.eclipse.jdt.internal.core.JavaModelManager.\u003cinit\u003e(JavaModelManager.java:671)\nat org.eclipse.jdt.internal.core.JavaModelManager.\u003cclinit\u003e(JavaModelManager.java:649)\n... 6 more\n--------------------------------------\n\n\nHere my code:\n------------------------------\n\n\nimport org.eclipse.jdt.core.dom.AST;\nimport org.eclipse.jdt.core.dom.ASTParser;\nimport org.eclipse.jdt.core.dom.CompilationUnit;\n\n\npublic class provaCompilatore {\n\t\t\n\tprovaCompilatore(){\t\t\n\t}\n\t\t\n\tpublic void parse(){\n\t\t\n\t\tASTParser parser \u003d ASTParser.newParser(AST.JLS3);\t\t\n\t}\n\n\n\tpublic static void main(String[] args) {\n\n\n\t\tprovaCompilatore prova \u003d new provaCompilatore();\n\t\tprova.parse();\t\t\n\t}\n}\n----------------------------\n\n\nhere the jars I added:\n\n\norg.eclipse.core.resources_3.1.0.jar\norg.eclipse.core.runtime_3.1.1.jar\norg.eclipse.jdt.core_3.1.1.jar\n\n\n",
    "Is there another bug open for the issue with setResolveBindings not working in the standalone version of the ASTParser?",
    "From looking at the code, I think the way to solve this problem would be something like:\n\nIn CompilationUnitResolver, create an overloaded resolve() method with the new signature:\n\n\tpublic static void resolve(\n\t\tICompilationUnit[] compilationUnits,\n\t\tString[] bindingKeys,\n\t\tASTRequestor requestor,\n\t\tint apiLevel,\n\t\tMap options,\n\t\tCancelableNameEnvironment env,\n\t\tint flags,\n\t\tIProgressMonitor monitor)\n\nNote: The IJavaProject and WorkingCopyOwner parameters have been replaced with a CancelableNameEnvironment parameter. This is fine, since the existing resolve() already creates a CancelableNameEnvironment parameter from those two arguments - so this is an easy change.\n\nThen, add code to create a CancelableNameEnvironment that does not depend on a JavaProject or WorkingCopyOwner. This is the hardest change. It may be necessary to abstract the CancelableNameEnvironment behind an interface.\n\nFinally, change the internalCreateAST() method in ASTParser to generate the CancelableNameEnvironment in the above way, if the project and/or owner wasn\u0027t specified. This is an easy change also.\n\nSo the bulk of the work, it seems to me, would be adding functionality to create a CancelableNameEnvironment (or something equivalent that would share the same interface) without a project or working copy owner.",
    "Actually...\n\nWe don\u0027t need a new way to create the environment.\n\nUsers of the class can create their own instance of INameEnvironment. The ASTParser could take it as a parameter and would use it when calling the new overloaded resolve() method.\n\nThere\u0027s already a class that implements INameEnvironment without needing a Project or anything:\n\norg.eclipse.jdt.internal.compiler.batch.FileSystem.java\n\nSo users of the ASTParser would just create an instance of FileSystem with the right parameters, and pass it as an INameEnvironment to the ASTParser. This would allow the ASTParser to pass the environment to the CompilationUnitResolver, without needing a project or a working copy.\n",
    "Created an attachment (id\u003d78520)\nPatch allows use of ASTParser to generate bindings outside of Eclipse environment\n\n",
    "The above patch implements what I\u0027m talking about.\n\nBy allowing the user of an ASTParser to specify the INameEnvironment to use (which does not have to be coming from an eclipse project... see FileSystem class that implements INameEnvironment), setResolveBindings can now work without needing to be part of an active Eclipse environment.",
    "I have opened a new bug for the binding resolution issue:\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d87852",
    "Oops, the correct new bug URL is:\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d206391\n",
    "I am running Eclipse 3.3.0 build I20070625-1500 and it would appear that this fix did not make it into that code base as I continue to receive the java.lang.NoClassDefFoundError: org/eclipse/core/runtime/Plugin error.  Would this fix not have been merged into the 3.3 branch?",
    "You still need to provide a bunch of jars on the classpath, but the JavaCore doesn\u0027t need to be initialized.",
    "Thanks for the comment Oliver, that got me on the right track.  The jar\u0027s required appear to be as follows:\norg.eclipse.core.contenttype_3.*version*.jar\norg.eclipse.core.jobs_3.*version*.jar\norg.eclipse.core.resources_3.*version*.jar\norg.eclipse.core.runtime_3.*version*.jar\norg.eclipse.equinox.common_3.*version*.jar\norg.eclipse.equinox.preferences_3.*version*.jar\norg.eclipse.jdt.core_3.*version*.jar\norg.eclipse.osgi.services_3.*version*.jar\norg.eclipse.osgi_3.*version*.jar\norg.eclipse.text_3.*version*.jar\n"
  ],
  "commentCreationDates": [
    "2005-03-12T04:08:21+01:00",
    "2005-03-12T15:59:43+01:00",
    "2005-03-12T16:42:10+01:00",
    "2005-03-12T22:26:01+01:00",
    "2005-03-16T19:56:10+01:00",
    "2005-04-01T02:37:21+02:00",
    "2005-05-27T15:17:25+02:00",
    "2005-06-07T18:57:05+02:00",
    "2005-09-23T20:45:25+02:00",
    "2005-10-20T04:18:59+02:00",
    "2005-10-20T04:19:46+02:00",
    "2005-10-20T04:24:02+02:00",
    "2005-10-20T06:45:09+02:00",
    "2005-10-20T14:30:29+02:00",
    "2005-12-27T20:12:13+01:00",
    "2006-01-17T19:56:42+01:00",
    "2006-03-09T15:59:10+01:00",
    "2006-03-10T01:08:59+01:00",
    "2006-03-14T01:43:14+01:00",
    "2006-03-14T22:42:28+01:00",
    "2006-03-15T10:33:28+01:00",
    "2006-03-15T13:52:28+01:00",
    "2006-03-15T14:19:51+01:00",
    "2006-03-28T14:33:06+02:00",
    "2006-03-31T19:34:26+02:00",
    "2007-01-15T10:53:31+01:00",
    "2007-09-16T19:21:38+02:00",
    "2007-09-16T21:13:14+02:00",
    "2007-09-16T21:32:46+02:00",
    "2007-09-17T01:33:55+02:00",
    "2007-09-17T01:36:17+02:00",
    "2007-10-15T23:37:13+02:00",
    "2007-10-15T23:38:44+02:00",
    "2007-10-23T21:48:37+02:00",
    "2007-10-24T00:20:48+02:00",
    "2007-10-24T16:29:28+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ExceptionInInitializerError",
      "elements": [
        {
          "method": "org.eclipse.jdt.core.JavaCore.getOptions",
          "source": "JavaCore.java:2401"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTParser.initializeDefaults",
          "source": "ASTParser.java:222"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTParser.\u003cinit\u003e",
          "source": "ASTParser.java:204"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTParser.newParser",
          "source": "ASTParser.java:109"
        },
        {
          "method": "provaCompilatore.parse",
          "source": "provaCompilatore.java:21"
        },
        {
          "method": "provaCompilatore.main",
          "source": "provaCompilatore.java:46"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.NullPointerException",
        "elements": [
          {
            "method": "org.eclipse.jdt.internal.core.search.indexing.IndexManager.getJavaPluginWorkingLocation",
            "source": "IndexManager.java:284"
          },
          {
            "method": "org.eclipse.jdt.internal.core.search.indexing.IndexManager.\u003cinit\u003e",
            "source": "IndexManager.java:50"
          },
          {
            "method": "org.eclipse.jdt.internal.core.JavaModelManager.\u003cinit\u003e",
            "source": "JavaModelManager.java:671"
          },
          {
            "method": "org.eclipse.jdt.internal.core.JavaModelManager.\u003cclinit\u003e",
            "source": "JavaModelManager.java:649"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 25,
      "bugId": "87852",
      "date": "2007-01-15T10:53:31+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "87852",
  "bugId": "87852",
  "date": "2005-03-12T04:08:21+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}