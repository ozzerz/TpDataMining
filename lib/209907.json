{
  "comments": [
    "Build ID: 200708291442\n\nSteps To Reproduce:\nSee discussion of problem below.\n\nMore information:\nI am a developer working on an adopting product, working with WTP 1.5.5 with patches applied to build M20070212-1330 (build id: 200708291442 ?).\n\nI have been analyzing reports of hangs and slow plug-in activation involving plug-in org.eclipse.wst.server.core, which I believe are caused by a fix made for bug 204165.\n\nWe\u0027ve seen multiple reports of both types of problems. They\u0027ve started with introduction of the patches to our environment. These problems are:\n\n(1) Slow plug-in activation of org.eclipse.jst.server.core\n\nWhen opening an existing workspace, we occasionally see messages and exceptions similar to the following logged:\n  !MESSAGE While loading class \"org.eclipse.jst.server.core.internal.RuntimeClasspathContainerInitializer\", thread \"Worker-0 - Building WID index - Adding to WID index\" timed out waiting (5000ms) for thread \"Worker-4\" to finish starting bundle \"org.eclipse.jst.server.core\". To avoid deadlock, thread \"Worker-0 - Building WID index - Adding to WID index\" is proceeding but \"org.eclipse.jst.server.core.internal.RuntimeClasspathContainerInitializer\" may not be fully initialized.\n  !STACK 0\n  java.lang.Exception: Generated exception.\n     at org.eclipse.core.runtime.internal.adaptor.EclipseLazyStarter.preFindLocalClass(Unknown Source)\n     at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(Unknown Source)\n     at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(Unknown Source)\n     ...\n\nThis error indicates that a slow or stalled activation of org.eclipse.jst.server.core on thread Worker-4 is causing class loads from the plug-in to potentially fail on thread Worker-0. (Javadoc for class org.eclipse.core.runtime.Plugin states that start() must complete in a timely manner, and that both the constructor and start() should avoid synchronized blocks and obtaining locks.) The plug-in class for org.eclipse.jst.server.core, JavaServerPlugin, does little in its constructor. However, JavaServerPlugin.start() calls ServerCore.addRuntimeLifecycleListener(), which I believe leads to the slow/stalled plug-in activation. ServerCore is in plug-in org.eclipse.wst.server.core. More specifics concerning ServerCore are described in the next problem.\n\n(2) Hangs caused by deadlocks between threads\n\nFrom a javacore file taken from a hang, I\u0027m seeing the following deadlocked threads:\n\n  Thread Name : Worker-2\n    State : Deadlock/Blocked\n    Owns Monitor Lock on org/eclipse/wst/server/core/ServerCore@39277900/3927790C\n    Waiting for Monitor Lock on org/eclipse/wst/server/core/internal/ResourceManager@392781A8/392781B4\n    Java Stack\n  \u003e   at org/eclipse/wst/server/core/ServerCore.getResourceManager(Bytecode PC:9)\n      at org/eclipse/wst/server/core/ServerCore.getServers(Bytecode PC:9)\n      at com/ibm/ws/sca/runtime/core/ServiceStartup.initializeConfiguredProfiles(Bytecode PC:10)\n      at com/ibm/ws/sca/runtime/core/ServiceStartup.startup(Bytecode PC:17)\n      at org/eclipse/wst/server/core/ServerCore.executeStartups(Bytecode PC:50)\n  \u003e   at org/eclipse/wst/server/core/ServerCore.initialize (Bytecode PC:11)\n      at org/eclipse/wst/server/core/ServerCore.getResourceManager(Bytecode PC:6)\n      at org/eclipse/wst/server/core/ServerCore.addRuntimeLifecycleListener(Bytecode PC:0)\n      at com/ibm/ws/ast/st/core/internal/WebSphereCorePlugin$1$AddRuntimeLifecycleListenerJob.run(Bytecode PC:43)\n      at org/eclipse/core/internal/jobs/Worker.run(Bytecode PC:52) \n\nand:\n\n  Thread Name : Worker-4\n    State : Deadlock/Blocked\n    Owns Monitor Lock on org/eclipse/wst/server/core/internal/ResourceManager@392781A8/392781B4\n    Waiting for Monitor Lock on org/eclipse/wst/server/core/ServerCore@39277900/3927790C\n    Java Stack\n  \u003e   at org/eclipse/wst/server/core/ServerCore.findRuntimeType(Bytecode PC:18)\n      at org/eclipse/wst/server/core/internal/Runtime.resolve(Bytecode PC:14)\n      at org/eclipse/wst/server/core/internal/Runtime.loadState(Bytecode PC:1)\n      at org/eclipse/wst/server/core/internal/Base.load (Bytecode PC:147)\n      at org/eclipse/wst/server/core/internal/Base.loadFromMemento(Bytecode PC:2)\n      at org/eclipse/wst/server/core/internal/ResourceManager.loadRuntimesList(Bytecode PC:108)\n      at org/eclipse/wst/server/core/internal/ResourceManager.init(Bytecode PC:23)\n      at org/eclipse/wst/server/core/internal/ResourceManager. (Bytecode PC:14)\n  \u003e   at org/eclipse/wst/server/core/internal/ResourceManager.getInstance(Bytecode PC:9)\n      at org/eclipse/wst/server/core/ServerCore.getResourceManager(Bytecode PC:9)\n      at org/eclipse/wst/server/core/ServerCore.addRuntimeLifecycleListener(Bytecode PC:0)\n      at org/eclipse/jst/server/core/internal/JavaServerPlugin.start(Bytecode PC:24)\n      at org/eclipse/osgi/framework/internal/core/BundleContextImpl$2.run(Bytecode PC:58)\n      ...\n\nThis shows that Worker-2 is still within synchronized method ServerCore.initialize() and likely blocked on a call to synchronized method ResourceManager.getInstance() (called from ServerCore.getResourceManager() at the top of the call stack). (I\u0027ve identified the two methods in the call stack via \"\u003e\".)\n\nMeanwhile Worker-4 is still within synchronized method ResourceManager.getInstance() and likely blocked on a call to synchronized method ServerCore.loadRuntimeTypes() (called from ServerCore.findRuntimeType() at the top of the call stack).\n\nBecause each thread needs to enter a method synchronized by an object owned by the other, a deadlock results.\n\nNote that I am guessing that ResourceManager.getInstance() is a synchronized method, based on the last proposed patch for bug 204165 (this change is described there as a fix for bug 205000) and because it explains the deadlock above. I believe this change has introduced both the deadlocks and slow activation of org.eclipse.jst.server.core that we are seeing.",
    "I\u0027ve taken an initial look, and I see the following:\n\n1. The slow startup shouldn\u0027t cause any problems with jst.server (and is highly exacerbated by #2), and is caused because adding a listener is synchronized on initializing wst.server.core. This is already fixed in WTP 2.0 and we\u0027re hampered by the amount of change we can make here without doing major restructuring.\n\n2. The startup of com/ibm/ws/sca/runtime/core/ServiceStartup is severely broken. It is bad practice to use API from another plugin during startup (especially when it involves initialization), and this must be fixed. Fixing this alone may improve startup and avoid #3 in most situations. Hiroshi - please ensure that your team fixes this problem.\n\n3. Yes, we have a regression and a possible hang based on the fix for bug 204165. It cannot be pulled out since it is a critical bug fix for Hiroshi\u0027s team and solves a possible startup corruption issue. I will need to investigate if we can fix this by removing the double-synchronization lock between IResourceManager and ServerCore.",
    "Created an attachment (id\u003d82997)\nPossible patch\n\nThese are the possible solutions I\u0027ve found so far:\n\n1) Synchronize ServerCore.getResourceManager(). This has the benefit of being a very minor change and should avoid this particular deadlock, but won\u0027t help the jst.server.core startup issue.\n\n2) Move synchronized methods to ResourceManager to avoid double lock [patch attached]. This basically means back-porting the minimum changes from WTP 2.0/3.0 to 1.5.5. This has the drawback of being a much larger patch, but the benefit of being closer to our current/cleaner code and unblocking add/remove listener calls, which will unblock the startup of jst.server.core.\n\n3) Do #1 and then put the startup code from jst.server.core in a Job. This would also solve both issues, but I\u0027ve seen problems with Jobs during startup before.\n\nI\u0027m still investigating to see if there are any clean solutions midway between #1 and #2.",
    "I think the \"Possible patch\" is waaaay to complicated for this stream. \n\nSeems to me, one problem is that the fix for 204165 should not have made the getInstance() method of ResourceManager synchronized. \n\nA better solution for thread safe singletons is to create the instance when the class is loaded. There\u0027s no advantage to doing it lazily, since for anyone to do anything it has to be created anyway. \n\nSo, only changes needed wouldn\u0027t deserve a patch here ... just \nprivate static ResourceManager instance \u003d new ResourceManager();\nand \npublic static ResourceManager getInstance() {\n\treturn instance;\n}\n\n\nI think this solves the same problem as the option labeled \n\"1) Synchronize ServerCore.getResourceManager()\" \n(since all the \u0027initialize\u0027 code is already synchronized, there\u0027d be no need \nto make getResourceManager() method synchronized, once ResourceManaer.getInstance() is no longer synchronized. \nRight? \n\n\nSo, would that only leave the problem that \"executeStartups\" is somehow called during startup? I assume that could be fixed by fixing the starup code in \nServiceStartup? And, obviously, that would be much preferable. \n\nI do not think we can safely make more complex changes here, but glad to discuss options ... once my solution here is considered. Hope I\u0027m not missing this issue. \n\nThanks, \n\n\n\n\n",
    "Created an attachment (id\u003d83080)\nAnother possible patch\n\nAgreed that it\u0027s safer to create the class during initialization than using the synchronized. Switching to that is the simplest change that will remove the hang.\n\nHowever, the other issue is that jst.server adds a listener during its startup and it is timing out due to waiting for initialization. This is fixed in WTP 2.0/3.0 (adding listeners doesn\u0027t block) and putting it into the class init puts us one step further away. We could decide not to fix this, but based on past experience I highly doubt that ServiceStartup is the only defect in this adopter and it\u0027ll continue to cause further problems.\n\nI\u0027ve taken another pass on this, combining the static init change with the minimal change I could find to unblock adding listeners.",
    "Created an attachment (id\u003d83108)\nAnother option with less code change\n\n",
    "Created an attachment (id\u003d83129)\nFinal patch\n\nFinal patch - after discussions with David, testing, and double-checking with Java language specs, this is the only safe change we can do at this time. The change is to switch the synchronization object from the ResourceManager instance to the ServerCore class. This should remove the hang because we\u0027re synchronizing all places on the same monitor.\n\nNote that this specifically *does not* solve the problem with jst.server.core blocking on startup until other plugins have loaded. I know of no safe way to solve this in the WTP 1.5 stream at this time without extensive testing, and it only happens due to the defects in the adopter code. These are serious defects - the code in plugin startup() and IStartup extensions needs to execute and return very quickly. If this doesn\u0027t happen, you risk that plugin failing it\u0027s own initialization, as well as classpath failures in this case and poor performance and IDE startup in general.",
    "Agreed, this fix looks safe enough for 155 stream. \n\nI\u0027ve included the patch in \n\nhttp://download.eclipse.org/webtools/patches/drops/R1.5/P-P20071115043126-20071115043126/\n\nTim, please do a \"developer\" verification that the patch is correct (i.e. included your fixed plugin). \n\n",
    "Everything looks great in CVS - I see the patch applied to the 1.5.5 patch stream. However, the patch link above does not have a new qualifier date on o.e.wst.server.core and decompiling shows that the change is not there.\n\nDavid - Can you please double-check the patch build and try spinning it again?",
    "False alarm. I assume David was tired when he posted that link, because it\u0027s from *before* I attached the patch. ;-)  I found the latest patch build, and the plugin is fixed correctly there:\n\nhttp://download.eclipse.org/webtools/patches/drops/R1.5/P-P20071119045325-20071119045325/"
  ],
  "commentCreationDates": [
    "2007-11-15T08:06:16+01:00",
    "2007-11-15T16:53:29+01:00",
    "2007-11-15T21:08:00+01:00",
    "2007-11-16T04:44:17+01:00",
    "2007-11-16T16:28:14+01:00",
    "2007-11-16T20:18:21+01:00",
    "2007-11-16T23:00:51+01:00",
    "2007-11-19T05:49:51+01:00",
    "2007-11-19T14:54:11+01:00",
    "2007-11-19T14:59:49+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "Generated exception.",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseLazyStarter.preFindLocalClass",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "209907",
      "date": "2007-11-15T08:06:16+01:00",
      "product": "Web Tools",
      "component": "wst.server",
      "severity": "major"
    }
  ],
  "groupId": "209907",
  "bugId": "209907",
  "date": "2007-11-15T08:06:16+01:00",
  "product": "Web Tools",
  "component": "wst.server",
  "severity": "major"
}