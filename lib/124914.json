{
  "comments": [
    "Over last few months I\u0027ve developed alternative Tomcat 5.5 plugin which has two main advantages compared to standard Tomcat support provided by WTP\n\n* All resources and classes are deployed by reference to their workspace location, in other words, this plugin does not create/maintain exploded webapp under .metadata/.../tmpX directory. As a result, publish time is very small and does not depend on webapp size. Also, tomcat picks changes to JSPs without publish.\n\n* It is possible to publish set of related webapps with common dependent utility jars. You can, for example, develop and test related portlets as separate webapps with Tomcat/Pluto.\n\nThere are also a number of smaller changes that solve minor annoyances I\u0027ve come across while using standard Tomcat plugin v0.7. I did not check if any/all of these were fixed in WTP 1.0.\n\n* Source lookup works for dependent utility JARs.\n\n* Launch configuration does not explicitly reference Tomcat installation directory and can be shared among team members.\n\n* Server Classpath Container includes JAR/ZIP files from CATALINA_HOME/shared/lib.\n\n* Cleaner (at least in my opinion) management of Tomcat configuration files. Webapps are deployed using individual context xml files under CATALINA_BASE/conf/\u003cEngine\u003e/\u003cHost\u003e. Required config files (server.xml, catalina.properites, etc) will be copied from CATALINA_HOME/conf if not present in server configuration. As a result, server configuration is much easier to share among team members. \n\n* Most of \u003cwebapp\u003e/WebContent/META-INF/context.xml is preserved during publish ? only @docBase and /Loader are changed, everything else is copied as is without any modifications.\n\n* Better handling of webapp/server restart. Will not trigger restart after successfull Hot Code Replace. Restarts individual webapps when possible.\n\n* Handles external jar file dependent modules.\n\nInstallation/configuration instructions\n\nThis plugin is completely independent from regular Tomcat support and the two can coexist without problems. \n\n* This plugin was developed and somewhat ;-) tested using WTP 1.0. Make sure to use latest 1.0.1 M-build to avoid performance problems of 1.0. It works with 1.5 M4 too.\n* Drop org.eclipse.jst.server.experimental.tomcat_\u003cversion\u003e.jar to WTP plugins directory and restart WTP\n* Define \"Apache Tomcat v5.5 (Experimental)\" runtime\n* Create \"Tomcat v5.5 Server (Experimental)\" server configuration. As described above, server config directory does not need to have files. Create configuration files (like tomcat-users.xml or server.xml) under \u003cserver-config\u003e/conf directory if needed.\n* Use \"Add and Remove Projects...\" dialog (right click in Servers view) to add and remove projects deployed to this server.\n\nIf you are interested in features provided by this plugin I encourage adding yourself to CC list of this bug so WTP developers and I ;-) can see if there is enough interest to continue deevelopment of this code. Also, feel free to add comments to this bug or ask questions on the newsgroup.",
    "Created an attachment (id\u003d33475)\nPlugin JAR including source code\n\n",
    "Igor, maybe it was in your note somewhere, but could any of these enhancements also be \"ported\" to the 5.0.x version of Tomcat Adapter? What is it that makes them 5.5 specific? Sounds good to me, even better if improvements filtered though to other adapters. \n\n\n\n",
    "Indeed, I looked at other Tomcat versions several months ago. From what I remember, it is possible to port this code to Tomcat 5.0 with minor modifications and to Tomcat 4.1.x but not to 3.x. Although I am reluctant to spend time on this now, I\u0027ll probably do Tomcat 5.0, if enough people ask for it.\n\nDeploy-by-reference requires specific server-side support. I know that it can be implemented for JBoss 3.x/4.x (and in fact I originally implemented this idea for JBoss well before WTP came around) but I cannot tell anything about other servers.\n\nAlso, there are two bugs (bug 103888 and bug 122377) that make WTP-side of the implementation unnecessary complicated. I am planning propose something for both of them, when I find time to work on it ;-)",
    "Works great, a big +1 for including this into WTP and to make it the default ASAP.\nThe same concept was used by the popular Sysdeo Tomcat plugin, which is still preferred by may users to WTP due its ability to load classes directly from workspace without the need for a deploy.\n\n\nSome minor problems:\n- selecting \"run on server\" for a dynamic web projects correctly configure the server but doesn\u0027t start it immediately with a \"Could not find a client that is able to launch the selection\" error\n- it doesn\u0027t handle external jars, (it\u0027s affected by #116783 ). Don\u0027t know if there is a way to make it work now independently of WTP required fixes...",
    "reply to comment #4)\n\u003e Some minor problems:\n\u003e - selecting \"run on server\" for a dynamic web projects correctly configure the\n\u003e server but doesn\u0027t start it immediately with a \"Could not find a client that is\n\u003e able to launch the selection\" error\n\nIndeed, I should have mentioned that I have not implemented run-on-server in this plugin yet.\n\n\u003e - it doesn\u0027t handle external jars, (it\u0027s affected by #116783 ). Don\u0027t know if\n\u003e there is a way to make it work now independently of WTP required fixes...\n\u003e \n\nBoth external JARs and classpath variables are expected to work for WARs (not for EARs though)... Can you provide sample application for which it does not work?",
    "\u003e Both external JARs and classpath variables are expected to work for WARs (not\n\u003e for EARs though)... Can you provide sample application for which it does not\n\u003e work?\n\nThis happens using 1.5M4, probably it works in R7? Classpath variables seems to not be resolved at all (tried with different projects, just add an external jar to a war to have this result).\n\nAnother problem in the experimental plugin is that tag libraries in unexploded referenced projects are not found.\nWhen using the standard server adapter projects are packed as jars and moved to WEB-INF/lib and Tomcat scan the META-INF dir of these jars for tld files.\nWhen using the special classloader tld files in the META-INF folder in source directories of referenced projects should be registered as well. At a first glance I can\u0027t see an easy way to register a tld from webappClassLoader: do you know how this sould be implemented?",
    "Created an attachment (id\u003d33682)\nsample WAR that uses JUNIT_HOME classpath variable\n\nAttached is a sample project that uses JUNIT_HOME classpath variable (as described in bug 116783). I just verified that it works with both WTP 1.5 I200601191656 and 1.0.1 M200601251151. \n\nCan you send me sample webapp that does not work with external JARs?",
    "\u003e Another problem in the experimental plugin is that tag libraries in unexploded\n\u003e referenced projects are not found.\n\u003e When using the standard server adapter projects are packed as jars and moved to\n\u003e WEB-INF/lib and Tomcat scan the META-INF dir of these jars for tld files.\n\u003e When using the special classloader tld files in the META-INF folder in source\n\u003e directories of referenced projects should be registered as well. At a first\n\u003e glance I can\u0027t see an easy way to register a tld from webappClassLoader: do you\n\u003e know how this sould be implemented?\n\nFrankly, I do not know anything about TLDs and how/when Tomcat loads them. There is pretty low level Resources API I can use (http://tomcat.apache.org/tomcat-5.5-doc/config/resources.html) which should allow me to make these appear anywhere in a \"virtual\" WAR. Send me example projects and I\u0027ll see what would be the best way to support this.\n\n",
    "Created an attachment (id\u003d33694)\ntest projects demonstrating issues\n\nThe zip contains 2 test projects which demonstrates the above issues:\n- servertest-taglib contains a simple taglib\n- servertest-war is the web projects, with a dependency on servertest-taglib\n\nRun the web project with the experimental server, you will see two test pages:\n\n- the dependency test try to use a Junit class from a dependency set using JUNIT_HOME. It fails with a class not found error using the new adapter and 1.5M4. (With the standard tomcat 5.5 adapter publishing fails since it tries to resolce JUNIT_HOME as phisical directory name)\n\n- the tag test uses the \"hello\" tag from the dependent project. It works fine with the standard server adapter but not with the experimental one (the tag library can\u0027t be resolved).\n\nNote: according to j2ee specification the container search for tld files\n- in WEB-INF dir and subdirectories (exluding classes and lib)\n- in any dependent jar, into META-INF or subdirectories\n\nWith a quick search I found that this logic is handled in org.apache.catalina.Startup.TldConfig, which loads files from jars or WEB-INF subdirs, AFTER the classpath has already been setup. Anyway, a quick \u0026 dirty patch to make TldConfig load files from any directory showed that this is probably not really enough (I see my tlds loaded by this class but the page still doesn\u0027t work) :/ Anyway, maybe this could be useful as a pointer...\n\n\n\n\n\n\n",
    "In order to add external JAR to a webapp, you need to use \"J2EE Module Dependencies\" preference page. You need to do this for either standard or experimental plugin to see those JARs. Changing project Build Path affects compilation only and has no effect at runtime. This solves \"class cannot be resolved\" error.\n\nI will loook at the \"taglib\" problem over the weekend.",
    "\u003e In order to add external JAR to a webapp, you need to use \"J2EE Module\n\u003e Dependencies\" preference page.\n\nYou are right, I forgot to do it for the war project and I confirm the class not found error goes away after this change.\nI usually never configure j2ee dependencies manually since I always use maven and I synchronize the .component file using the maven eclipse plugin: I am pretty sure I had this problem on projects configured in this way, I will check if the .component file had errors also there. Thanks",
    "\u003e Note: according to j2ee specification the container search for tld files\n\u003e - in WEB-INF dir and subdirectories (exluding classes and lib)\n\u003e - in any dependent jar, into META-INF or subdirectories\n\nOne possible solution to this problem is to map META-INF/**/*.tld files of dependent projects into WEB-INF/ directory. As I already mentioned, Resources API allows this kind of mapping so all I need to do now is to find time to implement this ;-)\n",
    "\u003e One possible solution to this problem is to map META-INF/**/*.tld files of\n\u003e dependent projects into WEB-INF/ directory. As I already mentioned, Resources\n\u003e API allows this kind of mapping so all I need to do now is to find time to\n\u003e implement this ;-)\n\nHi Igor, did you had a way to take a look at this? FYI I tried following this path, by extending the standard FileDirContext. Overriding the list() and lookup() method I can make the webapp see the tld, but the Jasper compiler still complains about the missing taglib... maybe you had more luck?",
    "The easiest workaround for now is to copy TLDs under WEB-INF directory. This is where I plan them to \"appear\" when I get a change to update the experimental plugin.",
    "Created an attachment (id\u003d34158)\nExtension to add tld resources from dependant modules and better loading of configuration\n\nProblems solved, here is my contribution:\n- an extended FileDirContext implementation that will allow loading of tld files from the META-INF directory of dependant modules (the test project will now work without problems)\n- better configuration of virtual classpath. By using xml attributes you can have the tomcat digester configuring the loader/resources for you, with a much cleaner implementation than manually find and parsing the context xml file.\n\nThe attached zip contains a new file (WtpDirContext) and the modified WtpWebappLoader and TomcatPublishModuleVisitor. WtpDirContext must be added to the jar with WtpWebappLoader.\n\nThis server adapter looks now like a great improvement over the default WTP implementation. Is there interest to add this to WTP or should this be published as a separate third party project somewhere?\n\n\n\n",
    "\u003cping\u003e\nany comment from WPT developers? Anybody gave this a try?\nAny plan to add this in WTP soon or later?\n\nSorry to bother, but it\u0027s too better than the default server adapter to leave this in bugzilla for months (well, a rough implementation at the moment, but fast and working)... try comparing performances (and problems) of the two server adapters with a web project with a good amont of resources and dependencies and you will never go back\n",
    "Larry ... were you aware of this potential contribution? \n\nWith such a resounding endorsement from Fabrizio, would you have \ntime and interest in evaluating it and providing any comments? \n\n",
    "Yes, its somewhere on my to-do list.  Should have added myself to the CC list earlier.  I\u0027ll up its priority in my task list.",
    "Created an attachment (id\u003d35858)\nupdated plugin jar\n\nif anybody wants to try it out, this is plugin build that also includes my enhancements to the existing contribution from Igor (supports for tlds in referenced projects, simpler context configuration)\n",
    "I have played with the original plug-in and Fabrizio\u0027s addition.  For the great majority of users, it\u0027s minimal publish overhead is an advantage.  However, there is one use case that it doesn\u0027t handle that well, so I don\u0027t think it can\u0027t completely replace the current Tomcat 5.5 support.\n\nThe problem case is when a security manager is enabled.  Rather than granting permissions to the webapp through a single codeBase, using this plug-in will require grants to multiple codeBases if there are dependencies on other projects or external jars.  It has been years since I played with ProtectionDomains, so I\u0027m not sure what can be done to help alleviate this within the WtpWebappLoader this plug-in uses.  Assuming something could be done, adding handling like this can increase the risk of a new version of Tomcat breaking our support.  For the current WtpWebappLoader, I would say this risk is very low.\n\nIt would be nice if this support could be integrated into the current Tomcat support so the \"Run modules directly from the workspace\" option could become literally true again, at least for Tomcat 5.5.x and 5.0.x.  It possibly could be applied to 4.1.x, and maybe 4.0.x as well, though we would have to modify the installation to add the needed jar to server/lib.  I don\u0027t think they support the catalina.properties file, which is currently being used the \"add\" the jar to the server.\n\nAt this point, I haven\u0027t studied the code sufficiently to say how difficult it would be to integrate this code.  It could be kept as a separate plug-in, but that would spread resources a little thinner and complicate the documentation a bit.\n\nDavid,\n\nIn about a week, I should have some more cycles to look at this.  Feel free to assign it to someone else for comment in the meantime, if you would like.\n\nLarry",
    "I agree with Larry, this contribution should be better integrated into the current Tomcat adapter, making the \"Run modules directly from the workspace\" option work this way.\n\nIntegrating the plugin into the existing org.eclipse.jst.server.tomcat.core.internal plugin is probably not really straightforward expecially for the wst/launch bits, but should neither be too hard.\n\nI am not familiar enough with all the changes implemented by Igor to complete this task, but I\u0027ve done some work on the code that should at least make it simpler to integrate...\n\nI am going to attach a new revision of the plugin source code with a few changes that should help:\n- totally removed the jdom dependency, now all the code is using dom\n- moved the plugin classes to the org.eclipse.jst.server.tomcat.core.internal package (added an \"Exp\" prefix to the original names)\n- dropped all the utility classes/methods that could be replaced with methods already existing in the original tomcat plugin (also with internal utility APIs, that will be ok if the plugins will be merged)\n- dropped a couple of classes that were just a duplicate of the original tomcat server adapter classes\n\nstill a lot to do, but at least you will have less code to deal with... hope this will help to get an higher priority in the schedule ;)\n\n\n\n",
    "Created an attachment (id\u003d36573)\nupdated source code\n\nreworked source code... should be easier to integrate with the existing tomcat server adapted",
    "Sure, .. I\u0027ll reassign to Tim for comment. \n\nMy own intuition is there\u0027s too much work to do aready to include this in 1.5, but not sure what else  could be dropped to make this do-able. \n\nI\u0027ve raised the priority to \u00272\u0027, however, since not only do I think important, I\u0027d like to at least have a reason stated if can not be done be WTP 1.5. \n\nIn the end, though, don\u0027t hesitate to continue to improve and append this as \"an experimental plugin\" here to this bugzilla. I\u0027ve known of several cases in the past where some bugzilla attachments were used by many people in the community, for several releases!, before finally being incorporated into the base Eclipse. \n\nPersistence pays off! :) ",
    "Did I already mentioned that I would really like to see this integrated into WTP 1.5? :)\n\nI am going to post a patch that integrates the new publishing mode into the existing WTP tomcat server adapter (enabling it only when the \"run projects from workspace\" checkbox is selected).\n\nIt\u0027s fully working and all the features from the original plugin from Igor should be included: now the only missing task is a good review and cleanup, plus the extension to other tomcat versions. I can\u0027t say this patch alone could lead to a production-quality plugin, but it just works great for me\n\n\nAt the end of the work only 2 single classes have been modified from the existing tomcat plugin:\n\n- TomcatSourcePathComputerDelegate has been totally replaced by the one implemented by Igor. This change is totally unrelated to the publish behavior and could be skipped if not considered good. Anyway, I always had problems with tomcat server not finding source files from dependant modules, and with this change it finally works. Probably Igor could provide more details on this.\n\n- TomcatServerBehaviour contains all the modification related to publishing: you can see a getRunFromWorkspace() method which actually returns true only if the server is a Tomcat 5.5 one and the \"run projects from workspace\" checkbox is enabled. This method is called everywhere in the code the new publishing stuff is called, so a search for references could immediately show you how the new code behaves differently. At the moment everything is unchanged for other tomcat versions, so that the new code can be tested properly on tomcat 5.5 before. Some of the changes (use of a context file instead of modifying server.xml) could also be used in future as the default for the \"not in place\" publishing too.\n\nApart from those, there are 2 added classes in the org.eclipse.jst.server.tomcat.core.internal.wst package needed, according to Igor\u0027s comment, as a workaround for bug #103888 . Their presence here lead to a bunch of \"discouraged access\" warnings, maybe extending the wst APIs could be a better solution.\n\nThe catalina webapploader/dircontext are at the moment added as a precompiled jar (sources are included in the jar). I am not sure how a separate project with a dependency on tomcat jars should be setup (or is a precompiled jar enough?)\n\nUsing this patch any existing tomcat 5.5 server starts using the new publishing mode: a minor issue is that files copied to the metadata dir by previously installed versions are not deleted, so it\u0027s probably better to delete and recreate the server in order to start with a clean directory structure.\n\n\nSo, David... I\u0027ve done my best to convince you that there isn\u0027t too much work anymore to include this in 1.5, now it\u0027s up to you ;)",
    "Created an attachment (id\u003d36751)\ndiff against org.eclipse.jst.server.tomcat.core plugin\n\n",
    "Created an attachment (id\u003d36752)\nprecompiled plugin\n\noriginal WTP tomcat server adapter modified as described in comments. See previous patch for code changes.",
    "Does the precompiled plugin work with WTP 1.0.1 or just 1.5M4 ? Thanks.",
    "(In reply to comment #27)\n\u003e Does the precompiled plugin work with WTP 1.0.1 or just 1.5M4 ? Thanks.\n\nIt has been compiled against head and tested with the latest WTP 1.5 I build, so it will probably not work with WTP 1.0.1. You\u0027ll just need to try it.",
    "Does this plugin suffer from the horrible flaw filed as Bug 125364?\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d125364\n\nThat bug is still holding me back at WTP 0.7",
    "I copied the JAR to my WTP install directory, restarted Eclipse with -clean,\nbut \"About\" still shows the WTP1.0.1 version (1.0.0.v20060213).\n\nEclipse\u0027s error log doesn\u0027t show anything related. Shouldn\u0027t I see at least a warning anywhere?\n\nEclipse 3.1.2 + WTP 1.0.1",
    "(In reply to comment #29)\n\u003e Does this plugin suffer from the horrible flaw filed as Bug 125364?\n\u003e \n\u003e https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d125364\n\u003e \n\u003e That bug is still holding me back at WTP 0.7\n\u003e \n\nI have not tried with the latest modification of the plugin provided by Fabrizio, but original version ignores specified context root and always deploys webapps using project name. Here is a trivial fix for this problem\n\n\n### Eclipse Workspace Patch 1.0\n#P org.eclipse.jst.server.experimental.tomcat\nIndex: src/org/eclipse/jst/server/experimental/tomcat/server/TomcatPublishModuleVisitor.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nRCS file: /cvsroot/ifedorenko/org.eclipse.jst.server.experimental.tomcat/src/org/eclipse/jst/server/experimental/tomcat/server/TomcatPublishModuleVisitor.java,v\nretrieving revision 1.1\ndiff -u -r1.1 TomcatPublishModuleVisitor.java\n--- src/org/eclipse/jst/server/experimental/tomcat/server/TomcatPublishModuleVisitor.java\t20 Jan 2006 20:47:55 -0000\t1.1\n+++ src/org/eclipse/jst/server/experimental/tomcat/server/TomcatPublishModuleVisitor.java\t28 Mar 2006 19:07:54 -0000\n@@ -12,9 +12,12 @@\n import org.eclipse.core.runtime.CoreException;\n import org.eclipse.core.runtime.IPath;\n import org.eclipse.jdt.core.IClasspathEntry;\n+import org.eclipse.jst.server.core.IWebModule;\n import org.eclipse.jst.server.experimental.wst.IModuleVisitor;\n import org.eclipse.wst.common.componentcore.resources.IVirtualComponent;\n import org.eclipse.wst.common.componentcore.resources.IVirtualFile;\n+import org.eclipse.wst.server.core.IModule;\n+import org.eclipse.wst.server.core.ServerUtil;\n import org.jdom.Attribute;\n import org.jdom.Document;\n import org.jdom.Element;\n@@ -64,6 +67,13 @@\n \t\t\t// determine module\u0027s path\n \t\t\tcontextName \u003d contextElement.getAttributeValue(\"path\");\n \t\t\tif (contextName \u003d\u003d null) {\n+\t\t\t\tIModule module \u003d ServerUtil.getModule(component.getProject());\n+\t\t\t\tIWebModule webModule \u003d (IWebModule) module.loadAdapter(IWebModule.class, null);\n+\t\t\t\tif (webModule !\u003d null) {\n+\t\t\t\t\tcontextName \u003d webModule.getContextRoot();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (contextName \u003d\u003d null) {\n \t\t\t\tcontextName \u003d component.getName();\n \t\t\t}\n \n",
    "I\u0027m trying to test this plugin with WTP 1.5M5, but still nothing.\nI copied the attached JAR to my webtools\u0027 eclipse/plugins/ folder, restarted with -clean, but I still see 1.0.0.v20060216 in the About Plugins dialog.\nThe error log contains nothing related to WebTools.",
    "I tried using this plugin and noticed that when I changed the context root to something other than the project name, the site no longer came up.  When I looked into the tmp0\\conf\\Catalina\\localhost\\ directory, I saw that the context file was still named my project as opposed to my changed context root.",
    "Two more observations:\n1) Libraries in my Apache Tomcat Installation\\shared\\lib directory were not included in my classpath at tomcat runtime. (If you are attempting to mimic the behavior of the Sysdeo Tomcat Plugin)\n\n2) Jars included in my project classpath (but not in my WEB-INF\\lib directory) were not included in my classpath at tomcat runtime.  I got around this by manually editing the context file and adding them into the virtualClasspath definition.",
    "(In reply to comment #33)\n\u003e I tried using this plugin and noticed that when I changed the context root to\n\u003e something other than the project name, the site no longer came up.  When I\n\u003e looked into the tmp0\\conf\\Catalina\\localhost\\ directory, I saw that the context\n\u003e file was still named my project as opposed to my changed context root.\n\u003e \n\nThis has been brought up before, see comment #31 for a patch.\n\n(In reply to comment #34)\n\u003e Two more observations:\n\u003e 1) Libraries in my Apache Tomcat Installation\\shared\\lib directory were not\n\u003e included in my classpath at tomcat runtime. (If you are attempting to mimic the\n\u003e behavior of the Sysdeo Tomcat Plugin)\n\nI am not familiar with Sysdeo, so I do not understand your problem. Are you talking about adding those libraries to tomcat \"Server Classpath Container\" (which works just fine for me) or tomcat does not pick them up at runtime (which works for me just fine too). Well, I should say this used to work as I am trying to avoid WTP lately.\n\n\u003e \n\u003e 2) Jars included in my project classpath (but not in my WEB-INF\\lib directory)\n\u003e were not included in my classpath at tomcat runtime.  I got around this by\n\u003e manually editing the context file and adding them into the virtualClasspath\n\u003e definition.\n\u003e \n\nThis is expected WTP behaviour. You need to add libraries you need at runtime to \"J2EE Modules Dependencies\" (comment #7 shows how to do that). Again, I have not used this lately and do not know if recent WTP builds work with external JARs.\n",
    "Created an attachment (id\u003d49698)\nUpdated patch against (1.5)\n\nUpdated the patch to work against the current release (1.5)\nDon\u0027t know if the JAR file is being transferred correctly in the patch. Otherwise take it from the precompiled JAR.\n\nResults are best if you turn off automatic publishing if you are running from the workspace anyway, otherwise Tomcat will just reload it for you all the time.\n\nThe patch for differing context names is included in this as well.",
    "Created an attachment (id\u003d49699)\nPrecompiled version for dropping into a WTP 1.5 plugins folder\n\nThis is a binary version of the Tomcat server adapter for which I just posted the 1.5 diff.\n\nI bumped the revision number just for kicks:\norg.eclipse.jst.server.tomcat.core_1.0.103.200609081145.jar\n\nHave fun.",
    "Created an attachment (id\u003d49700)\nAlso a version against HEAD, just for completeness.\n\nI don\u0027t know if anybody wants to include this in WTP (or other downstream products) but it is quite useful, I think, and here it is, updated for HEAD as of right now.",
    "How do I use this plugin? I\u0027d like to use the \"exloded webapp\" feature.",
    "(In reply to comment #39)\n\u003e How do I use this plugin? I\u0027d like to use the \"exloded webapp\" feature.\n\n1) Download the newest binary attachment, stuff it in your plugin folder, start Eclipse.\n2) Create a Dynamic Web Project (DWP), using a Tomcat 5.5 runtime.\n3) Create a class A:\npublic class C {\nprivate static int i \u003d 0;\npublic static int nextI() { return ++i; }\n}\n\n4) Create a JSP index.jsp file containing the scriptlet expression \u003c%\u003d C.nextI() %\u003e\n5) Create a Server in the Server view, again a Tomcat 5.5, add DWP to it.\n6) Right click on that server, Open it, and select \"No automatic publishing\" (to keep Tomcat from picking up app changes unless you want it to).\n7) Debug the project DWP, bring up your browser on http://localhost:8080/DWP and hit refresh a few times. You should see the number increase.\n8) Now go and edit the JSP:  \u003c%\u003d 1000 + C.nextI() %\u003e DON\u0027T PUBLISH TO THE SERVER. Hit refresh in the browser, wait for JSP recompilation, and you get the expected result.\n9) Now go and edit the class (C): public static int nextI() { return 500 + ++i; }. Remember to save the file.\n10) The debugger will pick up the Java code change (Tomcat will NOT reload as it hasn\u0027t seen any resource changes). Hitting reload will show the change (without resetting the counter)\n\nPoints 8 and 10 (I think) is impossible in the current WTP. It\u0027d be great to have some hands on experience regarding this is a \"good thing\" or not.",
    "Chris Wood reports a problem with the plugin (but was a bit tentative given the spammer visible nature of email addresses on there) - he writes:\n\nThe plugin doesn\u0027t seem to work for me. I\u0027ve got extra jars attached to the project, like so in the components file:\n\n   \u003cdependent-module deploy-path\u003d\"/WEB-INF/lib\" handle\u003d\"module:/classpath/var/M2_REPO/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar\"\u003e\n     \u003cdependency-type\u003euses\u003c/dependency-type\u003e\n   \u003c/dependent-module\u003e\n\nAs soon as I add a jar like this the plugin fails to publish to the server, in the log file the stack trace is:\n\n!ENTRY org.eclipse.wst.server.core 4 0 2006-09-14 09:35:59.258\n!MESSAGE Could not publish to the server.\n!STACK 0\njava.lang.NullPointerException\n   at org.eclipse.jst.server.tomcat.core.internal.TomcatServerBehaviour$TomcatPublishModuleVisitor.visitClasspathEntry(TomcatServerBehaviour.java:1368)\n   at org.eclipse.jst.server.tomcat.core.internal.ModuleTraverser.traverseWebComponent(ModuleTraverser.java:125)\n   at org.eclipse.jst.server.tomcat.core.internal.ModuleTraverser.traverse(ModuleTraverser.java:64)\n   at org.eclipse.jst.server.tomcat.core.internal.TomcatServerBehaviour.publishModule(TomcatServerBehaviour.java:400)\n   at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModule(ServerBehaviourDelegate.java:672)\n   at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModules(ServerBehaviourDelegate.java:752)\n   at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publish(ServerBehaviourDelegate.java:610)\n   at org.eclipse.wst.server.core.internal.Server.doPublish(Server.java:803)\n   at org.eclipse.wst.server.core.internal.Server.publish(Server.java:791)\n   at org.eclipse.wst.server.core.internal.PublishServerJob.run(PublishServerJob.java:145)\n   at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\nI\u0027m going to go back to using the old plugin for now, but I just thought I\u0027d tell you about what\u0027s happening.\n\n",
    "*PING*\nthis patch is now one year old, it was said that it was difficult to include it into WTP 1.5 but that it will have deserved an high priority after such release...\n\nnow it\u0027s 2.0 M3 and still no more work has been done on this, is there any plan to include it? If the whole thing is too big, maybe just including an additional option to use an exploded war to the existing plugin could be enough...\nI am sure that for 99% of users this change will really be a GREAT improvement, it\u0027s a pity to left this contribution in bugzilla so long...\n\nTim, do you have the time to look at it anytime before 2.0 feature freeze? If not, could you reassign it to someone else? thanks (and sorry for bothering ;) )\n",
    "I\u0027ll second that.  It\u0027s a notable improvement.",
    "I know I was the last to post an update to the patch, and I know that bugs (possibly new bugs) have been posted, but I\u0027m not really in a position to fix it, being terribly busy with (several) other projects at the moment. It was a minor fix anyway (and it lacks the source for the classloader, which was used as is)",
    "I\u0027d _love_ to see this plugin fully integrated in WTP. In my experience, the \"Publish\" feature is ridden with bugs, and OTOH, doesn\u0027t make sense when the server resides in the same machine as the workspace.",
    "Moving over to Larry to investigate after some of the other Tomcat changes are complete.",
    "Created an attachment (id\u003d56208)\nlatest patch\n\nUpdated patch (several improvements to the initial version) against WTP 2.0 HEAD (aligned with WTP 2.0M3)",
    "Created an attachment (id\u003d56209)\nready to use binary for WTP 2.0 M3\n\n",
    "Please have a look at the latest patch submitted (attachment name is \"latest patch\", you can consider all the other attachments as obsolete). There is also a binary for anybody who wants to try it against WTP 2.0 M3.\n\nI reworked the patch in order to make it more clean and easier to understand (and especially to apply!), this is the list of improvements:\n\n- TomcatServerBehaviour has been reverted to the original version (no changes anymore) and a new TomcatServerBehaviourWithDirectLoading has been created. The new class is configured in plugin.xml only for tomcat 5.5 and it contains only a few overridden methods. Now you can easily check all the changes. If there is the need to revert this change you can simply put the original class back in plugin.xml\n\n- All the xml handling has been cleaned up by using the standard Server/Context objects in org.eclipse.jst.server.tomcat.core.internal.xml.server40 (enriched by new needed elements)\n\n- Changes in context path (through the modules page in the server editor) is now allowed, and context files are appropriately renamed when needed (although renaming doesn\u0027t work properly in WTP due to bug 121255 at the moment...).\n\n- Context files are only rewritten if changes are detected (also if automatic publishing is enabled you should never experience useless reloading due to context.xml modifications)\n\n\nWhat should I say more? Unit tests are working properly (no new tests added, but at least I can confirm that this doesn\u0027t break any of the existing ones) and code has been commented, cleaned up and formatted to my best...\nIMHO this is now ready to be committed as is, the quality of this patch doesn\u0027t surely look inferior to the rest of the code in the tomcat plugin.\nSo... any chance to really see it committed now? (now \u003d in the next few days ;) )\n\nPS Which kind of changes are you waiting for in the tomcat plugin Larry? The code looks pretty unchanged since a year...\n\n",
    "Thanks for the patch update.  Regrettably, the reason the Tomcat code hasn\u0027t changed that much in the last year primarily due to lack of spare time.  This is also why there hasn\u0027t been much updating of status in this, and other bugs.  Of late, my day job and Christmas vacation has allowed me to spend some time to work on the WTP 2.0 Tomcat code. Due to the scale of these changes and the shifting schedule of WTP 2.0 M4, none has made it into CVS yet.  They will appear soon after M4 is declared, including a Tomcat 6.0 implementation.  Since, Tomcat 6.0 will likely be the Tomcat of choice by the time WTP 2.0 ships, this approach will need to be applied to that version if this approach is to have a future.\n\nThe changes I\u0027m waiting for are the ones I am working on to improve configurability and address the problems with \"default\" webapps.  They will involve changes to the UI and since this approach will need to integrate with that configurability, I was going to look at this bug in detail after the bulk of the needed UI changes are in place.  I believe I will have time to do that, including addressing this bug by WTP 2.0 M5.  This approach should be integrated such that all valid use cases that are currently supported continue to be supported.  If possible, it should be enabled per project and not just per server.  Also, the implementation should try to be supportive of Utility projects someday contributing web content and not just classes.\n\nThe latest patch can\u0027t be committed as is because it breaks current use cases.  Configurability beyond that of modifying the plugin.xml will be needed, but this will be difficult while the UI is a moving target due to other changes I need to make first.  I\u0027ll try to update this bug once enough of the UI changes are in place.  Then we can look at where to go with this approach.  We should also have a better idea about Tomcat 6.0 at that point.",
    "Hi Larry,\nthanks for the update,\n\n(In reply to comment #50)\n\u003e work on the WTP 2.0 Tomcat code. Due to the scale of these changes and the\n\u003e shifting schedule of WTP 2.0 M4, none has made it into CVS yet.  They will\n\u003e appear soon after M4 is declared, including a Tomcat 6.0 implementation. \n\u003e Since, Tomcat 6.0 will likely be the Tomcat of choice by the time WTP 2.0\n\u003e ships, this approach will need to be applied to that version if this approach\n\u003e is to have a future.\n\nMaybe I should have said that I was already developing a Tomcat 6 adapter by myself and porting this solution to both tomcat 6.0 and 5.0? :)\n\nI absolutely intend to continue to help improving this and to support it in future... the only problem so far is that since nothing has been committed yet every modification makes this patch more \"important\" and always more difficult to integrate. There are lot of improvement that could already be done, but this also mean refactoring code from the actual adapters (something that IMHO should be done, there are lot of duplications and lack for extensions)... but I am sure that doing that will make this patch never applied.\n\n\u003e If possible, it should be enabled per project and not just\n\u003e per server.\n\nPretty easy to do, if a \"direct load\" flag is added to org.eclipse.jst.server.tomcat.core.internal.WebModule and handled in the UI. But sincerely I think that having a consistent behavior per server is much more easy to manage for users: since the \"publish\" state it\u0027s related to servers having a mix of projects that needs to be published and other that doesn\u0027t make it pretty confusing.\n\n\n\u003e Also, the implementation should try to be supportive of Utility\n\u003e projects someday contributing web content and not just classes.\n\nWell, could be done. But first of all we have to wait for Utility projects with ability to contribute web content to appear in WTP :)\n\n\n\u003e The latest patch can\u0027t be committed as is because it breaks current use cases.\n\nWhich are the use cases that it actually breaks? It actually mimics the current behavior pretty well, please let me know if you see anything missing in it.\n\n\u003e Configurability beyond that of modifying the plugin.xml will be needed\n\nI initially added a \"direct load classes and resources from workspace\" flag to the UI, and this is something very easy to do: if this could help this patch to be committed I can immediately post an update with this additional configuration. Anyway, the reason why I ultimately chose to remove it is because it looked too much similar to the \"Test environment\" (load from workspace) flag and could be confusing.\n\n\n\u003e this will be difficult while the UI is a moving target due to other changes I\n\u003e need to make first.  I\u0027ll try to update this bug once enough of the UI changes\n\u003e are in place.  Then we can look at where to go with this approach.  We should\n\u003e also have a better idea about Tomcat 6.0 at that point.\n\nOk, please keep me updated so I will try to help. I will continue to post improvements to this issue, hoping that it will not become too bigger to apply at all :)\nAnyway: the current code doesn\u0027t actually touch anything in the UI as well and it\u0027s very little dependent on it (or nothing?)... are you really sure this can\u0027t be committed now without waiting for the UI changes? ;)\n\n\n\n",
    "Hi Fabrizio,\n\nFor reference, here are some use cases that need to continue working that I believe the current patch will have problems with:\n\n1. If a security manager is enabled, it needs to be possible to add permissions to the catalina.policy file in the form of:\n\ngrant codeBase \"file:\u003cpath to webapp\u003e/-\" {\n    ...\n};\n\nand have it still work. This precludes the use of this approach.  If a user still wants to use this approach, multiple grant blocks will be needed. If a user wants an environment that duplicates the \"production\" environment as close as possible (i.e. the permissions will work as is in the production environment other than an adjustment to the codeBase), the user should have the choice to do so.\n\n2. A Dynamic Web Project with context-root set to \"\" should be served as the default webapp at runtime.  WTP currently supports this, though with some bugs and side effects that I\u0027m working on fixing.\n\n3. When creating a Tomcat server in Eclipse with \"Run modules directly...\" checked, it needs to have a configuration completely separate from the installed Tomcat.  As an example from where I work, the installed Tomcat will often have JSP recompilation turned off for performance, since webapps aren\u0027t changing.  When creating an Eclipse server from that installation with \"Run modules directly...\" checked, it should be possible to restore the normal setting JSP setting without modifying the Tomcat installation.\n\n4. Create a Dynamic Web Project, add it to a server, and publish the server.  Delete the project and publish the server.  The webapp should disappear from the published server.\n\n5. For servers that support META-INF/context.xml, it\u0027s configuration needs to be included in the context configuration at runtime.\n\n\nI think the use of this approach will need to be offered as a choice at appropriate locations in the UI (to be determined once other UI changes are in place) since it may preclude certain other behaviors.  However, it is probably better that the latest patch doesn\u0027t involve UI, so it is likely to be unaffected by the UI changes I have coming in the near future.  Those that want to apply it to current code, shouldn\u0027t have a problem.\n\nI think it will be very difficult, if not impossible, to come up with committable patches as the \"appropriate locations in the UI\" don\u0027t exist yet because what we have now will be changing.  I can\u0027t say exactly how to \"fix\" this patch, or new ones, because I don\u0027t know due to decisions involving other issues that haven\u0027t been decided.  Hopefully, WTP 2.0 M4 will be declared in about a week and I can start committing the changes I have queued up to this point.  Next week I should be able to dig into the UI changes needed to fix various bugs and improve things.  Perhaps by late January or early February, we can tackle this feature with the landscape fairly stable by that time, and dealing with use cases like the above won\u0027t as much of a problem.",
    "see below for some considerations about these use cases:\n\n(In reply to comment #52)\n\u003e 1. If a security manager is enabled, it needs to be possible to add permissions\n\u003e to the catalina.policy file in the form of:\n\u003e \n\u003e grant codeBase \"file:\u003cpath to webapp\u003e/-\" {\n\u003e     ...\n\u003e };\n\u003e \n\u003e and have it still work. This precludes the use of this approach.  If a user\n\u003e still wants to use this approach, multiple grant blocks will be needed. If a\n\u003e user wants an environment that duplicates the \"production\" environment as close\n\u003e as possible (i.e. the permissions will work as is in the production environment\n\u003e other than an adjustment to the codeBase), the user should have the choice to\n\u003e do so.\n\nOk, this is probably the only use case that it can\u0027t be fulfilled using an expanded webapp, since it involves physical paths. Anyway IMHO should be acceptable that if a user select \"run modules from the workspace\" he will need to add the path of the actual workspace (or single projects).\nThis is not a big change, given that also at the moment the path that needs to be added is the one of the webapp assembled at runtime in .metadata/.plugins/org.eclipse.wst.server.core/tmpX , usually hidden to the user. Probably letting users specify the path of actual projects is even more clean and easy in respect to that. And if the requirement is to closely mimic a production environment the best choice would probably be unchecking the \"test environment\" flag in order to assemble the webapp in the standard webapps dir.\nAs a last consideration, in my experience only a very small percentage of users could be impacted by a similar change since modifying catalina.policy is not very common (unless you are working with SAS portal of course ;) )\n\n\n\u003e 2. A Dynamic Web Project with context-root set to \"\" should be served as the\n\u003e default webapp at runtime.  WTP currently supports this, though with some bugs\n\u003e and side effects that I\u0027m working on fixing.\n\nAt the moment a module with a context root of \"ROOT\" is server as the default at runtime (as tomcat usually does). I will check the use of \"\", it will be a matter of replacing it with \"ROOT\". BTW the setting of a path for a deployed module in WTP is actually unusable due to bug 121255 , probably that should be fixed before actually defining the final behavior (while developing this adapter I simply killed that task which is always resetting the context path and makes impossible to use the \"path\" attribute in the module part of the server editor).\n\n\n\u003e 3. When creating a Tomcat server in Eclipse with \"Run modules directly...\"\n\u003e checked, it needs to have a configuration completely separate from the\n\u003e installed Tomcat.  As an example from where I work, the installed Tomcat will\n\u003e often have JSP recompilation turned off for performance, since webapps aren\u0027t\n\u003e changing.  When creating an Eclipse server from that installation with \"Run\n\u003e modules directly...\" checked, it should be possible to restore the normal\n\u003e setting JSP setting without modifying the Tomcat installation.\n\nThis should be done exactly as in the default adapter... the tomcat installation is never modified. The only difference from the default adapter is that at the moment the configuration is copied from the tomcat installation to the runtime dir without using a \"staging directory\". If this is your concern it\u0027s something that I was already working at, in order to make it totally similar to the original behavior.\n\n\u003e 4. Create a Dynamic Web Project, add it to a server, and publish the server. \n\u003e Delete the project and publish the server.  The webapp should disappear from\n\u003e the published server.\n\nTrue, it handles renaming but not removal at the moment. I am going to fix it.\n\n\u003e 5. For servers that support META-INF/context.xml, it\u0027s configuration needs to\n\u003e be included in the context configuration at runtime.\n\nThis is already done in the new adapter, and if I\u0027m not wrong, it works better than in the original tomcat adapter (I remember that when I tried it a long time ago this was not supported).\n\n... to sum up: use case 5 is already fully supported, and I will carefully check 2-4 and post an update in the next few days. The only one left is #1, let me know if my comments look acceptable.\n\n\nAt this moment I also completed the porting to tomcat 5.0 and 6.0 (well, to my adapter at least, since the \"official\" one doesn\u0027t exist yet in WTP), here is the current status:\n\n- for tomcat 6.0 everything worked well as is, except for a change in the entry that needs to be defined in catalina.properties.\n\n- for tomcat 5.0 a different loader binary was required (only due to a simple signature change in a protected method) but it work exactly as in tomcat 5.5 for recent tomcat 5.0.x builds. I reviewed the patch also on old tomcat 5.x versions and the only note is that the way catalina properties is handled only works on versions \u003e\u003d 5.0.26. Earlier versions simply don\u0027t load catalina.properties from catalina.base (but only from catalina.home) so in order to support them the modification of catalina.home/conf/catalina.properties will be required. I could adjust the code if the support of older versions is required (tc 5.0.26 has been released in may 2004 if I\u0027m not wrong). This is a reference to the change in the tomcat code https://svn.apache.org/viewvc?view\u003drev\u0026revision\u003d302895\n(as a side note, looks like the current tomcat 5.0 adapter already copy catalina.properties to catalina.base assuming tomcat will use it... not sure if you are already assuming tomcat \u003e\u003d5.0.26 or if you were simply ignoring this issue)\n\nI hope that at least this could be the default implementation for the tomcat 6.0 adapter when it ships... I will keep an eye open on commits and bother you again as soon as the tomcat 6.0 adapter will be added ;)\n\n\n\n\n",
    "Created an attachment (id\u003d56267)\npatch updated - WTP HEAD - tomcat 5.0/5.5/6.0\n\nanother update:\n- adapters working with any tomcat 5.0.x, 5.5.x and 6.0.x versions (a new tomcat 6 adapter is included)\n- root context fully working (use case 2 above)\n- better handling of working copy of tomcat configuration (use case 3 above) + better handling of catalina.properties (preserve comments and formatting)\n\nthere are still some improvement to do in removal of web modules (use case 4) since I found out that the code that should take care of that was already in Tomcat50Configuration but it doesn\u0027t work properly (anyway, it\u0027s not worst than the current adapter). Source code for loaders is included in loader jars. The UI plugin is included only for the tomcat 6.0 adapter definition.\n",
    "Created an attachment (id\u003d56268)\nready to use binary for WTP 2.0 (tomcat 5.0/5.5/6.0)\n\n",
    "A good news from the tomcat side: the virtual classloader/dircontext implementations that makes this plugin work have been just committed as a part of the standard tomcat 6 distribution. In future it will be possible to use this approach without having to provide the classloader jar and without modifying catalina.properties.\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id\u003d41260\n\n(note that the tomcat 6 adapter will still have to provide its own custom classloader in order to support tomcat versions \u003c\u003d 6.0.7, anyway it\u0027s a great news for future versions)\n",
    "Created an attachment (id\u003d56496)\npatch updated WTP HEAD (2.0M4)\n\ncomplete handling of removed project/modules added",
    "Created an attachment (id\u003d56514)\nready to use binary for WTP 2.0 M4 (tomcat 5.0/5.5/6.0)\n\n",
    "(In reply to comment #58)\n\u003e Created an attachment (id\u003d56514) [details]\n\u003e ready to use binary for WTP 2.0 M4 (tomcat 5.0/5.5/6.0)\n\u003e \n\nthere seems to be a problem with the republishing with this new\nversion of the plugin.\n\nI have Eclipse 3.3.0 , WTP 2.0M4 and the above fix installed.\nSince I upgraded to these versions, I notice that the WTP plugin\ndoes not automatically publish java classes to tomcat 5.5 any more,\nunless I run it in debug mode.\n\n.jsp pages are updated though.\n\nI turned autopublishing on (1 sec) and off, no difference.\nI enabled and disabled \"automatic restart servers\" which unfortunately \ndid not make a difference either.\n\nI observed that the status of the server goes from \"synchronized\" (after a\nfresh restart) to republish, when I edit a .java page, but debug output\non the console does not reflect the change I made in a teststring.\n\nStarting tomcat in debug mode solves the problem.\n\n",
    "(In reply to comment #59)\n\u003e Since I upgraded to these versions, I notice that the WTP plugin\n\u003e does not automatically publish java classes to tomcat 5.5 any more,\n\nthe purpose of this plugin is actually to never publish classes to the tomcat server anymore. Classes are read from the workspace and never published\n\n\u003e unless I run it in debug mode.\nwhen running in debug mode the classloader automatically reload any changed class, both for webapp classes than for dependent jar projects. This is dome automatically be the classloader used to start tomcat, and you don\u0027t have to turn automatic reloading on or to publish anything to the server.\n\n",
    "Created an attachment (id\u003d57625)\npatch updated for WTP head post M4 (20070126)\n\nupdated patch after changes in WTP head after M4. Support for tomcat 6 merged with the committed tomcat 6 adapter.\n\nLarry, any news on this? I can\u0027t keep the patch updated forever ;)",
    "Hi Fabrizio,\n\nFor the next round of changes, I\u0027m trying to plan where hooks could go to bring this approach in.  I\u0027m not sure enough will there in my next major commit to proceed, but hopefully by the one after.  You may want to wait until I document the hooks here before doing further patching so as not to waste too much time on a still moving target.\n\nThanks,\nLarry  ",
    "Related: 167723",
    "Bug 167723",
    "\u003cping\u003e\nHi Larry, could you at least set a target milestone for this bug? 2.0 is approaching and any enhancement not targetted for 2.0M6 or 2.0 will be delayed again to the next major release, just as happened with 0.7 and 1.5...",
    "Hi Fabrizio,\n\nI\u0027m actively working on this and plan to have this in M6. Rather than trying to provide \"hooks\", it made more sense to patch the new code into appropriate places in the existing code.  Some tweaks have been needed to get it to work with Linux and regardless of the \"testEnvironment/run directly\" setting. The UI to enable this feature still on the to-do list, but it can be enabled by manually editing the server configuration to set the attribute, currently called \"serveModulesWithoutPublish\".\n\nI anticipate it will be possible to change the setting without requiring projects to be removed from the server first, unlike some other new settings.  I\u0027m also planning on having a separate option to specify contexts be written to separate files that will apply to all modes and not just this one.  Implementing the UI is next after I finish up the changes to tomcat.core.\n\nAt some point some documentation will need to be written for this feature, including info about the side effects.  At the moment, I don\u0027t think tag files in utility projects works, but I still need to verify to make sure.  If you know of any other issues beyond those previously discussed in this bug, please add them to this bug.\n\nLarry",
    "(In reply to comment #66)\n\u003e I\u0027m actively working on this and plan to have this in M6.\n\ngreat news!\n\n\u003e including info about the side effects.  At the moment, I don\u0027t think tag files\n\u003e in utility projects works, but I still need to verify to make sure.\n\nthey work fine with the latest loader included in the patches together with tomcat 6 and also with the latest tomcat 5.5 releases where the following bug has been fixed:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id\u003d41267\nbut unfortunately they can\u0027t work with versions \u003c 5.5.20 due to the above bug.\n\n\n",
    "This has been committed and will appear in the next WTP 2.0 IBuild and M6.  Marking FIXED, since I think I\u0027m basically done except for fixing bugs and needed performance and behavioral tweaks.\n\nThis feature appears as two new options in the server editor.  The first is currently called \"Serve modules without publishing\".  I avoided \"Serve modules directly...\" because the historical meaning of this name could be misleading. The second option is currently called \"Publish module contexts to separate XML files\".  These options may be enabled independently and may be used regardless of the Server Location settings.  Changes to these new options can only be saved when the server is stopped.  This helps avoid side effects and in the case of disabling \"Serve modules without publishing\", allows a \"publish clean\" to be done to clear out cached publish info.\n\nThe current implementation has room for improvement with respect to efficiency.  It tries to establish \"what\" and \"where\" things are done, with improvements to \"how\" coming later.\n\nBecause the JST feature hierarchy doesn\u0027t allow the JST Server feature to depend on the JST Enterprise feature, the EAR handling in the ModuleTraverser had to be commented out.\n\nAt the moment, the \"...separate XML files\" option only saves project module contexts to separate files.  Other external contexts in server.xml are left as is because I wasn\u0027t confident I had time to correctly handle issues with pre-existing contexts when using the Tomcat installation for catalina.base.  I\u0027m not sure I will have time to address this in WTP 2.0.  I will try to address the fact that the separate XML files are currently always written and try to have them rewritten only when changed.\n\nThanks Igor and Fabrizio.  Though the patches weren\u0027t used as is, there was a lot of copy \u0026 pasting to create the current implementation.\n\nTesting and better option name suggestions are welcome.",
    "Great news, thanks! Please add it to the \"New and Noteworthy\" document, I think it deserves.",
    "Regrettably, there is a major oops in this week\u0027s I-Build with respect to this feature that I didn\u0027t catch soon enough.  I failed to update the tomcat.core plug-in\u0027s build.properties to include the special runtime jars that must be copied to the server for this feature to work.  I will try to get this fixed for M6.  But for those who are willing to test this week\u0027s I-Build, I will create an updated version of the tomcat.core plug-in and attach it here once the I-Build is declared.",
    "Created an attachment (id\u003d62572)\nPatched tomcat plug-in jar that includes the missing runtime jars\n\nThis jar replaces the org.eclipse.jst.server.tomcat.core_1.1.0.v20070328c.jar in the WTP 2.0 I-I200703301651-200703301651 download.  It is only needed if you want to enable the \"Serve modules without publishing\" feature.",
    "Hi,\nI\u0027m working with Eclispe 3.2.1 and the last version of WTP (1.5.x).\nI\u0027m making web project with Tomcat 5.5.17.\nI\u0027ve a problem because my project has to include servlets and classes which are stored on a network directory. For Eclipse, it\u0027s not a problem since I add a \"class folder\" in the build path. But the problem is that those servlets and classes are not known by Tomcat when I use WTP. It says \"ClasNotFound\".\nI thought that your plugin could help me, but I\u0027ve tried the last binary for WTP 1.5 and it didn\u0027t work.\nCan your plugin help me to sovle this problem ? \nIs it possible with version for WTP 1.5 or 2.0 ?\n\nThanks in advance for your help.\nCyril",
    "\n(In reply to comment #70)\n\u003e for those who are willing to test this week\u0027s I-Build, I will\n\u003e create an updated version of the tomcat.core plug-in and attach it here once\n\u003e the I-Build is declared.\n\nI can confirm that everything works fine for me with the last I build + this patched jar, the new feature works flawlessy. Great work Isaacs\n\nJust a note about the decision of making \"publish module contexts to separate XML files\" a separate option: enabling \"serve modules without publishing\" without this could not work on some tomcat 5.5 versions, due to a bug (now fixed) related to the classloader used to parse server.xml. In such tomcat versions classloader/dircontext extensions are only seen when contexts are declared in separate files, that was the reason why I forced that change in my patches.\nMaybe this worths a note (or that option may be forced when using \"serve modules without publishing\"?)\n\n\n\n\n\n",
    "Thanks for the testing, Fabrizio.\n\nI\u0027m going to go ahead and mark this bug VERIFIED since the feature is now in the code base.  I\u0027ll include some info in the documentation about needing \"Publish module contexts to separate XML files\" in conjuction with \"Serve modules without publishing\" for Tomcat versions prior to 5.5.19.  Hopefully by the time WTP 2.0 releases, this won\u0027t be too much of an issue.\n\nI have entered a couple of enhancement requests to cover some remaining TODO items:\n\nBug 180931: For Tomcat servers, try not to rewrite separate context.xml files if nothing changes\n\nBug 180936: When publishing to a running Tomcat server, try to delay work directory removal for deleted modules\n\nIf there are other quirks or problems using the two new options, please open new bug reports or enhancement requests to address them, rather than add to this bug.  Thanks.",
    "Closing as verified.",
    "(In reply to comment #75)\n\u003e Closing as verified.\n\nA resounding \"Thank you\" to everyone involved in developing, adjusting and testing this feature, it works wonders for productivity on a vanilla WTP+Tomcat setup.\n\n",
    "The enhancements in Bugs 180931 and 186295 have been implemented for WTP 2.0.  This should improve the usability of this feature by not triggering unnecessary context reloads."
  ],
  "commentCreationDates": [
    "2006-01-23T19:11:04+01:00",
    "2006-01-23T19:12:55+01:00",
    "2006-01-23T19:37:48+01:00",
    "2006-01-23T20:28:45+01:00",
    "2006-01-24T10:12:07+01:00",
    "2006-01-24T13:17:10+01:00",
    "2006-01-26T21:06:34+01:00",
    "2006-01-27T01:05:07+01:00",
    "2006-01-27T02:28:08+01:00",
    "2006-01-27T09:36:30+01:00",
    "2006-01-27T16:01:57+01:00",
    "2006-01-27T16:16:10+01:00",
    "2006-01-28T05:53:15+01:00",
    "2006-02-01T17:29:48+01:00",
    "2006-02-01T19:02:18+01:00",
    "2006-02-05T10:28:22+01:00",
    "2006-03-07T19:50:38+01:00",
    "2006-03-07T20:00:33+01:00",
    "2006-03-07T20:11:12+01:00",
    "2006-03-07T21:04:45+01:00",
    "2006-03-14T01:12:33+01:00",
    "2006-03-19T18:22:55+01:00",
    "2006-03-19T18:25:13+01:00",
    "2006-03-19T19:13:32+01:00",
    "2006-03-22T17:23:00+01:00",
    "2006-03-22T17:24:58+01:00",
    "2006-03-22T17:26:36+01:00",
    "2006-03-22T17:58:20+01:00",
    "2006-03-22T20:09:30+01:00",
    "2006-03-28T10:18:28+02:00",
    "2006-03-28T16:05:14+02:00",
    "2006-03-28T20:13:31+02:00",
    "2006-04-04T17:15:31+02:00",
    "2006-06-22T13:17:50+02:00",
    "2006-06-22T13:32:07+02:00",
    "2006-06-22T16:21:22+02:00",
    "2006-09-08T12:00:45+02:00",
    "2006-09-08T12:03:25+02:00",
    "2006-09-08T12:04:46+02:00",
    "2006-09-08T16:23:29+02:00",
    "2006-09-08T23:03:18+02:00",
    "2006-09-14T23:19:35+02:00",
    "2006-12-03T17:08:48+01:00",
    "2006-12-03T17:41:05+01:00",
    "2006-12-03T21:21:41+01:00",
    "2006-12-06T12:03:42+01:00",
    "2006-12-13T22:10:23+01:00",
    "2006-12-27T21:08:13+01:00",
    "2006-12-27T21:09:37+01:00",
    "2006-12-27T21:28:59+01:00",
    "2006-12-28T18:38:50+01:00",
    "2006-12-29T09:24:43+01:00",
    "2006-12-29T18:57:50+01:00",
    "2006-12-29T21:06:37+01:00",
    "2006-12-30T16:07:40+01:00",
    "2006-12-30T16:09:34+01:00",
    "2007-01-03T09:39:19+01:00",
    "2007-01-05T22:53:29+01:00",
    "2007-01-06T14:07:18+01:00",
    "2007-01-19T19:11:28+01:00",
    "2007-01-19T20:23:44+01:00",
    "2007-01-26T20:53:58+01:00",
    "2007-01-26T21:51:18+01:00",
    "2007-03-03T07:31:54+01:00",
    "2007-03-03T10:15:22+01:00",
    "2007-03-21T21:56:38+01:00",
    "2007-03-21T22:33:59+01:00",
    "2007-03-21T23:18:46+01:00",
    "2007-03-29T17:01:46+02:00",
    "2007-03-30T15:15:45+02:00",
    "2007-03-30T21:11:38+02:00",
    "2007-03-30T23:52:07+02:00",
    "2007-04-03T17:13:41+02:00",
    "2007-04-04T12:54:34+02:00",
    "2007-04-04T15:31:10+02:00",
    "2007-04-04T17:43:37+02:00",
    "2007-04-06T19:42:51+02:00",
    "2007-05-15T16:59:21+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jst.server.tomcat.core.internal.TomcatServerBehaviour$TomcatPublishModuleVisitor.visitClasspathEntry",
          "source": "TomcatServerBehaviour.java:1368"
        },
        {
          "method": "org.eclipse.jst.server.tomcat.core.internal.ModuleTraverser.traverseWebComponent",
          "source": "ModuleTraverser.java:125"
        },
        {
          "method": "org.eclipse.jst.server.tomcat.core.internal.ModuleTraverser.traverse",
          "source": "ModuleTraverser.java:64"
        },
        {
          "method": "org.eclipse.jst.server.tomcat.core.internal.TomcatServerBehaviour.publishModule",
          "source": "TomcatServerBehaviour.java:400"
        },
        {
          "method": "org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModule",
          "source": "ServerBehaviourDelegate.java:672"
        },
        {
          "method": "org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModules",
          "source": "ServerBehaviourDelegate.java:752"
        },
        {
          "method": "org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publish",
          "source": "ServerBehaviourDelegate.java:610"
        },
        {
          "method": "org.eclipse.wst.server.core.internal.Server.doPublish",
          "source": "Server.java:803"
        },
        {
          "method": "org.eclipse.wst.server.core.internal.Server.publish",
          "source": "Server.java:791"
        },
        {
          "method": "org.eclipse.wst.server.core.internal.PublishServerJob.run",
          "source": "PublishServerJob.java:145"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 41,
      "bugId": "124914",
      "date": "2006-09-14T23:19:35+02:00",
      "product": "Web Tools",
      "component": "jst.server",
      "severity": "enhancement"
    }
  ],
  "groupId": "124914",
  "bugId": "124914",
  "date": "2006-01-23T19:11:04+01:00",
  "product": "Web Tools",
  "component": "jst.server",
  "severity": "enhancement"
}