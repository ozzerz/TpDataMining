{
  "comments": [
    "I am getting the following stacktrace,\nwhen starting class test.Test.main:\n\njava.lang.ClassFormatError: test/B (Repetitive method name/signature)\n\tat java.lang.ClassLoader.defineClass0(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:539)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:194)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:289)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)\nException in thread \"main\" \n\nI have attached a test case.\nThe decompiled class B using jad looks like this:\n\n\npackage test;\n\n\n// Referenced classes of package test:\n//            A, IA3, IA1\n\npublic abstract class B extends A\n    implements IA3, IA1\n{\n\n    public B()\n    {\n    }\n\n    public void test()\n    {\n    }\n\n    public abstract boolean hasKursAt(int i);\n\n    public abstract boolean hasKursAt(int i);\n\n    int a;\n}\n\nThe problem arises because of severel interfaces containing the\nsame method:\n    public abstract boolean hasKursAt(int i);\n\nI was not able to reduce the test case any further.\nI am using jdk 1.4.2_08 as runtime.\n\nThis bug may be a duplicate:\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d126423",
    "Created an attachment (id\u003d39037)\nThe test case.\n\n",
    "I\u0027ll investigate it.",
    "I used Eclipse 3.2 RC 1.\n\nWe had no problems using 3.1.*",
    "I tried your test case and it doesn\u0027t fail. What VM are you using?\nCould you please provide your compiler settings ?\n\nThanks.",
    "Some more info:\n\nwe use the following Java Compiler Preferences:\n\nCompiler Compliance Level: 1.3\nGenerated Class Files compatibility: 1.1\nSource Compatibility: 1.3\n\nThe problem vanished if I set all to 1.4.",
    "This certainly reduces the severity to minor.\nWe are using sun jdk 1.4.2_08.",
    "Reproduced if the compiler compliance is set to 1.3.\nThanks for the steps.",
    "If the compliance is 1.3, B.class looks like this:\n\n// Compiled from B.java (version 1.1 : 45.3, super bit)\npublic abstract class test.B extends test.A implements test.IA3, test.IA1 {\n  Constant pool:\n    constant #1 class: #2 test/B\n    constant #2 utf8: \"test/B\"\n    constant #3 class: #4 test/A\n    constant #4 utf8: \"test/A\"\n    constant #5 class: #6 test/IA3\n    constant #6 utf8: \"test/IA3\"\n    constant #7 class: #8 test/IA1\n    constant #8 utf8: \"test/IA1\"\n    constant #9 utf8: \"a\"\n    constant #10 utf8: \"I\"\n    constant #11 utf8: \"\u003cinit\u003e\"\n    constant #12 utf8: \"()V\"\n    constant #13 utf8: \"Code\"\n    constant #14 method_ref: #3.#15 test/A.\u003cinit\u003e ()V\n    constant #15 name_and_type: #11.#12 \u003cinit\u003e ()V\n    constant #16 utf8: \"LineNumberTable\"\n    constant #17 utf8: \"LocalVariableTable\"\n    constant #18 utf8: \"this\"\n    constant #19 utf8: \"Ltest/B;\"\n    constant #20 utf8: \"test\"\n    constant #21 utf8: \"hasKursAt\"\n    constant #22 utf8: \"(I)Z\"\n    constant #23 utf8: \"SourceFile\"\n    constant #24 utf8: \"B.java\"\n  \n  // Field descriptor #10 I\n  int a;\n  \n  // Method descriptor #12 ()V\n  // Stack: 1, Locals: 1\n  public B();\n    0  aload_0 [this]\n    1  invokespecial test.A() [14]\n    4  return\n      Line numbers:\n        [pc: 0, line: 13]\n        [pc: 4, line: 14]\n      Local variable table:\n        [pc: 0, pc: 5] local: this index: 0 type: test.B\n  \n  // Method descriptor #12 ()V\n  // Stack: 0, Locals: 1\n  public void test();\n    0  return\n      Line numbers:\n        [pc: 0, line: 17]\n      Local variable table:\n        [pc: 0, pc: 1] local: this index: 0 type: test.B\n  \n  // Method descriptor #22 (I)Z\n  public abstract boolean hasKursAt(int arg0);\n  \n  // Method descriptor #22 (I)Z\n  public abstract boolean hasKursAt(int arg0);\n}\n\nWe do have a duplicate method in it.",
    "The bug seems to come from the fact that the methods are not sorted once the default abstract method is added.\nThen the call implementsMethod(method) might returns false even if the method is already in the list.",
    "Created an attachment (id\u003d39041)\nProposed fix\n\n",
    "There might be a more efficient way to sort the method after the addition of a default abstract method.",
    "Thanks Olivier,\n\nthat was very fast!",
    "Created an attachment (id\u003d39047)\nBetter patch\n\nMight be a better patch.",
    "Created an attachment (id\u003d39058)\nNew patch\n\nNo need to use a temp local to store the new array.\nAlso factorize the this.methods.length calls.",
    "Created an attachment (id\u003d39059)\nRegression test\n\n",
    "In fact -target 1.1 is enough to reproduce the failure. When target \u003e\u003d 1.2, there is no longer the addition of default abstract methods.\nCompliance 1.3 sets the target to 1.1 by default.",
    "All tests passed with the latest patch.\nAnother solution would be to change isImplements(...) implementation to get rid of the assumption that the method bindings are sorted.\n\nThen only one sort would be done at the end of the method that adds all default abstract methods followed by the line:\n\tthis.tagBits |\u003d TagBits.AreMethodsSorted;",
    "Additions of default abstracts along the checking process are definitely breaking the algorithm which relies on sorting.\nWill rather separate default abstracts from the method array, and only inject them at the end. This avoids multiple sorts, and multiple array growing.\n\n",
    "Moved the regression test to LookupTest#test064.",
    "Created an attachment (id\u003d39155)\nFinal patch\n\n",
    "Fix released",
    "*** Bug 138428 has been marked as a duplicate of this bug. ***",
    "Verified with I20060427-1600 for 3.2RC2"
  ],
  "commentCreationDates": [
    "2006-04-20T16:55:11+02:00",
    "2006-04-20T16:56:30+02:00",
    "2006-04-20T16:58:43+02:00",
    "2006-04-20T17:00:58+02:00",
    "2006-04-20T17:05:00+02:00",
    "2006-04-20T17:11:33+02:00",
    "2006-04-20T17:12:52+02:00",
    "2006-04-20T17:15:04+02:00",
    "2006-04-20T17:20:09+02:00",
    "2006-04-20T17:25:27+02:00",
    "2006-04-20T17:27:17+02:00",
    "2006-04-20T17:28:00+02:00",
    "2006-04-20T17:29:59+02:00",
    "2006-04-20T17:38:08+02:00",
    "2006-04-20T18:01:57+02:00",
    "2006-04-20T18:02:11+02:00",
    "2006-04-20T18:05:40+02:00",
    "2006-04-20T19:22:44+02:00",
    "2006-04-21T12:29:32+02:00",
    "2006-04-21T12:30:11+02:00",
    "2006-04-21T12:32:06+02:00",
    "2006-04-21T12:55:27+02:00",
    "2006-04-26T17:39:11+02:00",
    "2006-04-28T20:41:12+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassFormatError",
      "message": "test/B (Repetitive method name/signature)",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:539"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:123"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:251"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:55"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:194"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:187"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:289"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:274"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:235"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:302"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "137744",
      "date": "2006-04-20T16:55:11+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "minor"
    }
  ],
  "groupId": "137744",
  "bugId": "137744",
  "date": "2006-04-20T16:55:11+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "minor"
}