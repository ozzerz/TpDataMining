{
  "comments": [
    "I had the latest release version of the AspectJ compiler, 1.5.2RC1 and I had the following problem. I even tried the latest AspectJ compiler version: 1.4.1.200609011748 for Eclipse 3.2 and I still found this strange behaviour while using aspects within interfaces, when those interfaces get generics. For example:\n\npublic interface MyInterface1\u003cT\u003e {\n\n  public abstract static aspect MyAspect1\u003cT\u003e {\n\n    public void foo() {\n      System.out.println(\"Fooooooo\");\n    }\n\n    public final pointcut myPointcutInInterface() :                         \n      call(* *..*.*(..));\n  }\n}\n\npublic aspect MyAspect implements MyInterface1\u003cMyClass\u003e {\n\n  before() :\n    MyAspect1\u003cMyClass\u003e.myPointcutInInterface() \u0026\u0026\n    !within(MyAspect\u003cMyClass\u003e) {\n      System.out.println(\"Before executing!\");\n    }\n}\n\nResults in an exception thrown by the AspectJ compiler:\n\njava.lang.IllegalStateException\nat org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:42)\nat\norg.aspectj.weaver.patterns.WildTypePattern.resolveParameterizedType(WildTypePattern.java:790)\nat\norg.aspectj.weaver.patterns.WildTypePattern.resolveBindingsForExactType(WildTypePattern.java:732)\nat\norg.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:699)\nat org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:623)\nat org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:190)\nat\norg.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:130)\nat org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPointcut.java:74)\nat org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)\nat\norg.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes(PointcutDesignator.java:84)\nat\norg.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements(AdviceDeclaration.java:119)\nat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)\nat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1088)\nat\norg.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:116)\nat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1137)\nat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:519)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:271)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nIllegalStateException thrown: Expecting raw type\n\nWithout the generics, the program works just fine. I don\u0027t understand what is the problem. Can anyone help me, please? Thanks in advance.\n\n\nBest regards,\n\n\nPaulo Zenida",
    "I can reproduce the problem with the (excellent) testcase. Moving MyAspect1\u003cT\u003e into it\u0027s own source file avoids the exception which makes me think it might be related to Bug 153490 \"IllegalStateException thrown: ...\". Will need to do some more investigation.",
    "From the error message \"IllegalStateException thrown: Expecting raw type\" it is possible this bug is related to bug 152848.",
    "After some initial investigation I don\u0027t believe this bug is related to bug 152848. The problem here is to do with being an inner type.\n\nConverting the supplied testcode into a testcase that fits within the testsuite, the latest code from HEAD returns the following message:\n\nExpecting raw type, not: MyInterface$MyAspect1\u003c\u003e\n\nWhat\u0027s happening is that we\u0027re entering TypeFactory.createParameterizedType(..) with a ResolvedType that isn\u0027t a generic type (which is why we go on to find the generic type) but is a parameterized type. Therefore, the test isRawType() returns false and we blow up with the IllegalStateException.",
    "Created an attachment (id\u003d49475)\nfailing testcase\n\nApply this patch to the tests project.",
    "I think I can say with some confidence that we have *no* tests for generic inner aspects of generic types.  That program looks scary to me but it is highlighting a few bugs.  Behind the failures there are actually problems with the pointcut: within() can\u0027t take a parameterized type - there would be no difference between within(Foo\u003cString\u003e) and within(Foo\u003cInteger\u003e) - there is only one Foo.\n\nSo I will working on fixing this bug but I have to warn you that this could well be a buggy area and some bugs may not get fast turnaround, since I think I can see some infrastructure missing from our implementation that needs writing to handle these situations.",
    "alright, i have fixed this.  Or rather I\u0027ve selotaped over this particularly bug.  It is still not a well tested area and I\u0027ve added just two tests for this scenario - so I expect to see related bugs in the future...",
    "fixes are available in aj dev builds"
  ],
  "commentCreationDates": [
    "2006-09-03T16:16:33+02:00",
    "2006-09-04T18:24:19+02:00",
    "2006-09-05T09:54:37+02:00",
    "2006-09-06T11:53:27+02:00",
    "2006-09-06T11:56:02+02:00",
    "2006-09-13T14:50:24+02:00",
    "2006-10-06T17:46:38+02:00",
    "2006-10-12T18:37:38+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "elements": [
        {
          "method": "org.aspectj.weaver.TypeFactory.createParameterizedType",
          "source": "TypeFactory.java:42"
        },
        {
          "method": "org.aspectj.weaver.patterns.WildTypePattern.resolveParameterizedType",
          "source": "WildTypePattern.java:790"
        },
        {
          "method": "org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsForExactType",
          "source": "WildTypePattern.java:732"
        },
        {
          "method": "org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName",
          "source": "WildTypePattern.java:699"
        },
        {
          "method": "org.aspectj.weaver.patterns.WildTypePattern.resolveBindings",
          "source": "WildTypePattern.java:623"
        },
        {
          "method": "org.aspectj.weaver.patterns.TypePattern.resolveExactType",
          "source": "TypePattern.java:190"
        },
        {
          "method": "org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings",
          "source": "ReferencePointcut.java:130"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.resolveBindings",
          "source": "AndPointcut.java:74"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.resolve",
          "source": "Pointcut.java:196"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes",
          "source": "PointcutDesignator.java:84"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements",
          "source": "AdviceDeclaration.java:119"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve",
          "source": "AbstractMethodDeclaration.java:400"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve",
          "source": "TypeDeclaration.java:1088"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve",
          "source": "AspectDeclaration.java:116"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve",
          "source": "TypeDeclaration.java:1137"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve",
          "source": "CompilationUnitDeclaration.java:305"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:519"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:329"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:887"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:271"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:170"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "156058",
      "date": "2006-09-03T16:16:33+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "156058",
  "bugId": "156058",
  "date": "2006-09-03T16:16:33+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}