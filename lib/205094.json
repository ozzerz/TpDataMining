{
  "comments": [
    "A framework needs to be implemented so that JUnits will fail when error statuses are logged to specified plugins.",
    "Created an attachment (id\u003d79497)\npatch\n\nThis patch implements the framework needed to allow JUnit tests to fail when status messages are logged to plugins who\u0027s logs are being listened too.",
    "I have a few general questions. \n\nIs this being proposed because there are specific known problem where things should fail, but are only being logged? Or ... is this just a good idea? \n\nAlso, I dont\u0027 know the specifics of what you are listening for, but am surprised that a log message would be the only (or correct) indication of failure ... seems like some exception should be thrown? Or some \"check status\" method to see if an operation completed, etc. Again, I don\u0027t know the specifics, so am mostly asking for my own education ... but, do want to be sure we are not \"working around\" some other problem? (For example, in \"real code\" we wouldn\u0027t want to listen to the log to know if something was successful or not). \n\n",
    "There are cases where exceptions are caught and logged and an operation doesn\u0027t fully finish but a test will still pass because the exception is not re-thrown after being logged.  But also it is in general a good idea that if errors and warnings are being logged that a test should not pass.\n\nThis is by no means the only way that we are checking of a test to fail but simply in addition to all of the already existing asserts and validations run by the test suits.\n\nAs for how it is being done, a JUnitLogListener which implements ILogListener was created.  And for every plugin that has the singleton instance of this JUnitLogListener added to its LogListeners the JUnitLogListener collects the list of logged status of types IStatus.CANCEL, IStatus.ERROR, and IStatus.WARNING.  Then when a test is done being run this JUnitLogListener instance is asked for any logged status.  If any exist the test is failed (if it hasn\u0027t already) and the message for the status and the stack trace (if existent) is added to the test failure message in a similar way that the AssertWarn messages are added using the AssertWarn framework that was previously added during other JUnit updates(see Bug 190496).\n\nAs for where this is hooked in, currently the calling to JUnitLogListener for any logged statuses and all of the error message formating is being preformed in the finally block of org.eclipse.wst.common.tests.BaseTestCase.run(), therefor any JUnit test extending from BaseTestCase can now fail on logged statuses.   There is also a static variable in BaseTestCase that can be set to true or false before or during each test run that specifies weather the test should be failed on any logged statuses when the test finishes, weather it finishes with an error or failure or otherwise passes. (This variable is by default set to true)\n\nLet me know if you have any more questions.\n\nHere is a sample output from a test that was set up to have a warning,log two error statuses, and then fail an assert.\n\njunit.framework.AssertionFailedError: Forcing this test to fail.  (Test had 1 warnings occur)  (Test logged 2 statuses)\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat org.eclipse.wtp.j2ee.headless.tests.utility.operations.UtilityProjectCreationOperationTest.testUtility_Defaults(UtilityProjectCreationOperationTest.java:44)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat junit.framework.TestCase.runTest(TestCase.java:164)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat org.eclipse.wst.common.tests.BaseTestCase.run(BaseTestCase.java:193)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:58)\n\tat org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:24)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod(EclipseAppContainer.java:572)\n\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:171)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:508)\n\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:447)\n\tat org.eclipse.equinox.launcher.Main.run(Main.java:1173)\n\tat org.eclipse.equinox.launcher.Main.main(Main.java:1148)\n\tat ----------\u003e.(WARNING MESSAGE: Forcing this test to have a warning)  (WARNING NUMBER:1)\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat org.eclipse.wst.common.tests.AssertWarn.warn(AssertWarn.java:272)\n\tat org.eclipse.wtp.j2ee.headless.tests.utility.operations.UtilityProjectCreationOperationTest.testUtility_Defaults(UtilityProjectCreationOperationTest.java:41)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat junit.framework.TestCase.runTest(TestCase.java:164)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat org.eclipse.wst.common.tests.BaseTestCase.run(BaseTestCase.java:193)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:58)\n\tat org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:24)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod(EclipseAppContainer.java:572)\n\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:171)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:508)\n\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:447)\n\tat org.eclipse.equinox.launcher.Main.run(Main.java:1173)\n\tat org.eclipse.equinox.launcher.Main.main(Main.java:1148)\n\tat ----------\u003e.(LOGGED STATUS: Forcing this test to have a logged message)  (LOGGED STATUS NUMBER:1)\n\tat ----------\u003e.(LOGGED STATUS: Forcing this test to have another logged message)  (LOGGED STATUS NUMBER:2)\n\n",
    "Created an attachment (id\u003d79507)\npatch\n\nfixes error in previous patch where the default value for weather to fail on logged statuses was not being set correctly.",
    "Created an attachment (id\u003d79526)\npatch\n\nthe plugin id of the plugin that a status message came from is now recorded by the JUnitLogListener and used for more detailed output in the test failure stack trace.",
    "Created an attachment (id\u003d79546)\nupdated patch\n\nMakes the information provided by the JUnit test failure more detailed for easer debugging of logged statuses without stack traces.",
    "Created an attachment (id\u003d80276)\nWTP 2.0 JUnit Fail on Log Framework patch\n\nThis patch implements the framework needed for detailed failure messages in junit tests when a message is logged.  This is the needed functionality only and does not add the necessary listener calls to start failing any tests based on logged entries.",
    "*** Bug 205431 has been marked as a duplicate of this bug. ***",
    "code checked into both 202 and 30 streams."
  ],
  "commentCreationDates": [
    "2007-10-01T19:22:13+02:00",
    "2007-10-01T19:24:43+02:00",
    "2007-10-01T20:12:17+02:00",
    "2007-10-01T21:05:46+02:00",
    "2007-10-01T21:08:22+02:00",
    "2007-10-01T23:39:14+02:00",
    "2007-10-02T16:04:15+02:00",
    "2007-10-12T21:22:05+02:00",
    "2007-10-13T00:04:50+02:00",
    "2007-10-17T23:28:03+02:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "message": "Forcing this test to fail.  (Test had 1 warnings occur)  (Test logged 2 statuses)",
      "elements": [
        {
          "method": "junit.framework.Assert.fail",
          "source": "Assert.java:47"
        },
        {
          "method": "org.eclipse.wtp.j2ee.headless.tests.utility.operations.UtilityProjectCreationOperationTest.testUtility_Defaults",
          "source": "UtilityProjectCreationOperationTest.java:44"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:64"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:43"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:615"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:164"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:130"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:120"
        },
        {
          "method": "org.eclipse.wst.common.tests.BaseTestCase.run",
          "source": "BaseTestCase.java:193"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3TestReference.java:130"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:38"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:58"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run",
          "source": "CoreTestApplication.java:24"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:64"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:43"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:615"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod",
          "source": "EclipseAppContainer.java:572"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppHandle.run",
          "source": "EclipseAppHandle.java:171"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:106"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:76"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:363"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:176"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:64"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:43"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:615"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.invokeFramework",
          "source": "Main.java:508"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.basicRun",
          "source": "Main.java:447"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.run",
          "source": "Main.java:1173"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.main",
          "source": "Main.java:1148"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "205094",
      "date": "2007-10-01T21:05:46+02:00",
      "product": "Web Tools",
      "component": "jst.j2ee",
      "severity": "normal"
    }
  ],
  "groupId": "205094",
  "bugId": "205094",
  "date": "2007-10-01T19:22:13+02:00",
  "product": "Web Tools",
  "component": "jst.j2ee",
  "severity": "normal"
}