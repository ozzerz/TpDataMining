{
  "comments": [
    "[Note bug description continued in multiple comments... Why don\u0027t you allow\nattachments? ]\n\nI got the following error, which should never be possible: \n\nException in thread \"main\" java.lang.ClassFormatError: Repetitive method name/signature in class file collagen/plan/SetBeforeAct\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(Unknown Source)\n\tat java.security.SecureClassLoader.defineClass(Unknown Source)\n\tat java.net.URLClassLoader.defineClass(Unknown Source)\n\tat java.net.URLClassLoader.access$100(Unknown Source)\n\tat java.net.URLClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat collagen.plan.Builtin.\u003cclinit\u003e(Builtin.java:18)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat com.merl.util.Utils.instantiate(Utils.java:202)\n\tat collagen.plan.Library$Path.setUp(Library.java:315)\n\tat collagen.Collagen.preInit(Collagen.java:237)\n\tat com.merl.util.BeanComponent$Base.init(BeanComponent.java:1222)\n\tat com.merl.util.BeanComponent$Base.start(BeanComponent.java:1268)\n\tat com.merl.util.BeanComponent$Base.main(BeanComponent.java:674)\n\tat com.merl.util.BeanComponentApplet.main(BeanComponentApplet.java:29)\n\tat collagen.Collagen.main(Collagen.java:152)\n\nI enclose the source file later below, but the entire project is much\ntoo large.  I am just doing a normal Java project.  Note that if I use\njavac from the the command line to recompile the source file, the\noffending duplicate method signature for getParameterOps() goes away:\n\n***********************************************************************\n\n\u003e javap collagen.plan.SetBeforeAct\nCompiled from \"SetBeforeAct.java\"\npublic class collagen.plan.SetBeforeAct extends collagen.plan.Act$Base implements collagen.plan.Manipulation,collagen.plan.SetBefore{\n    public static int INDEX;\n    public static final collagen.infer.equal.Term$Slot[] PARAMETERS;\n    static {};\n    public collagen.plan.Momento getBefore();\n    public collagen.plan.Momento getAfter();\n    public void setBefore(collagen.plan.Momento);\n    public void setAfter(collagen.plan.Momento);\n    public collagen.plan.Act$Occurrence newOccurrence(long);\n    public collagen.plan.Act$Quoted getPurpose();\n    public int getIndex();\n    public collagen.infer.equal.Term$Slot[] getParameterOps();\n    protected collagen.infer.equal.Term[] getParameterArray();\n    protected void setParameterArray(collagen.infer.equal.Term[]);\n    public boolean isShowable();\n    public collagen.plan.SetBeforeAct();\n    public collagen.plan.SetBeforeAct(collagen.plan.Actor, collagen.plan.Act$Quoted);\n    public collagen.plan.SetBeforeAct(collagen.infer.equal.Term[], collagen.infer.equal.Term[], collagen.infer.equal.Term[]);\n    public collagen.plan.SetBeforeAct(collagen.plan.Actor, collagen.plan.Act);\n    public boolean requiresExplanation();\n    public collagen.infer.tms.Proposition[] matches(collagen.infer.equal.Term, boolean);\n    public java.lang.Boolean isApplicable();\n    public java.lang.Boolean isAchieved();\n    public collagen.infer.equal.Term$Slot[] getResultOps();  \u003c\u003c\u003cALSO WRONG!\n    public collagen.infer.equal.Term$Slot[] getPropertyOps(); \u003c\u003c\u003cALSO WRONG!\n    public collagen.infer.equal.Term$Slot[] getParameterOps();  \u003c\u003c\u003cDUPLICATE!!!\n}\n\n****************************************************************\n\u003e javac SetBeforeAct.java\n\u003e javap collagen.plan.SetBeforeAct\nCompiled from \"SetBeforeAct.java\"\npublic class collagen.plan.SetBeforeAct extends collagen.plan.Act$Base implements collagen.plan.Manipulation,collagen.plan.SetBefore{\n    public static int INDEX;\n    public static final collagen.infer.equal.Term$Slot[] PARAMETERS;\n    public collagen.plan.Momento getBefore();\n    public collagen.plan.Momento getAfter();\n    public void setBefore(collagen.plan.Momento);\n    public void setAfter(collagen.plan.Momento);\n    public collagen.plan.Act$Occurrence newOccurrence(long);\n    public collagen.plan.Act$Quoted getPurpose();\n    public int getIndex();\n    public collagen.infer.equal.Term$Slot[] getParameterOps();\n    protected collagen.infer.equal.Term[] getParameterArray();\n    protected void setParameterArray(collagen.infer.equal.Term[]);\n    public boolean isShowable();\n    public collagen.plan.SetBeforeAct();\n    public collagen.plan.SetBeforeAct(collagen.plan.Actor, collagen.plan.Act$Quoted);\n    public collagen.plan.SetBeforeAct(collagen.infer.equal.Term[], collagen.infer.equal.Term[], collagen.infer.equal.Term[]);\n    public collagen.plan.SetBeforeAct(collagen.plan.Actor, collagen.plan.Act);\n    public boolean requiresExplanation();\n    public collagen.infer.tms.Proposition[] matches(collagen.infer.equal.Term, boolean);\n    public java.lang.Boolean isApplicable();\n    public java.lang.Boolean isAchieved();\n    static {};\n}\n\n\u003e Notice that not only redundant getParameterOps() goes away, but also\ngetPropertyOps() and getResultOps(), which are also _wrong_ (see\nnext comment)",
    "Created an attachment (id\u003d34129)\nSource file for SetBeforeAct\n\n",
    "Created an attachment (id\u003d34130)\nClass file with repetitive method getParameterOps\n\n",
    "Created an attachment (id\u003d34131)\nSource file containing parent of SetBeforeAct\n\n",
    "Created an attachment (id\u003d34132)\nClass file for Act.Base\n\n",
    "Ok, the attachment option doesn\u0027t show up until the next window... \n\nAnyways, I attached both source file for both the offending class and its\nparent, and the bad class file, and the class file for it\u0027s parent, so you can\ndo a full decompile to see more info.\n\nHere\u0027s the key info re the bad method entries (you can see the last one just\nleads to an infinite loop!).\n\nI am hosed.  A workaround idea would be welcome... -CR\n\n\npublic collagen.infer.equal.Term$Slot[] getResultOps();\n  Code:\n   0:   aload_0\n   1:   invokevirtual   #198; //Method\ncollagen/plan/Act$Base.getResultOps:()[Lcollagen/infer/equal/Term$Slot;\n   4:   areturn\n\npublic collagen.infer.equal.Term$Slot[] getPropertyOps();\n  Code:\n   0:   aload_0\n   1:   invokevirtual   #203; //Method\ncollagen/plan/Act_Builtin.getPropertyOps:()[Lcollagen/infer/equal/Term$Slot;\n   4:   areturn\n\npublic collagen.infer.equal.Term$Slot[] getParameterOps();\n  Code:\n   0:   aload_0\n   1:   invokevirtual   #205; //Method\ngetParameterOps:()[Lcollagen/infer/equal/Term$Slot;\n   4:   areturn\n\n}\n",
    "*** Bug 126424 has been marked as a duplicate of this bug. ***",
    "**********NB*************\n\nI am using 3.1.2 (not in drop-down list above).\n\nI am going to try falling back to 3.1.1...\n(a lot of stuff happened in the meanwhile)",
    "Dropping back to 3.1.1 didn\u0027t help.\n\nBtw, during building I get messages like:\n\n(100 Errors, 0 Warnings.  Fixed 53 + 0 )\n\nEventually there are no errors at the end.  I assume that what Eclipse is fixing is undefined types due to circularity in my class paths (between projects), which I have.  It isn\u0027t actually editing the byte codes, is it?\n\nMaybe this is a Sun compiler error... I\u0027ll look there next...\n\nHelp!!  -CR",
    "Falling back to 3.1.1 did not help.\n\nI am already using the latest JDK 5.0 Update 6.\n\nErrggggg....",
    "It would be really nice if we could get a complete test case.\nEven if the resulting project is pretty big, we should set up a way to retrieve it. Without a complete test case, it is difficult to reproduce this issue.\nThanks.",
    "Hi Olivier,  Thanks for responding so quickly.\n\nI hear you about a reproducible test case, but I am afraid it would be very difficult for me to post the whole project, in part because it is proprietary code.  \n\nI was hoping that someone who knows the insides of the compiler would have a clue from the particular symptom of generating extraneous methods.  Basically the compiler should obviously _never_ produce such broken byte code.\n\nAnother thing I wonder about is why use javac gives the correct result:  Eclipse uses the compiler code from the JDK, doesn\u0027t it?  If so, all I can figure out is that the _order_ of compilation in the Eclipse build process somehow triggers a latent Sun compiler bug; or perhaps Eclipse _uses_ the compiler in some special optimized way?\n\nBtw, I checked on the Sun web site for bugs related to this ClassFormatError, but didn\u0027t see any.\n\nAny help would be appreciated, especially from a compiler expert.\n\nThanks, -CR",
    "Ok, I see that Eclipse really does have is own compiler, distinct from the Sun compiler... So this really is a bug in the Eclipse compiler...  \n\nAny compiler experts out there who might suggest a workaround? \n\nHas anything like this been fixed in the 3.2.2 release?  (I looked through the build notes and saw lots of bugs fixed in the compiler...).\n\nThanks in advance, -CR",
    "Charles,\n\nWithout steps to reproduce, it is hard to figure what is going on. Basically, your samples to do not compile out of their context, and it would be tedious to infer anything from these fragments. The theory is that duplicates should never occur, and compiler checks before adding synthetics/bridge methods for collisions with user code. Now you may have found a bug in this area.\n\nWe haven\u0027t made any fix in this area, neither have heard of a similar problem to date.",
    "I would really encourage you to extract a test case that would provide all necessary classes. So if you could provide all the classes to compile the source file SetBeforeAct.java, this would greatly help.\nYou can strip the method body of the dependant classes if you don\u0027t want to provide the code.",
    "[Sorry this posting is a bit long, but I think it is worthwhile... -CR]\n\nCher Olivier et Philippe,\n\nFirst let me sincerely apologize for not being able to provide you with a reproducible test---I understand completely why you are reluctant to look at this bug without one; and Eclipse is after all a community effort.\n\nOn the other hand, I figured out some more information over the weekend (I spent a fair bit of it on this problem), which I think should be able to lead you to the buggy code in the compiler, so that this doesn\u0027t happen to anyone else.\n\nThe clue is that (as I mentioned in my original posting) there are circular project dependencies in my class path.  Indeed, the compiler does warn me about this, but I think producing an illegal class file is a bit of an extreme reacion on its part :-).  When I divided one of my projects into two parts to avoid the circularity, the problem disappeared!  Also, all the messages in the progress windows about \"Fixing\" errors no longer appears.\n\nComing back to the issue of duplicate methods, it seems to me that this is a fairly simple invariant to verify by code inspection.  All you need to do is to make sure that every place a method signature (synthetic or not) is added, there is an unavoidable check for duplicates.  There can\u0027t be that many places where methods are added, and if there are a lot, they should/could all go through a shared utility method which checks for duplicates.  \n\nFurthermore, given the circularity issue above, my guess is that there is some clever editing of class files going on, e.g., first a \"placeholder\" method is added, and then on the next compilation cycle of the circularity, it is supposed to be updated with the \"real\" method, but the code accidentally forgets to delete the synthetic method.  \n\nIn any case, there definitely is a (bad) bug, and I think that a careful code inspection, informed by the information provided here, is likely to find it.\n\nI will curious to hear what happens,\n\nBon chance!  -CR\n\n",
    "Merci (thanks) Charles.\nThe theory is that all such field/method creations are already protected.",
    "Also, can you reproduce this issue in latest 3.2 integration build ?",
    "Philippe,\n\n \u003e The theory is that all such field/method creations are already protected.\n\nWe agree that is the theory, but the practice appears to be different :-).  Seriously, though, my experience in similar cases is that a careful code walkthrough to verify the theory (especially when one has strong reason to believe there is a hole) often finds the hole.  It\u0027s up to you.\n\n \u003e Also, can you reproduce this issue in latest 3.2 integration build ?\n\nSorry, but I am loathe to reconfigure my projects back to their losing configuration, now that I have things working again.\n\n-CR",
    "Charles,\n\nAre you using compliance 1.3 in your compiler settings ?\nPlease check bug 137744.",
    "To Olivier:\n\nI am using compliance 5.0.\n\nBug 1377744 certainly does look related.  Perhaps it was not totally fixed in 1.3 and is showing up in a slightly different form here?",
    "Let us know if you can reproduce using a build \u003e 20060421.",
    "Bug 137744 relates to a regression introduced with perf work for sorting method bindings. The present bug was discovered prior to introduction of sorting, which is also confirmed by the fact it also occurs on 3.1.1.\n\nI am suspecting a bogus addition of a bridge method or something like this.\n\nKent - did you fix some bridge issues lately ?",
    "yes - see bug 132831",
    "Pls reopen if symptoms persist in latest."
  ],
  "commentCreationDates": [
    "2006-02-03T22:05:59+01:00",
    "2006-02-03T22:08:14+01:00",
    "2006-02-03T22:09:19+01:00",
    "2006-02-03T22:10:11+01:00",
    "2006-02-03T22:10:34+01:00",
    "2006-02-03T22:17:30+01:00",
    "2006-02-03T22:18:12+01:00",
    "2006-02-03T22:26:59+01:00",
    "2006-02-03T22:43:08+01:00",
    "2006-02-03T22:56:05+01:00",
    "2006-02-04T01:34:00+01:00",
    "2006-02-04T03:09:26+01:00",
    "2006-02-04T20:07:10+01:00",
    "2006-02-04T21:42:23+01:00",
    "2006-02-06T01:09:18+01:00",
    "2006-02-06T02:19:37+01:00",
    "2006-02-10T17:46:08+01:00",
    "2006-02-10T18:16:17+01:00",
    "2006-02-10T18:20:22+01:00",
    "2006-04-20T17:17:42+02:00",
    "2006-04-21T20:21:59+02:00",
    "2006-04-21T20:25:08+02:00",
    "2006-04-21T21:28:52+02:00",
    "2006-04-21T21:34:42+02:00",
    "2006-04-25T16:45:53+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassFormatError",
      "message": "Repetitive method name/signature in class file collagen/plan/SetBeforeAct",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass1",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "Unknown Source"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "Unknown Source"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "Unknown Source"
        },
        {
          "method": "collagen.plan.Builtin.\u003cclinit\u003e",
          "source": "Builtin.java:18"
        },
        {
          "method": "java.lang.Class.forName0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.forName",
          "source": "Unknown Source"
        },
        {
          "method": "com.merl.util.Utils.instantiate",
          "source": "Utils.java:202"
        },
        {
          "method": "collagen.plan.Library$Path.setUp",
          "source": "Library.java:315"
        },
        {
          "method": "collagen.Collagen.preInit",
          "source": "Collagen.java:237"
        },
        {
          "method": "com.merl.util.BeanComponent$Base.init",
          "source": "BeanComponent.java:1222"
        },
        {
          "method": "com.merl.util.BeanComponent$Base.start",
          "source": "BeanComponent.java:1268"
        },
        {
          "method": "com.merl.util.BeanComponent$Base.main",
          "source": "BeanComponent.java:674"
        },
        {
          "method": "com.merl.util.BeanComponentApplet.main",
          "source": "BeanComponentApplet.java:29"
        },
        {
          "method": "collagen.Collagen.main",
          "source": "Collagen.java:152"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "126423",
      "date": "2006-02-03T22:05:59+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "126423",
  "bugId": "126423",
  "date": "2006-02-03T22:05:59+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}