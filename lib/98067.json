{
  "comments": [
    "Against N20050602-0010.\n\nI used File Search to search in my workspace (which contained only the attached\nproject) for the regex\n\n\\{(.|[\\r\\n])*\\}\n\n(The intent was an approximation of matching brackets, even across multiple\nlines).  I got four results (not enough), and the following in the error log:\n\njava.lang.StackOverflowError\nat java.util.regex.Pattern$Dot.match(Pattern.java:4092)\nat java.util.regex.Pattern$Branch.match(Pattern.java:4530)\nat java.util.regex.Pattern$GroupHead.match(Pattern.java:4570)\nat java.util.regex.Pattern$Loop.match(Pattern.java:4697)\nat java.util.regex.Pattern$GroupTail.match(Pattern.java:4629)\nat java.util.regex.Pattern$Dot.match(Pattern.java:4093)\nat java.util.regex.Pattern$Branch.match(Pattern.java:4530)\nat java.util.regex.Pattern$GroupHead.match(Pattern.java:4570)\nat java.util.regex.Pattern$Loop.match(Pattern.java:4697)\nat java.util.regex.Pattern$GroupTail.match(Pattern.java:4629)\nat java.util.regex.Pattern$Dot.match(Pattern.java:4093)\nat java.util.regex.Pattern$Branch.match(Pattern.java:4530)\nat java.util.regex.Pattern$GroupHead.match(Pattern.java:4570)\nat java.util.regex.Pattern$Loop.match(Pattern.java:4697)\nat java.util.regex.Pattern$GroupTail.match(Pattern.java:4629)\nat java.util.regex.Pattern$Dot.match(Pattern.java:4093)\nat java.util.regex.Pattern$Branch.match(Pattern.java:4530)\nat java.util.regex.Pattern$GroupHead.match(Pattern.java:4570)\nat java.util.regex.Pattern$Loop.match(Pattern.java:4697)\n\nand so on and so on.",
    "I don\u0027t believe this is a bug, but an inefficient regular expression.\nIt is very similar to the problem reported here\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d5050507.",
    "Sorry to have been terse on the initial bug.  The regex is the culprit, but\nshould Eclipse expect that users will sometimes bone-headedly enter stupid\nregexes, and give them a little more feedback than \u0027An internal error occurred\nduring: \"File Search\"\u0027?",
    "It\u0027s hard to prevent or forsee the stack overflow which isn\u0027t really a user\nerror. We could catch the error, this is however very risky as it will hide\nother potential bugs.",
    "*** Bug 102699 has been marked as a duplicate of this bug. ***",
    "(In reply to comment #2)\n\u003e Sorry to have been terse on the initial bug.  The regex is the culprit, but\n\u003e should Eclipse expect that users will sometimes bone-headedly enter stupid\n\u003e regexes, and give them a little more feedback than \u0027An internal error occurred\n\u003e during: \"File Search\"\u0027?\n\nBone-headed?\n\nI think that was a \"bone-headed\" comment.",
    "My apologies for any offense--my comment 2 was meant to be self-deprecating,\nsince I myself was the one who originally came up with the regular expression\nthat led to the error.  However, the language was unnecessarily harsh.  So, here\nit is again, with no value judgements added:\n\nIf a user enters a regular expression that, upon searching, leads to a\nStackOverflowError, we should explicitly check for that condition, and display a\nmessage such as \"Stack overflow error processing your regular expression search.\n Please try optimizing your regular expression.\"  If the try/catch is\nsufficiently close to the regular expression search invocation, the risk of\ncatching some other StackOverflowError should be minimal.  And, as we\u0027ve already\nseen one duplicate bug, it seems clear that the situation and resulting user\nconfusion are real concerns.",
    "fixed \u003e 20060403\n\nNow I catch the exception and tell about the too complex search pattern"
  ],
  "commentCreationDates": [
    "2005-06-02T11:18:00+02:00",
    "2005-06-02T13:15:11+02:00",
    "2005-06-02T17:07:50+02:00",
    "2005-06-02T17:13:02+02:00",
    "2005-07-05T09:54:51+02:00",
    "2005-07-06T15:58:14+02:00",
    "2005-07-06T16:09:28+02:00",
    "2006-04-03T18:53:19+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StackOverflowError",
      "elements": [
        {
          "method": "java.util.regex.Pattern$Dot.match",
          "source": "Pattern.java:4092"
        },
        {
          "method": "java.util.regex.Pattern$Branch.match",
          "source": "Pattern.java:4530"
        },
        {
          "method": "java.util.regex.Pattern$GroupHead.match",
          "source": "Pattern.java:4570"
        },
        {
          "method": "java.util.regex.Pattern$Loop.match",
          "source": "Pattern.java:4697"
        },
        {
          "method": "java.util.regex.Pattern$GroupTail.match",
          "source": "Pattern.java:4629"
        },
        {
          "method": "java.util.regex.Pattern$Dot.match",
          "source": "Pattern.java:4093"
        },
        {
          "method": "java.util.regex.Pattern$Branch.match",
          "source": "Pattern.java:4530"
        },
        {
          "method": "java.util.regex.Pattern$GroupHead.match",
          "source": "Pattern.java:4570"
        },
        {
          "method": "java.util.regex.Pattern$Loop.match",
          "source": "Pattern.java:4697"
        },
        {
          "method": "java.util.regex.Pattern$GroupTail.match",
          "source": "Pattern.java:4629"
        },
        {
          "method": "java.util.regex.Pattern$Dot.match",
          "source": "Pattern.java:4093"
        },
        {
          "method": "java.util.regex.Pattern$Branch.match",
          "source": "Pattern.java:4530"
        },
        {
          "method": "java.util.regex.Pattern$GroupHead.match",
          "source": "Pattern.java:4570"
        },
        {
          "method": "java.util.regex.Pattern$Loop.match",
          "source": "Pattern.java:4697"
        },
        {
          "method": "java.util.regex.Pattern$GroupTail.match",
          "source": "Pattern.java:4629"
        },
        {
          "method": "java.util.regex.Pattern$Dot.match",
          "source": "Pattern.java:4093"
        },
        {
          "method": "java.util.regex.Pattern$Branch.match",
          "source": "Pattern.java:4530"
        },
        {
          "method": "java.util.regex.Pattern$GroupHead.match",
          "source": "Pattern.java:4570"
        },
        {
          "method": "java.util.regex.Pattern$Loop.match",
          "source": "Pattern.java:4697"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "98067",
      "date": "2005-06-02T11:18:00+02:00",
      "product": "Platform",
      "component": "Search",
      "severity": "normal"
    }
  ],
  "groupId": "98067",
  "bugId": "98067",
  "date": "2005-06-02T11:18:00+02:00",
  "product": "Platform",
  "component": "Search",
  "severity": "normal"
}