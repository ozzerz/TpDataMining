{
  "comments": [
    "Doing bytecode weaving of a large application - get an out of memory error regardless of the max stack size.  But if it is protected with a particular aspect, the weaving succeeds with a 512MB maximum stack size.  The aspect that enables the protection to complete prints various warning messages.",
    "The weaving fails for various combinations of other aspects and only works when the aspect below is woven:\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.ServletRequest;\n\nimport java.sql.Statement;\nimport java.sql.ResultSet;\n\nimport java.lang.Runtime;\nimport java.lang.System;\n\naspect Protect_WeaveReport {\n    declare warning:\n   \t\tcall (public String[] ServletRequest+.getParameterValues(String)):\n   \t\t\"getParameterValues called\";\n\t\n    declare warning:\n   \t\tcall (public String ServletRequest+.getParameter(String)):\n   \t\t\"getParameter called\";\n   \t\t\n    declare warning:\n\t\tcall(public void *.printStackTrace(..)):\n\t\t\"printStackTrace called\";      \t\t\n  \n\tdeclare warning:\n\t\tcall (public void *.addCookie(Cookie)):\n\t\t\"addCookie called\";\n\t   \t\n   \tdeclare warning:\n   \t\tcall (public Cookie[] *.getCookies()):\n\t\t\"getCookies called\";\n\t\n \tdeclare warning:\n\t\tcall (public ResultSet Statement.executeQuery(String)):\n\t\t\"executeQuery called\";\n\t\t\n\tdeclare warning:\n\t\tcall (public int Statement.executeUpdate(String)) || \n   \t\tcall (public int Statement.executeUpdate(String, ..)):\n   \t\t\"executeUpdate called\";\n\n    declare warning: \n       \tcall (public * Runtime.exec(String, ..)) || \n        call (public * Runtime.exec(String[], ..)):\n   \t    \"exec called\";\n   \t        \n    declare warning:\n        call (public String System.setProperty(String, String)):\n        \"setProperty called\";\n   \t        \n    declare warning:\n        call (public * System.load(String)) ||\n        call (public * System.loadLibrary(String)) ||\n        call (public * Runtime.load(String)) ||\n        call (public * Runtime.loadLibrary(String)):\n        \"load or loadLibrary called\";\n   \t    \t\n}",
    "Created an attachment (id\u003d33657)\najcore file\n\n",
    "Am running the weaving programatically - using the bareMain entry point.",
    "An interesting exception is captured in the ajcore file:\n\njava.lang.NullPointerException\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.handleInternalException(Compiler.java:389)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.ajc$privMethod$org_aspectj_ajdt_internal_compiler_CompilerAdapter$org_aspectj_org_eclipse_jdt_internal_compiler_Compiler$handleInternalException(Compiler.java:1)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:74)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:326)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:240)\n\tat org.aspectj.tools.ajc.Main.bareMain(Main.java:111)\n\tat com.unisys.security.protect.Protect.protectJAR(Protect.java:858)\n\tat com.unisys.security.protect.Protect.protectEAR(Protect.java:746)\n\tat com.unisys.security.protect.Protect.access$6(Protect.java:701)\n\tat com.unisys.security.protect.Protect$ProtectThread.run(Protect.java:187)\n\nif this were only triggered when the aspect was included - that explains why it goes OOM when the aspect isnt there.  When the exception occurs I guess we crash before we can get OOM.\n\nThe problem is that blowing up when handling the exception is causing us to fail to see the original exception that is occurring.  I half wonder if its related to the use of the bareMain entrypoint.  Are you supplying non-null parameters for all the parameters to bareMain?",
    "are you still having problems with this?",
    "memory usage was drastically reduced in 1.5.1a  - which will hopefully help this case. please reopen if you still have a problem."
  ],
  "commentCreationDates": [
    "2006-01-26T17:07:34+01:00",
    "2006-01-26T17:10:03+01:00",
    "2006-01-26T17:19:10+01:00",
    "2006-01-26T17:28:48+01:00",
    "2006-02-16T09:09:40+01:00",
    "2006-05-22T12:22:46+02:00",
    "2006-07-11T09:58:18+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.handleInternalException",
          "source": "Compiler.java:389"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.ajc$privMethod$org_aspectj_ajdt_internal_compiler_CompilerAdapter$org_aspectj_org_eclipse_jdt_internal_compiler_Compiler$handleInternalException",
          "source": "Compiler.java:1"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:74"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:811"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:230"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:156"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:112"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:60"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:326"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:240"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.bareMain",
          "source": "Main.java:111"
        },
        {
          "method": "com.unisys.security.protect.Protect.protectJAR",
          "source": "Protect.java:858"
        },
        {
          "method": "com.unisys.security.protect.Protect.protectEAR",
          "source": "Protect.java:746"
        },
        {
          "method": "com.unisys.security.protect.Protect.access$6",
          "source": "Protect.java:701"
        },
        {
          "method": "com.unisys.security.protect.Protect$ProtectThread.run",
          "source": "Protect.java:187"
        }
      ],
      "number": 0,
      "commentIndex": 4,
      "bugId": "125358",
      "date": "2006-02-16T09:09:40+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "125358",
  "bugId": "125358",
  "date": "2006-01-26T17:07:34+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}