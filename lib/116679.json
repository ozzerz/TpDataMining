{
  "comments": [
    "Some products are now shipping aspectjrt.jar from the 1.2.1 compiler.  We would\nlike the users of these products to benefit from all the latest and greatest\nenhancements in the tools and compiler when developing their code - however,\nthey will need to deploy this code on a runtime containing the 1.2.1 aspectjrt.\n We have made some enhancements in the 1.5.0 runtime that affect compatibility -\none that springs to mind is changing the signature of the code that builds join\npoint objects to save memory at runtime.  \n\nWe need to enable users to specify they want to deploy on a back level aspectj -\nsomething like a \"-ajruntimetarget 1.2.1\" option only with a better name - this\nwould generate code that ran against the 1.2.1 aspectjrt.jar.  At the same time\nI think we should perhaps (if they aren\u0027t there already) reinstate the old way\nof building join point objects so that code targetting a 1.2.1 runtime will run\nhappily if it finds a 1.5.0 runtime around.",
    "the old way of building join point objects is still present in the runtime library, so there should be no issues on that count. \n\nThis would be a good enhancement, but one that I\u0027m happy to defer until 1.5.1.",
    "I think it is important for AspectJ to offer binary backward compatibility in the same way that Java does. If we encourage users to move the latest AJDT and not support older verions of AspectJ in Eclipse we should at least allow them to target older platforms when building their code. AspectJ 1.2.1 is currently the only final verion of AspectJ available. Asking users to upgrade aspectjrt \"overnight\" and recompile/weave all dependent applications seems a little unreasonable considering that in a shared environment such as an application server these applications may not be owned by a single person.\n\nWould a \"-ajsource 1.2.1\" be more appropriate than a target flag? Certain language features may now or in the future have a dependence on the runtime too.",
    "The new methods added for the optimization that is causing problems are in:\n\norg.aspectj.runtime.reflect.Factory\n\nEvery method makeXXXSig() now has an extra variant, so:\n\nmakeMethodSig(int modifiers, String name, Class declaringType, Class[] parameterTypes, String[] parameterNames, Class[] exceptionTypes, Class returnType)\n\nmakeMethodSig(String stringRep) \n\nwere joined by\n\nmakeMethodSig(String modifiers, String methodName, String declaringType, String paramTypes, String paramNames, String exceptionTypes, String returnType)\n\nsimilarly for: makeConstructorSig, makeAdviceSig, makeFieldSig, makeInitializerSig, makeCatchClauseSig\n\n---\nThe calls to these methods are created in the LazyClassGen.initializeTjp() method.\n\n---\n\nthe new options is -Xajruntimetarget and can be set to 1.2 or 1.5\n(See org.aspectj.weaver.Constants)\n\n-Xajruntimetarget:1.2\n-Xajruntimetarget:1.5\n\nuses same options mechanism as -Xreweavable did.\n\nIt is \u0027-X\u0027 because we aren\u0027t settled on it yet.  Is it an option that also polices source features? (so, does it say you can\u0027t use pertypewithin() ?)\n\nBeing -X it can be supplied easily through AJDT or through ANT\n---\nHeres an example with aspectjrt.jar from a 1.2 AspectJ on the classpath:\n---8\u003c---\nSimple.java\npublic class Simple {\n  public static void main(String []argv) {\n    new Simple().a();\n  }\n\n  public void a() {}\n}\n\naspect X {\n   before():execution(* a(..)) {\n     System.err.println(thisJoinPoint);\n     System.err.println(thisJoinPointStaticPart);\n     System.err.println(thisEnclosingJoinPointStaticPart);\n   }\n\n   before():execution(Simple.new(..)) {\n     System.err.println(thisJoinPoint);\n     System.err.println(thisEnclosingJoinPointStaticPart);\n     System.err.println(thisJoinPointStaticPart);\n   }\n}\n---8\u003c---\n\nC:\\aspectj1.5.0-dev\u003eajc -Xajruntimetarget:1.5 Simple.java\n\nC:\\aspectj1.5.0-dev\u003ejava Simple\nException in thread \"main\" java.lang.NoSuchMethodError: org.aspectj.runtime.refl\nect.Factory.makeConstructorSig(Ljava/lang/String;Ljava/lang/String;Ljava/lang/St\nring;Ljava/lang/String;Ljava/lang/String;)Lorg/aspectj/lang/reflect/ConstructorS\nignature;\n        at Simple.\u003cclinit\u003e(Simple.java:1)\n\nC:\\aspectj1.5.0-dev\u003eajc -Xajruntimetarget:1.2 Simple.java\n\nC:\\aspectj1.5.0-dev\u003ejava Simple\nexecution(Simple())\nexecution(Simple())\nexecution(Simple())\nexecution(void Simple.a())\nexecution(void Simple.a())\nexecution(void Simple.a())\n\nC:\\aspectj1.5.0-dev\u003e\n\nbeautiful ;)",
    "Code is checked in - and one less than ideal testcase (yes, yes - needs a 1000 more)\n\nI hope that optimization is the only thing causing us problems with deploying on 1.2 - since it\u0027s the only place where I\u0027ve used the new option to configure the resulting woven code.",
    "I missed one case to do with enclosing static join point static parts.... I\u0027ve resolved it - tested it - I will tidy it up and check it in tomorrow.  An AJDT build will then follow from that.",
    "the further fixes (and more tests) are in - we\u0027ll start creating the new AJDT imminently..",
    "The -X option isn\u0027t sufficient.  Too many complex tools based upon eclipse are merely asking a project for its builder and calling \u0027build\u0027 - this doesn\u0027t allow for options to be passed through correctly.  So, you can set -Xtargetaspectjruntime:12 in your project properties but it won\u0027t have any effect.  The right solution for now seems to be to target a 1.2 runtime unless the compiler is running in 1.5 mode, since 1.5 introduces this new code.  If running in 1.5 mode, it is still possible to use the -X option to target 1.2 if you need to (if you can get the option through...)\n\nThis does mean users compiling with \u003c1.5 will not get the benefit of the optimization... ",
    "changes checked in as per last comment.",
    "done all intending to do."
  ],
  "commentCreationDates": [
    "2005-11-16T16:07:07+01:00",
    "2005-11-23T09:51:58+01:00",
    "2005-11-28T15:36:54+01:00",
    "2005-11-29T12:34:24+01:00",
    "2005-11-29T13:25:23+01:00",
    "2005-11-29T17:47:05+01:00",
    "2005-11-30T12:12:02+01:00",
    "2005-12-12T12:16:46+01:00",
    "2005-12-12T14:30:22+01:00",
    "2006-04-04T20:19:49+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoSuchMethodError",
      "message": "org.aspectj.runtime.refl ect.Factory.makeConstructorSig(Ljava/lang/String;Ljava/lang/String;Ljava/lang/St ring;Ljava/lang/String;Ljava/lang/String;)Lorg/aspectj/lang/reflect/ConstructorS ignature;",
      "elements": [
        {
          "method": "Simple.\u003cclinit\u003e",
          "source": "Simple.java:1"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "116679",
      "date": "2005-11-29T12:34:24+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "enhancement"
    }
  ],
  "groupId": "116679",
  "bugId": "116679",
  "date": "2005-11-16T16:07:07+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "enhancement"
}