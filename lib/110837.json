{
  "comments": [
    "A call to KeyAgreement.getInstance(\"DiffieHellman\") will throw a\nNoSuchAlgorithmException if run from Eclipse but not if it\u0027s run directly from\nthe command line.  (JDK 1.5.0_04 or 1.4.2_09)\n\nHere\u0027s the code:\n---\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.KeyAgreement;\n\npublic class KeyAgreementProblem\n{\n    public static void main(String[] args) throws NoSuchAlgorithmException\n    {\n        KeyAgreement ka \u003d KeyAgreement.getInstance(\"DiffieHellman\");\n        System.out.println(ka);\n    }\n}\n---\nRunning from the command line goes like this (command line then output below):\n\nC:\\...\\workspace\\sandbox\u003ejava -classpath bin KeyAgreementProblem\njavax.crypto.KeyAgreement@141d683\n\n---\n\nRunning in Eclipse with the same JDK and environment produces this exception:\n\nException in thread \"main\" java.security.NoSuchAlgorithmException: Algorithm\nDiffieHellman not available\n\tat javax.crypto.KeyAgreement.getInstance(DashoA12275)\n\tat KeyAgreementProblem.main(KeyAgreementProblem.java:8)",
    "Are you sure that your classpath contains the crypto classes?\nI copy/paste your example in 3.2M2 and it works fine.\nThis is not related to the compiler.\nMove to JDT/Debug to comment how the classpath of the launching configuration\nneeds to be configured to include the crypto classes.",
    "I\u0027m pretty sure the classpath includes the crypto classes.  I set up the\nclasspath the same way for both the command line and for Eclipse.  Within\nEclipse, I\u0027m including the JRE System Library [jre1.5.0_04] which includes\nrt.jar, jsse.jar, *jce.jar*, charsets.jar, dnsns.jar, localedata.jar,\n*sunjce_provider.jar*, and sunpkcs11.jar.  If I run the following little\nprogram, I see that DiffieHillman is an available KeyAgreement algorithm (search\noutput for \"KeyAgreement\"), but I can\u0027t use it.  \n\nimport java.util.Set;\nimport java.security.Security;\nimport java.security.Provider;\n\n\npublic class ListProviders {\n    public static void main(String args[]) {\n        Provider[] providers \u003d Security.getProviders();\n        for (int i \u003d 0; i \u003c providers.length; i++) {\n            System.out.println((i+1) + \": \" + providers[i]);\n            System.out.println(providers[i].getInfo());\n            Set\u003cProvider.Service\u003e svcs \u003d providers[i].getServices();\n            for (Provider.Service svc : svcs) System.out.print(svc);\n            System.out.println();\n        }\n    }\n}\n",
    "Also works for me... how is the classpath tab configured on your Java \napplication launch configuration? Mine is default. Adding jars to the bootpath \nexplicitly may cause trouble.",
    "Created an attachment (id\u003d27673)\nClasspath configuration to generate the failure\n\nMine is also set to default.  Configuration options to follow...",
    "Created an attachment (id\u003d27674)\nEclipse configuration details\n\nHere are the configuration details for Eclipse.\n\n[Thinking aloud: I\u0027m beginning to wonder if this might fall under bug 6606, and\nI wonder if it might be a straightfoward enough case to help with the\nresolution.]",
    "When you run the test, what does the generated command line look like? \n(available from the \"Properties...\" action when you select the process/target \nin the debug view).",
    "Created an attachment (id\u003d27675)\nScreen shot of expanded classpath\n\nMy appologies. I meant to expand the classpath fully before taking the picture\nfor attachment 27673.\tHere\u0027s the expanded classpath:\n\nBootstrap Entries\n   JRE System Library [jre 1.5.0_04]\nUser Entries\n   sandbox [default classpath]\n      sandbox  \n",
    "(In reply to comment #6)\n\u003e When you run the test, what does the generated command line look like? \n\u003e (available from the \"Properties...\" action when you select the process/target \n\u003e in the debug view).\n\n \"C:\\Program Files\\Java\\jre1.5.0_04\\bin\\javaw.exe\" \"-Xbootclasspath:C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\rt.jar;C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\jsse.jar;C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\jce.jar;C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\charsets.jar;C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\ext\\dnsns.jar;C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\ext\\localedata.jar;C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\ext\\sunjce_provider.jar;C:\\Program\nFiles\\Java\\jre1.5.0_04\\lib\\ext\\sunpkcs11.jar\" -classpath \"C:\\Documents and\nSettings\\jscarbor\\workspace\\sandbox\\bin\" -Xdebug -Xnoagent\n-Xrunjdwp:transport\u003ddt_socket,suspend\u003dy,address\u003dlocalhost:2232 KeyAgreementProblem",
    "The explicit bootpath is causing the problem... when I run my example, I get a \ncommand line like this:\n\n\" C:\\jdk1.5.0_04\\bin\\javaw.exe -classpath c:\\eclipse-dev\\runtime-\nworkspace\\JUnit\\bin;c:\\eclipse-dev\\runtime-workspace\\JUnit\\junit3.8.1\n\\junit.jar KeyAgreementProblem\"\n\nHave you modified the jars that are contained in the JRE via the JRE \npreferences page? If so, we add them to the bootpath explicitly.",
    "Created an attachment (id\u003d27693)\nEdit JRE dialog shows \"Use default system libraries\" unchecked\n\n(In reply to comment #9)\n\n\u003e Have you modified the jars that are contained in the JRE via the \n\u003e JRE preferences page? If so, we add them to the bootpath explicitly.\n\nNot knowingly.\tI did attach source to a jar file, which I see mentioned when I\nexpand the various libraries.  (It was the RT.jar source attached (incorrectly)\nto the jce.jar file.) I don\u0027t recall un-checking the \"Use default system\nlibraries\" checkbox (which you can see is un-checked).\tI installed Eclipse on\nthis machine August 23, so there\u0027s not much time over which I might have\nforgotten such a thing. \n\nChecking the box has two effects.  Most it makes the example code work in my\nregular workspace (THANKS!).  It also adds\n \n  C:\\Program Files\\Java\\jre1.5.0_04\\lib\\ext\\QTJava.zip \n\nto the list of included libraries, presumably because QuickTime installed that\nfile at some point and Eclipse picked up on it when I re-checked the box.\n\nWhat\u0027s really peculiar is that I can make other crypto calls, but not that\nparticular one.  Research into the Java side of things seems to show that the\nbehavior is by design - that only the bootclasspath discovered by the JRE is\ntrusted.  See \n\n  http://forum.java.sun.com/thread.jspa?threadID\u003d611770\u0026messageID\u003d3370738\n\nThat portion of this bug could be a duplicate of bug 38370.\n\nThe remaining question for Eclipse becomes, \"How did the \u0027Use default system\nlibraries\u0027 box get un-checked?\"  Installing a new file (as was the case with\nQTJava.zip) doesn\u0027t change the checkbox, but it gets included in the list\nautomatically.\tWhen I create a new workspace for Eclipse, the box is initially\nchecked, and I\u0027m set up to use the JDK (as opposed to JRE).  The various\nmanipulations I tried, including associating source code and adding the other\njre didn\u0027t change the checkbox. \n\nI have filed a bug against Java on the principle that the files are one and the\nsame as those that would be accessed by the JRE, so it should recognize that\nand trust the files.  I will record its disposition here when I learn it.",
    "Created an attachment (id\u003d27745)\nBug report for Sun\n\nE-mail in from Brad at Sun:\n\nHi Jim Scarborough,\n\nInteresting bug, thanks for reporting this issue.\n\nI have determined that this report is a new bug and entered the bug into our\ninternal bug tracking system under Bug Id: 6331571.\n\nThis only occurs on windows, seems to work fine on solaris-sparc.\nIf you remove the sunjce_provider.jar from the bootclass, it is then\nfound on the extension class path as normal, and is loaded up by\nthe extension loader.\n\nI\u0027ve got a couple ideas where the problems lies, I\u0027ll route it as appropriate.\n\nThanks again for submitting.\n\nRegards,\nBrad\n",
    "A call to KeyAgreement.getInstance(\"DiffieHellman\") will throw a\nNoSuchAlgorithmException if run from Eclipse (with anything other than the\ndefault bootclasspath) but not if it\u0027s run directly from the command line (with\nthe default bootclasspath).  (JDK 1.5.0_04 or 1.4.2_09)  \n\nSee these resources for further information:\n   Java Bug Id: 6331571 \n   Attachment 27745\n   http://forum.java.sun.com/thread.jspa?threadID\u003d611770\u0026messageID\u003d3370738\n\nThe issue of how the box got unchecked in the first place is not reproducable.\n\n*** This bug has been marked as a duplicate of 38370 ***",
    "Follow-up e-mail from Brad at Sun:\n\n\u003e This only occurs on windows, seems to work fine on solaris-sparc.\n\nI made a typo in my test script, it fails on every platform.\n\nOur implementation currently checks to see if it\u0027s on the bootclasspath,\nand if so, it fails.  I don\u0027t know offhand why that was added,\nbut we\u0027ll investigate further and find out why this was done.\n\nAs you mentioned, if you remove the sunjce_provider.jar from the\nbootclass, the classes are found on the extension class path as\nnormal, and is loaded up by the extension loader.\n\nThanks again for submitting.\n\nRegards,\nBrad",
    "(In reply to comment #13)\n\nThe classes loaded by the bootclassloader are handled differently from a security perspective than those loaded by other loaders (Extension Class Loader for java.ext.dirs or the System launcher/loader.  Recall the ClassLoader delegation framework.)  The JCE framework needs information in the security context in order to verify the Jars for export control purposes, and this info is not available if the bootclassloader is used.\n\nWhile technically possible, Eclipse should not be effectively extending the JDK by adding the extension directory (java.ext.dirs) to the bootclasspath.  \n\nHope this helps.\n\nBrad\n",
    "Re-opening",
    "Based on the following doc:\n\n* http://java.sun.com/j2se/1.4.2/docs/tooldocs/findingclasses.html#loader\n* http://java.sun.com/j2se/1.4.2/docs/guide/standards/\n\nIt appears that the bootpath consists of jars on the \u0027sun.boot.class.path\u0027 system property and the \u0027java.endorsed.dirs\u0027 system property (or default location), as endorsed libraries can replace classes in \"the Java 2 platform as shipped by Sun\"\n\nHowever, jars specified by the \"java.ext.dirs\" system property should not appear on the bootpath.\n\nOur \"JRE classpath container\" is a collection of jars that appear on a Java project\u0027s default buildpath for compilation purposes. For running/debugging, if the user has modified the \"JRE libraries\" we incorrectly specify the modified set of jars as an explicit bootpath. Instead, we should only specify an explicit bootpath if the user has removed a jar that was on the bootpath or in an endorsed dir.\n\nHowever, we\u0027ll need new API on IVMType to determine if a library location is a \u0027bootpath\u0027 library or not, so we can build the boopath properly. Needs more investigation, and would require PMC approval for API addition.",
    "I have released a fix to this:\n\n* The JRE\u0027s default libraries are now computed as (for buildpath):\n    - libs in endorsed dirs (can override standard libs)\n    - libs on bootpath\n    - libs in extension directories\n\n* When computing the runtime bootpath, an explicit bootpath is only specified if the libraries have been changed from the default libraries, and then we only specify libraries that are *not* in extension directories\n\nThere is one remaining issue, but things still work properly - an explicit bootpath may be specified when a non-bootpath library has been added/removed to the JREs libs. There is no API to tell if a library belongs on the bootpath. (We are able to compute the bootpath properly for standard VMs since we have endorsed, extension, bootpath info - but in the general case there is no API for this). \n",
    "Marking this problem as fixed, as we no longer specify ext dir libs on the bootpath. Opened bug 131959, to deal with remaining issue. It will require new API, and will be defered for post 3.2. However, the bug does not effect the function - apps still launch properly.",
    "Please verify, Kevin.",
    "verified",
    "*** Bug 134961 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2005-09-27T19:16:36+02:00",
    "2005-09-27T20:09:34+02:00",
    "2005-09-27T20:25:35+02:00",
    "2005-09-29T16:23:40+02:00",
    "2005-09-29T16:42:41+02:00",
    "2005-09-29T16:47:33+02:00",
    "2005-09-29T16:50:33+02:00",
    "2005-09-29T16:58:16+02:00",
    "2005-09-29T17:08:31+02:00",
    "2005-09-29T17:13:19+02:00",
    "2005-09-29T21:01:48+02:00",
    "2005-10-01T19:08:09+02:00",
    "2005-10-01T19:26:45+02:00",
    "2005-10-04T13:36:03+02:00",
    "2006-03-01T02:02:41+01:00",
    "2006-03-01T02:54:42+01:00",
    "2006-03-06T17:39:45+01:00",
    "2006-03-15T05:10:59+01:00",
    "2006-03-15T15:54:15+01:00",
    "2006-03-15T15:54:33+01:00",
    "2006-03-15T16:10:51+01:00",
    "2006-04-05T15:33:01+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.security.NoSuchAlgorithmException",
      "message": "Algorithm DiffieHellman not available",
      "elements": [
        {
          "method": "javax.crypto.KeyAgreement.getInstance",
          "source": "DashoA12275"
        },
        {
          "method": "KeyAgreementProblem.main",
          "source": "KeyAgreementProblem.java:8"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "110837",
      "date": "2005-09-27T19:16:36+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "110837",
  "bugId": "110837",
  "date": "2005-09-27T19:16:36+02:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "normal"
}