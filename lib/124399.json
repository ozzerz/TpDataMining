{
  "comments": [
    "In Eclipse 3.1.1 with AJDT 1.3 (the December 20th 2005 release) I got this message in an error dialog:\n\norg.aspectj.weaver.BCException\nat org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1216)\nat org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1201)\nat org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2048)\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:232)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:405)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class edu.ucsd.aosd.MyApplication extends java.lang.Object:\n  public void \u003cinit\u003e():\n                    ALOAD_0     // edu.ucsd.aosd.MyApplication this   (line 5)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void edu.ucsd.aosd.MyApplication.\u003cinit\u003e())\n    |               RETURN\n    constructor-execution(void edu.ucsd.aosd.MyApplication.\u003cinit\u003e())\n  end public void \u003cinit\u003e()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 8:124\n:\n    method-execution(void edu.ucsd.aosd.MyApplication.main(java.lang.String[]))\n    |               ALOAD_0     // java.lang.String[] args   (line 9)\n    |               ASTORE 4\n    |               ICONST_0\n    |               ISTORE_2\n    |               ALOAD 4\n    |               ARRAYLENGTH\n    |               ISTORE_3\n    |               GOTO L1\n    |           L0: ALOAD 4\n    |               ILOAD_2\n    |               AALOAD\n    |               ASTORE_1\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 10)\n    |               NEW java.lang.StringBuilder\n    |               DUP\n    |               LDC \"got: \"\n    |               INVOKESPECIAL java.lang.StringBuilder.\u003cinit\u003e (Ljava/lang/String;)V\n    |               ALOAD_1     // java.lang.String arg\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String))\n    | method-call(java.lang.String java.lang.StringBuilder.toString())\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.StringBuilder.toString())\n    |               ASTORE 5\n    |               ASTORE 6\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    | |             ALOAD 6\n    | |             ALOAD 5\n    | |             INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 11)\n    |               LDC \"got: %s\\n\"\n    |               ICONST_1\n    |               ANEWARRAY java.lang.Object\n    |               DUP\n    |               ICONST_0\n    |               ALOAD_1     // java.lang.String arg\n    |               AASTORE\n    | method-call(java.io.PrintStream java.io.PrintStream.printf(java.lang.String, java.lang.Object[]))\n    | |             INVOKEVIRTUAL java.io.PrintStream.printf (Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;\n    | method-call(java.io.PrintStream java.io.PrintStream.printf(java.lang.String, java.lang.Object[]))\n    |               POP\n    |               IINC 2 1   (line 9)\n    |           L1: ILOAD_2\n    |               ILOAD_3\n    |               IF_ICMPLT L0\n    |               RETURN   (line 13)\n    method-execution(void edu.ucsd.aosd.MyApplication.main(java.lang.String[]))\n  end public static void main(String[])\n\nend public class edu.ucsd.aosd.MyApplication\n\nwhen implementing on shadow method-call(void java.io.PrintStream.println(java.lang.String))\nwhen weaving type edu.ucsd.aosd.MyApplication\nwhen weaving classes \nwhen weaving \nwhen incrementally building BuildConfig[C:\\EclipseWorkspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\AspectJSemanticsTest.generated.lst] #Files\u003d2\n\nIt occured when I editing this file, in an AspectJ project with an recently renamed .aj extension:\n\npackage edu.ucsd.aosd;\n\nimport java.io.PrintStream;\n\npublic class MyApplication\n{\n    // main\n    public static void main(String[] args) {\n        for (String arg : args) {\n            System.out.println(\"got: \" + arg);\n            System.out.printf(\"got: %s\\n\", arg);\n        }\n    }\n}\n\naspect Printing {\n    pointcut printlnCalls(PrintStream ps, String out):\n        call(* PrintStream+.println(String)) \u0026\u0026 target(ps) \u0026\u0026 args(out);\n    Object around(PrintStream ps, String out):\n        printlnCalls(ps, out) \u0026\u0026 !adviceexecution() {\n        return proceed(ps, out);\n    }\n    \n    pointcut printfCalls(PrintStream ps, String fmt, Object[] objs):\n        call(* PrintStream+.printf(String, Object...#####))\n        \u0026\u0026 target(ps) \u0026\u0026 args(fmt, objs);\n}\n\nWhere \"#####\" is where my cursor was when I saved. My previously saved version didn\u0027t have the printfCalls pointcut nor the call to printf in the main. (Thus, you might want to try the println version first, save it, and then make the new additions. Though, I hope the debug information is enough.)",
    "hmmm.  I added a testcase for this to the harness we have for exercising incremental compilation - works for me :(   I created the version without the printf pointcut then added that and performed an inc-compile.  The test is commented out for now (even though it works) until someone gets more time to play around and investigate this bug.  I believe we don\u0027t have any test programs that use printf() so wouldnt be surprised if there was some kind of problem...",
    "I\u0027ve spent some time trying to recreate this problem and so far have had no success...\n\nIn the output it says that it\u0027s building two files - is it possible to attach the other file to this bug?\n\n(As a note the failing line number is 1230 in the latest codebase in HEAD).",
    "Here\u0027s the other file, which is a pure .java file:\n\npackage edu.ucsd.aosd;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ListIterator;\n\npublic class GenericsMapTest\n{\n    public interface BinaryFunction\u003cT\u003e\n    {\n        T apply(T x, T y);\n    }\n\n    public interface UnaryFunction\u003cT\u003e\n    {\n        T apply(T x);\n    }\n\n    // main\n    public static void main(String[] args) {\n        List\u003cInteger\u003e list \u003d Arrays.asList(new Integer[]{1,2,3,4,5});\n        Integer sum \u003d reduce(list, 0, new BinaryFunction\u003cInteger\u003e() {\n            public Integer apply(Integer x, Integer y) {\n                return x + y;\n            }\n        });\n        applyAll(list, new UnaryFunction\u003cInteger\u003e() {\n            public Integer apply(Integer x) {\n                return x * x;\n            }\n        });\n        System.out.printf(\"sum \u003d %d\\n\", sum);\n        for (Integer i: list) {\n            System.out.printf(\"%d \", i);\n        }\n    }\n\n    static \u003cT\u003e T reduce(List\u003cT\u003e list, T identity, BinaryFunction\u003cT\u003e fun) {\n        T result \u003d identity;\n        for (T item: list) {\n            result \u003d fun.apply(result, item);\n        }\n        return result;\n    }\n\n    static \u003cT\u003e void applyAll(List\u003cT\u003e list, UnaryFunction\u003cT\u003e fun) {\n        ListIterator\u003cT\u003e it \u003d list.listIterator();\n        while (it.hasNext()) {\n            it.set(fun.apply(it.next()));\n        }\n    }\n}\n\n####\nUnfortunately I don\u0027t recall the order in which I typed in things, made errors, resaved/recompiled, changed the other .java file to .aj, et cetera... I assume order is important for this. I\u0027ll add anything else if it happens again.",
    "I\u0027ve still not had any success reproducing this bug, although as a note the reason for the BCExcpetion is that the LazyMethodGen associated with the around advice is no longer in the list of methodGens for the aspect....how or why this happened I don\u0027t know and can\u0027t investigate further until I reproduce it.\n\nHowever, since the changes entitled \"go \u0027back to source\u0027 on incremental aspect change\" were checked in to HEAD, the testcase for this bug which Andy checked in and commented out (mentioned in comment #1) is now failing because the changes now force a full build rather than an incremental one. Therefore, I don\u0027t believe that the failing scenario described in this bug can be reproduced since any change to the aspect or class within MyApplication now results in a full build and the problem is an incremental one.",
    "*** Bug 130720 has been marked as a duplicate of this bug. ***",
    "Closing this bug as fixed as per the comment #4. The scenario described in this bug can no longer happen as any changes made to aspects now results in us going back to the source and doing a full build, whereas this bug was seen on an incremental build after changes to an aspect. This is available in the latest AJDT 1.3.1 dev build and will be available in the next AJDT 1.4 dev build."
  ],
  "commentCreationDates": [
    "2006-01-18T21:59:18+01:00",
    "2006-01-24T10:00:29+01:00",
    "2006-01-30T13:16:49+01:00",
    "2006-01-30T18:38:06+01:00",
    "2006-02-13T16:38:57+01:00",
    "2006-03-07T10:57:14+01:00",
    "2006-03-10T16:29:01+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.aspectj.weaver.BCException",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen",
          "source": "LazyClassGen.java:1216"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen",
          "source": "LazyClassGen.java:1201"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline",
          "source": "BcelShadow.java:2048"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.implementOn",
          "source": "BcelAdvice.java:232"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implementMungers",
          "source": "Shadow.java:588"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Shadow.java:405"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "BcelClassWeaver.java:2146"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:467"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:102"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1543"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1494"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1275"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1097"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:300"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:178"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:811"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:254"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:163"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "124399",
      "date": "2006-01-18T21:59:18+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "124399",
  "bugId": "124399",
  "date": "2006-01-18T21:59:18+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}