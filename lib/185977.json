{
  "comments": [
    "Build ID: I20070503-1400\n\nSteps To Reproduce:\nUpon refresh of a bundle, the following exception may occur\n2007/05/08 10:23:04.511 SEVERE An internal error occurred during: \"Registry event dispatcher\". ::class.method\u003dunknown ::\nthread\u003dWorker-2 ::loggername\u003dorg.eclipse.core.jobs\n\n        org.eclipse.core.runtime.InvalidRegistryObjectException: Invalid registry object\n        at org.eclipse.core.internal.registry.TemporaryObjectManager.getObject(TemporaryObjectManager.java:98)\n        at org.eclipse.core.internal.registry.BaseExtensionHandle.getExtension(BaseExtensionHandle.java:30)\n        at org.eclipse.core.internal.registry.BaseExtensionHandle.getUniqueIdentifier(BaseExtensionHandle.java:67)\n        at extlistener.Activator$MyListener.registryChanged(Activator.java:78)\n        at org.eclipse.core.internal.registry.ExtensionRegistry.processChangeEvent(ExtensionRegistry.java:772)\n        at org.eclipse.core.runtime.spi.RegistryStrategy.processChangeEvent(RegistryStrategy.java:246)\n        at org.eclipse.core.internal.registry.osgi.EquinoxRegistryStrategy$ExtensionEventDispatcherJob.run(EquinoxRegist\nryStrategy.java:94)\n        at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\n\nfrom osgi console\n\u003e install ExtListener plugin\n\u003e install ExtPtProvider plugin\n\u003e install ExtPtUser plugin\n\n\u003e refresh ExtPtProvider\n(repeat until happens)\n\nThe problem is in the ExtensionRegistry when plugins and the contributed extension points and extensions are removed\n\nWhen the ExtPtProvider is refreshed, Extension Deltas are created for the both the (black) and (purple).   The associatedObjects map is built to contain the Color extension point, and black Extension are added.   Once the associatedObjects map is constructed, the objects are removed from the registryObjects.   The associatedObjects map is used as the TemporaryObjectManager, which is associated with the ExtensionDelta.\n\n\u003e\u003e The extension (purple) is not added to the associatedObjects map and therefore not in the TemporaryObjectManager.\n\n\nWhen the ExtPtProvider is refreshed, the ExtPtUser is also refreshed.\n\nIf the Extension Registry removes for both of these plugins occurs prior to the RegistryChangeEvent listeners being called with the deltas, then the delta which refer to the extension (purple) will receive the InvalidRegistryObjectExtension since it is not available in the TemporaryObjectManager or in the master registry\n\n\u003e\u003e caveats: the exception may not always occur as it is timing related.   the timing can be forced by setting a breakpoint in the ExtListener registryChangeListener and holding this thread until the contributor removals occur for both ExtPtUser and ExtPtProvider.\n\n\nA possible fix is in the RegistryObjectManager.addNavigableObjects to check if the object in the associatedObjects map is an ExtensionPoint, and if so, check the orphan list.   Currently addNavigableObjects only adds the ExtensionPoint references (if available) into the associatedObjectsMap\n\n\nThe following sequence shows the failing sequence of calls\n\nRefreshPackages thread\t\t\t\t\t\t\tExtensionEventDispatcherJob\nt\u003d0\tExtensionRegistry.basicRemove (ExtPtProvider)\nt\u003d1\tExtensionRegistry.basicRemove (ExtPtUser)\nt\u003d2\t\t\t\t\t\t\t\t\t\tregistryChanged\n\nIf the registryChanged occurs prior to the basicRemove (ExtPtUser), then the InvalidRegistryObjectException will most likely not occur.",
    "Created an attachment (id\u003d66317)\ntest plugin (1 of 3)\n\n",
    "Created an attachment (id\u003d66318)\ntest plugin (2 of 3)\n\n",
    "Created an attachment (id\u003d66319)\ntest plugin (3 of 3) - ExtPtProvider\n\n",
    "(Missing text from the description .. .should contain the following description of the plugins)\n\nExtListener contains a listener class to listener to registry changes\nExtPtProvider defines an extension point (Color), and an extension to that extension point (black)\nExtPtUser defines an extension (purple) to the extension point (Color)\n",
    "Hi Brian,\nThank you for the scenario to reproduce - it is perfect.\n\nThis is a bug; thanks to your scenario I can duplicate it.\n\nAt first I though this will be easy fix but the more time I spend on it, the more it became clear that there are quite a few issues in this area.\n\nFirst, the information on the \"purple\" extension has to be stored in the getAssociatedObjects() or earlier. Earlier because at that stage it has already being unlinked from the extension point and navigating from one to another might lead to inconsistent results.\n\nWhen I noticed another problem - we need to add configuration elements to all navigable elements we include in the deltas. Currently it is done for some extensions and not done for some extensions.\n\nOnce that was hacked in I started to get exceptions in the part where we are processing bundle addition notifications. After some research it turned out that in your scenario we never remove \"purple\" extension from the orphan list and notification(s) generated for the bundle addition contain information on the \"old\" \"purple\" extension that has been uninstalled.\n\nAdd to this a discovery that ExtensionRegistryDynamicTest that I tought was testing dynamic behavior have been disabled since at least 2004 :-). (And when I tried to use them, the listener infrastructure in those tests did not work.)\n\nIn summary:\n\n\u003d\u003d\u003e \"Real\" fix\nI strongly believe at this point that we need to revisit the registry notification mechanism. At present notification are processed asynchronously and we try to provide with each notification a picture of the registry the way it was when the event happened.\n\nThis approach does not work very well. Providing picture of the past is rather expensive and error-prone. To make a proper picture we need to include all objects navigable from the modified extension/extension point along with configuration elements (that might need to be loaded from a disk cache). Linking/unlinking of extensions from extension points and presence of orphan mechanism further complicates this.\n\nWe need to find out how people use notification mechanism and re-work it to make it both simple and reliable. The key here is to find what notification mechanisms are actually used for and, probably, provide to kinds of them: one would be synchronous notifications and another would be asynchronous notifications with limited information available in them.\n\n\u003d\u003d\u003e Short-term solution\n\nThe Eclipse 3.3 Release Candidate 1 is this week and, of course, we can\u0027t put a re-worked notification mechanism in it. Moreover, having in mind potential impact, I don\u0027t believe we should put it into 3.3 at this point.\n\nTwo questions here for you:\n\n- When do you need this fixed?\n\n- What information do you really need from the notifications? \n\nIf this is critical for 3.3, we *might* be able to put couple band-aid fixes for the specific scenario identified in this bug. Notice that this is *might*, no promises yet as the changes are not looking very straightforward so far.\n\nIf it is not critical for 3.3, I\u0027d prefer to come up with a proper plan on fixing registry notification mechanism, most likely resulting in a \"version 2.0\" of it.\n",
    "It would also be relevant to revisit the and better understand the set of usecase that are supposed to be supported.  It may well be that the current support is perfectly adequate for those and that we have discovered some additional interesting scenarios.  Of course, it is also possible that the whole thing is bogus...  Oleg\u0027s focus on simple and safe things that can be done for 3.3 is entirely correct.",
    "The bug was generated as a result of attempting to apply feature changes immediately through the update OperationsManager.applyChangesNow().  That method performs and uninstall and reinstall of a large number of framework bundles, which generate a significant number of the InvalidRegistryObjectExceptions.   Obviously, we are unable to make use of that call because of the number of problems that it generates.   \n\nThe information needed on the notifications will really depend on each and every one of the listeners that exist in the platform .. some of which are provided by product extensions to the platform, and others which are present in the eclipse platform itself.\n\nIn order to be as dynamic as the underlying osgi framework would allow us to be, then we need to get the notification stuff right.\n\nWe are currently shipping based on the 3.2 stream, so a fix in 3.3 is nice but we would like it back in 3.2 as well.\nThe product deliverables are actually based on 3.2, so any fixes would be requested to be backported into the 3.2 as well.\n",
    "Created an attachment (id\u003d68125)\nPartial patch for 3.3\n\nIn order to minimize changes required late in the release cycle, the patch addresses only the original problem identified in the defect.\n\nThe patch does not address other problems in registry notifications we found while working on this bug (removed config element not being reachable from notifications; linking between extensions and extension points removed from the registry). I hope we\u0027ll return to registry notifications after 3.3 release to fix those problems.\n",
    "Note we need at least two reviewers at this point...",
    "For now, setting target for 3.3 RC2 for the small patch.\n\nThe patch is simple, but not a zero risk. From my view point it is 50/50 if this patch should go into 3.3RC2 or not.\n",
    "The patch looks good and is safe. However do we want to change this now?",
    "need to be really sure about fixes in this area...",
    "The patch is fine but I agree with the comments that we have to be careful in this area. If the patch is really only a partial patch and Oleg feels 50/50 about releasing it, then I would recommend waiting until we have a real solution.\n",
    "It feels too late for this kind of change in 3.3.  We all agree that fixes around dynamic behaviour are needed but it would be better to do them in a considered and more complete way.  We\u0027ll put this top of the list for 3.3.1.",
    "Created an attachment (id\u003d71371)\nUpdated patch\n\nUpdated patch to include configuration elemetns of extensions being modified.\n\nKnow issues:\n- Linking between removed extensions and extension points is inconsistent (for instance, IExtensionPoint.getExtensions() might provide only subset of extensions if extension point has been removed)\n- Does not change the structure of registry deltas (it might be hard to figure out from the current notifications what exactly has been modified)\n\nI would prefer to release the patch initially into 3.4 CVS stream [once it becomes available] and let it \"polish\" for a bit before backporting the patch into 3.3.x / 3.2.x.\n",
    "Applied patch to CVS Head (Eclipse 3.4). The bug is kept open to back-port the patch into 3.3.1 after it gets some use in the 3.4 stream.\n",
    "I also created bug 193550 for the \"ver 2.0\" of the registry notification mechanism. The intention is that this bug will be tracking minimal changes to fix immediate problem; those minimal patches could then be back ported into previous version of Eclipse as needed.\n",
    "Patch applied to the 3.3 maintenance stream.\n"
  ],
  "commentCreationDates": [
    "2007-05-08T18:22:32+02:00",
    "2007-05-08T18:23:38+02:00",
    "2007-05-08T18:23:59+02:00",
    "2007-05-08T18:24:29+02:00",
    "2007-05-08T18:28:17+02:00",
    "2007-05-16T22:10:48+02:00",
    "2007-05-17T03:15:19+02:00",
    "2007-05-17T22:44:48+02:00",
    "2007-05-22T16:33:14+02:00",
    "2007-05-22T16:39:10+02:00",
    "2007-05-22T21:09:31+02:00",
    "2007-05-22T21:19:31+02:00",
    "2007-05-22T21:21:29+02:00",
    "2007-05-22T21:50:17+02:00",
    "2007-05-24T20:10:36+02:00",
    "2007-06-14T23:02:15+02:00",
    "2007-06-20T16:11:15+02:00",
    "2007-06-20T17:48:42+02:00",
    "2007-08-02T17:11:28+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.runtime.InvalidRegistryObjectException",
      "message": "Invalid registry object",
      "elements": [
        {
          "method": "org.eclipse.core.internal.registry.TemporaryObjectManager.getObject",
          "source": "TemporaryObjectManager.java:98"
        },
        {
          "method": "org.eclipse.core.internal.registry.BaseExtensionHandle.getExtension",
          "source": "BaseExtensionHandle.java:30"
        },
        {
          "method": "org.eclipse.core.internal.registry.BaseExtensionHandle.getUniqueIdentifier",
          "source": "BaseExtensionHandle.java:67"
        },
        {
          "method": "extlistener.Activator$MyListener.registryChanged",
          "source": "Activator.java:78"
        },
        {
          "method": "org.eclipse.core.internal.registry.ExtensionRegistry.processChangeEvent",
          "source": "ExtensionRegistry.java:772"
        },
        {
          "method": "org.eclipse.core.runtime.spi.RegistryStrategy.processChangeEvent",
          "source": "RegistryStrategy.java:246"
        },
        {
          "method": "org.eclipse.core.internal.registry.osgi.EquinoxRegistryStrategy$ExtensionEventDispatcherJob.run",
          "source": "EquinoxRegist ryStrategy.java:94"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "185977",
      "date": "2007-05-08T18:22:32+02:00",
      "product": "Equinox",
      "component": "Bundles",
      "severity": "major"
    }
  ],
  "groupId": "185977",
  "bugId": "185977",
  "date": "2007-05-08T18:22:32+02:00",
  "product": "Equinox",
  "component": "Bundles",
  "severity": "major"
}