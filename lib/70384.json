{
  "comments": [
    "We have a situation where we need to decompile .class files related to our\nproject. We are currently doing this using the decompiler provided with the BCEL\nlibrary.\n\nWhat we have found is that .class files related to anonymous inner classes which\nhave been generated by the compiler provided with Eclipse 3.0M8 or later cause\nthe BCEL decompiler to exit with a java.lang.ArrayIndexOutOfBoundsException.\nClass files generated by the Sun javac compiler or by the compiler included with\nEclipse 3.0M7 can be decompiled without any issue.\n\nWe have observed this issue occurring on both the Windows 2000 and Solaris 2.8\nplatforms.\n\nWe are using the BCEL 5.1 (bcel-5.1.jar from http://jakarta.apache.org/bcel/)\nlibrary. We do not have Cheetah installed.\n\nThe following code is an example of a class which does not decompile gracefully\nunder the Eclipse 3.0 release build:\n\n\n----------------------------------------------------------------------------\nimport javax.swing.JDialog;\n\npublic abstract class DialogOkayCancel extends JDialog {\n\n    public DialogOkayCancel() {\n        super();\n        this.setDefaultCloseOperation(\n                 javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);\n        this.addWindowListener(new java.awt.event.WindowAdapter() {\n\n            public void windowClosing(java.awt.event.WindowEvent e) {\n                cancelClicked();\n            }\n        });\n    }\n\n    protected void cancelClicked() {\n        System.out.println(\"The cancel button has been clicked.\");\n    }\n}\n----------------------------------------------------------------------------\n\n\nWe have a small test program that we use to decompile the .class files. For the\npurposes of this test, I would copy the DialogOkayCancel$1.class file to my D:\\\nroot directory and run the following test program out of Eclipse using Run -\u003e\nJava Application:\n\n\n----------------------------------------------------------------------------\nimport org.apache.bcel.classfile.ClassParser;\nimport org.apache.bcel.classfile.JavaClass;\nimport org.apache.bcel.util.BCELifier;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.FileInputStream;\n\npublic class Test {\n    public static void main(String[] args) throws Exception {\n    \tInputStream target\u003dnew FileInputStream(\"d:\\\\DialogOkayCancel$1.class\");\n        ClassParser cpTarget \u003d new ClassParser(target, null);\n        JavaClass jcTarget \u003d cpTarget.parse();\n\n        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();\n        BCELifier bcel \u003d new BCELifier(jcTarget, bos);\n        bcel.start();\n        bos.close();\n        System.out.println(bos.toString());\n    }\n}\n----------------------------------------------------------------------------\n\n\nWhen run on a .class file generated by the 3.0M8 or later compiler, the program\nexits with the following error message:\n\n\n----------------------------------------------------------------------------\njava.lang.ArrayIndexOutOfBoundsException: 12\n\tat org.apache.bcel.util.BCELifier.printFlags(BCELifier.java:239)\n\tat org.apache.bcel.util.BCELifier.printFlags(BCELifier.java:226)\n\tat org.apache.bcel.util.BCELifier.visitField(BCELifier.java:185)\n\tat org.apache.bcel.classfile.Field.accept(Field.java:107)\n\tat org.apache.bcel.util.BCELifier.visitJavaClass(BCELifier.java:136)\n\tat org.apache.bcel.util.BCELifier.start(BCELifier.java:89)\n\tat Test.main(Test.java:18)\nException in thread \"main\" \n----------------------------------------------------------------------------\n\n\nThe same program run on the .class file generated by Eclipse 3.0M7 for the same\nsample code will result in the decompiled source code being displayed properly.\n\nWe\u0027re not sure if this is an issue with the Eclipse compiler per se, but we\u0027re\ncurious to know what changed between 3.0M7 and 3.0M8 to cause the BCEL\ndecompiler to have problems.",
    "I will investigate.",
    "I cannot reproduce it if cheetah is not installed. If I compile with cheetah,\nusing the -1.5 compliance, it fails with the stack trace you have. I will\ninvestigate changes between 1.5 compliance mode and 1.4 compliance mode.\nI think that the difference is that using 1.5 compliance mode the synthetic is\nnow part of the field modifiers and not an attribute anymore. So this could\nexplain why  BCEL cannot disassemble it anymore. So if you stay with compliance\n1.4 or 1.3, it should work.",
    "If I patch BCEL code to add synthetic as part of the field flag, then I get this:\nimport org.apache.bcel.generic.*;\nimport org.apache.bcel.classfile.*;\nimport org.apache.bcel.*;\nimport java.io.*;\n\npublic class DialogOkayCancel$1Creator implements Constants {\n  private InstructionFactory _factory;\n  private ConstantPoolGen    _cp;\n  private ClassGen           _cg;\n\n  public DialogOkayCancel$1Creator() {\n    _cg \u003d new ClassGen(\"DialogOkayCancel$1\", \"java.awt.event.WindowAdapter\",\n\"DialogOkayCancel.java\", ACC_FINAL | ACC_SUPER, new String[] {  });\n\n    _cp \u003d _cg.getConstantPool();\n    _factory \u003d new InstructionFactory(_cg, _cp);\n  }\n\n  public void create(OutputStream out) throws IOException {\n    createFields();\n    createMethod_0();\n    createMethod_1();\n    _cg.getJavaClass().dump(out);\n  }\n\n  private void createFields() {\n    FieldGen field;\n\n    field \u003d new FieldGen(ACC_FINAL | ACC_SYNTHETIC, new\nObjectType(\"DialogOkayCancel\"), \"this$0\", _cp);\n    _cg.addField(field.getField());\n  }\n\n  private void createMethod_0() {\n    InstructionList il \u003d new InstructionList();\n    MethodGen method \u003d new MethodGen(0, Type.VOID, new Type[] { new\nObjectType(\"DialogOkayCancel\") }, new String[] { \"arg0\" }, \"\u003cinit\u003e\",\n\"DialogOkayCancel$1\", il, _cp);\n\n    InstructionHandle ih_0 \u003d il.append(_factory.createLoad(Type.OBJECT, 0));\n    il.append(_factory.createLoad(Type.OBJECT, 1));\n    il.append(_factory.createFieldAccess(\"DialogOkayCancel$1\", \"this$0\", new\nObjectType(\"DialogOkayCancel\"), Constants.PUTFIELD));\n    InstructionHandle ih_5 \u003d il.append(_factory.createLoad(Type.OBJECT, 0));\n    il.append(_factory.createInvoke(\"java.awt.event.WindowAdapter\", \"\u003cinit\u003e\",\nType.VOID, Type.NO_ARGS, Constants.INVOKESPECIAL));\n    InstructionHandle ih_9 \u003d il.append(_factory.createReturn(Type.VOID));\n    method.setMaxStack();\n    method.setMaxLocals();\n    _cg.addMethod(method.getMethod());\n    il.dispose();\n  }\n\n  private void createMethod_1() {\n    InstructionList il \u003d new InstructionList();\n    MethodGen method \u003d new MethodGen(ACC_PUBLIC, Type.VOID, new Type[] { new\nObjectType(\"java.awt.event.WindowEvent\") }, new String[] { \"arg0\" },\n\"windowClosing\", \"DialogOkayCancel$1\", il, _cp);\n\n    InstructionHandle ih_0 \u003d il.append(_factory.createLoad(Type.OBJECT, 0));\n    il.append(_factory.createFieldAccess(\"DialogOkayCancel$1\", \"this$0\", new\nObjectType(\"DialogOkayCancel\"), Constants.GETFIELD));\n    il.append(_factory.createInvoke(\"DialogOkayCancel\", \"cancelClicked\",\nType.VOID, Type.NO_ARGS, Constants.INVOKEVIRTUAL));\n    InstructionHandle ih_7 \u003d il.append(_factory.createReturn(Type.VOID));\n    method.setMaxStack();\n    method.setMaxLocals();\n    _cg.addMethod(method.getMethod());\n    il.dispose();\n  }\n\n  public static void main(String[] args) throws Exception {\n    DialogOkayCancel$1Creator creator \u003d new DialogOkayCancel$1Creator();\n    creator.create(new FileOutputStream(\"DialogOkayCancel$1.class\"));\n  }\n}\n\nSo this was the issue you got.\nClosing as WORKSFORME."
  ],
  "commentCreationDates": [
    "2004-07-19T23:29:08+02:00",
    "2004-07-20T02:53:50+02:00",
    "2004-07-20T21:48:37+02:00",
    "2004-07-20T22:05:53+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "12",
      "elements": [
        {
          "method": "org.apache.bcel.util.BCELifier.printFlags",
          "source": "BCELifier.java:239"
        },
        {
          "method": "org.apache.bcel.util.BCELifier.printFlags",
          "source": "BCELifier.java:226"
        },
        {
          "method": "org.apache.bcel.util.BCELifier.visitField",
          "source": "BCELifier.java:185"
        },
        {
          "method": "org.apache.bcel.classfile.Field.accept",
          "source": "Field.java:107"
        },
        {
          "method": "org.apache.bcel.util.BCELifier.visitJavaClass",
          "source": "BCELifier.java:136"
        },
        {
          "method": "org.apache.bcel.util.BCELifier.start",
          "source": "BCELifier.java:89"
        },
        {
          "method": "Test.main",
          "source": "Test.java:18"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "70384",
      "date": "2004-07-19T23:29:08+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "minor"
    }
  ],
  "groupId": "70384",
  "bugId": "70384",
  "date": "2004-07-19T23:29:08+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "minor"
}