{
  "comments": [
    "When I self host and a build is requuired I frequently get the following error:\n\nException in thread \"Java indexing\" java.lang.OutOfMemoryError: Java heap space\n\nSTEPS\n1) Load platform-ui and platform-ui-tests module from HEAD\n2) Self host\n3) In the self hosted workspace select Import-Existing Plug-ins\n4) Select source \n5) Select ide and workbench\n6) Hit finish\n7) The wizard will finish and a build will kick off. At this point the build\nwill fail.\n\nNote that I am not running with the -XmX option when this happens. I am trying now with -XmX1024M and have not seen it again",
    "Did you change the -Xmx value in your eclipse.ini file or use the default one?\n",
    "By default the memory is 64M, so no surprise this would fail. -XmX1024M seems a bit too much. Do you really need that much memory to complete the build ?",
    "(In reply to comment #2)\n\u003e By default the memory is 64M, so no surprise this would fail. -XmX1024M seems a\n\u003e bit too much. Do you really need that much memory to complete the build ?\n\u003e \nOlivier, since bug 166223 was fixed, the launched configuration should use the same -Xmx value than the eclipse default one. That\u0027s why I asked Tod whether he changed this value or not. If not, the value is 256M and we should not fail with OOME while indexing.\n\nNote that following comment 0, I didn\u0027t get the exception. So, either Tod modified the eclipse default value or I missed something while executing the scenario.\n",
    "In comment 0 I said \n\n\"Note that I am not running with the -XmX option when this happens. I am trying\nnow with -XmX1024M and have not seen it again\"\n\nAnd I have not seen it with a large -XmX value. But the 256M default was chosen as it should be suffecient for something as small as help hosting the SDK (my SDK has a heap in the 40M range normally).",
    "(In reply to comment #4)\n\u003e In comment 0 I said \n\u003e \n\u003e \"Note that I am not running with the -XmX option when this happens. I am trying\n\u003e now with -XmX1024M and have not seen it again\"\n\u003e \nI saw this line, but for me that means that you didn\u0027t set any -Xmx option on your command line while starting an eclipse session. However, you can also change the Java Heap Size of your Eclipse session by changing the value in the eclipse.ini file. As I cannot reproduce the exception, I was asking the question to be 100% sure that your Java Heap Size was the default one (e.g. 256M)\n\n\u003e And I have not seen it with a large -XmX value. But the 256M default was chosen\n\u003e as it should be suffecient for something as small as help hosting the SDK (my\n\u003e SDK has a heap in the 40M range normally).\n\u003e \nIt definitely should be enough and as I said, I cannot get the exception when I follow your scenario. So, please first double-check your eclipse.ini file to see if the default is really 256M and second be more precise on the steps of your scenario:\n - what are the exact list of projects you have loaded in your workspace\n   (platform-ui and platform-ui-tests are not projects in the repository)?\n - what are the exact list of plugins you import in your self-hosted wksp:\n   \"ide and workbench\" mean only org.eclipse.ui.ide and org.eclipse.ui.workbench   \n   or other ones?\n",
    "I do this without any changes to what is downloaded. \n\nHere is what is in the default eclipse.ini that I get from the download\n\n-showsplash\norg.eclipse.platform\n--launcher.XXMaxPermSize\n256m\n-vmargs\n-Xms40m\n-Xmx256m\n\n\n\n\nWith a fresh 20071107-1300 install and the steps below I get\n\nException in thread \"Java indexing\" java.lang.OutOfMemoryError: Java heap space\n\tat org.eclipse.jdt.internal.compiler.util.HashtableOfObject.\u003cinit\u003e(HashtableOfObject.java:39)\n\tat org.eclipse.jdt.internal.compiler.util.HashtableOfObject.rehash(HashtableOfObject.java:139)\n\tat org.eclipse.jdt.internal.compiler.util.HashtableOfObject.put(HashtableOfObject.java:112)\n\tat org.eclipse.jdt.internal.core.index.DiskIndex.copyQueryResults(DiskIndex.java:349)\n\tat org.eclipse.jdt.internal.core.index.DiskIndex.mergeWith(DiskIndex.java:522)\n\tat org.eclipse.jdt.internal.core.index.Index.save(Index.java:181)\n\tat org.eclipse.jdt.internal.core.search.indexing.IndexManager.saveIndex(IndexManager.java:583)\n\tat org.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex.execute(AddJarFileToIndex.java:205)\n\tat org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:395)\n\tat java.lang.Thread.run(Thread.java:619)\n\n\nthis pretty much happens every time I self host now so it is easy to reproduce.",
    "OK, I got it now, after having discovered what \"modules\" means ;-)\n",
    "OK, this is finally a duplicate of bug 166223. I didn\u0027t realize at that time, but user still needs to set -Xmx value in the VM arguments of the launch configuration. Bug 166223 fix was only for newly created launch config and only if the corresponding preference is set: see bug 166223 comment 18 for more details...\n\nSo, the conclusion is that you need to set the -Xmx VM argument in your launch config. I tried with -Xmx128M and never got the OOME again :-)\n\n\n*** This bug has been marked as a duplicate of bug 166223 ***",
    "Moving to PDE/UI"
  ],
  "commentCreationDates": [
    "2007-11-07T17:52:13+01:00",
    "2007-11-07T18:02:52+01:00",
    "2007-11-07T18:03:41+01:00",
    "2007-11-07T18:14:54+01:00",
    "2007-11-07T19:02:57+01:00",
    "2007-11-08T09:09:08+01:00",
    "2007-11-08T15:26:21+01:00",
    "2007-11-08T19:12:56+01:00",
    "2007-11-09T10:08:39+01:00",
    "2007-12-11T12:51:51+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.OutOfMemoryError",
      "message": "Java heap space",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.util.HashtableOfObject.\u003cinit\u003e",
          "source": "HashtableOfObject.java:39"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.util.HashtableOfObject.rehash",
          "source": "HashtableOfObject.java:139"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.util.HashtableOfObject.put",
          "source": "HashtableOfObject.java:112"
        },
        {
          "method": "org.eclipse.jdt.internal.core.index.DiskIndex.copyQueryResults",
          "source": "DiskIndex.java:349"
        },
        {
          "method": "org.eclipse.jdt.internal.core.index.DiskIndex.mergeWith",
          "source": "DiskIndex.java:522"
        },
        {
          "method": "org.eclipse.jdt.internal.core.index.Index.save",
          "source": "Index.java:181"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.IndexManager.saveIndex",
          "source": "IndexManager.java:583"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex.execute",
          "source": "AddJarFileToIndex.java:205"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.processing.JobManager.run",
          "source": "JobManager.java:395"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:619"
        }
      ],
      "number": 0,
      "commentIndex": 6,
      "bugId": "209065",
      "duplicateId": "166223",
      "date": "2007-11-08T15:26:21+01:00",
      "product": "PDE",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "166223",
  "bugId": "209065",
  "duplicateId": "166223",
  "date": "2007-11-07T17:52:13+01:00",
  "product": "PDE",
  "component": "UI",
  "severity": "normal"
}