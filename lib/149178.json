{
  "comments": [
    "Using EMF 2.2.0.v200606051102. \n\nWe have a scenario where we would like EMF to generate a \"Type2 extends Type1\" relationship between two interfaces Type1 and Type2. And for the implementation, \"Type2Impl extends Type1Impl, implements ... Type2\" (and thereby Type1) for the implementations. We customize the available methods no Type1, and we want to implement these methods only one time (in Type1Impl), so we need Type2Impl to extend Type1Impl so we don\u0027t have to copy the methods.\n\nWe are using an XML Schema to generate our model. For various reasons, we do not want to model the Type2 extends Type1 relationship in XML Schema extends, but it happens to be the case that everything in Type1 has the same name, type, and cardinality in Type2, so an inheritance relationship makes sense for the API, but we do not want to allow this in the Schema.\n\nAfter working talking through this issue with Ed, it was suggested to use an attribute, \"ecore:implements\" on the xs:complexType element for Type2, that would specify Type1 for its value (\"complexType name\u003d\"Type2\" ecore:implements\u003d\"Type1\"). Joyfully, I took this new knowledge and went on to happily solve my problem with one of EMFs many, useful, (semi-magical) incantations. I found however, that we were on the bleeding edge. \n\nI hit a NullPointerException (copied below) and working with Ed, we were able to determine that using ecore:implements, without XSD extends is an untested scenario. The ecore:implements type is correctly resolved (to Type1), and added as a mixin type to the list of Supertypes for Type2: \n\n//XSDEcoreBuilder.computeEClass() \n...\n    // there is no baseTypeDefinition, so baseClass remains null\n    EClass baseClass \u003d null;  \n    XSDTypeDefinition baseTypeDefinition \u003d xsdComplexTypeDefinition.getBaseTypeDefinition();\n    if (!baseTypeDefinition.isCircular())\n    {\n      EClassifier baseType \u003d getEClassifier(baseTypeDefinition);\n      if (baseType instanceof EClass \u0026\u0026 baseType !\u003d EcorePackage.eINSTANCE.getEObject())\n      {\n        // this line is not reached in this scenario\n        eClass.getESuperTypes().add(baseClass \u003d (EClass)baseType);\n      }\n    }\n    // finds my ecore:implements attribute\n    for (Iterator i \u003d getEcoreTypeQNamesAttribute(xsdComplexTypeDefinition, \"implements\").iterator(); i.hasNext(); )\n    {\n      // resolves correctly to the Type1 type\n      XSDTypeDefinition mixin \u003d (XSDTypeDefinition)i.next();\n      if (!XSDConstants.isURType(mixin))\n      {\n        EClassifier mixinType \u003d getEClassifier(mixin);\n        if (mixinType instanceof EClass \u0026\u0026 mixinType !\u003d EcorePackage.eINSTANCE.getEObject())\n        {\n          eClass.getESuperTypes().add(mixinType); // this line is all money yo\n        }\n      }\n    }\n...\n\nLater, the code assumes that since there is a restriction, which requires that the super types are non-empty:\n\n    boolean isRestriction \u003d \n      !eClass.getESuperTypes().isEmpty() \u0026\u0026 \n        xsdComplexTypeDefinition.getDerivationMethod() \u003d\u003d XSDDerivationMethod.RESTRICTION_LITERAL;\n\nthat baseClass is also non-null:\n\n           if (isRestriction)\n            {\n              isRedundant \u003d \n                extendedMetaData.getElement\n                  (baseClass, xsdElementDeclaration.getTargetNamespace(), xsdElementDeclaration.getName()) !\u003d null;\n\n\nHowever, since there was no baseTypeDefinition (as we don\u0027t model the extends directly in the XSD), baseClass is null, and this leads to a NPE a few stack frames away: \n\n// BasicExtendedMetaData.getAllElements():\n  public List /*EStructuralFeature*/ getAllElements(EClass eClass)\n  {\n    // eClass would have been baseClass, had there been a baseClass\n    List superTypes \u003d eClass.getESuperTypes();\n    List result \u003d null;\n\nAck! No happy EMF solution for me today. But we\u0027re so close!\n\nI understand this cannot be addressed until the next post-Callisto maintenance release of EMF. \n\n\nThe NPE from the Reload action on the *.genmodel file:\n\n!ENTRY org.eclipse.emf.importer 2 0 2006-06-29 11:01:03.249\n!MESSAGE \n!STACK 0\njava.lang.NullPointerException\n\tat org.eclipse.emf.ecore.util.BasicExtendedMetaData.getAllElements(BasicExtendedMetaData.java:845)\n\tat org.eclipse.emf.ecore.util.BasicExtendedMetaData.getLocalElement(BasicExtendedMetaData.java:745)\n\tat org.eclipse.emf.ecore.util.BasicExtendedMetaData.getElement(BasicExtendedMetaData.java:782)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClass(XSDEcoreBuilder.java:913)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClassifier(XSDEcoreBuilder.java:250)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.getEClassifier(XSDEcoreBuilder.java:202)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.createFeature(XSDEcoreBuilder.java:1709)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClass(XSDEcoreBuilder.java:989)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClassifier(XSDEcoreBuilder.java:250)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.getEClassifier(XSDEcoreBuilder.java:202)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.createFeature(XSDEcoreBuilder.java:1709)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.getEStructuralFeature(XSDEcoreBuilder.java:2433)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.generate(XSDEcoreBuilder.java:2523)\n\tat org.eclipse.xsd.ecore.XSDEcoreBuilder.generate(XSDEcoreBuilder.java:2484)\n\tat org.eclipse.xsd.ecore.importer.XSDImporter.doComputeEPackages(XSDImporter.java:123)\n\tat org.eclipse.emf.importer.ModelImporter.computeEPackages(ModelImporter.java:519)\n\tat org.eclipse.emf.importer.ui.contribution.base.ModelImporterDetailPage.refreshModel(ModelImporterDetailPage.java:391)\n\tat org.eclipse.emf.importer.ui.contribution.base.ModelImporterDetailPage$3.execute(ModelImporterDetailPage.java:337)\n\tat org.eclipse.ui.actions.WorkspaceModifyOperation$1.run(WorkspaceModifyOperation.java:101)",
    "The fix to test for isRestriction before processing ecore:implements in committed to CVS.",
    "Fixed in M200607131143."
  ],
  "commentCreationDates": [
    "2006-06-29T17:47:15+02:00",
    "2006-07-05T13:27:18+02:00",
    "2006-07-13T18:54:13+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.emf.ecore.util.BasicExtendedMetaData.getAllElements",
          "source": "BasicExtendedMetaData.java:845"
        },
        {
          "method": "org.eclipse.emf.ecore.util.BasicExtendedMetaData.getLocalElement",
          "source": "BasicExtendedMetaData.java:745"
        },
        {
          "method": "org.eclipse.emf.ecore.util.BasicExtendedMetaData.getElement",
          "source": "BasicExtendedMetaData.java:782"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClass",
          "source": "XSDEcoreBuilder.java:913"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClassifier",
          "source": "XSDEcoreBuilder.java:250"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.getEClassifier",
          "source": "XSDEcoreBuilder.java:202"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.createFeature",
          "source": "XSDEcoreBuilder.java:1709"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClass",
          "source": "XSDEcoreBuilder.java:989"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.computeEClassifier",
          "source": "XSDEcoreBuilder.java:250"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.getEClassifier",
          "source": "XSDEcoreBuilder.java:202"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.createFeature",
          "source": "XSDEcoreBuilder.java:1709"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.getEStructuralFeature",
          "source": "XSDEcoreBuilder.java:2433"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.generate",
          "source": "XSDEcoreBuilder.java:2523"
        },
        {
          "method": "org.eclipse.xsd.ecore.XSDEcoreBuilder.generate",
          "source": "XSDEcoreBuilder.java:2484"
        },
        {
          "method": "org.eclipse.xsd.ecore.importer.XSDImporter.doComputeEPackages",
          "source": "XSDImporter.java:123"
        },
        {
          "method": "org.eclipse.emf.importer.ModelImporter.computeEPackages",
          "source": "ModelImporter.java:519"
        },
        {
          "method": "org.eclipse.emf.importer.ui.contribution.base.ModelImporterDetailPage.refreshModel",
          "source": "ModelImporterDetailPage.java:391"
        },
        {
          "method": "org.eclipse.emf.importer.ui.contribution.base.ModelImporterDetailPage$3.execute",
          "source": "ModelImporterDetailPage.java:337"
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation$1.run",
          "source": "WorkspaceModifyOperation.java:101"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "149178",
      "date": "2006-06-29T17:47:15+02:00",
      "product": "EMF",
      "component": "XML/XMI",
      "severity": "normal"
    }
  ],
  "groupId": "149178",
  "bugId": "149178",
  "date": "2006-06-29T17:47:15+02:00",
  "product": "EMF",
  "component": "XML/XMI",
  "severity": "normal"
}