{
  "comments": [
    "I get this stack trace when peforming a References or Open CallHierachy in a\naspectj project. Performing a clean-build clears up the problem. It only (so\nfar) has occured in an aspectj project.\n\nIt does not matter what file is has focus when the search is performed. \n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n    at java.lang.String.substring(Unknown Source)\n    at\norg.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension(Util.java:840)\n    at\norg.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.\u003cinit\u003e(JavaSearchNameEnvironment.java:62)\n    at\norg.eclipse.jdt.internal.core.search.matching.MatchLocator.initialize(MatchLocator.java:853)\n    at\norg.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector.collect(SuperTypeNamesCollector.java:154)\n    at\norg.eclipse.jdt.internal.core.search.matching.MethodLocator.initializePolymorphicSearch(MethodLocator.java:48)\n    at\norg.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1013)\n    at\norg.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:94)\n    at\norg.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:208)\n    at\norg.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:421)\n    at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:532)\n    at\norg.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:135)\n    at\norg.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:93)\n    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:67)",
    "Same here when doing a \"Java Search\" (I was searching for a method name in the \ncurrent working set):\n\nEclipse Platform\nVersion: 3.1.0\nBuild id: I20050627-1435\n\nEclipse AspectJ Development Tools\nVersion: 1.2.1\nBuild id: 20050707105537\nAspectJ version: 1.5.0M2\n\n!ENTRY org.eclipse.core.runtime 4 2 2005-07-08 15:03:40.190\n!MESSAGE An internal error occurred during: \"Java Search\".\n!STACK 0\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.substring(String.java(Compiled Code))\n\tat \norg.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension\n(Util.java:839)\n\tat \norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName\n(PossibleMatch.java:101)\n\tat org.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e\n(PossibleMatch.java:41)\n\tat \norg.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches\n(MatchLocator.java:1097)\n\tat \norg.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches\n(JavaSearchParticipant.java:94)\n\tat org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches\n(BasicSearchEngine.java:208)\n\tat org.eclipse.jdt.internal.core.search.BasicSearchEngine.search\n(BasicSearchEngine.java:424)\n\tat org.eclipse.jdt.core.search.SearchEngine.search\n(SearchEngine.java:532)\n\tat org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run\n(JavaSearchQuery.java:135)\n\tat \norg.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run\n(InternalSearchUI.java:93)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)\n\n\nCheers,\nMichael\n",
    "I have seen the same problem with Eclise 3.1 and AJDT 1.2.1. If you restart \nEclipse the problem seems to go away until you next build an AspectJ project. \nSometimes I don\u0027t get an exception but Search fails to find things!",
    "I have also seen this happen once or twice and I believe it should be possible \nto fix, however I have not been able to reproduce it.  Has anyone else been \nable to create a test case which I would be able to use?",
    "*** Bug 89326 has been marked as a duplicate of this bug. ***",
    "*** Bug 92759 has been marked as a duplicate of this bug. ***",
    "*** Bug 91395 has been marked as a duplicate of this bug. ***",
    "This seems to cause the same exception (or one very similar) and is reproducable\nevery time (I originally thought it was related to bug 98261):\n\n- create a java project that contains one class C\n- Install the TJP example\n- Open GetInfo in the editor\n- Delete the TJP project\n- Rename the class C by right clicking on C and do Refactor \u003e Rename\n\nThis causes the StringOutOfBoundsException:\n\nCaused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1\nat java.lang.String.substring(String.java:1768)\nat\norg.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension(Util.java:839)\nat\norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName(PossibleMatch.java:101)\nat\norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e(PossibleMatch.java:41)\nat\norg.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1097)\nat\norg.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:94)\nat\norg.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:208)\nat\norg.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:424)\nat org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:532)\nat\norg.eclipse.jdt.internal.corext.refactoring.RefactoringSearchEngine.findAffectedCompilationUnits(RefactoringSearchEngine.java:72)\nat\norg.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.checkConflictingTypes(RenameTypeProcessor.java:593)\nat\norg.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.analyzeAffectedCompilationUnits(RenameTypeProcessor.java:584)\nat\norg.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.checkFinalConditions(RenameTypeProcessor.java:330)\nat\norg.eclipse.jdt.internal.corext.refactoring.rename.RenameCompilationUnitProcessor.checkFinalConditions(RenameCompilationUnitProcessor.java:258)\nat\norg.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFinalConditions(ProcessorBasedRefactoring.java:169)\nat\norg.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:84)\nat\norg.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:114)\nat\norg.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:189)\nat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1719)\nat\norg.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:86)\nat\norg.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:113)\n\n",
    "*** Bug 106164 has been marked as a duplicate of this bug. ***",
    "I fixed this by adding .aj as a java-like file extension in the start method \nof AspectJPlugin.  Unfortunately I wasn\u0027t able to add it through the extension \npoints mechanism because JDT has not yet completed this support (see JDT bug \n71460).  I have added the extension commented out to the AJDT Core plugin.xml \nfile, and added an XXX comment to the method I wrote instead.",
    "It has turned out that registering .aj as a java extension causes too many other\nproblems, including bugs 107005, 107604, 107634, and 107636, so it looks like\nwe\u0027ll have to undo that. The change causes JDT to create CompilationUnits for\n.aj files, which means our support for creating AJCompilationUnits doesn\u0027t work\nfully. Undoing the change will of course mean this nasty String index out of\nrange problem will come back, which we\u0027ll have to re-investigate. Pursuing a JDT\nfix might be a better option.\n",
    "*** Bug 92482 has been marked as a duplicate of this bug. ***",
    "The earlier change has now been backed out, so this problem is unfortunately\nback with us. The proper fix is to JDT, as in bug 107735. The fix has been\napplied in the Eclipse 3.2 line, and it will hopefully be backported to 3.1.1.",
    "The JDT fix has now made it into the maintenance line, so will be included in\nEclipse 3.1.1.\n\nUntil then, if you\u0027re *really* hampered by this, you could patch your eclipse\ninstallation by replacing your JDT Core jar file (under eclipse/plugins) with\nthis patched version:\n\nhttp://download.eclipse.org/technology/ajdt/bug98547/org.eclipse.jdt.core_3.1.0.jar\n"
  ],
  "commentCreationDates": [
    "2005-06-06T18:51:41+02:00",
    "2005-07-08T15:10:52+02:00",
    "2005-07-29T10:12:09+02:00",
    "2005-08-02T10:45:31+02:00",
    "2005-08-03T11:57:19+02:00",
    "2005-08-05T11:58:37+02:00",
    "2005-08-05T12:00:09+02:00",
    "2005-08-05T13:30:46+02:00",
    "2005-08-05T17:09:01+02:00",
    "2005-08-08T17:42:40+02:00",
    "2005-08-23T12:47:23+02:00",
    "2005-08-24T11:24:36+02:00",
    "2005-08-26T12:14:32+02:00",
    "2005-09-02T17:04:10+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: -1",
      "elements": [
        {
          "method": "java.lang.String.substring",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension",
          "source": "Util.java:840"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.\u003cinit\u003e",
          "source": "JavaSearchNameEnvironment.java:62"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.initialize",
          "source": "MatchLocator.java:853"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector.collect",
          "source": "SuperTypeNamesCollector.java:154"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MethodLocator.initializePolymorphicSearch",
          "source": "MethodLocator.java:48"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1013"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:94"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches",
          "source": "BasicSearchEngine.java:208"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.search",
          "source": "BasicSearchEngine.java:421"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:532"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run",
          "source": "JavaSearchQuery.java:135"
        },
        {
          "method": "org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run",
          "source": "InternalSearchUI.java:93"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:67"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "98547",
      "date": "2005-06-06T18:51:41+02:00",
      "product": "AJDT",
      "component": "UI",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: -1",
      "elements": [
        {
          "method": "java.lang.String.substring",
          "source": "String.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension",
          "source": "Util.java:839"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName",
          "source": "PossibleMatch.java:101"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e",
          "source": "PossibleMatch.java:41"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1097"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:94"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches",
          "source": "BasicSearchEngine.java:208"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.search",
          "source": "BasicSearchEngine.java:424"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:532"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run",
          "source": "JavaSearchQuery.java:135"
        },
        {
          "method": "org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run",
          "source": "InternalSearchUI.java:93"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "98547",
      "date": "2005-07-08T15:10:52+02:00",
      "product": "AJDT",
      "component": "UI",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: -1",
      "elements": [
        {
          "method": "java.lang.String.substring",
          "source": "String.java:1768"
        },
        {
          "method": "org.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension",
          "source": "Util.java:839"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName",
          "source": "PossibleMatch.java:101"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e",
          "source": "PossibleMatch.java:41"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1097"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:94"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches",
          "source": "BasicSearchEngine.java:208"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.search",
          "source": "BasicSearchEngine.java:424"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:532"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.RefactoringSearchEngine.findAffectedCompilationUnits",
          "source": "RefactoringSearchEngine.java:72"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.checkConflictingTypes",
          "source": "RenameTypeProcessor.java:593"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.analyzeAffectedCompilationUnits",
          "source": "RenameTypeProcessor.java:584"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.checkFinalConditions",
          "source": "RenameTypeProcessor.java:330"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameCompilationUnitProcessor.checkFinalConditions",
          "source": "RenameCompilationUnitProcessor.java:258"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFinalConditions",
          "source": "ProcessorBasedRefactoring.java:169"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run",
          "source": "CheckConditionsOperation.java:84"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CreateChangeOperation.run",
          "source": "CreateChangeOperation.java:114"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.PerformChangeOperation.run",
          "source": "PerformChangeOperation.java:189"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1719"
        },
        {
          "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
          "source": "WorkbenchRunnableAdapter.java:86"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:113"
        }
      ],
      "number": 2,
      "commentIndex": 7,
      "bugId": "98547",
      "date": "2005-08-05T13:30:46+02:00",
      "product": "AJDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "98547",
  "bugId": "98547",
  "date": "2005-06-06T18:51:41+02:00",
  "product": "AJDT",
  "component": "UI",
  "severity": "normal"
}