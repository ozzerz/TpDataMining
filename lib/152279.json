{
  "comments": [
    "The following stack reports 71 matches, which is too many.  I wonder if we need to require a more strict match on the first stack frame, e.g. ignore the sourceline (since line numbers change often), but require the fully qualified type name and method name to match.\n\n-- Error Log --\nDate: Sun Jul 30 12:07:01 PDT 2006\nMessage: Could not create editor via factory: org.eclipse.mylar.internal.bugzilla.ui.tasklist.BugzillaReportEditorFactory@149544d\n\nSeverity: Error\nPlugin ID: org.eclipse.mylar.core\nStack Trace:\njava.lang.NullPointerException\n\tat org.eclipse.mylar.internal.bugzilla.ui.editor.ExistingBugEditor.addAttachContextButton(ExistingBugEditor.java:269)\n\tat org.eclipse.mylar.internal.bugzilla.ui.editor.ExistingBugEditor.addRadioButtons(ExistingBugEditor.java:174)\n\tat org.eclipse.mylar.internal.tasks.ui.editors.AbstractRepositoryTaskEditor.createActionsLayout(AbstractRepositoryTaskEditor.java:1205)\n\tat org.eclipse.mylar.internal.tasks.ui.editors.AbstractRepositoryTaskEditor.createFormContent(AbstractRepositoryTaskEditor.java:472)",
    "This issue is probably best addressed  by improving the stack trace parsing to be independant of the formatting. If we match stack trace lines against a regular expression which allows for arbitrary spacing and newlines, it should fix this problem.",
    "Created an attachment (id\u003d47033)\nScreen shot\n\nMik, it looks like the formatting of the stack trace is getting messed up from a copy/paste. This causes the parsing to stop at just the first line of the stack trace which is what gets searched for. This could be a problem when people copy a stack trace from a web browser for example. \n\n\nThe screen shot shows the search with the formatting fixed and one search result.",
    "BTW, jrockit vm produces different stack traces...",
    "(In reply to comment #3)\n\u003e BTW, jrockit vm produces different stack traces...\n\u003e \n\nYeah, I just realized that gcj does as well. I guess we\u0027ll have to find a common subset of attributes to improve the stack trace parsing. For now, only Sun style stack traces will parse corectly.",
    "Created an attachment (id\u003d47381)\nRegex match stacktrace\n\nImproves stack trace matching with regular expressions. Stack trace matching is now independant of line formatting (from copy/paste, etc..), spacing, and is compatible with multiple jvms style stack traces.\n\nI added a few new test cases to test the stack trace parsing as well.",
    "Patch applied and verified with bugs222 bug 41.  Good tests. Does this resolve the bug?\n\nYou should create a new report for JRockit stack traces if this doesn\u0027t address those, and we\u0027ll prioritize according to demand.",
    "This completes the bug. I googled stack traces from various JVMs (including jrockit). It should work with everyone I saw including:\n\nsun\nibm\nbea (jrockit)\ngcj/gij\njamvm\nsablevm\nkaffe\nikvm\ncacao\njikes",
    "Did you add a test case for each format?  A good way to do that is to have multiple tests run one helper method with different stack trace strings so that it is easy to understand and to update.  That would be fantastic because it would insulate us from changes.",
    "I didn\u0027t add separate cases for each of them because most of them are very similar, the pattern matching is based on a subset of the similarities. Some of them just have different information in the brackets at the end of the line or use \"/\" instead of \".\" in the namespaces.\n\nI can add a few more test cases to be sure all of the features from each type are covered.",
    "That would be great, and it totally makes sense only to cover a subset.  Please name the tests according to the vendor name to make it obvious where to go to update when something changes.",
    "Created an attachment (id\u003d47546)\nAdds tests to cover all known stack trace formats\n\nEach test lists the JVMs which share that type of stack trace formatting and includes a small comment indicating what makes that stack trace format different from others.",
    "Created an attachment (id\u003d47547)\nmylar/context/zip\n\n",
    "Patch applied, good tests."
  ],
  "commentCreationDates": [
    "2006-07-30T21:16:40+02:00",
    "2006-07-30T21:46:49+02:00",
    "2006-07-30T21:46:55+02:00",
    "2006-08-01T00:33:35+02:00",
    "2006-08-01T01:14:10+02:00",
    "2006-08-04T05:33:25+02:00",
    "2006-08-04T06:09:31+02:00",
    "2006-08-04T06:32:18+02:00",
    "2006-08-04T06:42:47+02:00",
    "2006-08-04T06:51:55+02:00",
    "2006-08-04T06:54:18+02:00",
    "2006-08-08T20:09:12+02:00",
    "2006-08-08T20:09:14+02:00",
    "2006-08-19T01:54:37+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.mylar.internal.bugzilla.ui.editor.ExistingBugEditor.addAttachContextButton",
          "source": "ExistingBugEditor.java:269"
        },
        {
          "method": "org.eclipse.mylar.internal.bugzilla.ui.editor.ExistingBugEditor.addRadioButtons",
          "source": "ExistingBugEditor.java:174"
        },
        {
          "method": "org.eclipse.mylar.internal.tasks.ui.editors.AbstractRepositoryTaskEditor.createActionsLayout",
          "source": "AbstractRepositoryTaskEditor.java:1205"
        },
        {
          "method": "org.eclipse.mylar.internal.tasks.ui.editors.AbstractRepositoryTaskEditor.createFormContent",
          "source": "AbstractRepositoryTaskEditor.java:472"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "152279",
      "date": "2006-07-30T21:16:40+02:00",
      "product": "Mylyn",
      "component": "Bugzilla",
      "severity": "normal"
    }
  ],
  "groupId": "152279",
  "bugId": "152279",
  "date": "2006-07-30T21:16:40+02:00",
  "product": "Mylyn",
  "component": "Bugzilla",
  "severity": "normal"
}