{
  "comments": [
    "java.lang.NullPointerException\n\tat org.aspectj.weaver.MemberImpl.getModifiers(MemberImpl.java:526)\n\tat org.aspectj.weaver.MemberImpl.getMethodSignatureString(MemberImpl.java:824)\n\tat org.aspectj.weaver.MemberImpl.getSignatureString(MemberImpl.java:753)\n\tat org.aspectj.weaver.bcel.LazyClassGen.initializeTjp(LazyClassGen.java:1039)\n\tat org.aspectj.weaver.bcel.LazyClassGen.initializeAllTjps(LazyClassGen.java:1016)\n\tat org.aspectj.weaver.bcel.LazyClassGen.addAjcInitializers(LazyClassGen.java:964)\n\tat org.aspectj.weaver.bcel.LazyClassGen.writeBack(LazyClassGen.java:502)\n\tat org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:652)\n\tat org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1337)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1309)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212)\n\tat org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass(WeavingURLClassLoader.java:125)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.defineClass(ExtensibleURLClassLoader.java:80)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.findClass(ExtensibleURLClassLoader.java:46)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\nException in thread \"main\" \n\npublic aspect JoinPointTraceAspect {\n\t\n\tprivate int _callDepth \u003d -1;\n\t\n\tpointcut tracePoints() : !within(JoinPointTraceAspect);\n\t\n\tbefore() : tracePoints() {\n\t\t_callDepth++; print(\"Before\", thisJoinPoint);\n\t}\n\t\n\tafter() : tracePoints() {\n\t\tprint(\"After\", thisJoinPoint);\n\t\t_callDepth--;\n\t}\n\t\n\tprivate void print(String prefix, Object message) {\n\t\tfor(int i \u003d 0, spaces \u003d _callDepth * 2; i \u003c spaces; i++) {\n\t\t\tSystem.out.print(\" \");\n\t\t}\n\t\t\n\t\tSystem.out.println(prefix + \": \" + message);\n\t}\n}\n\naspect EdtRuleChecker {\n    private boolean isStressChecking \u003d true;\n    \n    public pointcut anySwingMethods(JComponent c):\n         target(c) \u0026\u0026 call(* *(..));\n\n    public pointcut threadSafeMethods():         \n         call(* repaint(..)) || \n         call(* revalidate()) ||\n         call(* invalidate()) ||\n         call(* getListeners(..)) ||\n         call(* add*Listener(..)) ||\n         call(* remove*Listener(..));\n\n    //calls of any JComponent method, including subclasses\n    before(JComponent c): anySwingMethods(c) \u0026\u0026 \n                          !threadSafeMethods() \u0026\u0026\n                          !within(EdtRuleChecker) {\n     if(!SwingUtilities.isEventDispatchThread() \u0026\u0026\n         (isStressChecking || c.isShowing())) \n     {\n             System.err.println(thisJoinPoint.getSourceLocation());\n             System.err.println(thisJoinPoint.getSignature());\n             System.err.println();\n      }\n    }\n\n    //calls of any JComponent constructor, including subclasses\n    before(): call(JComponent+.new(..)) {\n      if (isStressChecking \u0026\u0026 !SwingUtilities.isEventDispatchThread()) {\n          System.err.println(thisJoinPoint.getSourceLocation());\n          System.err.println(thisJoinPoint.getSignature() +\n                                \" *constructor*\");\n          System.err.println();\n      }\n    }\n}\n\nRunning with SwingSet2.",
    "Passing over to compiler",
    "I\u0027ve used your two aspects and am weaving them into SwingSet2.jar but have unfortunately been unable to reproduce your problem. Could you provide more details about your setup? Which versions of AJDT and SwingSet2 are you using?\n\nThanks, Helen",
    "Through code inspection and a simple testcase (which doesn\u0027t recreate the problem, just allows me to work out the steps taken) it looks like the NPE is caused because we\u0027re trying to resolve a Member whose declaring type doesn\u0027t have (or we believe doesn\u0027t have) a resolved type with the same name or signature.\n\n",
    "I\u0027ve managed to recreate this NPE if the SwingSet2.jar which I have on my inpath is from a 1.5 sdk and the project which contains the provided aspects is being built with a 1.3 sdk. I therefore believe this bug is caused by a mis-match in versions and am closing this bug as \"invalid\". Please reopen if you\u0027re still seeing the NPE and do not have a mis-match of versions.",
    "Helen,\n\nI\u0027m sorry I didn\u0027t provide more details and you had to do so much investigation.  Thanks for looking into this.  Are you sure throwing an NPE is the best that can be done?  If the null is from probable tool misuse, wouldn\u0027t it be better to check for null and throw a more descriptive exception instead?\n\nThe bug report almost certainly comes from pilot error on my part.  When confronted with the stack trace, that wasn\u0027t at all obvious to me.\n\nThanks,\nCurt",
    "Yes, I see your point :-) We do have an XLint option \"Unresolvable Member\" which we could use in this case (since the problem is that we\u0027re looking at a member and are unable to resolve it). If this was implemented then in your case you would have got a warning message of the form \"cannot resolve this member: \u003cmember name\u003e\" rather than an NPE. Would this have been helpful to you? (note that this xlint option is set to warning by default)",
    "\"cannot resolve this member:\u003cmember name\u003e\" would be better than an NPE.  To me, that still means that I need to know more about AspectJ than I\u0027m likely to in order to understand the message.  I\u0027m a new user, so I need more hand holding than most.\n\nI really like this Ant message (see below) that not only tells me what the problem is, but what might be causing it and what might fix it.  It is much too verbose for an exception message, but such a message could be logged.  The message itself could contain the core info and suggest consulting the log for further details.  While there is still room for improvement, this criticism is much too harsh:\nhttp://cafe.elharo.com/java/errormsg/\n\nI think the goals should be:\n1) the developer should be able to fix the problem from the message and stack trace\n2) failing that, someone on the AspectJ team should be able to understand the problem from the message and stack trace\n\nThanks,\nCurt\n\nAnt message in question:\nBUILD FAILED\n/blah.../build.xml:51:\nCould not create task or type of type: junit.\n\nAnt could not find the task or a class this task relies upon.\n\nThis is common and has a number of causes; the usual\nsolutions are to read the manual pages then download and\ninstall needed JAR files, or fix the build file:\n\n- You have misspelt \u0027junit\u0027.\nFix: check your spelling.\n\n- The task needs an external JAR file to execute\nand this is not found at the right place in the classpath.\nFix: check the documentation for dependencies.\nFix: declare the task.\n\n- The task is an Ant optional task and the JAR file and/or libraries\nimplementing the functionality were not found at the time you\nyourself built your installation of Ant from the Ant sources.\nFix: Look in the ANT_HOME/lib for the \u0027ant-\u0027 JAR corresponding to the\ntask and make sure it contains more than merely a META-INF/MANIFEST.MF.\nIf all it contains is the manifest, then rebuild Ant with the needed\nlibraries present in ${ant.home}/lib/optional/ , or alternatively,\ndownload a pre-built release version from apache.org\n\n- The build file was written for a later version of Ant\nFix: upgrade to at least the latest release version of Ant\n\n- The task is not an Ant core or optional task\nand needs to be declared using \u003ctaskdef\u003e.\n\n- You are attempting to use a task defined using\n\u003cpresetdef\u003e or \u003cmacrodef\u003e but have spelt wrong or not\ndefined it at the point of use\n\nRemember that for JAR files to be visible to Ant tasks implemented\nin ANT_HOME/lib, the files must be in the same directory or on the\nclasspath\n\nPlease neither file bug reports on this problem, nor email the\nAnt mailing lists, until all of these causes have been explored,\nas this is not an Ant bug. ",
    "Reopening this bug as we shouldn\u0027t NPE. At the very least the \"unresolved member\" warning should be thrown.",
    "Looking into this more closely, the same NPE occurs under the following conditions:\n\n1. Type T1 is available when type T2 is compiled into a jar file. Type T2 has a reference to T1. When compiling/weaving the contents of a project which has the jar file on it\u0027s inpath but doesn\u0027t have access to T1 we get the NPE\n\n2. Type T1 contains a member m when type T2 is compiled. Type T2 calls this member. When compiling/weaving the contents of a project which has the jar file on it\u0027s inpath and a version of T1 which doesn\u0027t contain m we get the NPE.\n\nIn both these cases the NPE only happens when an aspect advises an aspect which advises the use of the type contained in the jar file. \n\nThere should be two different solutions to these situations. In the first case we should report a cantFindType whereas in the second we should report an unresolvableMember.",
    "Created an attachment (id\u003d51417)\nzip file containing proposed fix and testcases\n\nThe attached zip file contains the following:\n\n1. pr149908-weaver.txt: Apply to the weaver project. This patch contains the fix proposed in comment #9\n\n2. pr149908-tests.txt: Apply to the tests project. This patch contains test programs for the two scenarios described in comment #9\n\n3. simple.jar: Place in the tests\\bugs153\\pr149908 directory. This is used in the test for scenario 1 in comment #9.\n\n4. stringBuilder.jar: Place in the tests\\bugs153\\pr149908 directory. This is used in the test for scenario 2 in comment #9.",
    "patches committed.  slightly nervous about adding 2 more booleans to every member in the system.",
    "fix is available in latest aj dev build, therefore closing as fixed.\n\niplog"
  ],
  "commentCreationDates": [
    "2006-07-06T23:24:00+02:00",
    "2006-07-17T17:16:10+02:00",
    "2006-07-25T17:43:24+02:00",
    "2006-08-15T15:47:09+02:00",
    "2006-08-15T16:32:11+02:00",
    "2006-08-15T17:07:03+02:00",
    "2006-08-16T09:59:14+02:00",
    "2006-08-17T16:08:04+02:00",
    "2006-09-27T09:59:56+02:00",
    "2006-10-04T18:12:25+02:00",
    "2006-10-04T18:30:34+02:00",
    "2006-10-23T13:52:44+02:00",
    "2006-10-26T10:12:04+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.MemberImpl.getModifiers",
          "source": "MemberImpl.java:526"
        },
        {
          "method": "org.aspectj.weaver.MemberImpl.getMethodSignatureString",
          "source": "MemberImpl.java:824"
        },
        {
          "method": "org.aspectj.weaver.MemberImpl.getSignatureString",
          "source": "MemberImpl.java:753"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.initializeTjp",
          "source": "LazyClassGen.java:1039"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.initializeAllTjps",
          "source": "LazyClassGen.java:1016"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.addAjcInitializers",
          "source": "LazyClassGen.java:964"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.writeBack",
          "source": "LazyClassGen.java:502"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable",
          "source": "LazyClassGen.java:652"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor",
          "source": "BcelWeaver.java:1337"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1309"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1127"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes",
          "source": "WeavingAdaptor.java:284"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:212"
        },
        {
          "method": "org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass",
          "source": "WeavingURLClassLoader.java:125"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.defineClass",
          "source": "ExtensibleURLClassLoader.java:80"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.findClass",
          "source": "ExtensibleURLClassLoader.java:46"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:251"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:319"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "149908",
      "date": "2006-07-06T23:24:00+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "149908",
  "bugId": "149908",
  "date": "2006-07-06T23:24:00+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}