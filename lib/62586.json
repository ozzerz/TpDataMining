{
  "comments": [
    "in i0517\n\nI was running on an empty workspace.  Created a java project and a single java \nfile (Main with a main()). Opened and closed the file several times and noticed \nthe following stack trace which occured at some point.  (sorry nothing more \nspecific)\n\njava.lang.NullPointerException\n        at org.eclipse.core.internal.preferences.EclipsePreferences.internalGet(\nEclipsePreferences.java:479)\n        at org.eclipse.core.internal.preferences.EclipsePreferences.get(EclipseP\nreferences.java:349)\n        at org.eclipse.core.internal.preferences.PreferenceForwarder.contains(Pr\neferenceForwarder.java:181)\n        at org.eclipse.ui.plugin.AbstractUIPlugin$CompatibilityPreferenceStore.c\nontains(AbstractUIPlugin.java:277)\n        at org.eclipse.ui.texteditor.ChainedPreferenceStore.getVisibleStore(Chai\nnedPreferenceStore.java:525)\n        at org.eclipse.ui.texteditor.ChainedPreferenceStore.getBoolean(ChainedPr\neferenceStore.java:166)\n        at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.g\netHoverInfo(AbstractAnnotationHover.java:83)\n        at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverIn\nfo(BestMatchHover.java:102)\n        at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.\ngetHoverInfo(JavaEditorTextHoverProxy.java:69)\n        at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverMa\nnager.java:161)",
    "*** Bug 62584 has been marked as a duplicate of this bug. ***",
    "There seems to be an inconsistency between the documentation and \nimplementation of EclipsePreferences.internalGet(String key).\nThe documentation states Returns the existing value at the given key, or null \nif no such value exists.\nHowever, the code has \n\t\t// throw NPE if key is null\n\t\tif (key \u003d\u003d null)\n\t\t\tthrow new NullPointerException();\nwhich is causing the problem.",
    "We fixed this in text land (see bug 62612). According to the Javadoc the change\nin Platform Core is valid i.e. it does not spec that a null key is allowed.\nGiven the  fact that other clients might rely on the previous implementation you\nmight reconsider the change tough.\n",
    "The spec for the org.osgi.service.prefs.Preferences interface (which\nEclipsePreferences implements) specs that a NPE is thrown if the key is null so\nI will leave that part of the implementation as is.\n\nI have changed the PreferenceForwarder.contains code to fail gracefully in the\ncase where null is passed in as a key.",
    "DJ, clients might look at IPreferenceStore.getBoolean (at least I did) where the\nnull case isn\u0027t specified that clearly. I suggest to enhance the Javadoc for\nthis as well.",
    "Nick we should make it clear that null is not acceptable here in our spec.\n\nThe convention appears to be to spec this in the parameter rather than the \nbody but I want to check with you first.",
    "Note: technically the current Javadoc is OK since our API rules say if null is\nnot explicitly mentioned then it is not supported.",
    "Adding Jeem to CC for API comments.\n\nA summary:\n\n- Preferences.contains(String) does not specify what happens when the key is\nnull. The old implementation failed gracefully (returned false) whereas the new\nimplementation throws an NPE. I have changed the new code to return false in\nthis case so we don\u0027t break clients who were relying on the undocumented behaviour.\n\n- Should the spec for Preferences.contains(String) be changed to explicitly says\n\"Returns \u003ccode\u003efalse\u003c/code\u003e if the given key is \u003ccode\u003enull\u003c/code\u003e.\"?\n\n- All of the get* methods don\u0027t say what happens if the key is null. This has\ncaused some confusion. Should the specs be ammended to say: \"The given key must\nnot be \u003ccode\u003enull\u003c/code\u003e.\"? As Dani mentions, according to our spec rules it is\nok to not add it but it makes things clearer for the client if it is mentioned\nexplicitly.",
    "If the old behavior of Preferences.contains(String) was to return false, it \nwould be best to change spec to say so explicitly. (Observe that the cause of \nthis situation is the failure of the old implementation to properly check \nincoming arguments and complain when null is passed.)\n\nWhen there\u0027s confusion about whether null is allowed or not, and it is not \nallowed, the spec can come out and state that it is not allowed.\n\n\n",
    "Ok, thanks.\n\nI will update the spec for Preferences#contains and Preferences#get* accordingly.\n\nTod/Nick: consider updating the jface.IPreferenceStore interface to remove\nconfusion in the future."
  ],
  "commentCreationDates": [
    "2004-05-18T05:39:19+02:00",
    "2004-05-18T06:10:39+02:00",
    "2004-05-18T06:12:11+02:00",
    "2004-05-18T12:32:49+02:00",
    "2004-05-18T14:45:24+02:00",
    "2004-05-18T14:48:13+02:00",
    "2004-05-18T15:09:22+02:00",
    "2004-05-18T15:21:50+02:00",
    "2004-05-18T16:57:53+02:00",
    "2004-05-18T17:10:54+02:00",
    "2004-05-18T17:18:18+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.core.internal.preferences.EclipsePreferences.internalGet",
          "source": " EclipsePreferences.java:479"
        },
        {
          "method": "org.eclipse.core.internal.preferences.EclipsePreferences.get",
          "source": "EclipseP references.java:349"
        },
        {
          "method": "org.eclipse.core.internal.preferences.PreferenceForwarder.contains",
          "source": "Pr eferenceForwarder.java:181"
        },
        {
          "method": "org.eclipse.ui.plugin.AbstractUIPlugin$CompatibilityPreferenceStore.contains",
          "source": "AbstractUIPlugin.java:277"
        },
        {
          "method": "org.eclipse.ui.texteditor.ChainedPreferenceStore.getVisibleStore",
          "source": "Chai nedPreferenceStore.java:525"
        },
        {
          "method": "org.eclipse.ui.texteditor.ChainedPreferenceStore.getBoolean",
          "source": "ChainedPr eferenceStore.java:166"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo",
          "source": "AbstractAnnotationHover.java:83"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo",
          "source": "BestMatchHover.java:102"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo",
          "source": "JavaEditorTextHoverProxy.java:69"
        },
        {
          "method": "org.eclipse.jface.text.TextViewerHoverManager$4.run",
          "source": "TextViewerHoverMa nager.java:161"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "62586",
      "date": "2004-05-18T05:39:19+02:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "normal"
    }
  ],
  "groupId": "62586",
  "bugId": "62586",
  "date": "2004-05-18T05:39:19+02:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "normal"
}