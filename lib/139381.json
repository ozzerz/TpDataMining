{
  "comments": [
    "I get the following exception stacktrace when cleaning up a very special combination of inner classes which I reduced to a small demo class:\n\n\u003d\u003d\u003d Stacktrace \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\njava.lang.reflect.InvocationTargetException\nat org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:91)\nat org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:113)\nCaused by: org.eclipse.core.runtime.CoreException: The class Demo$2 does not implement \u0027java.io.Serializable\u0027 or \u0027java.io.Externalizable\u0027 or has already an id\nat org.eclipse.jdt.internal.ui.text.correction.SerialVersionComputationHelper.computeSerialIDs(SerialVersionComputationHelper.java:99)\nat org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashOperation.calculateSerialVersionIds(SerialVersionHashOperation.java:99)\nat org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix$SerialVersionHashContext.initialize(PotentialProgrammingProblemsFix.java:89)\nat org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix.createSerialVersionHashContext(PotentialProgrammingProblemsFix.java:249)\nat org.eclipse.jdt.internal.ui.fix.PotentialProgrammingProblemsCleanUp.beginCleanUp(PotentialProgrammingProblemsCleanUp.java:179)\nat org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.initCleanUps(CleanUpRefactoring.java:466)\nat org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.cleanUpProject(CleanUpRefactoring.java:431)\nat org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.checkFinalConditions(CleanUpRefactoring.java:399)\nat org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:83)\nat org.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:118)\nat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1737)\nat org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)\n... 1 more\nRoot exception:\norg.eclipse.core.runtime.CoreException: The class Demo$2 does not implement \u0027java.io.Serializable\u0027 or \u0027java.io.Externalizable\u0027 or has already an id\nat org.eclipse.jdt.internal.ui.text.correction.SerialVersionComputationHelper.computeSerialIDs(SerialVersionComputationHelper.java:99)\nat org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashOperation.calculateSerialVersionIds(SerialVersionHashOperation.java:99)\nat org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix$SerialVersionHashContext.initialize(PotentialProgrammingProblemsFix.java:89)\nat org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix.createSerialVersionHashContext(PotentialProgrammingProblemsFix.java:249)\nat org.eclipse.jdt.internal.ui.fix.PotentialProgrammingProblemsCleanUp.beginCleanUp(PotentialProgrammingProblemsCleanUp.java:179)\nat org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.initCleanUps(CleanUpRefactoring.java:466)\nat org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.cleanUpProject(CleanUpRefactoring.java:431)\nat org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.checkFinalConditions(CleanUpRefactoring.java:399)\nat org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:83)\nat org.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:118)\nat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1737)\nat org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)\nat org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:113)\n\n\n\u003d\u003d\u003d Sourcecode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nimport java.io.Serializable;\n\npublic class Demo {\n\n\tvoid method1() {\n\t\tnew Serializable() {};\n\t}\n\n\tvoid method2() {\n\t\tnew Object() {}; // Demo$2 when compiled\n\t\tnew Serializable() {};\n\t}\n\n}\n\nI did this with a fresh unzipped version of 3.2RC2 (I recognized the error first in RC1) and a fresh workspace, VM is 1.5_06. Applying the clean up... wizard with its default settings expect Missing Code-\u003eAdd serial version ID-\u003eGenerated checked (Default(1L) does do the (bug)job). Subsequent calls to the wizard presents the same bug even if it is applied to a class which should work. Only a restart makes the wizard forget the error.\n\nI think \"Demo$2\" refers to the subclass of Object which actually does not implement Serializable or Externalizable.\nNote that the order of the inner classes is important as is the fact that one Serializable class is in another method. Defining all three inner classes in one method does not reproduce the bug.",
    "Move to JDT/UI",
    "Thanks for the nice test case.\n\nWhen the Serializable classes are calculated then the java model is used to get the type name (IType#getFullyQualifiedName) which returns Demo$1 for the first serializable class, Demo$1 (!) for the Object class, and Demo$2 for the second serializable class. When calculate the id, the AST is used to get the name (ITypeBinding#getBinaryName) which returns Demo$1 for the first, Demo$2 for the Object class, and Demo$3 for the second.\n\nNeed to investigate further. Not using the qualified name at all is not possible because they need to be passed to org.eclipse.jdt.internal.ui.text.correction.SerialVersionComputationHelper.computeSerialIDs\nand changing this beast is for sure no option for 3.2. (and most probably not possible)",
    "Created an attachment (id\u003d40177)\nfix and tests\n\nNeed to resolve the bindings for all serializable types to get the correct binary name.",
    "In getQualifiedClassNames(), there\u0027s a possibility that ASTParser#createBindings(..) does not create a binding for all given types. This would lead to null elements in the resulting array.\n\nYou should collect the binary names in a list to avoid null elements. Please also verify that callers don\u0027t have a problem if the returned binary names are incomplete.",
    "Benno, this is a possible RC3 candidate. Please attach a patch so, that Markus\nand I can decide whether to approve it or not.",
    "Created an attachment (id\u003d40186)\nfix and tests\n\nReturns 1L if name can\u0027t be determined. ",
    "Created an attachment (id\u003d40187)\nfix and tests\n\nThe other was not the new one...",
    "Created an attachment (id\u003d40189)\nfix and tests\n\nNext try...",
    "\u003e Returns 1L if name can\u0027t be determined. \n\nThe fallback should be to not touch the classes whose binary names could not be determined. If we just silently fall back to 1L, the user cannot trust us any more.",
    "Created an attachment (id\u003d40205)\nfix and tests\n\nMmm, this is a mess. I need to come up with a policy how to handle failures in clean ups for 3.3.",
    "Tobias, can you please review the fix and tell whether you would release it for 3.2?",
    "I am getting a compile error in SerialVersionHashOperation",
    "Created an attachment (id\u003d40348)\nfix and tests\n\n",
    "The actual problem seems to be the method IType#getFullyQualifiedName(..). From the spec:\n\n...the fully qualified name of an anonymous binary type whose class file is x/y/A$1.class using the \u0027.\u0027 separator is \"x.y.A$1\"...\n\nHowever, the Java model returns Demo$2 for the third anonymous class (new Serializable()...), so ObjectStreamClass actually loads the second anonymous class (new Object()...) which obviously fails.\n\nSeems like the implementation is using the occurrence count, which is not the same as the index in the class file name.\n\nMoving to JDT Core for comments",
    "Tobias, I\u0027m not sure I completely understood the problem, but I\u0027ll try some comments.\n\nFrom what I understand, you have an IType in hands. Where does it come from ? Is is a source type or a binary type ?\n\nNote that for a source type, using the occurence count is the only option, since caculating the anonymous class file\u0027s index for a source type would require to compile the source type. This is not something you want to do in a source model :-)\n\nSo JDT UI should not rely on the name of an anonymous source type to map it to a class file name.\n\nCan you use the source positions instead of relying on the type name ?\n\n",
    "If you need the binary name, then the only solution is to look at the type binding  corresponding to the anonymous type.\nSo you might need to handle the case where the binding cannot be computed.",
    "That\u0027s what I thought. We only have IType\u0027s from source during the cleanup (the quickfix for the serial UID has bindings available anyway). Just wanted to have confirmation before approving this patch...\n\nFix looks ok from implementation point of view.\n\nBenno, do you have some performance numbers? Seems that this slows down cleanup substantially.",
    "You might want to use the bindings only if the type contains serializable warnings.",
    "Created an attachment (id\u003d40379)\nsimple fix\n\nThis does not add an id if a failure occures (due to the fallback the test case works and the id is correctly generated)",
    "Created an attachment (id\u003d40380)\ntest case\n\n",
    "Tobias, please review carefully and test the example from comment 0 manually.\nAlso test the quick fix with that example.",
    "The patch fixes the problem but this should be cleaned up (gee ;-) in 3.3.\nApproving for 3.2 RC3.",
    "Patch looks good to me. Verified that quick fix and cleanup work on the example of comment 0.\n\n+1 for 3.2\n\nThis feature must be star-crossed :-|",
    "See Bug 140214",
    "+1 for 3.2 RC3.",
    "fixed \u003e N20060504-0010",
    "verifying for 20060511-0011",
    "verified"
  ],
  "commentCreationDates": [
    "2006-04-29T10:48:00+02:00",
    "2006-04-29T16:08:17+02:00",
    "2006-05-02T18:10:23+02:00",
    "2006-05-03T12:03:45+02:00",
    "2006-05-03T12:22:19+02:00",
    "2006-05-03T14:23:15+02:00",
    "2006-05-03T14:27:31+02:00",
    "2006-05-03T14:30:26+02:00",
    "2006-05-03T14:32:44+02:00",
    "2006-05-03T14:56:53+02:00",
    "2006-05-03T16:31:32+02:00",
    "2006-05-03T16:36:26+02:00",
    "2006-05-03T17:42:24+02:00",
    "2006-05-04T15:07:11+02:00",
    "2006-05-04T15:55:34+02:00",
    "2006-05-04T16:38:33+02:00",
    "2006-05-04T16:43:44+02:00",
    "2006-05-04T17:01:36+02:00",
    "2006-05-04T17:03:41+02:00",
    "2006-05-04T18:57:07+02:00",
    "2006-05-04T18:59:51+02:00",
    "2006-05-04T19:33:23+02:00",
    "2006-05-04T19:59:11+02:00",
    "2006-05-04T20:06:22+02:00",
    "2006-05-04T20:27:13+02:00",
    "2006-05-04T20:48:59+02:00",
    "2006-05-04T21:05:09+02:00",
    "2006-05-11T11:45:29+02:00",
    "2006-05-11T11:54:29+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "elements": [
        {
          "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
          "source": "WorkbenchRunnableAdapter.java:91"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:113"
        }
      ],
      "causedBy": {
        "exceptionType": "org.eclipse.core.runtime.CoreException",
        "message": "The class Demo$2 does not implement \u0027java.io.Serializable\u0027 or \u0027java.io.Externalizable\u0027 or has already an id",
        "elements": [
          {
            "method": "org.eclipse.jdt.internal.ui.text.correction.SerialVersionComputationHelper.computeSerialIDs",
            "source": "SerialVersionComputationHelper.java:99"
          },
          {
            "method": "org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashOperation.calculateSerialVersionIds",
            "source": "SerialVersionHashOperation.java:99"
          },
          {
            "method": "org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix$SerialVersionHashContext.initialize",
            "source": "PotentialProgrammingProblemsFix.java:89"
          },
          {
            "method": "org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix.createSerialVersionHashContext",
            "source": "PotentialProgrammingProblemsFix.java:249"
          },
          {
            "method": "org.eclipse.jdt.internal.ui.fix.PotentialProgrammingProblemsCleanUp.beginCleanUp",
            "source": "PotentialProgrammingProblemsCleanUp.java:179"
          },
          {
            "method": "org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.initCleanUps",
            "source": "CleanUpRefactoring.java:466"
          },
          {
            "method": "org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.cleanUpProject",
            "source": "CleanUpRefactoring.java:431"
          },
          {
            "method": "org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.checkFinalConditions",
            "source": "CleanUpRefactoring.java:399"
          },
          {
            "method": "org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run",
            "source": "CheckConditionsOperation.java:83"
          },
          {
            "method": "org.eclipse.ltk.core.refactoring.CreateChangeOperation.run",
            "source": "CreateChangeOperation.java:118"
          },
          {
            "method": "org.eclipse.core.internal.resources.Workspace.run",
            "source": "Workspace.java:1737"
          },
          {
            "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
            "source": "WorkbenchRunnableAdapter.java:87"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 0,
      "bugId": "139381",
      "date": "2006-04-29T10:48:00+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.core.runtime.CoreException",
      "message": "The class Demo$2 does not implement \u0027java.io.Serializable\u0027 or \u0027java.io.Externalizable\u0027 or has already an id",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.ui.text.correction.SerialVersionComputationHelper.computeSerialIDs",
          "source": "SerialVersionComputationHelper.java:99"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashOperation.calculateSerialVersionIds",
          "source": "SerialVersionHashOperation.java:99"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix$SerialVersionHashContext.initialize",
          "source": "PotentialProgrammingProblemsFix.java:89"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.fix.PotentialProgrammingProblemsFix.createSerialVersionHashContext",
          "source": "PotentialProgrammingProblemsFix.java:249"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.fix.PotentialProgrammingProblemsCleanUp.beginCleanUp",
          "source": "PotentialProgrammingProblemsCleanUp.java:179"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.initCleanUps",
          "source": "CleanUpRefactoring.java:466"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.cleanUpProject",
          "source": "CleanUpRefactoring.java:431"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.fix.CleanUpRefactoring.checkFinalConditions",
          "source": "CleanUpRefactoring.java:399"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run",
          "source": "CheckConditionsOperation.java:83"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CreateChangeOperation.run",
          "source": "CreateChangeOperation.java:118"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1737"
        },
        {
          "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
          "source": "WorkbenchRunnableAdapter.java:87"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:113"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "139381",
      "date": "2006-04-29T10:48:00+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "139381",
  "bugId": "139381",
  "date": "2006-04-29T10:48:00+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}