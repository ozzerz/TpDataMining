{
  "comments": [
    "Attached is a sample program that runs two JVMTI clients.  The two clients should forward all incoming trace data to a file (called client1.xml and client2.xml).  When I run the class I only get one file populated (either client1.xml or client2.xml but never both).\n\nOne of the two processes that results from the launch never exits and I have to always kill it manually.\n\nI\u0027m directly assigning to Slava.\nGuru, please change the assignee if necessary.",
    "Created an attachment (id\u003d39211)\nConcurent JVMTI Sample\n\n",
    "I\u0027m assigning this defect to Platform.Execution.\nThe sample program below uses IAgentController.getAgent(agentName, agentClass) to get a handle on the JVMTI agent that is running but because there are two agents with the same name, then only one of them is always returned.\n\nI need a mechanism to be able to get the agent that belongs to a specific process.  I\u0027ve noticed the existence of IAgentController.getAgent(agentName, processId) but this method doesn\u0027t have an argument for me to specify the agent class.  I need a method with the signature:\n\nIAgentController.getAgent(agentName, agentClass, processId).  Is there anyways of doing this with the new execution framework???\n",
    "Ali, \n  Two things:\n  There is now an overloaded method to add the processId in getAgent method.\n   i.e. getAgent(agentname, class, pid)\n\n  On the second point about concurrency:\n  In the code you do a processlaunch and a getAgent by name (not by pid). So what has happened is you are getting the same access handles to the agent and hence the issue. Can you now test with the new overloaded method. I will test it meanwhile.\nThanks",
    "Shouldn\u0027t the overloaded method be part of the IAgentController interface?\nThe AgentController class is an internal class.",
    "You are right - its sitting in my sandbox - will check it in right away",
    "Guru,\n\nI tried out your new method.  It seems like there is a racing condition somewhere in your code that causes only one of the files to be populated.  It works if I leave a sufficient amount of time in between the two clients (e.g. 2 seconds).\n\nI\u0027ve attached the new version of the sample.",
    "Created an attachment (id\u003d39487)\nNew version of the concurrent sample\n\n",
    "I also sometimes get this execption:\n\njava.lang.NullPointerException\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ConsoleDataProcessor.incomingData(ConsoleDataProcessor.java:156)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ACTCPDataServer$ACBufferFlusher.processData(ACTCPDataServer.java:373)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ACTCPDataServer$ACBufferFlusher.run(ACTCPDataServer.java:419)",
    "I\u0027ve noticed that sometimes the data path can\u0027t be established when the client invokes startMonitoring(TPTPDataPath).\nI\u0027m not sure if this problem is related to this defect.  The classes are not launched concurrently.  I\u0027m using the same instance of IAgentController to launch a class two times.  Everything works fine when I launch the class for the first time but when I launch the same class after the previous one is terminated, the client code blocks at startMonitoring.  The code gets blocked in this while loop:\n\n\t\t\twhile(!dataPathEstablished)\n\t\t\t{\n\t\t\t\tThread.sleep(Constants.TIMEOUT_PERIOD);\n\t\t\t}\n\nFor some reason, the data path is never established.",
    "I have tested this with the Attached Concurrent client. Both files are not created. The reason why the files were not populated were becos the datapath was not created. One reason why you were seeing the NPE exception was due to the Datapath not being created and now it is resolved. I also tested for the subsequent runs and that is resolved as well."
  ],
  "commentCreationDates": [
    "2006-04-21T21:34:09+02:00",
    "2006-04-21T21:35:12+02:00",
    "2006-04-24T17:25:49+02:00",
    "2006-04-25T01:07:24+02:00",
    "2006-04-25T23:56:26+02:00",
    "2006-04-26T00:10:41+02:00",
    "2006-04-26T01:01:17+02:00",
    "2006-04-26T01:01:45+02:00",
    "2006-04-26T01:04:49+02:00",
    "2006-04-29T21:04:12+02:00",
    "2006-05-14T14:44:30+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.ConsoleDataProcessor.incomingData",
          "source": "ConsoleDataProcessor.java:156"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.ACTCPDataServer$ACBufferFlusher.processData",
          "source": "ACTCPDataServer.java:373"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.ACTCPDataServer$ACBufferFlusher.run",
          "source": "ACTCPDataServer.java:419"
        }
      ],
      "number": 0,
      "commentIndex": 8,
      "bugId": "138036",
      "date": "2006-04-26T01:04:49+02:00",
      "product": "TPTP Profiling",
      "component": "Platform.Execution",
      "severity": "critical"
    }
  ],
  "groupId": "138036",
  "bugId": "138036",
  "date": "2006-04-21T21:34:09+02:00",
  "product": "TPTP Profiling",
  "component": "Platform.Execution",
  "severity": "critical"
}