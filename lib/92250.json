{
  "comments": [
    "3.1 I20050413 running under Sun JDK5.0.2.\nI\u0027ve been using the -debug option and noticing that the Heap Monitor window in\nthe status line reports far less memory than the Windows task manager reports. \nFor example, in one workspace, Heap Monitor reported 132M out of 180M used, but\nTask manager reported the process was using 343M of VM space and 312M of working\nset size. 163M was unaccounted for. That prompted me to investigate.\n\nUsing the JConsole program that comes with JDK5, and starting Eclipse with\n-vmargs -Dcom.sun.management.jmxremote, I can now see that this unreported\nmemory is largely due to the \"PS Perm Gen\" pool. On a workspace I\u0027m running as I\nwrite this, Eclipse Heap Monitor reports 40M of 99M used. In JConsole if I click\non the Memory tab and select Heap Memory Usage, the numbers match with what Heap\nMonitor is telling me. If I click on Non-Heap Memory usage, it shows 64M\nadditional memory in use. 50M of that is in the PS Perm Gen pool, and 14M in the\nCode Cache pool. Windows task manager shows 204M of total process memory, 148M\nworking set. The full command line was:\n\neclipse.exe -debug -data c:\\workspace -keyring c:\\keyring -vmargs \n-XX:+UseParallelGC -Dcom.sun.management.jmxremote\n\nI don\u0027t know what all the permanent memory is being used for but I\u0027m worried\nit\u0027s so large and also that it only seems to keep going up and up over the life\nof the session. Also I\u0027m bothered that the Heap Monitor only shows a fraction of\nthe real memory being used. It may lull people into a false sense that less\nmemory is being used when it may not really be true.",
    "My understanding is that the permanent generation memory is the memory used for\nthe class object code.",
    "Jeff is familiar with the \"dark matter\" between the total heap size as reported\nby  Runtime.totalMemory(), which is what the Heap Status shows.\n\nDo the figures above make sense?  Even with JConsole reporting 64M for Non-Heap\nMemory usage, there\u0027s still ~40M unaccounted for in the second launch.\n\nDoes anyone know if there is API for querying the size of the non-heap spaces?\n\n",
    "I meant \"between the total heap size as reported by  Runtime.totalMemory() and\nthe VM Size in Task Manager\".",
    "I once had a memory leak due to never disposed SWT images, and that had the\neffect of increasing the process size as shown by task manager, without that\nmemory showing up anywhere in java memory diagnostics (i.e. perm space etc). \n\nSo the \"dark matter\" in my case was actually memory allocated by SWT (probably\nthrough JNI), due to a programming error. \n\nI just tried with a vanilla 3.1 GA without any 3rd party plugins, giving it a\n-Xmx32M maximum heap size and using an otherwise empty workspace with one empty\nproject in it. Now I see:\n10MB Heap + 35MB Non-Heap \u003d 45MB (as reported by JConsole)\n                            60MB (process size as reported by Task Manager)\n\nthat\u0027s 15MB difference, and I\u0027d suspect that to be SWT images.\n\nIs there any way of finding out how much memory currently is allocated by SWT?\n\nMy problem is that I must be able to guarantee a maximum process size, and\nalthough I put -Xmx I see the process size totally being out of control.\n",
    "SWT doesn\u0027t internally track what objects it allocates, I think this would be\nquite expensive.  There are tools though which will tell you how many GDI\nobjects are being used, and other similar statistics.  For example, some of this\ninformation is gathered by the performance test infrastructure for eclipse.org.\n See these projects in eclipse CVS:\n\n  org.eclipse.test.performance (specifically PerformanceMonitorWindows)\n  org.eclipse.test.performance.win32 (JNI code for the above)\n\nUnder Linux, I have had success finding memory leaks using \u0027valgrind\u0027 (a linux\nmemory leak detector), and using \u0027xrestop\u0027 or \u0027wininfo\u0027 which can determine how\nmany X windows resources are being used per application.",
    "(In reply to comment #5)\nThe Sleak plugin\n(http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-swt-home/dev.html#tools)\ncould be of help here. I included it\u0027s View in my RCP application, and it shows \n59 Colors + 4 Cursors + 5 Fonts + 31 Images \u003d 99\nWhen I look at the process using procexp, it shows 138 GDI handles. I\u0027m not sure\nwhether the entities reported by Sleak translate to GDI handles one-to-one. If\nthat\u0027s the case, then where does the difference of 39 handles come from? Does\nSWT need an initial set of handles that won\u0027t be reported by Sleak?",
    "Hey guys this is getting to be a bad problem for me in 3.2M4. Although the Heap Status doesn\u0027t show the memory (it should - maybe through JMX or something?) there is a leak somewhere in permanent memory. I have run out of memory several times this month during export operations. For some reason if usually happens during plug-in or RCP product export. If Heap Status could report permgen memory it would be easier to localize. Please consider increasing the priority on this.",
    "Adding Steve to the CC so he sees the GDI related comments.\n\nJeff, did you see Nick\u0027s questions in comment 2?",
    "The numbers dont\u0027 look too far off.  Of course it depends on exactly what you are doing but 60+MB of dark matter is not unheard of.  There are all sorts of things that could be at play here in VM settings, etc.\n\nI agree that it is a bummer that the heap monitor shows only some of the memory.  If there was a consistent way to get it all, I\u0027m sure the UI team would be happy to investigate adding that information.",
    "Ok, but doing the same thing over and over should not result in an error running out of permanent memory should it? Just today I switched to 3.2M5 and Sun\u0027s JSE6.0 beta (previously I was using 3.2M4 and JSE5.0.6) so we\u0027ll see if I can still reproduce the OOM problem. If I can, what extra diagnostic info can I produce that would be helpful?",
    "(In reply to comment #7)\n\u003e Hey guys this is getting to be a bad problem for me in 3.2M4. Although the Heap\n\u003e Status doesn\u0027t show the memory (it should - maybe through JMX or something?)\n\u003e there is a leak somewhere in permanent memory. I have run out of memory several\n\u003e times this month during export operations.\n\nHave you considered increasing the maximum size of the PermGen space? I\u0027ve never had an OOM with eclipse since I\u0027ve added the following to my eclipse startup script: -XX:MaxPermSize\u003d256m ",
    "Of course, it only works with the Sun VM.",
    "The memory monitor could easily be retooled to show heap and non-heap usage with the new java.lang.management APIs in Java 5.  Unfortunately, the workbench targets much less than Java 5 so this would need to be in a separate plugin.\n\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/MemoryMXBean.html\n",
    "I wrote a plugin that uses the j.l.m API and I simply provided \u0027stubs\u0027 for the classes I use. When runnning on a Java5 VM, the ones from rt.jar are used. When running on a different VM, my stubs are used. Reflection can be used also, but was more work for me, so I opted for stubs instead.\n\nI attached the stubs (which I added to my plugin). The heap view should also use it. \n\nI concur with Ed Burnetter in that the number provided by j.l.m and Task Mangager are incompatible. Hotspot tends to be ~10MB less, but this seems like a fixed amount to me. IBM Java5 digresses more. I have seen ~30MB not reported, when comparing to Task Manager. Still, the numbers help.\n",
    "Created an attachment (id\u003d35208)\nstubs for java.lang.management classes for non-Java5 VMs\n\n",
    "WRT using the management beans for getting heap info, a few months ago i wrote a plugin that displays memory pools in the same way as jconsole does (it doesn\u0027t do historical though).  If you are interested i can attach it to this bug report.  It wouldn\u0027t be too hard to update it to display historical values as well as when garabge colelction events were detected.",
    "Created an attachment (id\u003d35344)\nMemory monitor plugin\n\nI have attached my memory monitor plugin.  It isn\u0027t very good, but it is a starting point.",
    "Created an attachment (id\u003d35609)\nTweaked version of memory monitor plugin\n\nI improved it a little to add tooltips and fix some problems with scaling the bars.",
    "Using this tool I could see PDE product export leaking about 10M of permgen space on every export. Opened bug 130545.",
    "awesome Ed, feel free to find more of these\u003cgrin\u003e",
    "This bug has morphed from a report about excessive memory usage to one about improving the memory monitor based on Java5 features.  \n\nI\u0027ve logged bug 130964 for this.  For those with votes you might want to move them depending on what you were voting for.\n",
    "When I say \"for this\" I mean logged a bug for comments on the memory monitor changes",
    "MVM what else is there to do here? You have it marked for a milestone that already passed. removing milestone pending clarification.",
    "Permgen OOM reports that might be related (including this one):\nbug 92250, bug 105629, bug 129490, bug 135420, bug 130545, bug 137475, bug 137704, bug 139429.",
    "Why is this bug still in UI land ? My understanding from comment 21 is that the Memory monitor issue is captured in bug 130964. So I think it should be moved to Runtime.\n\nI\u0027m too getting OutOfMemoryErrors due to lack of perm gen space. Running a pure Eclipse SDK 3.2RC4 under JDK6, I took a Thread dump (Ctrl+Break) to see the perm gen space and it appears that the perm gen space is around 43MB right after startup. (The workbench came up with the Java browsing perspective opened and 1 Java editor opened).",
    "*** Bug 142439 has been marked as a duplicate of this bug. ***",
    "Please note that numerous users having been commenting and voting (10 so far) on this problem via bug 129490, which should probably be marked as depending on this bug.  I\u0027m concerned that the target for this is not set as 3.2 and that the severity is set to normal.  While it\u0027s easy for advanced users to avoid this by bumping up the MaxPermSize, it would be bad if the default config of Eclipse 3.2 final crashed this often for those using Sun\u0027s latest VM.",
    "Apparently the Sun VM cannot handle loading a large number of classes unless you use the undocumented and non-standard -XX:MaxPermSize VM argument. The problem is, we cannot add this argument by default to Eclipse because it is not supported by other VMs, and may not be supported by future versions of the Sun VM. When a VM is given a -X option that it does not support, the normal behaviour is to exit immediately.\n\nIf anyone experiencing this problem is running with Java 1.6 on a non-Windows platform, it would be interesting to see the output of running \"jmap -permstat\" on the Java process. This reports more details about the perm memory space usage. In 1.6 this reports memory use of the string pool as well as space used by loaded classes, etc. Here is a link to instructions:\n\nhttp://java.sun.com/j2se/1.5.0/docs/tooldocs/share/jmap.html",
    "Geez that\u0027s annoying.  Has a loud bug been filed against the Sun VM in case there is a hope for getting the desired (IBM VM?) behavior or maxing MaxPermSize a standard flag for 1.5.0_07 or later?  It\u0027s hard to read this situation as something other than \"the Sun VM doesn\u0027t scale to Eclipse\", even if the various plug-ins could be loading fewer classes.\n\nUnfortunately regular users are likely to interpret this as \"Eclipse 3.2 is unstable\" or \"Eclipse 3.2 is bloated\".  So if it\u0027s not resolved it seems like it\u0027ll have to be a very visible note both on the dowload page and readme.  \n\nOne thing I\u0027m still wondering about is why this seemingly started getting reported so much more with M6.  In my case it did not happened once pre M6, and has been happening very regularly since M6.  Since that time I\u0027ve resited bumping up my MaxPermSize in order to have a sense for often this would happen to our users, and to encourage myself to keep complaining about it.  But since Eclipse dying this way can cause a perspective reset and is generally disruptive I\u0027m going to have to bite the bullet and use -XX:MaxPermSize now, but am bumping the severity.",
    "Just a thought: Can\u0027t you check the version of the VM in eclipse.exe and simply allow the necessary parameter if it\u0027s a Sun VM and filter it out if it\u0027s not?\n\nAlternatively, you could start the VM, catch the error and filter the parameter out if the VM doesn\u0027t allow it.\n\nIt\u0027s a hack but it would get a fairly stable 3.2 out of the door and would buy time to get it fixed properly for 3.2.1/3.3.",
    "To check the version of the VM you need to start the VM which is an expensive operation, but more than checking the version you need to check the vendor.\n\nWe thought about adding a hack like: run, let the startup fail if the vm arg is not recognized and then restart without some vmargs, but parsing the output is not great and we would have to be able to be language independent.\nCurrently we are leading toward adding sections in the eclipse.ini that would allow to specify vm args based on the vm being used. In order to not start the vm we would check the presence of a file in the vm home since VMs do not seem to have a file selfdescribing themselves.",
    "Useful link: http://java.sun.com/docs/hotspot/gc1.4.2/faq.html - question 7.\n\nMik, out of curiosity are you using Ant or PDE export (bug 130545)? I\u0027m now running on Sun 1.5 VM with all Callisto installed in the hope of reproducing it.",
    "I\u0027m rarely run either export in the workspace I work in.  Mind you, I have a slightly odd setup because I work boostrapped in workspace (2):\n  1): launched from Windows: only used for CVS synch and PDE export, never see error\n  2): launched from (1) as a runtime workspace, Mylar installed, was seeing error \n      once every few days, memory usage \n\nWhen I did a bunch of PDE exports in (2) earlier this week I did notice this happen much more quickly so that was probably bug 130545.  I was wondering if I should be suspicious of Mylar but it\u0027s memory usage is so minimal (rarely see my HEAP over 150M with a huge workspace) so I doubt it.\n\nBut it\u0027s great to hear that you\u0027re now working from the environment that triggers this.\n",
    "Re #31: While it\u0027s true that the operation is expensive, it doesn\u0027t have to be\ndone every time.\n\nMy suggestion would be to locate rt.jar because it will change whenever a new\nVM is installed. When a new rt.jar is found, determine whether it supports the\noption (takes 1-2 seconds but only once).\n\nIf it does, add the parameter when it\u0027s missing or pass it if it was specified.\n\nWhen the date and size of the file changes, run the check again.\n\nRecord this information as a comment in eclipse.ini.",
    "I can reproduce it with all callisto plugins installed, but it takes some work.  I had to touch WTP, TPTP, and BIRT functionality before getting the OOME.  I read somewhere about extra perm gen space being used when a debugger is attached, but I can\u0027t find it now.  Mik, your ease of reproducing may be related to your setup. Have you seen it happen when not in a workspace connected to a debugger?",
    "I\u0027m not sure if I have \u0027ease\u0027 reproducing it... I use Eclipse a lot every day which is probably why I\u0027m seeing it every few days, since it seems related to amount of usage.  \n\nAnd yes, I\u0027m launching runtime workspaces and connected to a debugger pretty much constantly, so that could be a lead.",
    "Ok.  After some investigation of approaches to add the -XX:MaxPermSize argument for Sun VMs only, we have decided against doing this for 3.2.  We must support a vast number of permutations of VM versions, vendors, platforms and locales, and our confidence in reliably detecting the VM vendor and version is not high.  Any changes to the Eclipse startup routine need to be highly reliable and performant, and this point in the release isn\u0027t the time to be messing with it. I have entered bug 143799 to investigate support for VM-specific arguments in a future release.\n\nHaving said that, clearly many users will come across \"perm gen\" problems and we want to do something in 3.2 to ease this pain.  We currently have a custom dialog that is presented to the user when they have run out of memory.  This dialog currently just advises using the -Xmx argument to address OutOfMemoryErrors, which clearly does not help when it is permanent generation space that is exhausted.  We are going to update this dialog to direct users to the \"Running Eclipse\" section of the readme file.  In this section, we will have a prominent sub-heading on addressing memory problems where we will explain the problem in more detail and suggest using -XX:MaxPermSize when running on a Sun VM.  The same sub-section will appear in the Help section under Workbench User Guide \u003e Tasks \u003e Running Eclipse.  We can\u0027t save users from hitting this the first time, but we can help them solve it if it does occur.",
    "When the exception is thrown, its getMessage() message will return \"PermGen space.\" \nThe special custom dialog John mentions could check for \n\n        e.getMessage().indexOf(\"PermGen\") !\u003d -1\n\nIn that case a more intelligent and direct message can be given, instead of suggestion -Xmx settings, or referring to another document.",
    "Created an attachment (id\u003d42625)\nPatch to org.eclipse.ui.ide\n\nThis patch changes the \"out of memory\" error message to provide more helpful steps to the user.",
    "SSQ, MV, Mcq, do you approve this message change for RC6?",
    "Chris, we considered that, but assumed it would not work on other locales.  We even considered tweaking the eclipse.ini file for free if we saw that error, but not sure how reliable that message is.",
    "I understand the concern about NLS support. \n\nHowever, I seriously doubt Hotspot would translate \"PermGen\". How cryptic a message is that already? How would that translate to French? German?",
    "+1",
    "+1",
    "Chris, we are well past the point where we should be putting in code that *guesses* that it can detect the message correctly. By only changing the message to refer to the readme, we can provide considerably better descriptions (than would have been possible in the dialog) of how to deal with both situations, without making *any* code changes. This is the correct fix for R3.2.\n\nHowever, I would leave this bug open as a reminder for us to do further investigation post-R3.2.\n\n+1 for John\u0027s patch.\n",
    "As Mik Kersten pointed out it will lead to really big disappointment within average and new Eclipse users. If I am not mistaken, default setting -Xmx256m will create 64Mb PermSize, which is definetely not enough for most common Eclipse installs (especially with all Callisto stuff on top).\n\nLooking at the odds of running non Sun VM by most of the Eclipse users, it would really make sense to increase default Xmx and maybe even add reasonable -XX:MaxPermSize\u003d... to eclipse.ini\n\nAs far as I know there is a bundled Eclipse version for IBM JVM, so eclipse.ini can be changed up there.",
    "Since we are leaving this open I\u0027m removing the target milestone. However, the message change has been released for RC6.",
    "Eugene, there is no relationship between the maximum heap and the perm gen size.  The default max perm gen is 64MB regardless of your heap size. See http://java.sun.com/docs/hotspot/gc1.4.2/faq.html question 30.\n\nWe can\u0027t add -XX:MaxPermSize to eclipse.ini because it is not a supported standard VM argument - other VMs such as JRockit, GCJ, IBM, will fail to start when provided with that argument. Even the Sun VM may not support this argument in future versions. From http://java.sun.com/docs/hotspot/VMOptions.html:\n\n\"Because the -XX options have specific system requirements for correct operation and may require privileged access to system configuration parameters, they are not recommended for casual use. These options are also subject to change without notice.\"",
    "(In reply to comment #48)\n\u003e Eugene, there is no relationship between the maximum heap and the perm gen\n\u003e size.  The default max perm gen is 64MB regardless of your heap size. See\n\u003e http://java.sun.com/docs/hotspot/gc1.4.2/faq.html question 30.\n\nThat is true, but in my experience WTP and its dependencies don\u0027t really fit into 256mb of heap memory, especially if you doing something more advanced then hellp worls apps.\n\n\u003e We can\u0027t add -XX:MaxPermSize to eclipse.ini because it is not a supported\n\u003e standard VM argument - other VMs such as JRockit, GCJ, IBM, will fail to start\n\u003e when provided with that argument. Even the Sun VM may not support this argument\n\u003e in future versions. From http://java.sun.com/docs/hotspot/VMOptions.html:\n\u003e \n\u003e \"Because the -XX options have specific system requirements for correct\n\u003e operation and may require privileged access to system configuration parameters,\n\u003e they are not recommended for casual use. These options are also subject to\n\u003e change without notice.\"\n\nThis is also a valid point. However it can be resolved by documenting it for this fraction of the users who don\u0027t run Sun JVM. Besides, neither  JRockit or GCJ are listed as supported platforms for Eclipse 3.2 project plan. http://www.eclipse.org/eclipse/development/eclipse_project_plan_3_2.html  I believe GCJ is packaging their own bundle, so they can change eclipse.ini accordingly.\n\nSo, the trade of is to make *all users* to deal with this permgen issue or use reasonable defaults that would work for majority of users that running on Sun\u0027s JVM.\n\nIf you like you can create separate downloads for Sun JVM and for all others, which will be only different by eclipse.ini",
    "Found this bug after noticing my Win XP showing signs of memory issues. I\u0027m running 3.2 RC5 with jdk 1.4.2_05 and noticed that 3.2 was showing about 2X the memory usage I usually see with 3.1.2 under similar conditions. \n\nI restarted Eclipse 3.2 RC5 and started repeating what I was doing (relatively benign plugin development) while watching the Windows memory monitor. I saw small changes as different plugins were activated (as I would expect) when I navigated around the workspace. I noticed that a build seemed to trigger a larger-than expected chunk of memory allocation, so I turned off auto build and launched a few clean/build cycles. These seemed to suck up a bit of memory each time, so I turned auto build back on and went back to editing single .java files. Each time I saved, a little more memory was allocated (200-400K).\n\nStrangely, when I finished my testing and switched to my browser to post this message, I noticed that memory consumption jumped by approximately 20M with nothing else happening.\n\nI\u0027ll continue playing with it tonight, but thought the observation was worth noting. If I were to guess, I\u0027d suspect the JDT builder is leaking memory, but that\u0027s just a guess. I don\u0027t know where the 20M went, but will look for that as well now that I know what I\u0027m looking for.",
    "I wonder if two things couldn\u0027t be causing the excessive permgen use in 3.2:\n\n1) The new style NLS messages, which use more String memory that never gets unloaded, and\n2) PDE builds and exports use AntRunner and an in-process instance of Ant (loaded in a strange way with a special classpath and reflection to get org.eclipse.ant.internal.core.ant.InternalAntRunner).",
    "Just a note that PDE UI / PDE builds use of AntRunner is not new for 3.2. Plugin export has used the Ant support since 3.0; product export since 3.1. \nI have made very limited changes to the AntClassLoader / AntRunner support in 3.2.",
    "And the NLS support has been added in 3.1 to reduce the usage of memory by not having all the message keys loaded in memory.",
    "People, there is no big mystery to be solved here.  Eclipse/Callisto has just gotten to the point where it more frequently exceeds the arbitrary perm gen limit imposed by the Sun VM.  We had the exact same issue in the past when we surpassed the arbitrary VM limit on Java heap size (bug 89059).  The only difference in this case is that there is no VM independent way of increasing this limit.\n\nI\u0027m not precluding the possibility of leaks, but this is mainly an issue of incremental growth over time that is finally approaching the threshold.  Other large Java-based applications frequently use an increased maximum perm gen, or advise their users to do so. The outstanding issue in this bug is to determine if there is a way we can work around the limitations of the Sun VM without affecting users on other VMs.",
    "Isn\u0027t it true though that the messages themselves are often longer than the keys, and once they get in memory they won\u0027t get out? Also I believe more plug-ins are using the new NLS system than in 3.1.\n\nWhile the static permgen usage may be a problem, I\u0027m more worried about the cases where a developer wants to keep Eclipse running all the time, but has to shut it down every so often (or have it crash) because of permgen memory eventually running out. Do you need to put in an option that recycles Eclipse on a regular schedule during idle times? :)",
    "Ed, the whole point of the new NLS format was to reduce memory usage.  Please review this document, particularly the \"Performance\" section:\n\nhttp://www.eclipse.org/eclipse/platform-core/documents/3.1/message_bundles.html\n",
    "By the way, this just had been posted for 1.5_07\nSee release notes at http://java.sun.com/j2se/1.5.0/ReleaseNotes.html#150_07\nNot sure if it would dup PermGen area...\n\n------\nBug ID:   \t 6280629\nSynopsis \tNeed ability to dump the heap at OutOfMemoryError\nCategory \tjava:serviceability\nRelease Fixed \tmustang(b43)\nState \tClosed, fixed\nRelated Bugs \t6284656 , 6321286\nSubmit Date \t05-JUN-2005\n\nWhen java.lang.OutOfMemoryError is thrown because the heap or perm space is full it would be desirable to dump the java heap to a file. For example, if the VM were to dump the heap in HPROF binary format then we could browse the heap using jmap.\n\n xxxxx@xxxxx  2005-06-05 19:47:16 GMT\nThis was added in b43. If an application runs with -XX:+HeapDumpOnOutOfMemoryError then the heap will be dumped to a file when OutOfMemoryError is first thrown. Another option can be used to configure the name/location of the dump if required (default is java_pid\u003cpid\u003e.hprof in the working directory).",
    "A few points:\n\n- A lot of people use the Sun VM\n- All of them will run in the issue\n- If another VM is started with the -XX option, you will get a reasonable error\n- If -XX is missing using the Sun VM, you won\u0027t get a useful error (with OOM errors, you can never be sure that the user will see anything at all).\n\nTherefore, I\u0027d strongly suggest to put the -XX option into the default .ini file because then, Sun users will be safe and all others will see an error dialog that there is an option which their VM doesn\u0027t understand.\n\nWhen they look into the ini file, they\u0027ll see a comment explaining the situation.\n\nThis way, *all* users will *always* get a meaningful error message *and* they will see it just once *and* early *and* none of them will loose any work.\n\nAs was said earlier, poking around in error messages and trying to catch these errors and saying \"Oops, Sorry, too bad!\" just doesn\u0027t cut.",
    "I personally think it is much worst to, out of the box, not start on all platforms. It gives the impression that we actually only support a few platform out of the set we claim supporting. This will start a flow of bugs but worst of blogs and bad advertisement.",
    "Re comment #58: \"A lot of people use the Sun VM - All of them will run in the issue\"\n    Actually, I use the Sun VM constantly, and have never seen this issue. \n    Mind you, I run on an a Mac, so that may be the difference.\n\nRe comment #59: \"it is much worst to, out of the box, not start on all\"\n    I agree with Pascal. See for example: http://www.netbeans.org/issues/show_bug.cgi?id\u003d58905\n    They looked at putting in a \"detect the VM\" hack but decided against it.\n    Instead they are thinking about using an installer to configure the command\n    line arguments. There are problems with this, as well -- for example, what\n    happens when you change VMs after you\u0027ve installed? [Yes, I know most\n    people don\u0027t do that] -- but that\u0027s something we could investigate in R3.3\n",
    "Re comment #59: \"it is much worst to, out of the box, not start on all\"\n\nIs it better to have a place where you know it breaks and where everyone can fix it very easily (just comment out one line in the .ini file) or is it better to have a spurious crash \"somewhere\"?\n\nI always prefer to die early with a meaningful error message instead of the \"Fuck, it crashed again! What is it with this shit? Can\u0027t they write stable stuff?\"\n\nThe first impression might be that there is a problem but when the users see the guidance to fix the problem, they will feel being cared for and they will quickly forget this (and might even be relieved).\n\nIf Eclipse crashes once a week or month for some developers, especially those, who use it a lot, they won\u0027t forget and they will feel more and more upset.\n\nPlus: Imagine the bug reports.\n\nIn my scenario, the bug reports will be \"Eclipse says unknown option -XX..\". Easy to recognize and fix.\n\nIn your scenario, the bug report will be \"Eclipse crashed with OOM\". One million possible reasons.\n\nAt least, if we don\u0027t add the -XX option to the .ini file, we should check for the java version (1.5) and display a once-in-a-lifetime dialog on startup which says \"Hello, there is a bug ... do this and that. Thank you.\"",
    "I think that the dialog should say \"Use a industrial quality VM\" :)",
    "In my testing it looks like 3.2 has higher permgen requirements compared to 3.1 even though overall memory requirements have gone down. Is it possible some of the memory or performance enhancements had the side effect of moving more objects into the permanent generation?\n\nUsing Sun JDK 1.6.0-beta2-b84, looking at allocated Perm Gen size in K in the Memory Monitor view:\n\n                    Eclipse:   3.1.0    3.2RC5   Increase\n\nopen w/blank workspace (avg):  17474    20829    19.2%\nopen w/my dev workspace (avg): 21391    24281    13.5%\nexport the Hello plugin\n (peak after several tries):   39922    51330    28.6%\n\nIf you were close to the MaxPermSize limit before then this kind of increase could push you over.\n\nAt least this time after the exports the PermGen size spikes eventually came back down, though it sometimes took a while. (I\u0027ve seen cases where the spikes piled on top of each other and caused an OOM. Let\u0027s hear it for non-deterministic memory allocation.)",
    "has the use of String#intern() gone up in the latest release? I know that this call was avoided in the past because certain VMs would never release the memory of an interned string.",
    "String#intern() is the only way I know of to transfer memory from the heap into perm gen space.  I did a review of all users of intern() in the SDK and found none that we haven\u0027t had for a long time. We generally only intern strings found in small quantities. Our biggest use of intern() is to intern preference keys, but we have been doing this for a long time (bug 20534).  I have not reviewed other Callisto projects for use of interning.  The Sun VM does garbage collect unreferenced interned strings, so this would not cause a leak, but it would increase PermGen usage.",
    "There seems to be some use in Xerces, which is used by Callisto, but I\u0027m not familiar with the places where it\u0027s invoked to know whether it\u0027s involved in reading client\u0027s files.",
    "I don\u0027t know about you guys but I still see lots of permgen usage with just the Eclipse SDK, no Callisto extras.\n\nDo any profiling tools let you look at objects grouped by generation?\n\nFWIW, under JDK6 with a 3.1.0 session I left up overnight (open w/dev workspace after export), the Memory Monitor shows 3 other non-heap areas but they aren\u0027t very big. As I write this, it says \"Code cache\" used 4M of 32M max, \"Perm Gen [shared-ro]\" used 5M of 8M, and \"Perm Gen [shared-rw]\" used 7M of 12M. The numbers I gave were for plain \"Perm Gen\". By way of comparison, in the regular Heap area, \"Tenured Gen\" is currently the biggest with 9M used of 242M max.\n\nI closed that session and started up a 3.2RC5 session and got it to the same state and forced a garbage collection. All the numbers except plain \"Perm Gen\" are about the same as 3.1.0: \"Code cache\" is at 4M of 32M max, \"Perm Gen [shared-ro]\" is at 5M of 8M, and \"Perm Gen [shared rw]\" is at 6M of 12M. \"Tenured Gen\" is currently at 11M of 242M max.\n\nI hope this information is of use to somebody.\n\nMaybe memory usage in all generations should be included in the performance results so it can be tracked over time.",
    "*** Bug 129490 has been marked as a duplicate of this bug. ***",
    "In this article http://www.ddj.com/dept/java/188700760?pgno\u003d5 the author acknowledge the need for setting the permgen space.",
    "So should Eclipse have a recommend default value set the eclipse.ini file?",
    "Re comment #70: Please read comment #48.\n\nAs commented in bug 129490, this problem seems to be less common with JDK 1.5.0_7.",
    "The DDJ article says \"Java 5.0 adds a permanent generation for VM data that is never garbage collected.\". Since I originally made this bugzilla entry I\u0027ve seen it go up and down (according to MM.UI and JConsole), so what makes it go down, and what delays it from going down? (Note I switched to JDK6 a while back though).\n\nI really hate these fixed maximums. Wasn\u0027t there some kind of memory ergonomics thing Sun was supposed to be doing? ...google... Ah here it is: http://java.sun.com/javase/6/docs/technotes/guides/vm/gc-ergonomics.html (unchanged from Java 5). It doesn\u0027t say anything about permgen though.\n\nThat gives me an idea. Just as an experiment, could people still having OOM permgen problems try these things and see if it has any effect:\n1. Try adding -server as the last line of config.ini and restart Eclipse.\n2. Try removing config.ini altogether and restart Eclipse.\n(config.ini is in your Eclipse install directory)\n\nIf either of these happened to solve the problem (I doubt it, but ...) then I think both the Sun and IBM JREs could work with those options.",
    "I think the line in the DDJ article about Perm gen being introduced in 1.5 is wrong.  There are numerous references to perm gen in 1.4 in, for example:\n\nhttp://java.sun.com/j2se/1.4.2/ReleaseNotes.html\n\nIt may be worth trying with the -server VM, but it has at least one serious perm gen leak that hasn\u0027t been resolved:\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do;:WuuT?bug_id\u003d4957990",
    "*** Bug 149795 has been marked as a duplicate of this bug. ***",
    "I used to get a few PermGen crashes a day (even with MaxPermGen set to 256m).\n\nI have been running on JRE 1.5.0_07 for a couple of days now without a crash. It seems that Eclipse 3.2 exacerbated the JVM PermGen memory leak bug that was fixed in 1.5.0_07.",
    "*** Bug 146800 has been marked as a duplicate of this bug. ***",
    "*** Bug 153010 has been marked as a duplicate of this bug. ***",
    "*** Bug 150968 has been marked as a duplicate of this bug. ***",
    "I am getting this error nearly every time I export an RCP, using OSX with 2 gigs RAM, with the following fairly ridiculous settings in eclipse.ini:\n\n-XX:MaxPermSize\u003d512m\n-vmargs\n-Xms512m\n-Xmx1024m\n\nMy set up is relatively full, but I do not touch most of the Callisto items.  My heap size is never reported above 100 megs.   I am simply working on an RCP, with Hibernate, HSQLDB, Jess, and Jigloo as the only non-standard items being used.  I have not touched BIRT or other portions of Callisto.  The JDK is from Apple and is the Sun 1.5.0_06 version. \n\n",
    "(In reply to comment #79)\n\u003e ... with the following fairly ridiculous settings in eclipse.ini:\n\u003e \n\u003e -XX:MaxPermSize\u003d512m\n\u003e -vmargs\n\u003e -Xms512m\n\u003e -Xmx1024m\n\u003e \n\nLiterally? the -XX:MaxPermSize\u003d512m is a vm argument and in fact needs to \nfollow the -vmargs line. \n\n\n\u003e  The JDK is from\n\u003e Apple and is the Sun 1.5.0_06 version. \n\u003e \n\nSome have reported _07 is \"much better\" and previous versions with respect to permGen problems. \n\n",
    "*** Bug 155362 has been marked as a duplicate of this bug. ***",
    "*** Bug 159435 has been marked as a duplicate of this bug. ***",
    "*** Bug 160502 has been marked as a duplicate of this bug. ***",
    "I\u0027m getting daily permgen related crashes using 3.2.1 and Java6 B2.  I\u0027m going to try with build b102 to see if there are any changes.",
    "Has anybody found a tool to show exactly what objects are going into the permanent generation? I know generally kind of things go in there, but not specifically, when running Eclipse. What we need is a list of types sorted by #bytes in permgen only, and you can drill down on those to see what references them (and what references those...) and maybe a list of the different tracebacks of where they were allocated.\n\nI saw an earlier comment about \"jmap -permstat\" but that doesn\u0027t work on my Windows machine running Sun Java 1.6.0-beta2-b86 . I looked at OQL (http://blogs.sun.com/sundararajan/entry/permanent_generation_analysis_with_oql) but didn\u0027t see any obvious way to tell what generation objects were in. Ideas?",
    "Perhaps there are classloader leaks in Eclipse?\n\nIf Eclipse uses a custom classloader, that could be an explanation. See http://blogs.sun.com/fkieviet/entry/classloader_leaks_the_dreaded_java (in my opinion, the behaviour of the JDK is bogus, but I might be wrong)",
    "ClassLoader leaks are definately a problem in any system where new classloaders can come and go.  If only one object is pinned then the classloader cannot be GC\u0027ed.  However I do not think that is what is going on with our PermGen errors.\n\nIn a typical eclipse scenario the number of bundles installed in eclipse stays constant and therefore the number of (possible) classloaders stays constant.  In other words we do not attempt to get rid of classloaders and create new ones for a given bundle unless it is being updated or refreshed.  In most cases where PermGen errors occur it seems more features of eclipse are being used and more and more classes are getting loaded.  The VM\u0027s permgen space can only handle so much and you eventually will get the error with large applications.",
    "Note to blame the Ant guys but that is one scenario where alot of classloaders are created.  There may be others as well.  ",
    "We create a new classloader for each Ant build.\n\nSee bug 130545 for the complete story on the ant \"leakage\"...but then most of you are cc\u0027d on it as well.",
    "I have PermGen error several times a day on \nSun 1.5_08 JVM, 1024M heapsize and 512M PermGen space. No Ant builds are performed.\n\nI see no direct relationship between PermGen size and frequncy appearance of this bug - sometines I have it in few minutes after Eclipse start with 512M PermGen and sometimes I can work for hours with 128M PermGen (or even default one). Usage pattern is more or less the same in all cases, so IMHO it is for sure memory leak.\n\nBTW, has somebody met it with Sun 1.4 JDK? \n",
    "\u003e Usage pattern is more or less the same in all cases, so IMHO it is for\n\u003e sure memory leak.\n\nCan you elaborate at all on what that usage pattern might be? In particular, if you can make it happen within a short period after starting it would be interesting to know the kind of things you are doing, what plugins you have installed, etc.",
    "(In reply to comment #90)\n\u003e \n\u003e BTW, has somebody met it with Sun 1.4 JDK? \n\nYes, it happens with 1.4 as well as 1.5.\nHowever, since setting my PermGen space to 128M I have not seen it (using 1.5 now).",
    "(In reply to comment #90)\n\u003e I have PermGen error several times a day on \n\u003e Sun 1.5_08 JVM, 1024M heapsize and 512M PermGen space. No Ant builds are\n\u003e performed.\nI think you are having some plugin in your workspace that behaves really really badly. I\u0027m using Callisto full install with Sun 1.5_08 and 128MB PermGen and haven\u0027t run into the problem again even though I heavily use the WTP which caused the problem a lot before I upped my PermGen size.\nI can also confirm that this problem only creeps up slowly and not right from the start since the PermGen gradually gets filled up. \nBTW I\u0027m using WinXP Pro and only 512MB for Eclipse (3.2.1). ",
    "Today it crashes with OOME in PermGen in 2 minutes after just 5 operations\n1. Eclipse started\n2. web.xml opened, edited and saved\n3. one java-file open and edited, but not saved\n4. Database explorer connected to the database (Derby, if that matter)\n5. scrap sql page opened and edited. On save OOME came.\n\nWorkspace is rather small (really, not so small, but all projects except one dynamic web project with only dozen of classes, and one \"Servers\" project which contains one Tomcat server definition)  are closed.\n\nI have had hangs (likely caused by OOME) as well on pure Java projects (w/o any web component and w/o any non-pure Java project in workspace) after just editing Java and XML files.\n\nPlugins in place - Eclipse Callisto installation+ AspectJ plugin + SpringIDE + Subclipse. All in the latest version (updated day before tomorrow).\n\nFirst time problems has occured in one hour (or less) after installation of Eclipse 3.2 Callisto without any additional plug-in on Java project (it contains  XML-files for Spring and Hibernate, but no web is involved).\n\nAnd as I have said, sometimes problem creeps slowly (after many hours) and sometimes (more rarely) just after few minutes of work.\n",
    "I have similar problems running Subclipse and SpringIDE. I suspect the problems lie there (likely in SpringIDE)",
    "I\u0027m experiencing OutOfMemoryErrors: PermGen on a regular basis using the Apple Java VM 1.5.0_06 on Mac OS. I run a plain Eclipse with some plugins that probably do have a lot of classes and consume much PermGen memory. The problem is, Apple doesn\u0027t even provide a -XX:MaxPermGen switch, so I\u0027m simply left with the OutOfMemoryErrors. Any suggestions?\n\ncomment #80: I don\u0027t think there is a 1.5.0_07 on Mac OS, or can you provide some link to it?",
    "(In reply to comment #96)\n\u003e The problem is, Apple doesn\u0027t even provide a -XX:MaxPermGen switch, so I\u0027m simply left with\n\u003e the OutOfMemoryErrors.\n\nThe option is -XX:MaxPermSize not MaxPermGen. It\u0027s available on the Mac. e.g.\n\njava -XX:MaxPermSize\u003d100M -version\n\nAlso, could you file a bug at bugreport.apple.com with the exception you get along with details on all the plugins you\u0027re loading, eclipse version, etc.",
    "*** Bug 164827 has been marked as a duplicate of this bug. ***",
    "I\u0027m seeing this with 3.3M3, regardless of JDK 6 or JDK 1.5.0_07 on Windows. Only plugins installed are Mylar and SoapUI. Can\u0027t recall experiencing this with 3.2 and many more plugins.",
    "I have massively suffered from this problem with Eclipse 3.2 and 3.2.1 to the amount that has rendered Eclipse almost unusable (crashes , on average, every hour, regardless of memory settings) - with Sun JDK 1.4.2_10, 1.5.0_08, 1.5.0_09 1.6.0 (beta 2) Then I have tried to run Eclipse against JRockit 1.5.0_06 R26.4.0. Problem has gone completely - no single crash for 2 weeks.",
    "Regarding comment #29 by Mik- has a bug against Sun JVM been filed? Sun should have some interest in making JDK5 compatible with Eclipse. I understand PermGen is a performance optimization feature- which doesn\u0027t help much if it makes the VM unstable or doesn\u0027t easily scale.",
    "(In reply to comment #101)\nConcerning comments #29 and #101 - filing a bug is definitely necessary,\nbut problem lay deeper then just PermGen size and corresponding flag. As I have mentioned I have experienced similar Out Of Memory problems with JDK 1.4.2_10 (while with slightly different message) and on JDK 1.5.0_08/1.5.0_09 any settings for memory/PermGen sizes (up to 512M) have not helped at all - even minimal/average time between crashes/hangs has not increased (at least in noticable manner).\n\nSo it seems to be a more general problem with garbage collection in Sun JVM.\nAs at least 2 other JVMs (IBM and JRockit) do not exhibit such behavior with Eclipse.\n\n",
    "(In reply to comment #100)\n\u003e I have massively suffered from this problem with Eclipse 3.2 and 3.2.1 to the\n\u003e amount that has rendered Eclipse almost unusable (crashes , on average, every\n\u003e hour, regardless of memory settings) - with Sun JDK 1.4.2_10, 1.5.0_08,\n\u003e 1.5.0_09 1.6.0 (beta 2)\n\nWhat is the exact command-line you are using (and what are the contents of eclipse.ini)?\n\n",
    "(In reply to comment #103)\n\u003e What is the exact command-line you are using (and what are the contents of\n\u003e eclipse.ini)?\n\nCommand-line\n\nfor JRockit\nstart /belownormal /min eclipse -vm D:\\Programme\\Java\\jrockit-R26.4.0-jdk1.5.0_06\\bin\\java.exe\n\nFor Sun JDK 1.5\nstart /belownormal /min eclipse -vm D:\\Programme\\Java\\jdk1.5.0_09\\bin\\java.exe\n\nstart /belownormal /min eclipse -vm D:\\Programme\\Java\\jdk1.4.2_10\\bin\\java.exe\nIni-file\n-vmargs \n-XX:MaxPermSize\u003d512m\n-Xms40m\n-Xmx1024m\n\nSee bug 161701 for all details. \n\nRegards,\n  Oleksandr\n",
    "512MB PermGen??? That should *never* be necessary. 128MB is something that should be enough for every Eclipse user even if you have almost every available plugin installed (and used each one of them this session).\n\nCan you please try to run Eclipse with Sun JDK 1.5 and JConsole (see comment #1)? Have a look at the memory usage while you work. If that suddenly starts to grow (it should only grow when a new plugin is loaded for the first time), take a note what you were doing (which plugin were you using, what did you do). Try to repeat this several times if possible.\n\nDuring normal operation, PermGen space should be stable (neither grow nor shrink).",
    "These options work very well for us, and we use a crapload of plugins:\n\n-vmargs -Dsun.java2d.opengl\u003dtrue -Dswing.aatext\u003dtrue -client -Xms256m -Xmx256m -Xverify:none -XX:NewRatio\u003d2 -XX:NewSize\u003d128m -XX:SurvivorRatio\u003d16 -XX:TargetSurvivorRatio\u003d90 -XX:MaxTenuringThreshold\u003d15 -XX:PermSize\u003d96m -XX:MaxPermSize\u003d128m -XX:+DisableExplicitGC -XX:+UseLargePages -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -XX:CMSIncrementalDutyCycleMin\u003d0 -XX:CMSIncrementalDutyCycle\u003d10\n\nSorry in advance if there are any typos. :)  Of course, turning on GC logging may help tune things for your usage.",
    "RE: command line options and ini file\n\nGuys, I\u0027m not sure. Maybe I just remember wrong. If so please correct me. But could it be, that the ini file will be ignored as soon as you specify any command line argument? Try to not mix them, i.e. put all into the ini file or all on the command line.",
    "(In reply to comment #107)\n\u003e RE: command line options and ini file\n\u003e \n\u003e Guys, I\u0027m not sure. Maybe I just remember wrong. If so please correct me. But\n\u003e could it be, that the ini file will be ignored as soon as you specify any\n\u003e command line argument? Try to not mix them, i.e. put all into the ini file or\n\u003e all on the command line.\n\u003e \n\nWhile I agree it is a good idea to just use eclipse.ini instead of mixing it with command-line arguments, my experiments indicate that you can specify the -vm on command-line and still use eclipse.ini to specify -vmargs. I experimented with using heap size arguments in eclipse.ini and -vm on command-line, and both were picked up correctly.\n",
    "(In reply to comment #108)\n\u003e my experiments indicate that you can specify the\n\u003e -vm on command-line and still use eclipse.ini to specify -vmargs.\n\nThanks for testing this. :)\n",
    "(In reply to comment #105)\n\u003e 512MB PermGen??? That should *never* be necessary. 128MB is something that\n\u003e should be enough for every Eclipse user even if you have almost every available\n\u003e plugin installed (and used each one of them this session).\n\nSure it should, 512m appeared just during experiments with this bug (I have tried to determne if size of PermGen influences the times between crashes/hangs). Really, 128 is enough for me (and with Eclipse 3.1 default was sufficient).\n\n\u003e Can you please try to run Eclipse with Sun JDK 1.5 and JConsole (see comment\n\u003e #1)? Have a look at the memory usage while you work. If that suddenly starts to\n\u003e grow (it should only grow when a new plugin is loaded for the first time), take\n\u003e a note what you were doing (which plugin were you using, what did you do).\n\nI would try it, but not now - I have a lot of work on hands right now, and is not so interested in this problem any more as have found my solution for it (JRockit). As soon as overload will concede, I will try (in a week?).",
    "Re comment 110, when you do have a chance, it would be good to confirm that the IBM VMs solve your problem as well.  Try the VM that is available in the Eclipse at\n    \thttp://www-128.ibm.com/developerworks/java/jdk/eclipse/",
    "(In reply to comment #111)\n\u003e Re comment 110, when you do have a chance, it would be good to confirm that the\n\u003e IBM VMs solve your problem as well.  Try the VM that is available in the\n\u003e Eclipse at\n\u003e         http://www-128.ibm.com/developerworks/java/jdk/eclipse/\n\nHello,\n I have not yet time for intensive testing, but at first glance it seems that IBM (J9) JVM solves my problems as well.",
    "*** Bug 167138 has been marked as a duplicate of this bug. ***",
    "I\u0027m using Sun\u0027s amd64 JDK 1.5.0_08 and Eclipse 3.2.1. I get a crash about 5 times per hour :-(.",
    "I had this problem with Sun JDK 1.5.x and JDK6 - Eclipse was crashing on me every hour or so, completely randomly (as far as I can tell), and regardless of the  -XX:MaxPermSize setting (had it up to 512MB at one point, and it still crashed after half an hour). Switching to JRockit 1.5.0_06 fixed the problem.",
    "In reply to comment #101 and comment #102\nIMHO it\u0027s high time to start talking to Sun. We\u0027re constantly seeing the problem on Sun VMs, but not on IBM or BEA. I\u0027d volunteer to open the bug- but somebody with more Java/VM background might be more suited for this?",
    "It seems that as well as the specific Permenant Generation problem with Sun\u0027s VM there are many issues with the way the VM and Eclipse handle out of memory situations.\n\nUnder Linux it is easy to generate low memory situations for the VM by setting the \u0027ulimit\u0027 for a tasks virtual memory. For example on a 1G memory machine setting \u0027ulimit -Sv 750000\u0027 will cause an active Eclipse to with many plugins to fail occassionally. The failures modes vary: from Eclipse simply aborting, to properly handled errors with user confirmation.\n\nReducing the limit allows the tester to generate errors earlier. Around 300000 Eclipse will no be able to start.\n\nHope this helps in testing!",
    "Just found this on dzone.com: http://my.opera.com/karmazilla/blog/2007/03/13/good-riddance-permgen-outofmemoryerror\n\nI\u0027m not sure why, but I haven\u0027t had a permgen error in a while. Could somebody who still gets it give these options a try (except the part about increasing MaxPermSize, that kind of invalidates the test).",
    "Probably the following option shall be added as well:\n-XXC:+MSClassUnloadingEnabled",
    "Why is this bug open in the Eclipse bugzilla at all?  What are the 27 voters expecting Eclipse to do about this?\n\nAfter reading the discussion here it seems to me as if:\n* SUN\u0027s JVM has problems running Eclipse.\n* IBM\u0027s JVM and JRockit run Eclipse just fine.\n* In two years, nobody has bothered telling SUN about this.  At least I couldn\u0027t find any link to SUN\u0027s BTS in here.\n\nHow about:\n1. Somebody who\u0027s interested in running Eclipse with SUN\u0027s JVM report this to SUN and post the link here.\n2. While SUN is fixing this users can work around this by running Eclipse in JRockit or IBM\u0027s JVM, or add a bunch of command line parameters to their SUN JVMs.\n3. This bug gets closed with a status of Invalid (since nothing points to this being a problem with Eclipse).\n\nRegarding comment 49, For Eclipse 3.2, JRockit was a reference platform on Windows.  For Eclipse 3.3, it is on Linux as well.\n\nFull disclosure: I work with JRockit for BEA.  I\u0027m however speaking for myself only here.  Haven\u0027t tried running Eclipse with SUN\u0027s JVM so this is not a problem for me.  I was just surprized to find it on the most hated bugs list that just got posted at https://bugs.eclipse.org/bugs/.\n",
    "Johan,\n\nI have to disagree with you, at least partially. \n\n1. While it definitely have to be reported to Sun (while I\u0027m pretty sure that issue is known to Sun as Eclipse in not the only application that suffers from this PermGen issue, many application servers, including Tomcat do), it is known that Eclipse till 3.2M5 has not suffered. So there are chances that issue may be workarounded on Eclipse side.\n\n2. Running Eclipse against non-Sun JVM has its own disadvantages. IBM JVM is not so readily available due to licansing issues, save inside bundled kit for Eclipse and istallation included into this kit is somewhat crippled (debug libraries are missing, probably, something else). So in this case you have to have 2 different JVMs - one to run Eclipse and 1 to run your programs inside (and outside) Eclipse. JRockit is readily available, but, at least from my expirience, it runs Eclipse not very smoothly - UI annonyingly freezes from time to time for not very long, but noticable time. Probably, this can be avoided by JRockit configuration but I have not succeed.\n\nRegards,\nOleksandr",
    "Johan, I mostly agree with you. However, this bug report does seem to be serving a useful purpose as a discussion forum on the topic, in particular the description of the various workarounds for getting working on the Sun VM. This is a common problem for those who use that VM, so it\u0027s useful to have an easily found bug that captures the discussion. I also agree it\u0027s unclear what the voters on the bug are expecting.  There is a faint possibility that we could detect on startup that we are running on a Sun VM and pass along the VM arguments needed to make it happy.\n\nI\u0027m removing the \"performance\" keyword because there is no indication here of a performance problem in the platform (other than the fact that it\u0027s extensible and thus unbounded in size).",
    "Just increasing the permgenSize is not a solution. The problem has to be addressed on a different level. Software parts that deal with ClassLoaders have to be diagnosed.\nI would propose a post mortem diagnose tool that gets run from the eclipse.exe when the JVM of eclipse crashed. For the dump -XX:+HeapDumpOnOutOfMemoryError could be used and analysed by the tool.\nEven if Platform does not have ClassLoader issues this tool would help plugin providers to find leaks in their software. The quality of eclipse is based on the quality of contributed plugins.",
    "Karsten, how about reporting this SUN JVM bug to SUN as I suggested in comment 120, instead of trying to debug it in Eclipse which doesn\u0027t seem broken?\n",
    "It is not that SUN has a problem with eclipse, but it seems that the additional Data stored in Class objects has increased which results in a faster permgenSpace problem than before. And ClassLoaders that are not garbage collected inside Eclipse are a Eclipse problem.\nSome plugins such as mylar and aspectj seem to attract the problem more than the basic functionality of eclipse SDK. And there are IDEs that do not have such problems.\nThis Blog entry explains why those errors occur: http://blogs.sun.com/fkieviet/entry/how_to_fix_the_dreaded",
    "(In reply to comment #125)\n\u003e It is not that SUN has a problem with eclipse\n\nThis bug report is titled \"... Permanent Generation memory...\" which is a feature (?) specific to SUN\u0027s JVM.\n\nIf you read the previous comments, you\u0027ll see that:\n* SUN\u0027s JVM gets \"permspace\" issues when running Eclipse.\n* IBM\u0027s JVM (which I think doesn\u0027t have any permspace) doesn\u0027t.\n* JRockit (which doesn\u0027t have any permspace) doesn\u0027t.\n\nIn my mind that indicates that SUN indeed has a problem with Eclipse.  In case you don\u0027t agree, can you please elaborate on how this could be anything but an issue with SUN\u0027s JVM?\n\n\u003e , but it seems that the additional\n\u003e Data stored in Class objects has increased which results in a faster\n\u003e permgenSpace problem than before.\n\nOnly with SUN\u0027s JVM.\n\n\u003e And ClassLoaders that are not garbage\n\u003e collected inside Eclipse are a Eclipse problem.\n\nIf Eclipse leaks resources, that\u0027s indeed an Eclipse problem, and it should get a bug report.  Is there one?  A link to it in here would be great!\n",
    "Ok, let me rephrase, it is not a SUN problem specific to Eclipse. It happens on other Projects as well. JBoss for example. Most people run Eclipse on a Sun JVM because it is easy to get. It is not like there is a big download button on a IBM website where you could download J9.\nAnd if people running the most popular JVM have a problem with Eclipse, Eclipse has a problem. It can not fix the JVM but it can try to do whatever it takes to make it run smooth.\nThat the problem does not occur on a JVM that does not have a permgen space does not mean it does not exist. It is simply not so visible. The permgen would not steadily grow if there would be no issue in some plugins of Eclipse. In case of any other JVM the uncollected ClassLoaders are floating around in Heap which is no way better.\nWhat I proposed is not a solution for a fix, but a tool to track issues that exist.\nFor your convenience, here is a feature request: https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d181192",
    "It is quite clear from\n\nhttp://blogs.sun.com/fkieviet/entry/classloader_leaks_the_dreaded_java\nand\nhttp://blogs.sun.com/fkieviet/entry/how_to_fix_the_dreaded\n\nthat classloader leak by itself has nothing to do with PermGen space itself. In JVMs without PermGen leak will occur in general heap and and eventually will cause OutOfMemory anyway. Just because general heap is normally bigger this leak will manifest itself later. Definitely, garbage collecting strategy may as well have some influence on how soon this leak will manifest itself.\n\nAnyway, it is definitely desirable to?take a look if leak exists and, if so, try to remove it.\n\nRegards,\nOleksandr\n",
    "(In reply to comment #125)\n\u003e Some plugins such as mylar and aspectj seem to attract the problem more than\n\u003e the basic functionality of eclipse SDK. And there are IDEs that do not have\n\u003e such problems.\n\nJust a side note: you are right about Mylar. If you install just Eclipse 3.3 + Mylar and create some queries you will get this bug after some time working.",
    "(In reply to comment #125)\n\u003e Some plugins such as mylar and aspectj seem to attract the problem more than\n\u003e the basic functionality of eclipse SDK. And there are IDEs that do not have\n\u003e such problems.\n\nAs far as I know this is a result of both Mylar and AJDT loading a large number of classes.  AJDT has to load an entire compiler (an extended jdt.core). Mylar has around 2,400 classes, a significant portion of which is likely to be loaded during normal operation.  Fyi, I have never seen this problem when my setting is -XX:MaxPermSize\u003d128M.  Not that this fact helps newcommers, who keep hitting this bug and getting the wrong first impression (see comment#29).  \n\nAssuming that this won\u0027t get addressed on the Sun VM end, is there anything else that could be done do to minimize the pain for newcommers adopting 3.3?  For example, is it possible for the the application, UI thread, error handler, or something else catch OutOfMemoryError and produce a reasonable message telling the user what to do in this scenario?  \n\nFor now I suggest that larger extensions to the SDK should put something like the following entry into their FAQs, since it will help users googling for your tool and the error\u0027s label: http://wiki.eclipse.org/index.php/Mylar_FAQ#I_am_seeing_java.lang.OutOfMemoryError:_PermGen_space_errors.2C_what.27s_wrong.3F",
    "Oh, yes... I forgot to mention that the simple workaround of setting -XX:MaxPermSize\u003d128M works fine on Eclipse + Mylar case, like Mik said.\n\nThe problem here is that it just crashed after some hanging, no dialog.\n\nThis happened with me some months ago, when I started to make tests using clean Eclipse milestones + Mylar installations (previously I used my own preconfigured, old installation), and started to get these crashes.\n\nI had no idea of what to do (and this is because I\u0027m a experienced developer), and then I remembered this bug.\n\nSo, responding the previous question of what to expect from this bug, I\u0027d like at least to have some better feedback for the user to know he is experiencing this bug report (not sure if this is possible...) and the solution.\n\nBy better feedback I mean something like a dialog saying \"Dude, set the -XX:MaxPermSize\u003d128m on eclipse.ini!\" or something like this ;)\n\nMik, meanwhile could you rephrase the Mylar FAQ to something like \"Eclipse is crashing after installing Mylar\", for example?\n\nI\u0027m not a VM expert, but IMHO it seems that blaming Sun VM because it exposes this bug, while IBM and BEA doesn\u0027t, seems unfair, because IBM/BEA/Sun VMs have different GC strategies. Of course, you can blame them for not having a standard option to set the MaxPermGenSize or a automatic strategy ;)",
    "Maybe we should ask the MyEclipse guys for a little help: They have added a monitor to their plugin set which pops up a warning dialog when only 5% permgen is left.\n\nAs for opening a bug against Sun: I agree this is a bug in the Sun VM but I have my doubts that Sun will do anything about it since there is such a simple workaround. Remember: PermGen is a very important performance feature of the Sun VM. It might take a huge effort to fix if it is even possible. Now, that Java 6 is out and all efforts go to Java 7, I see no real solution here.\n\nOTOH, a lot of people still work with Java 4, many use old versions of Java 5 and, last but not least, this bug appears because of how Eclipse handles plugins: A lot of information is stored in static variables which end up in PermGen. So a fix in Java 5 pl 15 might not help that much.\n\nThe Groovy plugin is also one of those that uses a lot of permgen. In this instance, Groovy keeps a cache of the AST in a static map in the plugin. In my case, with three small Groovy projects and groovy-core itself, I\u0027m using 80MB of PermGen for this. Of course, this is a \"bug\" in the plugin. It should use a cache which can get garbage collected but that is a lot more effort to do. A whole lot of code has to be rewritten, the design becomes much more complex and convoluted.\n\nFor all these reasons, I think this is a messy issue: No simple solution exists and it will bite again and again and again.\n\nEclipse should come with a monitor which warns before an OOM happens (instead of silently crashing), add a pointer to this bug here and/or display a warning when a Sun VM is used and the PermGen is not increased. (see my comment #58, for example).",
    "\u003e For example, is it possible for the the application, UI thread, error handler,\n\u003e or something else catch OutOfMemoryError and produce a reasonable message\n\u003e telling the user what to do in this scenario?  \n\nThis is already done.  See the patch on this bug from 2006-05-25 to see the message that is printed when OutOfMemoryError occurs. The problem is described in the \"Known Issues\" section of the readme, and the \"Running Eclipse\" section describes how to use VM arguments to avoid the problem. Everyone reads the readme file before running a piece of software, right? ;)  \n\nThe downside is that this problem does not always manifest itself as an OutOfMemoryError. Sometimes the VM hangs during class loading, sometimes the VM crashes without warning.",
    "(In reply to comment #133)\n\n\u003e This is already done.  See the patch on this bug from 2006-05-25 to see the\n\u003e message that is printed when OutOfMemoryError occurs.\n\nIt would be much better if Eclipse would pop up an alert when the free memory goes below 5%. This way, there would always be a pre-warning and the product would look more stable to the user.\n\nAgain, the MyEclipse plugin adds such a monitor and it works pretty well. If a committer would ask them for the code, I\u0027m sure they would hand it over. Or should I open an issue at MyEclipse and tell them about this bug so they can attach a patch?",
    "I just got this today using Sun JDK 1.6.0_01 . I set -Xms40m and -Xmx256m but didn\u0027t change MaxPermSize (I thought I did but I must have lost that when upgrading to the latest milestone). The session had been up for about 24 hours.  I was trying to switch from one perspective to another which I had been using earlier. The heap status showed only about 50M of non-permgen memory in use at the time.\n\neclipse.buildId\u003dI20070323-1616\njava.version\u003d1.6.0_01\njava.vendor\u003dSun Microsystems Inc.\nBootLoader constants: OS\u003dwin32, ARCH\u003dx86, WS\u003dwin32, NL\u003den_US\n\nError\nWed Apr 18 10:02:14 EDT 2007\nUnhandled event loop exception\n\njava.lang.OutOfMemoryError: PermGen space\nat java.lang.ClassLoader.defineClass1(Native Method)\nat java.lang.ClassLoader.defineClass(Unknown Source)\nat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass(DefaultClassLoader.java:161)\nat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:501)\nat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:471)\nat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:430)\nat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:413)\nat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:189)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass(BundleLoader.java:340)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:408)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:369)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:357)\nat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)\nat java.lang.ClassLoader.loadClass(Unknown Source)\nat java.lang.ClassLoader.loadClassInternal(Unknown Source)\nat org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistory.getEntries(GenericHistoryView.java:142)\nat org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.getDropDownEntries(GenericHistoryView.java:246)\nat org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.createActions(GenericHistoryView.java:237)\nat org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.getActions(GenericHistoryView.java:280)\nat org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.updateCheckState(GenericHistoryView.java:265)\nat org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.update(GenericHistoryView.java:261)\nat org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.\u003cinit\u003e(GenericHistoryView.java:234)\nat org.eclipse.team.internal.ui.history.GenericHistoryView.configureToolbars(GenericHistoryView.java:521)\nat org.eclipse.team.internal.ui.history.GenericHistoryView.createPartControl(GenericHistoryView.java:464)\nat org.eclipse.ui.internal.ViewReference.createPartHelper(ViewReference.java:363)\nat org.eclipse.ui.internal.ViewReference.createPart(ViewReference.java:219)\nat org.eclipse.ui.internal.WorkbenchPartReference.getPart(WorkbenchPartReference.java:592)\nat org.eclipse.ui.internal.PartPane.setVisible(PartPane.java:299)\nat org.eclipse.ui.internal.ViewPane.setVisible(ViewPane.java:531)\nat org.eclipse.ui.internal.presentations.PresentablePart.setVisible(PresentablePart.java:179)\nat org.eclipse.ui.internal.presentations.util.PresentablePartFolder.select(PresentablePartFolder.java:268)\nat org.eclipse.ui.internal.presentations.util.LeftToRightTabOrder.select(LeftToRightTabOrder.java:65)\n\n\n",
    "*** Bug 180040 has been marked as a duplicate of this bug. ***",
    "*** Bug 176327 has been marked as a duplicate of this bug. ***",
    "*** Bug 168285 has been marked as a duplicate of this bug. ***",
    "*** Bug 186520 has been marked as a duplicate of this bug. ***",
    "*** Bug 190910 has been marked as a duplicate of this bug. ***",
    "I just wanted to leave a short note that a detection for sun JVM has been integrated for windows. Thus on windows the maxPermgensize ist automatically set to the value specified in the eclipse.ini using:\nlauncher.XXMaxPermSize\nSee http://wiki.eclipse.org/FAQ_How_do_I_increase_the_permgen_size_available_to_Eclipse%3F for further info.",
    "I dare to say that detection of Sun JVM and increasing a PermGen would not help a lot - as I have posted earlier even absolutly enormous amounts of PermGen space (up to 512M and even 1G).",
    "(In reply to comment #142)\n\u003e I dare to say that detection of Sun JVM and increasing a PermGen would not help\n\u003e a lot - as I have posted earlier even absolutly enormous amounts of PermGen\n\u003e space (up to 512M and even 1G).\n\u003e \n\nNo time to read the whole discussion again, but wasn\u0027t it pointed out that your environment that crashed frequently included SpringIDE and Subversion and other third party plugins that made it different than most people? Many have reported that icreasing PermGen to 128 eliminated the problem immediately, so I\u0027d say that is the most reasonable solution at this point. It would be most helpful if you can test without SpringIDE and/or Subversion on the Sun JVM with Eclipse 3.3 and see if there are any crashes.\n\nOn a more general note, shouldn\u0027t this be marked as FIXED and/or VERFIIED? Has anyone reported it on 3.3?\n\n",
    "(In reply to comment #143)\n\u003e (In reply to comment #142)\n\u003e \u003e I dare to say that detection of Sun JVM and increasing a PermGen would not help\n\u003e \u003e a lot - as I have posted earlier even absolutly enormous amounts of PermGen\n\u003e \u003e space (up to 512M and even 1G).\n\u003e \u003e \n\u003e \n\u003e No time to read the whole discussion again, but wasn\u0027t it pointed out that your\n\u003e environment that crashed frequently included SpringIDE and Subversion and other\n\u003e third party plugins that made it different than most people? Many have reported\n\u003e that icreasing PermGen to 128 eliminated the problem immediately, so I\u0027d say\n\u003e that is the most reasonable solution at this point. It would be most helpful if\n\u003e you can test without SpringIDE and/or Subversion on the Sun JVM with Eclipse\n\u003e 3.3 and see if there are any crashes.\n\u003e \n\u003e On a more general note, shouldn\u0027t this be marked as FIXED and/or VERFIIED? Has\n\u003e anyone reported it on 3.3?\n\nI see PermGen deaths in 3.3 w/CDT + various plugins. \n\n",
    "Environment w/o SpringIDE is not interesting to me at all (as for many peoples, as Spring is very popular and Spring IDE is really convinient for Spring developers). Concerning SVN - I have 2 installations, one with SVN plugin, other without it, both had crashed in the same manner.\n\nAs for me personally, I has switched to alternative JVM (IBM) to run Eclipse and has not experinced any noticable problems after this switch.\n\nIf I would have time, that I would try with 3.3, but not any time soon (too overloaded now).",
    "This bug report is becoming a discussion thread; not ideal, but...\n\n(In reply to comment #145)\n\u003e Environment w/o SpringIDE is not interesting to me at all (as for many peoples,\n\u003e as Spring is very popular and Spring IDE is really convinient for Spring\n\u003e developers). \n\nThe point was not to get you to stop using SpringIDE but rather to try to narrow down the unusual problem that you were seeing even with an absurd amount of PermGen space allocated. If you could produce it regularly with SpringIDE installed but it disappeared without SpringIDE, we\u0027d have a pretty good idea it was SpringIDE that was the culprit.\nOf course we are all busy with \"real work\" but this would be a helpful thing for the community if you have a chance to test it out.\n",
    "Just for information purposes, I use Spring IDE, Subclipse, WTP and 10 plugins more (from Europa and otherwise) and I do not have any problems with PermGen size using JDK 6u2 and XX:MaxPermSize\u003d160m. I sometimes have an eclipse instance open for several days and I am more likely to have to close it due to some SWT bug (on occasion it runs out of handles) than due to PermGen exhaustion. So, I don\u0027t think the Spring IDE is at fault for using 512m of PermGen.",
    "(In reply to comment #146)\nNormally I would agree to you, but just now I have very hot time (approx. till end of September).\n\nAnyway, the only proper way to deal with this bug is to force Sun fix its cause.\nAt least 2 very popular products - Eclipse and Tomcat suffer from it abd it should be sufficient reason to deal not with symptoms but with cause.",
    "Fully agree. See comments #101, comment #102 and comment #116.\nDo we have a bug fixed against the sun jvm yet? If not, we should probably stop complaining :(",
    "(In reply to comment #143)\n\u003e (In reply to comment #142)\n...\n\u003e On a more general note, shouldn\u0027t this be marked as FIXED and/or VERFIIED? Has\n\u003e anyone reported it on 3.3?\n\nI get this bug about every 10 minutes in 3.3:\n\njava-1.5.0-sun-1.5.0.11\nMyEclipse_6.0M1_E3.3\nUbuntu 7.04, Linux 2.6.20-15.\n\nThe only nice thing about it is that MyEclipse pops up a nice little info box. \n\nI\u0027m not a developer like you all sound, just a user who is extremely frustrated that Eclipse dies all the time after a few minutes. And I\u0027m just tying to build a simple little set of JSP/JSF web pages for petes sake. I got so frustrated with how bad it was on Fedora 7 that I blew away Fedora 7 and intalled Ubuntu 7.04 - now I have a desktop oriented Linux but still an unfunctionl Eclipse :-(\n\nI am willing to help out. Aparently I can reproduce this bug easily. Would it help if I generated a that HeapDump and ran the Memory Monitor and JConsole and reported all the info here? I have nothing else to do tomorrow.\n\nOh, someone\u0027s going to have to tell how to go about getting and installing all that stuff :-)",
    "(In reply to comment #150)\n\n\u003e I get this bug about every 10 minutes in 3.3:\n\u003e \n\u003e java-1.5.0-sun-1.5.0.11\n\u003e MyEclipse_6.0M1_E3.3\n\u003e Ubuntu 7.04, Linux 2.6.20-15.\n\nSame problem on Windows and Java 1.6.0_01. I suspect that MyEclipse 6.0 has a memory leak in the JSP editor.\n\nI\u0027m wondering: Maybe it would make sense to move this bug to PDE? Since it crops up again and again when new versions of plugins are released, there seems to be a need for a simple tool to check for memory leaks. It is especially bad since for the user, it\u0027s Eclipse\u0027s fault and not the many plugins she installed.\n\nAnd why is the little memory monitor at the bottom not displaying PermGen, just the heap? It would really help to track these bugs down by watching the bar grow as I use Eclipse.",
    "The reason we don\u0027t see permgen on the heap monitor is that the MXBeans needed to monitor it have a java 5 binding. But the platform still has a java 1.4 as binding. There is a chance that jdt.ui will switch to java 5 and could thus provide a monitor if enough voices are raised.",
    "\u003e There is a chance that jdt.ui will switch to java 5 and could thus\n\u003e provide a monitor if enough voices are raised.\n\nBug 130964 tracks this (plus the warning dialog when memory gets tight).\n",
    "\u003eSame problem on Windows and Java 1.6.0_01. \n\u003eI suspect that MyEclipse 6.0 has a\n\u003ememory leak in the JSP editor.\n\nUsage of PermGen space has nothing to do with \"normal\" heap sizing and usage and cannot be affected by memory leaks from the application being run.  PermGen is used exclusively for holding class and method objects, not application data. \n\nPlease see the following FAQ entry for a description of what types of objects are placed in PermGen (#7) as well as some ways to help debug such issues:\nhttp://java.sun.com/docs/hotspot/gc1.4.2/faq.html",
    "(In reply to comment #154)\n\n\u003e \u003eSame problem on Windows and Java 1.6.0_01. \n\u003e \u003eI suspect that MyEclipse 6.0 has a\n\u003e \u003ememory leak in the JSP editor.\n\u003e \n\u003e Usage of PermGen space has nothing to do with \"normal\" heap sizing and usage\n\u003e and cannot be affected by memory leaks from the application being run.  PermGen\n\u003e is used exclusively for holding class and method objects, not application data. \n\nA plugin can have a leak PermGen as easily as it can leak normal memory. More easily in fact since many people don\u0027t even know that this special area exists and because the GC believes that objects in there are always long lived. Groovy, for example, uses a very huge amount of PermGen because it creates a lot of classes on the fly while you type. You can actually run out of PermGen just by typing too fast. If you do something strange, like caching dynamic classes in a static field, you can quickly run out of PermGen if you\u0027re not careful. JSP editors do create Java classes on the fly, don\u0027t they? Or how do you support code completion?\n\nBack to Eclipse: Since the problem discussed here is produced by so many plugins (especially when the authors are new to writing plugins), tool support for this grave issue is a must, IMHO. Maybe the basic JUnit test for plugin code should check the memory consumption and fail if PermGen grows after loading the plugin.\n\nIn the error message, refer to an API to tune this setting so memory leaks are detected by default and plugin developers have to think about them.",
    "OK - I downloaded the Tweaked Memory monitor plugin - it\u0027s kind cool.\n\nAnyway, no matter what I set the -XX:MaxPermGen (hopefully spelled right since this is from memory) value to, Memory monitor says that it\u0027s 64M.\n\nThe problem is that as soon as Eclipse starts up, it eats up about 61M instantly.\n\nIs it possible that somehow the Memory Monitor plugin is reporting incorrect\ninformation. There was once when I left Eclipse on overnight, the next day I got several hours out of it before it started to die all the time.\n\nWhat else can I do to assist?\n\nKevin",
    "\u003e Anyway, no matter what I set the -XX:MaxPermGen (hopefully spelled right since\n\u003e this is from memory) value to, Memory monitor says that it\u0027s 64M.\n\nAre you sure you added -XX:MaxPermSize\u003d160m (not MaxPermGen) in your eclipse.ini in its own line after -vmargs?",
    "(In reply to comment #156)\n\u003e OK - I downloaded the Tweaked Memory monitor plugin - it\u0027s kind cool.\n\u003e \nWhere can I download it?\n\n",
    "(In reply to comment #158)\n\u003e (In reply to comment #156)\n\u003e \u003e OK - I downloaded the Tweaked Memory monitor plugin - it\u0027s kind cool.\n\u003e \u003e \n\u003e Where can I download it?\n\u003e \n\nAbout a screen up :-)  If you look at the top of this page, you should see\nan Attachments section - it\u0027s in the list.",
    "OK _ now have a nicely working Eclipse 3.3\n\nHere\u0027s what seems to have solved the problem.\n\nI deleted the entire /eclipse/configuration/  directory including the config.ini. Of course, Eclipse complained about that so I had to put config.ini back.\n\nThe above didn\u0027t completely solve the problem but it did make it so that I could work for a bit longer before Eclipse died with an OOME.\n\nHere\u0027s what seemed to fix it:\n\nI placed the following:\n\n\n-XX:MaxPermSize\u003d128m\n\nafter the -vm arg on it\u0027s own line. It appears that SUN\u0027s JVM is ignoring\nthe \n\n--launcher.XXMaxPermSize\n256M\n\nbecause I am getting 128M -- yes, I did try it the other way around too\njust to see what happened.\n\nHere\u0027s my eclipse.ini\n-clean\n-showsplash org.eclipse.platform\n--launcher.XXMaxPermSize    \u003c---- this doesn\u0027t seem to work at all.\n256M\n-vmargs\n-Xms64m\n-Xmx1024m\n-XX:MaxPermSize\u003d128m        \u003c----- this is the line that seems to have worked\n-Dosgi.bundlefile.limit\u003d100",
    "(In reply to comment #160)\n\u003e OK _ now have a nicely working Eclipse 3.3\n\u003e \n\u003e Here\u0027s what seems to have solved the problem.\n\u003e \n\u003e I deleted the entire /eclipse/configuration/  directory including the\n\u003e config.ini. Of course, Eclipse complained about that so I had to put config.ini\n\u003e back.\n\nI\u0027ve done a bit more testing and the \n--launcher.XXMaxPermSize\n128M\n\nis now working all by itself (I took the -XX:MaxPermSize\u003d128M) out\nand changed the above back down to 128M (256M seemed a bit excessive :-)\n\nThus, I can only conclude that somehow I had something in the configuration\nsystem that was locking up and making PermGen 64M\n\nI ran the first config for two days, left on continuously doing some Unit tests.\nAll last night and tonight, the Memory Monitor peaked at about 65M - oh so close.\n\nI\u0027ve only been running this modified config for an hour or so, but it seems to be doing fine - PermGen space is set at 128M like it should be.\n\nThanks for all the help. If I can help any more let me know.\n\nNow that I know how to get this running, I don\u0027t mind trashing it if it will help.",
    "Created an attachment (id\u003d75329)\nMemory Monitor Plugin, version 1.0.1\n\nI\u0027ve tweaked the plugin some more. It will now display the memory usage in KB along with the bars and when you click into the view, it will make a \"snapshot\" of the current values and show relative numbers (relative to the snapshot) as well. This makes it more simple to see when memory usage starts to go through the roof.\n\nOne piece of advice, though: PermGen is growing all the time since Eclipse and Java load classes on a \"as needed\" basis. So to determine if you really have a leak, you must use Eclipse for a long time (so all code has been loaded) and you must find a single operation which makes it grow again and again.\n\nIf you use different operations all the time, then the value can grow because the VM loads new classes.\n\nNeeds Java 1.5. To use, open the view \"Memory Monitor\" (under \"Other\").",
    "*** Bug 199821 has been marked as a duplicate of this bug. ***",
    "*** Bug 200084 has been marked as a duplicate of this bug. ***",
    "(In reply to comment #164)\n\u003e *** Bug 200084 has been marked as a duplicate of this bug. ***\n\nWell, it\u0027s not quite the same issue -- there\u0027s two sides of this coin. One is that \"excessive\" amounts of memory are required; the other is that users don\u0027t know how to fix this. \n\nBug 200084 suggests a fix for the user side; this one addresses the developer side. IMHO, both issues bear consideration.\n\n",
    "*** Bug 204993 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2005-04-21T18:17:45+02:00",
    "2005-04-21T18:41:41+02:00",
    "2005-04-21T19:42:50+02:00",
    "2005-04-21T19:43:40+02:00",
    "2005-07-15T18:45:41+02:00",
    "2005-07-15T23:24:42+02:00",
    "2005-07-18T19:33:41+02:00",
    "2006-02-08T14:10:41+01:00",
    "2006-02-10T18:12:09+01:00",
    "2006-02-20T16:00:47+01:00",
    "2006-02-20T16:31:17+01:00",
    "2006-02-20T16:40:23+01:00",
    "2006-02-20T16:42:18+01:00",
    "2006-02-20T17:08:30+01:00",
    "2006-02-23T02:47:06+01:00",
    "2006-02-23T02:47:56+01:00",
    "2006-02-23T03:02:15+01:00",
    "2006-02-24T22:42:15+01:00",
    "2006-03-02T14:42:25+01:00",
    "2006-03-06T14:29:32+01:00",
    "2006-03-06T14:45:13+01:00",
    "2006-03-08T19:32:07+01:00",
    "2006-03-08T19:37:07+01:00",
    "2006-04-21T02:41:14+02:00",
    "2006-05-07T03:33:20+02:00",
    "2006-05-18T13:09:56+02:00",
    "2006-05-23T19:05:50+02:00",
    "2006-05-23T21:51:55+02:00",
    "2006-05-23T22:51:59+02:00",
    "2006-05-24T21:39:15+02:00",
    "2006-05-24T21:54:47+02:00",
    "2006-05-24T22:12:32+02:00",
    "2006-05-24T22:18:54+02:00",
    "2006-05-24T22:32:02+02:00",
    "2006-05-24T22:34:14+02:00",
    "2006-05-24T23:24:51+02:00",
    "2006-05-25T01:05:35+02:00",
    "2006-05-25T21:07:43+02:00",
    "2006-05-25T21:14:53+02:00",
    "2006-05-25T21:19:38+02:00",
    "2006-05-25T21:20:46+02:00",
    "2006-05-25T21:23:01+02:00",
    "2006-05-25T21:27:25+02:00",
    "2006-05-25T21:44:05+02:00",
    "2006-05-25T21:47:59+02:00",
    "2006-05-25T21:51:42+02:00",
    "2006-05-25T22:04:24+02:00",
    "2006-05-25T22:05:30+02:00",
    "2006-05-25T22:22:36+02:00",
    "2006-05-25T22:41:01+02:00",
    "2006-05-26T01:32:11+02:00",
    "2006-05-26T21:19:49+02:00",
    "2006-05-26T21:45:35+02:00",
    "2006-05-26T21:54:51+02:00",
    "2006-05-26T22:17:09+02:00",
    "2006-05-26T22:47:44+02:00",
    "2006-05-26T23:02:04+02:00",
    "2006-05-27T05:03:22+02:00",
    "2006-05-28T19:44:42+02:00",
    "2006-05-29T13:23:20+02:00",
    "2006-05-29T15:57:42+02:00",
    "2006-05-29T21:58:52+02:00",
    "2006-05-29T22:00:28+02:00",
    "2006-05-30T23:35:31+02:00",
    "2006-05-31T15:47:46+02:00",
    "2006-05-31T15:57:53+02:00",
    "2006-05-31T16:40:04+02:00",
    "2006-05-31T17:48:27+02:00",
    "2006-06-19T08:18:13+02:00",
    "2006-06-22T15:35:16+02:00",
    "2006-06-22T15:45:33+02:00",
    "2006-06-22T16:00:36+02:00",
    "2006-06-22T20:48:34+02:00",
    "2006-06-22T21:02:25+02:00",
    "2006-07-06T15:49:26+02:00",
    "2006-07-21T00:59:28+02:00",
    "2006-08-04T15:23:11+02:00",
    "2006-08-08T15:50:31+02:00",
    "2006-08-08T18:38:45+02:00",
    "2006-08-26T21:48:45+02:00",
    "2006-08-26T22:14:59+02:00",
    "2006-08-28T15:33:17+02:00",
    "2006-10-02T12:58:38+02:00",
    "2006-10-12T18:57:13+02:00",
    "2006-10-19T20:57:01+02:00",
    "2006-10-20T17:45:28+02:00",
    "2006-10-27T23:27:38+02:00",
    "2006-10-28T18:03:51+02:00",
    "2006-10-29T02:23:48+02:00",
    "2006-10-29T15:55:53+01:00",
    "2006-11-08T22:43:50+01:00",
    "2006-11-08T22:52:21+01:00",
    "2006-11-09T01:00:46+01:00",
    "2006-11-09T08:08:19+01:00",
    "2006-11-09T08:25:03+01:00",
    "2006-11-09T23:46:15+01:00",
    "2006-11-10T10:45:03+01:00",
    "2006-11-10T17:17:04+01:00",
    "2006-11-21T17:52:05+01:00",
    "2006-11-21T18:17:00+01:00",
    "2006-11-22T08:04:10+01:00",
    "2006-11-22T08:32:09+01:00",
    "2006-11-22T08:56:28+01:00",
    "2006-11-22T15:02:26+01:00",
    "2006-11-22T15:40:15+01:00",
    "2006-11-22T19:44:24+01:00",
    "2006-11-22T19:55:10+01:00",
    "2006-11-22T20:07:41+01:00",
    "2006-11-22T20:25:43+01:00",
    "2006-11-22T20:29:39+01:00",
    "2006-11-23T07:57:54+01:00",
    "2006-11-23T16:46:21+01:00",
    "2006-11-28T08:45:30+01:00",
    "2006-12-11T15:50:44+01:00",
    "2007-01-02T09:26:10+01:00",
    "2007-02-08T22:50:42+01:00",
    "2007-02-09T09:21:14+01:00",
    "2007-02-22T10:23:49+01:00",
    "2007-03-14T23:34:42+01:00",
    "2007-03-16T14:38:36+01:00",
    "2007-03-29T23:54:31+02:00",
    "2007-03-30T09:00:09+02:00",
    "2007-03-30T17:43:38+02:00",
    "2007-04-05T10:50:54+02:00",
    "2007-04-05T10:56:33+02:00",
    "2007-04-05T11:36:48+02:00",
    "2007-04-05T13:27:03+02:00",
    "2007-04-05T15:03:10+02:00",
    "2007-04-05T15:21:24+02:00",
    "2007-04-05T21:45:42+02:00",
    "2007-04-05T23:07:38+02:00",
    "2007-04-06T10:31:28+02:00",
    "2007-04-06T11:18:08+02:00",
    "2007-04-08T18:49:16+02:00",
    "2007-04-08T22:44:18+02:00",
    "2007-04-18T16:21:32+02:00",
    "2007-04-18T22:08:11+02:00",
    "2007-04-21T04:44:08+02:00",
    "2007-04-25T18:05:16+02:00",
    "2007-05-11T10:49:01+02:00",
    "2007-06-05T16:25:28+02:00",
    "2007-07-27T02:22:44+02:00",
    "2007-07-27T09:07:40+02:00",
    "2007-07-27T14:12:24+02:00",
    "2007-07-27T14:41:41+02:00",
    "2007-07-27T15:19:44+02:00",
    "2007-07-27T15:46:14+02:00",
    "2007-07-27T16:16:45+02:00",
    "2007-07-27T16:39:17+02:00",
    "2007-07-27T17:44:58+02:00",
    "2007-07-29T06:44:53+02:00",
    "2007-07-30T08:49:54+02:00",
    "2007-07-30T10:57:25+02:00",
    "2007-07-30T16:45:52+02:00",
    "2007-07-30T17:01:32+02:00",
    "2007-07-30T20:06:05+02:00",
    "2007-08-01T03:29:57+02:00",
    "2007-08-01T03:36:04+02:00",
    "2007-08-01T15:04:19+02:00",
    "2007-08-03T03:00:17+02:00",
    "2007-08-03T03:06:59+02:00",
    "2007-08-03T03:20:15+02:00",
    "2007-08-03T14:55:34+02:00",
    "2007-08-15T20:54:08+02:00",
    "2007-08-15T21:23:20+02:00",
    "2007-08-15T23:40:13+02:00",
    "2007-09-30T13:03:47+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.OutOfMemoryError",
      "message": "PermGen space",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass1",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass",
          "source": "DefaultClassLoader.java:161"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass",
          "source": "ClasspathManager.java:501"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl",
          "source": "ClasspathManager.java:471"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl",
          "source": "ClasspathManager.java:430"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass",
          "source": "ClasspathManager.java:413"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass",
          "source": "DefaultClassLoader.java:189"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass",
          "source": "BundleLoader.java:340"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal",
          "source": "BundleLoader.java:408"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:369"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:357"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass",
          "source": "DefaultClassLoader.java:83"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistory.getEntries",
          "source": "GenericHistoryView.java:142"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.getDropDownEntries",
          "source": "GenericHistoryView.java:246"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.createActions",
          "source": "GenericHistoryView.java:237"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.getActions",
          "source": "GenericHistoryView.java:280"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.updateCheckState",
          "source": "GenericHistoryView.java:265"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.update",
          "source": "GenericHistoryView.java:261"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView$NavigationHistoryAction.\u003cinit\u003e",
          "source": "GenericHistoryView.java:234"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView.configureToolbars",
          "source": "GenericHistoryView.java:521"
        },
        {
          "method": "org.eclipse.team.internal.ui.history.GenericHistoryView.createPartControl",
          "source": "GenericHistoryView.java:464"
        },
        {
          "method": "org.eclipse.ui.internal.ViewReference.createPartHelper",
          "source": "ViewReference.java:363"
        },
        {
          "method": "org.eclipse.ui.internal.ViewReference.createPart",
          "source": "ViewReference.java:219"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPartReference.getPart",
          "source": "WorkbenchPartReference.java:592"
        },
        {
          "method": "org.eclipse.ui.internal.PartPane.setVisible",
          "source": "PartPane.java:299"
        },
        {
          "method": "org.eclipse.ui.internal.ViewPane.setVisible",
          "source": "ViewPane.java:531"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.PresentablePart.setVisible",
          "source": "PresentablePart.java:179"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.PresentablePartFolder.select",
          "source": "PresentablePartFolder.java:268"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.LeftToRightTabOrder.select",
          "source": "LeftToRightTabOrder.java:65"
        }
      ],
      "number": 0,
      "commentIndex": 135,
      "bugId": "92250",
      "date": "2007-04-18T16:21:32+02:00",
      "product": "Platform",
      "component": "Runtime",
      "severity": "critical"
    }
  ],
  "groupId": "92250",
  "bugId": "92250",
  "date": "2005-04-21T18:17:45+02:00",
  "product": "Platform",
  "component": "Runtime",
  "severity": "critical"
}