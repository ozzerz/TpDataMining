{
  "comments": [
    "Build: I-20030710\nI found the exception pasted below in my log file.  Note that \norg.eclipse.debug.core/.classpath is indeed in my workspace.\n\nError Jul 10, 2003 23:09:32.534 Exception while \nretrieving /org.eclipse.debug.core/.classpath, will revert to default classpath\norg.eclipse.core.internal.resources.ResourceException: \nResource /org.eclipse.debug.core/.classpath is not local.\nat org.eclipse.core.internal.resources.Resource.checkLocal(Resource.java:313)\nat org.eclipse.core.internal.resources.File.getContents(File.java:213)\nat org.eclipse.jdt.internal.core.Util.getResourceContentsAsByteArray\n(Util.java:671)\nat org.eclipse.jdt.internal.core.JavaProject.getSharedProperty\n(JavaProject.java:1793)\nat org.eclipse.jdt.internal.core.JavaProject.readClasspathFile\n(JavaProject.java:2089)\nat org.eclipse.jdt.internal.core.JavaProject.getRawClasspath\n(JavaProject.java:1579)\nat org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute\n(IndexAllProject.java:77)\nat org.eclipse.jdt.internal.core.search.processing.JobManager.run\n(JobManager.java:371)\nat java.lang.Thread.run(Unknown Source)",
    "Exceptions come from platform, the file claims to not be local.\nHow did the classpath file get created ? Imported through CVS or created \nthrough PDE import ?",
    "The classpath file in question was created during the PDE import operation.",
    "*** Bug 41859 has been marked as a duplicate of this bug. ***",
    "Hello Wassim,\nWasn\u0027t it funny to work again together in Eclipse project after WMQI? ;)\nI\u0027m currently tracking this bug but have lot of difficulties to recreate it. \nI\u0027ve imported 58 external plugins several times and never got this exception...\nWould it be possible to have your test case or a more precise idea of a \nscenario to reproduce this problem and have a chance to understand what happen \nhere?\nThanks",
    "Frederic,\nYou and I worked on the same project such a long time ago that WMQI was still \ncalled MQSI ;-)\n\nThis bug is difficult to reproduce, as I think it has to do with timing.  \nHowever, it did happen to me more than once.\n\nI think this bug has to do with the two-stage plug-in import operation, and \nthe fact that half-way through the operation, JDT core and PDE are fighting \nfor cpu time.\n\nBelow is a modified excerpt of a note that I sent to Philippe as a follow-up \nto the then-critical bug 37274.  The note explains what happens during import, \nand with an appendix explaining what I think could be causing this particular \nbug.\n\n\nHere is a breakdown of the activities that take place during the plug-in \nimport operation:\n1. If autobuilding is on, we turn it off.\n\n2. We import all the plug-ins selected in the import wizard and create a Java \nproject for each plug-in that contains libraries.  Note that at this step, we \nused to clear the classpath of the freshly created Java project because we \nwill correctly set it at a later step.  However, just before we released 2.1, \nPhilippe suggested in bug report 34574 that we do not flush the classpath \ncompletely.  So we stopped flushing the classpath at this point, and this \nintroduced the transient error markers that we now see in the Problems view in \nthe middle of the operation.  Since these error markers go away later in step \n3 when we set the classpath, we regarded them as benign, yet still annoying, \nintermediary entities.  This step is done in an IWorkspace.run\n(IWorkspaceRunnable, IProgressMonitor) operation.\n\n3. We set the classpath of all the projects that were succesfully imported \ninto the workspace. This step has to be done in a subsequent IWorkspace.run\n(IWorkspaceRunnable, IProgressMonitor) operation for an accurate classpath \ncomputation.  i.e. the Java projects from step 2 have to become part of the \nworkspace before we set their classpath.\n\n4.  If we had turned autobuilding off in step 1, we turn it back on and invoke \na build via PDEPlugin.getWorkspace().build\n(IncrementalProjectBuilder.INCREMENTAL_BUILD,new SubProgressMonitor\n(monitor,1));\n\nNote that after step 2, JDT core and PDE start doing stuff simultaneously and \ncompeting for CPU (bug 31592).  JDT starts the indexing work, while PDE starts \nsetting classpaths.  So what I think might happening in this instance is that \nJDT wants to index the classpath file for org.eclipse.debug.core before PDE \nhad a chance to create it or set it.\n",
    "What is suspicious though is that if you did not flush the classpath, then the \nfile should live on disk, and should be readable. However the platform refuses \nto let us access it.\n\nAnyway, since this is only a logging problem, and we believe our indexer \nactivity should be fault tolerant (given it is running after the fact), we \nmodified our code to be more resilient in this scenario, and stop logging this \nproblem, which isn\u0027t one in the end.\n\nFixed",
    "While testing PDE external plugins import, I got another similar exception in \nthe indexer:\n!ENTRY org.eclipse.jdt.core 4 4 Sep 03, 2003 17:02:24.860\n!MESSAGE Exception while retrieving /org.eclipse.jdt.launching/.classpath, will \nrevert to default classpath\n!STACK 1\norg.eclipse.core.internal.resources.ResourceException: \nResource /org.eclipse.jdt.launching/.classpath is not local.\n\tat org.eclipse.core.internal.resources.Resource.checkLocal\n(Resource.java:307)\n\tat org.eclipse.core.internal.resources.File.getContents(File.java:213)\n\tat org.eclipse.jdt.internal.core.Util.getResourceContentsAsByteArray\n(Util.java:677)\n\tat org.eclipse.jdt.internal.core.JavaProject.getSharedProperty\n(JavaProject.java:1809)\n\tat org.eclipse.jdt.internal.core.JavaProject.readClasspathFile\n(JavaProject.java:2105)\n\tat org.eclipse.jdt.internal.core.JavaProject.getRawClasspath\n(JavaProject.java:1593)\n\tat org.eclipse.jdt.internal.core.JavaProject.getRawClasspath\n(JavaProject.java:1583)\n\tat org.eclipse.jdt.internal.core.JavaProject.getOutputLocation\n(JavaProject.java:1375)\n\tat org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute\n(IndexAllProject.java:90)\n\tat org.eclipse.jdt.internal.core.search.processing.JobManager.run\n(JobManager.java:375)\n\tat java.lang.Thread.run(Thread.java:536)\n!ENTRY org.eclipse.core.resources 4 369 Sep 03, 2003 17:02:24.860\n!MESSAGE Resource /org.eclipse.jdt.launching/.classpath is not local.",
    "Created an attachment (id\u003d5960)\nFix also exception raised while getting output location\n\nWe have similar problem with output location than with raw classpath getter\n\u003d\u003e apply similar solution.\n",
    "Wassim,\n\nAbout the unnecessary markers displayed between step2 and step3, there\u0027s \nnothing we can do avoid them as the projects were created without classpath \nduring step 2. At the end of the operation performed while this step, a \nPRE_AUTO_BUILD event is sent and processed by our DeltaProcessor which \nrefreshes all markers of resources concerned by the delta.\n\nAs these resources are the created and they have no .classpath file, there\u0027s \nautomatically a  marker created to signal this problem.\n\nI think there are two solutions here to have these markers not displayed:\n1) perform the import in only one operation as suggested by bug 31592\n2) add a temporary .classpth to the project to avoid markers creation while \ntreating PRE_AUTO_BUILD event between the two operation\n\nI\u0027m not sure if solution 1) is possible, but I\u0027ve made a try to implement \nsolution 2) by modifying method createProject(...) in PluginImportOperation \nclass.\nI\u0027ve replace following code:\nif (isJavaProject) {\n\t/*IJavaProject jProject \u003d JavaCore.create(project);\n\tif (jProject.getRawClasspath() !\u003d null\n\t\t\u0026\u0026 jProject.getRawClasspath().length \u003e 0)\n\t\tjProject.setRawClasspath(new IClasspathEntry[0], monitor);*/\n\tmodelIds.add(model.getPluginBase().getId());\n}\n\nwith:\nif (isJavaProject) {\n\tIJavaProject jProject \u003d JavaCore.create(project);\n\tjProject.setRawClasspath(new IClasspathEntry[0], project.getFullPath(), \nmonitor);\n\tmodelIds.add(model.getPluginBase().getId());\n}\n\nAnd it seems to work properly (import does not hang and no markers are \ndisplayed bewteen two steps).\n\nMay you let me know if you get same result with this change?\n\nThanks",
    "Wassim,\n\nAbout markers displayed between step 2 and step 3 there\u0027s nothing to do on our \nside about it. At the end of step 2, a PRE_AUTO_BUILD event is sent by the \nrunning operation and processed by our DeltaProcessor which refreshes markers.\n\nAs project were created in step 2 without classpath, then we correctly create a \nmarkers for each concerned project that its .classpath cannot be read.\n\nAs it seems necessary to keep the two separated operations, I suggest to set \nthe classpath to the created project in order to avoid these markers to be \ndisplayed.\n\nI\u0027ve made a try modifying createProject(...) method of PluginImportOperation.\nAt the end of the method I\u0027ve changed the if(isJavaProject) block as follow:\nif (isJavaProject) {\n\tIJavaProject jProject \u003d JavaCore.create(project);\n\tjProject.setRawClasspath(new IClasspathEntry[0], project.getFullPath(), \nmonitor);\n\tmodelIds.add(model.getPluginBase().getId());\n}\n\nAfter that, I\u0027ve made several import operation with new or replacing projects \nand never got any dead lock nor transient error markers :)\n\nLet me know if this change could be acceptable for you, thanks\n\nFr?d?ric",
    "Transient classpath problem markers are expected due to the PDE import process, \nand should be avoided so as to improve user experience, but this is on the PDE \nside only.\n\nIntegrated fix for output location as well.\nFixed.",
    "Frederic,\nYour suggested fix is exactly what I had once upon time, but this solution, \nwhich is perfect for me, seems to have caused unnecessary re-indexing for JDT \ncore (bug 34574).  Are you suggesting that it is no longer a problem for JDT \nCore if I flush the classpath completely?",
    "We think we have corrected the exposed problem on JDT side by 2.1, this being \nsaid it triggers quite a lot of activity in an intermediate state, so I am no \nlonger convinced it is the best move.\n\nStill worth investigating though, as it could avoid creating transient problems.",
    "Verified."
  ],
  "commentCreationDates": [
    "2003-07-10T20:27:07+02:00",
    "2003-07-14T13:51:18+02:00",
    "2003-07-14T15:56:12+02:00",
    "2003-08-29T18:02:39+02:00",
    "2003-09-01T12:26:46+02:00",
    "2003-09-01T20:50:48+02:00",
    "2003-09-03T11:58:08+02:00",
    "2003-09-03T17:54:25+02:00",
    "2003-09-03T17:56:53+02:00",
    "2003-09-04T11:07:16+02:00",
    "2003-09-04T11:19:40+02:00",
    "2003-09-04T11:23:45+02:00",
    "2003-09-04T18:43:46+02:00",
    "2003-09-05T12:28:36+02:00",
    "2003-10-14T16:13:14+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Resource /org.eclipse.debug.core/.classpath is not local.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.resources.Resource.checkLocal",
          "source": "Resource.java:313"
        },
        {
          "method": "org.eclipse.core.internal.resources.File.getContents",
          "source": "File.java:213"
        },
        {
          "method": "org.eclipse.jdt.internal.core.Util.getResourceContentsAsByteArray",
          "source": "Util.java:671"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getSharedProperty",
          "source": "JavaProject.java:1793"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.readClasspathFile",
          "source": "JavaProject.java:2089"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getRawClasspath",
          "source": "JavaProject.java:1579"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute",
          "source": "IndexAllProject.java:77"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.processing.JobManager.run",
          "source": "JobManager.java:371"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "39887",
      "date": "2003-07-10T20:27:07+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Resource /org.eclipse.jdt.launching/.classpath is not local.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.resources.Resource.checkLocal",
          "source": "Resource.java:307"
        },
        {
          "method": "org.eclipse.core.internal.resources.File.getContents",
          "source": "File.java:213"
        },
        {
          "method": "org.eclipse.jdt.internal.core.Util.getResourceContentsAsByteArray",
          "source": "Util.java:677"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getSharedProperty",
          "source": "JavaProject.java:1809"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.readClasspathFile",
          "source": "JavaProject.java:2105"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getRawClasspath",
          "source": "JavaProject.java:1593"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getRawClasspath",
          "source": "JavaProject.java:1583"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getOutputLocation",
          "source": "JavaProject.java:1375"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute",
          "source": "IndexAllProject.java:90"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.processing.JobManager.run",
          "source": "JobManager.java:375"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:536"
        }
      ],
      "number": 1,
      "commentIndex": 7,
      "bugId": "39887",
      "date": "2003-09-03T17:54:25+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "39887",
  "bugId": "39887",
  "date": "2003-07-10T20:27:07+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}