{
  "comments": [
    "conditional breakpoint encountered runtime exception , reason evaluation faile \nthread not suspended\n\n\nthis is the condition    name.length()\u003d\u003d0, name is a String property, that y \nhave initialized and empty String, it should have other values but never null.",
    "This error means that the debugger attempted to evaluate a conditional \nbreakpoint, but the thread in which the breakpoint was encountered was not \nsuspended (something else may have resumed it). Do you have steps to reproduce?",
    "I\u0027m trying to define the steps to reproduce the bug, but its being dificult \nbecause is produced by a thread intensive aplication,\nHowever it seams that this portion code is the trouble maker\n\n  public void heartbeatThread() {\n    while (!stop) {\n\ttry {\n\t  beat(name, getSyncTime(), (Participant_I) getStub());\n(CB)\t  syncBeat();\n\t  castHandler.beat(participant.getName(), \n            getSyncTime(),Participant_I) participant.getStub());\n          Thread.sleep(participant.beatsDelay);\n        } catch (Exception e) {\n\t    System.out.println(\"SendBeats:\" + e);\n\t}\n      }\n    }\n\n(CB) indicates the line where I put the conditional break \"name.length()\u003d\u003d0\", \nit seems to me that the states of the thread produced by the Thread.sleep \nconflicts with the thread states produced and espected by the Conditional \nbreak (CB). \n\n\nI have checked my .log  ant this is what it shows... \n\n!SESSION May 26, 2004 20:13:54.245 --------------------------------------------\n-\neclipse.buildId\u003dI200405211200\njava.version\u003d1.4.2_03\njava.vendor\u003dSun Microsystems Inc.\nBootLoader constants: OS\u003dwin32, ARCH\u003dx86, WS\u003dwin32, NL\u003den_US\n!ENTRY org.eclipse.debug.ui 4 120 May 26, 2004 20:13:54.245\n!MESSAGE Error logged from Debug UI: \n!STACK 1\norg.eclipse.debug.core.DebugException[100]: \ncom.sun.jdi.IncompatibleThreadStateException: Thread was not suspended\n\tat org.eclipse.jdi.internal.ThreadReferenceImpl.frameCount\n(ThreadReferenceImpl.java:152)\n\tat \norg.eclipse.jdt.internal.debug.core.model.JDIThread.getUnderlyingFrameCount\n(JDIThread.java:629)\n\tat \norg.eclipse.jdt.internal.debug.core.model.JDIThread.computeStackFrames\n(JDIThread.java:416)\n\tat \norg.eclipse.jdt.internal.debug.core.model.JDIThread.computeStackFrames\n(JDIThread.java:515)\n\tat org.eclipse.jdt.internal.debug.core.model.JDIThread.getStackFrames\n(JDIThread.java:393)\n\tat \norg.eclipse.debug.internal.ui.views.launch.LaunchViewContentProvider.getChildre\nn(LaunchViewContentProvider.java:41)\n",
    "I have reported another bug that blocks the launch of an application in the \ndebugger, https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d64106. Now it seems to \nme that the bug 64106, and this bug 64098 are related. In the bug 64106 I have \nattached a mores extensive log that shows the degeneration of this problem.\n\nI would work serveral hours this weekend in order to make a test case good \nenough to ilustrate the problem.",
    "Created an attachment (id\u003d11331)\nTesCase, with soucrce code and a log example.\n\nHy this is the TestCase,  I was able to repoduce the exepciontion\nIncompatibleThreadStateException. The steps are little trickly, first you have\nto produce an inconsistence this is achived by runing de code in debug mode,\nwith a conditional break point on line 45 \"getMsg1().equals(\"z\");\". If you\nsucced createn the inconsitency you should see threads showing wrong states in\nthe debug window as in shon in 65098.bmp.  Un fortunatly I only manage to\nproduce the exception IncompatibleThreadStateException aproximatly 1 og 15\ntimes. Afortunatly the inconsitence is produced each time producing severals\nconcecuences, the worst wan is the one that I have reported as bug 64106.\n\nI have included a log tha shows a succesfull attempt, to prorduce the\nIncompatibleThreadStateException .\n\nPlease let me now if you need more info.\n\nRegards\n",
    "Kevin, can you try to reproduce this problem with the given example.",
    "(Kevin and I looked at this). Bug 64106 is a seperate problem. We cannot \nreproduce the Incompatible thread state exception - but our thread \nsynchronization has changed since then (I20040521). Please try to reproduce \nwhen RC2 candidate is available (thread update/synchronization has been \nimproved since RC1).",
    "Also see bug 64951, which has a similar stack trace, and is reproduceable. We \nare investigating that bug.",
    "I have updated my eclipse to RC1, the bug seems to be 100% reproduceable using \nthe testCase, with the build I200405290105, .\n\nPlease let me now if you want help to reproduce it with an specific build, and \nvirtual machine.  (I can only do it only Windows XP) \n\nRegards.\n\n!SESSION Jun 04, 2004 17:35:09.367 --------------------------------------------\n-\neclipse.buildId\u003dI200405290105\njava.version\u003d1.4.2_03\njava.vendor\u003dSun Microsystems Inc.\nBootLoader constants: OS\u003dwin32, ARCH\u003dx86, WS\u003dwin32, NL\u003den_US\n!ENTRY org.eclipse.core.runtime 4 2 Jun 04, 2004 17:35:09.367\n!MESSAGE Problems occurred when invoking code from plug-\nin: \"org.eclipse.core.runtime\".\n!STACK 1",
    "Created an attachment (id\u003d11623)\nLog for RC1 buildId\u003dI200405290105\n",
    "\n\n*** This bug has been marked as a duplicate of 64951 ***"
  ],
  "commentCreationDates": [
    "2004-05-26T15:25:25+02:00",
    "2004-05-26T21:48:13+02:00",
    "2004-05-27T04:06:11+02:00",
    "2004-05-28T02:22:23+02:00",
    "2004-05-31T21:36:07+02:00",
    "2004-06-04T19:49:38+02:00",
    "2004-06-04T21:59:41+02:00",
    "2004-06-04T23:36:05+02:00",
    "2004-06-05T00:52:02+02:00",
    "2004-06-05T01:02:38+02:00",
    "2004-06-09T17:11:44+02:00"
  ],
  "traces": [
    {
      "exceptionType": "com.sun.jdi.IncompatibleThreadStateException",
      "message": "Thread was not suspended",
      "elements": [
        {
          "method": "org.eclipse.jdi.internal.ThreadReferenceImpl.frameCount",
          "source": "ThreadReferenceImpl.java:152"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIThread.getUnderlyingFrameCount",
          "source": "JDIThread.java:629"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIThread.computeStackFrames",
          "source": "JDIThread.java:416"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIThread.computeStackFrames",
          "source": "JDIThread.java:515"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIThread.getStackFrames",
          "source": "JDIThread.java:393"
        },
        {
          "method": "org.eclipse.debug.internal.ui.views.launch.LaunchViewContentProvider.getChildren",
          "source": "LaunchViewContentProvider.java:41"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "64098",
      "duplicateId": "64951",
      "date": "2004-05-27T04:06:11+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "major"
    }
  ],
  "groupId": "64951",
  "bugId": "64098",
  "duplicateId": "64951",
  "date": "2004-05-26T15:25:25+02:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "major"
}