{
  "comments": [
    "Immediately upon completion of a project creation, two threads are kicked off \nto work on a CDT project, the main thread and the CDT thread.  In one instance \nwhere I created a project, I got an exception thrown (I was debugging a \nworkbench instance at the time).  The exception was:\n\njava.util.ConcurrentModificationException\n\tat java.util.AbstractList$Itr.checkForComodification(Unknown Source)\n\tat java.util.AbstractList$Itr.next(Unknown Source)\n\tat \norg.eclipse.cdt.managedbuilder.internal.scannerconfig.ManagedBuildCPathEntryCon\ntainer.addDefinedSymbols(ManagedBuildCPathEntryContainer.java:100)\n\tat \norg.eclipse.cdt.managedbuilder.internal.scannerconfig.ManagedBuildCPathEntryCon\ntainer.getPathEntries(ManagedBuildCPathEntryContainer.java:230)\n\tat \norg.eclipse.cdt.internal.core.model.PathEntryManager.getResolvedPathEntries\n(PathEntryManager.java:162)\n\tat \norg.eclipse.cdt.internal.core.model.PathEntryManager.getResolvedPathEntries\n(PathEntryManager.java:145)\n\tat org.eclipse.cdt.core.model.CoreModel.getResolvedPathEntries\n(CoreModel.java:722)\n\tat org.eclipse.cdt.internal.core.model.CProject.getResolvedPathEntries\n(CProject.java:398)\n\tat \norg.eclipse.cdt.managedbuilder.internal.core.ManagedBuildInfo.getMacroPathEntri\nes(ManagedBuildInfo.java:538)\n\tat \norg.eclipse.cdt.managedbuilder.internal.core.ManagedBuildInfo.getDefinedSymbols\n(ManagedBuildInfo.java:304)\n\tat \norg.eclipse.cdt.internal.core.search.indexing.SourceIndexer.indexFile\n(SourceIndexer.java:94)\n\tat org.eclipse.cdt.internal.core.search.indexing.AbstractIndexer.index\n(AbstractIndexer.java:500)\n\tat org.eclipse.cdt.internal.core.index.impl.Index.add(Index.java:110)\n\tat \norg.eclipse.cdt.internal.core.search.indexing.AddCompilationUnitToIndex.indexDo\ncument(AddCompilationUnitToIndex.java:29)\n\tat org.eclipse.cdt.internal.core.search.indexing.AddFileToIndex.execute\n(AddFileToIndex.java:55)\n\tat org.eclipse.cdt.internal.core.search.processing.JobManager.run\n(JobManager.java:471)\n\tat java.lang.Thread.run(Unknown Source)\n\nUpon further examination, I found that the main thread and the C/C++ Indexing \nthread were both trying to resolve dynamic paths and symbols at the same time \nand that the methods to perform these actions were not threadsafe.    The \nfollowing is the stack dumps from the threads in question:\n\nThread [C/C++ Indexer] (Suspended (breakpoint at line 204 in \nManagedBuildCPathEntryContainer))\n\tManagedBuildCPathEntryContainer.getPathEntries() line: 204\n\tPathEntryManager.getResolvedPathEntries(ICProject, boolean) line: 162\n\tPathEntryManager.getResolvedPathEntries(ICProject) line: 145\n\tCoreModel.getResolvedPathEntries(ICProject) line: 722\n\tCProject.getResolvedPathEntries() line: 398\n\tManagedBuildInfo.getMacroPathEntries() line: 538\n\tManagedBuildInfo.getDefinedSymbols() line: 304\n\tSourceIndexer.indexFile(IDocument) line: 94\n\tSourceIndexer(AbstractIndexer).index(IDocument, IIndexerOutput) line: \n500\n\tIndex.add(IDocument, IIndexer) line: 110\n\tAddCompilationUnitToIndex.indexDocument(IIndex) line: 29\n\tAddCompilationUnitToIndex(AddFileToIndex).execute(IProgressMonitor) \nline: 55\n\tIndexManager(JobManager).run() line: 471\n\tThread.run() line: not available\n\nThread [main] (Suspended (breakpoint at line 204 in \nManagedBuildCPathEntryContainer))\n\tManagedBuildCPathEntryContainer.getPathEntries() line: 204\n\tPathEntryManager.getResolvedPathEntries(ICProject, boolean) line: 162\n\tPathEntryManager.getResolvedPathEntries(ICProject) line: 145\n\tPathEntryManager.pathEntryStoreChanged(PathEntryStoreChangedEvent) \nline: 1088\n\tDefaultPathEntryStore.fireContentChangedEvent(IProject) line: 380\n\tDefaultPathEntryStore.descriptorChanged(CDescriptorEvent) line: 356\n\tCDescriptorManager$3.run() line: 354\n\tInternalPlatform.run(ISafeRunnable) line: 615\n\tPlatform.run(ISafeRunnable) line: 747\n\tCDescriptorManager.fireEvent(CDescriptorEvent) line: 345\n\tCDescriptor.saveProjectData() line: 578\n\tDefaultPathEntryStore.setRawPathEntries(IPathEntry[]) line: 122\n\tPathEntryManager.saveRawPathEntries(ICProject, IPathEntry[]) line: 856\n\tSetPathEntriesOperation.executeOperation() line: 54\n\tSetPathEntriesOperation(CModelOperation).execute() line: 312\n\tSetPathEntriesOperation(CModelOperation).run(IProgressMonitor) line: \n531\n\tWorkspace.run(IWorkspaceRunnable, ISchedulingRule, int, \nIProgressMonitor) line: 1673\n\tCModelManager.runOperation(CModelOperation, IProgressMonitor) line: 903\n\tPathEntryManager.setRawPathEntries(ICProject, IPathEntry[], \nIProgressMonitor) line: 453\n\tCoreModel.setRawPathEntries(ICProject, IPathEntry[], IProgressMonitor) \nline: 688\n\tCProject.setRawPathEntries(IPathEntry[], IProgressMonitor) line: 412\n\tManagedBuildManager.initBuildInfoContainer(ManagedBuildInfo) line: 721\n\tManagedBuildManager.initBuildInfoContainer(IResource) line: 682\n\tNewManagedPalmOS4Wizard(NewManagedProjectWizard).doRunEpilogue\n(IProgressMonitor) line: 199\n\tNewCProjectWizard$1.run(IProgressMonitor) line: 225\n\tWorkspaceModifyDelegatingOperation.execute(IProgressMonitor) line: 67\n\tWorkspaceModifyOperation$1.run(IProgressMonitor) line: 91\n\tWorkspace.run(IWorkspaceRunnable, ISchedulingRule, int, \nIProgressMonitor) line: 1673\n\tWorkspaceModifyDelegatingOperation(WorkspaceModifyOperation).run\n(IProgressMonitor) line: 105\n\tModalContext.runInCurrentThread(IRunnableWithProgress, \nIProgressMonitor) line: 303\n\tModalContext.run(IRunnableWithProgress, boolean, IProgressMonitor, \nDisplay) line: 253\n\tWizardDialog.run(boolean, boolean, IRunnableWithProgress) line: 752\n\tNewManagedPalmOS4Wizard(NewCProjectWizard).invokeRunnable\n(IRunnableWithProgress) line: 238\n\tNewManagedPalmOS4Wizard(NewCProjectWizard).performFinish() line: 161\n\tWizardDialog.finishPressed() line: 609\n\tWizardDialog.buttonPressed(int) line: 305\n\tDialog$2.widgetSelected(SelectionEvent) line: 506\n\tTypedListener.handleEvent(Event) line: 89\n\tEventTable.sendEvent(Event) line: 82\n\tButton(Widget).sendEvent(Event) line: 796\n\tDisplay.runDeferredEvents() line: 2772\n\tDisplay.readAndDispatch() line: 2431\n\tWizardDialog(Window).runEventLoop(Shell) line: 668\n\tWizardDialog(Window).open() line: 648\n\tNewWizardAction.run() line: 163\n\tNewWizardDropDownAction.run() line: 128\n\tNewWizardDropDownAction(Action).runWithEvent(Event) line: 881\n\tActionContributionItem.handleWidgetSelection(Event, boolean) line: 915\n\tActionContributionItem.access$2(ActionContributionItem, Event, \nboolean) line: 866\n\tActionContributionItem$8.handleEvent(Event) line: 824\n\tEventTable.sendEvent(Event) line: 82\n\tToolItem(Widget).sendEvent(Event) line: 796\n\tDisplay.runDeferredEvents() line: 2772\n\tDisplay.readAndDispatch() line: 2431\n\tWorkbench.runEventLoop(Window$IExceptionHandler, Display) line: 1377\n\tWorkbench.runUI() line: 1348\n\tWorkbench.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 254\n\tPlatformUI.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 141\n\tIDEApplication.run(Object) line: 96\n\tPlatformActivator$1.run(Object) line: 335\n\tEclipseStarter.run(Object) line: 273\n\tEclipseStarter.run(String[], Runnable) line: 129\n\tNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not \navailable [native method]\n\tNativeMethodAccessorImpl.invoke(Object, Object[]) line: not available\n\tDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not \navailable\n\tMethod.invoke(Object, Object[]) line: not available\n\tMain.basicRun(String[]) line: 183\n\tMain.run(String[]) line: 644\n\tMain.main(String[]) line: 628\n\nThe solution I implemented and test was to make the method responsible for \nresolving those dynamic values synchronized - \nPahtEntryManager.getResolvedPathEntries().  By adding the synchronized tag to \nthe method, this prevented multiple threads from trying to get and \nsimultaneously creating duplicate entries in the resolvedMap structure for a \nproject and thereby trying to resolve the dynamic includes and symbols \nsimultaneously.",
    "When looking at PathEntryManager, I see that this has already been fixed in \nthe HEAD by the addition of a remove duplicate path entries step.  This is \nanother way to fix the problem and addresses this issue.  FIxed in \nPathEntryManager revision 1.63, no bug number.  I\u0027m also assuming this\u0027ll be \nincluded in 2.1 since it\u0027s already in the head.",
    "Closed as already fixed."
  ],
  "commentCreationDates": [
    "2004-09-30T02:17:29+02:00",
    "2004-10-13T19:13:04+02:00",
    "2004-10-20T22:27:52+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.util.ConcurrentModificationException",
      "elements": [
        {
          "method": "java.util.AbstractList$Itr.checkForComodification",
          "source": "Unknown Source"
        },
        {
          "method": "java.util.AbstractList$Itr.next",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.cdt.managedbuilder.internal.scannerconfig.ManagedBuildCPathEntryContainer.addDefinedSymbols",
          "source": "ManagedBuildCPathEntryContainer.java:100"
        },
        {
          "method": "org.eclipse.cdt.managedbuilder.internal.scannerconfig.ManagedBuildCPathEntryContainer.getPathEntries",
          "source": "ManagedBuildCPathEntryContainer.java:230"
        },
        {
          "method": "org.eclipse.cdt.internal.core.model.PathEntryManager.getResolvedPathEntries",
          "source": "PathEntryManager.java:162"
        },
        {
          "method": "org.eclipse.cdt.internal.core.model.PathEntryManager.getResolvedPathEntries",
          "source": "PathEntryManager.java:145"
        },
        {
          "method": "org.eclipse.cdt.core.model.CoreModel.getResolvedPathEntries",
          "source": "CoreModel.java:722"
        },
        {
          "method": "org.eclipse.cdt.internal.core.model.CProject.getResolvedPathEntries",
          "source": "CProject.java:398"
        },
        {
          "method": "org.eclipse.cdt.managedbuilder.internal.core.ManagedBuildInfo.getMacroPathEntries",
          "source": "ManagedBuildInfo.java:538"
        },
        {
          "method": "org.eclipse.cdt.managedbuilder.internal.core.ManagedBuildInfo.getDefinedSymbols",
          "source": "ManagedBuildInfo.java:304"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.SourceIndexer.indexFile",
          "source": "SourceIndexer.java:94"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.AbstractIndexer.index",
          "source": "AbstractIndexer.java:500"
        },
        {
          "method": "org.eclipse.cdt.internal.core.index.impl.Index.add",
          "source": "Index.java:110"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.AddCompilationUnitToIndex.indexDocument",
          "source": "AddCompilationUnitToIndex.java:29"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.AddFileToIndex.execute",
          "source": "AddFileToIndex.java:55"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.processing.JobManager.run",
          "source": "JobManager.java:471"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "75359",
      "date": "2004-09-30T02:17:29+02:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "normal"
    }
  ],
  "groupId": "75359",
  "bugId": "75359",
  "date": "2004-09-30T02:17:29+02:00",
  "product": "CDT",
  "component": "cdt-core",
  "severity": "normal"
}