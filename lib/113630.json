{
  "comments": [
    "The attached test case throws this error while executing using Eclipse 3.1 and \nAJDT 1.3.0",
    "Created an attachment (id\u003d28736)\njava and aj files and a JUnit test case to reproduce this\n\njava and aj files and a JUnit test case to reproduce this.\n\nI also think this bug might be a problem with my set up but it is recurring.",
    "Not sure what error you get but I get IncompatibleClassChangeError when running\nthe JUnit test program included.\n\njava.lang.IncompatibleClassChangeError\n\tat\ncom.blueprint.util.aspectj5.test.PropertySupportAspect5.ajc$interMethodDispatch1$com_blueprint_util_aspectj5_test_PropertySupportAspect5$com_blueprint_util_aspectj5_test_PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5.aj)\n\tat\ncom.blueprint.util.aspectj5.test.BeanTestCase.testPropertyChange(BeanTestCase.java:25)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
    "That\u0027s right. It is in the bug summary above.",
    "Ah yes, ignore me - I\u0027m suffering bugzilla blindness from looking at too many\nbugs.  The supplied testcase also highlights an interesting problem with\nincremental compilation too.",
    "The incremental compilation bug is there in my mixin pattern implementation \nthat doesn\u0027t use annotations but it works there.",
    "Do you have a workaround for this bug until it is fixed? Anything that would \ngive me a annotation based mixin implementation.\n\n",
    "I will look at this imminently and try to get you a workaround/fix - just need\nto finish another bug first.",
    "testcase is checked into CVS (not the incremental compilation problem, just the\nIncompatibleClassChange problem).",
    "I changed the retention policy on both annotations to RUNTIME and the code is \nworking now. My initial assumption that the problem might be my set up seems \nto be true.\n\n",
    "I noticed this morning that this was the problem too.  I did append a note to\nbugzilla but it failed to attach correctly, grrrrr.  Anyway, you should of\ncourse get a nice message when this happens, and I\u0027ve just put support in for that:\n\nb.addPropertyChangeListener( \"name\", this );\n  ^^^^^^^^^^^^^^^^^^^^\nBeanTestCase.java:18:0::0 The method addPropertyChangeListener(String,\nBeanTestCase) is undefined for the type Bean\n\ndeclare parents: @javaBean * implements PropertySupport;\n                  ^^^^^\nPropertySupportAspect5.aj:9:0::0 Failing match because annotation \u0027javaBean\u0027 on\ntype \u0027Bean\u0027 has SOURCE retention.  Matching allowed when RetentionPolicy is\nCLASS or RUNTIME\n\n\nI\u0027ll check it in imminently.",
    "For the sake of completeness I want to include my trip round the houses to\ndiscover the annotation was SOURCE (should have realised straightaway, doh!)\n\n\u003d\u003d\u003d\n\nException in thread \"main\" java.lang.IncompatibleClassChangeError\n        at\nPropertySupportAspect5.ajc$interMethodDispatch1$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5.aj)\n        at BeanTestCase.testPropertyChange(BeanTestCase.java:18)\n        at BeanTestCase.main(BeanTestCase.java:13)\n\nline18 in BeanTestCase is:\n\nb.addPropertyChangeListener( \"name\", this );\n\nwhich in the bytecode looks like this:\n\nPropertySupportAspect5.ajc$interMethodDispatch1$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(b,\n\"name\", this);\n\n\nIn PropertySupportAspect5 we find:\n\n    public static void\najc$interMethodDispatch1$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5$PropertySupport,\njava.beans.PropertyChangeListener);\n    public static void\najc$interMethodDispatch1$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5$PropertySupport,\njava.lang.String, java.beans.PropertyChangeListener);\n\nfirst one takes a propertysupport object and a propertychangelistener.\nsecond one takes a propertysupport object, a string and a propertychangelistener\n\nin this case we are calling the \u00272nd\u0027 one from BeanTestCase\n\njavap -verbose PropertySupport5 gives:\n\npublic static void\najc$interMethod$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5$PropertySupport,\njava.beans.PropertyChangeListener);\n  Code:\n   Stack\u003d0, Locals\u003d2, Args_size\u003d2\n   0:\treturn\n\npublic static void\najc$interMethodDispatch1$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5$PropertySupport,\njava.beans.PropertyChangeListener);\n  Code:\n   Stack\u003d2, Locals\u003d2, Args_size\u003d2\n   0:\taload_0\n   1:\taload_1\n   2:\tinvokeinterface\t#53,  2; //InterfaceMethod\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener:(Ljava/beans/PropertyChangeListener;)V\n   7:\treturn\n\npublic static void\najc$interMethod$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5$PropertySupport,\njava.lang.String, java.beans.PropertyChangeListener);\n  Code:\n   Stack\u003d0, Locals\u003d3, Args_size\u003d3\n   0:\treturn\n\npublic static void\najc$interMethodDispatch1$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener(PropertySupportAspect5$PropertySupport,\njava.lang.String, java.beans.PropertyChangeListener);\n  Code:\n   Stack\u003d3, Locals\u003d3, Args_size\u003d3\n   0:\taload_0\n   1:\taload_1\n   2:\taload_2\n   3:\tinvokeinterface\t#59,  3; //InterfaceMethod\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener:(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V\n   8:\treturn\n\nIn the case where we call the 3arg variant of\najc$\u003c...\u003e$addPropertyChangeListener() you can see that it calls\nPropertySupport5$PropertySupport.addPropertyChangeListener(PropertyChangeListener)\n\nIn PropertySupportAspect5$PropertySupport we see:\n\n    public abstract void\naddPropertyChangeListener(java.beans.PropertyChangeListener);\n    public abstract void addPropertyChangeListener(java.lang.String,\njava.beans.PropertyChangeListener);\n\nAnd in \u0027Bean\u0027 which is declare parents\u0027d to implement that interface we see:\n\npublic class Bean extends java.lang.Object implements java.io.Serializable{\n    private java.lang.String name;\n    public Bean();\n    public java.lang.String getName();\n    public void setName(java.lang.String);\n}\n\nerrrrrr!  It\u0027s missing.  Bean should be marked as implementing PropertySupport\nand it should have the default implementations from the aspect stuffed into it.\n\nSo, you get IncompatibleClassChangeError.\n\nFirst, lets turn on showWeaveInfo to see what it says:\n\n\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener(java.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener(java.lang.String,\njava.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.removePropertyChangeListener(java.lang.String,\njava.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.removePropertyChangeListener(java.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.hasListeners(java.lang.String)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.firePropertyChange(Bean,\njava.lang.String, java.lang.String, java.lang.String)\u0027)\n\nInterestingly there is *nothing* about the declare parents working.  Let\u0027s\nchange the decp statement to explicitly target Bean.\n\nExtending interface set for type \u0027Bean\u0027 (Bean.java) to include\n\u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj)\nType \u0027Bean\u0027 (Bean.java) has intertyped method from \u0027PropertySupportAspect5\u0027\n(PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener(java.beans.PropertyChangeListener)\u0027)\nType \u0027Bean\u0027 (Bean.java) has intertyped method from \u0027PropertySupportAspect5\u0027\n(PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener(java.lang.String,\njava.beans.PropertyChangeListener)\u0027)\nType \u0027Bean\u0027 (Bean.java) has intertyped method from \u0027PropertySupportAspect5\u0027\n(PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.removePropertyChangeListener(java.lang.String,\njava.beans.PropertyChangeListener)\u0027)\nType \u0027Bean\u0027 (Bean.java) has intertyped method from \u0027PropertySupportAspect5\u0027\n(PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.removePropertyChangeListener(java.beans.PropertyChangeListener)\u0027)\nType \u0027Bean\u0027 (Bean.java) has intertyped method from \u0027PropertySupportAspect5\u0027\n(PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.hasListeners(java.lang.String)\u0027)\nType \u0027Bean\u0027 (Bean.java) has intertyped method from \u0027PropertySupportAspect5\u0027\n(PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.firePropertyChange(Bean,\njava.lang.String, java.lang.String, java.lang.String)\u0027)\n\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener(java.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.addPropertyChangeListener(java.lang.String,\njava.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.removePropertyChangeListener(java.lang.String,\njava.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.removePropertyChangeListener(java.beans.PropertyChangeListener)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.hasListeners(java.lang.String)\u0027)\nType \u0027PropertySupportAspect5$PropertySupport\u0027 (PropertySupportAspect5.aj) has\nintertyped method from \u0027PropertySupportAspect5\u0027 (PropertySupportAspect5.aj:\u0027void\nPropertySupportAspect5$PropertySupport.firePropertyChange(Bean,\njava.lang.String, java.lang.String, java.lang.String)\u0027)\n\nYou can see Bean gets a lot more action now and the testcase runs fine.  So the\nquestion is why \u0027@javaBean *\u0027 didn\u0027t appear to match the Bean type in some ways\nbut did in others...\n\nBreakpoint in DeclareParents.maybeGetNewParent() - what does it think?\n\nIt is called during AjLookupEnvironment.completeTypeBindings() (i.e. during\ncompilation)\n- it succeeds and returns PropertySupportAspect5$PropertySupport\n\nIn BcelWeaver we also do the declare parents (for the case of binary weaving). \nHere the match fails and the decp doesn\u0027t apply.  Why is that?  Well it turns\nout that the annotation has SOURCE retention so of course it is lost and never\nput into the bytecode.  \n\nSo the fix is for us to put out an message if you attempt to match on a SOURCE\nannotation.\n",
    "Fix checked in to give the nice new messages.  Will close when build available.",
    "Fix available - i believe incremental case is a symptom of the same problem. \nPlease reopen if you still see a problem with the incremental compilation."
  ],
  "commentCreationDates": [
    "2005-10-25T08:09:18+02:00",
    "2005-10-25T08:13:56+02:00",
    "2005-10-25T09:14:31+02:00",
    "2005-10-25T09:47:05+02:00",
    "2005-10-25T11:12:29+02:00",
    "2005-10-25T13:31:36+02:00",
    "2005-10-26T12:13:26+02:00",
    "2005-10-26T12:19:18+02:00",
    "2005-10-26T14:28:29+02:00",
    "2005-10-27T11:43:04+02:00",
    "2005-10-27T12:22:18+02:00",
    "2005-10-27T12:24:04+02:00",
    "2005-10-27T12:49:52+02:00",
    "2005-10-28T11:52:55+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IncompatibleClassChangeError",
      "elements": [
        {
          "method": "com.blueprint.util.aspectj5.test.PropertySupportAspect5.ajc$interMethodDispatch1$com_blueprint_util_aspectj5_test_PropertySupportAspect5$com_blueprint_util_aspectj5_test_PropertySupportAspect5$PropertySupport$addPropertyChangeListener",
          "source": "PropertySupportAspect5.aj"
        },
        {
          "method": "com.blueprint.util.aspectj5.test.BeanTestCase.testPropertyChange",
          "source": "BeanTestCase.java:25"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:478"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:344"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "113630",
      "date": "2005-10-25T09:14:31+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.IncompatibleClassChangeError",
      "elements": [
        {
          "method": "PropertySupportAspect5.ajc$interMethodDispatch1$PropertySupportAspect5$PropertySupportAspect5$PropertySupport$addPropertyChangeListener",
          "source": "PropertySupportAspect5.aj"
        },
        {
          "method": "BeanTestCase.testPropertyChange",
          "source": "BeanTestCase.java:18"
        },
        {
          "method": "BeanTestCase.main",
          "source": "BeanTestCase.java:13"
        }
      ],
      "number": 1,
      "commentIndex": 11,
      "bugId": "113630",
      "date": "2005-10-27T12:24:04+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "113630",
  "bugId": "113630",
  "date": "2005-10-25T08:09:18+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}