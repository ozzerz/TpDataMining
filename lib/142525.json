{
  "comments": [
    "I got StackOverflow error when rendering a big diagram with 2300 nodes and 3000+  connection lines. Unfortunately, this is a valid use case because my tool visualizes the legacy code which tends to be a huge monolithic program.\n\n\njava.lang.StackOverflowError\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)\n at org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue(RankAssigmentSolver.java:40)",
    "GEF version: 3.2",
    "You\u0027ll need to provide a test case that demonstrates this in order for us to investiate...",
    "Potential candidate for RC4",
    "The graph layout algorithm is recursive in many places, removing the first place will probably just expose another overflow. I don\u0027t think eliminating recursion is a simple task.",
    "The error is reproduced with my plugins. Which data you need to investigate ? I added sever print statements in the first for loop of depthFirstCutValue(). The part of printout likes this:\n\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@2e162e16 edge\u003dorg.eclipse.draw2d.graph.Edge@2daa2daa\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@13d813d8 (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@2e822e82 edge\u003dorg.eclipse.draw2d.graph.Edge@2e162e16\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@1c9e1c9e (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@2eee2eee edge\u003dorg.eclipse.draw2d.graph.Edge@2e822e82\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@25642564 (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@2f5a2f5a edge\u003dorg.eclipse.draw2d.graph.Edge@2eee2eee\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@2e2a2e2a (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@2fc62fc6 edge\u003dorg.eclipse.draw2d.graph.Edge@2f5a2f5a\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@36f436f4 (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@30323032 edge\u003dorg.eclipse.draw2d.graph.Edge@2fc62fc6\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@3fba3fba (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@309e309e edge\u003dorg.eclipse.draw2d.graph.Edge@30323032\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@48804880 (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@310a310a edge\u003dorg.eclipse.draw2d.graph.Edge@309e309e\nin a new depthFirstCutValue, node\u003dN(SystemNodeEditPart( org.eclipse.gmf.runtime.notation.impl.NodeImpl@51465146 (visible: true, type: null, mutable: true) ))\ninside first for loop, list.size\u003d1 i\u003d0\ninside first for loop,if e\u003dorg.eclipse.draw2d.graph.Edge@31763176 edge\u003dorg.eclipse.draw2d.graph.Edge@310a310a\n\n\n\nAlso noticed that the overflow did not happen if I run in debug mode.",
    "This doesn\u0027t help much... is there an example graph that you can construct that demonstrates this?  Is it possible there\u0027s a circular dependency in the edges that isn\u0027t being detected and reversed?",
    "I don\u0027t think there is circular dependency in the edges becuase if I run it in debug mode, the StackOverflow did not happen and diagram did show up although it took very long time.\n\nI know it is hard to track down. I have model file but not sure if it is helpful for you by just looking the file. I will update this bug if I can reproduce with smaller model.",
    "Try creating a graph that is just a long chain of one node connected to the next. Cycles are not the problem, since this part of the algorithm does not consider direction of edges.",
    "Looks like the client is using GMF.",
    "a Trick we can do to improve the situation, although it would not fix all cases, is to add a context member to the class and get ride of the 2 paramters in depthFirstCutValue. This could be applied in other recurtsive use cases as well. By doing that we will be able to handle depper use cases but eventually we will hit the problem again (unless we re-write the methods to use loop instead in recursion which i do not beileve is possible in this release)",
    "Any further word on this defect, is this a 3.2.1 candidate?",
    "Changing to RESOLVE REMIND based on the above comments.\nReporter to re-open with more information if enhancement is still required.",
    "This is an actual problem; there are few places in the rank assignment solver where stack over flow error will happen when used with big graphs ; for example updateMinMax\n\n",
    "2 implementatins for the updateMinMax usilng loop instead of recursion to avoid stack over flows \n\n1 - \n\nvoid updateMinMax(Node root, int min) {\n    int count \u003d min;\n    final class ObjectData{\n        ObjectData parent \u003d null;\n        Node node \u003d null;\n        int refCount \u003d 0 ;\n        public ObjectData(ObjectData parentNode,Node node){\n            parent \u003d parentNode;\n            this.node \u003d node;\n        }\n        \n        public ObjectData getParentData(){\n            return parent;\n        }\n        public Node getNode(){\n            return node;\n        }\n        public void inc(){\n            refCount++;\n        }\n       public void dec(){\n            refCount--;\n        }\n       public int getRefCount(){\n            return refCount;\n        }\n    }\n\n    List data \u003d new ArrayList();\n    data.add(new ObjectData(null,root));\n    do {\n        ObjectData objectData \u003d (ObjectData)data.get(data.size()-1);\n        Node node \u003d objectData.getNode();\n        setTreeMin(node, count);\n        data.remove(data.size()-1);\n        EdgeList edges \u003d getSpanningTreeChildren(node);\n        for (int i \u003d edges.size()-1; i \u003e\u003d0 ; i--){\n            Node currentNode \u003d getTreeTail(edges.getEdge(i));\n            ObjectData childNode \u003d new ObjectData(objectData,currentNode);\n            data.add(childNode);\n            objectData.inc(); \n        }\n        if (objectData.getRefCount()\u003d\u003d0){\n            setTreeMax(node, count);\n            ObjectData parentData \u003d objectData.getParentData();\n            count++;\n            while (parentData!\u003dnull \u0026\u0026 parentData.getRefCount()\u003e0 \u0026\u0026 objectData.getRefCount()\u003d\u003d0){\n                parentData.dec();\n                if (parentData.getRefCount()\u003d\u003d0){\n                    setTreeMax(parentData.getNode(), count);\n                    count++;\n                }\n                objectData \u003d parentData;\n                parentData \u003d parentData.getParentData();\n            }\n        }\n    }while (!data.isEmpty());\n }\n\n2- void updateMinMax(final Node root, int count) {\n\tclass Entry {\n\t\tEntry(Node node) {\n\t\t\tthis.node\u003dnode;\n\t\t}\n\t\tNode node;\n\t\tboolean recursed;\n\t}\n\tStack stack \u003d new Stack();\n\tstack.push(new Entry(root));\n\t\n\twhile (!stack.isEmpty()) {\n\t\tEntry current \u003d (Entry) stack.peek();\n\t\tif (!current.recursed) {\n\t\t\tsetTreeMin(current.node, count);\n\t\t\tcurrent.recursed \u003d true;\n\t\t\tEdgeList edges \u003d getSpanningTreeChildren(current.node);\n\t\t\tfor (int i \u003d edges.size() - 1; i \u003e\u003d 0; i--)\n\t\t\t\tstack.push(new Entry (getTreeTail(edges.getEdge(i))));\t\t\t\n\t\t} else {\n\t\t\tsetTreeMax(current.node, count++);\n\t\t\tstack.pop();\n\t\t}\n\t}\n}\n\n\nwe will invistigate the performance of each implementation and use the faster one, also we will try to re-write depthFirstCutValue using loops as well",
    "move to inbox. \n\nThe stack over flow issue is a generic issue in the GraphLayout algorit"
  ],
  "commentCreationDates": [
    "2006-05-18T17:58:16+02:00",
    "2006-05-18T17:58:53+02:00",
    "2006-05-18T18:01:33+02:00",
    "2006-05-18T18:03:29+02:00",
    "2006-05-18T21:20:43+02:00",
    "2006-05-19T19:46:05+02:00",
    "2006-05-24T04:35:56+02:00",
    "2006-05-25T21:21:04+02:00",
    "2006-05-25T21:44:33+02:00",
    "2006-05-29T16:55:15+02:00",
    "2006-05-31T18:11:30+02:00",
    "2006-07-14T15:00:02+02:00",
    "2006-08-11T20:45:48+02:00",
    "2006-09-26T17:11:51+02:00",
    "2006-10-12T17:23:38+02:00",
    "2007-05-24T17:41:31+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StackOverflowError",
      "elements": [
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        },
        {
          "method": "org.eclipse.draw2d.graph.RankAssigmentSolver.depthFirstCutValue",
          "source": "RankAssigmentSolver.java:40"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "142525",
      "date": "2006-05-18T17:58:16+02:00",
      "product": "GEF",
      "component": "draw2d",
      "severity": "major"
    }
  ],
  "groupId": "142525",
  "bugId": "142525",
  "date": "2006-05-18T17:58:16+02:00",
  "product": "GEF",
  "component": "draw2d",
  "severity": "major"
}