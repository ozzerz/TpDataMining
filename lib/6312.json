{
  "comments": [
    "Exceptions trown in asyncExecs only result in SWTException. No stack trace from \nthe wrapped throwable printed.\n\n\n4 org.eclipse.ui 0 Failed to execute runnable (java.lang.NullPointerException)\norg.eclipse.swt.SWTException: Failed to execute runnable \n(java.lang.NullPointerException)\n\tat org.eclipse.swt.SWT.error(SWT.java:1877)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java\n(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java\n(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java\n(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:758)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:820)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:151)\n\tat org.eclipse.core.launcher.Main.run(Main.java:502)\n\tat org.eclipse.core.launcher.UIMain.main(UIMain.java:52)",
    "SWT should overwrite printStackTrace(...) methods.",
    "The print stack trace methods can not be overridden while maintaining \ncompatibility with J2ME, since they take arguments (PrintStream and \nPrintWriter) that are classes which are not available in that library. \nMaintaining J2ME compatibility is a hard constraint on our implementation, so \nwe will not be adding this feature.\n\nNote: The closest we could get to supporting this was to override \nprintStackTrace(), the zero argument version of the method which prints to \nstandard err. That capability has been in place for several weeks.",
    "So the workbench can find a workaround?\n\nIt is very hard to fix bugs given the current stacktraces.",
    "If you\u0027re holding onto the exception, say in \"ex\", you can just write \nsomething like:\n\nif (ex instanceof SWTError || ex instanceof SWTException)\n\tif (ex.throwable !\u003d null) {\n\t\tSystem.err.println(\"*** Stack trace of contained error ***\");\n\t\tex.throwable.printStackTrace();\n\t}\n\nI thought the workbench was simply displaying what was printed to System.err \nin red though, in which case I\u0027m not sure why it isn\u0027t working now.\n",
    "reopening, moving to platform UI (sorry, didn\u0027t work last time)\nThe platform could do the described trick in Workbench.runEventLoop.",
    "Workbench is calling Core API to log the exception and they can\u0027t make \nreference to SWT to workaround this problem.\nI think we could log the exception and the \"ex.throwable\" in case of SWT.",
    "*** Bug 5193 has been marked as a duplicate of this bug. ***",
    "Defer until there are resources to address this. I would like to see a real \nsolution to reporting errors. From the user\u0027s perspective stack traces and log \nfiles are inappropriate. ",
    "But we need a quick fix. It\u0027s ok for me if it\u0027s temporary, but this is a big \nproblem:\nAll SWT walkbacks are currently not usable as they don\u0027t show the real position \nof the problem. \nWalkbacks in the log are the most important source we get to fix bugs. It\u0027s the \nmost helpful thing what users can report. The logs must be as descriptives as \nthey can be.\n",
    "To clarify the severity of the problem: whenever _any_ exception is thrown from \nan asyncExec then the only walkback you get is the SWTException. As a \nconsequence error reports we are getting miss the most important piece of \ninformation. \n\nAs a short term solution Workbench.runEventLoop could log the stack trace of \nthe exception wrapped inside the SWTException. Notice, that it already handles \nthe SWTException in a special way.\n",
    "Important for improved serviceability plan item.\n\nAs mentioned above, SWTError and SWTException override printStackTrace() to \ndump nested exception, but not printStackTrace(PrintStream) or printStackTrace\n(PrintWriter).\nSee bug 8508.\nThe log uses these other ones, so the nested exception does not get logged.\n\nAdded workaround for SWTException to handleExceptionInEventLoop in Workbench \nand Window.\n\nNote that this doesn\u0027t change the handling for SWTError, which just gets \npropagated back.  See bug 8507 for related SWT bug.\n"
  ],
  "commentCreationDates": [
    "2001-11-26T16:02:57+01:00",
    "2001-11-28T00:20:54+01:00",
    "2001-11-28T13:53:40+01:00",
    "2001-11-28T15:29:23+01:00",
    "2001-11-28T16:20:45+01:00",
    "2001-11-28T16:35:19+01:00",
    "2001-11-28T17:38:08+01:00",
    "2001-11-30T16:00:57+01:00",
    "2001-12-13T01:16:37+01:00",
    "2001-12-13T09:21:53+01:00",
    "2001-12-13T10:50:44+01:00",
    "2002-01-25T22:12:58+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Failed to execute runnable  (java.lang.NullPointerException)",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:1877"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:758"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:820"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:285"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:151"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:502"
        },
        {
          "method": "org.eclipse.core.launcher.UIMain.main",
          "source": "UIMain.java:52"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "6312",
      "date": "2001-11-26T16:02:57+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "6312",
  "bugId": "6312",
  "date": "2001-11-26T16:02:57+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}