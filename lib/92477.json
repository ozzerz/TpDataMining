{
  "comments": [
    "After migrating a project to JDK 1.5, which involved introducing generics and\nenhanced for loops, everything compiles properly except for the class\ncom.additifs.brac.App (see below). If I remove this class, the error occurs on\nthe next one. If I remove all classes from this package, the error transfers to\nthe first class encountered in a subpackage (like a breadth-first search of the\npackage tree structure).\n\nThe whole exception detail is as follows:\n\nSeverity\tDescription\tResource\tIn Folder\tLocation\tCreation Time\n2\tInternal compiler error\tApp.java\tbrac25/src/com/additifs/brac\tline 0\t22 avril\n2005 22:50:41\n\njava.lang.NullPointerException\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.findSuperTypeErasingTo(ReferenceBinding.java:504)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding.boundCheck(TypeVariableBinding.java:90)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.resolve(ParameterizedTypeBinding.java:654)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:53)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.superclass(BinaryTypeBinding.java:771)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle(ClassScope.java:956)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle(ClassScope.java:918)\n\tat\norg.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:42)\n\tat\norg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:141)\n\tat\norg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType(TypeReference.java:104)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype(ClassScope.java:1050)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:719)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:856)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:243)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:195)\n\tat org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:307)\n\tat org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:321)\n\tat\norg.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:239)\n\tat\norg.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:189)\n\tat\norg.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:49)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:212)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:140)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:581)\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1021)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:757)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:160)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:198)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:227)\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1021)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:757)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:230)\n\tat\norg.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:249)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:278)\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:139)\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:200)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:67)\n\nIf you need any further information, please feel free to ask me. Thanks...",
    "I am trying to specify 3.1M6 as the target version but the Bugzilla system does\nnot let me do so even though I am the bug submitter. A bug in Bugzilla too?",
    "Some classes specific to my project, generated with a code generation\napplication, are in a Jar archive. The Jar was generated by an Ant script. If I\nunjar them into a source folder and remove the Jar from the build path,\neverything works, compiles, and executes properly. There seems to be a clue\naround the presence of my core files in a Jar...",
    "Please provide steps to reproduce, then reopen.",
    "Created an attachment (id\u003d20396)\nTest case for reproducing the bug\n",
    "I just attached a test case for reproducing the bug. It is an Eclipse project\nyou just have to include into an existing workspace. It will not run since\nseveral libraries required by some JARs (e.g., Struts) are missing, but it can\nstill compile without errors.\n\nIn the project, the bugtest.jar and src2 source folder have exactly the same\ncontents. The project is currently configured to include bugtest jar (and\nexclude src2 folder), which reproduces the bug. If I change it to include the\nnon-JARred src2 folder (and exclude bugtest.jar), the bug does not occur anymore\nand everthing compiles correctly.\n\nBy the way, bugtest.jar is a JAR I created manually with the JDK 1.5 jar\nutility. My previous remark about an Ant script thus does not hold anymore.\n\nThe dbfw15.jar library is a database framework that makes extensive use of\nGenerics, and bugtest.jar uses the generic classes of this library. In my\noriginal project, I saw that if I use non-generic classes in my specific classes\nJAR (the equivalent of bugtest.jar), even with the same Generics-based\ndbfw15.jar library, the bug won\u0027t occur. Several warnings will be issued, but no\nerrors.\n\nThis is why I see a clue in the combined use of Generics-based classes in JARs.",
    "Could you please redo the attachment using standard archive file (zip or jar) ? \nI cannot read it.",
    "Created an attachment (id\u003d20399)\nTest case, Zip archive instead of 7-Zip\n\nHere is a Zip version. My first attachment was in 7-Zip format.",
    "Problems come from the fact that we lazily resolve some binary parameterized\ntype during hierarchy connecting stage. In sources, we do not perform bound\nchecks, in binaries we do them eagerly.",
    "My aggressive take on the problem would be: we stop checking bounds in\nunresolved types. These can only occur through binaries.\nIn addition to performance gain, I wonder how invalid classfiles could be\ncreated with problem parameterized type arguments. Need to double check",
    "Currently, our problem type creation will persist invalid parameterized types:\npublic class X\u003cU extends Exception\u003e {\n\tX\u003cString\u003e xs; // --\u003e X\u003cString\u003e\n}\n\nI think we should remove such signatures in this case.",
    "Unclear how we would handle binary compatibility issues (i.e. at some point\nX\u003cString\u003e was fine, but now it isn\u0027t anymore. Binaries could surface that).\nPlease investigate how other compilers are recovering from this.",
    "Everything works fine with the javac compiler provided with JDK 1.5.0_02.",
    "Removed bounds checks in binary resolve.\n\njavac does not detect binary incompatibilities which we will fix up with \nincremental build.",
    "Verified in I20050510-0010"
  ],
  "commentCreationDates": [
    "2005-04-23T05:42:47+02:00",
    "2005-04-23T05:52:38+02:00",
    "2005-04-23T07:18:07+02:00",
    "2005-04-23T11:34:47+02:00",
    "2005-04-27T12:45:28+02:00",
    "2005-04-27T13:01:51+02:00",
    "2005-04-27T14:06:06+02:00",
    "2005-04-27T14:31:21+02:00",
    "2005-04-27T16:28:02+02:00",
    "2005-04-27T16:53:51+02:00",
    "2005-04-27T16:57:11+02:00",
    "2005-04-27T17:10:28+02:00",
    "2005-04-28T02:49:00+02:00",
    "2005-04-29T22:32:16+02:00",
    "2005-05-11T15:55:06+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.findSuperTypeErasingTo",
          "source": "ReferenceBinding.java:504"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding.boundCheck",
          "source": "TypeVariableBinding.java:90"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.resolve",
          "source": "ParameterizedTypeBinding.java:654"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType",
          "source": "BinaryTypeBinding.java:53"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.superclass",
          "source": "BinaryTypeBinding.java:771"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle",
          "source": "ClassScope.java:956"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle",
          "source": "ClassScope.java:918"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding",
          "source": "SingleTypeReference.java:42"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType",
          "source": "TypeReference.java:141"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType",
          "source": "TypeReference.java:104"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype",
          "source": "ClassScope.java:1050"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass",
          "source": "ClassScope.java:719"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy",
          "source": "ClassScope.java:856"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy",
          "source": "CompilationUnitScope.java:243"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings",
          "source": "LookupEnvironment.java:195"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.beginToCompile",
          "source": "Compiler.java:307"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:321"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:239"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:189"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build",
          "source": "BatchImageBuilder.java:49"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll",
          "source": "JavaBuilder.java:212"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.build",
          "source": "JavaBuilder.java:140"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$2.run",
          "source": "BuildManager.java:581"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1021"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:757"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:160"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:198"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$1.run",
          "source": "BuildManager.java:227"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1021"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:757"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:230"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuildLoop",
          "source": "BuildManager.java:249"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.build",
          "source": "BuildManager.java:278"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.doBuild",
          "source": "AutoBuildJob.java:139"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.run",
          "source": "AutoBuildJob.java:200"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:67"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "92477",
      "date": "2005-04-23T05:42:47+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "critical"
    }
  ],
  "groupId": "92477",
  "bugId": "92477",
  "date": "2005-04-23T05:42:47+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "critical"
}