{
  "comments": [
    "TPTP LocationPage class calls org.eclipse.hyades.ui.internal.util.UIUtil::validateOSFileName to validate that the file name does not contain certain set of characters. One of the characters is \u0027#\u0027 and therefore it is impossible to create a Hyades resource with \u0027#\u0027 in its name.\nIt is possible however to modify a test so that its name contains \u0027#\u0027 which is invalid for TPTP/EMF/XML but IS valid character for the OS.\n\nThe org.eclipse.hyades.ui.internal.util.UIUtil validation methods are incorrect because the make cerain assumtions about OS validation rules. In fact many of the characters blocked by those methods ARE valid in some operatng systems. So, IMHO, these methods need to be fixed. The right way to validate names in Eclipse is to use IWorkspace and IPath.\n\nIn addition, because the \u0027#\u0027 char is invalid from TPTP/EMF/XML point of view, TPTP needs to provide a utility method to validate resource names (which are not the same as file or path names).\n\n\u003d\u003d\u003d\u003d\u003d State: Assigned by:amathur at 7/20/2006 8:16:40 PM \u003d\u003d\u003d\u003d\u003d\n\nIt all boils down to having a # in the path to the file. I fixed the model code where it was originally failing. After that fix, now it fails in the test creation wizard code. We need to flag an error in the wizard if we see a \u0027#\u0027 in the path. The same applies to the \u0027Test from Recording wizard\u0027 that comes from TPTP. Re-assigning it to Alex to see what we can do.\n\n\u003d\u003d\u003d\u003d\u003d State: Submitted by:ademuyser at 7/18/2006 2:47:13 PM \u003d\u003d\u003d\u003d\u003d\n\n\n\n****Description field information .****\nCreate a new Test Project named \"ReallyFrom Sc@tc#\",\nSelect File \u003e New \u003e Others...\nThen choose Test \u003e Test Assets \u003e New HTTP Test,\nselect created project, enter a name for test suite (my_http).\nHit Finish button.\n\nTest suite is not created, Error Log displays:\n\njava.lang.StringIndexOutOfBoundsException\n\tat java.lang.String.substring(String.java:1081)\n\tat com.ibm.rational.test.lt.models.behavior.lttest.impl.LttestFactoryImpl.createLTTest(LttestFactoryImpl.java:302)\n\tat com.ibm.rational.test.lt.testeditor.wizard.NewLoadTestWizard.registerResource(NewLoadTestWizard.java:117)\n\tat com.ibm.rational.common.test.editor.framework.wizard.CEF_NewWizard.adjustTestSuite(CEF_NewWizard.java:225)\n\tat org.eclipse.hyades.test.ui.wizard.TestSuiteNewWizard2.createObject(TestSuiteNewWizard2.java:126)\n\tat org.eclipse.hyades.test.ui.wizard.TestSuiteNewWizard2.createObject(TestSuiteNewWizard2.java:100)\n\tat org.eclipse.hyades.ui.internal.wizard.HyadesNewWizard.performFinish(HyadesNewWizard.java:126)\n\tat org.eclipse.jface.wizard.WizardDialog.finishPressed(WizardDialog.java:680)",
    "Reassign to Jerome.",
    "This should not delay the test pass, however would be desirable to fix in 4.2.1 if it can be contained.\n\nSpecific issue is simply the fact that the HTTP recorder allows # sign in file path.",
    "Retargetting to 4.3 after discussion during the test meeting.\n\nAllowing those special characters in name or path may cause TPTP not working when it uses the getPath() method rather than the getString().\nWe should choose the best strategy for the naming of TPTP elements: being platform dependant by using IPath validation or listing some forbidden characters? ",
    "Created an attachment (id\u003d51929)\nPatch to be committed once i3 is opened\n\nThe LocationValidator class in org.eclipse.hyades.ui.util (the one from org.eclipse.tptp.platform.common.ui plugin) has been created.\nThis will give access to TPTP location validation method for downstream products.\n\nThe list of banned characters have also been updated regarding the syntax defined by RFC 2396 (see http://www.ietf.org/rfc/rfc2396.txt )\nHere are the list of banned character for our resource naming because they are reserved, escaped or unwise characters: \n ;/?:@\u0026\u003d+$,\"\u003c\u003e% and {}|\\^[]`\n\nComparing with the previous list, the following characters are now authorized characters (because I do not find any good reasons to forbid it): \n \u0027~!*\nNote that those two latter characters still banned on windows platform but will be allowed on Unixes.\nThere are five new forbidden characters:\n @\u0026$%^\n\nThe patch contains also the validation of the container path (so the bug 101308 will be fixed indirectly).\n",
    "\u003e\u003e The patch contains also the validation of the container path (so the bug 101308 will be fixed indirectly).\n\nDoes it mean there is an additional check there that disallows \u0027#\u0027 characters?",
    "Obviously the patch add the # in the banned characters list.\n\n",
    "I would add a more philosophic comment about the provided fix.\nI can contest that the solution is the best one.\nTo disallow the TPTP user or downstream product to use these characters may not be acceptable for a long term since the bug 69680 has been fixed and provide an API to create resource with escaped or reserved character. \nProviding this capability will require a huge test phasis to cover all the TPTP components, that is why I open bug 160861 to track that for a future version.\nSuch a bug may be splitted to be assigned to all impacted TPTP components.",
    "*** Bug 101308 has been marked as a duplicate of this bug. ***",
    "Please target to 4.4 since all non-blocking/critical defects will be deferred as decided in today\u0027s AG call.",
    "Reassigning to the right component so that the patch can be committed.",
    "Patrick,\n\nThe user can still create a \"Test From Recording\" or a \"HTTP Recording\" under a project with an invalid name (e.g. ReallyFrom Sc@tc#).  The resources can\u0027t be used and the user is prompted with multiple error dialogs.  Is the patch suppose to address this?\n\nAlso since LocationValidator.java is a new public API, can we throw in a JUnit that exercises its methods?  I\u0027ll find a good home for it once you attach the JUnit.",
    "Patrick,\n\nAny update on this defect?\nCan you address my concerns on comment #11",
    "Yes the patch covers all the TPTP wizards that creates test elements.\nCreating a test with \"Test From Recording\" or a \"HTTP Recording\" with the name you mentioned \"ReallyFrom Sc@tc#\" disables the Finish button and displays a message \"Enter a valid filename\" as expected. Please contact me if you do not have this behvior.\nI will reassign the defect to you once I attached the Junit tests.\n",
    "Created an attachment (id\u003d57443)\nWorkspace patch\n\n2007 version of the patch",
    "Created an attachment (id\u003d57445)\nJUnit tests\n\n\nThe zip file is the new test plugin org.eclipse.tptp.platform.common.ui.tests which contains the JUnit tests for the added API LocationValidator. \nAli, please apply the patch and commit both fixes and JUnit tests.",
    "Fix checked into HEAD.\nI added an AllTests for Plug-in Junits of org.eclipse.tptp.platform.common.ui.tests.  I also added the test suite to org.eclipse.hyades.tests/AllJUnitPluginTests.",
    "So when the users _edits_ the existing resource and resets the name to \"\" or to something with invalid characters, does the tptp platform handle this somehow (throwing an exception etc) or should we validate the input ourselves?",
    "The validation of both file name and path has been added to the creation of TPTP test elements via TPTP wizards and the launch configuration dialogs for execution file.\nTo validate the rename from your side, use the new public API LocationValidator.\n"
  ],
  "commentCreationDates": [
    "2006-07-24T16:50:02+02:00",
    "2006-07-24T17:10:33+02:00",
    "2006-07-31T16:34:48+02:00",
    "2006-07-31T16:59:43+02:00",
    "2006-10-13T15:35:38+02:00",
    "2006-10-13T15:48:53+02:00",
    "2006-10-13T15:50:27+02:00",
    "2006-10-13T16:03:15+02:00",
    "2006-10-20T00:19:06+02:00",
    "2006-10-20T20:53:05+02:00",
    "2006-12-07T08:33:03+01:00",
    "2006-12-07T17:01:07+01:00",
    "2007-01-05T19:37:23+01:00",
    "2007-01-08T10:20:59+01:00",
    "2007-01-24T16:29:12+01:00",
    "2007-01-24T16:32:17+01:00",
    "2007-01-24T23:26:00+01:00",
    "2007-01-25T13:53:55+01:00",
    "2007-01-25T14:41:33+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "elements": [
        {
          "method": "java.lang.String.substring",
          "source": "String.java:1081"
        },
        {
          "method": "com.ibm.rational.test.lt.models.behavior.lttest.impl.LttestFactoryImpl.createLTTest",
          "source": "LttestFactoryImpl.java:302"
        },
        {
          "method": "com.ibm.rational.test.lt.testeditor.wizard.NewLoadTestWizard.registerResource",
          "source": "NewLoadTestWizard.java:117"
        },
        {
          "method": "com.ibm.rational.common.test.editor.framework.wizard.CEF_NewWizard.adjustTestSuite",
          "source": "CEF_NewWizard.java:225"
        },
        {
          "method": "org.eclipse.hyades.test.ui.wizard.TestSuiteNewWizard2.createObject",
          "source": "TestSuiteNewWizard2.java:126"
        },
        {
          "method": "org.eclipse.hyades.test.ui.wizard.TestSuiteNewWizard2.createObject",
          "source": "TestSuiteNewWizard2.java:100"
        },
        {
          "method": "org.eclipse.hyades.ui.internal.wizard.HyadesNewWizard.performFinish",
          "source": "HyadesNewWizard.java:126"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.finishPressed",
          "source": "WizardDialog.java:680"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "151590",
      "date": "2006-07-24T16:50:02+02:00",
      "product": "TPTP Profiling",
      "component": "Platform.UI",
      "severity": "major"
    }
  ],
  "groupId": "151590",
  "bugId": "151590",
  "date": "2006-07-24T16:50:02+02:00",
  "product": "TPTP Profiling",
  "component": "Platform.UI",
  "severity": "major"
}