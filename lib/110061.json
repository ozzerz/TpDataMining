{
  "comments": [
    "We have a mechanism for going to the previously activated task, etc, but currently\nit\u0027s stuck on the task list view.  This state should be stored, since it is\nkey for things like weekly task activity in the planning game report.",
    "Does it make sense to write a test for this in TaskListUiTest.java? I couldn\u0027t \nfind an existing test.\n\n",
    "On second thought, if there is no existing test case I think I\u0027ll make a new \ntest file because TaskListUiTest is unnecessarily complicated for this.",
    "Yup, a new test would be fine, and feel free to cut-and-paste stuff from the\nTaskListUITest--if it makes sense to have a common abstract test we can do that\nlater.",
    "Created an attachment (id\u003d27372)\nPatch file 1 of 2\n\nHere\u0027s a stab at using the persistent task selection structure for the next and\nprevious task buttons.",
    "Created an attachment (id\u003d27373)\nPatch file 2 of 2\n\nTest case for the proposed persistent next/previous code",
    "Good stuff!  It does has an interesting bug though--when activating a task by hitting back, this\nevent is added to the interaction history.  You can notice this by setting up three tasks, activating\neacy, and noting that you can never get back to the beginning.  What I\u0027ve done is added a setActivationHistorySuppressed\nmethod to MylarContextManager.  Just set that to true sure to set it to false when the activation\nis done.  This should probably get a new test in your TaskHistoryTest.\n\nWhen creating new classes,\nlike the test case, always put \"@author \u003cyour name\u003e\" on them.  It\u0027s important to properly attribute\ncredit to yourself.  The way you did it for task history test is right.\n\nI know what you mean\nabout your implementation seeming more round-about than it needed to be.  But that\u0027s ok, because\nthe issue is that the InteractionEvent list is not a thing that\u0027s easy to query this sort of information\nfrom.  What I imagine we\u0027ll end up doing is continuing to improve this TaskHistory class, and maybe\nmoving some of the functionality into mylar.core so that we have a convenient way of querying history.\n",
    "Wes, the test was failing when run as a part of the whole suite, so I added the following line to\nyour setUp, which makes it behavre correctly in the suite.\n\nMylarPlugin.getContextManager().resetActivityHistory();\n\n",
    "Created an attachment (id\u003d27462)\nPatch for bug fix (mylar.tasklist)\n\nThis patch fixes a bug where some tasks are repeated when navigating back\nbefore the back button is disabled. It might be still be possible for tasks to\nbe re-visited while moving forward and I\u0027m going to test this case and see if I\ncan add a bit more logic to correct this. Note that this patch does not use\nMylarContextManager.setActivityHistorySuppressed(..), which would be good not\nto use so that we can see which tasks are revisited even when using\nback/forward navigation.",
    "Applying now.  \n\nGood point, I wonder if I should remove those supporess methods?  I guess that\nthey could be useful for a \"don\u0027t watch me\" mode... I\u0027ll leave them for now.",
    "Works great, nice work.  ",
    "Created an attachment (id\u003d27477)\nmylar.tasklist patch\n\nI was still getting some strange behaviour with the previous code and the code\nwas already getting ugly. This patch is plan B: it uses the same logic as the\nprevious code by Ken but it loads the previous five tasks into the history\n(There\u0027s a constant at the top if you want to change this the number of items\nto load). This approach is a lot simpler and it seems to be working better.",
    "Created an attachment (id\u003d27478)\ntasklist.tests patch\n\nSlightly re-arranged test case.",
    "This patch causes the following exceptions when I try to activate a task in my\nruntime workspace.  Note that you should wrap anything that you do an a big try\ncatch so that failures in this code don\u0027t prevent task activation.\n\njava.lang.NullPointerException\n\tat\norg.eclipse.mylar.tasklist.ui.views.TaskActivationHistory.isDuplicate(TaskActivationHistory.java:73)\n\tat\norg.eclipse.mylar.tasklist.ui.views.TaskActivationHistory.loadPersistentHistory(TaskActivationHistory.java:54)\n\tat\norg.eclipse.mylar.tasklist.ui.views.TaskActivationHistory.hasPrevious(TaskActivationHistory.java:121)\n\tat\norg.eclipse.mylar.tasklist.ui.views.TaskListView$TaskListCellModifier.modify(TaskListView.java:642)\n\tat\norg.eclipse.jface.viewers.TreeEditorImpl.saveEditorValue(TreeEditorImpl.java:310)\n\tat\norg.eclipse.jface.viewers.TreeEditorImpl.applyEditorValue(TreeEditorImpl.java:161)\n\tat\norg.eclipse.jface.viewers.TreeEditorImpl$3.applyEditorValue(TreeEditorImpl.java:286)\n\tat org.eclipse.jface.viewers.CellEditor$1.run(CellEditor.java:304)\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1044)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:783)\n\tat org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:44)\n\tat org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:148)\n\tat org.eclipse.jface.viewers.CellEditor.fireApplyEditorValue(CellEditor.java:302)\n\tat\norg.eclipse.jface.viewers.CheckboxCellEditor.activate(CheckboxCellEditor.java:84)\n\tat\norg.eclipse.jface.viewers.TreeEditorImpl.activateCellEditor(TreeEditorImpl.java:83)\n\tat\norg.eclipse.jface.viewers.TreeEditorImpl.activateCellEditor(TreeEditorImpl.java:145)\n\tat\norg.eclipse.jface.viewers.TreeEditorImpl.handleMouseDown(TreeEditorImpl.java:271)\n\tat org.eclipse.jface.viewers.TreeViewer$1.mouseDown(TreeViewer.java:435)\n\tat org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:133)",
    "Created an attachment (id\u003d27479)\nmylar.tasklist patch\n\nThis patch should fix the NPE and has try catches around all public method\nimplementations.",
    "Works very nicely for the manually testing I did, and this does look like a\nbetter approach.  All I\u0027m going to change is the printStackTrace calls to fail.\n When you synch up again check those out so that you see the convention (there\u0027s\na short note on this at the bottom of the http://eclipse.org/mylar/dev.html\npage, checked in code should never print to the console).",
    "Created an attachment (id\u003d27480)\nmylar.tasklist patch\n\nThis patch includes calls to fail in the catch blocks.",
    "Created an attachment (id\u003d27481)\nmylar.tasklist patch\n\nSans stack trace output.",
    "All checked in now (except the last patch since I had already taken out the\ne.printStackTrace calls).",
    "This is a test post for bug #108305.\n"
  ],
  "commentCreationDates": [
    "2005-09-20T18:58:48+02:00",
    "2005-09-21T18:15:52+02:00",
    "2005-09-21T18:22:12+02:00",
    "2005-09-21T19:49:19+02:00",
    "2005-09-22T04:17:46+02:00",
    "2005-09-22T04:19:11+02:00",
    "2005-09-23T18:59:08+02:00",
    "2005-09-23T20:39:04+02:00",
    "2005-09-23T21:24:53+02:00",
    "2005-09-23T21:29:08+02:00",
    "2005-09-23T21:37:04+02:00",
    "2005-09-24T02:38:30+02:00",
    "2005-09-24T02:39:19+02:00",
    "2005-09-24T02:45:45+02:00",
    "2005-09-24T02:59:35+02:00",
    "2005-09-24T03:06:17+02:00",
    "2005-09-24T03:07:06+02:00",
    "2005-09-24T03:11:33+02:00",
    "2005-09-24T03:49:01+02:00",
    "2005-10-29T01:39:45+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.mylar.tasklist.ui.views.TaskActivationHistory.isDuplicate",
          "source": "TaskActivationHistory.java:73"
        },
        {
          "method": "org.eclipse.mylar.tasklist.ui.views.TaskActivationHistory.loadPersistentHistory",
          "source": "TaskActivationHistory.java:54"
        },
        {
          "method": "org.eclipse.mylar.tasklist.ui.views.TaskActivationHistory.hasPrevious",
          "source": "TaskActivationHistory.java:121"
        },
        {
          "method": "org.eclipse.mylar.tasklist.ui.views.TaskListView$TaskListCellModifier.modify",
          "source": "TaskListView.java:642"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeEditorImpl.saveEditorValue",
          "source": "TreeEditorImpl.java:310"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeEditorImpl.applyEditorValue",
          "source": "TreeEditorImpl.java:161"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeEditorImpl$3.applyEditorValue",
          "source": "TreeEditorImpl.java:286"
        },
        {
          "method": "org.eclipse.jface.viewers.CellEditor$1.run",
          "source": "CellEditor.java:304"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1044"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:783"
        },
        {
          "method": "org.eclipse.ui.internal.JFaceUtil$1.run",
          "source": "JFaceUtil.java:44"
        },
        {
          "method": "org.eclipse.jface.util.SafeRunnable.run",
          "source": "SafeRunnable.java:148"
        },
        {
          "method": "org.eclipse.jface.viewers.CellEditor.fireApplyEditorValue",
          "source": "CellEditor.java:302"
        },
        {
          "method": "org.eclipse.jface.viewers.CheckboxCellEditor.activate",
          "source": "CheckboxCellEditor.java:84"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeEditorImpl.activateCellEditor",
          "source": "TreeEditorImpl.java:83"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeEditorImpl.activateCellEditor",
          "source": "TreeEditorImpl.java:145"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeEditorImpl.handleMouseDown",
          "source": "TreeEditorImpl.java:271"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeViewer$1.mouseDown",
          "source": "TreeViewer.java:435"
        },
        {
          "method": "org.eclipse.swt.widgets.TypedListener.handleEvent",
          "source": "TypedListener.java:133"
        }
      ],
      "number": 0,
      "commentIndex": 13,
      "bugId": "110061",
      "date": "2005-09-24T02:45:45+02:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "enhancement"
    }
  ],
  "groupId": "110061",
  "bugId": "110061",
  "date": "2005-09-20T18:58:48+02:00",
  "product": "Mylyn",
  "component": "Tasks",
  "severity": "enhancement"
}