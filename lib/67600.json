{
  "comments": [
    "I2004-06-16-20:00\n\n1) Create a workspace with JUnit\n2) search for all declarations of type * in the workspace (via the search dialog)\n3) observe: you get an exception (after quite some time):\n\n\nAn internal error occurred during: \"Java Search\".\njava.lang.StringIndexOutOfBoundsException\n\tat java.lang.Throwable.\u003cinit\u003e(Throwable.java)\n\tat java.lang.String.substring(String.java)\n\tat org.eclipse.jdt.internal.core.SourceMapper.findSourceFileName(SourceMapper.java)\n\tat\norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.getSourceFileName(PossibleMatch.java)\n\tat\norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName(PossibleMatch.java)\n\tat\norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e(PossibleMatch.java)\n\tat\norg.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:872)\n\tat\norg.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:94)\n\tat org.eclipse.jdt.core.search.SearchEngine.findMatches(SearchEngine.java:468)\n\tat org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:757)\n\tat org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:125)\n\tat\norg.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:83)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java)",
    "Thomas, what JRE is on your classpath ?",
    "Thomas is using an internal IBM VM whose class lib contains malformed .class \nfiles. They pretend that they are local classes when they are member classes, \nand vice versa.",
    "*** Bug 58196 has been marked as a duplicate of this bug. ***",
    "According to the JVM scpec $4.7.5, the outer_class_info_index of a .class file \nmust be zero if the class is not a member. Some .class file in the mentioned \nclass lib have a non-zero value for this attribute for anonymous class files.",
    "Created an attachment (id\u003d12373)\nProposed patch\n\nWorkaround malformed .class files",
    "Note that the problem is reproduced with:\njava version \"1.4.2\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.2)\nClassic VM (build 1.4.2, J2RE 1.4.2 IBM Windows 32 build cndev-20040524 (JIT \nenabled: jitc))",
    "+1",
    "The following .class files have been identified has being malformed:\na.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nb.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nd.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nf.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\ng.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nh.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nDTDGrammar$1.class [in org.apache.xerces.impl.dtd [in .\\jre\\lib\\xml.jar]]\nDTDGrammar$1.class [in org.apache.xerces.impl.dtd [in .\\jre\\lib\\xml.jar]]\nSchemaGrammar$1.class [in org.apache.xerces.impl.xs [in .\\jre\\lib\\xml.jar]]\n",
    "Approved since this happens with JDK libraries.",
    "Jerome - pls attach patch to PR, so Olivier can review it.",
    "Please see patch in comment #5",
    "The patch looks good. We should however report such problems to VM vendors. The\nVM specs are very clear on the shape of inner info for member, local and\nanonymous classes.",
    "We have already done some similar changes for isAnonymous().",
    "Thanks Olivier. Patch released.",
    "The problem with these classes:\na.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nb.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nd.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nf.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\ng.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nh.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\ndon\u0027t have a \u0027$\u0027 in the name. This is breaking the source mapper. The proposed\npatch is fixing this issue.\n\nThe other issues with the xml classes remains. We added guards against malformed\n.class files. The outer name index should be 0 for the DTDGrammar$1.class inner\nclass attribute.",
    "The classes:\na.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nb.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nd.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nf.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\ng.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\nh.class [in javax.crypto [in .\\jre\\lib\\ibmjcefw.jar]]\n\nare anonymous classes that have been obfuscated. The names with \u0027$\u0027 have been\nreplaced with names without \u0027$\u0027. So they are fine from the JVM stand point, but\nthey would not be usable in a debugger for source lookup, because it is not\npossible to get the name of the source file in which they were defined.\nThe bug in Eclipse was that the assumption was made that the name always\ncontains a \u0027$\u0027 for anonymous or local classes.",
    "Verified for 3.0RC3 I200406180800"
  ],
  "commentCreationDates": [
    "2004-06-17T10:48:25+02:00",
    "2004-06-17T11:28:50+02:00",
    "2004-06-17T11:59:58+02:00",
    "2004-06-17T12:00:28+02:00",
    "2004-06-17T12:10:33+02:00",
    "2004-06-17T13:16:36+02:00",
    "2004-06-17T15:02:55+02:00",
    "2004-06-17T15:07:35+02:00",
    "2004-06-17T15:18:56+02:00",
    "2004-06-17T15:42:41+02:00",
    "2004-06-17T15:54:25+02:00",
    "2004-06-17T15:57:04+02:00",
    "2004-06-17T16:08:50+02:00",
    "2004-06-17T16:09:56+02:00",
    "2004-06-17T16:35:02+02:00",
    "2004-06-18T00:37:27+02:00",
    "2004-06-18T00:56:59+02:00",
    "2004-06-18T18:16:43+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "elements": [
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java"
        },
        {
          "method": "java.lang.String.substring",
          "source": "String.java"
        },
        {
          "method": "org.eclipse.jdt.internal.core.SourceMapper.findSourceFileName",
          "source": "SourceMapper.java"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.getSourceFileName",
          "source": "PossibleMatch.java"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName",
          "source": "PossibleMatch.java"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e",
          "source": "PossibleMatch.java"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:872"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:94"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.findMatches",
          "source": "SearchEngine.java:468"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:757"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run",
          "source": "JavaSearchQuery.java:125"
        },
        {
          "method": "org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run",
          "source": "InternalSearchUI.java:83"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "67600",
      "date": "2004-06-17T10:48:25+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "67600",
  "bugId": "67600",
  "date": "2004-06-17T10:48:25+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}