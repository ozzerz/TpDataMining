{
  "comments": [
    "Found in 3.3 M20070913-1500; have not yet determined whether it is present in 3.3 or HEAD.\n\nThe following code, when processed with the GenClass6 processor in pluggable.tests.annotations, generates the class and compiles correctly in a clean build.  But then, changing the annotation to name\u003d\"Bar\" and saving causes the NPE below.  At that point, a clean build does NOT cause another NPE; but changing the name back to Foo and rebuilding does.  So this is something to do with generated file deletion and incremental build.\n\npackage p;\nimport org.eclipse.jdt.apt.pluggable.tests.annotations.GenClass6;\n@GenClass6(pkg\u003d\"g\", name\u003d\"Foo\")\npublic class Quux { g.Foo _foo; }\n\n\n\njava.lang.NullPointerException\nat org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:656)\nat org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:374)\nat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:362)\nat org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:302)\nat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:299)\nat org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:130)\nat org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:280)\nat org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:192)\nat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:624)\nat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\nat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:166)\nat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:197)\nat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:246)\nat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\nat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:249)\nat org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:302)\nat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:334)\nat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:137)\nat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:235)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)",
    "The failure is also present in HEAD, and in M20070905.  The test case doesn\u0027t work at all in 3.3.0; file generation isn\u0027t occurring at all there, probably because the GenClass6 processor is making unsupported API calls, though I haven\u0027t verified that).",
    "Problem only occurs when the generated type is referenced in the parent file; that\u0027s why it\u0027s passing the automated tests, which do not (yet) cover that scenario.",
    "Created an attachment (id\u003d78452)\nTest case\n\nAttached patch to apt.pluggable.tests demonstrates the bug.  In the Compiler, currentUnit is null, because this.unitsToProcess[] contains a null entry where one might expect to see the parent file\u0027s compilation unit.",
    "Olivier, Jess and I think this is ugly but not worth delaying 3.3.1 over, because it only appears to affect parent files that refer to the generated types and there is a workaround of doing a clean build.  We this this should be fixed in 3.3.2.  Do you agree?",
    "\u003e Olivier, Jess and I think this is ugly but not worth delaying 3.3.1 over,\n\u003e because it only appears to affect parent files that refer to the generated\n\u003e types and there is a workaround of doing a clean build.  We this this should be\n\u003e fixed in 3.3.2.  Do you agree?\nIn order to fix it for 3.3.1, we need to determine first if this is a regression compare to 3.3.0. If not, then it might wait for 3.3.2 unless the user would get it too many times in \"normal\" use cases.\n",
    "This being said, we could add a temporary null checks till we know exactly why null units are there.\nI would favor this solution only if there is no better way to fix it.",
    "If not a regression, I would consider this for 3.3.2.",
    "This is not a regression: JSR269 file generation was not fully implemented in IDE mode in that case, which prevented the IDE from getting this far.",
    "(In reply to comment #8)\n\u003e This is not a regression: JSR269 file generation was not fully implemented in\n\u003e IDE mode in that case, which prevented the IDE from getting this far.\n\nTechnically I think you could argue it either way.  In 3.3.0, if you generated files, they would never be deleted until a clean, but there wouldn\u0027t be any errors in the log.  In 3.3.1, they get deleted, but (in the particular case where parent files reference generated files and thus get recompiled) there are errors in the log.\n\nMy feeling is that JSR269 adoption is still very minimal, this is not the only problem that exists, and touching the code that handles the compile loop would be risky without a lot of benefit.  People who are adopting JSR269 are probably cutting-edge enough that they can take an early 3.3.2 build or even apply a patch, if they really need the fix.  The main risk is if commercial products are being built off 3.3.1, that will not be revised until perhaps a year from now, by which time JSR269 will maybe be more commonplace.  But you could go crazy thinking about situations like that.",
    "Created an attachment (id\u003d78460)\nProposed fix\n\nThis patch passes the attached test case, but if I comment out the last line of the new test, I get:\nFailure while running test org.eclipse.jdt.apt.pluggable.tests.FilerTests#testCreateSourceFileWithGenReference()!!!\nActual output is:\n\t\t\"Problem : gen6.Generated02 cannot be resolved to a type [ resource : \u003c/testproj0002/src/targets/filer/Parent02.java\u003e range : \u003c842,858\u003e category : \u003c40\u003e severity : \u003c2\u003e]\\n\"\n\nMaybe this is expected.\nWalter, could you please comment on that?\n\nThis code would pass:\nfinal String[] expectedClasses2 \u003d {\"gen6.Generated02\", \"gen6.XxxGenerated02\", \"targets.filer.Parent02\"};\nexpectingUniqueCompiledClasses(expectedClasses2);\nexpectingNoFile(proj, \".apt_generated/gen6/Generated02.java\");\n\nMaybe the test is simply not up-to-date because of the NPE occuring before the commented out code.",
    "(In reply to comment #10)\n\n\u003e This code would pass:\n\u003e final String[] expectedClasses2 \u003d {\"gen6.Generated02\", \"gen6.XxxGenerated02\",\n\u003e \"targets.filer.Parent02\"};\n\u003e expectingUniqueCompiledClasses(expectedClasses2);\n\u003e expectingNoFile(proj, \".apt_generated/gen6/Generated02.java\");\n\nHmm, if .apt_generated/gen6/Generated02.java does not exist, then I am not sure why the class gen6.Generated02 would show up in the CompiledClasses.\n\nThe class should no longer be getting generated or compiled, I think, after the incremental build.\n",
    "The \"Generated02 cannot be resolved to a type\" problem is expected, since the parent now refers to a non-generated file.  Also, the fact that the file is deleted is good.  So from an external perspective this patch is working correctly.\n\nHowever, the fact that the type is still compiled seems curious.  Olivier, is it possible that it gets compiled initially (ie before it has been deleted) and then subsequently removed (when Parent02 gets compiled and we discover that the generated file is no longer generated)?  That seems like it would be okay.",
    "The reason that Generated02 is getting compiled is that it has not yet been deleted at that time.  The interaction between Java 6 and Java 5 processing is basically:\n\n 1. Compile loop: all Java 6 processing, including file generation\n 2. CompilationParticipants: all Java 5 processing\n 3. At very end of CompilationParticipants, delete obsolete files\n 4. Repeat if necessary\n\nIn step 2, ASTs are created in order to run Java 5 processors.  The parent file contains a reference to Generated02, and Generated02 has not yet been deleted because step 3 has not executed yet, so it is added to the unitsToProcess[].  \n\nThe Java 5 processors are present in the test case because apt.tests is loaded in the runtime environment.  If the apt.tests plugin is removed from the launch configuration, then Generated02 is not recompiled.  This is as expected.\n\nSo, it appears to me that Olivier\u0027s patch is doing the right thing.  All APT tests pass with this patch.  The manual operation that provoked this discovery also now passes.\n\nGiven that Olivier is comfortable that this will not cause a regression for normal compilation, and if we have time, I think we should try to promote this to 3.3.1.",
    "Created an attachment (id\u003d78487)\nImproved test case\n\nImproved test case is more precise about what compilation problem it\u0027s looking for, and works regardless of whether apt.tests is in the launch profile.  This test case passes with Olivier\u0027s patch, and fails without it.",
    "The fix looks good. \n+1 for 3.3.1",
    "Released for 3.3.1.\nRegression tests added in org.eclipse.jdt.apt.pluggable.tests.FilerTests#testCreateSourceFileWithGenReference",
    "Released for 3.4M2.\nRegression tests added in\norg.eclipse.jdt.apt.pluggable.tests.FilerTests#testCreateSourceFileWithGenReference",
    "(In reply to comment #14)\n\u003e Created an attachment (id\u003d78487) [details]\n\u003e Improved test case\n\u003e \n\u003e Improved test case is more precise about what compilation problem it\u0027s looking\n\u003e for, and works regardless of whether apt.tests is in the launch profile.  This\n\u003e test case passes with Olivier\u0027s patch, and fails without it.\n\u003e \nVerified for 3.3.1 using build M20070917-0900.\nVerified for 3.4M2 using build I20070917-0010.\n",
    "*** Bug 207944 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2007-09-14T19:04:41+02:00",
    "2007-09-14T19:12:22+02:00",
    "2007-09-14T19:27:26+02:00",
    "2007-09-14T19:52:41+02:00",
    "2007-09-14T19:56:15+02:00",
    "2007-09-14T20:22:55+02:00",
    "2007-09-14T20:24:16+02:00",
    "2007-09-14T20:27:10+02:00",
    "2007-09-14T20:28:56+02:00",
    "2007-09-14T20:52:39+02:00",
    "2007-09-14T21:24:12+02:00",
    "2007-09-14T21:37:15+02:00",
    "2007-09-14T22:22:39+02:00",
    "2007-09-15T02:10:11+02:00",
    "2007-09-15T02:57:08+02:00",
    "2007-09-15T16:06:18+02:00",
    "2007-09-15T20:12:44+02:00",
    "2007-09-15T20:56:49+02:00",
    "2007-09-18T16:17:36+02:00",
    "2007-10-30T12:39:28+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.processAnnotations",
          "source": "Compiler.java:656"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:374"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:362"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile",
          "source": "IncrementalImageBuilder.java:302"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:299"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build",
          "source": "IncrementalImageBuilder.java:130"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas",
          "source": "JavaBuilder.java:280"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.build",
          "source": "JavaBuilder.java:192"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$2.run",
          "source": "BuildManager.java:624"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:166"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:197"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$1.run",
          "source": "BuildManager.java:246"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:249"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuildLoop",
          "source": "BuildManager.java:302"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.build",
          "source": "BuildManager.java:334"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.doBuild",
          "source": "AutoBuildJob.java:137"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.run",
          "source": "AutoBuildJob.java:235"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:55"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "203454",
      "date": "2007-09-14T19:04:41+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "203454",
  "bugId": "203454",
  "date": "2007-09-14T19:04:41+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}