{
  "comments": [
    "R3.0\n\nWhen building Cheetah06, the update site builder did not include some .class \nfiles, leading to class not being found at runtime.\n\nI did check that the missing file was present in output folder before the \nupdate site builder ran; and missing in generated JAR.\n\njava.lang.NoClassDefFoundError: \norg/eclipse/jdt/internal/corext/refactoring/code/InlineConstantRefactoring$Inli\nneTargetCompilationUnit$InitializerExpressionRelocationPreparer$InitializerTrav\nersal\n at \norg.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$Inli\nneTargetCompilationUnit$InitializerExpressionRelocationPreparer.prepareInitiali\nzer(InlineConstantRefactoring.java:465)\n at \norg.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$Inli\nneTargetCompilationUnit$InitializerExpressionRelocationPreparer.prepareInitiali\nzerForLocation(InlineConstantRefactoring.java:452)\n at \norg.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$Inli\nneTargetCompilationUnit.prepareInitializerFor\n(InlineConstantRefactoring.java:736)\n at \norg.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$Inli\nneTargetCompilationUnit.addEditsToInline(InlineConstantRefactoring.java:710)\n at \norg.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$Inli\nneTargetCompilationUnit.getEdits(InlineConstantRefactoring.java:670)\n at \norg.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$Inli\nneTargetCompilationUnit.checkReferences(InlineConstantRefactoring.java:756)\n at \norg.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.chec\nkFinalConditions(InlineConstantRefactoring.java:1038)\n at org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.helper1\n(InlineConstantTests.java:106)\n at org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.helper1\n(InlineConstantTests.java:86)\n at org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.helper1\n(InlineConstantTests.java:81)\n at org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.test0\n(InlineConstantTests.java:160)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n at java.lang.reflect.Method.invoke(Method.java:324)\n at junit.framework.TestCase.runTest(TestCase.java:154)\n at junit.framework.TestCase.runBare(TestCase.java:127)\n at junit.framework.TestResult$1.protect(TestResult.java:106)\n at junit.framework.TestResult.runProtected(TestResult.java:124)\n at junit.framework.TestResult.run(TestResult.java:109)\n at junit.framework.TestCase.run(TestCase.java:118)\n at junit.framework.TestSuite.runTest(TestSuite.java:208)\n at junit.framework.TestSuite.run(TestSuite.java:203)\n at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)\n at junit.extensions.TestSetup$1.protect(TestSetup.java:19)\n at junit.framework.TestResult.runProtected(TestResult.java:124)\n at junit.extensions.TestSetup.run(TestSetup.java:23)\n at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests\n(RemoteTestRunner.java:421)\n at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run\n(RemoteTestRunner.java:305)\n at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main\n(RemotePluginTestRunner.java:30)\n at org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run\n(UITestApplication.java:92)\n at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java:106)\n at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:2749)\n at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2434)\n at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1377)\n at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1348)\n at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:254)\n at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:141)\n at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:96)\n at org.eclipse.pde.internal.junit.runtime.UITestApplication.run\n(UITestApplication.java:33)\n at org.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:335)\n at org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:273)\n at org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:129)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n at java.lang.reflect.Method.invoke(Method.java:324)\n at org.eclipse.core.launcher.Main.basicRun(Main.java:183)\n at org.eclipse.core.launcher.Main.run(Main.java:644)\n at org.eclipse.core.launcher.Main.main(Main.java:628)",
    "The missing file is: \nInlineConstantRefactoring$InlineTargetCompilationUnit$InitializerExpressionRelo\ncationPreparer$InitializerTraversal\n\nand is defined in JDT/UI plugin.",
    "When you build cheetah using the site builder, are you are building the JAR \nfor jdt/core, or are you also building the JAR for jdt/ui?",
    "I am building jdt/core, jdt/ui \u0026 jdt/debug.",
    "It looks like it is missing a member type at depth 4 (its enclosing type are \nincluded in the JAR).",
    "Moving to PDE-Build.",
    "One possibility might be that the 256char-limit was exceeded, and therefore \nthis inner class at depth4 had such a long name that it could not be generated.\n\nWhat is the full location of your workspace?",
    "Class file location is:\n\nD:\\eclipse\\workspaces\\dev3.1\n\\plugins\\org.eclipse.jdt.ui\\bin\\org\\eclipse\\jdt\\internal\\corext\\refactoring\\cod\ne\\InlineConstantRefactoring$InlineTargetCompilationUnit$InitializerExpressionRe\nlocationPreparer$InitializerTraversal.class",
    "Given that Philippe\u0027s workspace is at D:\\Eclipse\\workspaces\\dev3.1\\plugins,\nwhen the JAR is built outside the workspace, the class file for this inner \nclass will be written to the path below, which exceeds 256 chars, and hence it \nfails to be written there and is not included in the JAR.\n\nD:\\eclipse\\workspaces\\dev3.1\n\\plugins\\.metadata\\.plugins\\org.eclipse.pde.ui\\temp\\destination\\plugins\\org.ecl\nipse.jdt.ui\\org\\eclipse\\jdt\\internal\\corext\\refactoring\\cod\ne\\InlineConstantRefactoring$InlineTargetCompilationUnit$InitializerExpressionRe\nlocationPreparer$InitializerTraversal.class\n\n",
    "Just curious: why are you rebuilding from scratch, instead of simply building \nan archive out of the output folder contents ?",
    "Because pde build totally ignores the notion of workspace, project, classpath \netc. so it can build things out of a workspace (for example for the releng \nstyle build). \nThis design choice seems to have been made back in the first version of pde.",
    "Pascal, this one certainly deserves a readme for 3.0.1",
    "You are right since this can not be adressed without completly rewriting PDE \nbuild.",
    "Text for the readme:\n\nPDE: \n\nMissing classes with long class names\n\nWhen exporting plugins containing long class name (or deeply nested classes),\nthe resulting jar may not have those classes. This is due to the limitation of\nfile name length in the OS.",
    "Reviewed version of the text:\n\n\nMissing classes from exported plug-ins\n\nOn some platforms due to limitations of the length of filenames,  the JARs\ngenerated by the \"File \u003e Export.. \u003e Deployable plug-ins and fragments\"  function\nmay be missing class files.\nThis may happen if the workspace path, package names, or class names are too\nlong (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d69620).\n",
    "Added entry to 3.0.1 release notes.",
    "One comment on the readme entry is that it reads like a user issue (due to OS \nlimitation) as opposed to an issue in PDE itself, which it is actually. The \nproblem is that PDE is using a temp folder which is fairly deeply nested, and \nthus, when combined with deep package structure, it reaches the OS limit. Not \nbeing able to deploy Eclipse with Eclipse is quite severe.",
    "should this be closed now? or at least changed from 3.0.1?",
    "From a pde build point of view nothing else can be done now.",
    "Pascal, I\u0027m not sure this bug can be resolved as fixed because it is clearly \nnot.\nHowever, to solve this problem, you need to rewrite pde-build, so a better \nresolution might be as LATER.",
    "I would also not consider this one as fixed since you did not fix anything, \nthe problem is still here. At best, you could say wontfix, but clearly it \nprevents self-hosting so this is a mustfix at some point.",
    "The problem does not prevent self hosting but prevents plugin export.\n\nMarking as fixed, wontfix or later is a question of point of view.\nI marked as fixed because the only (unfortunate) solution for 3.0.1 that could \nbe thought of has been implemented. Therefore regarding 3.0.1 it is fixed.\n\nThe fundamental problems which were known since 2.0 (by the previous owners of \npde) but were not as striking as today are being considered. I\u0027m writing an RFP \ncapturing all the problems and a solution.\n\nAll that to say that a new bug should be open to capture all the issue.\n\nNote that a short-term solution would be for PDE UI to propose to the users to \npick a location were the export could happen.",
    "*** Bug 122620 has been marked as a duplicate of this bug. ***",
    "upgraded from 1.5_03 to 1.5_06 and exports started warking ...\nso  case in bug #122620 now works...\nno workspace change, no refactor just new JDK (did not try jre)\n\n",
    "*** Bug 122590 has been marked as a duplicate of this bug. ***",
    "I am reopening for a couple reasons. \n\n1. I don\u0027t see any mention of this in the readme file or help (using 3.1.1). \n\n2. I\u0027m pretty sure there is no file name limit on windows xp (can\u0027t find any mention of that). There might be some related to the version and provider of the JRE, especially given comment #23.\n\n3. Even if no fix is possible, seems that a warning/error could be devised so the build would not complete normally and let the user waste hours (or more) hunting down some odd bug. \n\n4. In a similar context (javadoc related), I\u0027ve found some mention that there is \"command length limit\" on windows of 1000 characters (but *nix is typically 10000). Could this be the problem here? If so, a suggested work around at \nhttp://java.sun.com/j2se/javadoc/faq/\nwas to put the commands in a file, and then spec the command file on the command itself. If at all related, could such a trick be used here in this context? \n\n",
    "(In reply to comment #25)\n \n\u003e I\u0027m pretty sure there is no file name limit on windows xp (can\u0027t find any\n\u003e mention of that).\n\nOk, I take it back. The rumors are true, sort of. I\u0027ve found the \"designed for windows xp\" spec \nis very explicit about file name lengths: \nin \nhttp://www.microsoft.com/winlogo/software/SWglossary.mspx\nMAX_FILE A manifest constant defined in the windows.h include file. The current value assigned to MAX_FILE is 255.\n\nMAX_PATH A manifest constant defined in the windows.h include file. The current value assigned to MAX_PATH is 260.\n\nThe hard part of the problem seems to be that you can \"drill down\" directory by directory, and end up making paths who\u0027s total length is way over 260. \nBut, else where, \nhttp://download.microsoft.com/download/9/d/0/9d0c9c38-6560-442e-92ee-37e3a29b9873/XPx64LogoTestFramework_v2-0-0.doc\nthey are explicit that \"while the application does not need to support max_path and max_file, there can be no loss of data\" .. and they explicitly give some \"drill down\" tests ... so, I think it still a valid bug that no error is reported when the file is \"lost\" during the build or package process. \n[And, as far as I\u0027m concerned, you could drill down all you want is that led to success :) \n\n",
    "Re: comment 21.\n\nThis problem prevents full self-hosting experience, where developers are expected to patch their IDE with their ongoing developments, and assess its quality. This part is broken, and we have to use our own Ant scripts, and not use plugin export which is not working.\n\nRe: fixed/later/wontfix argument - I disagree. Adding an entry in a readme is by no mean a proper fix. A fix would mean that the original problem is no longer happening. Is that the case ? I believe no. ",
    "Can a failure message be generated that includes an explination of how to work around the problem?",
    "*** Bug 127825 has been marked as a duplicate of this bug. ***",
    "(In reply to comment #29)\n\u003e *** Bug 127825 has been marked as a duplicate of this bug. ***\n\nJust a note on the difference between 127825 and this bug.   In 127825, inner classes are not an issue.  Also, the filename is much shorter than 256 characters.   The package structure + filename only equals 106 characters.   The maximum length drops to less than 75 characters on RCP exports to archives.",
    "*** Bug 134302 has been marked as a duplicate of this bug. ***",
    "Another vote for this bug... I wasted several hours trying to figure out why my plugins exported from 3.1.2 were missing class files.  Moving to 1.5_06 fixed the problem.",
    "Still haven\u0027t find a way around that. sorry not for 3.2.",
    "I thought I had put some details in this bug but I can\u0027t find them anymore. So here they are:\nThe core of the problem is that when class files are not being copied, PDE build or PDE UI are not in control. The copy of the class files is done by Ant copy tasks, and it is there that it shokes. I\u0027m not even sure if a message is being given by Ant. If Ant gives a warning, then it might be possible to write an ant listener to watch for the output of the build and report an error is something wrong is going on, but this is tricky business that would have to be put in pde ui, and it is too late.",
    "Pascal, pde/ui already has an ant listener.  That is how we know/report when compiler errors occur.\n\nI therefore suspect that Ant is not complaining about the missing inner classes at all.  Otherwise, we would have been notified.",
    "Do you listen for warnings?",
    "No, only to errors.  \n\nI think at some point, we listened to warnings as well but there were too many of them and they were all insignificant to the export process.",
    "If this is thought to be \"just an ant limitation\" ... what\u0027s the theory for why moving to 1.5_06 fixes the problem? \n\nAnd, I\u0027m not saying it is not related to ant ... or even cygwin used to have similar issues ... but .. just wondering if \"the fix\" in 1.5_06 was worth investigating?\n\n",
    "Ok, could anyone who had the problem attach a simple project and the exact path of their workspace on their disk so that I can investigate a bit more?",
    "My original post was exporting JDT/UI plugin from 3.0 branch, workspace location was likely: \"d:/eclipse/workspaces/dev3.0/plugins/\".",
    "Created an attachment (id\u003d40431)\nA sample project exported to file system then zipped\n\nThis is a plug-in project created to demonstrate this bug.  In this zipped archive, the project was exported using the \"File System\" destination.   The resulting folder was then zipped.    ** All files are present in this archive. **",
    "Created an attachment (id\u003d40434)\nSame project, exported as plug-in to archive\n\nThis is the same project as \"A sample project exported to file system then zipped\" , however, this time exported as a deployable plug-in to an archive zip.   **The interface that was present in the file system export is no longer present in the plugin jar.**    This workspace was located at:   c:\\Documents and Settings\\mllong1\\client-workspace\\",
    "Thanks a lot, I will take a look yet another time.",
    "Pascal,\nThank you from the referral from Bug #140907.  I agree with you that this bug is precisely what we\u0027re seeing.  In fact, I have an easy test case for you to run to confirm the issue.  Here\u0027s the scenario:\n\n1) Load org.eclipse.wst.sse.ui (and prereq\u0027s I suppose) from CVS\n2) Export the plugin to an archive using the PDE\n3) Note that the following class is not included:\norg.eclipse.wst.sse.ui.internal.contentoutline.ConfigurableContentOutlinePage$SelectionProvider$PostSelectionChangedListener\n\nSince I\u0027ve seen conversations about workspace location, this fails for me with a workspace located at \"C:\\dev\\workspaces\\5RC2D\".  I don\u0027t know that this is the only file that is not included, but it\u0027s representative.  Additionally, I counted the length of the fully-qualified classname and it\u0027s 125 characters so if there is a 255 character limit on the path then the PDE would have to be using some very long temp directory paths to go over that.\n\nThanks in advance for looking into this again.  It\u0027s truly an important issue to find a solution to from our perspective since it prevents WTP from being built from the PDE.",
    "One thought on this... the limitation might not be the length of the file name but rather the length of a command that windows can take in a shell from the Ant process.  Just a thought.",
    "*** Bug 140949 has been marked as a duplicate of this bug. ***",
    "Re: Comment #45: The maximum command line length in Windows XP is 8K, according to Microsoft here: http://support.microsoft.com/default.aspx?scid\u003dkb;en-us;830473\nSo, my speculation that this might be the issue seems unfounded.",
    "Thanks to the test case by Michael and a deep investigation through layers of crap. I came to the conclusion that the problem is coming from Java, which is able to list the content of a folder that contains long filenames but can not create the corresponding file object.\n\nHere is a snippet of code that will exhibit the problem if you create a file with a very long name in the folder specified in the first line of code.\n\n File f \u003d new File(\"C:/Documents and Settings/mlllong1/client-workspace/.metadata/.plugins/org.eclipse.pde.core/temp/destination/plugins/com.test.for.eclpse.bug.per.request/@dot/com/test/forplugin/eclpse/bug/per/request/model/object/facade\");\n String[] files \u003d f.list();\n System.out.println(f.isDirectory());\n for (int i \u003d 0; i \u003c files.length; i++) {\n  System.out.println(files[i]);\n  System.out.println(new File(f, files[i]).exists());\n }\n\nI\u0027m looking in providing a patch to the apache ant team to at least report a warning when something like that happens.",
    "I\u0027ve got a bit more information that hopefully will allow others to work around this issue. We\u0027ve noticed that the export performs differently depending on whether the target is an archive or a directory. We initially encountered the issues recounted here when exporting to an archive.  However, we\u0027ve since noticed that if we export to a directory instead, that the classes that were not present in the archive export are now included.  Exporting to a directory instead of an archive seems to work as a reliable workaround for us and was tested with Eclipse 3.2RC2 and JDK\u0027s 1.4.2_08 and 1.4.2_11.\n\nOne other piece of information that might be related is this bug in the JDK (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d6182812) titled \"FileOutputStream constructor throws FileNotFoundException with long file names\"",
    "(In reply to comment #49)\n\u003e Exporting to a directory\n\u003e instead of an archive seems to work as a reliable workaround for us and was\n\u003e tested with Eclipse 3.2RC2 and JDK\u0027s 1.4.2_08 and 1.4.2_11.\n\nI tried the same. For me it didn\u0027t make a difference whether I exported to a archive or directory. In both cases the inner classes were not included.\n",
    "*** Bug 141184 has been marked as a duplicate of this bug. ***",
    "We ran across this issue again today and found a definitive solution.  This \"long path\" issue is definately caused by the JDK bug I referenced in comment #49.  The solution is simply to launch Eclipse with the latest 1.5 JDK, which fixed the bug.  The default JRE in the workspace can still be whatever you\u0027d like as it has no impact on this particular part of the export process.  \n\nI hope providing a workaround gives this a little closure and helps everyone out a bit.",
    "*** Bug 147979 has been marked as a duplicate of this bug. ***",
    "*** Bug 148834 has been marked as a duplicate of this bug. ***",
    "Confirmed that switching from 1.4 to 1.5.0_07 fixed the problem for me as well. ",
    "*** Bug 152406 has been marked as a duplicate of this bug. ***",
    "*** Bug 154344 has been marked as a duplicate of this bug. ***",
    "Now that 1.5 is the norm and that 1.5 fixes the problem. I will close as wontfix.",
    "*** Bug 202337 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2004-07-08T17:09:41+02:00",
    "2004-07-08T17:10:40+02:00",
    "2004-07-08T17:32:53+02:00",
    "2004-07-08T17:34:00+02:00",
    "2004-07-08T17:34:35+02:00",
    "2004-07-08T17:38:02+02:00",
    "2004-07-08T17:42:27+02:00",
    "2004-07-08T18:14:03+02:00",
    "2004-07-08T18:32:17+02:00",
    "2004-07-08T19:04:01+02:00",
    "2004-07-08T21:46:25+02:00",
    "2004-08-31T04:35:05+02:00",
    "2004-08-31T16:01:50+02:00",
    "2004-08-31T20:07:30+02:00",
    "2004-08-31T20:37:15+02:00",
    "2004-08-31T20:48:50+02:00",
    "2004-09-01T09:39:02+02:00",
    "2004-09-07T22:38:25+02:00",
    "2004-09-07T22:53:50+02:00",
    "2004-09-07T23:37:54+02:00",
    "2004-09-08T09:40:30+02:00",
    "2004-09-08T14:50:52+02:00",
    "2006-01-09T04:36:48+01:00",
    "2006-01-09T08:14:53+01:00",
    "2006-01-09T20:35:27+01:00",
    "2006-01-09T20:45:51+01:00",
    "2006-01-23T05:14:21+01:00",
    "2006-01-23T08:44:44+01:00",
    "2006-01-23T14:47:40+01:00",
    "2006-02-14T19:41:27+01:00",
    "2006-02-14T20:35:37+01:00",
    "2006-03-31T23:05:59+02:00",
    "2006-04-27T21:32:41+02:00",
    "2006-05-04T20:00:59+02:00",
    "2006-05-04T20:27:06+02:00",
    "2006-05-04T20:30:34+02:00",
    "2006-05-04T20:43:22+02:00",
    "2006-05-04T20:49:00+02:00",
    "2006-05-04T22:17:42+02:00",
    "2006-05-04T22:25:47+02:00",
    "2006-05-04T22:48:22+02:00",
    "2006-05-04T23:02:21+02:00",
    "2006-05-04T23:08:16+02:00",
    "2006-05-04T23:10:36+02:00",
    "2006-05-09T23:29:06+02:00",
    "2006-05-10T00:47:01+02:00",
    "2006-05-10T01:06:05+02:00",
    "2006-05-10T01:54:30+02:00",
    "2006-05-10T03:28:06+02:00",
    "2006-05-11T00:34:54+02:00",
    "2006-05-11T02:24:19+02:00",
    "2006-05-11T03:08:10+02:00",
    "2006-06-22T21:09:05+02:00",
    "2006-06-23T02:13:35+02:00",
    "2006-06-27T17:43:01+02:00",
    "2006-07-31T16:32:19+02:00",
    "2006-08-01T16:52:49+02:00",
    "2007-03-30T00:57:17+02:00",
    "2007-03-30T15:49:39+02:00",
    "2007-09-05T23:52:24+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "org/eclipse/jdt/internal/corext/refactoring/code/InlineConstantRefactoring$Inli neTargetCompilationUnit$InitializerExpressionRelocationPreparer$InitializerTrav ersal",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$InlineTargetCompilationUnit$InitializerExpressionRelocationPreparer.prepareInitializer",
          "source": "InlineConstantRefactoring.java:465"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$InlineTargetCompilationUnit$InitializerExpressionRelocationPreparer.prepareInitializerForLocation",
          "source": "InlineConstantRefactoring.java:452"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$InlineTargetCompilationUnit.prepareInitializerFor",
          "source": "InlineConstantRefactoring.java:736"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$InlineTargetCompilationUnit.addEditsToInline",
          "source": "InlineConstantRefactoring.java:710"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$InlineTargetCompilationUnit.getEdits",
          "source": "InlineConstantRefactoring.java:670"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring$InlineTargetCompilationUnit.checkReferences",
          "source": "InlineConstantRefactoring.java:756"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.checkFinalConditions",
          "source": "InlineConstantRefactoring.java:1038"
        },
        {
          "method": "org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.helper1",
          "source": "InlineConstantTests.java:106"
        },
        {
          "method": "org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.helper1",
          "source": "InlineConstantTests.java:86"
        },
        {
          "method": "org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.helper1",
          "source": "InlineConstantTests.java:81"
        },
        {
          "method": "org.eclipse.jdt.ui.tests.refactoring.InlineConstantTests.test0",
          "source": "InlineConstantTests.java:160"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.extensions.TestDecorator.basicRun",
          "source": "TestDecorator.java:22"
        },
        {
          "method": "junit.extensions.TestSetup$1.protect",
          "source": "TestSetup.java:19"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.extensions.TestSetup.run",
          "source": "TestSetup.java:23"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:421"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:305"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:30"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run",
          "source": "UITestApplication.java:92"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:106"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:2749"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2434"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1377"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1348"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:254"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:141"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:96"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication.run",
          "source": "UITestApplication.java:33"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:335"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:273"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:129"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:183"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:644"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:628"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "69620",
      "date": "2004-07-08T17:09:41+02:00",
      "product": "PDE",
      "component": "Build",
      "severity": "blocker"
    }
  ],
  "groupId": "69620",
  "bugId": "69620",
  "date": "2004-07-08T17:09:41+02:00",
  "product": "PDE",
  "component": "Build",
  "severity": "blocker"
}