{
  "comments": [
    "It would be nice if basic information about load-time weaving (what version of AspectJ is being used, what loaders are doing weaving and what configuration is being used) was available without all of the -verbose information listing of all classes woven or not woven.\n\nIt\u0027s also unfortunate that the flags for weaving level are 2 quite different ones:\n-Daj.weaving.verbose -Dorg.aspectj.weaver.showWeaveInfo\n\nWhy not something like -Dorg.aspectj.weaver.level\u003d[none|summary|info|verbose]\n\nsummary: just what configuration is used\ninfo: list affected join points etc. (like showWeaveInfo)\nverbose: all (like verbose now)",
    "I assume you would always like warnings and errors to come out? In which case they need context i.e. what aspects are registered and which aop.xml files were used. Therefore I think it makes sense to put out what you call \"summary\" information by default. Perhaps a better approach would be -silent which (for whatever reason) allows a user to turn of all messages. The -verbose and ?showWeaveInfo options, which of cause are not peculiar to LTW, would remain the same.\n\nThe aop.xml file will remain the primary configuration mechanism because in a complex system it is easier to use than System properties (in my experience) and has none of the security implications. However we should revisit the names used as they are quite old. I suspect org.aspectj.weaver.loadtime.XXX would be a good start.\n",
    "Another option would be for many of the current info messages in LTW to be debug. We don\u0027t seem to use this level of messages at the moment so their is no support for a -debug flag but it would be consistent with other tools like Ant. So that way we would have:\ndefault:        warning, error\n-verbose:       info including AspectJ version, classloader, configuration\n-showWeaveInfo: weave \n-debug:         debug including weaving, not weaving, generating, ...\n\nWe could also keep the initial configuration messages and dump them when we get the first warning or error for context.",
    "I would definitely like errors to come out. I would like to be able to configure warnings to suppress known ones but otherwise they should too. I quite like the idea of dumping configuration information when an error or warning is emitted. The other case where configuration information is helpful to see is when nothing is happening (e.g., -javaagent isn\u0027t being passed in, the aop.xml file isn\u0027t present, possibly one aop.xml file turns off something in another one: that is a possible warning itself).\n\nI would also be quite happy with some kind of log adapter so that AspectJ messages could be configured through normal logging mechanisms. I agree that configuring anything possible within the aop.xml file is the preferred place: the one place where system-wide flags make sense is for global configuration (e.g., troubleshooting if you have set up your aop configuration correctly).\n\n-Dorg.aspectj.weaver.loadtime.XXX sounds good to me, and the levels sound right. I would suggest leaving -verbose as a deprecated alias for -debug:\n\ndefault:        warning, error\n-info:          info including AspectJ version, classloader, configuration\n-showWeaveInfo: weave PLUS info\n-debug:         debug including weaving, not weaving, generating, ... \n                PLUS showWeaveInfo\n-verbose:       same as -debug with deprecated warning message (or not)\n\nHow hard would it be to allow plugging in a log message handler instead of writing to the console? It seems like this is a good area to define a Plugin API with a simple interface so people can create adapters for Log4J, RAS, JULI/jdk, commons logging, sl4j, etc. ",
    "\u003eI would like to be able to configure warnings to suppress known ones but \n\u003eotherwise they should too.\nI will ask the same question as I did for Xlint: which warnings do you feel the need to suppress? The product should work out of the box if coding guidelines are followed. The messages are there for me as well as you :-)\n\n\u003ee.g., -javaagent isn\u0027t being passed in,\nI?m not sure how we can handle this one as we are not in the loop at all\n\n\u003ethe aop.xml file isn\u0027t present, possibly one aop.xml file turns off \u003esomething in another one: that is a possible warning itself\nWe already list the aop.xml files that are used. Using include/exclude for aspects can cause ?aspectExcludedByConfiguration? to be issued. We already issue ?not woven? messages (which should probably be debug) but I could add a reason why a class is exluded\n\n\u003eHow hard would it be to allow plugging in a log message handler instead \u003eof writing to the console?\nProbably not very. Andy and I have been talking about problem diagnosis for LTW. I have just opened Bug 150487 ?Tracing and Logging Framework?.\n\nWith the growing popularity of load-time weaving it is becoming increasing difficult to diagnose complex problems given the limited diagnostic information available: stack trace, verbose output, and dumped byte-code. With compiler errors it is usually possible for the bug raiser to attach a testcase but this is not possible when the problem may concern environment or integration with middleware. I therefore propose we implement a tracing/logging mechanism that will capture low level entry/exit information as well as existing informational messages (see Ron?s comment in Bug 150271 ?Allow multiple levels of LTW information?) and route them to one of the existing logging infrastructures such as JDK 1.4 or Jakarta Commons logging.",
    "\u003eI will ask the same question as I did for Xlint: which warnings do you feel the\n\u003eneed to suppress? The product should work out of the box if coding guidelines\n\u003eare followed. The messages are there for me as well as you :-)\n\nAlmost any of the warnings that are reasonable to suppress today have been made configurable through Xlint, which is good. As an example of something of the sort, suppose there\u0027s a runtime limitation like not being able to inline around advice because of the aspect configuration (e.g., shared library aspects from the system classpath aren\u0027t being woven). That should be a warning, but it should also be supressable. The system may well work just fine without inlined around advice and an administrator shouldn\u0027t have to see a warning about it if the developer realizes the limitation and has tested for it. This wouldn\u0027t be a weaver issue since it\u0027s really an LTW configuration warning, so I don\u0027t think it should go in Xlint.properties. But that one is hypothetical. A quick look through the loadtime module shows a few other candidates:\n* warnings for missing DTD\u0027s (dumped directly to syserr in DocumentParser)\n* define generated class failed (ClassLoaderWeavingAdaptor): as noted in the code, there might be situtations where this happens but it\u0027s not an error. There may also be systems that recover properly from a runtime limitation like this and don\u0027t want it emitted to the output.\n\nOf course the current aop.xml mechanism does allow you to suppress warnings, but unfortunately it suppresses all of them. I think only a few should be suppressable, based on analysis that indicates it might be expected to run with the warning occurring, rather than it being a problem that should always be fixed.\n\n\u003e\u003ee.g., -javaagent isn\u0027t being passed in,\n\u003eI?m not sure how we can handle this one as we are not in the loop at all\n\nThe best way to test for this is a simple output to indicate that the LTW system has started with the AspectJ version. I.e., without any configuration, did the system print something? I\u0027d be glad to have that one line of information come out (e.g., at INFO level in a log) by default unless you start with a silent flag. \n\n\u003e...I could add a reason why a class is exluded\nThat sounds good for debug purposes.\n\nRe: bug #150487, that sounds great. Thanks for creating that!",
    "I was hoping for a list of existing warnings that you felt the need to suppress rather that a list of new ones that if I added you would like to be able suppress. As with Bug 149322 ?Change Xlint cantFindType default to warning? I believe warnings and errors should not be suppressed as a matter of course. If there are situations when a change to your code cannot remove the warning/error but you feel the resulting application behaves correctly then we should review the message.\n\nLet?s discuss the new ones you mentioned:\n-\tNot being able to inline around advice: I believe warnings should be used to help people. If the compiler issues a warning which the user can do nothing about, as in this situation, apart from suppress it then the message is pointless. I have opened Bug 149802 ?Support inlining of all eligible around advice? to investigate whether we can apply the optimization more widely.\n-\twarnings for missing DTD\u0027s: This should be an error, not even Xlint.\n-\tdefine generated class failed:\tThis should also be an error. I was nervous about making it one because certain message handles abort on errors. There is not a situation that I can think of where not being able to define a closure on which a class we have just woven has a hard dependency is OK. I don?t agree with the comment in the code. We should either ignore the explicit case mentioned or stop the situation occurring (it might be related to Bug 119657 ?IllegalAccessError with around advice on interface method call?).\n",
    "There aren\u0027t any other cases of warnings that I\u0027ve encountered that I might like to suppress other than Xlint warnings and the two examples I listed. There might be some others that I\u0027ve not encountered, but if there are they\u0027re either rare or not relevant to configurations I\u0027ve used.",
    "\u003e ...I might like to suppress other than Xlint warnings\nWhich ones? I don\u0027t think we are explicit enough about the purpose of Xlint but my understanding of the process from conversations the Jim H. is that it is an experimental area rather than a generalized process for suppressing errors/warnings. When I add an Xlint error I do so because I feel I might break a user who cannot avoid it. When we understand the situation better either the message goes away or becomes a hard error.",
    "Here are the Xlint properties that default to warning that I have been suppressing:\n\ninvalidAbsoluteTypeName [needed to support optional 3rd party libraries]\ntypeNotExposedToWeaver [needed to support optional 3rd party libraries]\nunmatchedSuperTypeInCall [these are of course valid and intended to not match]\nadviceDidNotMatch [ditto]\nruntimeExceptionNotSoftened [I don\u0027t want to soften runtime exceptions]\n\nOf course cantFindType/cantFindTypeAffectingJPMatch are the subject of a different bugzilla issue.",
    "I have gone for the approach in Comment #2 although there is not yet support for dumping configuration information by default at the first error. This should reduce the amount of output generated when just trying to obtain configuration information.\n\n\u003eWhy not something like -Dorg.aspectj.weaver.level\u003d[none|summary|info|verbose]\nUnfortunately we don\u0027t yet have the concept of \"levels\": weaveInfo is completely separate although you coud imagine: default(warning \u0026 error), -verbose(info), -debug(debug) -showWeaveInfo(weaveInfo) with one automatically including those above. Of course this only applies to the default WeavingAdaptorMessageWriter and you are free to supply you own.",
    "\u003e... A quick look\n\u003ethrough the loadtime module shows a few other candidates:\n\u003e* warnings for missing DTD\u0027s (dumped directly to syserr in DocumentParser)\n\nAre you referring to DocumentParser. resolveEntity() in which case do you have a situation where this arised so that I can write a test. Or are you referring to this type of Exception which is thrown for badly formed aop.xml and for which we issue a warning (not error) but the stack trace is dumped by default:\n\n[AppClassLoader@9627532] warning parse definitions failed -- (SAXParseException) The element type \"concrete-aspect\" must be terminated by the matching end-tag \"\u003c/concrete-aspect\u003e\".\nThe element type \"concrete-aspect\" must be terminated by the matching end-tag \"\u003c/concrete-aspect\u003e\".\norg.xml.sax.SAXParseException: The element type \"concrete-aspect\" must be terminated by the matching end-tag \"\u003c/concrete-aspect\u003e\".\n \tat com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:236)\n \tat com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:215)\n \tat com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:386)\n?\n",
    "I was indeed referring to DocumentParser.resolveEntity. I believe you could trigger one warning by writing an aop.xml file with an unknown DTD (e.g., -//AspectJ//DTD 1.5.3//EN). The other one would be hard to test: you\u0027d need a configuration where the weaving agent is unable to read the aspectj_1_5_0.dtd resource (which would be a broken one!)\n\nI noticed these warnings from reviewing the code when you asked what other warnings might need to be supressed. But in general, neither of these two warnings should be suppressed. If we add another version of the DTD then the weaver should continue to be backwards-compatible and support the old ones...",
    "Leaving this one for now until after I have investigated the use of ajcore for FFDC."
  ],
  "commentCreationDates": [
    "2006-07-11T17:31:28+02:00",
    "2006-07-11T18:26:47+02:00",
    "2006-07-12T18:04:02+02:00",
    "2006-07-12T18:59:30+02:00",
    "2006-07-13T12:03:43+02:00",
    "2006-07-14T18:11:35+02:00",
    "2006-07-17T16:44:55+02:00",
    "2006-07-17T19:54:31+02:00",
    "2006-07-18T10:08:11+02:00",
    "2006-07-18T18:36:18+02:00",
    "2006-08-23T14:02:43+02:00",
    "2006-08-23T14:18:32+02:00",
    "2006-08-23T19:33:12+02:00",
    "2006-08-24T14:10:52+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.xml.sax.SAXParseException",
      "message": "The element type \"concrete-aspect\" must be terminated by the matching end-tag \"\u003c/concrete-aspect\u003e\".",
      "elements": [
        {
          "method": "com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException",
          "source": "ErrorHandlerWrapper.java:236"
        },
        {
          "method": "com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError",
          "source": "ErrorHandlerWrapper.java:215"
        },
        {
          "method": "com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError",
          "source": "XMLErrorReporter.java:386"
        }
      ],
      "number": 0,
      "commentIndex": 11,
      "bugId": "150271",
      "date": "2006-08-23T14:18:32+02:00",
      "product": "AspectJ",
      "component": "LTWeaving",
      "severity": "enhancement"
    }
  ],
  "groupId": "150271",
  "bugId": "150271",
  "date": "2006-07-11T17:31:28+02:00",
  "product": "AspectJ",
  "component": "LTWeaving",
  "severity": "enhancement"
}