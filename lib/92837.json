{
  "comments": [
    "On my project, when I save an aspect that calls an inter-type declaration \ndefined on itself, the incremental compiler gives a message like this:\nThe method logError(String, Exception) is undefined for the type Foo Foo.java\n\nRunning a full build clears the error.\n\nThis might be a compiler bug, or it might be AJDT (I never run command-line \nincremental compilation, so I don\u0027t know :-)).\n\nUnfortunately, simple test cases or extracts of just the 2 aspects aren\u0027t \nreproducing the issue, so let me know if you need me to spend some time trying \nto create a small isolated version of the issue.",
    "Hi Ron - it is an AspectJ bug and I\u0027m really keen to resolve errors in this\nspace - based on your description I tried to recreate the problem but I can\u0027t\nseem to get it to fail.  If you have time to look into it, I will fix it...\n\nIn my attempt, I created two aspects:\nX.aj\n----\npublic aspect X {\n  before(): call(* *(..)) \u0026\u0026 !within(X) {\n    Y.log();\n  }\n}\n\nY.aj\n----\npublic aspect Y {\n  public void X.log() {}\n}\n\n---------\ninitially that advice doesn\u0027t exist in X and I build the system, then I change X\nto include it and do an incremental build - it doesn\u0027t fail :(  But it\u0027s\nsomething very similar to that scenario that does fail.\n\nI think it only happens if you perform a sequence of saves and I believe ITDs\nhave to be in the mix - but that\u0027s all I\u0027ve managed to work out so far :(\n Any other constructs in your aspects?  inlinable around advice? declares?",
    "Andy, I was able to create the following small test case. Each of these types \nlives in its own source file. If you incrementally compile AbstractDerived, it \nfails. If you do a full rebuild it works...\n\npackage sample;\n\npublic abstract aspect AbstractBase {\n\tprotected Holder member;\n}\n\npackage sample;\n\npublic abstract aspect AbstractDerived extends AbstractBase {\n    Object x \u003d getLogger();\n}\n\npackage sample;\n\npublic interface Holder {\n\n}\n\npackage sample;\n\npublic aspect Logging {\n\tdeclare parents: sample.* \u0026\u0026 !Logging implements Loggable;\n\tpublic interface Loggable {}\n\tpublic Object Loggable.getLogger() { return null; }\n}\n\nAnother interesting problem I ran into while weaving the same logging aspect \nusing the AJ5 load-time weaving support was:\n\njava.lang.NegativeArraySizeException\n\tat org.aspectj.weaver.patterns.TypePatternList.read\n(TypePatternList.java:476)\n\tat org.aspectj.weaver.patterns.DeclareParents.read\n(DeclareParents.java:90)\n\tat org.aspectj.weaver.patterns.Declare.read(Declare.java:35)\n\tat org.aspectj.weaver.AjAttribute.read(AjAttribute.java:107)\n\tat org.aspectj.weaver.bcel.BcelAttributes.readAjAttributes\n(BcelAttributes.java:42)\n\tat org.aspectj.weaver.bcel.BcelObjectType.unpackAspectAttributes\n(BcelObjectType.java:191)\n\tat org.aspectj.weaver.bcel.BcelObjectType.\u003cinit\u003e\n(BcelObjectType.java:98)\n\tat org.aspectj.weaver.bcel.BcelWorld.makeBcelObjectType\n(BcelWorld.java:239)\n\tat org.aspectj.weaver.bcel.BcelWorld.resolveObjectType\n(BcelWorld.java:234)\n\tat org.aspectj.weaver.World.resolveObjectType(World.java:151)\n\tat org.aspectj.weaver.World.resolve(World.java:130)\n\tat org.aspectj.weaver.World.resolve(World.java:109)\n\tat org.aspectj.weaver.World.resolve(World.java:147)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.shouldWeaveAspect\n(WeavingAdaptor.java:206)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.shouldWeave\n(WeavingAdaptor.java:185)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass\n(WeavingAdaptor.java:176)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:74)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform\n(ClassPreProcessorAgentAdapter.java:54)\n\tat sun.instrument.TransformerManager.transform\n(TransformerManager.java:122)\n...\n\nThis might have something to do with incompatibility between the loadtime5 \nbranch and the AJDT milestone build that I\u0027m using, but they are from the same \nepoch and generally work together, so it might not. Any idea why in the \ndebugger it shows a length of -768?",
    "Created an attachment (id\u003d20417)\nAjc compiled output that chokes the weaver...\n\nHere is the class file that is causing the weaver to choke. This may or may not\nbe related to the original bug, but it\u0027s also an issue that we need to fix...\n\nI stepped through the weaving in the debugger and it is able to parse the type\npattern but then chokes immediately when parsing the type pattern list.\n\njavap -v gives the following output, which shows the negative numbers:\nCompiled from \"Logging.java\"\npublic class com.crankj.util.logging.Logging extends java.lang.Object\nimplements\n com.crankj.util.logging.Logging$Loggable\n  SourceFile: \"Logging.java\"\n  InnerClass:\n   public abstract #140\u003d #64 of #2; //Loggable\u003dclass\ncom/crankj/util/logging/Log\nging$Loggable of class com/crankj/util/logging/Logging\n  org.aspectj.weaver.Declare: length \u003d 0x19C\n   02 08 01 01 00 04 00 03 63 6F 6D 00 06 63 72 61\n   6E 6B 6A 00 00 00 01 2A 00 00 00 00 00 00 00 00\n   00 00 00 00 00 05 00 20 63 6F 6D 2E 63 72 61 6E\n   6B 6A 2E 75 74 69 6C 2E 6C 6F 67 67 69 6E 67 2E\n   4C 6F 67 67 69 6E 67 24 00 11 6A 61 76 61 2E 6C\n   61 6E 67 2E 4F 62 6A 65 63 74 24 00 18 63 6F 6D\n   2E 63 72 61 6E 6B 6A 2E 75 74 69 6C 2E 6C 6F 67\n   67 69 6E 67 2E 00 0A 6A 61 76 61 2E 6C 61 6E 67\n   2E 00 11 6F 72 67 2E 61 70 61 63 68 65 2E 6C 6F\n   67 34 6A 2E 00 00 00 FFFFFFDB 00 00 00 FFFFFFE7 07 06 01 01\n   00 06 00 03 63 6F 6D 00 06 63 72 61 6E 6B 6A 00\n   00 00 03 61 70 69 00 00 00 01 2A 00 00 00 00 00\n   00 00 00 00 00 00 00 00 05 00 20 63 6F 6D 2E 63\n   72 61 6E 6B 6A 2E 75 74 69 6C 2E 6C 6F 67 67 69\n   6E 67 2E 4C 6F 67 67 69 6E 67 24 00 11 6A 61 76\n   61 2E 6C 61 6E 67 2E 4F 62 6A 65 63 74 24 00 18\n   63 6F 6D 2E 63 72 61 6E 6B 6A 2E 75 74 69 6C 2E\n   6C 6F 67 67 69 6E 67 2E 00 0A 6A 61 76 61 2E 6C\n   61 6E 67 2E 00 11 6F 72 67 2E 61 70 61 63 68 65\n   2E 6C 6F 67 34 6A 2E 00 00 00 FFFFFFEC 00 00 00 FFFFFFFD 07\n   07 00 00 00 FFFFFFEC 00 00 00 FFFFFFFD 00 00 00 FFFFFFDB 00 00 00\n   FFFFFFFD 00 01 02 01 00 2A 4C 63 6F 6D 2F 63 72 61 6E\n   6B 6A 2F 75 74 69 6C 2F 6C 6F 67 67 69 6E 67 2F\n   4C 6F 67 67 69 6E 67 24 4C 6F 67 67 61 62 6C 65\n   3B 00 00 07 00 00 01 0A 00 00 01 11 FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\n   FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 00 00 00 FFFFFFCA 00 00 01 11\n\nWhen I try to recompile the file using -inpath I get:\nillegal change to pointcut declaration:\ntopLevelRequest(BindingTypePattern(javax\n.servlet.http.HttpServlet, 0))\nillegal change to pointcut declaration:\ntopLevelRequest(BindingTypePattern(javax\n.servlet.http.HttpServlet, 0))\norg.aspectj.weaver.BCException: illegal change to pointcut declaration:\ntopLevel\nRequest(BindingTypePattern(javax.servlet.http.HttpServlet, 0))\n\tat\norg.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePo\nintcut.java:275)\n\tat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:255)\n\tat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:242)\n\tat org.aspectj.weaver.Advice.concretize(Advice.java:233)\n\tat\norg.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMe\nmbers.java:83)\n\tat\norg.aspectj.weaver.CrosscuttingMembers.addShadowMungers(CrosscuttingM\nembers.java:77)\n\tat\norg.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers(ResolvedT\nypeX.java:415)\n\tat\norg.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(Crosscut\ntingMembersSet.java:56)\n\tat\norg.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:37\n9)\n\tat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompiler\nAdapter.java:227)\n\tat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(A\njCompilerAdapter.java:119)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compil\ner.java:385)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat\nion(AjBuildManager.java:683)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuild\nManager.java:168)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu\nildManager.java:102)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:109)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:291)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:227)\n\tat org.aspectj.tools.ajc.Main.main(Main.java:80)\n\n\n1 fail|abort, 2 errors\n\nThe source file that generates this looks like this:\npackage com.crankj.util.logging;\n\nimport org.apache.log4j.*;\n\npublic aspect Logging pertypewithin(Loggable) {\n\tprivate Logger logger;\n\t// don\u0027t put logging into the public API...\n\tdeclare parents: com.crankj..* \u0026\u0026!com.crankj..api..* implements\nLoggable;\n\n\tbefore() : staticinitialization(*) {\n\t\t logger \u003d\nLogger.getLogger(thisJoinPointStaticPart.getSignature().getDeclaringType());\n\t}\n\tpublic interface Loggable {}\n\t\n\tpublic void Loggable.logError(String message) {\n\t\tgetLogger().error(message);\n\t}\n\tpublic void Loggable.logError(String message, Throwable throwable) {\n\t\tgetLogger().error(message, throwable);\n\t}\n\tpublic Logger Loggable.getLogger() {\n\t\treturn null;\n\t}\n\t\n\t// bizarre: need to advise yourself to get access to the instance\nassociated with the ITD\n\tLogger around() : call(* Logging.getLogger()) {\n\t\treturn logger;\n\t}\n}",
    "Thanks for the example program Ron, I\u0027ll try that.  I\u0027m a little nervous about\nyou working off the branch as that is very old now - as you are so keen on the\nLTW changes in it, we could think about moving them down into the base sooner\nrather than later.  hmmm.  Some of your problems really could be related to\nusing a new AJDT and the branch for LTWing.  ",
    "investigate for M3",
    "Reached crunch time, now concentrating on just getting generics going for M3.\nIncremental problems are moving post M3",
    "I have also encountered this problem (the incremental compilation part).\nHere is a minimal case to reproduce it. The interface and aspect each live in\ntheir own file. Each time I save the aspect file, the error appears and a clean\nis required to get rid of it.\n\npublic interface Foo {\n}\n\nimport java.util.ArrayList;\nimport java.util.List;\npublic aspect Bar {\n    private List\u003cString\u003e Foo.l;\n\n    private void Foo.foo() {\n        l \u003d new ArrayList\u003cString\u003e();\n    }\n}",
    "From Ron DiFrango on the mailing list, here is another case of the same\nincremental bug, or a related one:\n\nMatt,\n\nAs you point out, these are hard to re-produce.  Maybe the steps [which is a\ncombination of my previous two posts] that I used is as follows:\n\nCreated the following aspect:\n\npackage com.tascon.tim.sofia.aop;\n\nimport com.salmonllc.jsp.JspTableRow;\n\npublic aspect SofiaJspTableRow {\n   pointcut generateHtml(JspTableRow row) :\n       execution(public void JspTableRow.generateHTML(..))\n       \u0026\u0026 target(row);\n\n   void around(JspTableRow row) throws java.io.IOException :\ngenerateHtml(row)\n   {\n       System.out.println(\"Executing my aspect now.\");\n       proceed(row);\n   }\n}\n\nPerformed an incremental compile [and deploy it to my App Server], then I\nmodified that same aspect so that it resulted in the following;\n\npackage com.tascon.tim.sofia.aop;\n\npublic aspect SofiaJspTableRow {\nprivate DataStoreEvaluator JspTableRow._dsEval \u003d null;\n\n/**\n* Use this method to bind this component to an expression in a\nDataStore\n* @param ds The DataStore to bind to.\n* @param expression The expression to bind to.\n* @see DataStoreEvaluator\n*/\npublic void JspTableRow.setExpression(DataStoreBuffer ds,\nDataStoreExpression expression) throws Exception {\n// RRD: Error on this line because it can not see _dsEval\nthis._dsEval \u003d new DataStoreEvaluator(ds, expression);\n// RRD: Error on this line because it can not see _dsEval\n}\n\npointcut generateHtml(JspTableRow row) :\nexecution(public void JspTableRow.generateHTML(..))\n\u0026\u0026 target(row);\n\nvoid around(JspTableRow row) throws java.io.IOException :\ngenerateHtml(row)\n{\n\n// RRD: Error on this line because it can not see _dsEval\n\nif (row._dsEval !\u003d null)\n{\nSystem.out.println(\"row._dsEval is NOT NULL.\");\n}\nelse\n{\nSystem.out.println(\"row._dsEval is null.\");\n}\nproceed(row);\n}\n}\n\nThen, I attempted to perform another incremental compile with a call to this new\nmethod from another class and I got an error and could not compile until I did\nthe full re-build.\n\nAlso, this maybe of important note, these aspects affect only classes in a\nbinary jar that I am weaving into.\n\nRon\n",
    "I think this is related to a bug I raised of my own, bug 108099.  I plan to\nstart work on it tomorrow... using all the nice examples in here as testcases :)",
    "I hate incremental bugs.\n\nI managed to get Ron Bodkins scenario from comment #2 failing reliably in the AJ\ntest harness.  After some effort debugging it turns out to be exactly the same\nproblem as I covered in bug 85132.  The problem is that when AbstractDerived is\nsaved for the second time, we have lost the declare parents information that\nAbstractBase implements Loggable - so we never discover the ITD on Loggable -\nand compilation fails.\n\nI\u0027m trying to decide how much of a leap it is to conclude that incremental\ncompilation of ITDs only goes wrong when used with declare parents...  does\neveryone use declare parents with ITDs?  This might certainly explain why I\u0027ve\nhad so much trouble recreating the problem.  Ron DiFrangos program below doesn\u0027t\nappear to include any declare parents - but he is binary weaving ITDs into a jar\nwhich I think could be something else.\n\nConsidering that we didn\u0027t have a problem for a while and that it suddenly got\nworse, I wonder if that coincided with the binary weaving declare parents work I\ndid.  Until I\u0027d implemented binary decp we always modified the parents\npermanently - so in the example above, AbstractBase will always implement\nLoggable, even on the 2nd compile.  I\u0027ve been talking about the fix for this\nproblem under bug 85132.\n\n",
    "Fixed!  See bug 85132.  I\u0027m raising comment #7 as a new bug since its generics\nrelated (bug 111779). waiting on build before closing.  Ron (Bodkin), thanks so\nmuch for your test program!",
    "fixed as per andy\u0027s last comment"
  ],
  "commentCreationDates": [
    "2005-04-26T23:48:55+02:00",
    "2005-04-27T17:43:33+02:00",
    "2005-04-27T19:49:54+02:00",
    "2005-04-27T21:01:33+02:00",
    "2005-04-28T09:12:58+02:00",
    "2005-05-03T11:41:33+02:00",
    "2005-06-13T14:52:17+02:00",
    "2005-08-29T16:06:36+02:00",
    "2005-09-09T17:26:06+02:00",
    "2005-09-13T21:43:46+02:00",
    "2005-10-05T16:15:17+02:00",
    "2005-10-06T16:28:04+02:00",
    "2005-10-28T14:03:10+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NegativeArraySizeException",
      "elements": [
        {
          "method": "org.aspectj.weaver.patterns.TypePatternList.read",
          "source": "TypePatternList.java:476"
        },
        {
          "method": "org.aspectj.weaver.patterns.DeclareParents.read",
          "source": "DeclareParents.java:90"
        },
        {
          "method": "org.aspectj.weaver.patterns.Declare.read",
          "source": "Declare.java:35"
        },
        {
          "method": "org.aspectj.weaver.AjAttribute.read",
          "source": "AjAttribute.java:107"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAttributes.readAjAttributes",
          "source": "BcelAttributes.java:42"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelObjectType.unpackAspectAttributes",
          "source": "BcelObjectType.java:191"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelObjectType.\u003cinit\u003e",
          "source": "BcelObjectType.java:98"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWorld.makeBcelObjectType",
          "source": "BcelWorld.java:239"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWorld.resolveObjectType",
          "source": "BcelWorld.java:234"
        },
        {
          "method": "org.aspectj.weaver.World.resolveObjectType",
          "source": "World.java:151"
        },
        {
          "method": "org.aspectj.weaver.World.resolve",
          "source": "World.java:130"
        },
        {
          "method": "org.aspectj.weaver.World.resolve",
          "source": "World.java:109"
        },
        {
          "method": "org.aspectj.weaver.World.resolve",
          "source": "World.java:147"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.shouldWeaveAspect",
          "source": "WeavingAdaptor.java:206"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.shouldWeave",
          "source": "WeavingAdaptor.java:185"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:176"
        },
        {
          "method": "org.aspectj.weaver.loadtime.Aj.preProcess",
          "source": "Aj.java:74"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform",
          "source": "ClassPreProcessorAgentAdapter.java:54"
        },
        {
          "method": "sun.instrument.TransformerManager.transform",
          "source": "TransformerManager.java:122"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "92837",
      "date": "2005-04-27T19:49:54+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "org.aspectj.weaver.BCException",
      "message": "illegal change to pointcut declaration: topLevel Request(BindingTypePattern(javax.servlet.http.HttpServlet, 0))",
      "elements": [
        {
          "method": "org.aspectj.weaver.patterns.ReferencePointcut.concretize1",
          "source": "ReferencePo intcut.java:275"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.concretize",
          "source": "Pointcut.java:255"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.concretize",
          "source": "Pointcut.java:242"
        },
        {
          "method": "org.aspectj.weaver.Advice.concretize",
          "source": "Advice.java:233"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembers.addShadowMunger",
          "source": "CrosscuttingMe mbers.java:83"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembers.addShadowMungers",
          "source": "CrosscuttingM embers.java:77"
        },
        {
          "method": "org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers",
          "source": "ResolvedT ypeX.java:415"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect",
          "source": "Crosscut tingMembersSet.java:56"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave",
          "source": "BcelWeaver.java:37 9"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompiler Adapter.java:227"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "A jCompilerAdapter.java:119"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compil er.java:385"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:683"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuild Manager.java:168"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBu ildManager.java:102"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:109"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:60"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:291"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:227"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:80"
        }
      ],
      "number": 1,
      "commentIndex": 3,
      "bugId": "92837",
      "date": "2005-04-27T21:01:33+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "92837",
  "bugId": "92837",
  "date": "2005-04-26T23:48:55+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}