{
  "comments": [
    "org.aspectj.weaver.BCException\nat\norg.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:306)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)\nat\norg.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:331)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:216)\nat org.aspectj.weaver.Advice.concretize(Advice.java:273)\nat org.aspectj.weaver.bcel.BcelAdvice.concretize(BcelAdvice.java:83)\nat\norg.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMembers.java:84)\nat\norg.aspectj.weaver.CrosscuttingMembers.addShadowMungers(CrosscuttingMembers.java:78)\nat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:462)\nat\norg.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:62)\nat org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:426)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:283)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat\norg.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:760)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:225)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:151)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nBCException thrown: illegal change to pointcut declaration:\nspike.np.CommandCase.handleCommand(BindingTypePattern(spike.np.OtherHandler$MyWorld,\n0))\nwhen batch building\nBuildConfig[/home/guido/workspace/.metadata/.plugins/org.eclipse.ajdt.core/np.generated.lst]\n#Files\u003d11",
    "Can you provide more information about what you were doing when you saw this?\nThe aspect you\u0027re writing etc.",
    "Here is a minimal sample:\n\npackage aj;\n\npublic class SomeClass {\n\n    public void doSomething() {\n    }\n\n    public static void main(String... args) {\n        new SomeClass().doSomething();\n    }\n\n}\n\npackage aj;\n\npublic aspect MyAspect {\n\n    public interface MyWorld {\n    }\n\n    declare parents : SomeClass implements MyWorld;\n\n    pointcut doSomethingInMyWorld(MyWorld myWorld) :\n            execution(void SomeClass.doSomething()) \u0026\u0026\n            this(myWorld);\n\n    void around(MyWorld myWorld) : doSomethingInMyWorld(myWorld) {\n        System.out.println(\"this works\");\n    }\n\n}\n\npackage aj;\n\npublic aspect DoesntCompile {\n\n    public interface MyWorld {\n    }\n\n    declare parents : SomeClass implements MyWorld;\n\n    pointcut doSomething(SomeClass someClass) :\n            execution(void SomeClass.doSomething()) \u0026\u0026\n            this(someClass);\n\n    pointcut doSomethingInMyWorld(MyWorld myWorld) : doSomething(myWorld);\n\n    void around(MyWorld myWorld) : doSomethingInMyWorld(myWorld) {\n    }\n\n}",
    "Thanks for the simplified testcase - I have been able to recreate the problem.\n\nThis is a compiler bug so reassigning to aspectj.",
    "Created an attachment (id\u003d28111)\npatch containing supplied testcase\n\nThis patch is a patch to be applied to the tests project and contains the\nsupplied testcase written to fit in with the aspectj testcase structure.",
    "I\u0027ve applied Helens patch then worked on reducing the test program as much as\npossible, this fails:\n\nclass SomeClass  {\n    public void doSomething() { }\n}\n\naspect DoesntCompile {\n\n    declare parents : SomeClass implements Serializable;\n\n    pointcut doSomething(SomeClass someClass) :\n            execution(void SomeClass.doSomething()) \u0026\u0026\n            this(someClass);\n\n    void around(Serializable myWorld) : doSomething(myWorld) { }\n}\n\nIf I directly apply Serializable (i.e. not use declare parents) then it works.\nIf I change the around advice to take a \u0027SomeClass\u0027 then it works.\n\n",
    "Ok ... the problem here is the shadow munger is being concretized before the\ntype munger that adds the parent has had a chance to take effect.\n\nThe message \u0027illegal change to pointcut\u0027 is hopeless.\nBefore producing the message it is actually looking at the pointcut and checking\nthat what you are binding \u0027Serializable\u0027 is the same or a supertype of the value\nin the pointcut \u0027SomeClass\u0027.  What you are doing is allowed because all\nSomeClass\u0027 are Serializable - however, because the declare parents hasnt\noccurred yet, we don\u0027t know SomeClass is Serializable.\n\nThats why it works if you either:\na) hardcode SomeClass implements Serializable and dont use declare parents.\nb) change the advice to \u0027void around(SomeClass myWorld)\u0027\n\nwhat on earth I can do about it ...  hmmmmmmmmm",
    "The actual problem of using the wrong type in the pointcut is checked in two places.\n\n1. ReferencePointcut.resolveBindings\n   produces something vaguely helpful like the message: \n     incompatible type, expected SomeClass found\nBindingTypePattern(java.io.Serializable, 0)\n\n2. ReferencePointcut.concretize1\n   produces the BCException:\n   \"illegal change to pointcut declaration:\ndoSomething(BindingTypePattern(java.io.Serializable, 0))\"\n\nI propose to remove the check for illegal change to pointcut decl as it:\n1. is done too early\n2. is duplicating something checked later\n3. is an exception for something that should be an error\n4. is extremely unhelpful",
    "Fix checked in - waiting on build.",
    "fix available."
  ],
  "commentCreationDates": [
    "2005-10-07T17:14:18+02:00",
    "2005-10-10T10:31:42+02:00",
    "2005-10-11T14:05:47+02:00",
    "2005-10-11T14:31:00+02:00",
    "2005-10-11T14:45:09+02:00",
    "2005-10-20T16:12:41+02:00",
    "2005-10-20T16:41:00+02:00",
    "2005-10-20T18:23:22+02:00",
    "2005-10-21T09:09:10+02:00",
    "2005-10-21T12:46:08+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.aspectj.weaver.BCException",
      "elements": [
        {
          "method": "org.aspectj.weaver.patterns.ReferencePointcut.concretize1",
          "source": "ReferencePointcut.java:306"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.concretize",
          "source": "Pointcut.java:229"
        },
        {
          "method": "org.aspectj.weaver.patterns.ReferencePointcut.concretize1",
          "source": "ReferencePointcut.java:331"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.concretize",
          "source": "Pointcut.java:229"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.concretize",
          "source": "Pointcut.java:216"
        },
        {
          "method": "org.aspectj.weaver.Advice.concretize",
          "source": "Advice.java:273"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.concretize",
          "source": "BcelAdvice.java:83"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembers.addShadowMunger",
          "source": "CrosscuttingMembers.java:84"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembers.addShadowMungers",
          "source": "CrosscuttingMembers.java:78"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers",
          "source": "ResolvedType.java:462"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect",
          "source": "CrosscuttingMembersSet.java:62"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave",
          "source": "BcelWeaver.java:426"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:283"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:178"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:760"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:225"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:151"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:122"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "111915",
      "date": "2005-10-07T17:14:18+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "111915",
  "bugId": "111915",
  "date": "2005-10-07T17:14:18+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}