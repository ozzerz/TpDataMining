{
  "comments": [
    "Customers writing or deploying SWT and RCP applications have requested a\nframework making it easy for them to bind objects to user interface elements so\nthat the user interface can easily edit properties of objects.  In addition,\nthis framework ideally should:\n\n- Support any object oriented back-end: from POJOs to O/R mappers to pure OO\ndatabases.\n- Support transactional behavior by the back-end.\n- Support both plain SWT controls and JFace viewers.\n- Be extensible to support Swing if the community desires.\n\nThe VE team has published some code that could form the basis for such a\nframework.  It is located in VE\u0027s CVS as:\n\nHost: dev.eclipse.org\nRoot: /home/tools\nProj: org.eclipse.ve.sweet\n\nThis bug report will enable us to transparently track progress toward a\nsolution, including requirements gathering through implementation.",
    "Adding [Viewers] tag as we want the data binding support to align well with\nJFace viewers.\n",
    "Just capturing an important part of our technical discussion here for posterity. ;)\n\nNick Edgar wrote:\n\u003e1) It certainly looks compatible.  Although it currently depends on \n\u003eorg.eclipse.ui, the only dependency on layers higher than SWT is the one \n\u003eon ICellEditorValidator.  You might want to change it to depend only on \n\u003eorg.eclipse.jface and org.eclipse.swt, and limit yourself to the utility \n\u003eclasses in the runtime (see bug 49497 and the runtime-util folder in \n\u003eorg.eclipse.jface). This would allow Sweet to be used in standalone \n\u003eSWT+JFace scenarios.  If ICellEditorValidator ends up being the only link \n\u003eto JFace, then we could perhaps do that via an adapter and have Sweet \n\u003ejust depend on SWT.\n\nThat\u0027s one way to handle that.  I agree that the current refactoring \nisn\u0027t ideal and that this is one way to handle it.  But if I do it this \nway, I\u0027ll just wind up duplicating ICellEditorValidator somewhere under \na different name.  Maybe we could come up with a more unified approach?\n\nOn the other hand, I hope to extend SWTObjectViewer.bind() to be able to \nbind JFace viewers to properties of (collection) objects.  This will use \ngeneric strategy pattern objects to automatically provide content \nproviders, cell editors, etc...   So if you\u0027re editing any collection \nobject containing objects with an IObjectViewer implementation, you\u0027ll \nbe able to automatically edit using any JFace viewer with 1 line of \ncode.   :-) \n\n",
    "Dave, looked over the refactoring work on the binders in the sweet pkg.  They\nlook like a great seed.  Though, I think that we need to provide simple,\nefficient and jFace based code as much as possible.  It will be better to\nprovide jFace bindings, rather than a generic binding framework.\n\nThe current code in CVS makes it possible to bind to any type of visual (Swing,\nSWT or what ever), using the DuckType and java.lang.reflect. Proxy s.  This is\ncool, but it makes the code more complex and less efficient as if it would just\nextended the jFace class base, and assume SWT widgets (not to mention that it\nwill be less confusing).  IMO we should try to provide jFace binders that extend\ntoday?s jFace components.  i.e., make an IObjectViewer a jFace viewer (attached\nsomewhere on the current jFace Viewer hierarchy) using some type of\nIContentProvider and IBaseLabelProvider as the basis for the IEditedObject ?\nthere is a stretch moving it to work that way, but it will provide a\nstraightforward progression of what we have today, and simpler to adapt to.",
    "(In reply to comment #3)\n\u003e Dave, looked over the refactoring work on the binders in the sweet pkg.  They\n\u003e look like a great seed.  Though, I think that we need to provide simple,\n\u003e efficient and jFace based code as much as possible.  It will be better to\n\u003e provide jFace bindings, rather than a generic binding framework.\n\nYou\u0027re right that this would be simpler.  However, I have business requirements\nfor *today\u0027s* db4o applications that go beyond what is supplied by the JFace\nViewer framework:\n\n- Keystroke-by-keystroke validation for plain Text fields.\n- Automatic selection of cell validators based on data type.\n- Validator definition using either plain Java code or using regular expressions\n(I use both).\n- Ability to override the built-in default validation with my own.\n- Ability to support any SWT control or JFace viewer with one code base (my code\nis a mix of SWT and JFace, as is Eclipse\u0027s code base, for exactly the same reasons).\n\nThis is what I have to be able to deliver today for db4objects.  Other folks\nhave described even more aggressive requirements:\n\n- Ability to create a new modeless table control (one that is always in edit\nmode) or to make the current JFace table viewer behave modelessly.\n- Ability to have the table control do keystroke-level validation like regular\ntext fields, override validation logic, etc.\n\nAnd I have a new project now that also has some of these requirements.\n\nJFace by itself just wasn\u0027t designed to handle all this.  It\u0027s a great way to\ngenerically attach an arbitrary model to a Tree, Table, or TableTree (or the new\n3.1 SWT replacement for TableTree), and do some basic validation that you would\nneed for an IDE.  But business applications have more aggressive requirements\nthan this in order to have a high quality user interface.\n\nI\u0027m happy to consider other code bases as seed contributions than the one I\ncontributed, but I *must* be able to replace the current Sweet code base with\nthe same or better functionality for my existing customers.  Otherwise, that\u0027s\njust a non-starter for me.\n\n\u003e The current code in CVS makes it possible to bind to any type of visual (Swing,\n\u003e SWT or what ever), using the DuckType and java.lang.reflect. Proxy s.  This is\n\u003e cool, but it makes the code more complex and less efficient as if it would just\n\u003e extended the jFace class base, and assume SWT widgets (not to mention that it\n\u003e will be less confusing).\n\nActually, the primary intent is to provide a single unified archiecture that can\nbind data to either JFace or SWT controls.  As a side-effect, we get the ability\nto support Swing in the future if we want to or if somebody wants to contribute\nthat code.\n\n\u003e  IMO we should try to provide jFace binders that extend\n\u003e today?s jFace components.  i.e., make an IObjectViewer a jFace viewer (attached\n\u003e somewhere on the current jFace Viewer hierarchy) using some type of\n\u003e IContentProvider and IBaseLabelProvider as the basis for the IEditedObject ?\n\u003e there is a stretch moving it to work that way, but it will provide a\n\u003e straightforward progression of what we have today, and simpler to adapt to.\n\nI suppose it would be easier if we could just build on top of JFace and ignore\nthat SWT exists.  But Eclipse itself is constructed of a mix of JFace and pure\nSWT controls because there aren\u0027t JFace wrappers for every SWT control.  \n\nNor do I perceive the Platform/UI team wanting to create JFace wrappers for\nevery SWT control.  Nor do I think we want to require everyone in the community\nto create a JFace wrapper for their new SWT custom controls in order to\nparticipate in the data binding framework.\n\nI think we need a single data binding API that works with both SWT and JFace.\n\nFor example, suppose someone in the Eclipse community creates a new SuperText\nSWT control by extending Composite and embedding a Text object.  They want to be\nAPI-compatible with Text, so they add API to their Composite that implements the\nAPI on Text, plus they add their own new cool functionality.\n\nUsing the DuckType approach that Sweet uses today, Sweet will automatically\nsupport that new control out of the box, without writing a single new line of\ncode.  This is because Duck Typing just works based on what methods are present\non the object, and our developer (to be as API-compatible with SWT\u0027s Text object\nas possible) has all the same methods on SuperText as Text.\n\nBut if we take the approach of creating wrapper objects for every SWT control,\nthen we can\u0027t automatically work with new SWT controls as the community creates\nthem.\n\nConsequently, I really think that any data binding solution for Eclipse as a\nwhole should be agnostic to SWT versus JFace.  It should work with either and/or\nboth.  There are things you can\u0027t do with JFace that you can do with SWT because\nJFace doesn\u0027t provide wrappers for every SWT control.  So I think we should\nsupport that.  Similarly, JFace is the preferred way to map a model to one of\nthe more complicated SWT controls.  So I think we should support that too.\n\nThe cherry on top is that being this generic enables us to support Swing, which\npolitically is a great argument.  Sun has been exclusive (excluding Eclipse) in\nthe way it has approached the Java community.  Eclipse has been inclusive in its\napproach to supporting the Java community.  This is one reason that Eclipse is\nperceived to be a safe choice by many.  Choosing Sweet\u0027s approach lets us\ncontinue that tradition of being inclusive, thus continuing to be the safe\nchoice for folks who still have to work with Swing, but also want to work with\nSWT and JFace.",
    "I agree that the data binding framework should target both SWT and JFace.\nOne of the design points of JFace is that it doesn\u0027t require wrappering SWT\ncontrols (the first version of it did).  JFace does not take over SWT\nresponsibilities like control creation and layout, although the viewers do have\nconvenience constructors for creation.  When using a JFace viewer, you still\nhave direct access to the underlying control, but since viewers are \"model-based\nadapters to SWT controls\", you\u0027re expected not to inspect the SWT items directly\nor hook item-related listeners at SWT level, but rather use the JFace\nmodel-based selection methods and listeners.\n\nAlso note that JFace viewers have no support for typical form controls like\nLabel and Text.  \n\nThere is the FieldEditor framework in JFace, which is kind of data-binding like,\nbut it has several major problems:\n- limited to working within preference pages (and really only\nFieldEditorPreferencePages without having to jump through hoops)\n- assumes the model is a preference store\n- has bogus layout assumptions\n\nI suggest we ignore FieldEditors completely for the data binding support, but\nthat we do consider preference pages as one common scenario for the data binding\nsupport.\n\nAlso note that we are looking at pushing the forms framework\n(org.eclipse.ui.forms) down into SWT and JFace (excluding the FormEditor\nsupport).  The idea is that SWT will take over ownership of the extra controls\nthere (and make them native where possible), and there will be factory and\nlayout helpers at JFace level.  We should ensure that we align this effort with\nthe data binding effort, e.g. so that we don\u0027t have duplicate factory mechanisms.\n",
    "I\u0027m also OK with the Duck Type approach, but bear in mind that we want JFace\n(and lower layers) to compile and run against the JCL/Foundation profile, for\nuse in embedded devices and to be able to run against lighter-weight JREs in\ndesktop scenarios.  I don\u0027t believe Foundation has support for dynamic proxies,\nso we\u0027ll need to be able to replace that part of Duck Typing with static proxies\nfor the specific Duck Types defined in the framework.\n\nFor performance concerns, we should get a quantitative handle on how significant\nthe costs of Duck Typing are, e.g. for tables with 1000s of elements.  For\ntypical forms, I\u0027m not concerned at all.  The costs of reflection are likely to\nbe much less than the cost of accessing the data source if it\u0027s anything more\ninteresting than a POJO.\n",
    "\u003e I think we need a single data binding API that works with both SWT and JFace.\n\nAgreed. I also agree that it would be good to support arbitrary SWT custom \ncontrols if possible.\n\nI am not so sure if being agnostic about the underlying technology is a good \nidea though, at least not in the sense of being able to substitute e.g. Swing \nfor SWT/JFace without changing the code that uses the data binding framework.\n\nConsider the description of JFace (copied from the online documentation):\n\"JFace is designed to provide common application UI function on top of the SWT \nlibrary. JFace does not try to \"hide\" SWT or replace its function. It provides \nclasses and interfaces that handle many of the common tasks associated with \nprogramming a dynamic UI using SWT.\"\n\nI would like the data binding framework to be built in the same spirit: Make \nit easy to write simple table/tree/forms-based business applications, but \ndon\u0027t make it impossible to do more advanced things by hiding the underlying \nframeworks.\n\nAs a concrete example, I would like the data binding framework to provide \ndefault controls with a default layout when creating a simple form for \nentering data.  However, it should be possible for the programmer to have \ncomplete control over the layout and the controls, while still using \nthe \"binding\" part of the framework.",
    "(In reply to comment #7)\n\u003e I am not so sure if being agnostic about the underlying technology is a good \n\u003e idea though, at least not in the sense of being able to substitute e.g. Swing \n\u003e for SWT/JFace without changing the code that uses the data binding framework.\n\u003e \n\u003e Consider the description of JFace (copied from the online documentation):\n\u003e \"JFace is designed to provide common application UI function on top of the SWT \n\u003e library. JFace does not try to \"hide\" SWT or replace its function. It provides \n\u003e classes and interfaces that handle many of the common tasks associated with \n\u003e programming a dynamic UI using SWT.\"\n\nI think we\u0027re saying the same thing here.  If JFace were toolkit-agnostic, the\ncode that initializes the UI control would be different for each UI toolkit, but\nthe content providers, label providers, etc., would be identical.  What I am\nproposing is exactly this--that you can set up your UI controls using your\npreferred toolkit (using that toolkit\u0027s native code), but the code that is a\nclient to the binding framework would be identical in any case.\n\nAnd that I think this should work for SWT Text and Label (for which there are no\nJFace viewers) as well as for any JFace viewer, using the same API.\n\n\u003e I would like the data binding framework to be built in the same spirit: Make \n\u003e it easy to write simple table/tree/forms-based business applications, but \n\u003e don\u0027t make it impossible to do more advanced things by hiding the underlying \n\u003e frameworks.\n\nI definitely agree.\n\n\u003e As a concrete example, I would like the data binding framework to provide \n\u003e default controls with a default layout when creating a simple form for \n\u003e entering data. \n\nOkay, here I think you\u0027ve gone beyond my vision for version 1.0.  I don\u0027t\ndisagree, except perhaps in scope.\n\nIn the simplest case, I don\u0027t think that a binding framework should have to care\nat all about layout managers or their ilk.  However, it would be useful to be\nable to point some generic engine at an arbitrary POJO graph and have it\nautomatically generate a UI for editing it, complete with layout managers, etc.\n\nBut this is way beyond the scope I\u0027m considering working on unless someone else\nwants to contribute it. :-)\n\n\u003e However, it should be possible for the programmer to have \n\u003e complete control over the layout and the controls, while still using \n\u003e the \"binding\" part of the framework.\n\nThat\u0027s exactly what I have proposed.  The test application shows this:\n\nhttp://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.ve.sweet/src/org/eclipse/ve/sweet/test/?cvsroot\u003dTools_Project\n\nTestSweet.java first uses regular SWT code to create the SWT UI, set properties,\netc.  It then calls the data binding framework to actually set up the editing.",
    "In response to Nick:\n\nCompletely agree.\n\nI\u0027m also not religious about the duck typing implementation.  The DuckType\ndynamic proxy is very convenient and leads to very easy to read code, but you\u0027re\nright about the JVM level limitation.\n\nIt should be possible to provide a version that is implemented using reflection\nand that has a reflection-like API so we can support back-level JVMs easily.",
    "comment #4\n\n----------------------------------------\n?...I have business requirements\nfor *today\u0027s* db4o applications that go beyond what is supplied by the JFace\n\nViewer framework:\n- Keystroke-by-keystroke validation for plain Text fields.\n- Automatic selection of cell validators based on data type.\n- Validator definition using either plain Java code or using regular expressions\n(I use both).\n- Ability to override the built-in default validation with my own.\n- Ability to support any SWT control or JFace viewer with one code base ?\n----------------------------------------\n\nThese are important logical requirements and we defiantly need to bring them\ninto play.\n\n\n\n??JFace by itself just wasn\u0027t designed to handle all this??\n\nWe need to provide extension to jFace interfaces to bind to objects/data.  A\n(jFace) Viewer in particular is defined as following:\n /**\n  * A viewer is a model-based adapter on a widget.\n   ?\n\nThough the viewer interfaces are not specific to SWT, the current viewers\nimplementation is SWT literate:\n\n    /**\n     * Returns the primary control associated with this viewer.\n     *\n     * @return the SWT control which displays this viewer\u0027s content\n     */\n    public abstract Control getControl();\n\nNot doing so, would require reflection based code.\n\n----------------------------------------\n?I\u0027m happy to consider other code bases as seed contributions than the one I\ncontributed, but I *must* be able to replace the current Sweet code base with\nthe same or better functionality for my existing customers.  Otherwise, that\u0027s\njust a non-starter for me.?\n----------------------------------------\n\nI think that your code is a good seed but need to jFaceised a bit more ;-).\n\n----------------------------------------\n?Actually, the primary intent is to provide a single unified archiecture that\ncan bind data to either JFace or SWT controls.?\n----------------------------------------\n\nThe thing is that most of Eclipse based code today relies on viewers? having\nboth a viewer and a bound IObjectViewer is kind of having two watches? hard to\ntell what the time is.\n\n----------------------------------------\n?But Eclipse itself is constructed of a mix of JFace and pure SWT controls\nbecause there aren\u0027t JFace wrappers for every SWT control.?\n----------------------------------------\n\n\nJust like the current sweet, we can implement a generic (SWT control) jFace\nwrapper. ?. I can see you point that important properties like *text* are not\ncommon and may require some type of DuckType reflection\n\n\nBinding should not just to be a way to bind to a persistence store (with commit,\nrollback etc), but also to bind visuals (of a wizard page for example) to an\nobject model, hooking it up to some page validation logic?. This will allow\nexisting code to grow up and use this runtime support and hopfully significantly\nsimplify it.  It will be great if we can extend the current jFace interfaces,\nand implementing SWT base concrete code as much as possible.\n\nBtw? I updated the sweet code earlier to fix some bugs in order to allow the\nTestSweet example to run? have not changed anyting else ;-)",
    "\u003e Okay, here I think you\u0027ve gone beyond my vision for version 1.0.\n\nThis was just an example to illustrate my point, not a concrete suggestion of \nwhat we need in a version 1.0.\n\nShould we try to agree on a list of features we would like to see in a first \nversion?\n\nSo far I have seen the following:\n- binding to SWT text controls\n- binding to JFace table viewers\n- providing generic editing support for tables\n- keystroke-by-keystroke validation\n- configurable validators\n\nThere must be more... ;-)",
    "(In reply to comment #10)\n\u003e I think that your code is a good seed but need to jFaceised a bit more ;-).\n\nI\u0027d be happy to consider specific suggestions.\n\n\u003e ----------------------------------------\n\u003e ?Actually, the primary intent is to provide a single unified archiecture that\n\u003e can bind data to either JFace or SWT controls.?\n\u003e ----------------------------------------\n\u003e \n\u003e The thing is that most of Eclipse based code today relies on viewers? having\n\u003e both a viewer and a bound IObjectViewer is kind of having two watches? hard to\n\u003e tell what the time is.\n\nI don\u0027t see how we\u0027re going to get around this because:\n\n1) JFace is Eclipse Platform-Quality API, so we can\u0027t change it.  We have to\nmaintain it for backward compatibility.\n\n2) In addition to the requirements I have described before, I have a firm\nrequirement for being able to generically bind to multiple types of back-ends,\neven within a single application.  Here is an incomplete but representative\nlist: JavaBean-style POJOs, EMF objects, db4o databases, Hibernate-persisted\ndatabases, Prevayler-persisted objects (both embedded and remote through a\ncustom RMI-like server).\n\nBeing able to bind to any of these things requires building an abstraction API\nthat necessarily introduces the need to support (1) transactions, (2) local\nversus remote objects, (3) model-driven constraint definition, by which I mean\nthat the engine has to be able to get an IValidator from a business model object\nfor a given property--and the object may even physically be across the network\nsomewhere.\n\nNetwork transparancy and abstracted transactions (to name just two of the major\nissues you have to deal with when you\u0027re doing this) are things the current\nJFace API just doesn\u0027t support directly.  To support these ideas elegantly\nrequires new abstractions which in turn implies new API.\n\n\u003e ----------------------------------------\n\u003e ?But Eclipse itself is constructed of a mix of JFace and pure SWT controls\n\u003e because there aren\u0027t JFace wrappers for every SWT control.?\n\u003e ----------------------------------------\n\u003e \n\u003e Just like the current sweet, we can implement a generic (SWT control) jFace\n\u003e wrapper. ?. I can see you point that important properties like *text* are not\n\u003e common and may require some type of DuckType reflection\n\u003e \n\u003e \n\u003e Binding should not just to be a way to bind to a persistence store (with commit,\n\u003e rollback etc), but also to bind visuals (of a wizard page for example) to an\n\u003e object model, hooking it up to some page validation logic?. This will allow\n\u003e existing code to grow up and use this runtime support and hopfully significantly\n\u003e simplify it. \n\nThe existing Sweet design can do exactly this.\n\nThere are opportunities to link it more tightly with the wizard page framework,\nthough.  I personally see that as a v1.5 feature though.  I suggest we get basic\ndata binding right, then we can see how we can improve it for specific common\nuse-cases.\n\n\u003e It will be great if we can extend the current jFace interfaces,\n\u003e and implementing SWT base concrete code as much as possible.\n\nI don\u0027t think we fundamentally disagree here on our goals.  I\u0027m just at a point\nwhere I think I need specific suggestions about how the current code could be\nimproved to do this more.\n\nThe framework is designed to work well with JFace the way it is today, but I\nvery well might have missed some opportunity for closer integration.  So by all\nmeans, please see if you can identify areas where we can integrate it better.\n\n\u003e Btw? I updated the sweet code earlier to fix some bugs in order to allow the\n\u003e TestSweet example to run? have not changed anyting else ;-)\n\nCool, thanks!  I must have broken something along the way.\n\n-----\n\nReplying to Boris:  So to summarize the new requirements listed above:  (these\nexist today in a new application I\u0027m building):\n\n- Bind to any kind of object anywhere.  Here are a few examples of the kinds of\nobjects I mean:\n\n  * RMI objects\n  * Remote objects through a custom server\n  * JavaBean style local objects\n  * EMF objects (local)\n  * Objects retrieved dynamically via Hibernate, some caching solution, or\ndb4objects\n\n- If the back-end data store supports transactions, automatically use them.  \n\n   * For example, TableViewer should automatically call commit() when the user\nleaves a row.  Or it could automatically call rollback() when the user hits \u003cESC\u003e\n\n\n",
    "I should clarify: I use Sweet\u0027s capability to transparently bind to POJOs and/or\ndb4o objects in the same application today.  But if you do this much, you wind\nup getting most of the infrastructure for the others along the way.",
    "I think that the best way to continue is drive another crank on the current code\nbase.  Our thinking is to create Editor based jFace components that extend the\ncurrent ?Viewer? (metaphor) hierarchy; where the extended Editor accepts a\nspecial content/label providers that know how to provide data from an input, as\nwell as to receive and update that editor?s input.\n\nThe ? commit() on leave a row..? kind of thing can be addressed with some kind\nof Editor update policies (e.g., immediate - when key, for example, is pressed,\nfocus is lost, explicit ? e.g., explicit call from code; Update button is\npressed for example) to make it more generic.",
    "Note that the sweet project will now look for two User Libraries to compile (see\norg.eclipse.ve.sweet/src/org/eclipse/ve/sweet2/hibernate/README.html).\n\nYou can always remove the following lines from the .classpath if you want to\ncompile the project without the hibernate based example:\n\n\t\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.jdt.USER_LIBRARY/Hibernate\"/\u003e\n\t\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.jdt.USER_LIBRARY/DBclient\"/\u003e",
    "Might I suggest looking into the SWT port of JGoodies Binding.  It is simple yet\nvery powerful.  It uses the standard ValueModel concepts often found in data\nbinding.  I know the Spring RCP team has already forked the JGoodies code for\ntheir uses.  An Eclipse sponsored version of the link below might be a good step.\n\nhttp://www.jayasoft.fr/org/modules/swtbinding/overview.php?",
    "(In reply to comment #16)\n\u003e Might I suggest looking into the SWT port of JGoodies Binding. \u003csnip/\u003e\n\nI\u0027ve looked at it and think it\u0027s nice, but that it doesn\u0027t solve all the\nproblems I\u0027d like to see solved:\n\n- Transactional awareness when editing database-backed data\n- Using and extending JFace when and where possible\n\nWe\u0027re working on a framework that will solve these requirements and more.  For\nmore details, please see the code in dev.eclipse.org as specified above.",
    "Created an attachment (id\u003d26993)\nSWT Binders\n\nTo move this effort forward, we have attached a SWT bindings proposal.\tWe\nintend to discuss these requirements/starting point with the following eMeeting\nconference call\n\nThursday, Sep. 15th, at 10:00 ET\nhttp://www.timeanddate.com/worldclock/converted.html?month\u003d9\u0026day\u003d15\u0026year\u003d2005\u0026hour\u003d0\u0026min\u003d0\u0026sec\u003d0\u0026p1\u003d207\u0026p2\u003d0\n\n\n\nThe call/meeting has 20 slots, which is more than the (at this time) .cc on\nthis defect.  If you can share connections from a conference rooms, it will\nenable more folks to join in.\n\nJOIN THE WEB CONFERENCE\n\n   1) Join the conference up to 15 minutes prior to 9/15/2005 10:00 AM (UTC -4)\n\n   2) Direct your web browser to the following URL:\t\nhttps://www.ibm.com/collaboration/webconferences/meetingdetails.jsp?meetingId\u003dE00A4A216CB0F94159AFCAD0FD7B6428\n\n   3) When asked, enter your user name and password.  Customers use your IBM\nID.\n   4) When prompted, enter the web conference password:  ecl1pse\n\n  Additional web conference details:\n\n      Conference name:\t  SWT Bindings\n      Password: \t  ecl1pse\n      Start time:\t  9/15/2005 10:00 AM (UTC -4)\n      Duration: \t  2h 0m\n\nTo get an ID, use the following URL:\nhttps://www-1.ibm.com/collaboration/collaboratenow/\n\nTelephone:\nUSA Toll Free Number: 888-322-7148\nUSA Toll Number:      +1-210-234-8003\nInternational:\t       +1-210-234-8003\nPASSCODE: 54551\n",
    "JFace Binders Meeting Minutes:\n\nAttendees: \n\nDave Orme (VE Lead / Coconut Palm Software)\nMichael Van Meekeren (JFace / IBM)\nBoris Bokowski (JFace / IBM)\nDr Gili Mendel (VE / IBM)\nPeter Walker (VE / IBM)\nRich Kulp (VE / IBM)\nSrimanth Gunturi (VE / IBM)\nJoe Winchester (VE / IBM)\nSeth Packham/Durham (IBM)\nMichael Stokes (IBM)\nRichard A Bone (IBM)\nGeorge DeCandio (IBM)\n\n\n9:05 AM CDT -- Dave Orme opened meeting and introduced Gili\n\n9:06 AM - 10:15 AM -- Gili presented slides linked in comment 18 and ran demos\n\n10:15 AM - 10:20 AM -- Gili wrapped up and asked if we had consensus that this\npresentation describes what we want to do\n\nMichael agreed, but said that they would like to iterate on the API some.\n\n10:20 AM - 10:23 AM -- Gili said that Dave Orme would drive the effort going\nforward.\n\nDave suggested that if there are parts of the design that are not controversial\nat this time that perhaps he could start implementing a first cut of those.\n\nMichael said he would prefer to go through the technical feedback process first.\n\nDave agreed that this approach is fine.\n\nWe then agreed that Michael would let the entire team know when the JFace team\nis prepared with their feedback, Gili would allocate a conference call line, and\nDave would set up a VNC server to host the next meeting next week.\n\nThe meeting was adjorned.\n\n\n--------\n\nThis was written down from memory immediately after the meeting.  If anyone\nremembers anything important that I left out, please follow up with a comment.\n",
    "Created an attachment (id\u003d27343)\nWord document describing a simple data binding API\n\nThis document describes the direction we would like to take with regards to\ndata binding. More complicated scenarios (tables, master/detail) are not yet\ncovered, but we are working on it. Comments welcome!",
    "*** Bug 5013 has been marked as a duplicate of this bug. ***",
    "Created an attachment (id\u003d27394)\nPowerpoint slides\n\nslides for the conference call on 2005/09/22",
    "[Gili wrote via email]\n-------\n\nTks, Boris/Michael for the presentation.  I must say that we are all quite\nimpressed with your proposal and will be more than happy to help push it forward.\n\nThe following are the things I wrote down, and that may need some more iteration on:\n\nDispose\n   The current assumption that the target is a Widget... this may not always be\nthe case.\n   It will be preferable for the IUpdatable impl. do the cleanups implicitly.\n\nDelegate\n   Currently the IUpdatable binds to an Object\u0027s property... no mechanism to\nbind to a property of a variable:\n\n   In the sample app.  The Combo\u0027s text was bounded to a TextField\u0027s text...\nthis is a nice example, but not really practical.\n   A Combo does not have a notion of a model... (e.g., ComboViewer)\n\n   Typically a combo selections selects an Object, say a Person.  Other elements\nare then bounded to a property of the selected Person.\n    Up front, there are two ways to achieve this:\n\n      1.  IUpdatable has a notion (and can change) the \"root\" object, given that\nit is already a wrapper.\n      2.  IUpdatable can be the object of an IUpdatable ....and use nesting to\nbind to a property of an IUpdatable.\n\nTableViewer vs UpdatableList\n\n  JFace vs. Binders.... is it one, the other, both????  .... goal should be not\nto replace JFace... even of someone is writing a new visual,  it is likely to be\na part of, or interact with existing JFace components.... keep the usage the\nsame/familiar as much as possible.\n\n  naming:\n       IUpdatableList.getSize-\u003egetElementCount .... make it more like JFace\n       IUPdateTable.getColumnTypes() -\u003e getColumnType(int)\n\n\nBindingService interface\n    Need a mechanism to know that the BindingService object is that type of a\nservice (interface, abstract...)\n\nScenario.\n \n    Need to agree on the scenario, can use the first presentations ... they\ncomprise most of what it takes to build a full app.\n    target is early next week\n\nCustomization issues\n    How will one get down to \"turn knobs\" of IUpdatable impls.  that are created\nbehind the curtains. .. settings on the factory ???\n\nCreating/Extending/Contributing to Service/ServiceFactories\n   Need a generic, single (as much as possible) boiler plate coding/discovering.",
    "(In reply to comment #23)\n\u003e [Gili wrote via email]\n\u003e -------\n\u003e \n\u003e Tks, Boris/Michael for the presentation.  I must say that we are all quite\n\u003e impressed with your proposal and will be more than happy to help push it forward.\n\u003e \n\u003e The following are the things I wrote down, and that may need some more\niteration on:\n\u003e \n\u003e Dispose\n\u003e    The current assumption that the target is a Widget... this may not always be\n\u003e the case.\n\u003e    It will be preferable for the IUpdatable impl. do the cleanups implicitly.\n\nGili, Sweet could get away with always using a dispose listener because it has a\nconcept of setInput(), and you only ever bind a single object to a given control.\n\nThis proposal can\u0027t use that solution because you need a new IUpdateable object\nevery time you want to set a new input on a control.  So the dispose() method\n(maybe misnamed) is really just unregistering all of its event handlers and you\ncan\u0027t get away from that.\n\n\u003e Delegate\n\u003e    Currently the IUpdatable binds to an Object\u0027s property... no mechanism to\n\u003e bind to a property of a variable:\n\nNot sure what you mean here.  Either a variable references an object, in which\ncase it makes total sense to bind to a property of the object, or it contains a\nprimitive type.  So far, no binding proposal we have considered handles this\nuse-case, so we\u0027re all even there.\n\nAm I missing something?\n\n\u003e    In the sample app.  The Combo\u0027s text was bounded to a TextField\u0027s text...\n\u003e this is a nice example, but not really practical.\n\nMaybe in this example.  But there are times when you would want to bind the\nselected property of a check box to the enabled property of a push button, for\nexample.  This sort of thing happens all the time in user interfaces.\n\n\u003e    Typically a combo selections selects an Object, say a Person.  Other elements\n\u003e are then bounded to a property of the selected Person.\n\u003e     Up front, there are two ways to achieve this:\n\u003e \n\u003e       1.  IUpdatable has a notion (and can change) the \"root\" object, given that\n\u003e it is already a wrapper.\n\u003e       2.  IUpdatable can be the object of an IUpdatable ....and use nesting to\n\u003e bind to a property of an IUpdatable.\n\nI prefer #2--to build out the framework using itself.\n\n\u003e TableViewer vs UpdatableList\n\u003e \n\u003e   JFace vs. Binders.... is it one, the other, both????  .... goal should be not\n\u003e to replace JFace... even of someone is writing a new visual,  it is likely to be\n\u003e a part of, or interact with existing JFace components.... keep the usage the\n\u003e same/familiar as much as possible.\n\nI\u0027ll let Boris / the JFace team reply to this.\n\n\u003e   naming:\n\u003e        IUpdatableList.getSize-\u003egetElementCount .... make it more like JFace\n\u003e        IUPdateTable.getColumnTypes() -\u003e getColumnType(int)\n\nPersonally, I think we should stay as close as possible to Java collections\nframework naming conventions.\n\nJava programmers as a whole are more familiar with Java collections framework\nnaming conventions than JFace naming conventions and I think it\u0027s safe to say\nthat every JFace programmer is already fluent with the Java collections naming\nconventions.  \n\nSo if we stick with Java Collections naming conventions, *nobody* has to learn\nanything new.  If we go with JFace-specific naming conventions, then we make it\nharder than it should be necessary for non-Eclipse programmers to learn the\nbinding framework.\n\nI vote to keep Boris\u0027s current naming.\n\n\u003e BindingService interface\n\u003e     Need a mechanism to know that the BindingService object is that type of a\n\u003e service (interface, abstract...)\n\nWhat is the use-case for this?\n\n\u003e Scenario.\n\u003e  \n\u003e     Need to agree on the scenario, can use the first presentations ... they\n\u003e comprise most of what it takes to build a full app.\n\u003e     target is early next week\n\u003e \n\u003e Customization issues\n\u003e     How will one get down to \"turn knobs\" of IUpdatable impls.  that are created\n\u003e behind the curtains. .. settings on the factory ???\n\nBoris, this relates to how we eventually implement the whole thing.\n\nI would be most comfortable (since I\u0027ll be maintaining this code long-term\nanyway) building your API into Sweet 0.  If this is true, one would customize\nbehavior using the registries that Sweet 0 defines (to answer Gili\u0027s question).\n Of course, I\u0027m open to naming/structure changes before we declare what is API\nand decide how everything will ultimately work.\n\nIs this in line with your thoughts or do you have a different idea?\n\n\u003e Creating/Extending/Contributing to Service/ServiceFactories\n\u003e    Need a generic, single (as much as possible) boiler plate \n\u003e coding/discovering.\n\nYes.\n\n",
    "\n\u003e Delegate\n\u003e    Currently the IUpdatable binds to an Object\u0027s property... no mechanism to\n\u003e bind to a property of a variable:\n\nNot sure what you mean here.  Either a variable references an object, in which\ncase it makes total sense to bind to a property of the object, or it contains a\nprimitive type.  So far, no binding proposal we have considered handles this\nuse-case, so we\u0027re all even there.\n\nAm I missing something?\n\n--- Take the case of a the selected entry of a list box of people determines the\nperson that will be displayed in a text field. In this case the text field would\nbe bound to the \"name\" attribute of the selected person. But at bind time we\ndon\u0027t know who the selected person is. It is constantly changing. So you would\ninstead bind to the \"name\" attribute of an IUpdateValue (call them Person and\nPersonsName IUpdatableValues) that wrappers the selected person. The selection\nof the listbox will be bound to the Person IUpdateValue. Now whenever the\nselection changes a new person is set into the Person IUpdatableValue, this then\nlets the PersonsName IUpdatableValue be changed to the new name and so the text\nfield get\u0027s the new name.\n\n\u003e BindingService interface\n\u003e     Need a mechanism to know that the BindingService object is that type of a\n\u003e service (interface, abstract...)\n\n--- For visual tooling purposes. It is very difficult to guess that this is\nbinding two objects. It could easily be wrong. Since we are providing some\ninterfaces already, it is just a simple step to provide one more.\n",
    "(In reply to comment #25)\n\u003e \u003e Delegate\n\u003e \u003e    Currently the IUpdatable binds to an Object\u0027s property... no mechanism to\n\u003e \u003e bind to a property of a variable:\n\u003e \n\u003e Not sure what you mean here.  Either a variable references an object, in which\n\u003e case it makes total sense to bind to a property of the object, or it contains a\n\u003e primitive type.  So far, no binding proposal we have considered handles this\n\u003e use-case, so we\u0027re all even there.\n\u003e \n\u003e Am I missing something?\n\u003e \n\u003e --- Take the case of a the selected entry of a list box of people determines the\n\u003e person that will be displayed in a text field. In this case the text field would\n\u003e be bound to the \"name\" attribute of the selected person. But at bind time we\n\u003e don\u0027t know who the selected person is. It is constantly changing. So you would\n\u003e instead bind to the \"name\" attribute of an IUpdateValue (call them Person and\n\u003e PersonsName IUpdatableValues) that wrappers the selected person. The selection\n\u003e of the listbox will be bound to the Person IUpdateValue. Now whenever the\n\u003e selection changes a new person is set into the Person IUpdatableValue, this then\n\u003e lets the PersonsName IUpdatableValue be changed to the new name and so the text\n\u003e field get\u0027s the new name.\n\nOkay, I think I follow this but I\u0027m not sure I understand what the question is.\n\n\u003e \u003e BindingService interface\n\u003e \u003e     Need a mechanism to know that the BindingService object is that type of a\n\u003e \u003e service (interface, abstract...)\n\u003e \n\u003e --- For visual tooling purposes. It is very difficult to guess that this is\n\u003e binding two objects. It could easily be wrong. Since we are providing some\n\u003e interfaces already, it is just a simple step to provide one more.\n\u003e \n\nThanks, I understand now. :-)",
    "*** Bug 74368 has been marked as a duplicate of this bug. ***",
    "Just to confirm, Dave (and everyone else) I\u0027m assuming we don\u0027t need to have the\ncall this week.  It seems like there has been lots of dialog between Boris, Joe,\nGili and yourself.  I suggest that next week we might want to have one.\n\nThoughts?",
    "(In reply to comment #28)\n\u003e Just to confirm, Dave (and everyone else) I\u0027m assuming we don\u0027t need to have the\n\u003e call this week.  It seems like there has been lots of dialog between Boris, Joe,\n\u003e Gili and yourself.\n\nAgreed.  Boris and I paired on this on Tuesday and I expect we will continue\ntonight.  I understand that Gili and his team are working with Boris too.\n\n\u003e  I suggest that next week we might want to have one.\n\nGood idea.\n",
    "I am interested in monitoring the progress of this work. Whenis it going to be \navailable in production quality? Thanks!",
    "(In reply to comment #30)\n\u003e I am interested in monitoring the progress of this work. Whenis it going to be \n\u003e available in production quality? Thanks!\n\nEclipse 3.2.\n\n",
    "I haven\u0027t read over all this yet, but I\u0027d like to see whatever is decided upon\nbe comparable with the nice data binding support that MS put into WinForms, the\nnew Grid controls, and Avalon. I like the way they can do disconnected data\nsources, XML files, flat files, and databases all with the same interface. The\nsimplicity for the coder is also nice in their solution.\n\nOne thing I don\u0027t understand from what I\u0027ve read so far is the support for plain\nSWT controls. Binding seems like a concern of JFace or above and not the widget\nlayer.",
    "(In reply to comment #32)\n\u003e I haven\u0027t read over all this yet, but I\u0027d like to see whatever is decided upon\n\u003e be comparable with the nice data binding support that MS put into WinForms, the\n\u003e new Grid controls, and Avalon. I like the way they can do disconnected data\n\u003e sources, XML files, flat files, and databases all with the same interface. The\n\u003e simplicity for the coder is also nice in their solution.\n\nWe think we\u0027ve come up with an even simpler interface than what Microsoft has\ndone for accomplishing all of what you describe.\n\n\u003e One thing I don\u0027t understand from what I\u0027ve read so far is the support for plain\n\u003e SWT controls. Binding seems like a concern of JFace or above and not the widget\n\u003e layer.\n\nThis is one important area where we\u0027re different from Microsoft\u0027s solution. \nMicrosoft\u0027s solution requires special \"data-aware\" controls.  We have no such\nrequirement--we\u0027ll work with *any* control.\n\nWe view binding as orthogonal to UI concerns.  Binding at its simplest level is\njust connecting a property of one object to a property of another object such\nthat changes to one are automatically reflected in the other.  The fact that\nsome of those objects might be JFace or SWT controls (or even Swing controls) is\nincidental.\n\nPlease read Boris\u0027s paper (Attachment: \"Word document describing a simple data\nbinding API\" above) for more details.  Our implementation has changed somewhat\nsince then, but the basic ideas are still the same.\n\n",
    "For those tracking progress here, the data binding framework (which is marked as\n*experimental* API) is now included in the Eclipse nightly builds.  \n\nIf you try it and need to enter bugs against it, please add the tag\n[DataBinding] to the front of the summary so that we will find it quickly.  In\naddition, if you\u0027re feeling really energetic, we\u0027ll find it even faster if you\nadd myself, Boris, or Joe Winchester to the CC list. ;-)\n",
    "(In reply to comment #34) \n\u003e For those tracking progress here, the data binding framework (which is \n\u003e marked as *experimental* API) is now included in the Eclipse nightly builds.   \n \nIt also available in I20051115-0800 and later. ",
    "A (work-in-progress) document describing the data binding framework is available\nat this URL:\n\nhttp://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-ui-home/databinding-proposal/databinding.html\n\nI will add another comment to this bug when the document has stabilized a bit.",
    "I think I found problem with this version: eclipse-SDK-I20051116-1332-win32.zip \nWhen I try to bind \"double\" property to Text it throws exception:\n\norg.eclipse.jface.databinding.BindingException: Converter does not apply to\nmodel type. Expected: double, actual: class java.lang.String\n\tat org.eclipse.jface.databinding.internal.ValueBinding.\u003cinit\u003e(ValueBinding.java:61)\n\tat\norg.eclipse.jface.databinding.internal.DataBindingContext.bind(DataBindingContext.java:399)\n\tat\norg.eclipse.jface.databinding.internal.DataBindingContext.bind(DataBindingContext.java:454)\n\tat\norg.eclipse.jface.databinding.internal.DataBindingContext.bind(DataBindingContext.java:511)\n\tat ru.nlmk.Test.createContents(Test.java:87)\n\tat ru.nlmk.Test.open(Test.java:45)\n\tat ru.nlmk.Test.main(Test.java:34)\n\n  I am not sure, but problem can be in ValueBinding, because when I change this:\n\n\t\tif (!converter.getModelType().equals(model.getValueType())) {\n\t\t\tthrow new BindingException(\n\t\t\t\t\t\"Converter does not apply to model type. Expected: \" + model.getValueType()\n+ \", actual: \" + converter.getModelType()); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t}\n\t\tif (!converter.getTargetType().equals(target.getValueType())) {\n\t\t\tthrow new BindingException(\n\t\t\t\t\t\"Converter does not apply to target type. Expected: \" +\ntarget.getValueType() + \", actual: \" + converter.getTargetType()); //$NON-NLS-1$\n//$NON-NLS-2$\n\t\t}\n\nto this:\n\n\t\tif (!converter.getTargetType().equals(model.getValueType())) {\n\t\t\tthrow new BindingException(\n\t\t\t\t\t\"Converter does not apply to model type. Expected: \" + model.getValueType()\n+ \", actual: \" + converter.getTargetType()); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t}\n\t\tif (!converter.getModelType().equals(target.getValueType())) {\n\t\t\tthrow new BindingException(\n\t\t\t\t\t\"Converter does not apply to target type. Expected: \" +\ntarget.getValueType() + \", actual: \" + converter.getModelType()); //$NON-NLS-1$\n//$NON-NLS-2$\n\t\t}\n\n  it works.\n\n  See also source code for bean and GUI below.\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\n\npublic class User {\n\tprivate String m_firstName;\n\n\tprivate String m_lastName;\n\n\tprivate double m_age;\n\n\tprivate PropertyChangeSupport m_propertyListeners \u003d new PropertyChangeSupport(\n\t\t\tthis);\n\n\tpublic String getFirstName() {\n\t\treturn m_firstName;\n\t}\n\n\tpublic void setFirstName(String firstName) {\n\t\tm_firstName \u003d firstName;\n\t}\n\n\tpublic String getLastName() {\n\t\treturn m_lastName;\n\t}\n\n\tpublic void setLastName(String lastName) {\n\t\tString oldLastName \u003d m_lastName;\n\t\tm_lastName \u003d lastName;\n\t\tm_propertyListeners.firePropertyChange(\"lastName\", oldLastName,\n\t\t\t\tm_lastName);\n\t}\n\n\tpublic double getAge() {\n\t\treturn m_age;\n\t}\n\n\tpublic void setAge(double age) {\n\t\tDouble oldAge \u003d new Double(m_age);\n\t\tm_age \u003d age;\n\t\tm_propertyListeners\n\t\t\t\t.firePropertyChange(\"age\", oldAge, new Double(m_age));\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"(\" + m_firstName + \", \" + m_lastName + \", \" + m_age + \")\";\n\t}\n\n\tpublic void addPropertyChangeListener(PropertyChangeListener listener) {\n\t\tm_propertyListeners.addPropertyChangeListener(listener);\n\t}\n\n\tpublic void removePropertyChangeListener(PropertyChangeListener listener) {\n\t\tm_propertyListeners.removePropertyChangeListener(listener);\n\t}\n}\n\n\nimport org.eclipse.jface.databinding.DataBinding;\nimport org.eclipse.jface.databinding.IDataBindingContext;\nimport org.eclipse.jface.databinding.PropertyDescription;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Text;\n\npublic class Test {\n\n\tprivate Text m_txtAge;\n\n\tprivate Text m_txtLast;\n\n\tprivate Text m_txtFirst;\n\n\tprotected Shell shell;\n\n\t/**\n\t * Launch the application\n\t * \n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tTest window \u003d new Test();\n\t\t\twindow.open();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Open the window\n\t */\n\tpublic void open() {\n\t\tfinal Display display \u003d Display.getDefault();\n\t\tcreateContents();\n\t\tshell.open();\n\t\tshell.layout();\n\t\twhile (!shell.isDisposed()) {\n\t\t\tif (!display.readAndDispatch())\n\t\t\t\tdisplay.sleep();\n\t\t}\n\t}\n\n\t/**\n\t * Create contents of the window\n\t */\n\tprotected void createContents() {\n\t\tshell \u003d new Shell();\n\t\tshell.setLayout(new GridLayout());\n\t\tshell.setSize(439, 312);\n\t\tshell.setText(\"SWT Application\");\n\n\t\tfinal User user \u003d new User();\n\t\tuser.setFirstName(\"Konstantin\");\n\t\tuser.setLastName(\"Scheglov\");\n\t\tuser.setAge(12);\n\t\tSystem.out.println(\"before: \" + user);\n\n\t\tm_txtFirst \u003d new Text(shell, SWT.BORDER);\n\t\tm_txtFirst.setLayoutData(new GridData(GridData.FILL, GridData.CENTER,\n\t\t\t\ttrue, false));\n\n\t\tm_txtLast \u003d new Text(shell, SWT.BORDER);\n\t\tm_txtLast.setLayoutData(new GridData(GridData.FILL, GridData.CENTER,\n\t\t\t\ttrue, false));\n\n\t\tm_txtAge \u003d new Text(shell, SWT.BORDER);\n\t\tm_txtAge.setLayoutData(new GridData(GridData.FILL, GridData.CENTER,\n\t\t\t\ttrue, false));\n\n\t\tIDataBindingContext bindingContext \u003d DataBinding.createContext(shell);\n\t\ttry {\n\t\t\tbindingContext.bind(m_txtFirst, new PropertyDescription(user,\n\t\t\t\t\t\"firstName\"), null);\n\t\t\tbindingContext.bind(m_txtLast, new PropertyDescription(user,\n\t\t\t\t\t\"lastName\"), null);\n\t\t\tbindingContext.bind(m_txtAge, new PropertyDescription(user, \"age\"),\n\t\t\t\t\tnull);\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tfinal Button showButton \u003d new Button(shell, SWT.NONE);\n\t\tshowButton.addSelectionListener(new SelectionAdapter() {\n\t\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\t\tSystem.out.println(\"current: \" + user);\n\t\t\t}\n\t\t});\n\t\tshowButton.setLayoutData(new GridData(GridData.FILL, GridData.CENTER,\n\t\t\t\ttrue, false));\n\t\tshowButton.setText(\"Show!\");\n\n\t\tfinal Button changeButton \u003d new Button(shell, SWT.NONE);\n\t\tchangeButton.addSelectionListener(new SelectionAdapter() {\n\t\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\t\tuser.setLastName(\"\" + System.currentTimeMillis());\n\t\t\t\tuser.setAge(18);\n\t\t\t}\n\t\t});\n\t\tchangeButton.setLayoutData(new GridData(GridData.FILL, GridData.CENTER,\n\t\t\t\tfalse, false));\n\t\tchangeButton.setText(\"Change!\");\n\t}\n\n}\n",
    "Konstantin, thank you for experimenting with the data binding framework. I have\nopened bug 116862 for the problem you describe.\n\nEveryone, please open separate bugzillas against Platform UI with [DataBinding]\nin the title for problems, concerns, bugs, or enhancement requests. I intend to\nclose this bug once the documentation and API has stabilized a bit.",
    "I create a databinding related feature request:\nbug 118125 [databinding] databinding needs support for editors with undoable commands",
    "Could someone add the string [DataBinding] to the summary of this bug. Search for DataBindung in summary finds all kinds of bugs, but not this one.\n",
    "Has anyone planned to give a talk about the databinding framework at eclipsecon?\n\nIf not, I am considering to give a talk titled: \"Simplify EMF editors with the new jface databinding framework and annotation driven GUI layout\"",
    "I have submitted a talk:\nhttp://canuck.gda.itesm.mx/eclipsezilla/show_bug.cgi?id\u003d89",
    "I am pleased to announce that where I am currently consulting, we are now using the new JFace data binding framework for a large-scale project.\n\nI have proposed a new EclipseCon talk to present the lessons we learn from applying this new technology to a real-world project.\n\nSee: http://canuck.gda.itesm.mx/eclipsezilla/show_bug.cgi?id\u003d271\n\nIf you like it, please vote for it. :-)",
    "i think this code is an ongoing effort based on the essential data things ?\n\nI have had a short look into the specification document attached here, and i would like to have it done in more details before go on with coding, because i think that \"things\" should be more clear on what to do and on how to do.\n\nbasically a review and compatibilty to other efforts on swing, html, apache commons etc should be done. \n\nwhat i miss are things like:\n-\u003e what is done with auto completion of user input, before validation. \n-\u003e validators: there could be more so there sould be a chain of them ?\n-\u003e what?s about exception handling \n-\u003e whats with message display and notification.\n-\u003e model change notification and the view \n-\u003e cross field validation\n-\u003e undo/redo\n-\u003e what about marking a field dirty, and when to clean it\n-\u003e if validation gets wrong, is it saved to the model or not, what is left in the ui-field ?\n-\u003e for all those message notifications about model changes there may be some problems of getting into circles and un-whanted depencencies.\n-\u003e auto completition, formating to a type and basic validation of a type has some close behaviour. \n-\u003e essential data was havily based on reflection. there are pros and cons about that. \n\nas we also need such a framework we are interested in giving you feedback and may be able to contribute some small parts. \ngood luck, a good binding framework will improve swt and jface a lot ;-)  ",
    "Thanks for the feedback.  Comments inline:\n\n(In reply to comment #44)\n\u003e i think this code is an ongoing effort based on the essential data things ?\n\nThe JFace binding design is a totally new design done by Boris, who I\u0027m sure looked at Essential Data or another framework I wrote that was pretty similar to Essential Data.  It\u0027s different from ED in some important ways so if you\u0027re used to ED, there will be a slight learning curve until you get used to the new way of thinking about binding.\n\n\u003e I have had a short look into the specification document attached here, and i\n\u003e would like to have it done in more details before go on with coding, because i\n\u003e think that \"things\" should be more clear on what to do and on how to do.\n\nWe agree.  Documentation right now is severely lacking.  But then, we have a February API freeze deadline we have to beat, so I don\u0027t expect Docs to change much before then.\n\n\u003e basically a review and compatibilty to other efforts on swing, html, apache\n\u003e commons etc should be done. \n\u003e \n\u003e what i miss are things like:\n\u003e -\u003e what is done with auto completion of user input, before validation. \n\nThis would be a custom SWT control.  If someone writes one, we can bind to it.\n\n\u003e -\u003e validators: there could be more so there sould be a chain of them ?\n\nCan you be more explicit here?  Of course, you can write a validator that delegates to another validator, but I\u0027m not sure that\u0027s what you mean.\n\n\u003e -\u003e what?s about exception handling \n\nAgain, I\u0027m not sure what you\u0027re looking for here.\n\n\u003e -\u003e whats with message display and notification.\n\nThis is more flexible than ED.  ED had a singleton that provided message display events.  We provide an IUpdatableValue on the data binding context, which gives much finer granularity.\n\n\u003e -\u003e model change notification and the view\n\nWe support JavaBeans (POJOS) out of the box but with a simpler syntax than ED used.\n\n\u003e -\u003e cross field validation\n\nThis is bug #119504.\n\n\u003e -\u003e undo/redo\n\nBug #116465.  Simple to implement, once we fix a dependent bug.\n\n\u003e -\u003e what about marking a field dirty, and when to clean it\n\n119791\n\n\u003e -\u003e if validation gets wrong, is it saved to the model or not, what is left in\n\u003e the ui-field ?\n\nConfigurable based on how you write your validators.  What behavior do you need?\n\n\u003e -\u003e for all those message notifications about model changes there may be some\n\u003e problems of getting into circles and un-whanted depencencies.\n\nWe haven\u0027t seen this yet.  If you find this, please file a bug with a test case.\n\n\u003e -\u003e auto completition, formating to a type and basic validation of a type has\n\u003e some close behaviour. \n\n...not to mention picture strings and so on...\n\n\u003e -\u003e essential data was havily based on reflection. there are pros and cons \n\u003e about that. \n\nOur default implementation is based on reflection.  But our implementation is completely open, so you can replace any of this behavior you need or want to.\n\n\u003e as we also need such a framework we are interested in giving you feedback and\n\u003e may be able to contribute some small parts. \n\u003e good luck, a good binding framework will improve swt and jface a lot ;-)  \n\nThanks!  Look forward to seeing you around.\n\n",
    "\u003e\u003e ...\n\u003e\u003e think that \"things\" should be more clear on what to do and on how to do.\n\u003e We agree.  Documentation right now is severely lacking.  But then, we have a\n\u003e February API freeze deadline we have to beat, so I don\u0027t expect Docs to change\n\u003e much before then.\n\nI am not talking about any documentation, i am talking about a more detailed specification document about what should be coded and e.g. what are the designed event flows etc...\n\n\u003e\u003e what i miss are things like:\n\u003e\u003e -\u003e what is done with auto completion of user input, before validation. \n\u003e This would be a custom SWT control.  If someone writes one, we can bind to it.\n\nwell i think that this should be included in the standardard framework, because the automatic completition of some user input is not that un-usual. think of a date input control, the user may enter 10 and the output may be May 10 2005 or something else, any immediate validation would fail on 10 to be a date, our would have to accept this.\n\n\u003e\u003e -\u003e validators: there could be more so there sould be a chain of them ?\n\u003e Can you be more explicit here?  Of course, you can write a validator that\n\u003e delegates to another validator, but I\u0027m not sure that\u0027s what you mean.\n\nyes, we can. well for validators i do think there should be a standard validator  that ensures that it is the propper type, and then there could be other more specific ones, e.g. date-ranges, bank/working day, is-not-null \n\n\n\n",
    "(In reply to comment #46)\n\u003e \u003e\u003e ...\n\u003e \u003e\u003e think that \"things\" should be more clear on what to do and on how to do.\n\u003e \u003e We agree.  Documentation right now is severely lacking.  But then, we have a\n\u003e \u003e February API freeze deadline we have to beat, so I don\u0027t expect Docs to change\n\u003e \u003e much before then.\n\u003e \n\u003e I am not talking about any documentation, i am talking about a more detailed\n\u003e specification document about what should be coded and e.g. what are the\n\u003e designed event flows etc...\n\nWe\u0027re following an agile process here--which means we have enough design documentation so that any of us can read the code and understand it.  After that, we discuss what needs to be done and implement it.\n\nMost of our formal discussion currently is on Bugzilla in the bugs with [DataBinding] in the summary.  That is where the details of the design and implementation are being fleshed out iteratively.\n\nIf there\u0027s something specific you\u0027d like to know about, please ask; we\u0027d be happy to help.\n\n\u003e \u003e\u003e what i miss are things like:\n\u003e \u003e\u003e -\u003e what is done with auto completion of user input, before validation. \n\u003e \u003e This would be a custom SWT control.  If someone writes one, we can bind to it.\n\u003e \n\u003e well i think that this should be included in the standardard framework, because\n\u003e the automatic completition of some user input is not that un-usual. think of a\n\u003e date input control, the user may enter 10 and the output may be May 10 2005 or\n\u003e something else, any immediate validation would fail on 10 to be a date, our\n\u003e would have to accept this.\n\nI agree that this would be nice.  All the current committers are maxed out on their time right now, so if somebody would like to write such a control, it would be a very cool thing to include!\n\n\u003e \u003e\u003e -\u003e validators: there could be more so there sould be a chain of them ?\n\u003e \u003e Can you be more explicit here?  Of course, you can write a validator that\n\u003e \u003e delegates to another validator, but I\u0027m not sure that\u0027s what you mean.\n\u003e \n\u003e yes, we can. well for validators i do think there should be a standard\n\u003e validator  that ensures that it is the propper type, and then there could be\n\u003e other more specific ones, e.g. date-ranges, bank/working day, is-not-null \n\nWe do this today.\n\nThanks again for the feedback!\n",
    "(In reply to comment #46)\n\u003e \u003e\u003e -\u003e validators: there could be more so there sould be a chain of them ?\n\u003e \u003e Can you be more explicit here?  Of course, you can write a validator that\n\u003e \u003e delegates to another validator, but I\u0027m not sure that\u0027s what you mean.\n\u003e \n\u003e yes, we can. well for validators i do think there should be a standard\n\u003e validator  that ensures that it is the propper type, and then there could be\n\u003e other more specific ones, e.g. date-ranges, bank/working day, is-not-null \n\nI thought some more about what you are saying and filed bug #104570 as a result.  Thanks!\n",
    "(In reply to comment #48)\n\u003e (In reply to comment #46)\n\u003e \u003e \u003e\u003e -\u003e validators: there could be more so there sould be a chain of them ?\n\u003e \u003e \u003e Can you be more explicit here?  Of course, you can write a validator that\n\u003e \u003e \u003e delegates to another validator, but I\u0027m not sure that\u0027s what you mean.\n\u003e \u003e \n\u003e \u003e yes, we can. well for validators i do think there should be a standard\n\u003e \u003e validator  that ensures that it is the propper type, and then there could be\n\u003e \u003e other more specific ones, e.g. date-ranges, bank/working day, is-not-null \n\u003e \n\u003e I thought some more about what you are saying and filed bug #104570 as a\n\u003e result.  Thanks!\n\nSorry, that was bug #120582. :-}\n",
    "How\u0027s this relate to bug 106199 (improved assistance in text fields)? If they don\u0027t relate now, can they?",
    "(In reply to comment #50)\n\u003e How\u0027s this relate to bug 106199 (improved assistance in text fields)? If they\n\u003e don\u0027t relate now, can they?\n\u003e \n\nPlease see also bug 106199, comment #29.  :-)",
    "expounding a bit on the relationship between data binding and the field assist work... It would be great to have a high-level example of a form or dialog that uses:\n- data binding\n- field decorations for required field indication\n- content proposals for auto-completion of fields\n- validators that can use either decorations or the normal status message to show error conditions (decorations if field-based cues are desired)\n- special input validating controls to demonstrate that the decorations and content proposal adapters can operate on arbitrary controls\n\nFor different app frameworks, these tools will be combined in different ways, with different decisions about how errors, required fields, etc. are shown, and how much validation occurs before updating the model.  I don\u0027t see a lower-level tie-in of these building blocks.\n\nAnyone who has time to take a stab at this - it would be appreciated as a way to validate that all of these work together as well as we claim they should...  ;-)",
    "(In reply to comment #52)\n\u003e expounding a bit on the relationship between data binding and the field assist\n\u003e work... It would be great to have a high-level example of a form or dialog that\n\u003e uses:\n\u003e - data binding\n\u003e - field decorations for required field indication\n\u003e - content proposals for auto-completion of fields\n\u003e - validators that can use either decorations or the normal status message to\n\u003e show error conditions (decorations if field-based cues are desired)\n\u003e - special input validating controls to demonstrate that the decorations and\n\u003e content proposal adapters can operate on arbitrary controls\n\u003e \n\u003e For different app frameworks, these tools will be combined in different ways,\n\u003e with different decisions about how errors, required fields, etc. are shown, and\n\u003e how much validation occurs before updating the model.  I don\u0027t see a\n\u003e lower-level tie-in of these building blocks.\n\u003e \n\u003e Anyone who has time to take a stab at this - it would be appreciated as a way\n\u003e to validate that all of these work together as well as we claim they should... \n\u003e ;-)\n\nI want to add Decoration to the controls I use with Databinding framework. It\u0027s hard to do, because Validators don\u0027t have the control visibility (target) (see IValidator interface).\nThen, I thought I could create a new IDatabindingContext implementation and addFieldDecoration here, but I couldn\u0027t, since in updateValidationError() method, I don\u0027t have visibility of the control.\n\nI think it can be useful to have target visibility in Validator or DatabindingContext.\n\nIs there an other way to link Validation/Conversion and Decoration ?\nWill the API change to enable decoration capability ?\n",
    "Nicolas - thanks for trying this out, it\u0027s really important for us to resolve any API issue that would prevent these two features from working well together.  Is there a simple example that you could attach?  Might help in discussing the issues.  \n\nCan a data binding person comment on this?  From a field decoration standpoint, you need to have a reference to the DecoratedField in order to hide/show decorations or add decorations.  From that field, you can also get access to the control itself. ",
    "(In reply to comment #54)\n\u003e Can a data binding person comment on this?  From a field decoration standpoint,\n\u003e you need to have a reference to the DecoratedField in order to hide/show\n\u003e decorations or add decorations.  From that field, you can also get access to\n\u003e the control itself. \n\nThis is a symptom of bug #120582.\n\nI am currently working on a solution to this; all suggestions are also welcome.",
    "I have looked at JGoodies bind- and validation- framwork. I recognized that the org.eclipse.jface.databinding.validator.IValidator can only report one message.\n\nJGoodies supports several messages and in addition a serverity.\nhttp://www.google.ch/search?hl\u003dde\u0026q\u003dIValidator+binding+jface+api\u0026btnG\u003dSuche\u0026meta\u003d\n\n\n",
    "re comment #56: yes - see bug 118429.",
    "With M5 being declared soon, I would like to give you an update on the JFace data binding framework.\n\nWe have decided to *not* publish the data binding framework as official API for 3.2 because it has not yet received sufficient review and/or adoption.  In particular, we were not confident that the listener notification API was sufficiently stable.\n\nSince we made the decision, we have been busy refactoring the framework to address our concerns.  The result of this refactoring will be released into HEAD next week.  The main changes were (0) renaming packages to internal.provisional, (1) renaming IUpdatable to IObservable, (2) restructuring the IObservable hierarchy, (3) the way listeners are registered and notified, and (4) switching back to one-way converters.  I will send instructions for migrating from the current framework to the refactored version when I release it to HEAD. In a nutshell, (0) and (1) are simple renames, (4) is more or less mechanical, and (2) and (3) only affect you if you are currently implementing IUpdatable or listening directly to an IUpdatable.\n\nAfter the dust settles (i.e. in a few weeks), we will try to evolve the provisional \"API\" in an upwards-compatible way as much as possible to give early adopters a chance to use it for real. To this end, we will remove the current \"EXPERIMENTAL\" warnings.  However, it is important to remember that when the framework is promoted to real API, there will be a porting effort for existing clients.  In the best case this porting effort amounts to an organize imports on your source files, but obviously we cannot promise that this is going to be all.\n\nThanks\nBoris Bokowski\n",
    "(In reply to comment #58)\n\u003e With M5 being declared soon, I would like to give you an update on the JFace\n\u003e data binding framework.\n\u003e \n\u003e We have decided to *not* publish the data binding framework as official API for\n\u003e 3.2 because it has not yet received sufficient review and/or adoption.  In\n\u003e particular, we were not confident that the listener notification API was\n\u003e sufficiently stable.\n\u003e \n\u003e Since we made the decision, we have been busy refactoring the framework to\n\u003e address our concerns.  The result of this refactoring will be released into\n\u003e HEAD next week.  The main changes were (0) renaming packages to\n\u003e internal.provisional, (1) renaming IUpdatable to IObservable, (2) restructuring\n\u003e the IObservable hierarchy, (3) the way listeners are registered and notified,\n\u003e and (4) switching back to one-way converters.  I will send instructions for\n\u003e migrating from the current framework to the refactored version when I release\n\u003e it to HEAD. In a nutshell, (0) and (1) are simple renames, (4) is more or less\n\u003e mechanical, and (2) and (3) only affect you if you are currently implementing\n\u003e IUpdatable or listening directly to an IUpdatable.\n\u003e \n\u003e After the dust settles (i.e. in a few weeks), we will try to evolve the\n\u003e provisional \"API\" in an upwards-compatible way as much as possible to give\n\u003e early adopters a chance to use it for real. To this end, we will remove the\n\u003e current \"EXPERIMENTAL\" warnings.  However, it is important to remember that\n\u003e when the framework is promoted to real API, there will be a porting effort for\n\u003e existing clients.  In the best case this porting effort amounts to an organize\n\u003e imports on your source files, but obviously we cannot promise that this is\n\u003e going to be all.\n\u003e \n\u003e Thanks\n\u003e Boris Bokowski\n\u003e \n\nI started my development with M5 databinding API. I want to migrate to M6. After refactoring, it seems to be ok, but I have lost the functionality of table binding with read-write mode. I can bind a read only table, but not write with editors, converters... I saw there has been a refactoring with TableModelDescription. Can you give me more info regarding your strategy. Will write mode be implemented later? Should I port the M5 tableViewer binding to M6? What will be provided in final release in june? What would be the more stable way to implement a workaround?\n\nThanks for your reply.",
    "\u003e I started my development with M5 databinding API. I want to migrate to M6.\n\u003e After refactoring, it seems to be ok, but I have lost the functionality of\n\u003e table binding with read-write mode. I can bind a read only table, but not write\n\u003e with editors, converters... I saw there has been a refactoring with\n\u003e TableModelDescription. Can you give me more info regarding your strategy. Will\n\u003e write mode be implemented later? Should I port the M5 tableViewer binding to\n\u003e M6? What will be provided in final release in june? What would be the more\n\u003e stable way to implement a workaround?\n\nThere are two old features we have not had the bandwidth to carry forward at this point:\n\n1) Read-write mode, and\n\n2) Tree support\n\nGetting this support back in is a matter of the laws of software physics: someone has to write it.  Both Boris and I are swamped at the moment with enough other priorities that adding (back) major new features is out of the question.  But if someone else had the time and inclination, we would be happy to work with them to help them understand the code and to help them know what kind of patch would be needed.\n\n",
    "Realized I didn\u0027t answer some specific questions you asked:\n\n\u003e Should I port the M5 tableViewer binding to M6?\n\nWe\u0027d love to have someone port that (and contribute it back if you can do that).\n\n\u003e What will be provided in final release in June?\n\nRight now unless the team finds a bunch of time, things will probably be pretty much as they are.  There are a handful of significant bugs in what we have that still need fixing so that the API can be as stable as a provisional API can be. \n\nFor example, the business rule validator story is broken right now.  There are comments in the code about what needs fixed, and we\u0027ll fix that before June.  Stuff like that.\n\n\u003e What would be the more stable way to implement a workaround?\n\nThat depends largely on your application.  If you need JFace\u0027s sorters and filters, then the JFace editing needs to be added back to make you happy.  \n\nIf you don\u0027t care about sorting and filtering in the UI control itself, but what you really want is in-place editing, then you probably want to write bindings for the new CompositeTable control that\u0027s in the examples plug-in.  It can do really smooth in-place editing and doesn\u0027t have the click-to-edit, enter-to-save modal issues that editors based on the native table controls have.  There\u0027s an example program that uses CompositeTable in the examples plug-in so you can see how it works.  Plus the control itself has some pretty extensive JavaDoc.\n\nIf what you really need is just a way to edit data that you\u0027re displaying in the table, then you can do what we\u0027re doing right now at my client: bind a bunch of Text objects to the TableViewer\u0027s current selection and let the user edit the data there.  This works well right now and is well-supported.\n\n\u003e Thanks for your reply.\n\nHTH!\n\n\n",
    "Is the development still active? We would like to know the state of the development. How stable is the implementation in the 3.2 release and can we use it in a production enviroment?",
    "(In reply to comment #62)\n\u003e Is the development still active? We would like to know the state of the\n\u003e development. How stable is the implementation in the 3.2 release and can we use\n\u003e it in a production enviroment?\n\nThe 3.2 implementation does not have any public API and is subject to change.  This is because at the time of the API freeze for 3.2, we did not have sufficient feedback to be confident about the API.\n\nIn the meantime, we have received a lot of feedback.  Based on this feedback, we are currently discussing some changes (see e.g. bug 147364, bug 147563) and are targeting 3.3 M3 as the milestone for making the API public.",
    "\n\n*** This bug has been marked as a duplicate of 154132 ***",
    "I just realized that the cc list of this bug is not copied over to the new bug.  If you are still interested in updates, please cc yourself on bug 154132. Thanks!"
  ],
  "commentCreationDates": [
    "2005-07-20T21:33:21+02:00",
    "2005-07-25T17:00:02+02:00",
    "2005-07-25T18:55:18+02:00",
    "2005-07-27T22:25:57+02:00",
    "2005-07-28T15:09:34+02:00",
    "2005-07-28T16:21:43+02:00",
    "2005-07-28T16:26:47+02:00",
    "2005-07-28T16:53:27+02:00",
    "2005-07-28T17:57:27+02:00",
    "2005-07-28T18:11:26+02:00",
    "2005-07-28T19:24:18+02:00",
    "2005-07-28T19:39:32+02:00",
    "2005-07-29T07:23:15+02:00",
    "2005-07-30T21:57:15+02:00",
    "2005-08-03T17:04:48+02:00",
    "2005-08-10T16:15:46+02:00",
    "2005-08-31T21:30:02+02:00",
    "2005-09-04T21:07:20+02:00",
    "2005-09-09T19:59:51+02:00",
    "2005-09-15T19:44:25+02:00",
    "2005-09-21T18:18:24+02:00",
    "2005-09-21T21:03:51+02:00",
    "2005-09-22T16:02:43+02:00",
    "2005-09-23T03:18:52+02:00",
    "2005-09-23T03:47:08+02:00",
    "2005-09-23T16:17:21+02:00",
    "2005-09-23T16:50:14+02:00",
    "2005-09-28T18:02:26+02:00",
    "2005-09-29T15:09:48+02:00",
    "2005-09-29T16:03:16+02:00",
    "2005-11-08T18:25:43+01:00",
    "2005-11-08T22:42:59+01:00",
    "2005-11-09T04:50:10+01:00",
    "2005-11-09T13:00:06+01:00",
    "2005-11-15T20:19:12+01:00",
    "2005-11-15T20:29:56+01:00",
    "2005-11-15T20:44:37+01:00",
    "2005-11-17T13:01:37+01:00",
    "2005-11-17T13:30:15+01:00",
    "2005-11-26T05:34:45+01:00",
    "2005-11-26T16:27:33+01:00",
    "2005-11-26T16:31:02+01:00",
    "2005-11-26T22:14:14+01:00",
    "2005-11-27T20:38:24+01:00",
    "2005-12-11T21:32:27+01:00",
    "2005-12-12T21:53:24+01:00",
    "2005-12-13T08:09:08+01:00",
    "2005-12-13T15:16:39+01:00",
    "2005-12-13T15:27:10+01:00",
    "2005-12-13T15:27:53+01:00",
    "2005-12-13T15:48:23+01:00",
    "2005-12-13T17:41:30+01:00",
    "2005-12-13T19:05:25+01:00",
    "2006-01-18T08:31:59+01:00",
    "2006-01-18T17:59:59+01:00",
    "2006-01-18T19:16:13+01:00",
    "2006-01-31T11:39:46+01:00",
    "2006-01-31T14:27:52+01:00",
    "2006-02-17T04:13:23+01:00",
    "2006-04-04T13:04:56+02:00",
    "2006-04-05T04:23:40+02:00",
    "2006-04-05T04:33:56+02:00",
    "2006-08-07T08:31:01+02:00",
    "2006-08-07T11:21:39+02:00",
    "2006-08-16T23:13:11+02:00",
    "2006-08-17T03:01:07+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.jface.databinding.BindingException",
      "message": "Converter does not apply to model type. Expected: double, actual: class java.lang.String",
      "elements": [
        {
          "method": "org.eclipse.jface.databinding.internal.ValueBinding.\u003cinit\u003e",
          "source": "ValueBinding.java:61"
        },
        {
          "method": "org.eclipse.jface.databinding.internal.DataBindingContext.bind",
          "source": "DataBindingContext.java:399"
        },
        {
          "method": "org.eclipse.jface.databinding.internal.DataBindingContext.bind",
          "source": "DataBindingContext.java:454"
        },
        {
          "method": "org.eclipse.jface.databinding.internal.DataBindingContext.bind",
          "source": "DataBindingContext.java:511"
        },
        {
          "method": "ru.nlmk.Test.createContents",
          "source": "Test.java:87"
        },
        {
          "method": "ru.nlmk.Test.open",
          "source": "Test.java:45"
        },
        {
          "method": "ru.nlmk.Test.main",
          "source": "Test.java:34"
        }
      ],
      "number": 0,
      "commentIndex": 37,
      "bugId": "104570",
      "duplicateId": "154132",
      "date": "2005-11-17T13:01:37+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "enhancement"
    }
  ],
  "groupId": "154132",
  "bugId": "104570",
  "duplicateId": "154132",
  "date": "2005-07-20T21:33:21+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "enhancement"
}