{
  "comments": [
    "sample failure:\n\nInvalid stack frame \n\norg.eclipse.debug.core.DebugException: Invalid stack frame\nat \norg.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingStackFrame\n(JDIStackFrame.java:965)\nat \norg.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingVisibleVar\niables(JDIStackFrame.java:643)\nat org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getLocalVariables\n(JDIStackFrame.java:1013)\nat org.eclipse.jdt.debug.tests.core.LocalVariableTests.testSimpleVisibility\n(LocalVariableTests.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\nat org.eclipse.jdt.debug.tests.AutomatedSuite$1.run(AutomatedSuite.java:178)\nat java.lang.Thread.run(Thread.java:534)",
    "Diagnosis:\n\n* each time a thread resumes, its frames are preserved, setting their depth \nindex to -1\n* indicies are updated lazily when frames are retrieved after a suspend\n\nThe method JDIThread.computeStackFrames() uses the instance variable \n(fRefreshChildren) to know when to re-compute frames. This method is not \nsynchronized. Thus, if a step begins and gets the lock on the thread in \npreserve stack frames, setting indicies to -1, after another thread has \nstarted to compute frames with \u0027fRefreshChildren \u003d\u003d false\u0027, the preserve will \nnegate stack frames (set indexes -1), and the other caller gets invalid \nframes. Synchronization should be moved up to \u0027computeStackFrames()\u0027 so that \naccess/writes to fRefreshChildren are synchronized. ",
    "Please verify, Kevin.",
    "verified",
    "*** Bug 66524 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2004-06-09T20:53:16+02:00",
    "2004-06-09T20:57:03+02:00",
    "2004-06-09T20:59:02+02:00",
    "2004-06-09T21:45:56+02:00",
    "2004-06-10T17:57:38+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.debug.core.DebugException",
      "message": "Invalid stack frame",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingStackFrame",
          "source": "JDIStackFrame.java:965"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingVisibleVariables",
          "source": "JDIStackFrame.java:643"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getLocalVariables",
          "source": "JDIStackFrame.java:1013"
        },
        {
          "method": "org.eclipse.jdt.debug.tests.core.LocalVariableTests.testSimpleVisibility",
          "source": "LocalVariableTests.java:54"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "org.eclipse.jdt.debug.tests.AutomatedSuite$1.run",
          "source": "AutomatedSuite.java:178"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:534"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "66378",
      "date": "2004-06-09T20:53:16+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "66378",
  "bugId": "66378",
  "date": "2004-06-09T20:53:16+02:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "normal"
}