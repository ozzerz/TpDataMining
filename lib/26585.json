{
  "comments": [
    "Using M3, the following bug has been reported on EC:\n\nJavac and eclipse compiler don\u0027t behave the same on this code:\n\npublic class NullOuvert {\n    public static final boolean VIER_BUBEN \u003d false;\n    public static final String SPIEL \u003d VIER_BUBEN ? \"Grand Hand\" : null;\n    public static void main(String[] args) {\n        System.out.println(SPIEL \u003d\u003d null);\n        System.out.println(SPIEL.equals(null));\n        System.out.println(SPIEL);\n    }\n}\n\nWhen running Eclipse compiler bytecodes:\nfalse\nfalse\nnull\n\n\nWhen running javac bytecodes:\ntrue\nException in thread \"main\" java.lang.NullPointerException\n        at NullOuvert.main(NullOuvert.java:6)\n\nThis is a serious problem.\n\nA workaround seems to be to cast the null literal in a String. Then they behave\nthe same.",
    "The casting work-around only turns off the constant inlining (would have \nachieved the same effect by removing the final flag on VIER_BUBEN).\n\nFixed constant code generation to disable inlining String value of null \nconstant (case where target type is String). Target Object type was already \ndoing the same.",
    "Took out null constants completely, these are not legite anyway.\nFixed",
    "Verified."
  ],
  "commentCreationDates": [
    "2002-11-18T14:16:35+01:00",
    "2002-11-18T15:59:08+01:00",
    "2002-11-19T14:15:38+01:00",
    "2002-12-17T12:28:50+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "NullOuvert.main",
          "source": "NullOuvert.java:6"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "26585",
      "date": "2002-11-18T14:16:35+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "critical"
    }
  ],
  "groupId": "26585",
  "bugId": "26585",
  "date": "2002-11-18T14:16:35+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "critical"
}