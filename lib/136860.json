{
  "comments": [
    "During startup, EclipseStarter initializes a ContextFinder and sets its parent as the current thread context classloader.\n\nHowever under WebStart, the context classloader at this point is com.sun.jnlp.JNLPClassLoader. That loader has visibility of all downloaded JARs - ie ALL the bundles.\n\nTherefore when ContextFinder consults its parent classloader under WebStart, the JNLPClassLoader will always supply it, we never get it from a BundleLoader. This can cause problems when using things like dynamic proxies, because the class loaded by the JNLPClassLoader will not be equal to the one loaded by the BundleLoader (even if they came from the same physical JAR) and therefore you get an exception that looks like this:\n\njava.lang.IllegalArgumentException: interface org.springframework.aop.framework.Advised is not visible from class loader\nat java.lang.reflect.Proxy.getProxyClass(Proxy.java:353)\nat java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)",
    "Created an attachment (id\u003d38613)\npatch relative to tag v20060328 (3.2M6)\n\nThe attached patch fixes the problem by detecting the JNLPClassLoader and, if seen, calling the no-arg ClassLoader constructor on ContextFinder.\n\nTested with both a standalone app and a WebStart app, but not exhaustively.",
    "*** Bug 110741 has been marked as a duplicate of this bug. ***",
    "Tom could you please take a look at this? I encountered this pb a while back better never had the opportunity to look into a fix (see dup bug).\nI quickly looked at the patch and I\u0027m a bit worried that everything gets removed from the context finder, since their might be classes (not from plug-ins) that are needed by the app. Moreover we would have a very different behavior when running with jnlp and with not, which we would want to avoid.\nWhat about parenting the context finder with a filtered version of what\u0027s on the jnlp classloader so that we only get non-bundles. Note that we have the list of bundles in the osgi.bundles.\nNeil could you help?",
    "Pascal,\n\nI will help out wherever I can. The patch is admittedly naive and I didn\u0027t understand the full implications - it just got my app working.\n\nThe filtering classloader is interesting, but sounds difficult to achieve. We would presumably still need JNLPClassLoader as our ultimate parent, because only it knows where all the JARs are. However if we delegate to JNLPClassLoader and it returns a class, how do we know whether it came from a bundle JAR - even given that we know the list of bundles? It sounds like we would have to build a list of classes in all bundles, and only accept a class loaded by our parent if it was not on that list.\n\nNote also that the problem only happens with \"flat\" bundle JARs. JNLPClassLoader can\u0027t see into nested JARs.",
    "What if we took a child first approach in the ContextFinder?  In other words we would search the OSGi loaders first then the parent (original context loader) as a last resort.  This would allow the ContextFinder to get the class from the Framework before the JNLPClassLoader.",
    "Filtering the parent classloader or changing to child-first would be too much change for 3.2 right now ...\n\nWe should look for a \"simple\" solution for 3.2.  Current thinking is to add an option which can be used specify the parent classloader of ContextFinder.  In WebStartMain we would set this property to force boot to be used unless it is already set to some other value in the config.ini.  A slight variation would be not to set the property in WebStartMain (this would use the current behavior) and force JNLP apps to set the value explicitly in their config.ini.",
    "Created an attachment (id\u003d38689)\npatch\n\nThis patch introduces a new property to specify the context class loader parent \"osgi.contextClassLoaderParent\".  The default is the current behavior (which is to use the current context classloader as the parent).  The osgi.contextClassLoaderParent property can be set to the following\n\napp - use the application classloader\next - use the extension classloader\nboot - use the boot classloader\nfwk - use the framework classloader\nccl or \u003cnull\u003e or any other value - use the current context class loader\n\nThere are similar values that can be specified on the osgi.parentClassloader property.\n\nThis patch makes the default for WebStartMain  use osgi.contextClassLoaderParent\u003d\"app\".  I do not know all the side-effects of such a change.  Maybe we should just leave WebStartMain as-is (default to \u003cnull\u003e) and deployments have to option of setting the value to \"app\" in their config.ini.\n",
    "(In reply to comment #7)\n\nI can confirm that this patch fixes the issue I was having when using dynamic proxies under WebStart. I did not bother applying the patch to WebStartMain, I just put osgi.contextClassLoaderParent\u003dapp into my JNLP.\n\nThanks",
    "+1 to only add the optional property osgi.contextClassLoaderParent and leaving WebStartMain unchanged.\n\nJeff, do you approve?",
    "Just a comment...\nI\u0027m doing something very similar for the CCL with the server-side stuff.\nI wonder if it would make sense to move the CCL initialization code into the framework?",
    "I think the CCL init code is in the framework.  As I understand this proposal it is ot add that code to the framework and leave the webstart main alone.  Then people who have webstart prblems can set the right property.\n\n+1 for that behaviour\n\nSee also bug 137608 for some discussion on directions for startup code...",
    "Sorry, yes you\u0027re right it\u0027s in the framework not the launcher which is what I was hoping for.\nSo... great, I\u0027ll use it. Thanks.",
    "Fix released for RC2. (no change to WebStartMain)"
  ],
  "commentCreationDates": [
    "2006-04-14T18:24:02+02:00",
    "2006-04-14T20:35:08+02:00",
    "2006-04-16T16:25:29+02:00",
    "2006-04-16T17:06:12+02:00",
    "2006-04-17T00:08:40+02:00",
    "2006-04-17T16:17:41+02:00",
    "2006-04-17T16:54:19+02:00",
    "2006-04-17T18:17:42+02:00",
    "2006-04-19T12:11:43+02:00",
    "2006-04-19T15:52:44+02:00",
    "2006-04-19T16:04:05+02:00",
    "2006-04-19T23:18:39+02:00",
    "2006-04-19T23:27:06+02:00",
    "2006-04-19T23:41:49+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "interface org.springframework.aop.framework.Advised is not visible from class loader",
      "elements": [
        {
          "method": "java.lang.reflect.Proxy.getProxyClass",
          "source": "Proxy.java:353"
        },
        {
          "method": "java.lang.reflect.Proxy.newProxyInstance",
          "source": "Proxy.java:581"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "136860",
      "date": "2006-04-14T18:24:02+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "major"
    }
  ],
  "groupId": "136860",
  "bugId": "136860",
  "date": "2006-04-14T18:24:02+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "major"
}