{
  "comments": [
    "The following code gathers an exception stacktrace into a String:\n\n\tpublic static String getStackTrace(Throwable e) {\n\t\tStringWriter s \u003d new StringWriter();\n\t\te.printStackTrace(new PrintWriter(s));\n\n\t\treturn s.toString();\n\t} //getStackTrace\n\nUsing the debugger, I traced the value that was returned:\n\ntrace\u003d \"java.lang.Exception: collectClassData failed\\r\\n\\tat \ncom.ibm.tivoli.rmb.model.workbench.DMWorkbenchImpl.collectClassData(Native \nMethod)\\r\\n\\tat \ncom.ibm.tivoli.rmb.ui.dialogs.CIMCollectionDialog.performCollection\n(CIMCollectionDialog.java:295)\\r\\n\\tat \ncom.ibm.tivoli.rmb.ui.dialogs.AddCIMClassDialog.buttonPressed\n(AddCIMClassDialog.java:134)\\r\\n\\tat \norg.eclipse.jface.dialogs.Dialog$2.widgetSelected(Dialog.java:543)\\r\\n\\tat \norg.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:89)\n\\r\\n\\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)\n\\r\\n\\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:833)\\r\\n\\tat \norg.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2803)\\r\\n\\tat \norg.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2448)\\r\\n\\tat \norg.eclipse.jface.window.Window.runEventLoop(Window.java:718)\\r\\n\\tat \norg.eclipse.jface.window.Window.open(Window.java:696)\\r\\n\\tat \ncom.ibm.tivoli.rmb.ui.editors.cim.CIMPage.addNewCIMClass(CIMPage.java:86)\n\\r\\n\\tat com.ibm.tivoli.rmb.ui.editors.cim.CIMPage.access$0(CIMPage.java:81)\n\\r\\n\\tat com.ibm.tivoli.rmb.ui.editors.cim.CIMPage$2.widgetSelected\n(CIMPage.java:173)\\r\\n\\tat org.eclipse.swt.widgets.TypedListener.handleEvent\n(TypedListener.java:89)\\r\\n\\tat org.eclipse.swt.widgets.EventTable.sendEvent\n(EventTable.java:82)\\r\\n\\tat org.eclipse.swt.widgets.Widget.sendEvent\n(Widget.java:833)\\r\\n\\tat org.eclipse.swt.widgets.Display.runDeferredEvents\n(Display.java:2803)\\r\\n\\tat org.eclipse.swt.widgets.Display.readAndDispatch\n(Display.java:2448)\\r\\n\\tat org.eclipse.ui.internal.Workbench.runEventLoop\n(Workbench.java:1569)\\r\\n\\tat org.eclipse.ui.internal.Workbench.runUI\n(Workbench.java:1540)\\r\\n\\tat \norg.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:285)\n\\r\\n\\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:144)\n\\r\\n\\tat org.eclipse.ui.internal.ide.IDEApplication.run\n(IDEApplication.java:102)\\r\\n\\tat \norg.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:220)\\r\\n\\tat \norg.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:273)\n\\r\\n\\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:129)\\r\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0\n(Native Method)\\r\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:85)\\r\\n\\tat \nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)\n\\r\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:60)\\r\\n\\tat java.lang.reflect.Method.invoke\n(Method.java:391)\\r\\n\\tat org.eclipse.core.launcher.Main.basicRun\n(Main.java:185)\\r\\n\\tat org.eclipse.core.launcher.Main.run(Main.java:710)\n\\r\\n\\tat org.eclipse.core.launcher.Main.main(Main.java:694)\\r\\n\"\n\nYou can see that every pair of lines is separated with \"\\r\\n\\t\" (carriage \nreturn/linefeed/tab).  When displayed in an ErrorDialog with the following \ncode:\n\n    public static void logException(Object source, String method, Throwable e,\n            final String title, String message) {\n        if (e instanceof InvocationTargetException) {\n            e \u003d ((InvocationTargetException) e).getTargetException();\n        }\n\n        if (message \u003d\u003d null) {\n            message \u003d e.getMessage();\n            if (message \u003d\u003d null) {\n                message \u003d e.toString();\n            }\n        }\n\n        IStatus status \u003d null;\n        if (e instanceof CoreException) {\n            IStatus s \u003d ((CoreException) e).getStatus();\n            status \u003d new MultiStatus(PLUGIN_ID, IStatus.ERROR,\n                    new IStatus[] { s }, message, e);\n        } else {\n            String trace \u003d RMUtils.getStackTrace(e);\n            Status s \u003d new Status(IStatus.ERROR, PLUGIN_ID, IStatus.OK, \n                    trace, e);\n\n            status \u003d new MultiStatus(PLUGIN_ID, IStatus.ERROR,\n                    new Status[] { s }, message, null);\n        }\n\n        getDefault().getLog().log(status);\n        Display display \u003d Display.getDefault();\n        final IStatus fstatus \u003d status;\n        display.asyncExec(new Runnable() {\n            public void run() {\n                ErrorDialog.openError(null, title, null, fstatus);\n            }\n        });\n     }\n\nThe \"\\r\\n\\t\" characters display as three open square boxes.  This can be seen \nin the screen capture in the attached Word file, stacktrace.doc.  The problem \nhas been seen on Windows 2000 and Windows XP systems.",
    "Created an attachment (id\u003d17866)\nScreen capture of ErrorDialog\n"
  ],
  "commentCreationDates": [
    "2005-02-11T20:11:52+01:00",
    "2005-02-11T20:12:44+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "collectClassData failed\\r\\n\\t",
      "elements": [
        {
          "method": "com.ibm.tivoli.rmb.model.workbench.DMWorkbenchImpl.collectClassData",
          "source": "Native  Method"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "85051",
      "date": "2005-02-11T20:11:52+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "85051",
  "bugId": "85051",
  "date": "2005-02-11T20:11:52+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}