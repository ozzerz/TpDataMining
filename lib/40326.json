{
  "comments": [
    "I am attempting to wrap all method calls to a given class A with a simple around\nadvice using the following aspect definition.\n\nimport com.systemsunion.spikes.deadlock.SQLDeadlock;\n\naspect NoRetry {\n    pointcut sqldeadlock(SQLDeadlock bean) : target(bean) \u0026\u0026 call (public void\n*(..));\n\n    after(SQLDeadlock bean) returning : sqldeadlock(bean) {\n        System.out.println(\"Should not reach\");\n    }\n\n    before(SQLDeadlock bean) : sqldeadlock(bean) {\n        System.out.println(\"About to deadlock\");\n    }\n\n    void around(SQLDeadlock bean) : sqldeadlock(bean) {\n        System.out.println(\"Begin\");\n        proceed(bean);\n        System.out.println(\"End\");\n    }\n}\n\nThe interface SQLDeadlock (actually the RemoteInterface of an EJB) declares a\ncouple of methods deadlock() and deadlock(Object), calls to either of which I\nwish to wrap with the advice. Obviously, this is just a first step, but the\nabove aspect which compiles OK fails at runtime with the following stack trace.\n\njava.lang.NoSuchMethodError:\norg.aspectj.runtime.internal.AroundClosure.\u003cinit\u003e([Ljava/lang/Object;)V\n\tat\ncom.systemsunion.spikes.deadlock.TestCallEJBs$AjcClosure1.\u003cinit\u003e(TestCallEJBs.java)\n\tat com.systemsunion.spikes.deadlock.TestCallEJBs.main(TestCallEJBs.java:29)\nException in thread \"main\" Process terminated with exit code 1\n\nComplaining it can\u0027t find the constructor for AroundClosure. I took a look at\nthe source code for AroundClosure and the only constructor takes no arguments -\nhence the failure - but interestingly it seems it used to take an array of\nobjects which were assigned to its instance variable state as this code is\ncommented out in the current source code for AroundClosure.\n\nIf I remove the elipses in the call join-point then the around advice works\nfine, whether I am matching the zero argument or the one argument version of the\nmethod.\n\nThis looks like a bug to me, but I am a newby to AOP and AspectJ so am quite\nwilling to accept that I may have done something stupid. If so, I would be\ngrateful for any pointers as to how I should have specified my aspect. I am\nusing the 1.1 release, but also tried it under a CVS checkout from last night\nwith the same result.\n\nThe definition of the SQLDeadlock interface is here\n\n/*\n * Generated file - Do not edit!\n */\npackage com.systemsunion.spikes.deadlock;\n\n\n\n/**\n * Remote interface for SQLDeadlock.\n */\npublic interface SQLDeadlock\n   extends javax.ejb.EJBObject\n{\n\n   public void deadlock( java.lang.Object ignored )\n      throws\ncom.systemsunion.framework.common.util.locator.ServiceLocatorException,\njavax.transaction.SystemException, javax.transaction.RollbackException,\njava.rmi.RemoteException;\n\n   public void deadlock(  )\n      throws\ncom.systemsunion.framework.common.util.locator.ServiceLocatorException,\njavax.transaction.SystemException, javax.transaction.RollbackException,\njava.rmi.RemoteException;\n\n}\n\nand of the test class TestCallEJBs is here\n\n/**\n * (c) Copyright Systems Union Group, Ltd. 2003, All Rights Reserved.\n */\npackage com.systemsunion.spikes.deadlock;\n\nimport com.systemsunion.framework.common.util.locator.ServiceLocator;\nimport com.systemsunion.framework.common.util.log.LogConfig;\nimport com.systemsunion.framework.common.security.client.TestCaseLoginHelper;\n\npublic class TestCallEJBs {\n    public static void main(String[] args) {\n        try {\n            LogConfig.init();\n            TestCaseLoginHelper.login();\n\n            SQLDeadlockHome sqlHome \u003d (SQLDeadlockHome)\nServiceLocator.getHome(SQLDeadlockHome.class);\n            SQLDeadlockNoRetryHome sqlNoRetryHome \u003d (SQLDeadlockNoRetryHome)\nServiceLocator.getHome(SQLDeadlockNoRetryHome.class);\n            SQLDeadlock sql \u003d sqlHome.create();\n            SQLDeadlockNoRetry sqlNoRetry \u003d sqlNoRetryHome.create();\n\n            sql.deadlock();\n            sqlNoRetry.deadlock();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n }",
    "I think this is a configuration error.  I\u0027m pretty sure that you\u0027re using a \n1.0.x version of aspectjrt.jar with code that is compiled with the 1.1 \ncompiler.  The 1.0.x version of AroundClosure only has a single zero-arg \nconstructor as you describe below.  The 1.1 version of AroundClosure has TWO \nconstructors.  One that\u0027s zero-arg, but another one that takes an Object[].\n\nMy guess is that you have an old version of aspectjrt.jar on your classpath \nthat is being chosen over the one from 1.1.  If you can\u0027t easily resolve this \nissue, then I recommend that you ask about this configuration issue on aspectj-\nusers where you might find someone with more specific experience in the ejb \nspace.\n\nIf you\u0027re convinced this isn\u0027t just a configuration error, then please submit \na self-contained test case that can be used to reproduce the bug."
  ],
  "commentCreationDates": [
    "2003-07-17T13:19:07+02:00",
    "2003-07-22T18:14:38+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoSuchMethodError",
      "message": "org.aspectj.runtime.internal.AroundClosure.\u003cinit\u003e([Ljava/lang/Object;)V",
      "elements": [
        {
          "method": "com.systemsunion.spikes.deadlock.TestCallEJBs$AjcClosure1.\u003cinit\u003e",
          "source": "TestCallEJBs.java"
        },
        {
          "method": "com.systemsunion.spikes.deadlock.TestCallEJBs.main",
          "source": "TestCallEJBs.java:29"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "40326",
      "date": "2003-07-17T13:19:07+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "40326",
  "bugId": "40326",
  "date": "2003-07-17T13:19:07+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}