{
  "comments": [
    "Starting with Eclipse 3.1RC2, when I launch a C/C++ Local Application I don\u0027t\nget output on the console.  For example, the following program produces no\noutput in the Eclipse console:\n\n#include \u003cstdio.h\u003e\n\nint main()\n{\n  printf(\"hello world\\n\");\n  printf(\"hello world\\n\");\n  printf(\"hello world\\n\");\n  printf(\"hello world\\n\");\n  printf(\"hello world\\n\");\n}\n\nI am sometimes able to see one \"hello world\", but most times I see nothing at\nall, and I am never able to see all 5 \"hello world\"\u0027s.  If I put a sleep after\nthe first \"hello world\" I am able to see it, and then I am sometimes able to see\nthe next \"hello world\", but again, never able to see them all (unless I put a\nsleep after the last \"hello world\").  This appears to be a timing issue with\nregards to when the console is cleared after an application is launched.  Since\nthe results are somewhat inconsistent (sometimes I get one line, sometimes\nnone), I\u0027m inclined to believe this issue is not related to any settings I have.\n\nThis problem occurs in Eclipse 3.1RC2 and newer (I\u0027ve tried all the latest RC\nbuilds, including RC4).  However, it DOES NOT occur in Eclipse 3.1RC1 or older.\n I have also tried all CDT 3.0 milestones (as well as some daily/weekly builds)\nbut they seem to have no effect on this issue.  It looks to me as though\nsomething was changed between Eclipse 3.1RC1 and 3.1RC2 that would effect the\nconsole output.  Note that Java console output seems to be working fine.\n\nAnother issue I have noticed is that line breaks don\u0027t occur when writing to\nstdout after writing to stderr (i.e. cerr \u003c\u003c \"error\" \u003c\u003c endl; cout \u003c\u003c \"stdout\"\n\u003c\u003c endl; both appear on the same line in the console, though, in different\ncolors), I\u0027m not sure this is related as I believe this occurs in Eclipse 3.1RC1.",
    "Ok, I just tried the last RC1 build of CDT with Eclipse 3.1 final (I believe\nthis is the version of Eclipse that RC1 is built for) and I have the same problem.\n\nLooking at the .log file in my workspace, I see these exceptions:\n\n!ENTRY org.eclipse.debug.core 4 120 2005-06-30 17:12:45.927\n!MESSAGE Error logged from Debug Core: \n!STACK 0\njava.io.IOException: The handle is invalid.\n\n\tat org.eclipse.cdt.utils.spawner.SpawnerInputStream.read0(Native Method)\n\tat\norg.eclipse.cdt.utils.spawner.SpawnerInputStream.read(SpawnerInputStream.java:60)\n\tat java.io.BufferedInputStream.read1(Unknown Source)\n\tat java.io.BufferedInputStream.read(Unknown Source)\n\tat java.io.FilterInputStream.read(Unknown Source)\n\tat\norg.eclipse.debug.internal.core.OutputStreamMonitor.read(OutputStreamMonitor.java:137)\n\tat\norg.eclipse.debug.internal.core.OutputStreamMonitor.access$1(OutputStreamMonitor.java:127)\n\tat\norg.eclipse.debug.internal.core.OutputStreamMonitor$1.run(OutputStreamMonitor.java:193)\n\tat java.lang.Thread.run(Unknown Source)\n\n!ENTRY org.eclipse.debug.core 4 120 2005-06-30 17:12:45.937\n!MESSAGE Error logged from Debug Core: \n!STACK 0\njava.io.IOException: The handle is invalid.\n\n\tat org.eclipse.cdt.utils.spawner.SpawnerInputStream.read0(Native Method)\n\tat\norg.eclipse.cdt.utils.spawner.SpawnerInputStream.read(SpawnerInputStream.java:60)\n\tat java.io.BufferedInputStream.read1(Unknown Source)\n\tat java.io.BufferedInputStream.read(Unknown Source)\n\tat java.io.FilterInputStream.read(Unknown Source)\n\tat\norg.eclipse.debug.internal.core.OutputStreamMonitor.read(OutputStreamMonitor.java:137)\n\tat\norg.eclipse.debug.internal.core.OutputStreamMonitor.access$1(OutputStreamMonitor.java:127)\n\tat\norg.eclipse.debug.internal.core.OutputStreamMonitor$1.run(OutputStreamMonitor.java:193)\n\tat java.lang.Thread.run(Unknown Source)\n\nLooks like the file handle (I assume its piping the output from the launched\napplication) closes before it tries to read from it.  Again, this only happens\nwith Eclipse 3.1RC2 and later, so they must have changed something in the way\nthis is handled (maybe there is a new thread for launched applications or\nsomething).  Also, I assume this is Windows only as it doesn\u0027t appear as though\nanyone else is having this problem.\n\nShould this be under cdt-core as I believe that is where the spawner code lies?",
    "This bug still occurs on CDT 3.1RC2 and I200507180855.  I am able to workaround\nthis bug by adding a Sleep(1) to the end of my main() functions, however, this\nshouldn\u0027t really be necessary.\n\nIf anyone has any insight as to where exactly this problem is occuring or what\nexactly the problem is, I would appreciate it (I\u0027d be willing to create a patch,\nI just don\u0027t have the time to debug it).  I have a feeling that just modifying a\nmethod or block of code and making it synchronized could solve this issue...\n\nI\u0027d appreciate it if someone could at least verify that they are seeing this\nproblem as well.  Thanks...",
    "For windows applications you should use \"CygWin GDB Debugger\". In this case the \nconsole output goes instead of Eclipse console to the Windows console. ",
    "(In reply to comment #3)\n\u003e For windows applications you should use \"CygWin GDB Debugger\". In this case the \n\u003e console output goes instead of Eclipse console to the Windows console. \n\nI do use the Cygwin GDB Debugger.  However, the issue that I describe here is\nunrelated to the debugger (that I can tell anyways).  This problem occurs when\nsimply launching (Run | Run... | C/C++ Local Application) an application.",
    "FWIW, it appears as though bug 99174\n(https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d99174) in the Platform/Debug\ncomponent of Eclipse was fixed which seems to have caused this regression\nbetween Eclipse RC1 and RC2.",
    "(In reply to comment #4)\n\u003e (In reply to comment #3)\n\u003e \u003e For windows applications you should use \"CygWin GDB Debugger\". In this case the \n\u003e \u003e console output goes instead of Eclipse console to the Windows console. \n\u003e \n\u003e I do use the Cygwin GDB Debugger.  However, the issue that I describe here is\n\u003e unrelated to the debugger (that I can tell anyways).  This problem occurs when\n\u003e simply launching (Run | Run... | C/C++ Local Application) an application.\n\n\nAgreed.\nTHe problem is that we can not create a tty to make the stdio thinks\nit should use line buffer policy for printf() and other related functions.\nSince we launch the program and connects to it with a pipe(), the default\npolicy is file buffer.\n\nAt this point, I do not know how to solve this cleanly, we found solutions\nfor other platform by creating a pseudo tty for the application when launched.",
    "(In reply to comment #6)\n\u003e (In reply to comment #4)\n\u003e \u003e (In reply to comment #3)\n\u003e \u003e \u003e For windows applications you should use \"CygWin GDB Debugger\". In this\ncase the \n\u003e \u003e \u003e console output goes instead of Eclipse console to the Windows console. \n\u003e \u003e \n\u003e \u003e I do use the Cygwin GDB Debugger.  However, the issue that I describe here is\n\u003e \u003e unrelated to the debugger (that I can tell anyways).  This problem occurs when\n\u003e \u003e simply launching (Run | Run... | C/C++ Local Application) an application.\n\u003e \n\u003e \n\u003e Agreed.\n\u003e THe problem is that we can not create a tty to make the stdio thinks\n\u003e it should use line buffer policy for printf() and other related functions.\n\u003e Since we launch the program and connects to it with a pipe(), the default\n\u003e policy is file buffer.\n\u003e \n\u003e At this point, I do not know how to solve this cleanly, we found solutions\n\u003e for other platform by creating a pseudo tty for the application when launched.\n\nActually, I believe the problem you are referring to is actually bug 27663 which\ndoes not appear to be related to this bug.\n\nThis bug is caused by asynchronously launching the application and letting it\nclose (exit) before its output can be read.  Whereas, bug 27663 appears to be\nrelated to getting applications launched in Eclipse to think that they are in a\ntty (not timing related).\n",
    "(In reply to comment #7)\n\u003e (In reply to comment #6)\n\u003e \u003e (In reply to comment #4)\n\u003e \u003e \u003e (In reply to comment #3)\n\u003e \n\u003e Actually, I believe the problem you are referring to is actually bug 27663 which\n\u003e does not appear to be related to this bug.\n\u003e \n\u003e This bug is caused by asynchronously launching the application and letting it\n\u003e close (exit) before its output can be read.  Whereas, bug 27663 appears to be\n\u003e related to getting applications launched in Eclipse to think that they are in a\n\u003e tty (not timing related).\n\u003e \n\nLet\u0027s make a new PR, what you describe in 27663 was for Linux and the PR is\nfix.  Windows is a different challenge.",
    "After poking around in the code for a little while, I decided to rename my\nspawner.dll file to spawner.old.  Doing this causes\norg.eclipse.cdt.utils.spawner.ProcessFactory to use java.lang.Runtime.exec()\ninstead of org.eclipse.cdt.utils.spawner.Spawner().exec().  This does not\nexhibit the behavior mentioned in comment 0.  Of course, this workaround is at\nthe loss of the additional functionality that the Spawner class provides (namely\nthe interrupt(), hangup(), kill(), terminate(), and isRunning() functions).  I\nhave a feeling the problem lies somewhere in the Reaper inner class for those\ncurious...",
    "The previous statement should say \"Spawner.exec()\" instead of\n\"Spawner().exec()\".  Also, the problem isn\u0027t necessarily with the Reaper class,\nbut with the caller that reads from the created streams.\n\nSorry for the bugspam.",
    "Since the process is launched from\norg.eclipse.cdt.launch.internal.LocalRunLaunchDelegate.exec() in one thread and\nthen the output is read from that launched process later in\norg.eclipse.cdt.internal.core.model.Binary.openBuffer() in another thread the\ndata is out of sync (actually, I\u0027m not exactly sure about the thread situation\nhere, but either way, the output isn\u0027t read quickly enough after the application\nis launched).  Most trivial native applications (such as those mentioned in\ncomment 0) will finish executing before the read thread gets a change to run and\nthus no, or little, output is displayed.  However, this doesn\u0027t quite explain\nwhy Runtime.exec() does not have this same problem.\n\nA possible solution might be to read from the application\u0027s output immediately\nafter launching it (perhaps even within the Reaper class) and then store the\noutput in a buffer until someone later reads from the outputstream.  Though,\nthis solution has some obvious problems, it\u0027s better than the current situation,\nIMO.\n\nHopefully someone more familiar with this code can take over, or at the very\nleast, offer some insight.",
    "Amazingly, yet not entirely surprisingly, this bug still exists in CDT 3.0\nfinal.  Unfortunately I think this is a very visible problem that will be\napparent to both new users and advanced users that wish to build somewhat simple\nconsole based applications.\n\nWould it be possible for one of the developers to at least confirm that this bug\nexists and possibly offer some insight on an approach to solve this problem.",
    "Yes, we agree it\u0027s a problem. However, given all the other things we need to do,\nthis hasn\u0027t risen in priority enough for someone to look at.\n\nCertainly a patch that fixes the problem would go a long way to ensuring this\ngets fixed.",
    "(In reply to comment #13)\n\u003e Yes, we agree it\u0027s a problem. However, given all the other things we need to do,\n\u003e this hasn\u0027t risen in priority enough for someone to look at.\n\u003e \n\u003e Certainly a patch that fixes the problem would go a long way to ensuring this\n\u003e gets fixed.\n\nI\u0027m afraid that you underestimate the bad impact of this bug. CDT simply is not\nusable on Windows. New users will throw it away as unusable crap - they will not\neven see their \"Hello World!\" and old users must use old versions unless they\nfind this bug and use the Sleep(1) workaround.\n\nIf someone is new to Win API as I was, then please include windows.h and\nwinbase.h to get Sleep working.",
    "(In reply to comment #14)\n\u003e (In reply to comment #13)\n\u003e \u003e Yes, we agree it\u0027s a problem. However, given all the other things we need to do,\n\u003e \u003e this hasn\u0027t risen in priority enough for someone to look at.\n\u003e \u003e \n\u003e \u003e Certainly a patch that fixes the problem would go a long way to ensuring this\n\u003e \u003e gets fixed.\n\u003e \n\u003e I\u0027m afraid that you underestimate the bad impact of this bug. CDT simply is not\n\u003e usable on Windows. New users will throw it away as unusable crap - they will not\n\u003e even see their \"Hello World!\" and old users must use old versions unless they\n\u003e find this bug and use the Sleep(1) workaround.\n\u003e \n\u003e If someone is new to Win API as I was, then please include windows.h and\n\u003e winbase.h to get Sleep working.\n\nI\u0027ve got to agree with this, though, I can somewhat understand Doug\u0027s standpoint\nfrom an engineering perspective.  For what it\u0027s worth, I spent about an hour\nlooking into this problem with the debugger and didn\u0027t really get anywhere. \nThese kinds of threading issues are no fun (maybe this is part of the reason why\nno one wants to fix it, hehe).\n\nAlso note that the Sleep(1) workaround doesn\u0027t seem to work for me 100% of the\ntime (results will vary on different machines due to the nature of the bug).  A\nmore reliable workaround is to remove/rename the spawner.dll file (located in\norg.eclipse.cdt.core.win32_3.0.0\\os\\win32\\x86).  This will force CDT to use\nRuntime.exec() instead which, for some reason, does not seem to have the same\nproblem (note that this will cause the loss of some functionality, see comment #9).\n\nI propose that spawner.dll be renamed or removed from the CDT distribution\naltogether until a fix could be found.  This workaround requires no code\nmodifications.  I do realize that this may be somewhat drastic as not all\napplications suffer from this issue (e.g. GUI applications), so they may not\nwish to lose the functionality mentioned in comment #9, but maybe this will be\nmotivation to fix the underlying problem.  :)\n\nAlso, I\u0027m not entirely convinced that this is a Windows only bug, could someone\ntest this on Linux?\n\nAnyways, just my $.02...",
    "All right already ;-)\n\nI\u0027ve marked it as gating 3.0.1. Someone will have to look at it by then.\n\nIn the meantime try:\n\n#include \u003cwindows.h\u003e\n\nMessageBox(NULL, \"Hello World\", \"My App\", MB_OK);\n",
    "I strongly agree with comments 12 and 14.\n\nI\u0027m a brand-new user of Eclipse, the first thing I did was install CDT and \nfollow your online tutorial - which promptly produced garbled results for a two \nline \u0027hello, world!\u0027\n\nI was lucky enough to find this bug in the google search, but it wasn\u0027t easy.\n\nTo provide some more helpful debugging info,\n\nThis program:\n\u003d\u003d\u003d\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nusing namespace std;\n\nint main(int argc, char **argv) {\n\tstring s, s2;\n\n\tif (argc \u003c 2) {\n\t\tcerr \u003c\u003c \"usage: \" \u003c\u003c argv[0] \u003c\u003c \" \u003cfirstname\u003e\" \u003c\u003c endl;\n\t\texit(1);\n\t}\t\n\n\tcout \u003c\u003c \"enter name: \";\n\tcin \u003e\u003e s;\n \n\ts2 \u003d argv[1];\n\t\n\tif (s !\u003d s2) {\n\t\tcerr \u003c\u003c \"names don\u0027t match!  Using argument value: \" \u003c\u003c argv[1] \n\u003c\u003c endl;\n\t\tcout \u003c\u003c \"Hello1, \" + s \u003c\u003c endl;\n\t\ts \u003d s2;\n\t\tcout \u003c\u003c \"Hello2, \" + s \u003c\u003c endl;\n\t\t\n\t}\n\tcout \u003c\u003c \"Hello, \" + s \u003c\u003c endl;\n//\tfflush(stdout);\n\tsleep(1);\n\treturn(0);\n}\n\u003d\u003d\u003d\n\nworks as expected at the command line:\n\n\u003d\u003d\u003d\nC:\\Documents and Settings\\Eric Safern\\workspace\\hW\\Debug\u003ehw e\nenter name: ee\nnames don\u0027t match!  Using argument value: e\nHello1, ee\nHello2, e\nHello, e\n\u003d\u003d\u003d\n\nbut in the console, even with the sleep, the cout and cerr are intermingled.\n\n\u003d\u003d\u003d\nenter name: e\nnames don\u0027t match!  Using argument value: Hello1, e\nHello2, Eric\nHello, Eric\nEric\n\u003d\u003d\u003d\n\nYou can\u0027t tell without color, :-)  but the words \u0027value:\u0027 and the final \u0027Eric\u0027 \nare in red, indicating cerr.\n\nNote the behavior is consistent for me from run to run.",
    "I can confirm this bug under windows, deleting the .dll works.\n\nUnfortunately the same bug seems to happen on Mac OS X. Sometimes when a program\nis run the output just simply does not show up.\n\nI\u0027ll try deleting\n/plugins/org.eclipse.cdt.core.macosx_3.0.0/os/macosx/ppc/libspawner.jnilib and\nsee if that helps.",
    "unfortunately under Mac OS X deleting the library does not work. The only way to\nget the output is run the program repeatedly until it eventually shows up.",
    "\nDang...\n\nI noticed that with the Properties-\u003eC/C++ Build\nmenu item, it shows:\n\nConfiguration Tab:\n  USER:   [No User Environment variable]\n  SYSTEM: PATH \u003d X:\\cygwin\\bin\\;[...]\n\nProject Tab:\n  USER:   [No User Environment variable]\n  SYSTEM: [No User Environment variable]\n\nIt appears that my path for the cygwin1.dll path is set for\nmy project, but apparently when you try to RUN your appliation\n(HelloWorld.c), the following error message appears:\n\nERROR:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nThe dynamic link library cygwin1.dll could not be found in\nthe specified path E:\\Eclipse\\Workspace...   ...;X:\\cygwin\\bin;\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nI tried to ADD the USER variables in both the Configuration and\nProject tab area and nothing worked.  Did not seem to change\nthe environent variables for CDT projects.\n\nOn further testing, I copied the cygwin1.dll from the installed\npath: X:\\cygwin\\bin\\ to C:\\WINNT\\System32 path, ran the hello program\nand this error goes away and the program runs.  Of course, this is NOT\na good idea but I did this to see if the program would run and it did.\n\nSo - how do I control the build and execution environment variables?\n\nBTW: renaming out the spawner.dll file did NOT work for me.  The\nHelloWorld.exe ran \"in the background\" with no output message going\nanywhere that I could see...  and of course I could not terminate the\nprogram since spawner.dll was not used for the kill and other signals.\n\nPlease fix this CDT release as is NOT useful to me at this time!\n",
    "(In reply to comment #9)\n\u003e After poking around in the code for a little while, I decided to rename my\n\u003e spawner.dll file to spawner.old.  Doing this causes\n\u003e org.eclipse.cdt.utils.spawner.ProcessFactory to use java.lang.Runtime.exec()\n\u003e instead of org.eclipse.cdt.utils.spawner.Spawner().exec().  This does not\n\u003e exhibit the behavior mentioned in comment 0.  Of course, this workaround is at\n\u003e the loss of the additional functionality that the Spawner class provides (namely\n\u003e the interrupt(), hangup(), kill(), terminate(), and isRunning() functions).  I\n\u003e have a feeling the problem lies somewhere in the Reaper inner class for those\n\u003e curious...\nI rename the spawn.dll,I can debug C++ well with it,but I have some Problem when  \nI write C code.the code is:\n#include\u003cstdio.h\u003e\n\nint main()\n{\n\tint i;\n\tprintf(\"Input an Integer\\n\");\n\tscanf(\"%d\",\u0026i);\n\tprintf(\"the Number You Enter Is:%d\\n\",i);\n\treturn 0;\n}\nwhen I run it,It does not output any thing.After I input 123,\nit appears as follow:\n123\nInput an Integer\nthe Number You Enter Is:123 ",
    "(In reply to comment #21)\nI\u0027m experiencing the same buggy behaviour (Eclipse 3.1.1, CDT 3.0.0).\n\nFeeding a return to the console actually starts my helloworld app, so the \napplication behaves like it starts with fgetc(stdin);\n\n#include \u003cstdio.h\u003e\nint main()\n{\n    //fgetc(stdin);\n    printf(\"Hello World\\n\");\n    \n    //block until user types something\n    fgetc(stdin);\n    return 0;\n}\n",
    "Ditto #17.   Took me a while to figure out why I do not see anything in the \nconsole after upgrading to 3.0.  Extremely visible and annoying.",
    " (In reply to comment #13)  \nI would really like to see this bug go away.  I am accustomed to using console  \nmessages for debugging all of my apps.  I encourage newcomers to vote for this  \nbug:  https://bugs.eclipse.org/bugs/votes.cgi?action\u003dshow_user\u0026bug_id\u003d102043 ",
    "This bug has 24 votes - by far the most \"popular\".   Why is it postponed from \n3.0.1 to 3.0.2 ?",
    "Because we have no one who is trying to fix it. If this report had a patch \nattached, then things might be different.",
    "good news, we have a person here working on a fix for this.\n\nAlex, could you attach your patch to this bug.",
    "Created an attachment (id\u003d29625)\nPutch that should fix the problem (I hope)\n",
    "I submitted a patch. Could those who can reproduce a problem try it? Thanks.",
    "*** Bug 98574 has been marked as a duplicate of this bug. ***",
    "*** Bug 68173 has been marked as a duplicate of this bug. ***",
    "*** Bug 115702 has been marked as a duplicate of this bug. ***",
    "(In reply to comment #29)\n\u003e I submitted a patch. Could those who can reproduce a problem try it? Thanks.\n\nI have applied the patch locally and tested it against my test case (very\nsimilar to the application described in comment 0).  With the patch applied, I\nam unable to reproduce the problem.  I have only tested this on my Win XP SP2\nworkstation but if this bug affects other platforms I would assume similar\nsuccess as well.\n\nThanks for the patch, looking forward to 3.0.2.  :)",
    "Thank you for the patch. I\u0027ll do some testing on OS X and Win32 with it this weekend (and post my \nresults here).\n\nWhen looking at the code, and since the whole thing seems to be related to a race-condition, I am \nmissing \"synchronized\"  in there. However, I have no idea about the internals, so that may be handled \nsomewhere else.",
    "Indeed this is a race condition. As soon as monitored process has terminated,\nprogram closed pipes. The data consumer didn\u0027t not know about that and tried to\nread already closed streams (the data that had been not not grabbed yet, just\nwas lost). This is an issue of the tandard streams control: the owner, not just\nspawner should be responsible for their closing.",
    "If you don\u0027t want to wait for 3.0.2, you may do the following:\n\n- make sure you have cdt 3.0.1\n- shut down eclipse\n- load http://max.berger.name/tmp/cdtcore.jar and put it in your\neclipse\\plugins\\org.eclipse.cdt.core_3.0.1 directory\n- restart eclipse\n\n(this is the original 3.0.1 jar file with the spawner classes replaced for those\nwho don\u0027t want to compile their own, I\u0027ll delete this file once 3.0.2 comes out)\n\nSo far I had very good results on win32 (the bug seems to have disappeared), OS\nX information is pending...",
    "(In reply to comment #36)\n\u003e If you don\u0027t want to wait for 3.0.2, you may do the following:\n\u003e \n\u003e - make sure you have cdt 3.0.1\n\u003e - shut down eclipse\n\u003e - load http://max.berger.name/tmp/cdtcore.jar and put it in your\n\u003e eclipse\\plugins\\org.eclipse.cdt.core_3.0.1 directory\n\u003e - restart eclipse\n\u003e \n\u003e (this is the original 3.0.1 jar file with the spawner classes replaced for those\n\u003e who don\u0027t want to compile their own, I\u0027ll delete this file once 3.0.2 comes out)\n\u003e \n\u003e So far I had very good results on win32 (the bug seems to have disappeared), OS\n\u003e X information is pending...\n\nI tried the suggested update steps described above and I\u0027m still encountering the failure for some reason. I\u0027m just running the hello.cpp example given by the CDT site and I still receive no output from the program in the Eclipse console. Once I press enter I receive the \"Hello World\" message but the program then terminates.\n\nWhen I run a debug session it seems to work because it\u0027s running in a Windows console rather than the Eclipse console.",
    "Created an attachment (id\u003d31907)\nworkspace/.metadata/.log\n\n",
    "(From update of attachment 31907)\nAny output before the first input won\u0027t be displayed until the first input is entered.",
    "Sorry for duplicate posts.\n\nOn Ubuntu Linux 5.10, outputs before the first input won\u0027t be displayed until the input is entered. It works fine occasionally though.\n\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nusing namespace std;\n\nint main(){\n\tcout \u003c\u003c \"First output\";\n\n\tstring bar;\n\tcin \u003e\u003e bar;\n\t\n\tcout \u003c\u003c \"Second output\";\n\t\n\tcin \u003e\u003e bar;\n\t\n\tcout \u003c\u003c \"Third output\";\n\t\n\tcin \u003e\u003e bar;\n\t\n\tcout \u003c\u003c \"Fourth output\";\n\t\n\treturn 0;\n}\n\nConsole output(\"bla\" as input):\nbla\nFirst outputSecond outputbla\nThird outputbla\nFourth output\n\nThe previous attached log was generated with the original 3.1.1 cdtcore.jar.\nUsing the patched cdtcore.jar produces exactly same \"read error\" but without \"close error\".\n",
    "(In reply to comment #40)\nI tried your example on Windows and Red Hat Linux and it works fine. There are two exceptions logged on Linux, but that\u0027s a known issue and it doesn\u0027t affect    the execution of program.\nTry to add cout.flush and see what\u0027s happenning. ",
    "(In reply to comment #40)\nThis is a defferent problem. See https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d121454.",
    "Applied the patch to the HEAD and 3.0.x branches.",
    "(In reply to comment #43)\n\u003e Applied the patch to the HEAD and 3.0.x branches.\n\u003e \n\nWhen will a version of CDT be available that incorporates this patch?\n\nFYI, I run CDT 3.1.1 on Windows (with CYGWIN) and Linux (Slackware 10.1).  The problem is only apparent in CDT on Linux.  CDT on Windows works as expected with regards output.\n\n",
    "(In reply to comment #44)\n\u003e When will a version of CDT be available that incorporates this patch?\n\u003e FYI, I run CDT 3.1.1 on Windows (with CYGWIN) and Linux (Slackware 10.1).  The\n\u003e problem is only apparent in CDT on Linux.  CDT on Windows works as expected\n\u003e with regards output.\n\nThe release of CDT 3.0.2 is scheduled for next week. The behaviour may be different on different systems and computers because the cause of the problem is a race condition.\nIf you are experiencing problems similar to https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d102043#c40 see https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d121454. This bug is fixed in the Eclipse platform for Eclipse 3.2.\n",
    "(In reply to comment #45)\n\u003e (In reply to comment #44)\n\u003e \u003e When will a version of CDT be available that incorporates this patch?\n\u003e \u003e FYI, I run CDT 3.1.1 on Windows (with CYGWIN) and Linux (Slackware 10.1).  The\n\u003e \u003e problem is only apparent in CDT on Linux.  CDT on Windows works as expected\n\u003e \u003e with regards output.\n\u003e \n\u003e The release of CDT 3.0.2 is scheduled for next week. The behaviour may be\n\u003e different on different systems and computers because the cause of the problem\n\u003e is a race condition.\n\u003e If you are experiencing problems similar to\n\u003e https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d102043#c40 see\n\u003e https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d121454. This bug is fixed in the\n\u003e Eclipse platform for Eclipse 3.2.\n\u003e \n\nYou mention version 3.0.2.  What about the version, 3.1.1, that I am using?\n\nAlso, when will 3.2 be released?\n\n",
    "(In reply to comment #46)\n\u003e You mention version 3.0.2.  What about the version, 3.1.1, that I am using?\n\u003e Also, when will 3.2 be released?\n\nThe CDT and Eclipse platform are two different projects. I mentioned version 3.0.2 of CDT. I assume, the version you mention (3.1.1) is of Eclipse platform.\nAnd I know, the Eclipse 3.2 milestone 5 is scheduled for February 17th. ",
    "*** Bug 126211 has been marked as a duplicate of this bug. ***",
    "More than a week has passed since you suggested that CDT 3.0.2 would be released.  However as of Feb/9, CDT still stands at 3.0.1.  At least, everytime I go through Help Software Updates Find and Install, Eclipse reports that there are no new components to install.  Also, when I check the plugin versions, CDT is still listed at version 3.0.1.\n\nDo you know if the version 3.0.2 has been delayed?  Or must it be acquired through a different process?\n\nThanks.\n\n(In reply to comment #47)\n\u003e (In reply to comment #46)\n\u003e \u003e You mention version 3.0.2.  What about the version, 3.1.1, that I am using?\n\u003e \u003e Also, when will 3.2 be released?\n\u003e \n\u003e The CDT and Eclipse platform are two different projects. I mentioned version\n\u003e 3.0.2 of CDT. I assume, the version you mention (3.1.1) is of Eclipse platform.\n\u003e And I know, the Eclipse 3.2 milestone 5 is scheduled for February 17th. \n\u003e \n\n",
    "It was voted to go and tagged this morning. It will probably be available tonight or tomorrow.",
    "The bug still occurs to me (CDT 3.0.2 and Eclipse 3.1.2) when requesting\ninput in C using scanf. cin/cout in c++ works fine, and printf also seems to do\nit\u0027s job.\n\nSee the following examples:\nin C (doesnt work...doesnt print anything until the input is completed)\n#include \u003cstdio.h\u003e\nint main()\n{\n\tchar strInput[256];\t\n\tprintf(\"hello printf\\n\");\n\tscanf (\"%s\",strInput);\n\tprintf(\"hello printf after input\\n\");\n}\n\nin C++ (works fine)\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nusing namespace std;\nint main()\n{\n\tstring s;\n\tcout \u003c\u003c \"hello cout\\n\";\n\t//cin \u003e\u003e s;\n\tcout \u003c\u003c \"hello cout after cin\\n\";\n}\n\nI have tried to find another way than scanf to get input in my C program, does anybody know? And regarding the issue...it maybe have something to do with this synchronisation thingie which I found on a forum:\n\n\"You can use ios_base::sync_with_stdio(0) in C++ programs which close synchronisation in/output and program will be even as fast as this with printf/scanf. \"",
    "(In reply to comment #51)\nThe CDT console is not a TTY. In your case, you need to flush your output manually.",
    "I have installed CDT 3.0.2 on Eclipse 3.1.1 on Linux.  The bug does not seem to be resolved:\n\nCode:\n\n#include \u003ciostream\u003e\nusing namespace std;\n\nint main()\n{\n\tint x;\n\t\n\tcout \u003c\u003c \"please enter something\" \u003c\u003c endl;\n\tcin \u003e\u003e x;\n\t\n\treturn 0;\n\t\n}\n\nOutput:\n\nhello\nplease enter something\n\nAs you can see, the output doesn\u0027t appear until the input is first entered.\n\n\n(In reply to comment #50)\n\u003e It was voted to go and tagged this morning. It will probably be available\n\u003e tonight or tomorrow.\n\u003e \n\n",
    "(In reply to comment #53)\nThis is not the same bug. The problem you are experiencing is the console implementation bug in the Eclipse platform. See https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d121454.",
    "(In reply to comment #51)\n\u003e The bug still occurs to me (CDT 3.0.2 and Eclipse 3.1.2) when requesting\n\u003e input in C using scanf. \n\nI experience the same behaviour using Eclipse 3.2M6 and CDT 3.0.2.\nIs there a patch available or a newer version with a bug fix?",
    "I\u0027m not sure if this bug is what I\u0027m encountering but it sounds very similar. I have a very simple c program:\n\n#include \u003cstdio.h\u003e\n\nint main( int argc, char *arge[], char *argv[] ) {\n\twhile ( 1 ) {\n\t\tprintf( \"\u003e\u003e \" );\n\t}\n\treturn 0;\n}\n\nNothing is output to the console window, however when run from cmd.exe output is as expected.\n"
  ],
  "commentCreationDates": [
    "2005-06-28T18:34:45+02:00",
    "2005-06-30T23:21:11+02:00",
    "2005-07-18T17:51:11+02:00",
    "2005-07-18T20:52:20+02:00",
    "2005-07-18T21:25:52+02:00",
    "2005-08-04T17:22:25+02:00",
    "2005-08-04T17:45:08+02:00",
    "2005-08-04T17:53:11+02:00",
    "2005-08-04T21:39:53+02:00",
    "2005-08-15T22:32:21+02:00",
    "2005-08-15T23:06:09+02:00",
    "2005-08-16T16:03:58+02:00",
    "2005-08-18T15:47:55+02:00",
    "2005-08-18T17:40:43+02:00",
    "2005-08-30T12:35:33+02:00",
    "2005-08-30T13:30:43+02:00",
    "2005-08-30T14:45:57+02:00",
    "2005-09-11T16:11:36+02:00",
    "2005-09-11T21:34:16+02:00",
    "2005-09-13T02:46:24+02:00",
    "2005-09-13T04:01:52+02:00",
    "2005-09-15T16:40:31+02:00",
    "2005-10-14T22:43:43+02:00",
    "2005-10-20T01:37:56+02:00",
    "2005-10-30T02:59:32+02:00",
    "2005-11-01T02:09:46+01:00",
    "2005-11-01T02:40:54+01:00",
    "2005-11-09T17:35:15+01:00",
    "2005-11-09T18:28:39+01:00",
    "2005-11-09T18:30:33+01:00",
    "2005-11-09T21:16:33+01:00",
    "2005-11-09T21:18:02+01:00",
    "2005-11-09T21:32:45+01:00",
    "2005-11-10T14:54:52+01:00",
    "2005-11-11T04:35:30+01:00",
    "2005-11-11T14:31:01+01:00",
    "2005-11-14T18:00:36+01:00",
    "2005-12-13T16:36:04+01:00",
    "2005-12-18T01:26:35+01:00",
    "2005-12-18T01:30:05+01:00",
    "2005-12-18T01:47:04+01:00",
    "2005-12-19T20:47:51+01:00",
    "2006-01-26T16:35:04+01:00",
    "2006-01-26T16:55:53+01:00",
    "2006-01-28T14:39:57+01:00",
    "2006-01-28T17:39:23+01:00",
    "2006-01-28T20:48:07+01:00",
    "2006-01-28T22:52:57+01:00",
    "2006-02-04T20:27:58+01:00",
    "2006-02-09T20:30:15+01:00",
    "2006-02-09T20:49:29+01:00",
    "2006-02-11T13:36:22+01:00",
    "2006-02-12T18:53:31+01:00",
    "2006-02-13T04:50:44+01:00",
    "2006-02-13T16:36:03+01:00",
    "2006-04-09T12:43:13+02:00",
    "2006-10-16T09:37:29+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.IOException",
      "message": "The handle is invalid.",
      "elements": [
        {
          "method": "org.eclipse.cdt.utils.spawner.SpawnerInputStream.read0",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.cdt.utils.spawner.SpawnerInputStream.read",
          "source": "SpawnerInputStream.java:60"
        },
        {
          "method": "java.io.BufferedInputStream.read1",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.BufferedInputStream.read",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.FilterInputStream.read",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.debug.internal.core.OutputStreamMonitor.read",
          "source": "OutputStreamMonitor.java:137"
        },
        {
          "method": "org.eclipse.debug.internal.core.OutputStreamMonitor.access$1",
          "source": "OutputStreamMonitor.java:127"
        },
        {
          "method": "org.eclipse.debug.internal.core.OutputStreamMonitor$1.run",
          "source": "OutputStreamMonitor.java:193"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "102043",
      "date": "2005-06-30T23:21:11+02:00",
      "product": "CDT",
      "component": "cdt-launch",
      "severity": "normal"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "The handle is invalid.",
      "elements": [
        {
          "method": "org.eclipse.cdt.utils.spawner.SpawnerInputStream.read0",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.cdt.utils.spawner.SpawnerInputStream.read",
          "source": "SpawnerInputStream.java:60"
        },
        {
          "method": "java.io.BufferedInputStream.read1",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.BufferedInputStream.read",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.FilterInputStream.read",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.debug.internal.core.OutputStreamMonitor.read",
          "source": "OutputStreamMonitor.java:137"
        },
        {
          "method": "org.eclipse.debug.internal.core.OutputStreamMonitor.access$1",
          "source": "OutputStreamMonitor.java:127"
        },
        {
          "method": "org.eclipse.debug.internal.core.OutputStreamMonitor$1.run",
          "source": "OutputStreamMonitor.java:193"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Unknown Source"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "102043",
      "date": "2005-06-30T23:21:11+02:00",
      "product": "CDT",
      "component": "cdt-launch",
      "severity": "normal"
    }
  ],
  "groupId": "102043",
  "bugId": "102043",
  "date": "2005-06-28T18:34:45+02:00",
  "product": "CDT",
  "component": "cdt-launch",
  "severity": "normal"
}