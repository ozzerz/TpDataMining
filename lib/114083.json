{
  "comments": [
    "Using byte-code for type resolution greatly increases the footprint for LTW. \nIt persists because we never release it and the approach does not scale in \nenvironments with large numbers of class loaders e.g. Tomcat or very large \nnumbers e.g. OSGi. Using the ReflectionBasedReferenceTypeDelegate instead, \nwhich uses Class.forName(), will improve performance and reduce footprint.\n\nThere have been a number of discussions \n(http://dev.eclipse.org/mhonarc/lists/aspectj-dev/msg01847.html, \nhttp://dev.eclipse.org/mhonarc/lists/aspectj-users/msg04857.html) and bugs \n(https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d35547, \nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d112817) on the subject. However \ncare must be taken:\n1.\tUntil the weaver is deemed re-entrant byte-code must continue to be \nused for classes defined by the class loader with which the weaver is \nassociated\n2.\tByte-code must be used for resolving aspects when using a JDK prior to \n1.5 and only in JDK 1.5 when the MAP is available because cross-cutting meta-\ndata is not available through  vanilla Java reflection\n3.\tNon-delegating web application class loaders are problematic. For this \nreason it may only be safe, at least initially, to use reflection for the boot \nloader. This should still provide a considerable benefit.",
    "This should be target 1.5.1",
    "I have started working on an implementation of LTWWorld; see the attached patch for what I have so far. This code is better than any previous attempts to implement this because it\u0027s now checking parent hierarchies for already defined classes using resource URL\u0027s to check for delegation. \n\nHowever, I\u0027m hitting 4 problems, at least 3 of which look like bugs in the AJ 1.5 reflection delegates implementation. I think that the next step to making this work is more tests on the reflection cases....\n\n1. One Matthew and I hit before. In UnresolvedType, there are cases where it is calling nameToSignature on a signature. This seems to happen predicably if you call getDeclaredMethods() on the delegate for anything that defines an array of generic types, E.g., javax.servlet.http.HttpServlet. Matthew was able to isolate a problem like this by replacing one of the reflection reference type delegate test cases to test behavior on Class instead of on Object.\n\nI worked around this problem by just returning the signature:\n    private static String nameToSignature(String name) {\n...\n        if (name.length() !\u003d 0) {\n        \t// lots more tests could be made here...\n\n        \t// check if someone is calling us with something that is a signature already\n        \tif (name.charAt(0)\u003d\u003d\u0027[\u0027) {\n        \t\t//XXX hack\n        \t\tSystem.err.println(\"still need hack\");\n        \t\treturn name;\n        \t\t//throw new BCException(\"Do not call nameToSignature with something that looks like a signature (descriptor): \u0027\"+name+\"\u0027\");\n        \t}\n\n2. The other looks like a problem from calling getDeclaredMethods() on a raw type. I get this stack trace for a number of collection types. I tried commenting out the isRawType() case in ReferenceType:397 and it seems to avoid the problem\n\t\tif (isParameterizedType()) {// || isRawType()) {\n\nCan\u0027t ask to parameterize a member of a non-generic type\njava.lang.IllegalStateException: Can\u0027t ask to parameterize a member of a non-generic type\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:605)\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:590)\n\tat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:402)\n\tat org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:252)\n\tat org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:266)\n\tat org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:247)\n\tat org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:365)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:167)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:68)\n\tat org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:285)\n\tat org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:105)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:57)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)\n\tat org.aspectj.weaver.Advice.match(Advice.java:109)\n\tat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:105)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2113)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2100)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1882)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1708)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:455)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1534)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1485)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1266)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:267)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:199)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:67)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n...\n\n3. I also get a similar error as in #2 from ReferenceType.getDeclaredMethods on overridden methods. E.g., int java.util.Map.hashCode() appears as a declared method on the ReferenceType for java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e, but its declaring type, java.util.Map is raw. This if test on ReferenceType:403 works around this problem:\n\n\t\t\t\tif (delegateMethods[i].getDeclaringType().equals(this)) {\n\t\t\t\t\tparameterizedMethods[i] \u003d delegateMethods[i].parameterizedWith(parameters,this,isParameterizedType());\n\t\t\t\t}\n\n4. However, I now get this NPE when looking for aMember representing java.lang.Object java.util.AbstractMap.put(K, java.lang.Object), with an array of null parameterizedMethods (probably because of my workaround to #3\n\njava.lang.NullPointerException\n\tat org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:373)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:167)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:197)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:165)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:197)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:68)\n\tat org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:285)\n\tat org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:105)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:57)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)\n\tat org.aspectj.weaver.Advice.match(Advice.java:109)\n\tat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:105)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2113)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2100)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1882)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1708)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:455)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1534)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1485)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1266)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:267)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:199)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:67)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n...\n",
    "Created an attachment (id\u003d30363)\nimplementation of LTWWorld\n\nstill pending more testing",
    "Over the last few weeks I\u0027ve hit all of the problems Ron is describing (whilst investigating other stuff...) and I\u0027ve not done any LTW or used a reflection world - I think there are just bugs in that code and we don\u0027t have enough test programs for generic types (whether they are referred to in RAW form or not).  I will write a few and see what comes out...",
    "Interesting...\n\nSee also bug #117622 with some tests and bug #117624 with one fix. The unit test for bug #117622 exhibits the same failure as item 1 below and with the same work-around, the same failure as item 2 below, with that work-around it exhibits failure 3. I have submitted a new tracking bug #117628 for this specific problem.",
    "is this now resolved with LTWWorld in use for LTW?",
    "anyone going to reply to my previous comment? I\u0027ll close this soon if no-one says otherwise...",
    "I have opened Bug 149140."
  ],
  "commentCreationDates": [
    "2005-10-28T12:49:15+02:00",
    "2005-10-28T12:50:46+02:00",
    "2005-11-22T09:16:51+01:00",
    "2005-11-22T09:22:25+01:00",
    "2005-11-22T09:36:00+01:00",
    "2005-11-23T04:20:20+01:00",
    "2006-06-19T16:53:33+02:00",
    "2006-06-27T16:38:48+02:00",
    "2006-06-29T14:32:16+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Can\u0027t ask to parameterize a member of a non-generic type",
      "elements": [
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:605"
        },
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:590"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getDeclaredMethods",
          "source": "ReferenceType.java:402"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.addAndRecurse",
          "source": "ResolvedType.java:252"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.addAndRecurse",
          "source": "ResolvedType.java:266"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator",
          "source": "ResolvedType.java:247"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.lookupResolvedMember",
          "source": "ResolvedType.java:365"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes",
          "source": "JoinPointSignatureIterator.java:167"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.hasNext",
          "source": "JoinPointSignatureIterator.java:68"
        },
        {
          "method": "org.aspectj.weaver.patterns.SignaturePattern.matches",
          "source": "SignaturePattern.java:285"
        },
        {
          "method": "org.aspectj.weaver.patterns.KindedPointcut.matchInternal",
          "source": "KindedPointcut.java:105"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:57"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:55"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:55"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:55"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.ShadowMunger.match",
          "source": "ShadowMunger.java:64"
        },
        {
          "method": "org.aspectj.weaver.Advice.match",
          "source": "Advice.java:109"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.match",
          "source": "BcelAdvice.java:105"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:2113"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction",
          "source": "BcelClassWeaver.java:2100"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:1882"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:1708"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:455"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:102"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1534"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1485"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1266"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1088"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes",
          "source": "WeavingAdaptor.java:267"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:199"
        },
        {
          "method": "org.aspectj.weaver.loadtime.Aj.preProcess",
          "source": "Aj.java:67"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform",
          "source": "ClassPreProcessorAgentAdapter.java:52"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "114083",
      "date": "2005-11-22T09:16:51+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "enhancement"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.ResolvedType.lookupResolvedMember",
          "source": "ResolvedType.java:373"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes",
          "source": "JoinPointSignatureIterator.java:167"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes",
          "source": "JoinPointSignatureIterator.java:197"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes",
          "source": "JoinPointSignatureIterator.java:165"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes",
          "source": "JoinPointSignatureIterator.java:197"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.hasNext",
          "source": "JoinPointSignatureIterator.java:68"
        },
        {
          "method": "org.aspectj.weaver.patterns.SignaturePattern.matches",
          "source": "SignaturePattern.java:285"
        },
        {
          "method": "org.aspectj.weaver.patterns.KindedPointcut.matchInternal",
          "source": "KindedPointcut.java:105"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:57"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:55"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:55"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.patterns.AndPointcut.matchInternal",
          "source": "AndPointcut.java:55"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:145"
        },
        {
          "method": "org.aspectj.weaver.ShadowMunger.match",
          "source": "ShadowMunger.java:64"
        },
        {
          "method": "org.aspectj.weaver.Advice.match",
          "source": "Advice.java:109"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.match",
          "source": "BcelAdvice.java:105"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:2113"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction",
          "source": "BcelClassWeaver.java:2100"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:1882"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:1708"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:455"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:102"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1534"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1485"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1266"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1088"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes",
          "source": "WeavingAdaptor.java:267"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:199"
        },
        {
          "method": "org.aspectj.weaver.loadtime.Aj.preProcess",
          "source": "Aj.java:67"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform",
          "source": "ClassPreProcessorAgentAdapter.java:52"
        },
        {
          "method": "sun.instrument.TransformerManager.transform",
          "source": "TransformerManager.java:122"
        }
      ],
      "number": 1,
      "commentIndex": 2,
      "bugId": "114083",
      "date": "2005-11-22T09:16:51+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "enhancement"
    }
  ],
  "groupId": "114083",
  "bugId": "114083",
  "date": "2005-10-28T12:49:15+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "enhancement"
}