{
  "comments": [
    "Aspectj Compiler 1.1beta4\n\nIn the \"Aspect Instantiation and Advice\" section in README-11.html, it is said\nthat an org.aspectj.lang.NoAspectBoundException will be thrown if a before\nadvice captures all constructors executions (including the aspect constructor).\n\n      aspect Watchcall {\n          pointcut myConstructor(): execution(new(..));\n\n          before(): myConstructor() {\n              System.err.println(\"Entering Constructor\");\n          }\n      }\n\nBut adding a similar after advice to the same aspect will throw an obscure\nNoClassDefError instead, which gives no clues about what the error is.",
    "The modified aspect:\n\n      aspect Watchcall {\n          pointcut myConstructor(): execution(new(..));\n\n          before(): myConstructor() {\n              System.err.println(\"Entering Constructor\");\n          }\n\n          after(): myConstructor() {\n              System.err.println(\"Leaving Constructor\");\n          }\n      }\n\nThe Java class (unchanged): \n\n      public class Client\n      {\n          public static void main(String[] args) {\n              Client c \u003d new Client();\n          }\n      }\n\nThe error stack trace:\n\nException in thread \"main\" java.lang.NoClassDefFoundError\n  at Client.\u003cinit\u003e(Client.java:1)\n  at Client.main(Client.java:4)",
    "This behavior was easily verified.  Thanks for the simple test case.\n\nI\u0027m unsure what the correct resolution is.  The problem is a standard one\nwith after advice.  Because after advice will run even in the presence of\nexceptions, it can lead to confusing behavior in the same way that try/finally\ncan.  See the FAQ entry on \"When I run, I get a StackOverflowError (or a long \nstack trace or no output whatsoever)\" for more information on a different \nmanifestation of this same issue.\n\nMy recommendation in the short-term is to use after returning advice instead \nof after advice whenever possible to avoid these confusions.  For the\nlonger term this might merit discusion on the aspectj-dev list.",
    "*** Bug 37256 has been marked as a duplicate of this bug. ***",
    "Finally fixed!\n\nAll exceptions that occur during the static intialization of a persingleton\naspect will be swallowed.  When using that aspect (via aspectOf()) \na NoAspectBoundException will be thrown with the original exception\nfrom the staitc initializer as the cause."
  ],
  "commentCreationDates": [
    "2003-03-08T19:23:07+01:00",
    "2003-03-08T19:45:43+01:00",
    "2003-03-11T19:45:59+01:00",
    "2003-05-06T20:20:56+02:00",
    "2004-01-14T15:30:38+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "elements": [
        {
          "method": "Client.\u003cinit\u003e",
          "source": "Client.java:1"
        },
        {
          "method": "Client.main",
          "source": "Client.java:4"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "34206",
      "date": "2003-03-08T19:45:43+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "34206",
  "bugId": "34206",
  "date": "2003-03-08T19:23:07+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}