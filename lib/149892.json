{
  "comments": [
    "When executing the Equinox 3.2 environment on J9 (version 2.2) against JCL RM, an OSGiMin implementation, using \"j9 -jcl:rm -cp org.eclipse.osgi_3.2.0.v20060601.jar;smf.jar org.eclipse.core.runtime.adaptor.EclipseStarter -console\" (note the -jar option is not available with the RM library), startup fails with the following stack trace:\n\njava.lang.NoClassDefFoundError: java.text.DateFormat\n        at java.lang.Class.verifyImpl(Native Method)\n        at java.lang.Class.verify(Class.java:255)\n        at java.lang.Class.initialize(Class.java:317)\n        at org.eclipse.core.runtime.internal.adaptor.EclipseLogHook.createFrameworkLog(EclipseLogHook.java:90)\n        at org.eclipse.osgi.baseadaptor.BaseAdaptor.getFrameworkLog(BaseAdaptor.java:316)\n        at org.eclipse.core.runtime.adaptor.EclipseStarter.startup(EclipseStarter.java:281)\n        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:173)\n        at org.eclipse.core.runtime.adaptor.EclipseStarter.main(EclipseStarter.java:150)\n\nThe java.text.* package is not part of the OSGi/Minimum-1.1 execution environment per the R4 specification. I also tried to execute the environment using the -noverify VM argument but received the following stack trace:\n\nException in thread \"main\" java.lang.NoClassDefFoundError: java.text.SimpleDateFormat\n        at org.eclipse.core.runtime.adaptor.EclipseLog.getDate(EclipseLog.java:388)\n        at org.eclipse.core.runtime.adaptor.EclipseLog.getSessionTimestamp(EclipseLog.java:166)\n        at org.eclipse.core.runtime.adaptor.EclipseLog.writeSession(EclipseLog.java:181)\n        at org.eclipse.core.runtime.adaptor.EclipseLog.log(EclipseLog.java:284)\n        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:185)\n        at org.eclipse.core.runtime.adaptor.EclipseStarter.main(EclipseStarter.java:150)\n\nThis bug assumes your intent was to provide both execution environments listed in the spec, not just one for CDC-1.0/Foundation-1.0.",
    "The first exception you are getting looks to be a verifier error in the J9 2.2 VM.  I tried the same thing on the J9 2.3 VM and did not get the error in class verification.\n\nThe second exception (when you run with -noverify) is occurring because we are catching Exception when we should be catching Throwable.  In cases where DateFormat is not available a NoClassDefFoundError is thrown which extends Error not Exception.\n\nCan you move up to J9 2.3?  The J9 2.2 RM class library only implements OSGi/Minimum-1.0.  The J9 2.3 RM class libarary implements OSGi/Minimum-1.1.  The OSGi/Minimum-1.1 execution environment adds many basic things that we will need (like a URLClassLoader).\n",
    "Thanks for the information. We will need to upgrade to the 2.3 J9 VM as part of our migration from SMF to Equinox. We will also try and convince our OEMs to do the same but may end up having to support J9 2.2 for a while. C\u0027est la vie.\n\nDo you have a target release for the catch Throwable versus Exception fix?",
    "Created an attachment (id\u003d45935)\npatch\n\nChanges the catch(Exception e) to catch(Throwable e)",
    "(In reply to comment #3)\n\u003e Created an attachment (id\u003d45935) [edit]\n\u003e patch\n\u003e \n\u003e Changes the catch(Exception e) to catch(Throwable e)\n\u003e \n\nIs it wise to catch and discard Throwables? I thought we had a whole effort to address blindly catching as discarding Throwables since it could be OutOfMemoryError for example.\n\nIf the goal is to simply ignore NoClassDefFoundError then just catch and discard that.",
    "Regarding the date and time, it would be nice to not lose it on the OSGi minimum execution environment.  I was faced with exactly this problem some years ago and implemented behavior to display the time and date as follows:\n\n  2006-07-07 13:21:00.188\n\nThis can easily be done on the OSGi minimum execution environment using just a Calendar object and a StringBuffer.  Using SimpleDateFormat is really unnecessary, although I grant you than it\u0027s certainly easier.  If you\u0027re interested in hearing more, just let me know.\n",
    "(In reply to comment #4)\nYes, catch a NoClassDefFoundError is better, thanks.\n\n(In reply to comment #5)\nYes, please tell us more ( in the form of a patch would be great :)\nI would prefer to use DataFormat if it is available still.  I\u0027m not convinced we would get all the formatting correct for the different locates etc.",
    "Yes Tom, getting the formatting correct for each locale is the value of using one of the JDK\u0027s formatting classes.  But, if you\u0027re running on the OSGi min and you don\u0027t want to drop a date/time stamp, then I would imagine that supporting a fixed format such as \"YYYY-MM-DD hh:mm:ss.SSS\" would be good enough for logging.\n\nMy assumption is that if you\u0027re smart enough to understand the messages written to the log then you should be smart enough to make the mental leap that the date/time might be somewhat non-standard for your locale.  ;-)\n",
    "Created an attachment (id\u003d45967)\npatch\n\nImproved patch that does not use DateFormat at all.  Need a code review from DJ and Pascal.",
    "Created an attachment (id\u003d45968)\nPatch to EclipseLog to provide fixed date formatting for the OSGi minimum execution environment.\n\nThe goal of this patch is to provide a fixed date format when running on the OSGi minimum execution environment where java.text classes, such as SimpleDateFormat, are not available.\n\nSince logging can happen pretty frequently, the patch adds a boolean flag  called minimumExecutionEnvironment that is set to true the first time we discover that the class SimpleDateFormat is not available; this ensures that those running on the OSGi minimum execution environment are not paying the runtime cost of trying to find the SimpleDateFormat class, throwing an exception, catching the exception and then recovering.\n\nThe patch also adds a static Calendar instance that is only used when generating the fixed date format.  Of course it could be lazily initialized, but it is not today.  The reason for caching the Calendar is that implementations of the Calendar.getInstance() method typically create a brand new instance every time, so for performance reasons I\u0027ve chosen to prevent an instance getting created every time a message is logged.\n\nThe patch uses a StringBuffer to build the fixed format date, which I chose not to cache for simplicity reasons.\n\nOf particular importance is the synchronization on the calendar in the getFixedDateFormat(Date) method.  This is important to ensure that the static calendar reference is not used by multiple threads.  As you\u0027ll see, I call the Calendar\u0027s setTime(Date) method to populate it with the given Date object.\n",
    "Created an attachment (id\u003d45973)\npatch\n\nThanks Simon.  There are a few things that you should be aware of.\n\n- Logging should not happen that often.  We open/write/close a file for every entry written to the log.  It is already a very expensive operation.  The eclipse log should only be written to if you want a bug opened against your component.  It should not be used for informational type messages.\n\n- The logging methods are synchronized already so you do not need to worry about threading issues to access calendar.\n\nGiven these assumptions we can make the patch simplier.\n\nBut your patch did point out a bug in my patch.  The DAY_OF_MONTH field on calendar is zero based so its value needs +1 to be correct.  I also was creating a GregorianCalendar directly when I should be using Calendar.getInstance().\n\nHere is an upated patch.",
    "I forgot to mention earlier why I moved completely away from DateFormat usage.  I could not get around the verifier errors, every time I made any reference to DateFormat the EclipseLog class would not even load the EclipseLog class.  The verifier would alway want to put in the DateFormat class while loading the EclipseLog class.\n\nYou can argue that this is a verfier bug, but we should consider making these changes to work on any VM.",
    "Last patch from Tom looks good to go.",
    "+1",
    "The patch is simple, do we want to integrate that in 3.2.1. Simon, John?",
    "Sounds like a candidate for 3.2.1 to me.",
    "+1 for 3.2.1",
    "I released latest patch to HEAD.\n\n+1 for fixing 3.2.1\n",
    "Thank you. Inclusion within the 3.2.1 release would be perfect. Now if we can just convince the Cutlass team to base their first release on 3.2.1 instead of 3.2...",
    "I have released this patch into the 3.2.1 branch.\nIt will be in next week maintenance build.",
    "John, Simon, please verify.",
    "Should this patch also be applied in the 3.3 stream?",
    "Sorry. It already is there."
  ],
  "commentCreationDates": [
    "2006-07-06T22:10:42+02:00",
    "2006-07-07T16:24:04+02:00",
    "2006-07-07T16:48:59+02:00",
    "2006-07-07T18:13:15+02:00",
    "2006-07-07T18:19:51+02:00",
    "2006-07-07T19:29:34+02:00",
    "2006-07-07T19:57:30+02:00",
    "2006-07-07T21:14:23+02:00",
    "2006-07-07T22:18:55+02:00",
    "2006-07-07T22:21:01+02:00",
    "2006-07-07T23:53:58+02:00",
    "2006-07-07T23:58:05+02:00",
    "2006-07-10T17:30:50+02:00",
    "2006-07-11T20:46:37+02:00",
    "2006-07-12T04:41:39+02:00",
    "2006-07-12T08:30:55+02:00",
    "2006-07-12T15:45:29+02:00",
    "2006-07-12T15:50:29+02:00",
    "2006-07-12T16:54:48+02:00",
    "2006-07-12T21:15:33+02:00",
    "2006-07-12T21:17:12+02:00",
    "2006-10-05T05:07:46+02:00",
    "2006-10-05T05:14:19+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "java.text.DateForm",
      "elements": [
        {
          "method": "atjava.lang.Class.verifyImpl",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.verify",
          "source": "Class.java:255"
        },
        {
          "method": "java.lang.Class.initialize",
          "source": "Class.java:317"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseLogHook.createFrameworkLog",
          "source": "EclipseLogHook.java:90"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.BaseAdaptor.getFrameworkLog",
          "source": "BaseAdaptor.java:316"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.startup",
          "source": "EclipseStarter.java:281"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:173"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.main",
          "source": "EclipseStarter.java:150"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "149892",
      "date": "2006-07-06T22:10:42+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "java.text.SimpleDateForm",
      "elements": [
        {
          "method": "atorg.eclipse.core.runtime.adaptor.EclipseLog.getDate",
          "source": "EclipseLog.java:388"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseLog.getSessionTimestamp",
          "source": "EclipseLog.java:166"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseLog.writeSession",
          "source": "EclipseLog.java:181"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseLog.log",
          "source": "EclipseLog.java:284"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:185"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.main",
          "source": "EclipseStarter.java:150"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "149892",
      "date": "2006-07-06T22:10:42+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    }
  ],
  "groupId": "149892",
  "bugId": "149892",
  "date": "2006-07-06T22:10:42+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "normal"
}