{
  "comments": [
    "Sometimes after a restart of eclipse/ clean build, Jars in added libraries are not recognised and this results in compilation error. To solve the problem, I have to remove the library assignment to the project, build the project and add the project again. Occurs in Win2k and WinXP",
    "Please provide reproducable test case and attach the library to this bug report.\nAlso provide contents of the .log file in the .metadata folder.\nThanks.\nReopen when requested information is available.",
    "This bug bites many people, incl. us.\nYou may Google for \"unbound classpath container\" or similiar, e.g. http://dev.eclipse.org/newslists/news.eclipse.tools.jdt/msg16305.html and you will see that this bug exists since a while and still persists.\n\nIt seems to almost always emerge in real-world size projects while not being reproducible easily in toy projects. Our workspace is 150MB and cannot be attached, contains 7 dependent projects incl. WST and we almost stopped using Eclipse because of this. No other IDE (IntelliJ, NetBeans, JB) ever had problems with this workspoce and our user libraries.\n\nMost of the time (70%), one of the projects does not build because of unresolved imports (this bug). Sometimes (10%), a user library all of a sudden is flagged \"unbound classpath container\". Only 20% of time a build will succeed. Needless to say that other Builders continue to build AFTER a Java Builder failed (but this is another bug of normal severity).\n\nWe got the idea that this may be related to packages appearing multiple times on the classpath (which is quite normal). We also observed that Eclipse does not notice until restart when a library changes on disk (other IDEs do -- is this normal for Eclipse or could it be part of the problem?).\n\nPlease, can somebody take care of this or announce that bugs of this kind will not receive attention? Thank You.\n\nEclipse Version: 3.2.1 Build id: M20060921-0945 Win XP JDK1.5.",
    "I will make a few attempts of my own to reproduce the behavior you describe, but the elements asked by Olivier would help us to narrow down the issue.\n\nAnother question of interest: did you try 3.2.2 or any milestone of 3.3 and, if yes, which outcomes did you get?",
    "*** Bug 175183 has been marked as a duplicate of this bug. ***",
    "I have recently found one more problem. Please feel free to open a new one if these two do not fall under same category.\nOur setup is like this:\nWe have a team of 15 developers. All our Java sources are in Clearcase as different projects. We have the project definitions stored in Clearcase. I.e. we have a separate directory in clearcase for each project which will have .project and .classpath files. All of us use different workspaces (in Hard disk). We will load these projects into the workspace using \u0027create project from existing workspace\u0027 and refer to clearcase path. In our workspace preferences, we have linked resources for a variable pointing to a base location for all the project sources (in clearcase). In the .project we add the linked resources using this linked variable. Now the problem is:\n- If for some reason (e.g. config spec is wrong) we could not see the project sources once.\n- Eclipse will not show these files (as they do not exist in the path specified)\n- After this instance, every time we load eclipse with the same projects, we cannot see the sources in the project explorer even if it is made available (e.g. config spec corrected).\n- We have to delete the project from workspace(do not delete content)\n- And add it again by creating a new project from existing source.\n\nLet me know if you feel the way I am doing is not ok.\n\n",
    "Think we have the same problem here. (BTW: The Problem described by Sammpath is a different one I think)\nThis one is annoying. We use UserLibraries, since our PackageExplorer Tree would\nsimply be too large if we\u0027d import the libraries one for one. So we\u0027ve choosen\nto use UserLibraries (even if they are shared with every teammember).\nBut now, this Bug bites us every few days (I can not say what causes it,\nsometimes it works , sometimes not). Sometimes, a restart of eclipse helps,\nsometimes not. rebuilding, readding of the library does not work. \nI have to say, that our project is a large one too, but no problem with other\nIDE\u0027s...\nWe use 3.2.2 . While I think it occured in 3.2.1 already, I am sure it appears a lot more since we use 3.2.2 . But I have to say, that we added some new libraries since too...\n\nThis Bug is NOT resolved.",
    "We\u0027re seeing the same problem here. Sometimes, a workspace can remain unaffected by the problem for long periods of time, sometimes it happens almost daily. ",
    "(In reply to comment #6)\n...\n\u003e This Bug is NOT resolved.\nREMIND means: we would like to get more information to investigate.\nAs announced above, I\u0027ll spend some time to try reproduce the problem on my side.\nBut the information provided so far does not constitute a test case that would be predictable and reasobably practical. That is the reason of the bug status.\n\n",
    "Sorry then for this, but the help page of the \"Resolution\" does not mention what \"Remind\" means.\n\nUnfortunately, this is not reproducable always. It really occurs only on one of our projects (the biggest one of corse), but never on the toy-projects.\n\nWhere can I find the Eclipse Logfile?",
    "(In reply to comment #5)\nThis is not related to this bug.\n\nFrom the tests I have made with I20070222-0951, extending a path variable to\ncreate a linked folder resolves the variable before storing the resulting path.\n(Look at .project contents: you will have a linkedResources entry with a\nlocation set to an absolute path that matches the filesystem of the developer\nwho created the linked resource), and changing the path variable value\nafterwards does not change the linked resource location (as displayed in the\nproperties context menu - aka c:\\tmp\\somedir). If I am right in my reading of\nthe help topic on path variables, this is not the intended behavior. I\nencourage you to open a separate bug against Eclipse/Platform/Resources to get\nthis investigated.\n(For the records, I did my tests with java projects only, extending the\nvariable or using it as is, the variable referencing a source folder of an\nexisting project within another workspace, the other workspace being open\nwithin another eclipse instance, or closed.)",
    "By default, the log is a .log file in the .metadata directory of your workspace. ",
    "Inviting J?r?me in the conversation since this might be related to race conditions in the Java model.",
    "(In reply to comment #9)\n\u003e Sorry then for this, but the help page of the \"Resolution\" does not mention\n\u003e what \"Remind\" means.\nOpened bug 177497 against the Eclipse web site.",
    "I do not agree that this bug carries the state \"RESOLVED\" (even if the resolution is \"REMIND\"). It should either be kept open or be closed wontfix or cantreproduce. This is why I created a new bug in the first place, which now was closed \"DUPLICATE\". This bug is shown as \"RESOLVED\" in all lists (dashed out) while in reality, there is an OPEN bug which renders Eclipse UNUSABLE for many of us professional programmers. Also, people being hit by this will normally only search in the list of UNRESOLVED issues to find out if others have similiar problems.\n\nIn summary: I would like to change state to \"OPEN\" by the user interface does not give me this option...",
    "(In reply to comment #3)\n\u003e Another question of interest: did you try 3.2.2 or any milestone of 3.3 and, if\n\u003e yes, which outcomes did you get?\n\nMaxime: I had and have this problem with 3.2.2. 3.3 is, I think not marked as production quality.\n\nI will attach the log files. But there is an awful lot of stuff in it which I will not be able to parse manually :-(\n\nAnother observation: I did a number of changes in my setup which made this problem occur less often:\n(1) I moved user libraries from our repository (a network share) to a local copy\n(2) I rearranged some jars so that packages appearing in multiple jars are less numerous.\n(3) I try to avoid running Builders other than Java (i.e. Ant scripts with \"refresh after run\" option).\n\nStill, the problem is still there! My last observation:\n\n\n(HERE COMES A POSSIBLE HINT WHERE THE PROBLEM MAY EMERGE FROM:)\n\nIn one of my projects (in the workspace) which stopped building, the corresponding user library did NOT contain any JARs any more (what you see by opening the little triangle next to it). It should have displayed 3 JARs. In the user library listing, when opening the triangle, I see all 3 JARs. Obviously, there are DIFFERENT descriptors for the same user library within Eclipse which can become out of sync. Hard to believe, I know... And then: It does NOT help to drop and add the user library within the project. I had to drop the user library, recompile (with errors, of course), close and RESTART Eclipse, add the user library again and then (now successfulyl) recompile.\n\nObviously, there can be a broken stealth descriptors for a user library within Eclipse which is hard to get rid off (a simple restart -clean does NOT help!).\n\nMaybe this observation gets you up and running. I fear there cant be a test case for this bug. However, a simple code review should reveal it as well.",
    "Created an attachment (id\u003d60918)\nLogfile of Eclipse workspace (part #1)\n\n",
    "Created an attachment (id\u003d60919)\nLogfile of Eclipse workspace (part #2)\n\n",
    "Thanks for the additional information.\n\nDefinitely looks like a consistency problem at the user libraries level. J?r?me, do you want me to investigate, or will you take over?\n\nBTW, many of the log entries complain about file deletion problems (eg C:\\home\\falk\\dev\\ercatoEngine\\xoperator\\tasks\\xop.jar\\tmp.jar). Do those files have specific properties? Are they still present on your disk?",
    "We would need more information about the container initialization. Maxime, please explain to Falk how to get the trace so that Falk can attach it to the bug.",
    "Created an attachment (id\u003d60934)\nJDT options to debug classpath related activities\n\nFalk, \nPlease drop the attached file in your Eclipse 3.2.2 eclipse directory. From a DOS prompt, navigate to your Eclipse 3.2.2 eclipse directory and execute the following command:\njava -jar startup.jar -debug eclipse_jdt_options.txt \u003e jdt.log\nExpect the log file to grow fairly rapidly. It would help us that you stop the session as soon as you hit the issues and that you give us the names of some of the missing jars so as to ease the log interpretation.\nThanks in advance.",
    "(In reply to comment #18)\n\u003e BTW, many of the log entries complain about file deletion problems (eg\n\u003e C:\\home\\falk\\dev\\ercatoEngine\\xoperator\\tasks\\xop.jar\\tmp.jar). Do those files\n\u003e have specific properties? Are they still present on your disk?\n\nMaxime: The file deletion problems seem to be unrelated. I create JARs in ant scripts using jar, fatjar and autojar. Some of those commands seem to keep a JAR locked so that I cannot delete it at the end of a ant task. However, I can delete it after the ant task so this no big concern for us. Of course, we would prefer Eclipse to have a single build-in Builder covering the functionality of jar, fatjar and autojar, very much like JBuilder had since 1998...",
    "(In reply to comment #21)\n\u003e (In reply to comment #18)\n\u003e \u003e BTW, many of the log entries complain about file deletion problems (eg\n\u003e \u003e C:\\home\\falk\\dev\\ercatoEngine\\xoperator\\tasks\\xop.jar\\tmp.jar). Do those files\n\u003e \u003e have specific properties? Are they still present on your disk?\n\u003e \n\u003e Maxime: The file deletion problems seem to be unrelated. \nWe suspected so. But we did not want to miss a potential bug if you had no good explanation for those log items. Thx for the clarification.",
    "Created an attachment (id\u003d60943)\nDebugging log\n\n(In reply to comment #20)\n\u003e java -jar startup.jar -debug eclipse_jdt_options.txt \u003e jdt.log\n\nI did as advised. My (formerly compiling workspace) immediately has missing JARs in user libraries in projects. The log file, however (attached) is almost empty. The exception seems to be related to Hyades; I believe this is a left-over from a former attempt to profile something (I profiled, then removed a profiling project generated by Eclipse during profiling from my workspace -- Eclipse must not create projects by itself).\n\nSo, in summary: 2 out of 3 user libraries, in 1 out of 7 projects, in my workspace, all of a sudden lack their JARs. They are all there in the global list of user libraries. And I see no related Java exception in the log file.",
    "Created an attachment (id\u003d60948)\ndebugging log after -clean\n\n(In reply to comment #23)\nI restarted Eclipse using the normal command and with -clean as well. In the case of -clean, a log-file entry in .metadata was created (attached) -- but again only a Hyades-relared exception.\n\nWhen I restart Eclipse and clean/rebuild everything, I get the problem with varying user libraries, i.e., the problem emerges somewhat at random with a given library, but when it appeared, it may heal with a low probability at the next restart/clean/rebuild, but with a high probability if I remove/add the user library to the project. One soon reaches the point where the workspace always fails to rebuild.\n\nIt seems that a user-library only works with a probability of about 95% -- and if you have about 20 or so in your workspace, things start to get impossible...\n",
    "(In reply to comment #23)\n\u003e JARs in user libraries in projects. The log file, however (attached) is almost\n\u003e empty. The exception seems to be related to Hyades; I believe this is a\nFalk, some java/os configurations do not perform as expected as far as stream redirection is concerned, and this seems to be the case with yours. As a workaround, would you please:\n- set you DOS window buffer size to 1000 columns per 9999 lines;\n- run eclipse as:\n  java -jar startup.jar -debug eclipse_jdt_options.txt\n- copy-paste the console contents to a log file?\nThanks again for your cooperation.",
    "Created an attachment (id\u003d60952)\nUser library repository import file\n\n(In reply to comment #24)\n\u003e It seems that a user-library only works with a probability of about 95% -- and\n\u003e if you have about 20 or so in your workspace, things start to get impossible...\n\nHi again. Because after the -debug session experiment, I cannot get my workspace back to compile at all :-( , I have some time to explain in more detail:\n\nOne possible phenotype of the bug (there are others, as unbound classpath container etc. -- but I can describe this one best now) is as follows:\n\n(1) There is at least one user library entry in one project in the workspace, which ALL OF A SUDDEN has no JAR entries anymore if one opens the libraries\u0027 little triangle in the project\u0027s properties\u0027 dialog \"Java Build Path\", \"Libraries\" section.\n\n(2) At this time, the same user library exists in the global properties Java, user Libraries settings. Opening the libraries\u0027 little triangle in this dialog shows ALL JARs -- exactly as it should.\n\n(3) Removing, then adding this user library adds it to the project -- but always with all JAR entries REMOVED! So, adding/removing does not help!\n\n(4) Removing, then building, then restarting, then adding freqently helps, but not always. Restart and restart -clean do not seem to make a difference.\n\n(5) Sometimes, just restarting helps. BUT: Sometimes, a second restart (after the problem seemed to have gone) reproduces the old problem at the EXACT same library -- so somehow, there is a hidden cause which is sticky in a probabilistic manner.\n\n(6) Sometimes, a simple clean/rebuild helps as well. But only if one is desperate enough to do this over and over again because anything else fails anyway :-(\n\n(7) There are no related exceptions in any log file, and user libraries are (now) all local. However, I attach our user library repository file -- maybe you find something special here (it is a generated file).",
    "Can you also attach the JDT/Core workspace preferences file\n\u0027org.eclipse.jdt.core.prefs\u0027 saved in\n.metadata\\.plugins\\org.eclipse.core.runtime\\.settings directory of your\nworkspace?\n\nIt could be interesting to know when this problem occurs if the user library\ncontent is correctly saved in this preferences file...\n\nThanks",
    "(In reply to comment #25)\n\u003e Falk, some java/os configurations do not perform as expected as far as stream\n\u003e redirection is concerned, and this seems to be the case with yours. As a\n\u003e workaround, would you please:\n\u003e - set you DOS window buffer size to 1000 columns per 9999 lines;\n\u003e - run eclipse as:\n\u003e   java -jar startup.jar -debug eclipse_jdt_options.txt\n\u003e - copy-paste the console contents to a log file?\n\u003e Thanks again for your cooperation.\n\nMaxime, you cannot believe the log is almost empty ;-) It is! (And btw, it DOES contain one exception trace) Of course, I catched both stdout AND stderr into the log file (your command line snippet would have missed stderr in ANY opertaing system...). There is no additional console output. My command line was as follows:\n\n$ java -jar startup.jar -debug debug_jdt_options.txt \u003e debug_jdt.log 2\u003e\u00261\n\nusing bash. Thanks for caring. So the question is: How can this go wrong WITHOUT exception in the log?\n\n\n",
    "Falk, can I insist that you try without redirecting the stderr or stdout to any file ? It is impossible that you don\u0027t get any tracing with the content of the eclipse_jdt_options.txt file that Maxime provided you with.",
    "Created an attachment (id\u003d60961)\norg.eclipse.jdt.core.prefs\n\n(In reply to comment #27)\n\u003e Can you also attach the JDT/Core workspace preferences file\n\u003e \u0027org.eclipse.jdt.core.prefs\u0027 saved in\n\u003e .metadata\\.plugins\\org.eclipse.core.runtime\\.settings directory of your\n\u003e workspace?\n\u003e It could be interesting to know when this problem occurs if the user library\n\u003e content is correctly saved in this preferences file...\n\u003e Thanks\n\nSee attachment. According to Windows, this file did not change since yesterday, and today, I had both, compiling and non-compiling, workspaces. So probably, this file is maybe not involved. Also, the global list of user libraries looks ok. It is the project-local list of libraries which gets broken by itself.\n",
    "Created an attachment (id\u003d60963)\nDebug output w/o error\n\n(In reply to comment #29)\n\u003e Falk, can I insist that you try without redirecting\n\nJerome, of course, you can insist. But this did not help. I cross-checked the debug-options file now and it has a download error (right click did not download what I saw on left-clieck :-( I did it again and now I get output (stderr+stdout).\n\nI attach 2 logfile:\n(1) Without error (opening the workspace shows no error).\n(2) With error (Opening and then clean/rebuild shows error).\n\nThe affected user library is \"Ercato Core API\". It should have the following JARs: \"ercapi1.jar\", \"esh.jar\", \"xop.jar\" with various source and javadoc attachments. The affected project is \"_ercatons\".",
    "Created an attachment (id\u003d60965)\nDebug output w error in user library \"Ercato Core API\"\n\n",
    "(In reply to comment #15)\nThis is exactly the behaviour I have had (unfortunately, since I wrote about it, it did not happen again, so I can\u0027t post a logfile or screenshot of it)\n\nMarkus\n\n\u003e (HERE COMES A POSSIBLE HINT WHERE THE PROBLEM MAY EMERGE FROM:)\n\u003e \n\u003e In one of my projects (in the workspace) which stopped building, the\n\u003e corresponding user library did NOT contain any JARs any more (what you see by\n\u003e opening the little triangle next to it). It should have displayed 3 JARs. In\n\u003e the user library listing, when opening the triangle, I see all 3 JARs.\n\u003e Obviously, there are DIFFERENT descriptors for the same user library within\n\u003e Eclipse which can become out of sync. Hard to believe, I know... And then: It\n\u003e does NOT help to drop and add the user library within the project. I had to\n\u003e drop the user library, recompile (with errors, of course), close and RESTART\n\u003e Eclipse, add the user library again and then (now successfulyl) recompile.\n\u003e \n\u003e Obviously, there can be a broken stealth descriptors for a user library within\n\u003e Eclipse which is hard to get rid off (a simple restart -clean does NOT help!).\n\u003e \n\u003e Maybe this observation gets you up and running. I fear there cant be a test\n\u003e case for this bug. However, a simple code review should reveal it as well.\n\u003e \n\n",
    "(In reply to comment #28)\n\u003e Maxime, you cannot believe the log is almost empty ;-) It is! (And btw, it DOES\n\u003e contain one exception trace) Of course, I catched both stdout AND stderr into\n\u003e the log file (your command line snippet would have missed stderr in ANY\n\u003e opertaing system...). There is no additional console output. My command line\n\u003e was as follows:\n\u003e \n\u003e $ java -jar startup.jar -debug debug_jdt_options.txt \u003e debug_jdt.log 2\u003e\u00261\n\u003e \n\u003e using bash. Thanks for caring. So the question is: How can this go wrong\n\u003e WITHOUT exception in the log?\nMmm.... noticed the bug was opened against Windows, and didn\u0027t want to mandate the use of evolved shells... Anyway, I tested the procedure of comment #25 on an XP machine, and it worked (and you got it right to according to your comment #31). This kind of glitches sometimes creep in and poison our lifes ;-) Thanks for your persistence!",
    "(In reply to comment #32)\n\u003e Created an attachment (id\u003d60965) [details]\n\u003e Debug output w error in user library \"Ercato Core API\"\n\u003e \nThanks for the debug log. In what project the user library \"Ercato Core API\" is empty ?",
    "(In reply to comment #35)\n\u003e (In reply to comment #32)\n\u003e \u003e Created an attachment (id\u003d60965) [details] [details]\n\u003e \u003e Debug output w error in user library \"Ercato Core API\"\n\u003e \u003e \n\u003e Thanks for the debug log. In what project the user library \"Ercato Core API\" is\n\u003e empty ?\n\nHi,\nAs I have said in comment #31: The affected project is \"_ercatons\".\n\nI had a look into the log myself. There is only 1 FAILED notice for this library and project, something like (but note that there are many more \"\u003cFake exception\u003e\"):\n--\nThread[Worker-3,5,main] CPContainer INIT - triggering initialization\nThread[Worker-3,5,main] \tproject: _ercatons\nThread[Worker-3,5,main] \tcontainer path: org.eclipse.jdt.USER_LIBRARY/Ercato Core API\nThread[Worker-3,5,main] \tinitializer: org.eclipse.jdt.internal.core.UserLibraryClasspathContainerInitializer@14ad296\nThread[Worker-3,5,main] \tinvocation stack trace:\njava.lang.Exception: \u003cFake exception\u003e\n\tat org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer(JavaModelManager.java:1912)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer(JavaModelManager.java:1267)\n\tat org.eclipse.jdt.core.JavaCore.getClasspathContainer(JavaCore.java:1470)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:2169)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:2073)\n\tat org.eclipse.jdt.core.JavaCore.setClasspathContainer(JavaCore.java:4189)\n\tat org.eclipse.jdt.internal.junit.buildpath.JUnitContainerInitializer.initialize(JUnitContainerInitializer.java:89)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer(JavaModelManager.java:1924)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer(JavaModelManager.java:1267)\n\tat org.eclipse.jdt.core.JavaCore.getClasspathContainer(JavaCore.java:1470)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:2169)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:2073)\n\tat org.eclipse.jdt.core.JavaCore.setClasspathContainer(JavaCore.java:4189)\n\tat org.eclipse.jdt.internal.launching.JREContainerInitializer.initialize(JREContainerInitializer.java:57)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer(JavaModelManager.java:1924)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer(JavaModelManager.java:1267)\n\tat org.eclipse.jdt.core.JavaCore.getClasspathContainer(JavaCore.java:1470)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:2169)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:2073)\n\tat org.eclipse.jdt.internal.core.search.JavaSearchScope.add(JavaSearchScope.java:107)\n\tat org.eclipse.jdt.internal.core.search.JavaWorkspaceScope.initialize(JavaWorkspaceScope.java:84)\n\tat org.eclipse.jdt.internal.core.search.JavaSearchScope.\u003cinit\u003e(JavaSearchScope.java:61)\n\tat org.eclipse.jdt.internal.core.search.JavaSearchScope.\u003cinit\u003e(JavaSearchScope.java:57)\n\tat org.eclipse.jdt.internal.core.search.JavaWorkspaceScope.\u003cinit\u003e(JavaWorkspaceScope.java:29)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.getWorkspaceScope(JavaModelManager.java:1729)\n\tat org.eclipse.jdt.internal.core.search.BasicSearchEngine.createWorkspaceScope(BasicSearchEngine.java:155)\n\tat org.eclipse.jdt.core.search.SearchEngine.createWorkspaceScope(SearchEngine.java:397)\n\tat org.eclipse.jdt.internal.core.SourceType.newSupertypeHierarchy(SourceType.java:699)\n\tat org.eclipse.jdt.internal.core.SourceType.newSupertypeHierarchy(SourceType.java:652)\n\tat org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache.getTypeHierarchy(SuperTypeHierarchyCache.java:120)\n\tat org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache.getTypeHierarchy(SuperTypeHierarchyCache.java:80)\n\tat org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache.getMethodOverrideTester(SuperTypeHierarchyCache.java:89)\n\tat org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:162)\n\tat org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:129)\n\tat org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:261)\n\tat org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:259)\n\tat org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:71)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:843)\n\tat org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:336)\n\tat org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:322)\n\tat org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:338)\n\tat org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:308)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\nThread[Worker-3,5,main] CPContainer INIT - FAILED (initializer did not initialize container)\nThread[Worker-3,5,main] \tproject: _ercatons\nThread[Worker-3,5,main] \tcontainer path: org.eclipse.jdt.USER_LIBRARY/Ercato Core API\nThread[Worker-3,5,main] \tinitializer: org.eclipse.jdt.internal.core.UserLibraryClasspathContainerInitializer@14ad296\n--",
    "Created an attachment (id\u003d61063)\nExpurged trace\n\nThis is an extract of debug_jdt.log as provided in attachment 60965. Original line numbers are provided in column 1 so as to enable post-sync of most interesting parts.",
    "Created an attachment (id\u003d61068)\nscreenshot shows library definition\n\nShows the Library Definition while the library inside the Project(Package Explorer) is empty.",
    "Created an attachment (id\u003d61069)\nScreenshot of PackageExplorer with empty library\n\nShows the Package Explorer with the empty library, while the UserLibrary in the Preferences is still ok (see 61068)",
    "I was able to reproduce it partially today. Attaching two screenshots that show the problem appearing in the UI. The logfile does not contain anything of interest (lot of subclipse related exceptions).\n\nWhen starting up first today, the order of the libraries was:\n1.TopEase\n2.Tools\n3.JRE System\nand it worked (no problems o far)\n\nThen I switched the order to:\n1. JRE System\n2. Tools\n3. TopEase\nand the TopEase Library appeared empty after a restart of eclipse.\n\nAfter that I played around with the order of the libraries, but then it was always ok - it worked again, even with the configuration that did not work before (arrrrrgh)! I have to mention, that I switched of the \"AutoBuild\"-flag to be able to faster restart eclipse, maybe that was the reason that it worked afterwards.\n\nMarkus",
    "Created an attachment (id\u003d61070)\nFocused log\n\nThe attached focused log shows that the failure by Worker-3 to initialize \u0027Ercato Core API\u0027 while Worker-6 is busy initializing \u0027Livis Utils 1\u0027 prevents somehow Worker-6 to consider \u0027Ercato Core API\u0027 after it has finished its work with \u0027Livis Utils 1\u0027.",
    "The failure at index 770 is due to an exception in the initializer call at JavaModelManager#1924. This results into initializeContainer returning null and Worker-3 installing a default container at JavaModelManager#1290. Worker-6 will thereafter pick that one up instead of the real one.\nJ?r?me, what do you think?",
    "(In reply to comment #42)\n\u003e The failure at index 770 is due to an exception in the initializer call at\n\u003e JavaModelManager#1924. \nWhat is the exception ?\n\n",
    "(In reply to comment #42)\n\u003e The failure at index 770 is due to an exception in the initializer call at\n\u003e JavaModelManager#1924. This results into initializeContainer returning null and\n\u003e Worker-3 installing a default container at JavaModelManager#1290. Worker-6 will\n\u003e thereafter pick that one up instead of the real one.\n\u003e J?r?me, what do you think?\n\nHi Jerome and Maxime,\n\nlooks like you are making progress. Great!\nAlso looks like the process of loading user libraries is not thread-safe.\n\nAnd of course: IF loading of user libraries is not thread-safe, how could this pass un-noticed by the tremendous mass of Eclipse users (all toy users?).\n\nHope you can soon find the inner cause even, as should have become clear by now, there won\u0027t be a test case for this.\n\n--\nBTW, question: why are there multiple workers involved at all? Does every project has one worker, or why else?\n\nAnd, proposal: Maybe, the processing of user libraries should be done by a singleton which then could also take care when JARs change on disk (which other IDEs do actually handle fine...). JARs may change outside of Eclipse (e.g., CVS update of a library repository) or may be changed by some builder within the workspace itself (in general).",
    "(In reply to comment #43)\n\u003e (In reply to comment #42)\n\u003e \u003e The failure at index 770 is due to an exception in the initializer call at\n\u003e \u003e JavaModelManager#1924. \n\u003e What is the exception ?\n\u003e \nApologies. There is no exception here (else container would be null). The\ninitializer call must return, merely leaving CONTAINER_INITIALIZATION_IN_PROGRESS in place. Then we return null, visiting the finally block before returning for real. The remainder of the analysis should stand.",
    "OK. Then it looks like the container initialization support is not guilty here, but the UserLibraryClasspathContainerInitializer is. We should add tracing in this initializer (and its related classes) and provide a patch to Falk (and anyone interested in helping to debug this) to find out why the initializer fails to set the container value when asked for.\nMaxime can you please take care of that ?",
    "Digging into the UserLibraryClasspathContainerInitializer, we have identify a potential race condition. Working on a fix. Will provide a patched jdt core plugin to users willing to help with in situ validation.",
    "Created an attachment (id\u003d61253)\nSuggested fix\n\nThis patch, built against R3_2_maintenance stream and currently under test, remedies to the identified race condition by removing extra map allocations. \n\nNote that this cannot be the ultimate patch because UserLibraryManager#internalSetUserLibrary removes the change listener for a period of time, while it performs rebinding. Either the listener is not really needed, and that\u0027s fine (I mean, another mechanism takes care of signalling to JDT that the variable must be refreshed, and the listener is only there to make this happen sooner when possible; we only loose time if a change event occurs while the listener is not in place; this would deserve some explanation in the code anyway). Or, the listener is needed and we have an opportunity to get an inaccurate library if a change occurs while the listener is not active.\n\nThis patch only addresses the problem of the concurrent reset of the user libraries, which I believe to be causing the issue noticed by the users.\nIt is currently under test.\n\nUsers interested in validating the patch on their code please speak up and let me know the best way for me to send you an org.eclipse.jdt.core.jar file (approx. 8Mb).",
    "(In reply to comment #48)\n\n\u003e This patch, built against R3_2_maintenance stream and currently under test,\nTests are happy.\n",
    "Please download patch from http://www.eclipse.org/jdt/core/patches/org.eclipse.jdt.core_3.2.3.z20070319-1111.jar.\n\nOpened separate bug 178027 for the listener-related issue.",
    "Created an attachment (id\u003d61320)\nsimpler fix\n\n",
    "Corresponding .jar file can be retrieved at http://www.eclipse.org/jdt/core/patches/org.eclipse.jdt.core_3.2.3.z20070319-1931.jar",
    "Released for 3.3M6 in HEAD.\nAwaiting for Falk\u0027s feedback to release it in R3_2_maintenance stream.",
    "Verified for 3.3 M6 upon version v_743.\n(Source based verification.)",
    "(In reply to comment #52)\n\u003e Corresponding .jar file can be retrieved at\n\u003e http://www.eclipse.org/jdt/core/patches/org.eclipse.jdt.core_3.2.3.z20070319-1931.jar\n\u003e \n\nWhat do I have to do to include this file/patch into Eclipse?\nJust copying into the pluginfolder does not work. Also the UI of eclipse does not help...\n Markus",
    "(In reply to comment #55)\n\u003e (In reply to comment #52)\n\u003e \u003e Corresponding .jar file can be retrieved at\n\u003e \u003e http://www.eclipse.org/jdt/core/patches/org.eclipse.jdt.core_3.2.3.z20070319-1931.jar\n\u003e \u003e \n\u003e \n\u003e What do I have to do to include this file/patch into Eclipse?\n\n1. Exit Eclipse\n2. Delete the existing org.eclipse.jdt.core_3.2.3.v_686_R32x.jar from the plugins directory\n3. Add org.eclipse.jdt.core_3.2.3.z20070319-1931.jar to this same plugins directory\n4. Restart Eclipse\n",
    "I don\u0027t have a 3.2.3.\nNeither the Autoupdate shows a 3.2.3 release nor the eclipse website.\nThis must be an internal release??\n",
    "(In reply to comment #57)\n\u003e I don\u0027t have a 3.2.3.\n\u003e Neither the Autoupdate shows a 3.2.3 release nor the eclipse website.\n\u003e This must be an internal release??\n\u003e \nDo not matter about 3.2.3 in the jar file name, it\u0027s just the version of the JDT/Core plugin which is \u0027one step beyond\u0027 the Eclipse version one...\nJust take this jar, put it where indicated and this will work :-)\n",
    "Using eclipse 3.3RC2 the problem occurs any more but possibly not as frequently as before and not affecting as many libraries as before.\nMay it have influence that I use not a clean new eclipse but the old configuration files?",
    "Fix backported to R3_2_maintenance. An update for 3.2.x is available at: http://www.eclipse.org/jdt/core/r3.2/index.php#UPDATES"
  ],
  "commentCreationDates": [
    "2006-08-24T07:37:25+02:00",
    "2006-08-24T16:13:17+02:00",
    "2007-02-22T20:19:31+01:00",
    "2007-03-13T11:01:23+01:00",
    "2007-03-13T11:01:31+01:00",
    "2007-03-13T11:14:02+01:00",
    "2007-03-13T11:38:00+01:00",
    "2007-03-13T12:28:48+01:00",
    "2007-03-13T14:11:53+01:00",
    "2007-03-13T16:37:44+01:00",
    "2007-03-13T16:44:59+01:00",
    "2007-03-13T17:14:01+01:00",
    "2007-03-15T08:30:42+01:00",
    "2007-03-15T08:54:45+01:00",
    "2007-03-15T12:41:12+01:00",
    "2007-03-15T12:57:09+01:00",
    "2007-03-15T13:01:19+01:00",
    "2007-03-15T13:01:57+01:00",
    "2007-03-15T13:14:18+01:00",
    "2007-03-15T13:54:27+01:00",
    "2007-03-15T14:32:22+01:00",
    "2007-03-15T14:52:44+01:00",
    "2007-03-15T15:11:37+01:00",
    "2007-03-15T15:23:58+01:00",
    "2007-03-15T15:36:47+01:00",
    "2007-03-15T16:00:25+01:00",
    "2007-03-15T16:03:20+01:00",
    "2007-03-15T16:12:24+01:00",
    "2007-03-15T16:13:51+01:00",
    "2007-03-15T16:18:55+01:00",
    "2007-03-15T16:30:27+01:00",
    "2007-03-15T16:51:22+01:00",
    "2007-03-15T16:52:20+01:00",
    "2007-03-15T17:25:35+01:00",
    "2007-03-15T18:30:48+01:00",
    "2007-03-15T18:31:59+01:00",
    "2007-03-15T19:31:28+01:00",
    "2007-03-16T09:36:08+01:00",
    "2007-03-16T09:45:19+01:00",
    "2007-03-16T09:47:19+01:00",
    "2007-03-16T10:00:25+01:00",
    "2007-03-16T10:03:22+01:00",
    "2007-03-16T10:40:47+01:00",
    "2007-03-16T10:48:55+01:00",
    "2007-03-16T12:57:43+01:00",
    "2007-03-16T13:01:45+01:00",
    "2007-03-16T13:13:54+01:00",
    "2007-03-16T16:20:23+01:00",
    "2007-03-19T08:53:25+01:00",
    "2007-03-19T10:32:40+01:00",
    "2007-03-19T11:27:42+01:00",
    "2007-03-19T19:17:16+01:00",
    "2007-03-19T19:39:24+01:00",
    "2007-03-19T19:41:02+01:00",
    "2007-03-20T06:29:05+01:00",
    "2007-03-21T17:00:34+01:00",
    "2007-03-21T17:07:35+01:00",
    "2007-03-22T10:40:52+01:00",
    "2007-03-22T11:00:19+01:00",
    "2007-05-30T08:47:29+02:00",
    "2007-07-04T18:07:49+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "\u003cFake exception\u003e",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer",
          "source": "JavaModelManager.java:1912"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer",
          "source": "JavaModelManager.java:1267"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.getClasspathContainer",
          "source": "JavaCore.java:1470"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:2169"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:2073"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.setClasspathContainer",
          "source": "JavaCore.java:4189"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.buildpath.JUnitContainerInitializer.initialize",
          "source": "JUnitContainerInitializer.java:89"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer",
          "source": "JavaModelManager.java:1924"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer",
          "source": "JavaModelManager.java:1267"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.getClasspathContainer",
          "source": "JavaCore.java:1470"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:2169"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:2073"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.setClasspathContainer",
          "source": "JavaCore.java:4189"
        },
        {
          "method": "org.eclipse.jdt.internal.launching.JREContainerInitializer.initialize",
          "source": "JREContainerInitializer.java:57"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer",
          "source": "JavaModelManager.java:1924"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer",
          "source": "JavaModelManager.java:1267"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.getClasspathContainer",
          "source": "JavaCore.java:1470"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:2169"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:2073"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchScope.add",
          "source": "JavaSearchScope.java:107"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaWorkspaceScope.initialize",
          "source": "JavaWorkspaceScope.java:84"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchScope.\u003cinit\u003e",
          "source": "JavaSearchScope.java:61"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchScope.\u003cinit\u003e",
          "source": "JavaSearchScope.java:57"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaWorkspaceScope.\u003cinit\u003e",
          "source": "JavaWorkspaceScope.java:29"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.getWorkspaceScope",
          "source": "JavaModelManager.java:1729"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.createWorkspaceScope",
          "source": "BasicSearchEngine.java:155"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.createWorkspaceScope",
          "source": "SearchEngine.java:397"
        },
        {
          "method": "org.eclipse.jdt.internal.core.SourceType.newSupertypeHierarchy",
          "source": "SourceType.java:699"
        },
        {
          "method": "org.eclipse.jdt.internal.core.SourceType.newSupertypeHierarchy",
          "source": "SourceType.java:652"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache.getTypeHierarchy",
          "source": "SuperTypeHierarchyCache.java:120"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache.getTypeHierarchy",
          "source": "SuperTypeHierarchyCache.java:80"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache.getMethodOverrideTester",
          "source": "SuperTypeHierarchyCache.java:89"
        },
        {
          "method": "org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators",
          "source": "OverrideIndicatorLabelDecorator.java:162"
        },
        {
          "method": "org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags",
          "source": "OverrideIndicatorLabelDecorator.java:129"
        },
        {
          "method": "org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate",
          "source": "OverrideIndicatorLabelDecorator.java:261"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate",
          "source": "LightweightDecoratorDefinition.java:259"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run",
          "source": "LightweightDecoratorManager.java:71"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:843"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate",
          "source": "LightweightDecoratorManager.java:336"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations",
          "source": "LightweightDecoratorManager.java:322"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached",
          "source": "DecorationScheduler.java:338"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$1.run",
          "source": "DecorationScheduler.java:308"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 36,
      "bugId": "154984",
      "date": "2007-03-15T19:31:28+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "major"
    }
  ],
  "groupId": "154984",
  "bugId": "154984",
  "date": "2006-08-24T07:37:25+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "major"
}