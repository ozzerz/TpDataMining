{
  "comments": [
    "On Windows98, FontData.setLocale() causes crash of workbench.\nThe following is stack.\n\njava.lang.NegativeArraySizeException: \n       at org.eclipse.swt.internal.win32.TCHAR.toString(TCHAR.java:103)\n       at org.eclipse.swt.graphics.FontData.EnumLocalesProc(FontData.java:348)\n       at org.eclipse.swt.internal.win32.OS.EnumSystemLocalesA(Native Method)\n       at org.eclipse.swt.internal.win32.OS.EnumSystemLocales(OS.java:1259)\n       at org.eclipse.swt.graphics.FontData.setLocale(FontData.java:509)\n\n\nI make a simple sample to reproduce the problem.\n\n\n\n--------------------------------------------------------------------------\nimport org.eclipse.swt.events.PaintEvent;\nimport org.eclipse.swt.events.PaintListener;\nimport org.eclipse.swt.graphics.Font;\nimport org.eclipse.swt.graphics.FontData;\nimport org.eclipse.swt.graphics.GC;\nimport org.eclipse.swt.layout.FillLayout;\nimport org.eclipse.swt.widgets.Canvas;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.swt.widgets.Shell;\n\npublic class Win98Test {\n\tstatic public void main(String[] args) {\n\t\tfinal Display display \u003d new Display();\n\t\tShell shell \u003d new Shell(display);\n\t\tshell.setLayout(new FillLayout());\n\t\tshell.setSize(200, 200);\n\t\tfinal Canvas canvas \u003d new Canvas(shell, 0);\n\t\tcanvas.addPaintListener(new PaintListener() {\n\t\t\tpublic void paintControl(PaintEvent e) {\n\t\t\t\tGC gc \u003d e.gc;\n\t\t\t\tFontData fontdata \u003d new FontData(\"hoge\", \n50, 0);\n\t\t\t\tfontdata.setLocale(\"en_US.ISO8859-1\");\n\t\t\t\tFont font \u003d new Font(display, fontdata);\n\t\t\t\tgc.setFont(font);\n\t\t\t\tgc.drawString(\"hello world\", 10, 20);\n\t\t\t}\n\t\t});\n\t\tshell.open();\n\t\tshell.setVisible(true);\n\t\t\n\t\twhile (!shell.isDisposed()) {\n\t\t\tif (!display.readAndDispatch()) {\n\t\t\t\tdisplay.sleep();\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}",
    "*doh*.",
    "I have not been able to reproduce this problem on any\nmachine. I was wondering if you could gather more\ninformation for me? Are you able to debug the testcase you sent?\nIf so, could you figure out which call to toString(int, int)\nis causing the walkback (there are 4 calls in EnumLocalesProc)\nand what is the value of the size local variable when the walkback\nhappens?\n\nI believe the changes below will fix the problem, but I\nwould like to understand what is happening, before I release\nit.\n\nint EnumLocalesProc(int lpLocaleString) {\n\t\n\t/* Get the locale ID */\n\tint length \u003d 8;\n\tTCHAR buffer \u003d new TCHAR(0, length);\n\tint byteCount \u003d length * TCHAR.sizeof;\n\tOS.MoveMemory(buffer, lpLocaleString, byteCount);\n\tint lcid \u003d Integer.parseInt(buffer.toString(0, buffer.strlen ()), 16);\n\n\t/* Check the language */\n\tint size \u003d OS.GetLocaleInfo(lcid, OS.LOCALE_SISO639LANGNAME, buffer, \nlength);\n\tif (size \u003c\u003d 0 || !lang.equals(buffer.toString(0, size - 1))) return 1;\n\n\t/* Check the country */\n\tif (country !\u003d null) {\n\t\tsize \u003d OS.GetLocaleInfo(lcid, OS.LOCALE_SISO3166CTRYNAME, \nbuffer, length);\n\t\tif (size \u003c\u003d 0 || !country.equals(buffer.toString(0, size - 1))) \nreturn 1;\n\t}\n\n\t/* Get the charset */\n\tsize \u003d OS.GetLocaleInfo(lcid, OS.LOCALE_IDEFAULTANSICODEPAGE, buffer, \nlength);\n\tif (size \u003c\u003d 0) return 1;\n\tint cp \u003d Integer.parseInt(buffer.toString(0, size - 1));\n\tint [] lpCs \u003d new int[8];\n\tOS.TranslateCharsetInfo(cp, lpCs, OS.TCI_SRCCODEPAGE);\n\tdata.lfCharSet \u003d (byte)lpCs[0];\n\n\treturn 0;\n}\n",
    "I think this happens only on DBCS locale (I tested on Japanese locale).\nI have debug environment so I can check which has problem.\nI will report you tomorrow (because I don\u0027t have Win98 machine today).\nThanks.",
    "In EnumLocalesProc(), the first call of OS.GetLocaleInfo() returns 0.\n\nThe following shows variables when the problem occuers.\n\n--------------------------------------------------------\nthis\u003d org.eclipse.swt.graphics.FontData  (id\u003d46)\n country\u003d null\n data\u003d org.eclipse.swt.internal.win32.LOGFONT  (id\u003d57)\n height\u003d 50\n lang\u003d \"en\"\n variant\u003d null\nlpLocaleString\u003d 5764164\nlength\u003d 8\nbuffer\u003d org.eclipse.swt.internal.win32.TCHAR  (id\u003d54)\n byteCount\u003d 8\n bytes\u003d byte[8]  (id\u003d55)\n  [0]\u003d 48\n  [1]\u003d 48\n  [2]\u003d 48\n  [3]\u003d 48\n  [4]\u003d 48\n  [5]\u003d 52\n  [6]\u003d 51\n  [7]\u003d 54\n chars\u003d null\n codePage\u003d 0\nbyteCount\u003d 8\nlcid\u003d 1078\nsize\u003d 0\n------------------------------------------------",
    "If I change locale setting to \"US\", the sample program works fine.\n",
    "I have tried on a Japanese and German machine. No success.\n\nIf the size is 0, the function failed. The function should\nnot fail to get the lang for a locale, unless the locale ID\nis not valid or the buffer size is to small.\n\nPlease could you replace the method below in FontData, run\nthe testcase and post the output here? It is going to show\nthe error code that caused the problems.\n\nThanks!!!\n\nint EnumLocalesProc(int lpLocaleString) {\n\t\n\t/* Get the locale ID */\n\tint length \u003d 8;\n\tTCHAR buffer \u003d new TCHAR(0, length);\n\tint byteCount \u003d length * TCHAR.sizeof;\n\tOS.MoveMemory(buffer, lpLocaleString, byteCount);\n\tint lcid \u003d Integer.parseInt(buffer.toString(0, buffer.strlen ()), 16);\n\n\t/* Check the language */\n\tint size \u003d OS.GetLocaleInfo(lcid, OS.LOCALE_SISO639LANGNAME, buffer, \nlength);\n\tif (size \u003d\u003d 0) System.out.println(\"error lang\u003d\" + OS.GetLastError());\n\tif (size \u003c\u003d 0 || !lang.equals(buffer.toString(0, size - 1))) return 1;\n\n\t/* Check the country */\n\tif (country !\u003d null) {\n\t\tsize \u003d OS.GetLocaleInfo(lcid, OS.LOCALE_SISO3166CTRYNAME, \nbuffer, length);\n\t\tif (size \u003d\u003d 0) System.out.println(\"error country\u003d\" + \nOS.GetLastError());\n\t\tif (size \u003c\u003d 0 || !country.equals(buffer.toString(0, size - 1))) \nreturn 1;\n\t}\n\n\t/* Get the charset */\n\tsize \u003d OS.GetLocaleInfo(lcid, OS.LOCALE_IDEFAULTANSICODEPAGE, buffer, \nlength);\n\tif (size \u003d\u003d 0) System.out.println(\"error code\u003d\" + OS.GetLastError());\n\tif (size \u003c\u003d 0) return 1;\n\tint cp \u003d Integer.parseInt(buffer.toString(0, size - 1));\n\tint [] lpCs \u003d new int[8];\n\tOS.TranslateCharsetInfo(cp, lpCs, OS.TCI_SRCCODEPAGE);\n\tdata.lfCharSet \u003d (byte)lpCs[0];\n\n\treturn 0;\n}",
    "Fixed \u003e 20020910."
  ],
  "commentCreationDates": [
    "2002-07-16T15:58:48+02:00",
    "2002-07-16T17:59:51+02:00",
    "2002-07-16T22:41:03+02:00",
    "2002-07-17T16:22:23+02:00",
    "2002-07-18T10:20:43+02:00",
    "2002-07-18T10:21:28+02:00",
    "2002-07-18T17:09:06+02:00",
    "2002-09-10T22:55:17+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NegativeArraySizeException",
      "message": "",
      "elements": [
        {
          "method": "org.eclipse.swt.internal.win32.TCHAR.toString",
          "source": "TCHAR.java:103"
        },
        {
          "method": "org.eclipse.swt.graphics.FontData.EnumLocalesProc",
          "source": "FontData.java:348"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.EnumSystemLocalesA",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.EnumSystemLocales",
          "source": "OS.java:1259"
        },
        {
          "method": "org.eclipse.swt.graphics.FontData.setLocale",
          "source": "FontData.java:509"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "21620",
      "date": "2002-07-16T15:58:48+02:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "critical"
    }
  ],
  "groupId": "21620",
  "bugId": "21620",
  "date": "2002-07-16T15:58:48+02:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "critical"
}