{
  "comments": [
    "Hello,\n\nI downloaded M4, but I can\u0027t start it. Eclipse throws the following exception:\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Oct 13, 2003 10:44:09.817\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.launcher.Main.basicRun(Main.java:299)\n        at org.eclipse.core.launcher.Main.run(Main.java:765)\n        at org.eclipse.core.launcher.Main.main(Main.java:599)\nCaused by: java.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at\norg.eclipse.core.internal.boot.InternalBootLoader.startup(InternalBootLoader.java:1049)\n        at\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:838)\n        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n        ... 7 more\nCaused by: org.eclipse.core.runtime.CoreException: Unable to create platform\nlock file: /home/mburger/temp/eclipse-workspace/.metadata/.lock.\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.createLockFile(InternalPlatform.java:225)\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.loaderStartup(InternalPlatform.java:677)\n        ... 14 more\n\nThe exception is contained in the .log file.\n\nRegards, Martin",
    "Are you using a 1.4 JVM ?  Use \"java -version\" to find out if not sure.",
    "# java -version\njava version \"1.4.2_01\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_01-b06)\nJava HotSpot(TM) Client VM (build 1.4.2_01-b06, mixed mode)",
    "What OS are you running on? \n\nYou can workaround this problem by preventing the lock file to be created\n(passing -Dorg.eclipse.core.runtime.ignoreLockFile as a VM arg):\n\neclipse -vm \\myvm\\java -vmargs -Dorg.eclipse.core.runtime.ignoreLockFile",
    "I mean, which Linux distro/version are you using?",
    "# uname -a\nLinux XXXX 2.4.21-3-686 #1 Sun Jul 20 16:11:09 EST 2003 i686 GNU/Linux\n\nIt\u0027s a Debian woody system.",
    "It\u0027s possible you\u0027re trying to start eclipse with the workspace pointing to a\nlocation you don\u0027t have write access to?  See the readme included with the build\nfor instructions on running with a multi-user install.  If running with \"-data\",\nit must point to a location that you have write access to.",
    "#./eclipse -data /home/mburger/temp/eclipse-workspace\n\nEclipse M4 failed to start, see exception.\n\n# ls -la /home/mburger/temp/\ndrwxr-xr-x    4 mburger  users        4096 Oct 13 10:44 .\ndrwx--x--x   59 mburger  users        8192 Oct 14 14:11 ..\ndrwxr-xr-x    3 mburger  users        4096 Oct 13 10:44 eclipse-workspace\n\nThe directory \"eclipse-workspace\" was created by Eclipse M4.\n\n# ls -la /home/mburger/temp/eclipse-workspace/\ndrwxr-xr-x    3 mburger  users        4096 Oct 13 10:44 .\ndrwxr-xr-x    4 mburger  users        4096 Oct 13 10:44 ..\ndrwxr-xr-x    2 mburger  users        4096 Oct 13 10:44 .metadata\n\nls -la /home/mburger/temp/eclipse-workspace/.metadata/\ndrwxr-xr-x    2 mburger  users        4096 Oct 13 10:44 .\ndrwxr-xr-x    3 mburger  users        4096 Oct 13 10:44 ..\n-rw-r--r--    1 mburger  users         131 Oct 13 10:44 .cache.properties\n-rw-r--r--    1 mburger  users           0 Oct 13 10:44 .lock\n-rw-r--r--    1 mburger  users        1648 Oct 13 10:44 .log\n\nSo, Eclipse M4 has created:\n\n/home/mburger/temp/eclipse-workspace/\n/home/mburger/temp/eclipse-workspace/.metadata/\n/home/mburger/temp/eclipse-workspace/.metadata/.lock\n\nI think the permissions are OK. Eclipse M4 was able to creat the lock, but then?\n\nRegards, Martin",
    "*** Bug 44871 has been marked as a duplicate of this bug. ***",
    "Upping severity.\n\nI suggest both of you try the workaround described in comment #3.",
    "One problem here is that we are missing the IOException that is generated when\nwe try to acquire the lock. Actually, we feed the exception to the Status object\nwe create when throwing a CoreException. But in the launcher, we log the\nInvocationTargetException, what omits details about the original exception.",
    "Created an attachment (id\u003d6431)\npatched startup.jar \n\nThis startup.jar contains a fix for the problem mentioned in comment 10 above.\nCould you guys replace the startup.jar that comes with M4 with this one and run\nEclipse (*without* specyfing the property for ignoring the lock file)? It is\nlocated in the same directory as the eclipse executable.\n\nThe problem will still happen, but at least we will have a better explanation\nfor what can be causing it. Thanks.",
    "Starting with the new startup.jar\n(https://bugs.eclipse.org/bugs/attachment.cgi?id\u003d6431\u0026action\u003dview):\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Oct 16, 2003 09:48:45.807\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at\norg.eclipse.core.internal.boot.InternalBootLoader.startup(InternalBootLoader.java:1049)\n        at\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:838)\n        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.launcher.Main.basicRun(Unknown Source)\n        at org.eclipse.core.launcher.Main.run(Unknown Source)\n        at org.eclipse.core.launcher.Main.main(Unknown Source)\nCaused by: org.eclipse.core.runtime.CoreException: Unable to create platform\nlock file: /home/mburger/temp/eclipse-workspace/.metadata/.lock.\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.createLockFile(InternalPlatform.java:225)\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.loaderStartup(InternalPlatform.java:677)\n        ... 14 more\n",
    "This stack trace shows that in InternalBootLoader we also wrap the exception\ngenerated by the IPlatformRunnable\u0027s run method into a\nInvocationTargetException, thus the original IOException is still hidden.",
    "Luckily, the boot loader prints the original stack trace to the console when\nthat happens.\n\nMartin, you are launching Eclipse from KDE or Gnome, right? Could you run again\nbut from a shell? That should allow you to see the original stack trace being\ndumped to the terminal window.\n\n./eclipse -vm \u003cJAVA_HOME\u003e/jre/java -data ~/temp/eclipse-workspace\n\nThanks again.",
    "Sorry, but Eclipse does not print a stacktrace to the console, it writes to the\n.log:\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Oct 16, 2003 17:16:15.274\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at\norg.eclipse.core.internal.boot.InternalBootLoader.startup(InternalBootLoader.java:1049)\n        at\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:838)\n        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.launcher.Main.basicRun(Unknown Source)\n        at org.eclipse.core.launcher.Main.run(Unknown Source)\n        at org.eclipse.core.launcher.Main.main(Unknown Source)\nCaused by: org.eclipse.core.runtime.CoreException: Unable to create platform\nlock file: /home/mburger/temp/eclipse-workspace/.metadata/.lock.\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.createLockFile(InternalPlatform.java:225)\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.loaderStartup(InternalPlatform.java:677)\n        ... 14 more\n",
    "Created an attachment (id\u003d6453)\npatched boot.jar\n\nI fixed the BootLoader to always throw the nested exception instead of\nInvocationTargetExceptions. Martin, could you try to run with this version of\norg.eclipse.core.boot plugin JAR (just attached)? The location of the boot.jar\nis:\n\n\u003ceclipse_install\u003e/plugins/org.eclipse.core.boot_3.0.0/boot.jar\n\nThis should cause the original IOException to be properly logged (inside a\nCoreException).",
    "The are \"No locks available\". Perhaps because /home is mounted via nfs? I\nstarted Eclipse without a window manager, so I hope the exception is not\naffected by any side effects (I got \"Error: Can\u0027t open display: someserver:0.0\").\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Oct 16, 2003 21:24:03.863\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\norg.eclipse.core.runtime.CoreException[5]: java.io.IOException: No locks available\n        at sun.nio.ch.FileChannelImpl.lock0(Native Method)\n        at sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:788)\n        at java.nio.channels.FileChannel.tryLock(FileChannel.java:967)\n        at\norg.eclipse.core.internal.runtime.PlatformMetaAreaLock.acquire(PlatformMetaAreaLock.java:27)\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.createLockFile(InternalPlatform.java:219)\n        at\norg.eclipse.core.internal.runtime.InternalPlatform.loaderStartup(InternalPlatform.java:677)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.internal.boot.InternalBootLoader.startup(Unknown Source)\n        at org.eclipse.core.internal.boot.InternalBootLoader.run(Unknown Source)\n        at org.eclipse.core.boot.BootLoader.run(Unknown Source)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.launcher.Main.basicRun(Unknown Source)\n        at org.eclipse.core.launcher.Main.run(Unknown Source)\n        at org.eclipse.core.launcher.Main.main(Unknown Source)\n",
    "Searching the web, I found this:\n\nhttp://www.uwsg.iu.edu/hypermail/linux/kernel/9906.3/0640.html\n\nIt is likely a setup issue with NFS. If you cannot fix it, we suggest to \nspecify the property mentioned above. The best we can do is to improve the \nerror messages logged (see bug 45607).\n\nThanks for helping tracking this down. Closing as invalid.",
    "OK, starting from the machine (ssh -X nameOfMachine and so on) serving the nfs\nexport, then it works fine, so it\u0027s a problem with nfs.\n\nRegards, Martin",
    "Just to be clear: it works with NFS, provided your NFS configuration allows file\nlocking (it works in my setup).",
    "Actually, the bug mentioned in comment 18 is bug 45067.",
    "*** Bug 44487 has been marked as a duplicate of this bug. ***",
    "NOTE:  This happens in SUSE Linux but not Red Hat.  Another reason to use Red \nHat!",
    "Steve\u0027s Suse box surprisingly has lockd running. Asking for help from Infra to\nbetter understand the issue.",
    "*** Bug 46603 has been marked as a duplicate of this bug. ***",
    "Reopening to investigate cases where this happens even if the client seems to be\nproperly configured.\n\nA test case in bug 44487 comment allows one to easily verify whether file\nlocking on a NFS based location is working or not.\n\nAs a reminder, there is an workaround described in comment 3.",
    "The workaround described in comment #3 works.\n\nHowever I think it would be better to solve the problem rather than work around\nit. Here are some starting points:\n\n- SuSE 8.2 but running on standard (non-SuSE) kernel 2.4.22\n- Java 1.4.2-b28\n- NFS v3\n\nasterix:/home/axel # cat /proc/mounts\n[...]\ngate:/home/axel /home/axel nfs\nrw,v3,rsize\u003d8192,wsize\u003d8192,soft,intr,udp,lock,addr\u003dgate 0 0\n\nI\u0027m getting the same error logged as in comment #1. Opposite to the log entry \nthe lock file is created. From this it should be obvious that this is not an\nissue of file permissions.\n\nThe problem occurs, when Eclipse is started from KDE but also if you start it\nfrom a shell like this:\n\naxel@asterix:/apps/eclipse\u003e ./eclipse -data /pub/tmp\n\nAs soon as the workspace is located on a NFS drive, Eclipse won\u0027t start.\n\nI would be glad to help to sort out this problem :-)\n",
    "As a note, I\u0027m getting the same problem, but without using an NFS mount.  I\u0027m\nusing kernel 2.4.22, with my mounted drive looking like:\n\n    /dev/volume1/HomeDirectories on /home type ext3 (rw,nosuid,nodev,noatime)\n\nThis is an ext3 partition mounted via LVM.  Setting it to be rw,suid,dev,atime\ndoes not change the results.\n",
    "*** Bug 46548 has been marked as a duplicate of this bug. ***",
    "*** Bug 47777 has been marked as a duplicate of this bug. ***",
    "Hi, I am new to Eclipse and had this problem when trying to run 3.0M5 with my \nworkspace located on an exported NFS /home directory on SuSE 9.0.  The problem \nis not exactly SuSE. It\u0027s more a combination of which NFS server you choose to \nrun (userspace vs. kernel) and making sure lockd and statd are running on both \nthe client and the server. \n \nWith the SuSE distribution there are two different (conflicting) NFS rpms \navailable to install:  nfs-server-XXX.rpm (which contains the userspace NFS \nserver), and the nfs-utils-XXX.rpm (which contains the kernel NFS server). \nLocking is not available in the userspace NFS server, so you need to uninstall \nnfs-server-XXX.rpm and install nfs-utils-XXX.rpm instead. \n \nThat may not fix everything however. Statd may not be started on the NFS \nclient automatically. Running the following line fixed it for me: \n \n# rcnfslock start \n \nHope this helps with the NFS part of the bug anyway. \n \n--Peter \n \n \n ",
    "*** Bug 50612 has been marked as a duplicate of this bug. ***",
    "*** Bug 50847 has been marked as a duplicate of this bug. ***",
    "*** Bug 54526 has been marked as a duplicate of this bug. ***",
    "*** Bug 55835 has been marked as a duplicate of this bug. ***",
    "The interesting thing about bug 55835 (on a Netware-based remote file system) is\nthat no I/O exception was thrown. FileChannel.tryLock just returned false, which\nwe (correctly) interpret as a lock that has already been acquired by other process.",
    "The option for lock support has changed (bug #55744)\nThe org.eclipse.core.runtime.ignoreLockFile vmarg is now replaced by osgi.locking.\nThis new property supports three values\n- none\n- java.io\n- java.nio\n\nIf is picked but is not available it is defaulted to java.io.",
    "When trying to start Eclipse 3.0 M8 i get Error in runtime; workspace cannot be \nset. Exiting.\nThe workspace is set to a network drive on Novell Netware 6. Using Windows 2000 \nAdvanced Server SP4 with Novell Client 4.90 SP1a, J2SDK build 1.4.2_01-b06, \nEclipse 3.0 M8 Build id: 200403261517\n\n-vmargs -Dorg.eclipse.core.runtime.ignoreLockFile fixes the problem.",
    "Marking as wontfix since there isn\u0027t anything that we can do.\n\nSome file-systems and VMs just won\u0027t let us do locking properly. (for instance\nthe HP-UX case)\n\nPeople who are having problems with a \"non-standard\" file-system and locking\nshould ensure that no other users are currently running that workspace and then\nrun with the System property to bypass the locking mechanism.\n\nWill add to README.",
    "See bug 55744 comment 7 for the work-around. The default is to try java.nio\nlocking if you are using a 1.4 VM.\n",
    "*** Bug 58280 has been marked as a duplicate of this bug. ***",
    "*** Bug 59517 has been marked as a duplicate of this bug. ***",
    "\u003eMarking as wontfix since there isn\u0027t anything that we can do.\n\u003e\n\u003eSome file-systems and VMs just won\u0027t let us do locking properly. (for instance\n\u003ethe HP-UX case)\n\u003e\n\u003ePeople who are having problems with a \"non-standard\" file-system and locking\n\u003eshould ensure that no other users are currently running that workspace and then\n\u003erun with the System property to bypass the locking mechanism.\n\u003e\n\u003eWill add to README.\n\nJudging from the number of times people are running into this (and judging\nfrom the number of ways in particular a Linux-for-the-masses box may be \nconfigured) I wonder if the README and the command-line switch is the right\napproach.  Furthermore, we can remind the user to read the README before\ncalling the support hotline.\n\nDoes something like the following work?\n1. Catch the condition where lock is failing\n(Ideally separate that from the condition where the lock mechanism works \nbut the workspace is actually locked.  I have merged the two conditions\nbelow.)\n2. Pop up a dialog:\nThe specified workspace is in use or cannot be locked.\n[Choose another workspace (default)] [Unlock] [Disable Lock]\n3. If the user clicks on \"Unlock\",  try to manually remove\nthe lockfile, then retry locking it.  If this fails, return to #2.\n4. If the user clicks on \"Disable Lock\", they get a\nconfirmation dialog:\n\"Are you sure?  Locking the workspace is recommended in\nenvironments that support it, and you may be able to reconfigure\nyour environment.  Click Exit and review the README for advice\non enabling locks in your environment.\"\n[OK] [Exit (the default)]\n5. If the user clicks on \"OK\", Eclipse behaves as if the\n\"ignoreLockFile\" arg was specified.\n",
    "Please open a feature request against Platform/UI with your comments above.",
    "Bug 59780 raised to enhance recovery from this condition.\n",
    "*** Bug 61200 has been marked as a duplicate of this bug. ***",
    "These are related bugs from Sun\u0027s bug database (login required):\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4673298\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4948095",
    "*** Bug 69238 has been marked as a duplicate of this bug. ***",
    "*** Bug 46548 has been marked as a duplicate of this bug. ***",
    "*** Bug 70458 has been marked as a duplicate of this bug. ***",
    "I had the same problem with the home directory exported through nfs, and after \nsome research I found that the bug was not on eclipse nor nfs (on my pc), but in \nthe remote machine configuration.\n\nTo solve this, I found the lockd was running but statd was not, and this statd \nis not automatically started by the kernel. So, I used the RPC portmapper\u0027s \n\"rpc.statd\" and \"rpc.lockd\" (both of them wont start if rpc.portmap is not \nstarted and the \"rpc.lockd\" wont start if lockd is already started), and after \nthat the system is running fine.\n\nThis solution was applied on a Intel P4 PC, everything is onboard and from intel \n(what is obvius, its a intel motherboard), using Slackware 10 as server and as \nclient.",
    "*** Bug 69212 has been marked as a duplicate of this bug. ***",
    "I\u0027m having the problems that the original poster had with regards to file locking. Setting the following \noption in my config.ini file fixes the problem:\n\nosgi.locking \u003d java.io \n\n\nHowever, since I also do plug-in development I also launch another instance of Eclipse within Eclipse to \ntest my plug-ins and this bug reoccurs! It\u0027s as if the config.ini settings are being ignored! \n\nAny ideas? Should I open a new bug? \n\nThanks.   ",
    "The second instance you run from inside Eclipse does not use the config.ini from\nyour install. To avoid the problem here you have to set the property again using\nthe VM arguments section in the corresponding launch configuration:\n\n-Dosgi.locking\u003dnone (or java.io, if you are on Windows)",
    "*** Bug 82051 has been marked as a duplicate of this bug. ***",
    "*** Bug 82201 has been marked as a duplicate of this bug. ***",
    "*** Bug 84106 has been marked as a duplicate of this bug. ***",
    "*** Bug 85522 has been marked as a duplicate of this bug. ***",
    "related note: osgi.locking \u003d java.io is also the remedy\nfor the many many people experiencing hotspot crashes,\nespecially on linux.\nmaybe nio is not the best default for current sun JVMs...\n",
    "*** Bug 87059 has been marked as a duplicate of this bug. ***",
    "*** Bug 93312 has been marked as a duplicate of this bug. ***",
    "*** Bug 94235 has been marked as a duplicate of this bug. ***",
    "*** Bug 93919 has been marked as a duplicate of this bug. ***",
    "Hello, I just want to add some comments. I just came from searching after the Eclipse error message. Unfortunately my documents are in a network drive which I do not control and I needed to put my eclipse workspace files there. One workaround that might be useful for some people (it is what I did) is:\n\n1. create the workspace folder in the networked directory (say ~/workspace)\n2. Create the metadata directory in the /tmp or any other writable dir on the current machine (say /tmp/metadataEclipse )\n3. Create a symbolic link called .metada to the metadata folder (say ln -s /tmp/metadataEclipse ~/workspace/.metadata )\n\nNow you can use Eclipse saving your projects on your networking files (the reason I do that is that the networking storage is backed up automatically).\n\nCheers,\nxtracto",
    "*** Bug 133284 has been marked as a duplicate of this bug. ***",
    "Let me try to bring some light into the problem of \"workspace and configuration area locks\".\n\nWe (at Verigy) are facing similar problems as described in comment 17.\n\nAt the end of this comment I would propose all-platform valid, working workaround solution for Eclipse 3.*, based on our findings. To understand this solution, here is \"the full story\" about Java and NFS file locks on Linux.\n\nAccording to our investigation, the problem seems to be specific for 2.4 32-bit Linux kernel on client and 64 bit NFS server (HPUX in our case). \n - We see the problem while running JDK 1.5.0_12 on RHEL3U7 32bit (2.4.21-52 kernel), I assume it will show on a lot of different Linux-versions with 2.4-kernel in 32bit.\n-  The problem does NOT show on the 64bit version of RHEL3 client (2.4.21-40).\n-  The problem does NOT show on the 32/64bit version of RHEL5 client (2.6.18-8)\n\nWe have written demo programs to proof that the problem is the way how Java creates locks on Linux.\n\n################\nJava program to verify if the problem exists. It fails if lock could not be created\n################\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.channels.FileLock;\n\n/**\n * Start with: java TestLock_nio %lock_path_to_test%\n */\npublic class TestLock_nio {\n\n    public static void main(String[] args) throws Exception {\n        File lockFile \u003d new File(args[0]);\n        if (!lockFile.exists()) {\n            lockFile.createNewFile();\n        }\n        boolean lock \u003d lock(lockFile);\n        if (!lock) {\n            System.err.println(\"Could not create file lock: \" + lockFile);\n        } else {\n            System.out.println(\"File lock created: \" + lockFile + \", press any key to quit\");\n            System.in.read();\n        }\n    }\n\n    /**\n     * see org.eclipse.core.runtime.internal.adaptor.Locker_JavaNio,\n     * org.eclipse.update.internal.configurator.Locker_JavaNio\n     */\n    public static boolean lock(File lockFile) throws IOException {\n        RandomAccessFile raFile \u003d new RandomAccessFile(lockFile, \"rw\");\n        try {\n            FileLock fileLock \u003d raFile.getChannel().tryLock();\n            if (fileLock !\u003d null) {\n            \treturn true;\n            }\n        } finally {\n            raFile.close();\n        }\n        return false;\n    }\n}\n\n################\n\"bad\" C program which mimics the way how Java creates file locks\n################\n/**************** lockdemo.c *********************/\n/*\nTo compile:cc lockdemo.c -o lockdemo\nTry to establish a second lock, whilst the program is already holding a lock over the nfs share.\nIf it hangs, then the lock has basically worked.  Any other behavior would be abnormal.\nTo fix the program, must compile with  -D_LARGEFILE64_SOURCE option AND use right flock64 struct\n*/\n    #include \u003cstdio.h\u003e\n    #include \u003cstdlib.h\u003e\n    #include \u003cerrno.h\u003e\n    #include \u003cfcntl.h\u003e\n    #include \u003cunistd.h\u003e\n\n    int main(int argc, char *argv[])  {\n                         /* l_type   l_whence  l_start  l_len  l_pid   */\n        struct flock fl \u003d { F_WRLCK, SEEK_SET, 0,       0,     0 };  // \u003c---- problem!!! should be flock64 !!!\n        int fd;\n \n        fl.l_pid \u003d getpid();\n \n        if (argc \u003e 1)\n                fl.l_type \u003d F_WRLCK;\n \n        if ((fd \u003d open(\"lockdemo.c\", O_RDWR)) \u003d\u003d -1) {\n                perror(\"open\");\n                exit(1);\n        }\n \n        printf(\"Press \u003cRETURN\u003e to try to get lock: \");\n        getchar();\n        printf(\"Trying to get lock...\");\n \n        if (fcntl(fd, F_SETLKW64, \u0026fl) \u003d\u003d -1) {\n                perror(\"fcntl\");\n                exit(1);\n        }\n \n        printf(\"got lock\\n\");\n        printf(\"Press \u003cRETURN\u003e to release lock: \");\n        getchar();\n \n        fl.l_type \u003d F_UNLCK;  /* set to unlock same region */\n \n        if (fcntl(fd, F_SETLK, \u0026fl) \u003d\u003d -1) {\n                perror(\"fcntl\");\n                exit(1);\n        }\n \n        printf(\"Unlocked.\\n\");\n \n        close(fd);\n    }\n \n/****** END *************/\n\nNow call \n\nstrace -dffF -o /tmp/lockdemo.strace  lockdemo \nand check this line:\nfcntl64(3, F_SETLKW64, {type\u003dF_WRLCK, whence\u003dSEEK_SET, start\u003d0, len\u003d62663504129177486}, 0xbfff9330) \u003d -1 ENOLCK (No locks available)\n\nThis length is above the maximum size supported by HPUX !!!\n\nThis would have been fixed by using the correct flock64 and  correct flag on the compile of the program \nChanging the flock call to:  struct flock64 fl \u003d { F_WRLCK, SEEK_SET, 0, 0, 0 };\nand compiling with D_LARGEFILE64_SOURCE flag fixes the problem:\n\ngcc -D_LARGEFILE64_SOURCE  lockdemo.c -o lockdemo\n\nThe program now executes correct:\n$ lockdemo\nPress \u003cRETURN\u003e to try to get lock: \nTrying to get lock...got lock \nPress \u003cRETURN\u003e to release lock: \nUnlocked.\n\nand we see this:\n\nfcntl64(3, F_SETLKW64, {type\u003dF_WRLCK, whence\u003dSEEK_SET, start\u003d0, len\u003d0}, 0xbfffdbf0) \u003d 0\n\nInterestingly, the previous program didn\u0027t fail on 64 bit client/server because it is below maxfilesize:\n\nfcntl64(3, F_SETLKW64, {type\u003dF_WRLCK, whence\u003dSEEK_SET, start\u003d0, len\u003d12884931517}, 0xbf8839bc) \u003d 0 \n\nbut still the call is not correct: locking on the 64 bit client and server works, but the length should be \"0\". This again can be achieved by setting the correct flock structure and the correct compile options as shown above.\n\nConclusion: \nFor 32bit Linux OS client to lock at file using the 64bit calls the program needs to use the correct structure: struct flock64   and the program must be compiled with the option \" -D_LARGEFILE64_SOURCE\".\n\nAll 64bit Linux OS will not need to be compiled with that option unless the program is using structure: struct flock64 the default: struct flock  will lock just fine.\n\nThis is not an HPUX nfs problem - it will always fail when flock for length is larger than the maximum supported file size in HPUX and we know is not initialized correctly on 32bit system when calling fcntl64 with the incorrect structure defined in the program and when compiling on 32bit we must use \"-D_LARGEFILE64_SOURCE\".\n\nThere was many similar bugs, like \nhttp://bugs.sun.com/view_bug.do?bug_id\u003d4673298 (open)\nhttp://bugs.sun.com/view_bug.do?bug_id\u003d4762735 (open)\nhttp://bugs.sun.com/view_bug.do?bug_id\u003d4948095 (closed, not fixed)\nhttp://bugs.sun.com/view_bug.do?bug_id\u003d6174126 (closed, not fixed)\n\nAccording to the Sun engineers, which are currently looking closer on this problem:\n\n\"FileChannel.lock() fails when the NFS server is a 64bit HPUX. The issue has been reported in #6628575\".\n\"Yes, we need to examine this issue for jdk7. As there is a potential compatibility issue it is unlikely that this can be fixed in a 5.0 or 6.0 update.\"\n\nIt means, that this could take time to fix it in the JDK...\n\nBut here is the simple program which demonstrates the current state and how easy we could fix it for Eclipse (this workaround is proposed by Sun engineer): all what we need is just replace \n\nfileLock \u003d raf.getChannel().tryLock();\n\nwith \n\nFileChannel fc \u003d raf.getChannel();\nfileLock \u003d channel.tryLock(0, fc.size(), false);\n\nin *two* places: org.eclipse.core.runtime.internal.adaptor.Locker_JavaNio (for the workspace locking issue) and org.eclipse.update.internal.configurator.Locker_JavaNio (for the configuration area locking issue)\n\n##############\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\n\n/**\n * Start with: java TestLock2 %lock_path_to_test%\n * @see org.eclipse.core.runtime.internal.adaptor.Locker_JavaNio\n * @see org.eclipse.update.internal.configurator.Locker_JavaNio\n * @author aloskuto\n */\npublic class TestLock2 {\n    public static void main(String[] args) throws Exception {\n        File lockFile \u003d new File(args[0]);\n        if (!lockFile.exists()) {\n            lockFile.createNewFile();\n        }\n        boolean lock \u003d lock(lockFile);\n        if (!lock) {\n            System.err.println(\"Couldn\u0027t create file lock using NIO: \" + lockFile);\n        } else {\n            System.out.println(\"Created file lock using using NIO: \" + lockFile);\n        }\n\n        lock \u003d lockFixed(lockFile);\n        if (!lock) {\n            System.err.println(\"Couldn\u0027t create file lock using fixed NIO: \" + lockFile);\n        } else {\n            System.out.println(\"Created file lock using fixed NIO: \" + lockFile);\n        }\n    }\n\n    /**\n     * \u003cb\u003efixed\u003c/b\u003e locking, basically the same as used by\n     * 2 existing Locker_JavaNio implementations in Eclipse\n     */\n    public static boolean lockFixed(File lockFile) throws IOException {\n        RandomAccessFile raFile \u003d new RandomAccessFile(lockFile, \"rw\");\n        FileLock fileLock \u003d null;\n        try {\n            FileChannel channel \u003d raFile.getChannel();\n            fileLock \u003d channel.tryLock(0, channel.size(), false);\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n            return false;\n        } finally {\n            if(fileLock !\u003d null) {\n                fileLock.release();\n            }\n            raFile.close();\n        }\n        if (fileLock !\u003d null) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * similar to 2 existing Locker_JavaNio implementations in Eclipse\n     */\n    public static boolean lock(File lockFile) throws IOException {\n        RandomAccessFile raFile \u003d new RandomAccessFile(lockFile, \"rw\");\n        FileLock fileLock \u003d null;\n        try {\n            fileLock \u003d raFile.getChannel().tryLock();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n            return false;\n        } finally {\n            if(fileLock !\u003d null) {\n                fileLock.release();\n            }\n            raFile.close();\n        }\n        if (fileLock !\u003d null) {\n            return true;\n        }\n        return false;\n    }\n}\n\nI\u0027ve tested this small program with Sun JDK 1.5.0_12 on Windows, (good) Linux without NFS problem and (bad one) with described NFS problem. The \"fixed\" part of the program works in all 3 environments, the \"old\" one fails as expected on \"bad\" Linux client.\n\nCould you please now reopen \u0026 fix this bug, as the working solution exists?\n\nI hope we could see the proposed fix for both Locker_JavaNio\u0027s classes in the 3.3.2 and 3.4.\n\nRegards,\nAndrei Loskutov",
    "Just for the record, here is the (now public) sun bug: \nhttp://bugs.sun.com/view_bug.do?bug_id\u003d6628575\n",
    "Created an attachment (id\u003d83850)\nPatch for org.eclipse.core.runtime.internal.adaptor.Locker_JavaNio\n\nadaptor.Locker_JavaNio patch against 1.6 version (3.3.1.1)",
    "Created an attachment (id\u003d83851)\n2nd patch for org.eclipse.core.runtime.internal.adaptor.Locker_JavaNio\n\nadaptor.Locker_JavaNio patch against 1.6 version (3.3.1.1), *including* the change in 1.7 version",
    "Created an attachment (id\u003d83852)\nPatch for org.eclipse.update.internal.configurator.Locker_JavaNio\n\nconfigurator.Locker_JavaNio patch against 1.6 version (3.3.1.1)",
    "Is there anybody from Platform-Resources team who may reopen this bug and apply the patches above to the 3.3.* and 3.4 streams???\n\nAt least a comment on this???\n\nCurrently we are patching Eclipse jar\u0027s in 3.2 and 3.3 versions, but our hope is that it would be fixed some days by Eclipse itself...",
    "Reopening",
    "Tom, see comment #66. Not sure if you\u0027re already aware of this...",
    "(In reply to comment #73)\n\u003e Tom, see comment #66. Not sure if you\u0027re already aware of this...\n\u003e \nSorry, I did not see this bug until it was reassigned to Equinox.  Thanks for all the hard work and great explanation Andrei.  I will review the fix and hopefully release it for 3.4 M4.  I opened a separate bug 211060 to release the fix to update.\n",
    "Any chance to get the fix into the 3.3.1+ (3.3.2) stream?",
    "Created an attachment (id\u003d83862)\nupdate patch against HEAD\n\nUpdated patch for org.eclipse.osgi against HEAD.  Andrei, I added your name to the copyright statement for the fix.  Is this ok with you?",
    "Yes, thank you. \n\n\"head\" means it would be in 3.4, but what is about 3.3.2? ",
    "Created an attachment (id\u003d83875)\npatch to use non-zero length file for the lock\n\n(In reply to comment #77)\n\u003e \"head\" means it would be in 3.4, but what is about 3.3.2? \n\u003e \n\nWell, right now we are just evaluating the fix.  That is done in HEAD (3.4).  If it turns out to be a good fix and deemed critical for a point release then we will consider releasing for 3.3.2.\n\nUnfortunately I found issues with the fix.  It causes the org.eclipse.osgi.tests to fail the LocationAreaSessionTests on Windows.  It appears that the fix does not really lock the file if the file length \u003d\u003d 0.  The tryLock(0, 0, false) call will always succeed and return a FileLock object no matter what (at least on win32 XP).  Also with the fix I am able to open two instances of Eclispe to the same workspace, which indicates that the locking did not really work.  I modified the patch to ensure the lock file is at least 1 byte in length.  This is just a hack to illustrate the problem and potential fix.  We may need to find a better place to put the code to write a single byte to the lock file.\n\nAndrei, can you test this fix out in your environment?",
    "Created an attachment (id\u003d84020)\npatch to lock the first byte only\n\nAccording to the javadoc for tryLock(long, long, boolean) the region specified by the position and size parameters need not be contained within, or even overlap, the actual underlying file.\n\nThis means we should be able to simply use the call: \n\nfileLock \u003d fc.tryLock(0, 1, false);\n\nWe never write to the lock file anyway so just locking the first byte should be ok, even though there are no bytes in the underlying lock file.\n\nAndrei, please give this latest patch a try.  I tested it on Win32 XP.",
    "Thomas,\n\nI\u0027ve tested \"fc.tryLock(0, 1, false)\"\n \nwith Sun 1.5 VM:\n\njava version \"1.5.0_12\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_12-b04)\nJava HotSpot(TM) Client VM (build 1.5.0_12-b04, mixed mode, sharing)\n\nand also with IBM 1.5 VM:\n\nJava(TM) 2 Runtime Environment, Standard Edition (build pxi32dev-20070201 (SR4))\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Linux x86-32 j9vmxi3223-20070201 (JIT enabled)\nJ9VM - 20070131_11312_lHdSMR\nJIT  - 20070109_1805ifx1_r8\nGC   - 200701_09)\nJCL  - 20070126\n\nin both cases it works in my \"bad\" Linux environment (lock is created and the second Eclipse could not be opened on same workspace). \n\nI\u0027m wondering why the fc.tryLock(0, 0, false) was not working on Windows or why it was working on Linux...\n",
    "Created an attachment (id\u003d84086)\nreleased 3.4 patch\n\nI have released this final patch into HEAD for 3.4 (M4).  I will leave this defect open for 3.3.2 consideration.  This patch is identical with the last one except it  removes the local FileChannel vars since we don\u0027t need to get the size anymore.\n\n(In reply to comment #80)\n\u003e I\u0027m wondering why the fc.tryLock(0, 0, false) was not working on Windows or why\n\u003e it was working on Linux...\n\u003e \n\nYeah, I wandered that also.  My guess is that on windows it assumes that if position + size \u003d\u003d 0 then there is really no physical region of the file that you are locking so there is no way to fail the lock.  But I don\u0027t know if that is a valid assumption or if there is a possible bug in the Windows or Linux VMs.\n\nI tested the behavior on Sun 1.4.2, 1.5, 1.6 and IBM 1.4.2, 1.5 on Windows XP.  All had the same behavior; tryLock(0, 0, false) always returned a FileLock even if another process held the lock.\n",
    "Created an attachment (id\u003d84230)\n3.3.x patch\n\nHere is the 3.3.x patch.",
    "(From update of attachment 83852)\nWill attach new update.configurator patch to bug 211060 ",
    "Jeff, do you approve for 3.3.2?\n\nJohn, can you give the 3.3.2 patch a review?",
    "Yes, fix looks good. Adding the \"greatbug\" keyword to acknowledge the excellent analysis and fix proposal from Andrei (comment #66). If only all bug reports came in with such detail...",
    "Patch released to 3.3.2.",
    "*** Bug 128967 has been marked as a duplicate of this bug. ***",
    "*** Bug 167152 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2003-10-13T10:54:41+02:00",
    "2003-10-14T12:37:21+02:00",
    "2003-10-14T13:34:27+02:00",
    "2003-10-14T16:13:22+02:00",
    "2003-10-14T16:14:19+02:00",
    "2003-10-14T16:22:21+02:00",
    "2003-10-14T18:05:56+02:00",
    "2003-10-14T23:58:49+02:00",
    "2003-10-15T16:16:32+02:00",
    "2003-10-15T16:17:56+02:00",
    "2003-10-15T16:48:38+02:00",
    "2003-10-15T17:39:57+02:00",
    "2003-10-16T09:55:44+02:00",
    "2003-10-16T15:20:11+02:00",
    "2003-10-16T15:54:13+02:00",
    "2003-10-16T17:24:40+02:00",
    "2003-10-16T21:20:33+02:00",
    "2003-10-16T21:36:05+02:00",
    "2003-10-17T02:25:36+02:00",
    "2003-10-17T15:43:28+02:00",
    "2003-10-17T15:46:47+02:00",
    "2003-10-21T19:52:47+02:00",
    "2003-10-23T15:42:21+02:00",
    "2003-10-28T20:33:11+01:00",
    "2003-10-29T15:18:25+01:00",
    "2003-11-13T18:38:38+01:00",
    "2003-11-13T18:41:55+01:00",
    "2003-11-13T19:53:30+01:00",
    "2003-11-14T16:39:42+01:00",
    "2003-11-17T15:46:15+01:00",
    "2003-12-04T17:43:46+01:00",
    "2003-12-18T07:08:56+01:00",
    "2004-01-26T15:57:46+01:00",
    "2004-01-30T16:22:33+01:00",
    "2004-03-11T22:30:40+01:00",
    "2004-03-25T19:12:00+01:00",
    "2004-03-25T19:27:12+01:00",
    "2004-03-31T23:38:37+02:00",
    "2004-04-01T09:07:06+02:00",
    "2004-04-06T16:48:26+02:00",
    "2004-04-06T16:54:56+02:00",
    "2004-04-13T16:34:25+02:00",
    "2004-04-22T15:08:32+02:00",
    "2004-04-22T21:23:27+02:00",
    "2004-04-22T23:42:31+02:00",
    "2004-04-23T15:57:14+02:00",
    "2004-05-06T23:28:08+02:00",
    "2004-05-21T19:58:19+02:00",
    "2004-07-05T17:14:30+02:00",
    "2004-07-13T20:54:05+02:00",
    "2004-07-20T22:41:25+02:00",
    "2004-07-27T22:15:08+02:00",
    "2004-08-31T17:10:27+02:00",
    "2004-11-04T10:31:35+01:00",
    "2004-11-04T14:41:32+01:00",
    "2005-01-04T19:11:56+01:00",
    "2005-01-05T02:12:25+01:00",
    "2005-02-01T14:56:57+01:00",
    "2005-02-16T19:34:18+01:00",
    "2005-02-18T14:23:31+01:00",
    "2005-03-03T15:02:07+01:00",
    "2005-05-03T17:24:27+02:00",
    "2005-05-17T19:57:58+02:00",
    "2005-05-25T04:17:33+02:00",
    "2007-03-02T15:47:33+01:00",
    "2007-03-29T21:59:15+02:00",
    "2007-11-13T21:39:47+01:00",
    "2007-11-14T14:32:14+01:00",
    "2007-11-27T10:00:32+01:00",
    "2007-11-27T10:02:14+01:00",
    "2007-11-27T10:03:04+01:00",
    "2007-11-27T10:10:46+01:00",
    "2007-11-27T13:59:40+01:00",
    "2007-11-27T14:01:35+01:00",
    "2007-11-27T14:21:43+01:00",
    "2007-11-27T14:25:03+01:00",
    "2007-11-27T14:33:46+01:00",
    "2007-11-27T14:37:28+01:00",
    "2007-11-27T16:15:47+01:00",
    "2007-11-28T21:21:44+01:00",
    "2007-11-29T15:45:46+01:00",
    "2007-11-29T17:51:40+01:00",
    "2007-11-30T20:05:39+01:00",
    "2007-11-30T20:10:02+01:00",
    "2007-11-30T20:16:48+01:00",
    "2007-11-30T20:46:59+01:00",
    "2007-12-04T03:40:19+01:00",
    "2007-12-04T16:38:53+01:00",
    "2007-12-04T16:40:04+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "elements": [
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:299"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:765"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:599"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.reflect.InvocationTargetException",
        "elements": [
          {
            "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "source": "Native Method"
          },
          {
            "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
            "source": "NativeMethodAccessorImpl.java:39"
          },
          {
            "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "source": "DelegatingMethodAccessorImpl.java:25"
          },
          {
            "method": "java.lang.reflect.Method.invoke",
            "source": "Method.java:324"
          },
          {
            "method": "org.eclipse.core.internal.boot.InternalBootLoader.startup",
            "source": "InternalBootLoader.java:1049"
          },
          {
            "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
            "source": "InternalBootLoader.java:838"
          },
          {
            "method": "org.eclipse.core.boot.BootLoader.run",
            "source": "BootLoader.java:461"
          }
        ],
        "causedBy": {
          "exceptionType": "org.eclipse.core.runtime.CoreException",
          "message": "Unable to create platform lock file: /home/mburger/temp/eclipse-workspace/.metadata/.lock.",
          "elements": [
            {
              "method": "org.eclipse.core.internal.runtime.InternalPlatform.createLockFile",
              "source": "InternalPlatform.java:225"
            },
            {
              "method": "org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup",
              "source": "InternalPlatform.java:677"
            }
          ],
          "number": 0,
          "commentIndex": 0
        },
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 0,
      "bugId": "44735",
      "date": "2003-10-13T10:54:41+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "critical"
    },
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "elements": [
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.startup",
          "source": "InternalBootLoader.java:1049"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:838"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:461"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Unknown Source"
        }
      ],
      "causedBy": {
        "exceptionType": "org.eclipse.core.runtime.CoreException",
        "message": "Unable to create platform lock file: /home/mburger/temp/eclipse-workspace/.metadata/.lock.",
        "elements": [
          {
            "method": "org.eclipse.core.internal.runtime.InternalPlatform.createLockFile",
            "source": "InternalPlatform.java:225"
          },
          {
            "method": "org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup",
            "source": "InternalPlatform.java:677"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 1,
      "commentIndex": 12,
      "bugId": "44735",
      "date": "2003-10-16T09:55:44+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "critical"
    },
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "elements": [
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.startup",
          "source": "InternalBootLoader.java:1049"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:838"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:461"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Unknown Source"
        }
      ],
      "causedBy": {
        "exceptionType": "org.eclipse.core.runtime.CoreException",
        "message": "Unable to create platform lock file: /home/mburger/temp/eclipse-workspace/.metadata/.lock.",
        "elements": [
          {
            "method": "org.eclipse.core.internal.runtime.InternalPlatform.createLockFile",
            "source": "InternalPlatform.java:225"
          },
          {
            "method": "org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup",
            "source": "InternalPlatform.java:677"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 2,
      "commentIndex": 15,
      "bugId": "44735",
      "date": "2003-10-16T17:24:40+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "critical"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "No locks available",
      "elements": [
        {
          "method": "sun.nio.ch.FileChannelImpl.lock0",
          "source": "Native Method"
        },
        {
          "method": "sun.nio.ch.FileChannelImpl.tryLock",
          "source": "FileChannelImpl.java:788"
        },
        {
          "method": "java.nio.channels.FileChannel.tryLock",
          "source": "FileChannel.java:967"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformMetaAreaLock.acquire",
          "source": "PlatformMetaAreaLock.java:27"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.createLockFile",
          "source": "InternalPlatform.java:219"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup",
          "source": "InternalPlatform.java:677"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.startup",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Unknown Source"
        }
      ],
      "number": 3,
      "commentIndex": 17,
      "bugId": "44735",
      "date": "2003-10-16T21:36:05+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "critical"
    }
  ],
  "groupId": "44735",
  "bugId": "44735",
  "date": "2003-10-13T10:54:41+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "critical"
}