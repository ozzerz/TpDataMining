{
  "comments": [
    "20020409\n1. create this code (project contains JUnit source)\n2. do Quick Fix on \u0027fActiveTestDeathCount1\u0027, wait for the hover on \u0027Create \nfield...\u0027\n\n-----\npackage junit.extensions;\n\nimport junit.framework.*;\n\npublic class ActiveTestSuite  {\n\t\n\tpublic void run(TestResult result) {\n\t\tfActiveTestDeathCount1\u003d 0;    \n\t}\n        \n        public void runTest(final Test test, final TestResult result) {}\n                Thread t\u003d new Thread() {\n                        public void run() {\n                                try {\n                                        // inlined due to limitation in VA/Java \n                                        //ActiveTestSuite.super.runTest(test, \nresult);\n                                        test.run(result);\n                                } finally {\n                                        ActiveTestSuite.this.runFinished(test);\n                                }\n                        }\n                };\n                t.start();\n        }\n}\n\n\n\njava.lang.IllegalArgumentException\n\tat org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:1034)\n\tat org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration\n(ASTConverter.java:2365)\n\tat \norg.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration\n(ASTConverter.java:243)\n\tat org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations\n(ASTConverter.java:209)\n\tat org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:155)\n\tat org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:73)\n\tat org.eclipse.jdt.core.dom.AST.parseCompilationUnit(AST.java:234)\n\tat \norg.eclipse.jdt.internal.ui.text.correction.NewVariableCompletionProposal.addEdi\nts(NewVariableCompletionProposal.java:186)\n\tat \norg.eclipse.jdt.internal.ui.text.correction.CUCorrectionProposal.getChange\n(CUCorrectionProposal.java:56)\n\tat \norg.eclipse.jdt.internal.ui.text.correction.CUCorrectionProposal.getCompilationU\nnitChange(CUCorrectionProposal.java:130)\n\tat \norg.eclipse.jdt.internal.ui.text.correction.CUCorrectionProposal.getAdditionalPr\noposalInfo(CUCorrectionProposal.java:72)\n\tat \norg.eclipse.jface.text.contentassist.AdditionalInfoController.computeInformation\n(AdditionalInfoController.java:185)\n\tat \norg.eclipse.jface.text.AbstractInformationControlManager.showInformation\n(AbstractInformationControlManager.java:536)\n\tat org.eclipse.jface.text.contentassist.AdditionalInfoController$1.run\n(AdditionalInfoController.java:145)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java(Compiled \nCode))\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java\n(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java\n(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java\n(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:819)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:777)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:319)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:190)\n\tat org.eclipse.core.launcher.Main.run(Main.java:549)\n\tat org.eclipse.core.launcher.UIMain.main(UIMain.java:52)",
    "Using a fresh new workspace with build 0409, I could not reproduce this exception. The field is \ncreated properly. However I had to change the test case for :\npackage \njunit.extensions;\n\nimport junit.framework.*;\npublic class ActiveTestSuite \n{\n\tpublic void run(TestResult result) {\nfActiveTestDeathCount1\u003d 0;   \n}\n       \npublic void \nrunTest(final Test test, final TestResult result) {\nThread t\u003d new Thread() {\npublic void \nrun() {\ntry {\n// inlined due to limitation in \nVA/Java\n//ActiveTestSuite.super.runTest(test, result);\ntest.run(result);\n} \nfinally \n{\nActiveTestSuite.this.runFinished(test);\n}\n}\n};\nt.start();\n}\n}\n\nIf you can \nreproduce it in your workspace, please try again with a fresh new workspace containing only this \ntest case. If it works, please provide the whole workspace. ",
    "I can reproduce it with an empty workspace:\nOnly the one CU.\nThere are many build errors, but the result is the same.\n\nSend you the zipped workspace.",
    "I reproduced the bug now. Thanks for the workspace. The problem is located in the recovery in the \nParser. The field declaration has an invalid declarationEnd and then the ASTConverter is trying \nto create a field for which the length is negative. That is not possible and explains the \nIllegalArgumentException. The ASTConverter assumes that the CompilationUnit retrieved from \nthe Parser is properly initialized.",
    "Ok, I located the bug. It was in updateTypeDeclaration() in the class RecoveredType. The field \ndeclaration source end was set, but not the field declaration end. Setting the field declaration \nend with the same value than the field declaration source end fixed the problem.\nI will release \nas soon as all tests are passed.",
    "Fixed and released in HEAD.",
    "Set the milestone."
  ],
  "commentCreationDates": [
    "2002-04-10T15:17:02+02:00",
    "2002-04-10T17:50:35+02:00",
    "2002-04-10T19:08:10+02:00",
    "2002-04-10T20:11:12+02:00",
    "2002-04-10T20:21:10+02:00",
    "2002-04-10T20:31:01+02:00",
    "2002-04-10T20:31:38+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "elements": [
        {
          "method": "org.eclipse.jdt.core.dom.ASTNode.setSourceRange",
          "source": "ASTNode.java:1034"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration",
          "source": "ASTConverter.java:2365"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration",
          "source": "ASTConverter.java:243"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations",
          "source": "ASTConverter.java:209"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:155"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:73"
        },
        {
          "method": "org.eclipse.jdt.core.dom.AST.parseCompilationUnit",
          "source": "AST.java:234"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.correction.NewVariableCompletionProposal.addEdits",
          "source": "NewVariableCompletionProposal.java:186"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.correction.CUCorrectionProposal.getChange",
          "source": "CUCorrectionProposal.java:56"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.correction.CUCorrectionProposal.getCompilationUnitChange",
          "source": "CUCorrectionProposal.java:130"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.correction.CUCorrectionProposal.getAdditionalProposalInfo",
          "source": "CUCorrectionProposal.java:72"
        },
        {
          "method": "org.eclipse.jface.text.contentassist.AdditionalInfoController.computeInformation",
          "source": "AdditionalInfoController.java:185"
        },
        {
          "method": "org.eclipse.jface.text.AbstractInformationControlManager.showInformation",
          "source": "AbstractInformationControlManager.java:536"
        },
        {
          "method": "org.eclipse.jface.text.contentassist.AdditionalInfoController$1.run",
          "source": "AdditionalInfoController.java:145"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java(Compiled  Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:819"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:777"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:319"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:190"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:549"
        },
        {
          "method": "org.eclipse.core.launcher.UIMain.main",
          "source": "UIMain.java:52"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "13247",
      "date": "2002-04-10T15:17:02+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "13247",
  "bugId": "13247",
  "date": "2002-04-10T15:17:02+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}