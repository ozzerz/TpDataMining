{
  "comments": [
    "Created an attachment (id\u003d79253)\nproposed patch against HEAD (tested only in 3.3)\n\nBuild ID: I20070625-1500\n\nSimply compile the following class:\npublic class Foo\u003cT\u003e {\n\t/** @see T.R */\n\tvoid foo() {}\n}\n\nThis causes the following NPE:\njava.lang.NullPointerException\n\tat org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference.internalResolveType(JavadocQualifiedTypeReference.java:66)\n\tat org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference.resolveType(JavadocQualifiedTypeReference.java:84)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:125)\n\tat org.eclipse.jdt.internal.compiler.ast.Javadoc.resolveReference(Javadoc.java:353)\n\tat org.eclipse.jdt.internal.compiler.ast.Javadoc.resolve(Javadoc.java:257)\n\tat org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveJavadoc(AbstractMethodDeclaration.java:417)\n\tat org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:398)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1085)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1164)\n\tat org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:366)\n\tat org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:623)\n\tat org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:362)\n\tat org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:302)\n...\n\nThe problem is: QualifiedTypeReference.getTypeBinding() may return null,\nwhich is not handled by JavadocQualifiedTypeReference.internalResolveType().",
    "Created an attachment (id\u003d79254)\nupdated patch\n\nOops, previous patch was not a good idea in HEAD,\nsince reportInvalidType() would again cause an NPE.\nThis patch should actually suffice.",
    "Thanks for the patch but we do prefer fix the origin of the problem than just avoid the NPE. The problem here must be fixed by overriding getTypeBinding(Scope) method in JavadocQualifiedTypeReference.\n\nIt was not necessary before 5.0 and generics, but now we need to do it to have a specific javadoc message \"Javadoc: Illegal access from the type parameter T\" instead of the basic compiler one...\n",
    "(In reply to comment #2)\n\u003e [...], but now we need to do it to have\n\u003e a specific javadoc message \"Javadoc: Illegal access from the type parameter T\"\n\u003e instead of the basic compiler one...\n\nWhy can\u0027t you just add a little snippet to ProblemReporter.invalidType() \net al, which reads something like (after id has been determined):\n   if ((location.bits \u0026 ASTNode.InsideJavadoc) !\u003d 0)\n      id +\u003d Javadoc;\nWouldn\u0027t that be easier than duplicating all the AST-code?\nI seem to be missing something here ;-)",
    "(In reply to comment #3)\n\u003e (In reply to comment #2)\n\u003e \u003e [...], but now we need to do it to have\n\u003e \u003e a specific javadoc message \"Javadoc: Illegal access from the type parameter T\"\n\u003e \u003e instead of the basic compiler one...\n\u003e \n\u003e Why can\u0027t you just add a little snippet to ProblemReporter.invalidType() \n\u003e et al, which reads something like (after id has been determined):\n\u003e    if ((location.bits \u0026 ASTNode.InsideJavadoc) !\u003d 0)\n\u003e       id +\u003d Javadoc;\n\u003e Wouldn\u0027t that be easier than duplicating all the AST-code?\n\u003e I seem to be missing something here ;-)\n\u003e \nThanks to wonder about it, but fortunately nothing is missing here...\n\nWe cannot do that as Javadoc preferences are set separately from other compiler preferences. Typically, the javadoc issues are configured to be warnings although similar compiler issues are errors...\n\nThat\u0027s why we need to create specific ProblemReporter methods and also why we needed to create specific compiler AST nodes. I know it looks sometimes redundant but it was absolutely necessary to implement it this way...\n",
    "(In reply to comment #4)\n\u003e We cannot do that as Javadoc preferences are set separately from other compiler\n\u003e preferences. Typically, the javadoc issues are configured to be warnings\n\u003e although similar compiler issues are errors...\nisn\u0027t that treated in ProblemReporter.computeSeverity based solely on\nthe problem ID? That\u0027s why I thought tweeking the ID would suffice.\nThat view might be too simplistic, though.\n\n\u003e That\u0027s why we need to create specific ProblemReporter methods and also why we\n\u003e needed to create specific compiler AST nodes. I know it looks sometimes\n\u003e redundant but it was absolutely necessary to implement it this way...\nOK, I take your word. I don\u0027t mean to waste your time for explaining things\nthat have been discussed before :)"
  ],
  "commentCreationDates": [
    "2007-09-27T02:00:09+02:00",
    "2007-09-27T02:10:12+02:00",
    "2007-09-27T18:08:34+02:00",
    "2007-10-12T18:07:09+02:00",
    "2007-10-12T18:24:53+02:00",
    "2007-10-12T18:40:47+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference.internalResolveType",
          "source": "JavadocQualifiedTypeReference.java:66"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference.resolveType",
          "source": "JavadocQualifiedTypeReference.java:84"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType",
          "source": "TypeReference.java:125"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.Javadoc.resolveReference",
          "source": "Javadoc.java:353"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.Javadoc.resolve",
          "source": "Javadoc.java:257"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveJavadoc",
          "source": "AbstractMethodDeclaration.java:417"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve",
          "source": "AbstractMethodDeclaration.java:398"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve",
          "source": "TypeDeclaration.java:1085"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve",
          "source": "TypeDeclaration.java:1164"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve",
          "source": "CompilationUnitDeclaration.java:366"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:623"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:392"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:362"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile",
          "source": "IncrementalImageBuilder.java:302"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "204749",
      "date": "2007-09-27T02:00:09+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "204749",
  "bugId": "204749",
  "date": "2007-09-27T02:00:09+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}