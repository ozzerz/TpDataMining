{
  "comments": [
    "It would be very nice to allow calling super.method() in an ITD, where the super implementation is itself and ITD. Unfortunately, I don\u0027t think it\u0027s possible with the current Java bytecode definition. Failing that, the compiler should be consistent and flag an error. Here\u0027s the output from a program that compiles then fails at runtime (both with 1.5.0 and the Mar. 28 nightly build):\n\njava pkg.Derived\nException in thread \"main\" java.lang.AbstractMethodError: pkg.Derived$1.ajc$supe\nrDispatch$pkg_Base$BaseBean$toString()Ljava/lang/String;\n        at pkg.Base.ajc$interMethod$pkg_Base$pkg_Base$BaseBean$describe(Base.aj:\n6)\n        at pkg.Derived.ajc$interMethod$pkg_Derived$pkg_Derived$DerivedBean$descr\nibe(Derived.aj:9)\n        at pkg.Derived$1.describe(Derived.aj:1)\n        at pkg.Derived.ajc$interMethodDispatch1$pkg_Derived$pkg_Derived$DerivedB\nean$describe(Derived.aj)\n        at pkg.Derived.main(Derived.aj:12)\n\nSource files:\npackage pkg;\n\nimport pkg.Base.BaseBean;\n\npublic aspect Derived {\n    public interface DerivedBean extends BaseBean {}\n\n    public String DerivedBean.describe() {\n        return \"Derived state plus \"+super.describe();\n    }\n    public static void main(String args[]) {\n        new DerivedBean() {}.describe();\n    }\n}\n    \npackage pkg;\n\npublic aspect Base {\n    public interface BaseBean {}\n    public String BaseBean.describe() {\n        return \"Base holds \"+super.toString();\n    }\n}",
    "Hoisting priority - runtime errors are the worst kind of failure.",
    "Not sure what this comment means \"I don\u0027t think it\u0027s possible with the current Java bytecode definition\".  With a fix in the weaver, this program now compiles and runs fine...\n\nThe problem is with generating a helper method for the toString() method invoked via BeanBean.describe().  Because the ITDs are on interfaces, when we put the implementation of the describe method on the implementing class ( the anonymous class created here \"new DerivedBean() {}.describe();\" ) then the subITD is overriding the superITD - we have correctly worked this out, but because the superITD is forgotten, we also forget that it called \u0027super.toString()\u0027 and needed a method generated to support that call.  The solution is for an ITD to remember which ITDs it is overriding - that way when the code is eventually generated in the target class, we can see if it was overriding any other ITDs that also needed methods generating.\n",
    "Great - I\u0027m glad it\u0027s possible to support proper inheritance of ITD methods. My comment was just a guess that maybe this wasn\u0027t supported because it couldn\u0027t be. Thanks for the fix.",
    "ought to get around to this"
  ],
  "commentCreationDates": [
    "2006-04-03T00:45:23+02:00",
    "2006-05-10T18:39:13+02:00",
    "2006-06-05T15:16:58+02:00",
    "2006-06-06T06:58:33+02:00",
    "2006-09-25T15:23:23+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "message": "pkg.Derived$1.ajc$supe rDispatch$pkg_Base$BaseBean$toString()Ljava/lang/String;",
      "elements": [
        {
          "method": "pkg.Base.ajc$interMethod$pkg_Base$pkg_Base$BaseBean$describe",
          "source": "Base.aj: 6"
        },
        {
          "method": "pkg.Derived.ajc$interMethod$pkg_Derived$pkg_Derived$DerivedBean$describe",
          "source": "Derived.aj:9"
        },
        {
          "method": "pkg.Derived$1.describe",
          "source": "Derived.aj:1"
        },
        {
          "method": "pkg.Derived.ajc$interMethodDispatch1$pkg_Derived$pkg_Derived$DerivedBean$describe",
          "source": "Derived.aj"
        },
        {
          "method": "pkg.Derived.main",
          "source": "Derived.aj:12"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "134425",
      "date": "2006-04-03T00:45:23+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "134425",
  "bugId": "134425",
  "date": "2006-04-03T00:45:23+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}