{
  "comments": [
    "I\u0027m getting ClassCastException while compiling following code:\n\n---- Test.java ----\nclass AClass {\n//      void method() {}\n}\n\naspect AnAspect {\n        pointcut annt() : cflow( execution(* *(..)) );\n\n        before() : annt() {\n                System.out.println(\"before annt\");\n        }\n}\n----\n\nHere\u0027s output of the compiler:\n--- out ---\njava.lang.ClassCastException: org.aspectj.weaver.ResolvedMember\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:933)\n        at\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:244)\n        at\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:119)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:385)\n  [cut]\n------\n\nThe problem is caused by cflow on unresolved (not existing) jointpoint.\nWhen you uncomment the method() in AnClass, the problem disappears.\n\n\nI found this bug when I was introducing an aspect (which has\npointcuts based on annotations) to fresh object-oriented system\nwithout annotated classes. When I started to annotate the classes\nproblem disappeared. Following code illustates (simplified) situation:\n\n--- Test2.java ---\nimport java.lang.annotation.*;\n\n@Target(ElementType.METHOD)\n@interface Ann {}\n\nclass AClass {\n        // @Ann\n        void method() {}\n}\n\naspect AnAspect {\n        pointcut annt() : cflow( execution(@Ann * *(..)) );\n\n        before() : annt() {\n                System.out.println(\"before annt\");\n        }\n}\n----\n\n\nI\u0027m attaching those sources and ajcore files.\n\nBest regards, Michal",
    "Created an attachment (id\u003d20548)\ncflowbug.zip\n",
    "typo: joint -\u003e join :)",
    "Andrew, can you look at recreating?",
    "Recreated this and made a fix for it...\nI\u0027ve sent my patch to Andy Clement who\u0027ll hopefully put it in the cvs head some\ntime.",
    "Build available containing fix, see AspectJ downloads page and grab the dev build:\n\nhttp://eclipse.org/aspectj/downloads.php\n\nNotice (as I just said in another bug), you need to mark annotations that\nAspectJ will be matching on as having runtime retention with:\n\n@Retention(RetentionPolicy.RUNTIME)\n\nits a known bug that we are missing an error message for it.",
    "I was telling a lie there - and in the other bug I commented on.  Of course you\nonly need runtime retention if you are binding the annotation value - if you are\njust *matching* then the default retention of CLASS is fine.  Stupid me.",
    "No... let me change my mind one more time...\n\nBecause some of the kinds of matching, for example:\n\ncall(* *(..)) \u0026\u0026 @args(MyAnnotation)\n\ncan lead to a runtime test for whether the advised call has the annotation, you\nmust specify that MyAnnotation has runtime retention.\n\nIn the binding case:\n\nbefore(MyAnnotation ma): call(* *(..)) \u0026\u0026 @args(ma) {}\n\nyou obviously need runtime retention too.\n\n\nThe only time we could let you get away with it (i.e. the default of CLASS\nretention) is:\n\ncall(* *(@MyAnnotation ma))\n\nsince that is matched purely based on static information available at compile\ntime and can\u0027t lead to a runtime test being put into the code.\n\nhope that gets things straight now...",
    "(In reply to comment #7)\n\u003e No... let me change my mind one more time...\n\n:)\n\nI understand, now.\n\n\nIn fact, I have RUNTIME policy in the original sources,\nbut I\u0027ve removed it in the test case for simplicity. \n\nThanks!"
  ],
  "commentCreationDates": [
    "2005-04-30T14:49:47+02:00",
    "2005-04-30T14:51:43+02:00",
    "2005-04-30T14:53:47+02:00",
    "2005-05-03T11:48:17+02:00",
    "2005-05-06T14:32:11+02:00",
    "2005-05-10T18:08:09+02:00",
    "2005-05-10T18:24:31+02:00",
    "2005-05-10T18:31:36+02:00",
    "2005-05-11T00:27:15+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassCastException",
      "message": "org.aspectj.weaver.ResolvedMember",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:933"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:244"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:119"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:385"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "93345",
      "date": "2005-04-30T14:49:47+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "93345",
  "bugId": "93345",
  "date": "2005-04-30T14:49:47+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}