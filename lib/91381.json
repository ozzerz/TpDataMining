{
  "comments": [
    "The following program is accepted by ajc -1.5:\n\n\npublic aspect AbstractITD {\n    public abstract Object A.foo();\n\n    public static void main(String[] args) {\n\tA a \u003d new B();\n\tSystem.out.println(a.foo());\n    }\n}\n\nabstract class A {}\n\nclass B extends A {\n    public Integer foo() { return new Integer(42); }\n}\n\nBut it does not put in the necessary bridge method, so the program throws an\nAbstractMethodError at runtime:\n\nException in thread \"main\" java.lang.AbstractMethodError: A.foo()Ljava/lang/Object;\n        at AbstractITD.ajc$interMethodDispatch1$AbstractITD$A$foo(AbstractITD.java)\n        at AbstractITD.main(AbstractITD.java:7)\n\najc without -1.5 does not reject the program. I guess it should, since covariant\nreturn type is a 1.5 feature.\n\nAlso, if the @Override annotation is put on the method in B, ajc -1.5 complains,\neven though the method does override a superclass method.",
    "Raising priority for compiler course starting 28/8. Will give it a shot - itds and generics are the one area \nwe\u0027re held up on for M3 at the moment, proving quite tricky to get everything nailed....",
    "@Override problem is now fixed.\n\nAnd just collecting notes in this bug...Some ITD variants work and the bridge\nmethods are created, for example:\n\npublic class Super2 {\n  public Object m() { return null;}\n}\npublic class Sub2 extends Super2 { }\npublic aspect X2 {\n  public Integer Sub2.m() {return new Integer(42);}\n}\n\nproduces a version of Sub2 that looks like this:\n\npublic class Sub2 extends Super2{\n    public Sub2();\n    public java.lang.Object m();\n    public java.lang.Integer m();\n}\n\nwe get that free from the JDT compiler as it knows ITDs are around.  I\u0027m not\nsure why it has trouble if the ITD is on the supertype.  and we\u0027ll also need to\ntake binary weaving/separate compilation into account - so we can\u0027t always rely\non the JDT compiler to generate the necessary methods :(",
    "I\u0027ve fixed this.  We now generate the bridge methods you would expect.  I\nhaven\u0027t explored the space with testcases tho - so I wouldn\u0027t be surprised if\nthere are other problems lurking.\n\nThe dev build will appear in a little while - in the meantime, you can try this\nspecial build I\u0027ve just created for another user that happens to also contain\nthis fix:\n\nhttp://download.eclipse.org/technology/aspectj/dev/aspectj-PR107784.jar\n\nWhat I haven\u0027t fixed/checked is the policing of using covariant features when\nnot using 1.5 mode - will look at that now.",
    "Ok, I checked the final problem and you do get an error.  This program\n\npublic aspect pr91381_2 {\n  public abstract Object A.foo();\n\n  public static void main(String[] args) {\n    A a \u003d new B();\n    System.out.println(a.foo());\n  }\n}\n\nabstract class A {\n\n}\n\nclass B extends A {\n  public Integer foo() { return new Integer(42); }\n}\n\nreports: \n\n[error 1] error at public Integer foo() { return new Integer(42); }\n               ^^\nC:\\temp\\ajcSandbox\\ajcTest25015.tmp\\pr91381_2.aj:15:0::0 The return type is\nincompatible with A.foo()\n\nwill close the bug when the build is available.",
    "build available - all 3 issues reported have been fixed."
  ],
  "commentCreationDates": [
    "2005-04-14T11:45:17+02:00",
    "2005-08-19T20:51:42+02:00",
    "2005-08-23T23:42:57+02:00",
    "2005-08-24T17:41:09+02:00",
    "2005-08-24T18:45:31+02:00",
    "2005-08-25T09:21:20+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "message": "A.foo()Ljava/lang/Object;",
      "elements": [
        {
          "method": "AbstractITD.ajc$interMethodDispatch1$AbstractITD$A$foo",
          "source": "AbstractITD.java"
        },
        {
          "method": "AbstractITD.main",
          "source": "AbstractITD.java:7"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "91381",
      "date": "2005-04-14T11:45:17+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "91381",
  "bugId": "91381",
  "date": "2005-04-14T11:45:17+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}