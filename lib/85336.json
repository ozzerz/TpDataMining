{
  "comments": [
    "When using a plugin developed using JDT 3.0.1 with a 3.1M4 platform, any method\ncall that results in a call to JavaElementLabels#getTypeLabel will result in an\nAbstractMethodError.\n\nSee stack trace:\n\njava.lang.AbstractMethodError\nat\norg.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getTypeLabel(JavaElementLabels.java:611)\nat\norg.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getElementLabel(JavaElementLabels.java:353)\nat\norg.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getElementLabel(JavaElementLabels.java:321)\nat\norg.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getTextLabel(JavaElementLabels.java:306)\nat\norg.eclipse.jdt.ui.JavaElementLabelProvider.getText(JavaElementLabelProvider.java:249)\nat\ncom.retek.iso.ab.rule.eclipse.views.RulesLabelProvider.getText(RulesLabelProvider.java:44)",
    "You seem to use internal API.\norg.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels was internal in 3.0.1,\nbut is now public API (org.eclipse.jdt.ui.JavaElementLabels).\n\nThat\u0027s the risk you take when you use classes in the \u0027internal\u0027 packages. In\n3.0.1 you have to use the JavaElementLabelsProvider which is not as powerful. Or\nyou have to copy the JavaElementLabels in your plugin.\n\n",
    "From mail:\n\nI would totally accept agree and would admit I was repsonsible but my class is\nextending org.eclipse.jdt.ui.JavaElementLabelProvider, which is not internal. \nLook at the stack trace. My RulesLabelProvider calls\n\u003ccode\u003esuper.getText(Object)\u003c/code\u003e.  The JavaElementLabelProvider uses the\ninternal JavaElementLabels, which is out of my control.  This call stack is\ncompiled that way in 3.0.1 and then breaks in 3.1M4.\n\nIs my solution to recompile in 3.1M4? Or to not use\norg.eclipse.jdt.ui.JavaElementLabelProvider?",
    "you are right, sorry, wrong conclusion from my side. This definitly should work.",
    "The IType that you try to render, how did you get it?\nIt does not seem to offer type.getTypeParameters(), but in 3.1M4 you would also\nget jdt.core that has the type parameters.\n\nNote that you cannot implement IType yourself.",
    "Then that is what it is.  I am wrapping an IType and that interface must have a \nnew method in 3.1 that the wrapper doesn\u0027t have and causes the \nAbstractMethodError to be thrown.  It is my fault after all.  Thanks for your \ntime."
  ],
  "commentCreationDates": [
    "2005-02-15T22:07:15+01:00",
    "2005-02-16T13:04:53+01:00",
    "2005-02-16T16:24:41+01:00",
    "2005-02-16T16:25:13+01:00",
    "2005-02-16T16:30:53+01:00",
    "2005-02-16T17:35:16+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getTypeLabel",
          "source": "JavaElementLabels.java:611"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getElementLabel",
          "source": "JavaElementLabels.java:353"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getElementLabel",
          "source": "JavaElementLabels.java:321"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getTextLabel",
          "source": "JavaElementLabels.java:306"
        },
        {
          "method": "org.eclipse.jdt.ui.JavaElementLabelProvider.getText",
          "source": "JavaElementLabelProvider.java:249"
        },
        {
          "method": "com.retek.iso.ab.rule.eclipse.views.RulesLabelProvider.getText",
          "source": "RulesLabelProvider.java:44"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "85336",
      "date": "2005-02-15T22:07:15+01:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "85336",
  "bugId": "85336",
  "date": "2005-02-15T22:07:15+01:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}