{
  "comments": [
    "When running a build, we see the following entry in the error log:\n\n!ENTRY org.eclipse.core.runtime 4 2 2005-12-29 13:53:48.182\n!MESSAGE An internal error occurred during: \"Updating workspace\".\n!STACK 0\norg.eclipse.core.internal.utils.AssertionFailedException: Assertion failed: Mismatched begin/endOperation\n    at org.eclipse.core.internal.utils.Assert.isTrue(Assert.java:109)\n    at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:903)\n    at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1728)\n    at org.eclipse.core.internal.events.NotificationManager$NotifyJob.run(NotificationManager.java:38)\n    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)\n\nAt which point the build never finishes.\n\nThe repro requires some proprietary plugins, but if you can offer some info on what might cause it or steps I can take to narrow the problem down, I would be happy to dig in further and provide a patch if possible.",
    "Well, it\u0027s very simple in theory.  Every time the workspace is modified, it is surrounded by:\n\ntry {\n  beginOperation(..)\n  ... do stuff ...\n} finally {\n  endOperation(..);\n}\n\nThese methods perform various things - acquire and release locks and scheduling rules, kick off notification and autobuild, etc.  It is absolutely critical that these be correctly ordered - if they are mismatched you\u0027re going to be in a bad state.  I\u0027ve never seen this error \"in the wild\", I\u0027ve only had it while writing operations and forgetting to properly have begin/end pairs.  \n\nMy first question is whether you\u0027re reaching through to non-API and calling these methods yourself (or any non-API methods for that matter).  If you are, don\u0027t.",
    "Thanks for the info. We are not using those methods. I assume that means that somewhere there\u0027s an unbalanced set of begin/endOperation calls being made, presumably by Eclipse or its core plugins. \n\n",
    "I have a potential explanation for the exception. The code in question looks like this (in Workspace.run(), lines 1713 - 1729):\n\ntry {\n    prepareOperation();\n    beginOperation();\n    ...\n}\nfinally {\n    endOperation();\n}\n\nIf prepareOperation throws an exception (which it can), then the beginOperation() will never be called, but the endOperation will. \n\nTwo possible fixes:\n\n1. Move the prepareOperation outside the try...finally block\n2. Set a boolean right after the beginOperation, and only call endOperation if the boolean is set.\n\nI can create a patch for this if you\u0027d like.",
    "Sorry, I over simplified my explanation of how it works to avoid overwhelming detail.  prepareOperation is actually the method that acquires locks.  The pattern used throughout is as follows:\n\ntry {\n  workspace.prepareOperation(...)\n  //perform pre-condition checks\n  workspace.beginOperation(...)\n  // do real work\n} finally {\n   workspace.endOperation(..);\n}\n\nprepareOperation is always the first line of the try block, and endOperation is always the first/only entry in the finally block.  Of course any Java code can throw exceptions, so within the implementation of Workspace.prepareOperation it sets a flag if a failure occurred (in WorkManager.checkIn), like this:\n\n  boolean success \u003d false;\n  try { \n    //do the work to acquire locks\n\n    success \u003d true;\n  } finally {\n    if (!success)\n      checkInFailed.set(Boolean.TRUE);\n  }\n\nWhere \"checkInFailed\" is a thread local.  In endOperation, it first checks for checkIn failure, and aborts the rest of endOperation if there was a failure to check in.  Thus you shouldn\u0027t see this error if there is a failure during or after prepareOperation."
  ],
  "commentCreationDates": [
    "2006-01-17T22:06:23+01:00",
    "2006-01-17T22:36:28+01:00",
    "2006-01-17T22:59:33+01:00",
    "2006-01-23T19:28:25+01:00",
    "2006-01-23T19:46:51+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.utils.AssertionFailedException",
      "message": "Assertion failed: Mismatched begin/endOperation",
      "elements": [
        {
          "method": "org.eclipse.core.internal.utils.Assert.isTrue",
          "source": "Assert.java:109"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.endOperation",
          "source": "Workspace.java:903"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1728"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager$NotifyJob.run",
          "source": "NotificationManager.java:38"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "124211",
      "date": "2006-01-17T22:06:23+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "normal"
    }
  ],
  "groupId": "124211",
  "bugId": "124211",
  "date": "2006-01-17T22:06:23+01:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "normal"
}