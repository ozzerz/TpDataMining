{
  "comments": [
    "Using 3.3 M2, I started seeing a lot of AIOOB exceptions from StringMatchder. \n\nBelow is typical stack. Its a bit hard for me to trace this result to current source at line numbers 255 or 265 ... implicated by stack below ... but, certainly seems there is several point near that code that\u0027s sensitive to string length. So far, I haven\u0027t really seen any ill consequences of this exception, but, not sure. \n\n\n\n\n!SUBENTRY 2 org.eclipse.team.core 4 0 2006-09-24 20:14:15.765\n!MESSAGE An internal error occurred processing subscriber events.\n!STACK 0\njava.lang.ArrayIndexOutOfBoundsException\nat org.eclipse.team.internal.ccvs.core.util.StringMatcher.match(StringMatcher.java:255)\nat org.eclipse.team.internal.ccvs.core.util.StringMatcher.match(StringMatcher.java:265)\nat org.eclipse.team.internal.ccvs.core.util.FileNameMatcher.getMatch(FileNameMatcher.java:63)\nat org.eclipse.team.internal.ccvs.core.util.FileNameMatcher.match(FileNameMatcher.java:72)\nat org.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.isIgnored(EclipseSynchronizer.java:383)\nat org.eclipse.team.internal.ccvs.core.resources.EclipseResource.isIgnored(EclipseResource.java:118)\nat org.eclipse.team.internal.ccvs.core.CVSSyncTreeSubscriber.isSupervised(CVSSyncTreeSubscriber.java:95)\nat org.eclipse.team.internal.ccvs.core.CVSSyncTreeSubscriber.getSyncInfo(CVSSyncTreeSubscriber.java:75)\nat org.eclipse.team.internal.ccvs.core.CVSSyncTreeSubscriber.getDiff(CVSSyncTreeSubscriber.java:149)\nat org.eclipse.team.core.subscribers.Subscriber.accept(Subscriber.java:428)\nat org.eclipse.team.core.subscribers.Subscriber.accept(Subscriber.java:438)\nat org.eclipse.team.core.subscribers.Subscriber.accept(Subscriber.java:423)\nat org.eclipse.team.core.subscribers.Subscriber.accept(Subscriber.java:395)\nat org.eclipse.team.internal.core.subscribers.SubscriberDiffTreeEventHandler.collectAll(SubscriberDiffTreeEventHandler.java:187)\nat org.eclipse.team.internal.core.subscribers.SubscriberEventHandler.processEvent(SubscriberEventHandler.java:342)\nat org.eclipse.team.internal.core.BackgroundEventHandler.processEvents(BackgroundEventHandler.java:329)\nat org.eclipse.team.internal.core.BackgroundEventHandler$1.run(BackgroundEventHandler.java:173)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)",
    "ah, seems directly related to the patch for bug 132260. \n\nThere is a fCharacterClassMaps[i] at line 255 in source, but that \u0027i\u0027 was ++\u0027d in the while loop just preceeding it, so, I\u0027m guessing that \u0027i\u0027 is one too big. \n\n\n",
    "Created an attachment (id\u003d50774)\ntiny illustration of bug\n\nThis just adds a \"main\" method to illustrate the bug. I have no idea \nof the \"real\" conditions under which is occurs, but, hoped this might help. \n\n",
    "Changing to major, since this does prevent many projects from synchronizing (its not just decorations, as I at first thought). Seems once its \"hit\" no other synchronize. \n\nI would mark it as \"blocking\", since would prevent me recommending it as a self-hosting environment, except I think I sort of found a work-around for the case that\u0027s appears to be causing me problems.  \n\nIts one project in WTP (I won\u0027t fix immediately in CVS (but will in a day or so), and attach a team project set, in case that helps reproduce the problem). \n\nThe project has the following in cvsignore file. And seems to \"work around\" the problem by putting the *.jar last in the list. There certainly is *.jar in other cvsignore files (and not always last) so not sure what\u0027s special about this project. \n\n\nbin\nbuild\nwebapps\ntemp.folder\nbuild.xml\n*.jar\n*.war\nexplorersrc.zip\njavaCompiler.*.args\n\n",
    "Created an attachment (id\u003d50856)\nhere\u0027s the pesky project\n\nin case it helps reproduce",
    "I wrote the original patch and I will propose a fix to this bug.  Stand by...",
    "Created an attachment (id\u003d50866)\nseems to get rid of the exceptions\n\nThis patch makes StringMatcher pass the character class map along with the string.  I think that guarantees that the code doesn\u0027t cause an AIOOBE in any situation in which it wouldn\u0027t have before I added the character class stuff.  At least it correctly reports that \"test \" does not match \"*test\".\n\nThe control flow of StringMatcher.match is wacky, and I guess I did not understand it fully when I wrote the original patch.  I am sorry for the trouble I caused.  If I could have my way, I would probably rewrite the method, but I\u0027m guessing that after this incident you wouldn\u0027t trust me to do so and/or would rather not deal with it.\n\nRegards...",
    "Fix released to HEAD. Thanks for the quick response.\n\nRegarding your comment, I am hesitent to release changes to the StringMatcher as it is a class that existed since the beginning of Eclipse (i.e. before my time) and has been copied many times (i.e. there are 9 copies in my workspace!). It\u0027s one of those cases where everyone needed it but no one was willing to provide it as API. I was even hesitant to release your original change since we really don\u0027t have good test coverage on the class. However, I appreciate your quick response on this bug and therefore do not regret my decision ;-)",
    "I\u0027ve verified this fixes my original failure case, as described in comment #3, \nby exporting head version of cvs.core (as a deployable jar) and using it with my M2 install. The exception goes away as expected. \n\n\n",
    "*** Bug 160638 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2006-09-25T05:49:39+02:00",
    "2006-09-25T06:00:48+02:00",
    "2006-09-25T07:25:43+02:00",
    "2006-09-25T20:54:48+02:00",
    "2006-09-25T21:02:46+02:00",
    "2006-09-25T21:42:19+02:00",
    "2006-09-25T22:26:50+02:00",
    "2006-09-29T22:31:21+02:00",
    "2006-09-29T23:52:43+02:00",
    "2006-10-12T13:59:47+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "elements": [
        {
          "method": "org.eclipse.team.internal.ccvs.core.util.StringMatcher.match",
          "source": "StringMatcher.java:255"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.util.StringMatcher.match",
          "source": "StringMatcher.java:265"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.util.FileNameMatcher.getMatch",
          "source": "FileNameMatcher.java:63"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.util.FileNameMatcher.match",
          "source": "FileNameMatcher.java:72"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.isIgnored",
          "source": "EclipseSynchronizer.java:383"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseResource.isIgnored",
          "source": "EclipseResource.java:118"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.CVSSyncTreeSubscriber.isSupervised",
          "source": "CVSSyncTreeSubscriber.java:95"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.CVSSyncTreeSubscriber.getSyncInfo",
          "source": "CVSSyncTreeSubscriber.java:75"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.CVSSyncTreeSubscriber.getDiff",
          "source": "CVSSyncTreeSubscriber.java:149"
        },
        {
          "method": "org.eclipse.team.core.subscribers.Subscriber.accept",
          "source": "Subscriber.java:428"
        },
        {
          "method": "org.eclipse.team.core.subscribers.Subscriber.accept",
          "source": "Subscriber.java:438"
        },
        {
          "method": "org.eclipse.team.core.subscribers.Subscriber.accept",
          "source": "Subscriber.java:423"
        },
        {
          "method": "org.eclipse.team.core.subscribers.Subscriber.accept",
          "source": "Subscriber.java:395"
        },
        {
          "method": "org.eclipse.team.internal.core.subscribers.SubscriberDiffTreeEventHandler.collectAll",
          "source": "SubscriberDiffTreeEventHandler.java:187"
        },
        {
          "method": "org.eclipse.team.internal.core.subscribers.SubscriberEventHandler.processEvent",
          "source": "SubscriberEventHandler.java:342"
        },
        {
          "method": "org.eclipse.team.internal.core.BackgroundEventHandler.processEvents",
          "source": "BackgroundEventHandler.java:329"
        },
        {
          "method": "org.eclipse.team.internal.core.BackgroundEventHandler$1.run",
          "source": "BackgroundEventHandler.java:173"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "158498",
      "date": "2006-09-25T05:49:39+02:00",
      "product": "Platform",
      "component": "Team",
      "severity": "major"
    }
  ],
  "groupId": "158498",
  "bugId": "158498",
  "date": "2006-09-25T05:49:39+02:00",
  "product": "Platform",
  "component": "Team",
  "severity": "major"
}