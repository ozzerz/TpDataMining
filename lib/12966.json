{
  "comments": [
    "Overview: \"Debug with remote application\" fails with J2ME Wireless Toolkit (WTK) \nEmulator as remote VM.\n\nSteps to reproduce:\n- Get WTK 1.0.3 for Windows \n(http://java.sun.com/products/j2mewtoolkit/download.html)\n- Install the WTK, verfify installation by executing the following cmd in the \nWTK\\bin dir:\nemulator -Xdevice:DefaultGrayPhone -classpath \n..\\apps\\demos\\classes;..\\lib\\midpapi.zip example.manyballs.ManyBalls\n\n- execute the follwing cmd:\n emulator -Xdebug -Xdevice:DefaultGrayPhone -classpath \n..\\apps\\demos\\classes;..\\lib\\midpapi.zip \n-Xrunjdwp:transport\u003ddt_socket,address\u003d2801,server\u003dy example.manyballs.ManyBalls\n\n- Within Eclipse use \"Debug with remote Java app\" localhost/2801/allow \ntermination\n\nExpected result: The emulator should run the application. (This does work with \nForte f. Java 3.0 CE)\n\nActual result: Emulator does not run the application. One can pause the emulator \nthread, which results in exceptions being written to the log. It seems that some \nclass information isn?t correctly read from the referenced classfiles in \nWTK\\lib\\midapi.zip (snippet from .metadate\\.log: \n4 org.eclipse.jdt.launching 4 Invalid path: \njava/io/k:/ws/toolkit/1/0/3-fcs/kvm/api/src/java/io/OutputStreamWriter.java.\nJava Model Exception: Java Model Status [Invalid path: \njava/io/k:/ws/toolkit/1/0/3-fcs/kvm/api/src/java/io/OutputStreamWriter.java.]\n\tat org.eclipse.core.runtime.CoreException.\u003cinit\u003e(CoreException.java:30)\n\n\nThe basic communication with the WTK emulator seems to work, it is at least \npossible to terminate the emulator from within Eclipse.\n\nEclipse version 20020321 on Classic VM (build 1.3.0, J2RE 1.3.0 IBM build \ncn130-20010207 (JIT enabled: jitc)\n\nChris",
    "Is this still a problem with the latest integration build (200204011)? It would \nbe a great help if you could let us know.",
    "Created an attachment (id\u003d594)\nEclipse logfile\n",
    "Yes, it appears as if the \"source name\" debug attribute in the class files is \nfully qualified - an absolute path, including a device (drive). For example:\n\nk:/ws/toolkit/1/0/3-fcs/kvm/api/src/java/io/OutputStreamWriter.java.\n\nAccording to the spec, the debug attribute should be a simple source name such \nas \"OutputStreamWriter.java\". Thus, we are not able to locate the source.\n\n",
    "Seems to be Sun?s problem, not yours. On the other hand, Forte for Java and \nJBuilder can be used with the Wireless Toolkit, it would be nice if you get \nEclipse to work with the WTK as well...",
    "Fixed in JavaSourceLocator. If the debug attribute contains the \nFile.pathSeperatorChar, I strip off the prefix.",
    "Please verify (Darin S).",
    "Created an attachment (id\u003d811)\n.metadata/.log and 3 screenshots\n",
    "Still doesn?t work (tested against 20020510)\n\nSnippet from .metadata/.log:\n!ENTRY org.eclipse.jdt.launching 4 4 Tue May 14 09:50:36 GMT+02:00 2002\n!MESSAGE Invalid path: \nk:/ws/toolkit/1/0/3-fcs/kvm/api/src/java/io/OutputStreamWriter.java.\n!STACK Java Model Exception: Java Model Status [Invalid path: \nk:/ws/toolkit/1/0/3-fcs/kvm/api/src/java/io/OutputStreamWriter.java.]\n\nThe garbage in front of the path is stripped now (used to be: \n\"java/io/k:/ws/toolkit/.../OutputStreamWriter.java.\"), but the full qualified \nabsolute path is still used. \n\nPlease see the log in attachment 811, there is another error before the \"Invalid \npath\" which might be the initial cause for the failure.\n\nThe screenshots in the attachment were taken in this order: \ndebug1\u003dbefore suspending the thread\ndebug2\u003dthe dialog that comes up when suspending the thread\ndebug3\u003dthe debug window after closing the dialog\n\n\n\n",
    "Was not fixed for 20020510...fixed date is 20020513.\nDid you pull down the latest from the head stream for your testing?",
    "Sorry, my mistake. I??ll try to compile your 20020513 code and test against that.",
    "No problem.",
    "Verified.",
    "Christian,\n\nHave you tried the 20020514 build?\nWith the patches announced on eclipse.dev the build seems to function OK.",
    "I tried with 20020514 and 20020515, your fix doesn?t seem to be in those builds.\n\nWhere do I find the patches? I noticed binaries on the dev core pages, but \ncouldn?t find any on the dev debug pages (As mentioned before, I was having \nproblems recompiling myself, so a compiled launching.jar would be required). \n",
    "Reopenning",
    "This fix did not make it into either of the mentioned builds. Please wait for \nthe M6 build.",
    "Marking as fixed, to be verified.",
    "The fix for this is in the 20020519 build. Please re-open if a problem, marking \nas verified.",
    "Created an attachment (id\u003d908)\n.metadata\\.log\n",
    "I have tested against 20020520 (Win32 Runtime and JDT downloads) and still see \nthe full qualified path in the .log, see attachment #908. (Just an unqualified \nguess: Could this be a similar problem in jdt.debug.ui.JavaUISourceLocator ?)",
    "The Java UI source locator just delegates to the non-UI source locator.",
    "When debugging with J2ME Wireless Toolkit(WTK) Emulator using Eclipse-M6, I met \nthe same problem just like above, the application which running on the emulator \nwas blocked. But when I use bugseeker2 to debug, there\u0027s no problem. So I try \nto capture the JDWP package and analyse the reason. Finally I found that when \nthe Eclipse send ClassPrepare Request, it set suspendPolicy EVENT_THREAD and \ncause one thread suspended, it is just the reason that application was blocked. \nAfter I fix KVM Debug Proxy(kdp) of the emulator to set all suspendPolicy of \nClassPrepare Request NONE, the application run sucessfully. But I found another \nproblem that Eclipse just get the info of kvm_main thread, so I can\u0027t suspend \nanother thread of the application. I don\u0027t know how to resolve it.",
    "I do not understand the problem mentioned above \"Additional Comments From \nVickie Yang 2002-05-23 22:38\". If this is new (different) bug, please open a \nnew bug report.",
    "IMHO, that comment refers to the fact that *remote debugging with Sun J2ME \nWireless Toolkit fails* and provides some more insights. Your source locator fix \ndid probably resolve only the problem with malformed .class files in the J2ME \nWTK distribution. But as I have mentioned before, the full qualified path \nreturned by JavaSourceLocator might not have been the initial cause for not \nbeing able to do remote debugging. Perhaps this bug needs to be subdivided into \ndifferent tasks:\n\n- source locator\n- fix for \"org.eclipse.debug.core.DebugException[5010]: \ncom.sun.jdi.InternalException: Got error code in reply: 41\"\n- Vickie?s observations\n\nAppreciating your work!(just some padding on the back during freeze ;)\n\nchris\n\n\n",
    "Just wondering if anyone has tried build 20020620, to see what (if any) the \nlatest problems are with J2ME? At this point Eclipse is frozen for 2.0, so I \nwill mark this bug as deferred.",
    "Sorry, still does not work in 20020620. The .log entries haven?t changed at all.\n",
    "Our ClassPrepareRequests are created with a suspend policy of SUSPEND_THREAD \nso that we can install breakpoints in a class as soon as it\u0027s loaded. A \nsuspend policy of SUSPEND_NONE will certainly introduce a timing bug whereby \nbreakpoints will be missed if they are in a location that is executed shortly \nafter the class is loaded.",
    "So you mean that this is a bug of kvm ? ",
    "Vickie, in your comment above you mentioned setting the suspend policy of \nour ClassPrepareRequests to SUSPEND_NONE. I\u0027m just explaining why we \nactually need a suspend policy of SUSPEND_THREAD.\n\nI\u0027m not sure I entirely understand your comment, though. You said, \"After I \nfix KVM Debug Proxy(kdp) of the emulator to set all suspendPolicy of\nClassPrepare Request NONE, the application run sucessfully.\" Are you saying \nthat you actually hacked the KVM Debug Proxy somehow or that you changed \nEclipse to set the suspend policy of ClassPrepareRequests to SUSPEND_NONE?\n\nYou went on to say, \"But I found another problem that Eclipse just get the \ninfo of kvm_main thread, so I can\u0027t suspend another thread of the \napplication.\" I understand this to mean that when Eclipse sends the JDWP \nrequest asking the VM for threads, the VM only returns a single thread. Is \nthis correct? Also, are you certain that more than one thread has been \ncreated at this point?",
    "Vickie: I wouldn?t consider it a bug in KVM (WTK). Other debuggers( Forte f. \nJava, JDB) can be used with the WTK.\n\nOTI: I still see this error:\n\"org.eclipse.debug.core.DebugException[5010]: com.sun.jdi.InternalException: Got \nerror code in reply: 41\" (same as in my previous attachments) Does this indicate \na bug in the jdi implementation?\n\nHow about using JDB as the lowest common denominator and comparing the behavior \nof Eclipse against it (see http://wireless.java.sun.com/midp/questions/jdb/)?\n",
    "When sending Class prepare event the KVM doesn\u0027t handle the suspend policy\nproperly. It can send several event before really stopping. So eclipse doesn\u0027t\nresume the thread enought time.\n\nAnother problem in the KVM :\nMethods ID in the KVM are taken from class files (because KDP, the debug proxy,\nand the kvm need to have the same reference index), so the first method in class\nfile will have the id 0 ... But it seems that id 0 is reserved to obsolete method.\nSo you can\u0027t breakpoint in this method. (does it work in Forte ?)\nYou need to modify KVM \u0026 KDP to correct this. (method index must start at 1).\nI\u0027m experimenting with the KVM version 1.0.3 here, but I can\u0027t recompile the kvm\nwith the same settings that sun.\n\nThe KVM at start create only one thread with your \"main\". And simulate a thread\ngroup.",
    "Christian, the fact that you see an error with the Eclipse debuggers that \nother debuggers don\u0027t expose doesn\u0027t imply that the problem is in Eclipse. \nWe\u0027ve seen a few instances of these problems where other debuggers work for \na particular problem, but Eclipse causes problems. It often turns out that \nour debugger is simply doing more than others and thus exposes VM bugs that \nother debuggers don\u0027t encounter.\n\nError code 41 is the JDWP error code for \"NOT_FOUND - Desired element not \nfound.\" This is an error code sent to the debugger by the VM. It sounds \nlike we\u0027re making a query about a non-existant item, but this doesn\u0027t \nreally tell us where the problem is. Are we holding on to an expired handle \nor is the VM \"lying to us\" (we\u0027ve seen this many times as well)?",
    "Jarred, \nconsider me a \"user\" of Eclipse, so it looks like a bug to me, because other IDE?s don?t \nexhibit this \"error\". As a developer, your point of view makes perfect sense to me, but it doesn?t \nsolve the problem of not being able to use Eclipse to debug against WTK emulators :-( I checked \nagainst WTK 1.04, same problem. Would it be somehow possible to emulate the \"faulty\" JDB \nbehavior? (After you guys have come up with such a greate product, I sure wish I could contribute \nwith more qualified suggestions, but I certainly lack JDWP experience)",
    "I finally got a copy of the J2ME WTK and it looks like our bug.\n\nWe create a ClassPrepareRequest for java.lang.Error for our \"Suspend on \ncompilation errors\" feature. The ClassPrepareEvent comes to us with a \nThreadID of 0, which, according to JDWP spec, means null. We\u0027ve previously \nassumed that an event could never come from a \"null\" thread. However, \ncloser inspection of the JDWP spec yielded the following on the topic of \nthe threadID field in a ClassPrepareEvent:\n\"Preparing thread. In rare cases, this event may occur in a debugger system \nthread within the target VM. Debugger threads take precautions to prevent \nthese events, but they cannot be avoided under some conditions, especially \nfor some subclasses of java.lang.Error. If the event was generated by a \ndebugger system thread, the value returned by this method is null, and if \nthe requested  suspend policy for the event was EVENT_THREAD all threads \nwill be suspended instead, and the composite event\u0027s suspend policy will \nreflect this change.\"\n\nThis describes the situation here exactly.",
    "Jared,\nThank you for your hard work! Through going deep into Eclipse, KVM and KDP\n(actually WTK equals KVM + MIDP + KDP), finally I considered that it\u0027s fault of \nWTK which base on Sun\u0027s kvm reference implement. To solve these problems, we \nshould hack KVM and KDP to make our own emulator or request Sun correcting WTK. \nAnd Eclipse debugger should follow JVM spec. Eclipse is a great IDE, I like it.",
    "I got it to behave better by adding code to handle event with null threads. \nThe next problem that came up was an UnsupportedOperationException that was \nthrown in response to ThreadStartEvents from the VM. This was happening \nbecause our code for handling the ThreadStartEvent (in JDIDebugTarget) asks \nthread.isCollected() before creating a JDIThread object for the VM thread.\n\nThe WTK responds to the ObjectReference.isCollected query with \n\"OPERATION_NOT_SUPPORTED\". However, this is *not* an optional operation. \nAccording to spec, the VM must be able to answer this query. This bug is \nthe reason that only one thread shows up in the debug view. If I add a \ncatch for UnsupportedOperationException around our thread.isCollected() \ncall, two more threads show up in the debug view. Suspending either of \nthese threads actually causes the emulated program to suspend (suspending \nthe \"main\" thread doesn\u0027t).\n\nAll in all, the WTK seems flaky at best. While debugging, it was dumping \nerrors to the system console. These errors make for a generally weak \ndebugging experience.\n\nWe should definitely fix our null thread handling. That\u0027s our bug. It\u0027s \nunclear that we should actually release the code for handling the \nUnsupportedOperationException as this really seems to be a VM bug. Then \nagain, this wouldn\u0027t be the first code in Eclipse that\u0027s written \nspecifically to deal with a VM bug.",
    "Jared,\nyou?d certainly do me and other developers a great favor if you added code to \ncatch the UnsupportedOperationException (and whatever else might creep up). A \nsimple switch in the .options to enable it would do.\n\nI?m afraid that handing over the responsibility to Sun won?t help for two \nreasons:\n- Eclipse is THE competitor to Netbeans/Forte/Sun ONE Studio (wonder how it is \ncalled next week ;), so why support it?\n- Device vendors that license the KVM from Sun reproduce the bug in their device \nspecific emulators. It?s probably futile to ask them to fix the bug in their \ncode.\n\nChris\nP.S: Sorry for misspelling your name in my prev. posting",
    "Christian, I\u0027m inclined to release the UnsupportedOperationException \nworkaround.\n\nI\u0027ve also found another bug that was brought up here. Upon reexamining our \nMethod.isObsolete() implementation, I realized that we\u0027ve got a bug there. Our \nimplementation just returns methodID \u003d\u003d 0. However, for pre-JDWP 1.4 VMs, this \ndoesn\u0027t make sense. Method.isObsolete() should always return false for JDWP \u003c \n1.4.",
    "Reopening for more work.",
    "Ok. So now I can see more threads and I can get info for methods with ID 0. \nHowever, the VM is returning an error when we ask for line info for some \nstack frames, resulting in a stack frame that just says \"\u003cnot responding\u003e\".\n\nThis is really our problem. JDIModelPresentation.getText catches \nDebugException and returns \"\u003cnot responding\u003e\". The methods that it \ndelegates to (in this case, getStackFrameText) just throw DebugException. \nThe end result is that if we get an exception when asking about any single \npiece of data for a stack frame, we don\u0027t give the user any information. We \ncan do better.\n\nI\u0027ve fixed JDIModelPresentation.getStackFrameText() to wrapper each query \n(declaring type, receiving type, method name, line number, etc.) in a \ntry/catch. This way, we can just say \"\u003cunknown x\u003e\" if an exception occurs \nretrieving any information x.\n\nThis is a big win. Instead of seeing \"\u003cnot responding\u003e\" on the stack frame, \nI now get \n\"com.sun.kvem.midp.lcdui.EmulEventHandler$EventLoop(java.lang.Object).getClass()\u003cunknown \nline number\u003e\"\n\nThe lack of robustness in the KVM debug proxy is really very useful for \nfinding assumptions in our debugger. :) We need more \"junky\" VMs for \ntesting.",
    "Created the following bug reports for the problems discovered here:\nBug 21305 - Debug element rendering can be more robust\nBug 21306 - JDI client does not tolerate null thread from events\nBug 21308 - Method.isObsolete() broken for method ID 0 on JDK \u003c 1.4\n\nFor the purposes of closing this bug report, please verify the workarounds I \nadded in ObjectReferenceImpl and ReferenceTypeImpl.",
    "Please verify.",
    "I have tried the last change but is doesn\u0027t seem to always work here.\nAlso it\u0027s the first time I modify an eclipse plugins.\nHere is what I have done.\n- Imported into eclipse the org.eclipse.jdt.debug_2.0.0 plugin.\n- Applied by hand the last CVS (using the CVS web interface because I can\u0027t\naccess CVS server directly) change to the source.\n- Used the \"Create Jar\" command on the plugin.xml file.\n- Replaced the debug plugin jar file with the new compiled version.\nIs it the best way ?\n\nI use the ManyBalls WTK104 example.\n* When I place a breakpoint in SmallBall.run it works.\n* But If I place the breakpoint in ManyBalls.startApp it doesn\u0027t work :\n\njava.lang.InternalError: Got event of unknown type\nat org.eclipse.jdi.internal.request.EventRequestManagerImpl.findRequest(EventRe\nquestManagerImpl.java:498)\nat org.eclipse.jdi.internal.event.EventImpl.read(EventImpl.java:153)\nat org.eclipse.jdi.internal.event.EventSetImpl.read(EventSetImpl.java:147)\nat org.eclipse.jdi.internal.event.EventQueueImpl.remove(EventQueueImpl.java:59)\nat org.eclipse.jdi.internal.event.EventQueueImpl.remove(EventQueueImpl.java:42)\nat org.eclipse.jdt.internal.debug.core.EventDispatcher.run(EventDispatcher.java\n:194)\nat java.lang.Thread.run(Thread.java:536)\n\nThis exception is thrown while receiving the class prepare event for the\nManyBalls class.\n\nAlso I have noticed something strange with WTK.\nWhen hiting a breakpoint the eclipse debugger use ReferenceTypeImpl.findMethod\nto check that the method is a \"part of a known reference type\".\nBut when iterating, the methods are not in the right order (superclass method n,\nsuperclass method n-1 ...., class method m, class method m-1 ...)\nUsing j2se they are in the right order.\nThe problem seems to come in ReferenceTypeImpl.allMethods when converting an\nHashSet into an ArrayList.\nclassId and methodID doesn\u0027t have the same form in WTK and j2se.\n\nI\u0027m starting to love using eclipse to debug eclipse debugging WTK ;-)\n",
    "I have replaced the HashSet with a Vector in ReferenceTypeImpl.allMethods and\nthat fixed the last problem.\nThere is the same thing in ReferenceTypeImpl.allInterfaces and\nReferenceTypeImpl.allFields but it may cause problem with duplicate entry...\n\n",
    "Christophe, can you please open a new bug report for the problems you found?\n\nAlso, if you\u0027re only bringing in a few files from CVS to rebuild, please make \nsure you\u0027re getting all fixes.",
    "Ok, I have open a bug report :\n\nBreakpoint hit in parent\u0027s class method instead of class method\nhttp://dev.eclipse.org/bugs/show_bug.cgi?id\u003d21450\n\n",
    "Jared,\nI observe a behavior similar to what Christophe sees. I also get the following \nentry in the .log.\n\n!ENTRY org.eclipse.jdt.launching 4 4 Jul 11, 2002 07:00:10.483\n!MESSAGE Invalid path: \njava/lang/k:/re/midp/MIDP1/0/3/src/share/classes/java/lang/Class.java.\n!STACK 1\nJava Model Exception: Java Model Status [Invalid path: \njava/lang/k:/re/midp/MIDP1/0/3/src/share/classes/java/lang/Class.java.]\n\tat org.eclipse.core.runtime.CoreException.\u003cinit\u003e(CoreException.java:35)\n\tat \norg.eclipse.jdt.core.JavaModelException.\u003cinit\u003e(JavaModelException.java:64)\n\tat \norg.eclipse.jdt.internal.core.JavaProject.findElement(JavaProject.java:573)\n\tat \norg.eclipse.jdt.launching.sourcelookup.JavaProjectSourceLocation.findSourceEleme\nnt(JavaProjectSourceLocation.java:75)\n\tat \norg.eclipse.jdt.launching.sourcelookup.JavaSourceLocator.getSourceElement(JavaSo\nurceLocator.java:187)\n\tat \norg.eclipse.jdt.debug.ui.JavaUISourceLocator.getSourceElement(JavaUISourceLocato\nr.java:117)\n\tat \norg.eclipse.debug.internal.ui.views.launch.LaunchView.lookupEditorInput(LaunchVi\new.java:518)\n\tat \norg.eclipse.debug.internal.ui.views.launch.LaunchView.showMarkerForCurrentSelect\nion(LaunchView.java:478)\n\nI see a fix in org.eclipse.jdt.launching.sourcelookup.JavaSourceLocator for \n#12966, but it doesn?t seem to fix the problem. ",
    "Opened Bug 21483 to address the \"event of unknown type\" bug Christophe \nmentions above.",
    "Christian, please open a new bug report for the source lookup problem you\u0027re \nseeing. Be sure to include detailed steps (particularly, how you\u0027re setting up \nyour Eclipse project) to reproduce the bug.",
    "created bug #21518 for the source lookup problem",
    "except for #21518: verified",
    "Verified code.",
    "What is the status of the fix for this?  Is there a place where I can download \nthe drop where this is fixed?  As far as I can tell the latest version of the \nproject on dev.eclipse.org does not contain the fix.\n\nWe are investigating the same issue when debugging kvms from WSDD.",
    "The fixes from this bug report have been in CVS for a long time. These fixes \nare definitely in the current integration builds. If you are finding more \nEclipse bugs in this area, please open bug reports.",
    "When setting a breakpoint, this error occurs for me with Eclipse M4 and\nI2003022, JDK 1.4.1_01 and WTK 1.0.4_01 -- see stack trace below. When asked for\nthe method list (in ReferenceType.methods() ), the K Debug Proxy (KDP) returns 0\nmethods, so MethodImpl.readWithReferenceTypeWithTag cannot find the method, and\nraises the exception. KDP itself seems to have problems with the type/class\nfile, requests for the type signature of the \"offending\" type, etc. fail, too.\n\nWhen commenting out the exception raising code in\nMethodImpl.readWithReferenceTypeWithTag, the debugger \"works\", i.e. it stops at\nthe break point, the stack trace is shown, etc. However, stepping does not work.\n\njava.lang.InternalError: Got MethodID of ReferenceType that is not a member of\nthe ReferenceType\nat\norg.eclipse.jdi.internal.MethodImpl.readWithReferenceTypeWithTag(MethodImpl.java:642)\nat org.eclipse.jdi.internal.LocationImpl.read(LocationImpl.java:152)\nat org.eclipse.jdi.internal.StackFrameImpl.readWithLocation(StackFrameImpl.java:302)\nat org.eclipse.jdi.internal.ThreadReferenceImpl.frames(ThreadReferenceImpl.java:196)\nat org.eclipse.jdi.internal.ThreadReferenceImpl.frames(ThreadReferenceImpl.java:165)\nat\norg.eclipse.jdt.internal.debug.core.model.JDIThread.getUnderlyingFrames(JDIThread.java:512)\nat\norg.eclipse.jdt.internal.debug.core.model.JDIThread.createAllStackFrames(JDIThread.java:489)\nat\norg.eclipse.jdt.internal.debug.core.model.JDIThread.computeStackFrames(JDIThread.java:365)\nat\norg.eclipse.jdt.internal.debug.core.model.JDIThread.computeStackFrames(JDIThread.java:461)\nat\norg.eclipse.jdt.internal.debug.core.model.JDIThread.hasStackFrames(JDIThread.java:2228)\nat\norg.eclipse.debug.internal.ui.views.launch.LaunchViewContentProvider.hasChildren(LaunchViewContentProvider.java:88)\nat\norg.eclipse.jface.viewers.AbstractTreeViewer.isExpandable(AbstractTreeViewer.java:986)\nat\norg.eclipse.jface.viewers.AbstractTreeViewer.updateChildren(AbstractTreeViewer.java:1223)\nat\norg.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh(AbstractTreeViewer.java:897)\nat\norg.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh(AbstractTreeViewer.java:875)\nat org.eclipse.jface.viewers.StructuredViewer$7.run(StructuredViewer.java:801)\nat\norg.eclipse.jface.viewers.StructuredViewer.preservingSelection(StructuredViewer.java:741)\nat org.eclipse.jface.viewers.StructuredViewer.refresh(StructuredViewer.java:799)\nat\norg.eclipse.debug.internal.ui.views.launch.LaunchViewer.refresh(LaunchViewer.java:62)\nat\norg.eclipse.debug.internal.ui.views.launch.LaunchView.autoExpand(LaunchView.java:836)\nat\norg.eclipse.debug.internal.ui.views.launch.LaunchViewEventHandler.doHandleSuspendThreadEvent(LaunchViewEventHandler.java:227)\nat\norg.eclipse.debug.internal.ui.views.launch.LaunchViewEventHandler.doHandleSuspendEvent(LaunchViewEventHandler.java:173)\nat\norg.eclipse.debug.internal.ui.views.launch.LaunchViewEventHandler.doHandleDebugEvents(LaunchViewEventHandler.java:96)\nat\norg.eclipse.debug.internal.ui.views.AbstractDebugEventHandler$1.run(AbstractDebugEventHandler.java:65)\nat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:31)\nat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:94)\nat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:1669)\nat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1414)\nat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1525)\nat org.eclipse.ui.internal.Workbench.run(Workbench.java:1508)\nat\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:845)\nat org.eclipse.core.boot.BootLoader.run(BootLoader.java:462)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:324)\nat org.eclipse.core.launcher.Main.basicRun(Main.java:247)\nat org.eclipse.core.launcher.Main.run(Main.java:703)\nat org.eclipse.core.launcher.Main.main(Main.java:539)",
    "Opened Bug 30816 for the new bug and added Jochen as CC.\n\nAs I said in the comment immediately before this bug was reopened, we do not\ntrack all bugs in a single bug report. Please open new reports for new bugs."
  ],
  "commentCreationDates": [
    "2002-04-08T10:45:17+02:00",
    "2002-04-12T15:47:37+02:00",
    "2002-04-15T09:06:57+02:00",
    "2002-04-15T16:18:28+02:00",
    "2002-04-16T10:51:15+02:00",
    "2002-05-14T04:59:48+02:00",
    "2002-05-14T05:00:10+02:00",
    "2002-05-14T10:25:30+02:00",
    "2002-05-14T10:31:06+02:00",
    "2002-05-14T12:20:04+02:00",
    "2002-05-14T14:19:36+02:00",
    "2002-05-14T14:32:37+02:00",
    "2002-05-14T14:42:17+02:00",
    "2002-05-15T16:54:06+02:00",
    "2002-05-16T07:30:54+02:00",
    "2002-05-16T21:43:55+02:00",
    "2002-05-16T22:12:13+02:00",
    "2002-05-16T22:12:35+02:00",
    "2002-05-20T22:29:48+02:00",
    "2002-05-21T09:53:31+02:00",
    "2002-05-21T10:04:30+02:00",
    "2002-05-21T18:02:48+02:00",
    "2002-05-24T04:38:26+02:00",
    "2002-05-24T14:50:09+02:00",
    "2002-05-24T15:21:08+02:00",
    "2002-06-20T21:44:11+02:00",
    "2002-06-21T10:44:53+02:00",
    "2002-07-01T15:35:44+02:00",
    "2002-07-02T02:52:20+02:00",
    "2002-07-02T03:25:15+02:00",
    "2002-07-02T09:07:20+02:00",
    "2002-07-02T18:11:52+02:00",
    "2002-07-02T18:34:02+02:00",
    "2002-07-02T19:33:45+02:00",
    "2002-07-02T22:37:24+02:00",
    "2002-07-03T04:02:53+02:00",
    "2002-07-03T15:16:13+02:00",
    "2002-07-03T15:41:30+02:00",
    "2002-07-03T17:19:42+02:00",
    "2002-07-03T17:29:40+02:00",
    "2002-07-03T17:40:10+02:00",
    "2002-07-08T16:56:05+02:00",
    "2002-07-08T16:56:24+02:00",
    "2002-07-10T11:41:47+02:00",
    "2002-07-10T12:22:35+02:00",
    "2002-07-10T17:54:14+02:00",
    "2002-07-10T18:27:20+02:00",
    "2002-07-11T07:25:17+02:00",
    "2002-07-11T15:26:36+02:00",
    "2002-07-11T15:29:49+02:00",
    "2002-07-12T10:18:01+02:00",
    "2002-07-17T09:39:54+02:00",
    "2002-07-17T16:23:27+02:00",
    "2002-09-26T17:21:27+02:00",
    "2002-09-26T17:28:36+02:00",
    "2003-02-03T10:51:53+01:00",
    "2003-02-03T15:16:49+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.InternalError",
      "message": "Got event of unknown type",
      "elements": [
        {
          "method": "org.eclipse.jdi.internal.request.EventRequestManagerImpl.findRequest",
          "source": "EventRe questManagerImpl.java:498"
        },
        {
          "method": "org.eclipse.jdi.internal.event.EventImpl.read",
          "source": "EventImpl.java:153"
        },
        {
          "method": "org.eclipse.jdi.internal.event.EventSetImpl.read",
          "source": "EventSetImpl.java:147"
        },
        {
          "method": "org.eclipse.jdi.internal.event.EventQueueImpl.remove",
          "source": "EventQueueImpl.java:59"
        },
        {
          "method": "org.eclipse.jdi.internal.event.EventQueueImpl.remove",
          "source": "EventQueueImpl.java:42"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.EventDispatcher.run",
          "source": "EventDispatcher.java :194"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:536"
        }
      ],
      "number": 0,
      "commentIndex": 43,
      "bugId": "12966",
      "date": "2002-07-10T11:41:47+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "12966",
  "bugId": "12966",
  "date": "2002-04-08T10:45:17+02:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "normal"
}