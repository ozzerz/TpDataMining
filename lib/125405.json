{
  "comments": [
    "To reproduce: Create a new AspectJ project, and create a new aspect:\n\npackage test;\n\npublic aspect ATest\n{\n    // main\n    public static void main(String[] args) {\n\n    }\n}\n\u003d\u003d\u003d\u003d\nThen, write ATest\u003cT\u003e instead of just ATest and then save.\n\nYou should now get the warning:\n2\tonly abstract aspects can have type parameters\tATest.aj\n\nSo far so good. Now, remove the newly added \"\u003cT\u003e\" and save again. This should happen:\n\njava.lang.IllegalStateException\nat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:605)\nat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:590)\nat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:421)\nat org.aspectj.weaver.ResolvedType.getDeclaredAdvice(ResolvedType.java:699)\nat org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers(ResolvedType.java:736)\nat org.aspectj.weaver.ResolvedType.collectShadowMungers(ResolvedType.java:572)\nat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:501)\nat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:66)\nat org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:439)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:283)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nIllegalStateException thrown: Can\u0027t ask to parameterize a member of non-generic type: test.ATest  kind(raw)",
    "I think the problem here is that after the failed build we don\u0027t discard the ATest type properly, leaving an entry in the type map for its incorrect generic form.  On the subsequent compile we then treat it as the raw form of the generic type - it isnt, it is just a simple type so we go bang.",
    "damn I\u0027m good.  Exactly as suspected - although it is invalid as a generic aspect (since its non-abstract), the simple type that was in the typemap is promoted during the failing compile by the code in EclipseFactory.addSourceTypeBinding() - this process is never undone and the typemap entry is not replaced.  I am currently testing a demotion scheme so that if it goes back to being non-generic we repair the typemap entry.",
    "fix checked in. waiting on build.",
    "fix available."
  ],
  "commentCreationDates": [
    "2006-01-26T22:09:49+01:00",
    "2006-01-27T08:40:24+01:00",
    "2006-01-27T10:28:24+01:00",
    "2006-01-27T11:56:48+01:00",
    "2006-01-31T14:21:40+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "elements": [
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:605"
        },
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:590"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getDeclaredMethods",
          "source": "ReferenceType.java:421"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.getDeclaredAdvice",
          "source": "ResolvedType.java:699"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers",
          "source": "ResolvedType.java:736"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.collectShadowMungers",
          "source": "ResolvedType.java:572"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers",
          "source": "ResolvedType.java:501"
        },
        {
          "method": "org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect",
          "source": "CrosscuttingMembersSet.java:66"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave",
          "source": "BcelWeaver.java:439"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:283"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:178"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:811"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:254"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:163"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "125405",
      "date": "2006-01-26T22:09:49+01:00",
      "product": "AspectJ",
      "component": "IDE",
      "severity": "normal"
    }
  ],
  "groupId": "125405",
  "bugId": "125405",
  "date": "2006-01-26T22:09:49+01:00",
  "product": "AspectJ",
  "component": "IDE",
  "severity": "normal"
}