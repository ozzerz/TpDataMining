{
  "comments": [
    "Seen on both Win32 and Linux-Motif\n\nI\u0027ve been working with the visible region support lately and having problems\nwith properly synchronizing text updates between a full view of my input and a\nvisible region subset of the input.  I finally ran across it in the Java editor.\n\nTo reproduce it, open the Java editor on a .java source file and make sure there\nare at least least two methods defined.  Toggle the \"Show Source of Selected\nElement Only\" action from the toolbar and select the method further down in the\nfile.  Now open a New Window and the same file within it.  Now invoke Format on\nthe editor within the new window.  You\u0027ll get a massive exception like below and\nthe editor in the original window will be unusable.\n\njava.lang.IllegalArgumentException: Argument not valid\n\tat org.eclipse.swt.SWT.error(SWT.java:2105)\n\tat org.eclipse.jface.text.DocumentAdapter.getLine(DocumentAdapter.java(Compiled\nCode))\n\tat org.eclipse.jface.text.DocumentAdapter.getLine(DocumentAdapter.java(Compiled\nCode))\n\tat\norg.eclipse.swt.custom.StyledText$ContentWidthCache.calculate(StyledText.java(Compiled\nCode))\n\tat org.eclipse.swt.custom.StyledText.calculateContentWidth(StyledText.java:1648)\n\tat org.eclipse.swt.custom.StyledText.reset(StyledText.java:5949)\n\tat org.eclipse.swt.custom.StyledText.handleTextSet(StyledText.java:4859)\n\tat org.eclipse.swt.custom.StyledText$6.textSet(StyledText.java:4333)\n\tat org.eclipse.jface.text.DocumentAdapter.fireTextSet(DocumentAdapter.java:296)\n\tat org.eclipse.jface.text.DocumentAdapter.documentChanged(DocumentAdapter.java:229)\n\tat\norg.eclipse.jface.text.AbstractDocument.fireDocumentChanged(AbstractDocument.java:539)\n\tat org.eclipse.jface.text.ChildDocument.fireDocumentChanged(ChildDocument.java:242)\n\tat\norg.eclipse.jface.text.ChildDocument.parentDocumentChanged(ChildDocument.java:213)\n\tat\norg.eclipse.jface.text.ChildDocumentManager.fireDocumentEvent(ChildDocumentManager.java:293)\n\tat\norg.eclipse.jface.text.ChildDocumentManager.documentChanged(ChildDocumentManager.java:305)\n\tat\norg.eclipse.jface.text.AbstractDocument.fireDocumentChanged(AbstractDocument.java:549)\n\tat org.eclipse.jface.text.AbstractDocument.replace(AbstractDocument.java:841)\n\tat\norg.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider$PartiallySynchronizedDocument.replace(CompilationUnitDocumentProvider.java:733)\n\tat\norg.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:432)\n\tat\norg.eclipse.jface.text.formatter.ContentFormatter.formatRegion(ContentFormatter.java:336)\n\tat\norg.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:300)\n\tat org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:421)\n\tat\norg.eclipse.jdt.internal.ui.text.correction.JavaCorrectionSourceViewer.doOperation(JavaCorrectionSourceViewer.java:50)\n\tat\norg.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:228)\n\tat\norg.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:119)\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:66)\n\tat org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:117)\n\tat org.eclipse.jface.action.Action.runWithEvent(Action.java:749)\n\tat org.eclipse.ui.actions.RetargetAction.runWithEvent(RetargetAction.java:179)\n\tat org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:185)\n\tat\norg.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)\n\tat\norg.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)\n\tat\norg.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)\n\tat\norg.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:1326)\n\tat\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:831)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:462)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:247)\n\tat org.eclipse.core.launcher.Main.run(Main.java:703)\n\tat org.eclipse.core.launcher.Main.main(Main.java:539)",
    "I\u0027m seeing similar stack traces on N20021209 using regular Java editors with \nno change to \"Show Source of Selected Element Only\".\n\n!ENTRY org.eclipse.ui 4 0 Dec 09, 2002 15:37:36.635\n!MESSAGE Argument not valid\n!STACK 0\njava.lang.IllegalArgumentException: Argument not valid\n\tat org.eclipse.swt.SWT.error(SWT.java:2166)\n\tat org.eclipse.swt.SWT.error(SWT.java:2110)\n\tat org.eclipse.jface.text.DocumentAdapter.getLine(DocumentAdapter.java\n(Compiled Code))\n\tat org.eclipse.swt.custom.StyledText$ContentWidthCache.calculate\n(StyledText.java(Compiled Code))\n\tat org.eclipse.swt.custom.StyledText.redraw(StyledText.java(Compiled \nCode))\n\tat org.eclipse.swt.custom.StyledText.draw(StyledText.java:3329)\n\tat org.eclipse.swt.custom.StyledText.redrawLines(StyledText.java:6032)\n\tat org.eclipse.swt.custom.StyledText.internalRedrawRange\n(StyledText.java:4950)\n\tat org.eclipse.swt.custom.StyledText.doSelection(StyledText.java:3127)\n\tat org.eclipse.swt.custom.StyledText.doMouseSelection\n(StyledText.java:2912)\n\tat org.eclipse.swt.custom.StyledText.doMouseLocationChange\n(StyledText.java:2893)\n\tat org.eclipse.swt.custom.StyledText$12.handleEvent(StyledText.java\n(Compiled Code))\n\tat org.eclipse.swt.custom.StyledText$12.handleEvent(StyledText.java\n(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java\n(Compiled Code))\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java\n(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java\n(Compiled Code))\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:1388)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:841)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:462)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:247)\n\tat org.eclipse.core.launcher.Main.run(Main.java:703)\n\tat org.eclipse.core.launcher.Main.main(Main.java:539)",
    "That\u0027s in 2.0.2 as well?",
    "This should be solved in 20030107. Dani, please confirm.",
    "We have fixed a problem in that area but it does not fully fix the described\nscenario: a different exception is thrown now (see attached .log).\n",
    "Created an attachment (id\u003d2970)\n.log\n",
    "The same happens when \"Organize Import\" is used.\n\u003d\u003d\u003e Most likely an editor and not a formatter bug.\n\nNote: Everything works fine if not the last method is selected.\n",
    "After fixing bug 29706 and bug 28777 it turns out to be a formatter bug:\nThe formatter does not update the positions correctly.\n1. Create the following CU:\npublic class X {\n\tvoid foo() {\n\t}\n\tvoid foo2() {\n\t}\n}\n2. Put a breakpoint in format(String, int, int[], String) - formatSourceString\n3. Repeat the steps as outlined in the initial bug report.\n   \u003d\u003d\u003e it will hit the breakpoint\n4. Observe: the positions passed to the formatter are:\n   [13, 14, 18, 24, 27, 30, 33, 35, 35, 35, 35, 37]\n   The text to be formatted is:\n   \"public class X {\\r\\n\\tvoid foo() {\\r\\n\\t}\\r\\n\\tvoid foo2() {\\r\\n\\t}\\r\\n}\"\n5. In the Debugger press \"Step Over\"\n6. Observe:\n   The formatted text is the same as the input text (i.e. nothing changed):\n   \"public class X {\\r\\n\\tvoid foo() {\\r\\n\\t}\\r\\n\\tvoid foo2() {\\r\\n\\t}\\r\\n}\"\n   BUT: the positions were modified:\n   [13, 15, 19, 24, 27, 30, 34, 38, 38, 38, 38, 38]\n\nThis results in corrupt segmented view.\n",
    "Olivier - pls investigate the position mapping issue.",
    "All positions that are \"incorrectly\" mapped are whitespaces. Why do we get\nwhitespaces positions to map? All the whitespaces positions are mapped to the\nnext non-whitespaces character position.\n",
    "Whitespaces are not mapped, because the code formatter is responsible for\npreserving them. We will update the javadoc of the ICodeFormatter to specify\nthat only positions in tokens (non-whitespaces) can be mapped.\n",
    "What do you mean by white space positions?\n\nOne position (18) is for example denoting the start of a child document (e.g.\nfoo() in our example). As you can see the source of foo() starts with a tab\nwhich is a white space. Since formatting does not change the source at all the\nposition should still start with the whitespace i.e. be 18 and not 19.\n\n",
    "You can\u0027t simply change the contract. It is essential that those positions are\nupdated and handle the white spaces since formatting is mostly about such (white\nspace) changes.\n",
    "The formatter doesn\u0027t map whitespaces positions. These positions are mapped to \nthe beginning of the next token. In your example, 18 is a tabulation. So the \nmapped position will be the start of the next token. In this case the position \nof \u0027f\u0027 in foo. A code formatter doesn\u0027t necessary preverve the tabulations or \nspaces in general. Therefore spaces cannot be expected to be mapped to a space.\nThe fact that the resulting source didn\u0027t change is not a reason why the \npositions should not changed. We map any positions inside tokens. Simply not \nthe whitespaces.\n",
    "This isn\u0027t a contract change. The current behavior is the one we designed it \nfor.\n\nBTW, what positions to map are actually inside blanks ? This has never worked \nin the past, i.e. how could marker be located in blanks ?\n\nSo in brief, the formatter is just working as designed. Changing this at this \nstage isn\u0027t possible. Furthermore, mapping blanks would be likely asking for \ntrouble, since the formatter is changing them anyway (this is what formatting \nis all about).",
    "I ensured that a position cannot be mapped beyond the end of compilation unit. I\ndon\u0027t know if this can help in this case. The highest value is\nformattedSource.length() - 1 even if the original position was beyond the end of\nthe source.",
    "The concrete problem in this PR is that the positions denoting the child\ndocument (\u003d method source) are changed so that the child document would assume\n[TAB]void foo() {\n[TAB]}\nbecoming\nvoid foo() {\n[TAB]}[TAB]\nbut since the source didn\u0027t change the method is still\n[TAB]void foo() {\n[TAB]}\nresulting an out of synch state.\n\nWe could fix this concrete problem by assuming child positions being at the\nbeginning of a line i.e. set the position offset to the beginning of the line if\nit isn\u0027t already but that would not be the right fix since other positions (e.g.\nfor bookmarks) can result in same failure and don\u0027t allow to make the same\nassumption.",
    "If you give the source range for:\nvoid foo() {\n[TAB]}\n\nyou should get the updated positions for this (you need to get rid of the extra\ntab in front of void). I don\u0027t see what we can do in this case.\n",
    "The problem is that the formatter is about (re-)moving whitespaces. Even if we\nwould be smart and give you the position where \"void\" starts, how would we know\nif the formatter removed the TAB or not?\n",
    "This is exactly why a position should never point to a whitespace. They might \nnot be preserved by the formatter. So for me the problem comes from there. If \nyou provide the position where \u0027void\u0027 starts, then we should map it to the new \nposition where \u0027void\u0027 starts. And then I don\u0027t see why this is a problem. If \nyou go from \u0027void\u0027 to \u0027}\u0027, you will get the updated positions for this range. \nThen it is a matter of replacing a piece of code with another one.",
    "\u003eThis is exactly why a position should never point to a whitespace. They might \n\u003enot be preserved by the formatter.\nWe need to be informed about such a change somehow because the formatter is the\nonly one who knows if a whitespace was (re-)moved.\n",
    "The code formatter has to respect an API which is an extension point. The \npositions collection is there in order to map old positions to new positions. \nThis is the only contract the formatter is supposed to respect. Whitespaces are \nnot mapped because they might not be there anymore.\nThe code formatter takes an input with positions to map and return the \nformatted source with mapped positions. This is it! You have to fix the problem \nwith this information. We CANNOT give more feedback.\n ",
    "The code formatter contract will not change. UI has to workaround for positions \nit cares about inside blanks. We fixed the spec to make this behavior official.\n\nBack to jdt/ui.",
    "Fixed two things:\n1) Problem in ChildDocument: the positions for the child document in the parent\ndocument were updated but the document event was not aware of that. We now fix\nthe event in such cases.\n\n2) Position offsets for child documents are reset to the beginning of the line\nafter formatting (and length is adapted to new offset).\n\nAvailable in builds \u003e N20030212\n\n",
    "Verified in 3.1RC3."
  ],
  "commentCreationDates": [
    "2002-12-09T20:20:19+01:00",
    "2002-12-09T21:23:58+01:00",
    "2002-12-09T21:45:19+01:00",
    "2003-01-14T09:32:26+01:00",
    "2003-01-14T10:18:13+01:00",
    "2003-01-14T10:19:20+01:00",
    "2003-01-15T16:38:26+01:00",
    "2003-01-20T16:52:03+01:00",
    "2003-01-21T08:29:52+01:00",
    "2003-01-21T14:31:29+01:00",
    "2003-01-21T14:39:26+01:00",
    "2003-01-21T14:42:19+01:00",
    "2003-01-21T14:47:09+01:00",
    "2003-01-21T14:54:46+01:00",
    "2003-01-21T14:59:28+01:00",
    "2003-01-21T20:39:19+01:00",
    "2003-01-22T07:31:16+01:00",
    "2003-01-22T13:42:14+01:00",
    "2003-01-22T13:59:40+01:00",
    "2003-01-22T14:07:49+01:00",
    "2003-01-22T14:22:41+01:00",
    "2003-01-22T14:56:51+01:00",
    "2003-01-22T17:36:25+01:00",
    "2003-02-12T09:57:55+01:00",
    "2005-06-23T21:13:19+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Argument not valid",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2105"
        },
        {
          "method": "org.eclipse.jface.text.DocumentAdapter.getLine",
          "source": "DocumentAdapter.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.jface.text.DocumentAdapter.getLine",
          "source": "DocumentAdapter.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText$ContentWidthCache.calculate",
          "source": "StyledText.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.calculateContentWidth",
          "source": "StyledText.java:1648"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.reset",
          "source": "StyledText.java:5949"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.handleTextSet",
          "source": "StyledText.java:4859"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText$6.textSet",
          "source": "StyledText.java:4333"
        },
        {
          "method": "org.eclipse.jface.text.DocumentAdapter.fireTextSet",
          "source": "DocumentAdapter.java:296"
        },
        {
          "method": "org.eclipse.jface.text.DocumentAdapter.documentChanged",
          "source": "DocumentAdapter.java:229"
        },
        {
          "method": "org.eclipse.jface.text.AbstractDocument.fireDocumentChanged",
          "source": "AbstractDocument.java:539"
        },
        {
          "method": "org.eclipse.jface.text.ChildDocument.fireDocumentChanged",
          "source": "ChildDocument.java:242"
        },
        {
          "method": "org.eclipse.jface.text.ChildDocument.parentDocumentChanged",
          "source": "ChildDocument.java:213"
        },
        {
          "method": "org.eclipse.jface.text.ChildDocumentManager.fireDocumentEvent",
          "source": "ChildDocumentManager.java:293"
        },
        {
          "method": "org.eclipse.jface.text.ChildDocumentManager.documentChanged",
          "source": "ChildDocumentManager.java:305"
        },
        {
          "method": "org.eclipse.jface.text.AbstractDocument.fireDocumentChanged",
          "source": "AbstractDocument.java:549"
        },
        {
          "method": "org.eclipse.jface.text.AbstractDocument.replace",
          "source": "AbstractDocument.java:841"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider$PartiallySynchronizedDocument.replace",
          "source": "CompilationUnitDocumentProvider.java:733"
        },
        {
          "method": "org.eclipse.jface.text.formatter.ContentFormatter.format",
          "source": "ContentFormatter.java:432"
        },
        {
          "method": "org.eclipse.jface.text.formatter.ContentFormatter.formatRegion",
          "source": "ContentFormatter.java:336"
        },
        {
          "method": "org.eclipse.jface.text.formatter.ContentFormatter.format",
          "source": "ContentFormatter.java:300"
        },
        {
          "method": "org.eclipse.jface.text.source.SourceViewer.doOperation",
          "source": "SourceViewer.java:421"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionSourceViewer.doOperation",
          "source": "JavaCorrectionSourceViewer.java:50"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation",
          "source": "CompilationUnitEditor.java:228"
        },
        {
          "method": "org.eclipse.ui.texteditor.TextOperationAction$1.run",
          "source": "TextOperationAction.java:119"
        },
        {
          "method": "org.eclipse.swt.custom.BusyIndicator.showWhile",
          "source": "BusyIndicator.java:66"
        },
        {
          "method": "org.eclipse.ui.texteditor.TextOperationAction.run",
          "source": "TextOperationAction.java:117"
        },
        {
          "method": "org.eclipse.jface.action.Action.runWithEvent",
          "source": "Action.java:749"
        },
        {
          "method": "org.eclipse.ui.actions.RetargetAction.runWithEvent",
          "source": "RetargetAction.java:179"
        },
        {
          "method": "org.eclipse.ui.internal.WWinPluginAction.runWithEvent",
          "source": "WWinPluginAction.java:185"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:407"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent",
          "source": "ActionContributionItem.java:361"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$0",
          "source": "ActionContributionItem.java:352"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent",
          "source": "ActionContributionItem.java:47"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:1326"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:831"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:462"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:247"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:703"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:539"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "27976",
      "date": "2002-12-09T20:20:19+01:00",
      "product": "JDT",
      "component": "UI",
      "severity": "critical"
    },
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Argument not valid",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2166"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2110"
        },
        {
          "method": "org.eclipse.jface.text.DocumentAdapter.getLine",
          "source": "DocumentAdapter.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText$ContentWidthCache.calculate",
          "source": "StyledText.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.redraw",
          "source": "StyledText.java(Compiled  Code)"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.draw",
          "source": "StyledText.java:3329"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.redrawLines",
          "source": "StyledText.java:6032"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.internalRedrawRange",
          "source": "StyledText.java:4950"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.doSelection",
          "source": "StyledText.java:3127"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.doMouseSelection",
          "source": "StyledText.java:2912"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.doMouseLocationChange",
          "source": "StyledText.java:2893"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText$12.handleEvent",
          "source": "StyledText.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText$12.handleEvent",
          "source": "StyledText.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java (Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:1388"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:841"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:462"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:247"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:703"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:539"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "27976",
      "date": "2002-12-09T21:23:58+01:00",
      "product": "JDT",
      "component": "UI",
      "severity": "critical"
    }
  ],
  "groupId": "27976",
  "bugId": "27976",
  "date": "2002-12-09T20:20:19+01:00",
  "product": "JDT",
  "component": "UI",
  "severity": "critical"
}