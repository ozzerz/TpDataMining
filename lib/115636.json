{
  "comments": [
    "The following code is miscompiled by eclipse:\n\n-- code start --\npackage com.coretrek.test;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class EclipseBug {\n\n    public static void main(String[] args) {\n        System.out.println(\"OK here we go\");\n        CrashMe crash \u003d new CrashMe();\n        System.out.println(\"OK that was fun\");\n    }\n    \n\n    public static class CrashMe {\n        public boolean failsToVerify() {\n            boolean theBool; // \u003d false ;\n            try {\n                    theBool \u003d true;\n            }\n            finally {\n                try {\n                    new FileInputStream(\"/\");\n                }\n                catch (IOException ioE) {\n                    theBool \u003d false;\n                }\n            }\n            return  theBool;\n        }\n\n    }\n}\n-- code end --\n\nExpected output:\nOK here we go\nOK that was fun\n\nActual output:\nOK here we go\nException in thread \"main\" java.lang.VerifyError: (class:\ncom/coretrek/test/EclipseBug$CrashMe, method: failsToVerify signature: ()Z)\nRegister 1 contains wrong type\n\tat com.coretrek.test.EclipseBug.main(EclipseBug.java:10)\n\nThe project\u0027s compiler settings are set up to use compiler compliance level: 1.4\nand the sun JDK 1.4.2_09\n\nWorkaround:\nChange the following line:\n\"            boolean theBool; // \u003d false ;\"\nto\n\"            boolean theBool \u003d false ;\"\n\nAlternative workaround:\nUse javac from sun JDK to compile.",
    "I will investigate.",
    "It appears that the option \"inline finally block\" under \"classfile generation\"\nmatters. The bug only appears when this option is unchecked.\n",
    "Closing as a dup of bug 106402.\nlatest jdk1.4.2 and jdk1.5 don\u0027t use the jsr/ret bytecodes anymore. So if you\ncompare with javac, you should use the option to inline subroutines. And as you\nmentionned, in this case it works fine.\n\n\n*** This bug has been marked as a duplicate of 106402 ***",
    "\u003e Workaround:\n\u003e Change the following line:\n\u003e \"            boolean theBool; // \u003d false ;\"\n\u003e to\n\u003e \"            boolean theBool \u003d false ;\"\n\u003e \n\u003e Alternative workaround:\n\u003e Use javac from sun JDK to compile.\nHad same problem today (2006-04-06)!\nHappened also with clean (ant) recompile using Sun jdk1.4.2_10.\nThe workaround works for both.",
    "There is nothing we can do to fix this.\nThe problem comes from the bytecode verifier. It believes there is a path in the bytecode that can reach the return theBool; statement without having a value in theBool variable."
  ],
  "commentCreationDates": [
    "2005-11-09T14:39:21+01:00",
    "2005-11-09T14:50:01+01:00",
    "2005-11-09T14:54:57+01:00",
    "2005-11-09T15:03:33+01:00",
    "2006-04-06T15:37:39+02:00",
    "2006-04-06T15:52:27+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.VerifyError",
      "message": "(class: com/coretrek/test/EclipseBug$CrashMe, method: failsToVerify signature: ()Z) Register 1 contains wrong type",
      "elements": [
        {
          "method": "com.coretrek.test.EclipseBug.main",
          "source": "EclipseBug.java:10"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "115636",
      "duplicateId": "106402",
      "date": "2005-11-09T14:39:21+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "106402",
  "bugId": "115636",
  "duplicateId": "106402",
  "date": "2005-11-09T14:39:21+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}