{
  "comments": [
    "From mailing list...\nI think we should get an error \u0027Type T cant be found\u0027 and it should be possible\nto provide a default implementation for a generic method specified on an interface.\n\n\u003d\u003d\u003d\u003d\n\nI have an error in ExtendProduct aspect on method getTarget(). I give\nthe code below\nDoes somebody have an idea?\nThis error is :\ncan\u0027t override Link\u003cRevision\u003e AssociationSource\u003cRevision\u003e.getTarget()\nwith Link\u003cT\u003e AssociationSource.getTarget() return types don\u0027t match\n\nMoreover, one advice having a generic type of return gives a similar error.\nWas this feature implemented in the last version of apectj.\nThanks.\nSt?phane Chomat.\n\nThis sample code :\n\npublic class Link\u003cT\u003e extends SoftReference {\n\n   @SuppressWarnings(\"unchecked\")\n   Link(List\u003cT\u003e endPoints) {\n       super(endPoints);\n   }\n\n   @SuppressWarnings(\"unchecked\")\n   public List\u003cT\u003e getEndPoints() {\n       return (List\u003cT\u003e)get();\n   }\n\n}\n\ninterface AssociationSource\u003cT\u003e {\n\n       public Link\u003cT\u003e getTarget();\n\n       public void setTarget(Link\u003cT\u003e _target);\n\n}\n\naspect ExtendProduct {\n       Link\u003cT\u003e AssociationSource._target \u003d null;\n\n       public Link\u003cT\u003e AssociationSource.getTarget() {\n           return _target;\n       }\n\n       public void AssociationSource.setTarget(Link\u003cT\u003e _target) {\n           this._target \u003d _target;\n       }\n\n       declare parents : ProductType implements\nAssociationSource\u003cProduct\u003e;\n       declare parents : Product     implements AssociationSource\u003cBranch\u003e;\n       declare parents : Branch      implements\nAssociationSource\u003cRevision\u003e;\n}",
    "Ok, i\u0027ve started on this bug - on my way to looking at the real problem I\u0027m\nfailing with an NPE for this program:\n\nimport java.lang.annotation.*;\nimport java.lang.ref.*;\n\nclass Product{}\nclass ProductType{}\n\ninterface AssociationSource\u003cT\u003e {\n\n  Link\u003cT\u003e getTarget();\n\n  void setTarget(Link\u003cT\u003e _target);\n\n}\naspect ExtendProduct {\n       Link\u003cT\u003e AssociationSource._target \u003d null;\n\n       public Link\u003cT\u003e AssociationSource.getTarget() {\n           return _target;\n       }\n\n       public void AssociationSource.setTarget(Link\u003cT\u003e _target) {\n           this._target \u003d _target;\n       }\n\n       declare parents : ProductType implements AssociationSource\u003cProduct\u003e;\n       declare parents : Product     implements AssociationSource\u003cBranch\u003e;\n       declare parents : Branch      implements AssociationSource\u003cRevision\u003e;\n}\n\nclass Link\u003cT\u003e extends SoftReference {\n\n   @SuppressWarnings(\"unchecked\")\n   Link(List\u003cT\u003e endPoints) {\n       super(endPoints);\n   }\n\n   @SuppressWarnings(\"unchecked\")\n   public List\u003cT\u003e getEndPoints() {\n       return (List\u003cT\u003e)get();\n   }\n\n}\n\nThe types \u0027Branch\u0027 and \u0027Revision\u0027 are missing from the program, but that\nshouldnt cause: \n\njava.lang.NullPointerException\n        at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addPare\nnt(AjLookupEnvironment.java:711)\n        at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDecla\nreParents(AjLookupEnvironment.java:576)\n        at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIn\nterTypeDeclarations(AjLookupEnvironment.java:462)\n        at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIn\ntertypes(AjLookupEnvironment.java:255)\n        at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\neTypeBindings(AjLookupEnvironment.java:179)\n        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n(Compiler.java:301)\n        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compil\ner.java:315)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat\nion(AjBuildManager.java:737)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuild\nManager.java:208)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu\nildManager.java:142)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n        at org.aspectj.tools.ajc.Main.run(Main.java:324)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:238)\n        at org.aspectj.tools.ajc.Main.main(Main.java:82)",
    "I\u0027ve not fixed that NPE yet, but the complete program is this:\n\nimport java.util.*;\nimport java.lang.annotation.*;\nimport java.lang.ref.*;\n\nclass Product{}\nclass ProductType{}\nclass Branch {}\nclass Revision {}\n\ninterface AssociationSource\u003cT\u003e {\n\n  Link\u003cT\u003e getTarget();\n\n  void setTarget(Link\u003cT\u003e _target);\n\n}\naspect ExtendProduct {\n       Link\u003cT\u003e AssociationSource\u003cT\u003e._target \u003d null;\n\n       public Link\u003cT\u003e AssociationSource\u003cT\u003e.getTarget() {\n           return _target;\n       }\n\n       public void AssociationSource\u003cT\u003e.setTarget(Link\u003cT\u003e _target) {\n           this._target \u003d _target;\n       }\n\n       declare parents : ProductType implements AssociationSource\u003cProduct\u003e;\n       declare parents : Product     implements AssociationSource\u003cBranch\u003e;\n       declare parents : Branch      implements AssociationSource\u003cRevision\u003e;\n}\n\nclass Link\u003cT\u003e extends SoftReference {\n\n   @SuppressWarnings(\"unchecked\")\n   Link(List\u003cT\u003e endPoints) {\n       super(endPoints);\n   }\n\n   @SuppressWarnings(\"unchecked\")\n   public List\u003cT\u003e getEndPoints() {\n       return (List\u003cT\u003e)get();\n   }\n\n}\n\nand this fails with:\n\nK:\\ws\\aspectj_ws3\\tests\\bugs150\\pr110307\u003eajc -1.5 Problem2.java\nK:\\ws\\aspectj_ws3\\tests\\bugs150\\pr110307\\Problem2.java:1 [error] can\u0027t override\nLink\u003cProduct\u003e AssociationSource\u003cProduct\u003e.getTarget() with Link\u003cT\u003e AssociationSou\nrce.getTarget() return types don\u0027t match\n(no source information available)\nK:\\ws\\aspectj_ws3\\tests\\bugs150\\pr110307\\Problem2.java:1 [error] can\u0027t override\nLink\u003cBranch\u003e AssociationSource\u003cBranch\u003e.getTarget() with Link\u003cT\u003e AssociationSourc\ne.getTarget() return types don\u0027t match\n(no source information available)\nK:\\ws\\aspectj_ws3\\tests\\bugs150\\pr110307\\Problem2.java:1 [error] can\u0027t override\nLink\u003cRevision\u003e AssociationSource\u003cRevision\u003e.getTarget() with Link\u003cT\u003e AssociationS\nource.getTarget() return types don\u0027t match\n(no source information available)\nK:\\ws\\aspectj_ws3\\tests\\bugs150\\pr110307\\Problem2.java:20 [error] can\u0027t override\n Link\u003cRevision\u003e AssociationSource\u003cRevision\u003e.getTarget() with Link\u003cT\u003e Association\nSource.getTarget() return types don\u0027t match\npublic Link\u003cT\u003e AssociationSource.getTarget() {\n                                 ^^^\nK:\\ws\\aspectj_ws3\\tests\\bugs150\\pr110307\\Problem2.java:20 [error] can\u0027t override\n Link\u003cBranch\u003e AssociationSource\u003cBranch\u003e.getTarget() with Link\u003cT\u003e AssociationSour\nce.getTarget() return types don\u0027t match\npublic Link\u003cT\u003e AssociationSource.getTarget() {\n                                 ^^^\nK:\\ws\\aspectj_ws3\\tests\\bugs150\\pr110307\\Problem2.java:20 [error] can\u0027t override\n Link\u003cProduct\u003e AssociationSource\u003cProduct\u003e.getTarget() with Link\u003cT\u003e AssociationSo\nurce.getTarget() return types don\u0027t match\npublic Link\u003cT\u003e AssociationSource.getTarget() {\n                                 ^^^\n\n6 errors\n",
    "The NPE is fixed.\n\nThe other problem occurs because we don\u0027t parameterize ITDs for application to a\nparticular type.  E.g.\n\nList\u003cT\u003e I\u003cT\u003e.foo() { return null; }\n\nwhen a type A that looks like this:\n\nclass A implements I\u003cString\u003e {}\n\nhas matched, should be targetted with a parameterized form of the ITD:\n\nList\u003cString\u003e I.foo() { return null; }\n\ni\u0027m in progress of fixing this.",
    "I\u0027ve created multiple cases for this problem, they are in CVS and I\u0027m working\nthrough them - the full description of what I am doing is going into bug 112105",
    "Fixed all interesting cases covered by this bug ... bug 112105 will now continue\nthe ITD generics work.  Closing this one when build is through...",
    "yey!  fix available."
  ],
  "commentCreationDates": [
    "2005-09-22T14:29:43+02:00",
    "2005-09-26T16:30:11+02:00",
    "2005-09-26T16:35:47+02:00",
    "2005-09-29T12:17:06+02:00",
    "2005-10-17T14:58:36+02:00",
    "2005-10-18T10:25:05+02:00",
    "2005-10-20T16:30:26+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addParent",
          "source": "AjLookupEnvironment.java:711"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents",
          "source": "AjLookupEnvironment.java:576"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations",
          "source": "AjLookupEnvironment.java:462"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes",
          "source": "AjLookupEnvironment.java:255"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings",
          "source": "AjLookupEnvironment.java:179"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile",
          "source": "Compiler.java:301"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compil er.java:315"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:737"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuild Manager.java:208"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBu ildManager.java:142"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:112"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:60"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:324"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:238"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:82"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "110307",
      "date": "2005-09-26T16:30:11+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "110307",
  "bugId": "110307",
  "date": "2005-09-22T14:29:43+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}