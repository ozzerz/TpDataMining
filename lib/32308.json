{
  "comments": [
    "Build: I20030218\n\nI noticed several instances of the stack trace below in my log file.  It looks\nlike the decorator thread is tripping on phantoms.  Trying to get session\nproperties on a phantom (non-local) resource results in a core exception.  I\nthink SessionPropertySyncInfoCache.getCachedSyncBytes should check if the\nresource is local before trying to get the sync info.\n\norg.eclipse.core.internal.resources.ResourceException: Resource\n/org.eclipse.core.tests.resources/MultipleProjectTestFiles/org.eclipse.platform.win32.source\nis not local.\n\tat\norg.eclipse.core.internal.resources.Resource.checkLocal(Resource.java(Compiled\nCode))\n\tat\norg.eclipse.core.internal.resources.Resource.getSessionProperty(Resource.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.SessionPropertySyncInfoCache.getCachedSyncBytes(SessionPropertySyncInfoCache.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.getCachedSyncBytes(EclipseSynchronizer.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.getSyncBytes(EclipseSynchronizer.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseResource.getSyncBytes(EclipseResource.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseResource.isManaged(EclipseResource.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.members(EclipseFolder.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.determineDirtyCount(EclipseFolder.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified(EclipseFolder.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.determineDirtyCount(EclipseFolder.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified(EclipseFolder.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.isDirty(CVSLightweightDecorator.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.decorate(CVSLightweightDecorator.java(Compiled\nCode))\n\tat\norg.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.decorate(CVSLightweightDecorator.java(Compiled\nCode))\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java(Compiled\nCode))\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java(Compiled\nCode))\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java(Compiled\nCode))\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java(Compiled\nCode))\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java(Compiled\nCode))\n\tat\norg.eclipse.ui.internal.decorators.DecorationScheduler$3.run(DecorationScheduler.java(Compiled\nCode))\n\tat\norg.eclipse.ui.internal.decorators.DecorationScheduler$3.run(DecorationScheduler.java(Compiled\nCode))\n\tat java.lang.Thread.run(Thread.java:498)",
    "*** Bug 32309 has been marked as a duplicate of this bug. ***",
    "This is happening because the CVS decorator no longer acquires the workspace \nlock. It is possible that a resource is being deleted at the same time it is \nbeing decorated. The resource exists when the sync info storage type is \ndetermined (i.e. session property vs. phantom) but is deleted by the time the \nsync info is requested. The only way to prevent this is to acquire the \nworkspace lock (i.e even the code \"if (resource.exists()) \nresource.getSessionProperty(...)\" can fail. Since this is not possible due to \nother deadlock scenarios, the only option I see is to catch the exception and \ndeal with it at that point. The core exception should have a code that \nindicates the type of exception and the CVSException.wrapException method \npropogates this code so the decoration (or the isModified method) can check the \ncode and handle the exception appropriatly (can it just be ignored?). ",
    "The only valid reasons for an exception from getSyncInfo are: does not exist, is\nnot local, and project not open.  All of these can be treated as if the resource\ndoes not exist.  It\u0027s probably safe to just swallow the exception and treat the\ncase as a non-existent resource.  Adding \"if (resource.isLocal())\" will catch\nmost of these cases though (and prevent a more costly exception from being thrown).",
    "Yes but, because we don\u0027t have the workspace lock, I think that the resource \ncan be deleted after the isLocal check but before the session property is \naccessed. Hence, although it is good to check before hand (I think we check \nexists(), perhaps we need to add an isLocal() check), we still need to catch \nand handle the exception.",
    "We do check exists().  Michael, I think you\u0027re right about the resource being \ndeleted (I got it with .project).\n\nPresumably just silently ignoring it is ok -- we were asked to decorate an item \nwhich no longer exists, so nothing to do.",
    "Added safe get/set session properties to SessionPropertyCache and exceptions are\nignored if they are because of a non-local or non-existing resource.\n\nWe can safely simply return null (e.g. there is nothing cached). \n\nReleased to HEAD."
  ],
  "commentCreationDates": [
    "2003-02-19T23:49:55+01:00",
    "2003-02-20T00:39:14+01:00",
    "2003-02-20T04:41:11+01:00",
    "2003-02-20T15:20:41+01:00",
    "2003-02-20T17:29:16+01:00",
    "2003-02-20T18:26:34+01:00",
    "2003-02-21T02:50:36+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Resource /org.eclipse.core.tests.resources/MultipleProjectTestFiles/org.eclipse.platform.win32.source is not local.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.resources.Resource.checkLocal",
          "source": "Resource.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.getSessionProperty",
          "source": "Resource.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.SessionPropertySyncInfoCache.getCachedSyncBytes",
          "source": "SessionPropertySyncInfoCache.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.getCachedSyncBytes",
          "source": "EclipseSynchronizer.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.getSyncBytes",
          "source": "EclipseSynchronizer.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseResource.getSyncBytes",
          "source": "EclipseResource.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseResource.isManaged",
          "source": "EclipseResource.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.members",
          "source": "EclipseFolder.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.determineDirtyCount",
          "source": "EclipseFolder.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified",
          "source": "EclipseFolder.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.determineDirtyCount",
          "source": "EclipseFolder.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified",
          "source": "EclipseFolder.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.isDirty",
          "source": "CVSLightweightDecorator.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.decorate",
          "source": "CVSLightweightDecorator.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.decorate",
          "source": "CVSLightweightDecorator.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate",
          "source": "LightweightDecoratorDefinition.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run",
          "source": "LightweightDecoratorManager.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate",
          "source": "LightweightDecoratorManager.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate",
          "source": "LightweightDecoratorManager.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$3.run",
          "source": "DecorationScheduler.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$3.run",
          "source": "DecorationScheduler.java(Compiled Code)"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:498"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "32308",
      "date": "2003-02-19T23:49:55+01:00",
      "product": "Platform",
      "component": "Team",
      "severity": "major"
    }
  ],
  "groupId": "32308",
  "bugId": "32308",
  "date": "2003-02-19T23:49:55+01:00",
  "product": "Platform",
  "component": "Team",
  "severity": "major"
}