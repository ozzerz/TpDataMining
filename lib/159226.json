{
  "comments": [
    "Hi,\n\nCan we have a sample program for saving \u0026 loading the diagram and the complete relationship created using GMF into a database?\n\nThanks \u0026 Regards,\nVijayan",
    "Adding Martin to the CC list, as yesterday he and I discussed this at ESE.  It seems he also has this on his list of things to do for Teneo.",
    "Hi,\nI have been looking into this a few times (using Teneo). It does not work right away. My first conclusion is that it is currently difficult for Teneo (because of mapping issues) to store the actual diagram. It should however be possible to read the data from a Teneo relational resource. \nBut I have difficulties finding the main hook were to direct that a Teneo resource is read instead of a file based resource.\nI have been using the mindmap tutorial. Are there any specific parts of gmf or the generated code which I can extend/adapt to direct the diagram editor to use a certain (emf) resource?\n\ngr. Martin",
    "Perhaps org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory will help?  Adding Alex to cc list, as I believe he\u0027s had some newsgroup discussions in the past on this subject.",
    "Rich, you are right! The correct place to hook into EMF is ResourceFactory - we have to register alternative ResourceFactories for both domain and diagram resources and then corresponding factories (provided by Teneo AFAIU) will be responsible for creating actual instances of Resources + EObjects on request from GMF.",
    "Thanks for the quick responses, is this possible with the current codebase/release?\nWould it be an idea to make this registration available as an extension(point)?\n\ngr. Martin\n\n",
    "It is possible via extension point. Take a look on \"org.eclipse.emf.ecore.extension_parser\" extension.",
    "Yes it works. I tested it based on the mindmap tutorial. In the scenario I tested the data was stored in a HibernateResource in the db and the diagram was stored in a local file.\n\nThe steps are very similar to the way the emf editor is initialized, see here:\nhttp://www.elver.org/hibernate/tutorialtwo/tutorial2_intro.html\n\nIs it a problem if the diagram and content are separated (one in a local file and one in a central database)? \nFor example if the data in the database is changed by other users/programs is the diagram editor able to reconcile most changes in the local diagram file (I tested a few smaller changes and it worked fine)?\n",
    "It should not be a problem. Currently generated implementation should be able to reconcile most of the changes in the domain model and the rest situations considered as bugs and will (should) be fixed.\n\nIt actually depends on the requirements ? if it is not possible to put diagram into the DB then user can store it locally. Diagram should be stored in the DB if it is required to share diagram elements layout and visual properties across several clients working with same diagram/domain model/DB.\n",
    "(In reply to comment #8)\n\u003e It should not be a problem. Currently generated implementation should be able\n\u003e to reconcile most of the changes in the domain model and the rest situations\n\u003e considered as bugs and will (should) be fixed.\n\u003e \n\u003e It actually depends on the requirements ? if it is not possible to put diagram\n\u003e into the DB then user can store it locally. Diagram should be stored in the DB\n\u003e if it is required to share diagram elements layout and visual properties across\n\u003e several clients working with same diagram/domain model/DB.\n\u003e \n\nHi,\n\nIt would be fine if we are just able to save the complete relationship that we show on the diagram into Database and load it back using GMF. No need of saving the diagram itself into the database. Just like the sample program (using Teneo jars) which we have using EMFT and Hibernate to store/retrieve the library system into database. \n\nSorry for the confusion.\n\nRegards,\nVijayan",
    "Okay, I will probably do a new build in a few days containing some small changes I was required to do for this.\n\nLet me know if database persistence of the diagram is required for other users. If so then I can look at that also (using Teneo).\nHowever to do that I would need an example of fairly complete diagram content (preferably using the mindmap example), in a xmi/xml file which I can read through the standard EMF xmi/xml resource. This makes it possible for me to test if there are issues related to the mapping to the db.\n\ngr. Martin",
    "I\u0027d say persisting the diagram is a requirement for others.  We also have the option to persist both diagram and domain in a single resource (file).\n\nLet me work on creating a large mindmap instance for you.",
    "Hi,\nI am looking at persisting the diagram itself. \nI am encountering some difficulties because of the way the persistentChildren efeature of View is handled. \nAlthough this efeature exists in the ecore model it is renamed at runtime to \u0027children\u0027. It is this line (1853) in NotationPackageImpl:\ninitEReference(getView_PersistedChildren(), this.getNode(), null, \"children\", null, 0, -1, View.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED); //$NON-NLS-1$\n\nIs there a specific reason to rename this efeature (just curious here)?\nWould it be logical to instead of renaming the efeature persistedchildren to add children as an additional efeature (volatile/transient)?\n\ngr. Martin",
    "Reply to \u003ca href\u003d\"show_bug.cgi?id\u003d159226#c12\"\u003ecomment #12\u003c/a\u003e: Please, ask corresponding quesrion in newsgroup.",
    "Well I did, but I got no response there (at least my news reader does not show an answer).\n\nAnyway, here is a tutorial for at least persisting the data itself in Teneo:\nhttp://www.elver.org/hibernate/gmftutorial/tutorial1.html\n\nIf there is interest in trying this out then that would be nice. Please let me know if there are any obstacles/issues.\n\nRegarding persisting the graphical model itself. Currently I am stuck with the issue I mentioned here in this bugzilla (and posted on the gmft newsgroup). I can/will continue looking at this after I get some response on the newsgroup (or here).\n\ngr. Martin",
    "(In reply to comment #14)\nThis part of API is in the area of runtime team responsibility, so I can suggest you to ask this question once more and then create corresponding bugzilla entry in case of silence. Please, add CC to me if you submit anything related to it.\n\nConcerning tutorial: m.b. it make sense to put it on GMF wiki page?",
    "Okay I have reposted my question. \n\nI prefer to add a link to the tutorial first because maybe I have to change it based on feedback (prefer not do to that in two locations). \nWhat would be a logical location for such a link (toc or one of the mindmap tutorials)?\n\ngr. Martin\n",
    "Hi,\n\nWhen i try to run the GMF editor (following all the steps mentioned in the link http://www.elver.org/hibernate/gmftutorial/tutorial1.html), i get an error message saying \"Unable to create table map\". This is because it tries to create the required tables everytime the editor is run. Please let me know how to set the PersistenceOptions in the properties file to avoid this problem. Also is it necessary to have the database with the name mindmap?\n\nThanks \u0026 Regards,\nVijayan\n",
    "The name of the database can be changed by changing the string mindmap to something else in these two parts of the property file:\ndbname\u003dmindmap\ndburl\u003djdbc:mysql://127.0.0.1:3306/mindmap\n\nIt should detect that the tables already exists. Although this can depend on the capabilities of the database driver to provide schema information. You can disable db schema creation/updates by passing the following property to the HbDataStore:\nPersistenceOptions.UPDATE_SCHEMA\n\nand then set this to false to prevent db schema updates, and true (default) otherwise.\n\ngr. Martin",
    "(In reply to comment #12)\nModel code generator for GMF notation model (dev.eclipse.org, /cvsroot/modeling, org.eclipse.gmf/plugins/org.eclipse.gmf.runtime.notation) uses PackageClass.javajet template that renames \"persistedChildren\" and \"persistedEdges\" features to \"children\" (see model/notation.genmodel, templates/model/PackageClass.javajet). Maybe think about new extension point in org.eclipse.emf.teneo.hibernate plug-in that allows use of custom property handler or at least customization of EListPropertyHandler? It would be useful for models with custom model code generation.",
    "org.eclipse.emf.ecore.util.ExtendedMetaData may be used in gmf.runtime.notation to avoid renaming persistedChildren-\u003echildren, persistedEdges-\u003eedges in model code. Most likely we\u0027ll offer this fix to GMF Runtime team but I doubt they include it GMF 2.0.",
    "Created an attachment (id\u003d72363)\nMindmap example persistence + gmf notation fix (for comment #21 by Sergey Armensky)\n\nMindmap example persistence + gmf notation fix (for comment #21 by Sergey Armensky)",
    "Anyway, there are problems with diagram persistence even using fixed gmf\nnotation model. I tried mindmap example (persistence code and gmf notation fix\nare in attachment #72363). Mindmap model and diagram persisted to single\ndatabase using common SessionController. StaleStateException thrown in\nsessionController.getSessionWrapper().commitTransaction() \n(org.hibernate.jdbc.AbstractBatcher#batchUpdate:\ncom.mysql.jdbc.ServerPreparedStatement - update `style` set\n`view_styles_e_id`\u003d1, `view_styles_idx`\u003d0 where e_id\u003d2)\n\n[ERROR] AbstractBatcher - -Exception executing batch: \n\u003corg.hibernate.StaleStateException: Batch update returned unexpected row count\nfrom update [0]; actual row count: 0; expected:\n1\u003eorg.hibernate.StaleStateException: Batch update returned unexpected row count\nfrom update [0]; actual row count: 0; expected: 1\n        at\norg.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:61)\n        at\norg.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:46)\n        at\norg.hibernate.jdbc.BatchingBatcher.checkRowCounts(BatchingBatcher.java:68)\n        at\norg.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48)\n        at\norg.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:246)\n        at\norg.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:237)\n        at\norg.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:145)\n        at\norg.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)\n        at\norg.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)\n        at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)\n        at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:338)\n        at\norg.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)\n        at\norg.eclipse.emf.teneo.hibernate.HbSessionWrapper.commitTransaction(HbSessionWrapper.java:82)\n        at\norg.eclipse.gmf.examples.mindmap.diagram.part.MindmapNewDiagramFileWizard$1.doExecuteWithResult(MindmapNewDiagramFileWizard.java:155)\n        at\norg.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand.doExecute(AbstractTransactionalCommand.java:246)\n        at\norg.eclipse.emf.workspace.AbstractEMFOperation.execute(AbstractEMFOperation.java:135)\n        at\norg.eclipse.core.commands.operations.DefaultOperationHistory.execute(DefaultOperationHistory.java:511)\n        at\norg.eclipse.gmf.examples.mindmap.diagram.part.MindmapNewDiagramFileWizard.performFinish(MindmapNewDiagramFileWizard.java:172)\n        at\norg.eclipse.jface.wizard.WizardDialog.finishPressed(WizardDialog.java:742)\n        at\norg.eclipse.jface.wizard.WizardDialog.buttonPressed(WizardDialog.java:373)\n        at org.eclipse.jface.dialogs.Dialog$2.widgetSelected(Dialog.java:616)\n        at\norg.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:227)\n        at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:938)\n        at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3682)\n        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3293)\n        at org.eclipse.jface.window.Window.runEventLoop(Window.java:820)\n        at org.eclipse.jface.window.Window.open(Window.java:796)\n        at\norg.eclipse.gmf.examples.mindmap.diagram.part.MindmapDiagramEditorUtil.runWizard(MindmapDiagramEditorUtil.java:176)\n        at\norg.eclipse.gmf.examples.mindmap.diagram.part.MindmapInitDiagramFileAction$1.doExecute(MindmapInitDiagramFileAction.java:159)\n        at\norg.eclipse.emf.transaction.RecordingCommand.execute(RecordingCommand.java:129)\n        at\norg.eclipse.emf.workspace.EMFCommandOperation.doExecute(EMFCommandOperation.java:116)\n        at\norg.eclipse.emf.workspace.AbstractEMFOperation.execute(AbstractEMFOperation.java:135)\n        at\norg.eclipse.core.commands.operations.DefaultOperationHistory.execute(DefaultOperationHistory.java:511)\n        at\norg.eclipse.emf.workspace.impl.WorkspaceCommandStackImpl.doExecute(WorkspaceCommandStackImpl.java:144)\n        at\norg.eclipse.emf.transaction.impl.AbstractTransactionalCommandStack.execute(AbstractTransactionalCommandStack.java:164)\n        at\norg.eclipse.emf.transaction.impl.AbstractTransactionalCommandStack.execute(AbstractTransactionalCommandStack.java:217)\n        at\norg.eclipse.gmf.examples.mindmap.diagram.part.MindmapInitDiagramFileAction.run(MindmapInitDiagramFileAction.java:122)\n        at\norg.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:256)\n        at\norg.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:545)\n        at\norg.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:490)\n        at\norg.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:402)\n        at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:938)\n        at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3682)\n        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3293)\n        at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2389)\n        at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2353)\n        at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2219)\n        at org.eclipse.ui.internal.Workbench$4.run(Workbench.java:466)\n        at\norg.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:289)\n        at\norg.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:461)\n        at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n        at\norg.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:106)\n        at\norg.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:153)\n        at\norg.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)\n        at\norg.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)\n        at\norg.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)\n        at\norg.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:504)\n        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:443)\n        at org.eclipse.equinox.launcher.Main.run(Main.java:1169)\n        at org.eclipse.equinox.launcher.Main.main(Main.java:1144)",
    "Hi,\nWhat is the status of this issue? Will the EclipseLink intergation solve these problems? We have tried a solution that stores the notational data as a bytearray in the database. But as we no longer use an IFile, decorations, markers, link helper and possibly other functionality is disabled! \nCheers\nRob"
  ],
  "commentCreationDates": [
    "2006-09-29T07:19:54+02:00",
    "2006-10-13T12:31:24+02:00",
    "2006-11-14T12:58:45+01:00",
    "2006-11-14T13:22:36+01:00",
    "2006-11-14T13:31:15+01:00",
    "2006-11-14T13:51:14+01:00",
    "2006-11-14T16:15:54+01:00",
    "2006-11-15T06:37:59+01:00",
    "2006-11-15T11:07:08+01:00",
    "2006-11-15T12:54:21+01:00",
    "2006-11-15T13:36:56+01:00",
    "2006-11-15T13:41:33+01:00",
    "2006-11-20T11:54:02+01:00",
    "2006-11-20T12:51:16+01:00",
    "2006-11-29T06:10:25+01:00",
    "2006-11-29T11:04:13+01:00",
    "2006-12-01T13:56:50+01:00",
    "2006-12-12T06:43:30+01:00",
    "2006-12-12T08:15:51+01:00",
    "2007-06-01T21:25:32+02:00",
    "2007-06-20T23:55:48+02:00",
    "2007-06-25T17:07:22+02:00",
    "2007-06-25T17:17:26+02:00",
    "2007-10-22T12:38:49+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.hibernate.StaleStateException",
      "message": "Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1",
      "elements": [
        {
          "method": "org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched",
          "source": "Expectations.java:61"
        },
        {
          "method": "org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome",
          "source": "Expectations.java:46"
        },
        {
          "method": "org.hibernate.jdbc.BatchingBatcher.checkRowCounts",
          "source": "BatchingBatcher.java:68"
        },
        {
          "method": "org.hibernate.jdbc.BatchingBatcher.doExecuteBatch",
          "source": "BatchingBatcher.java:48"
        },
        {
          "method": "org.hibernate.jdbc.AbstractBatcher.executeBatch",
          "source": "AbstractBatcher.java:246"
        },
        {
          "method": "org.hibernate.engine.ActionQueue.executeActions",
          "source": "ActionQueue.java:237"
        },
        {
          "method": "org.hibernate.engine.ActionQueue.executeActions",
          "source": "ActionQueue.java:145"
        },
        {
          "method": "org.hibernate.event.def.AbstractFlushingEventListener.performExecutions",
          "source": "AbstractFlushingEventListener.java:298"
        },
        {
          "method": "org.hibernate.event.def.DefaultFlushEventListener.onFlush",
          "source": "DefaultFlushEventListener.java:27"
        },
        {
          "method": "org.hibernate.impl.SessionImpl.flush",
          "source": "SessionImpl.java:1000"
        },
        {
          "method": "org.hibernate.impl.SessionImpl.managedFlush",
          "source": "SessionImpl.java:338"
        },
        {
          "method": "org.hibernate.transaction.JDBCTransaction.commit",
          "source": "JDBCTransaction.java:106"
        },
        {
          "method": "org.eclipse.emf.teneo.hibernate.HbSessionWrapper.commitTransaction",
          "source": "HbSessionWrapper.java:82"
        },
        {
          "method": "org.eclipse.gmf.examples.mindmap.diagram.part.MindmapNewDiagramFileWizard$1.doExecuteWithResult",
          "source": "MindmapNewDiagramFileWizard.java:155"
        },
        {
          "method": "org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand.doExecute",
          "source": "AbstractTransactionalCommand.java:246"
        },
        {
          "method": "org.eclipse.emf.workspace.AbstractEMFOperation.execute",
          "source": "AbstractEMFOperation.java:135"
        },
        {
          "method": "org.eclipse.core.commands.operations.DefaultOperationHistory.execute",
          "source": "DefaultOperationHistory.java:511"
        },
        {
          "method": "org.eclipse.gmf.examples.mindmap.diagram.part.MindmapNewDiagramFileWizard.performFinish",
          "source": "MindmapNewDiagramFileWizard.java:172"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.finishPressed",
          "source": "WizardDialog.java:742"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.buttonPressed",
          "source": "WizardDialog.java:373"
        },
        {
          "method": "org.eclipse.jface.dialogs.Dialog$2.widgetSelected",
          "source": "Dialog.java:616"
        },
        {
          "method": "org.eclipse.swt.widgets.TypedListener.handleEvent",
          "source": "TypedListener.java:227"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:938"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3682"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3293"
        },
        {
          "method": "org.eclipse.jface.window.Window.runEventLoop",
          "source": "Window.java:820"
        },
        {
          "method": "org.eclipse.jface.window.Window.open",
          "source": "Window.java:796"
        },
        {
          "method": "org.eclipse.gmf.examples.mindmap.diagram.part.MindmapDiagramEditorUtil.runWizard",
          "source": "MindmapDiagramEditorUtil.java:176"
        },
        {
          "method": "org.eclipse.gmf.examples.mindmap.diagram.part.MindmapInitDiagramFileAction$1.doExecute",
          "source": "MindmapInitDiagramFileAction.java:159"
        },
        {
          "method": "org.eclipse.emf.transaction.RecordingCommand.execute",
          "source": "RecordingCommand.java:129"
        },
        {
          "method": "org.eclipse.emf.workspace.EMFCommandOperation.doExecute",
          "source": "EMFCommandOperation.java:116"
        },
        {
          "method": "org.eclipse.emf.workspace.AbstractEMFOperation.execute",
          "source": "AbstractEMFOperation.java:135"
        },
        {
          "method": "org.eclipse.core.commands.operations.DefaultOperationHistory.execute",
          "source": "DefaultOperationHistory.java:511"
        },
        {
          "method": "org.eclipse.emf.workspace.impl.WorkspaceCommandStackImpl.doExecute",
          "source": "WorkspaceCommandStackImpl.java:144"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.AbstractTransactionalCommandStack.execute",
          "source": "AbstractTransactionalCommandStack.java:164"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.AbstractTransactionalCommandStack.execute",
          "source": "AbstractTransactionalCommandStack.java:217"
        },
        {
          "method": "org.eclipse.gmf.examples.mindmap.diagram.part.MindmapInitDiagramFileAction.run",
          "source": "MindmapInitDiagramFileAction.java:122"
        },
        {
          "method": "org.eclipse.ui.internal.PluginAction.runWithEvent",
          "source": "PluginAction.java:256"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:545"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$2",
          "source": "ActionContributionItem.java:490"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$5.handleEvent",
          "source": "ActionContributionItem.java:402"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:938"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3682"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3293"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:2389"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:2353"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.access$4",
          "source": "Workbench.java:2219"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench$4.run",
          "source": "Workbench.java:466"
        },
        {
          "method": "org.eclipse.core.databinding.observable.Realm.runWithDefault",
          "source": "Realm.java:289"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:461"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.application.IDEApplication.start",
          "source": "IDEApplication.java:106"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppHandle.run",
          "source": "EclipseAppHandle.java:153"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:106"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:76"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:363"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:176"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.invokeFramework",
          "source": "Main.java:504"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.basicRun",
          "source": "Main.java:443"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.run",
          "source": "Main.java:1169"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.main",
          "source": "Main.java:1144"
        }
      ],
      "number": 0,
      "commentIndex": 22,
      "bugId": "159226",
      "date": "2007-06-25T17:17:26+02:00",
      "product": "GMF",
      "component": "Samples",
      "severity": "enhancement"
    }
  ],
  "groupId": "159226",
  "bugId": "159226",
  "date": "2006-09-29T07:19:54+02:00",
  "product": "GMF",
  "component": "Samples",
  "severity": "enhancement"
}