{
  "comments": [
    "Eclipse 3.0\n\nFrom my understanding (according to the JavaDoc) IProgressService#runInUI need \nnot be called from inside the UI thread. But I get an exception when doing \nthis. IMHO IProgressService#runInUI should be smart enough to handle this.\n\norg.eclipse.swt.SWTException: Invalid thread access\n\tat org.eclipse.swt.SWT.error(SWT.java:2691)\n\tat org.eclipse.swt.SWT.error(SWT.java:2616)\n\tat org.eclipse.swt.SWT.error(SWT.java:2587)\n\tat org.eclipse.swt.widgets.Display.error(Display.java:736)\n\tat org.eclipse.swt.widgets.Display.checkDevice(Display.java:561)\n\tat org.eclipse.swt.widgets.Display.getSystemCursor(Display.java:1607)\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile\n(BusyIndicator.java:58)\n\tat org.eclipse.ui.internal.progress.ProgressManager.runInUI\n(ProgressManager.java:987)\n\tat \nnet.sourceforge.eclipseccase.ui.ClearcaseUIModificationHandler.checkout\n(ClearcaseUIModificationHandler.java:147)\n\tat \nnet.sourceforge.eclipseccase.ui.ClearcaseUIModificationHandler.validateEdit\n(ClearcaseUIModificationHandler.java:89)\n\tat \norg.eclipse.team.internal.core.FileModificationValidatorManager.validateEdit\n(FileModificationValidatorManager.java:70)\n\tat org.eclipse.core.internal.resources.Workspace$5.run\n(Workspace.java:1883)\n\tat org.eclipse.core.internal.runtime.InternalPlatform.run\n(InternalPlatform.java:615)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:747)\n\tat org.eclipse.core.internal.resources.Workspace.validateEdit\n(Workspace.java:1890)\n\tat org.eclipse.ltk.internal.core.refactoring.Resources.makeCommittable\n(Resources.java:108)\n\tat \norg.eclipse.ltk.core.refactoring.participants.ValidateEditChecker.check\n(ValidateEditChecker.java:94)\n\tat \norg.eclipse.ltk.core.refactoring.participants.CheckConditionsContext.check\n(CheckConditionsContext.java:103)\n\tat \norg.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFi\nnalConditions(ProcessorBasedRefactoring.java:161)\n\tat org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run\n(CheckConditionsOperation.java:84)\n\tat org.eclipse.ltk.core.refactoring.CreateChangeOperation.run\n(CreateChangeOperation.java:114)\n\tat org.eclipse.ltk.core.refactoring.PerformChangeOperation.run\n(PerformChangeOperation.java:188)\n\tat org.eclipse.core.internal.resources.Workspace.run\n(Workspace.java:1673)\n\tat org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run\n(WorkbenchRunnableAdapter.java:58)\n\tat org.eclipse.jface.operation.ModalContext$ModalContextThread.run\n(ModalContext.java:101)\n\n\n\n\nThis is the related code snippet:\n\n// use workbench window as preferred runnable context\nIRunnableContext context;\nif (PlatformUI.isWorkbenchRunning()\n    \u0026\u0026 null !\u003d PlatformUI.getWorkbench()\n              .getActiveWorkbenchWindow()) {\n context \u003d PlatformUI.getWorkbench().getActiveWorkbenchWindow();\n} else {\n context \u003d new ProgressMonitorDialog(shell);\n}\n\n// checkout\nPlatformUI.getWorkbench().getProgressService().runInUI(context,\n new IRunnableWithProgress() {\n  public void run(IProgressMonitor monitor)\n        throws InvocationTargetException,\n        InterruptedException {\n    try {\n        provider.checkout(files, IResource.DEPTH_ZERO,\n                monitor);\n\n    } catch (TeamException ex) {\n        throw new InvocationTargetException(ex);\n    }\n  }\n }, new MultiRule(files));",
    "Gunnar I am not sure where the javadoc asserts this - we should make it \nclearer if it was not clear. This API must be run from the UI Thread - I can \nmake that clearer but I want to make sure the rest of the doc is clear too.",
    "Well the JavaDoc doesn\u0027t say that it is necessary and I expect the method is \nsmart enough to wrap a Display#syncExec around the critical code. \n\nIt just doesn\u0027t make sence to wrap each call to #runInUI into a runnable. That \ndestroys the easy usage of the new progress API IMHO.",
    "runInUI is meant as a migration tool for people who do not want to take the \ntime to make thier code Thread safe by moving it to a job. If you are running \nfrom a job anyways you should stick with the jobs API.",
    "I\u0027m not running from a job. It\u0027s for the auto-checkout feature (validateEdit) \nthat should execute immediately in the UI thread to display progress in the \nworkbench window progress bar.",
    "Sorry I wasn\u0027t clear. runInUI is meant to be run in the UI Thread. I was \nsuggesting that if you didn\u0027t want to just migrate some UI code (which is what \nthis is for) that there are better ways of doing this without using runInUI \nlike\n\nUIJobs\nbusyCursorWhile(IRunnableWithProgress runnable) (if you don\u0027t need the UI \nThread) \n\netc.\n\nIf you want to use the workbench window progress bar then the new support is \nnot what you are after - just run it using the current workbench window as \nyour runnable context.",
    "Closing as there is nothing else to do here."
  ],
  "commentCreationDates": [
    "2004-07-26T09:50:33+02:00",
    "2004-07-26T17:49:50+02:00",
    "2004-07-26T18:05:39+02:00",
    "2004-07-26T18:14:33+02:00",
    "2004-07-26T18:20:26+02:00",
    "2004-07-27T13:58:13+02:00",
    "2004-08-18T22:07:19+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Invalid thread access",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2691"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2616"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2587"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.error",
          "source": "Display.java:736"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.checkDevice",
          "source": "Display.java:561"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.getSystemCursor",
          "source": "Display.java:1607"
        },
        {
          "method": "org.eclipse.swt.custom.BusyIndicator.showWhile",
          "source": "BusyIndicator.java:58"
        },
        {
          "method": "org.eclipse.ui.internal.progress.ProgressManager.runInUI",
          "source": "ProgressManager.java:987"
        },
        {
          "method": "net.sourceforge.eclipseccase.ui.ClearcaseUIModificationHandler.checkout",
          "source": "ClearcaseUIModificationHandler.java:147"
        },
        {
          "method": "net.sourceforge.eclipseccase.ui.ClearcaseUIModificationHandler.validateEdit",
          "source": "ClearcaseUIModificationHandler.java:89"
        },
        {
          "method": "org.eclipse.team.internal.core.FileModificationValidatorManager.validateEdit",
          "source": "FileModificationValidatorManager.java:70"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace$5.run",
          "source": "Workspace.java:1883"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:615"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:747"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.validateEdit",
          "source": "Workspace.java:1890"
        },
        {
          "method": "org.eclipse.ltk.internal.core.refactoring.Resources.makeCommittable",
          "source": "Resources.java:108"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.participants.ValidateEditChecker.check",
          "source": "ValidateEditChecker.java:94"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.participants.CheckConditionsContext.check",
          "source": "CheckConditionsContext.java:103"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFinalConditions",
          "source": "ProcessorBasedRefactoring.java:161"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run",
          "source": "CheckConditionsOperation.java:84"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CreateChangeOperation.run",
          "source": "CreateChangeOperation.java:114"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.PerformChangeOperation.run",
          "source": "PerformChangeOperation.java:188"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1673"
        },
        {
          "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
          "source": "WorkbenchRunnableAdapter.java:58"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:101"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "70805",
      "date": "2004-07-26T09:50:33+02:00",
      "product": "Platform",
      "component": "UI",
      "severity": "major"
    }
  ],
  "groupId": "70805",
  "bugId": "70805",
  "date": "2004-07-26T09:50:33+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "major"
}