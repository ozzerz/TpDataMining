{
  "comments": [
    "Feel free to bash in case I\u0027m wrong but I think I found a serious problem.\n\nI\u0027m pasting my posts on the newsgroups below to show how I arrived to this conclusion. At the very least the framework should block any attempt to run multiple instances with the same writable configuration area. The IDE prevents you from using the same workspace at the same time but the configuration area is just as dangerous. Since this is the default setup for eclipse and also this is not for multiple users but the same user should not run any eclipse launcher without specifying a seperate and unique configuration area for that session I find this a very serious problem.\n\n-----------------\n\nHi,\n\nWhile testing our new RCP application package we are plagued by intermittend and hard to reproduce exceptions in classloading, statereader, statewriter, ... ranging from Nullpointers to ClassNotFoundExceptions. Now it did not occur to me before but I think we only get these errors when we have multiple instances running. For instance our application contains a ui IPlatformRunnable and a server IPlatformRunnable running in different jvms. So they share the same configuration area with the same bundledata etc. Could this present problems ? Especially with plugins that are lazy started ? How come eclipse itself uses this setup and it keeps on working then ?\n\nThe reason I ask is that some of these errors are quite severe and if this should work properly then I need to start reporting bugs.\n\n----\n\nFor the record, we are working with the RC\u0027s of eclipse 3.2\n\n----\n\nSome more information about the issues. For the record our configuration area is clean and our workspaces are created on startup so no stale data of old plugins or anything else. We even have these issues on virtual machines which are restored from a fresh windows installation each test run.\n\nMost of the problems seem to occur concerning the lazy and state files, those with the classloader issues I don\u0027t seem to find a common ground, sometimes it seems that the manifests aren\u0027t read properly or in some cases it simply can\u0027t open a plugin jar properly. Note that restarting the application or trying some more sometimes magically solves stuff. So my concern was looking at the configuration area. I know about the -initialize option. We weren\u0027t doing this so I tried that but still errors keep popping up. I looked at what data the -initialize option drops in the configuration area and it does extract stuff in the org.eclipse.ogsi area but only for the startup bundle.\n\nWe have many plugins that are run in the osgi way .. we start lots of bundles lazy on demand when someone requests a service, we access the bundles that implement these and start the bundle and then have them register osgi services in their activators. This deviates a bit from the eclipse container plugin mechanism so that may be the cause why we are seeing so much problems.\n\nAnyhow, I was looking in StateReader, StateWriter and such and they access files without syncing on a lock file for the multiple jvms .. isn\u0027t this bound to cause troubles ?",
    "The configuration area is a read-write area. Any plugins that acquire Jars from within Jars (or DLLs within Jars) are dumped into the configuration area. Two eclipse applications running simultaneously may therefore overwrite the other\u0027s data in the configuration storage area.\n\nFrankly, I think it\u0027s ugly, but that\u0027s the way it is. You should start up your JVMs so that they don\u0027t share a configuration area; my advice would be to move it into where the workspace goes too. That way, you\u0027ll be able to start up the two applications and each will have their own config area.\n\nThe other approach is to make the config area read-only, but as well as not being advised, it can also break some functionality that needs to have the DLLs extracted or nested Jars extrated.\n\nAlex.",
    "Eclipse is designed to have multiple vm\u0027s accessing the config area. As I\u0027m typing this I\u0027m actually running 2 instances of eclipse from the same configuration but on different workspace :). \nThe sharing / locking is done collaboratively through the StorageManager.\n\nAre you running with osgi.lock\u003dnone? Could you please give us more details on how to reproduce, because this is working for us.\n\nA bit of background:\nWhen running an application we have identified that you are usually in need for 3 locations:\n- the instance data location (also wrongly referred to as workspace). This is being used to store your data set. Usually multiple of those data set can be opened at the same time. For example you can have multiple workspace open in different processes.\n\n- the config area, is here (among other things) to solve the problem of storing data that are global to the application whatever the data set you are running. For example in the SDK, this is used to store the list of the last workspaces being used, and in RCP apps this is used to store the runtime caches. \nWe have decided to pick a policy where the last one to write wins for simplicity for the end user, however one could choose to implement a fancier policy like reconciliation for their own files.\n\n- the install location, which is considered to be read-only.",
    "It seems to be another instance of the problem described by Thomas in the bug 129365, comment 6 ?\n\n",
    "\u003e In response to comment #1\nI would be happy to but I can\u0027t prevent a user from clicking myapplicationlauncher.exe twice and doing different stuff with it, if it needs to be split, the launcher or the framework should handle this, when my IPlatformRunnable is actually run it is already too late.\n\n\u003e In response to comment #2\nAha, so the locking should be there. I could not find it but I did see lock files in the configuration area so I assumed it was at least someones intention to have locking. I\u0027ll look into it and see if I can get anywhere. \n\nI\u0027m not running with osgi.lock\u003dnone .. at least to my knowledge, If you don\u0027t have to explicitly enable locking then it should be on that value. To give you a bigger picture I have an install area which contains a whole lot of plugins (200+) with a big part being a lot of the eclipse platform plugins and all others falling into either \u0027binary plugins\u0027 just including third party jars or our own code plugins. I have created several launchers using the eclipse.brand task for each of our rcp products backed an IPlatformRunnable each. Some are ui RCP workbench applications, a few are headless console based applications like a server. A good deal of our plugins will also be deployed in foreign user application code running inside an embedded container using the default OSGi adaptor. Thats why we use both the plugin extension mechanism and our own form of Eclipse-LazyStart looking for services we dynamically need. So we are doing both a lot of Eclipse Style and a lot of OSGi style code. Each of those launchers has an ini file which states which product to start, optionally to enable java.awt.headless or switch to a perspective by default. They all share the same config.ini that I based of the eclipse config.ini (I\u0027ll attach it for you to verify). The test are done on some quite run of the mill Windows XP installations running NTFS\n\nAs to the locking working I can definitly say no .. or at least there is a some hole there. We often get StateReader and StateWriter NullPointers or IOExceptions comming from corrupt files state or lazystate files. If I understand you correctly they should have passed through the StorageManager first ? I haven\u0027t looked at the code of StorageManager yet but the Reader and Writers are opening filestreams all on their own, just a check for the security manager is made.\n\nI\u0027ll include an example stacktrace below. This one is related to classloading but as Alex describes jars are sometimes unpacked for inner jar files in the bundledata directory so I believe the root of all problems is probably some common base. If you want I\u0027ll add more if I encounter them again from the other types of failures. \n\nMay 12, 2006 9:05:22 AM CEST [PoolThread-9] [WARNING] Error for\n/scriptura-soap/services/ScripturaEngineMessageService\njava.lang.ExceptionInInitializerError\n\tat org.apache.axis.transport.http.AxisServletBase.\u003cclinit\u003e(AxisServletBase.java:56)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)\n\tat java.lang.reflect.Constructor.newInstance(Unknown Source)\n\tat java.lang.Class.newInstance0(Unknown Source)\n\tat java.lang.Class.newInstance(Unknown Source)\n\tat org.mortbay.jetty.servlet.Holder.newInstance(Holder.java:176)\n\tat org.mortbay.jetty.servlet.ServletHolder.getServlet(ServletHolder.java:291)\n\tat org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:329)\n\tat\norg.mortbay.jetty.servlet.WebApplicationHandler.dispatch(WebApplicationHandler.java:294)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:567)\n\tat org.mortbay.http.HttpContext.handle(HttpContext.java:1808)\n\tat\norg.mortbay.jetty.servlet.WebApplicationContext.handle(WebApplicationContext.java:525)\n\tat org.mortbay.http.HttpContext.handle(HttpContext.java:1758)\n\tat org.mortbay.http.HttpServer.service(HttpServer.java:879)\n\tat org.mortbay.http.HttpConnection.service(HttpConnection.java:790)\n\tat org.mortbay.http.HttpConnection.handleNext(HttpConnection.java:952)\n\tat org.mortbay.http.HttpConnection.handle(HttpConnection.java:807)\n\tat org.mortbay.http.SocketListener.handleConnection(SocketListener.java:197)\n\tat org.mortbay.util.ThreadedServer.handle(ThreadedServer.java:289)\n\tat org.mortbay.util.ThreadPool$PoolThread.run(ThreadPool.java:501)\nCaused by: java.lang.NullPointerException\n\tat\norg.eclipse.osgi.internal.resolver.BundleDescriptionImpl.getResolvedImports(BundleDescriptionImpl.java:175)\n\tat\norg.eclipse.osgi.framework.internal.core.BundleLoader.findImportedSource(BundleLoader.java:873)\n\tat\norg.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:376)\n\tat\norg.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:352)\n\tat\norg.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat org.apache.axis.components.logger.LogFactory.class$(LogFactory.java:45)\n\tat org.apache.axis.components.logger.LogFactory$1.run(LogFactory.java:45)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.apache.axis.components.logger.LogFactory.getLogFactory(LogFactory.java:41)\n\tat org.apache.axis.components.logger.LogFactory.\u003cclinit\u003e(LogFactory.java:33)\n\t... 22 more\ngetException():\njava.lang.NullPointerException\n\tat\norg.eclipse.osgi.internal.resolver.BundleDescriptionImpl.getResolvedImports(BundleDescriptionImpl.java:175)\n\tat\norg.eclipse.osgi.framework.internal.core.BundleLoader.findImportedSource(BundleLoader.java:873)\n\tat\norg.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:376)\n\tat\norg.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:352)\n\tat\norg.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat org.apache.axis.components.logger.LogFactory.class$(LogFactory.java:45)\n\tat org.apache.axis.components.logger.LogFactory$1.run(LogFactory.java:45)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.apache.axis.components.logger.LogFactory.getLogFactory(LogFactory.java:41)\n\tat org.apache.axis.components.logger.LogFactory.\u003cclinit\u003e(LogFactory.java:33)\n\tat org.apache.axis.transport.http.AxisServletBase.\u003cclinit\u003e(AxisServletBase.java:56)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)\n\tat java.lang.reflect.Constructor.newInstance(Unknown Source)\n\tat java.lang.Class.newInstance0(Unknown Source)\n\tat java.lang.Class.newInstance(Unknown Source)\n\tat org.mortbay.jetty.servlet.Holder.newInstance(Holder.java:176)\n\tat org.mortbay.jetty.servlet.ServletHolder.getServlet(ServletHolder.java:291)\n\tat org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:329)\n\tat\norg.mortbay.jetty.servlet.WebApplicationHandler.dispatch(WebApplicationHandler.java:294)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:567)\n\tat org.mortbay.http.HttpContext.handle(HttpContext.java:1808)\n\tat\norg.mortbay.jetty.servlet.WebApplicationContext.handle(WebApplicationContext.java:525)\n\tat org.mortbay.http.HttpContext.handle(HttpContext.java:1758)\n\tat org.mortbay.http.HttpServer.service(HttpServer.java:879)\n\tat org.mortbay.http.HttpConnection.service(HttpConnection.java:790)\n\tat org.mortbay.http.HttpConnection.handleNext(HttpConnection.java:952)\n\tat org.mortbay.http.HttpConnection.handle(HttpConnection.java:807)\n\tat org.mortbay.http.SocketListener.handleConnection(SocketListener.java:197)\n\tat org.mortbay.util.ThreadedServer.handle(ThreadedServer.java:289)\n\tat org.mortbay.util.ThreadPool$PoolThread.run(ThreadPool.java:501)",
    "Created an attachment (id\u003d41365)\nconfig.ini\n\nThe config file the applications are starting with",
    "It would help us to have a reproduceable testcase.  \n\nThe files containing the framework cache (StateReader/StateWriter etc) are managed with StorageManager.  The general idea here is StorageManager locks an instance of the cached files for the purpose of read-only for each running instance.  Multiple instances of the framework can open/read/close these files over and over.  Once an instance of the framework needs to persist a new cache then it saves the data to a completely new file and then tells StorageManager about the new content.  Storage manager will ensure that the old versions of the cache will stay around for other running frameworks to use until they restart.  We never write the cache data over an existing instance of the cache file.  This is why you will see each of the cache files ending in a number (.state.1, .state.2 etc.).  The number is incremented each time a new cache is persisted.\n\nIt may help for you to run with the patch from bug 141288 to see if we get any more useful error messages.  Thanks.",
    "Closing as works for me.  Do you still see issues in 3.3 M6.  If so please reopen with details on how to reproduce.  Thanks."
  ],
  "commentCreationDates": [
    "2006-05-12T10:57:59+02:00",
    "2006-05-12T14:37:47+02:00",
    "2006-05-12T17:58:59+02:00",
    "2006-05-12T19:18:38+02:00",
    "2006-05-12T21:29:56+02:00",
    "2006-05-12T21:34:00+02:00",
    "2006-05-12T22:13:14+02:00",
    "2007-03-29T23:58:01+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ExceptionInInitializerError",
      "elements": [
        {
          "method": "org.apache.axis.transport.http.AxisServletBase.\u003cclinit\u003e",
          "source": "AxisServletBase.java:56"
        },
        {
          "method": "sun.reflect.NativeConstructorAccessorImpl.newInstance0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeConstructorAccessorImpl.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingConstructorAccessorImpl.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Constructor.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.newInstance0",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "org.mortbay.jetty.servlet.Holder.newInstance",
          "source": "Holder.java:176"
        },
        {
          "method": "org.mortbay.jetty.servlet.ServletHolder.getServlet",
          "source": "ServletHolder.java:291"
        },
        {
          "method": "org.mortbay.jetty.servlet.ServletHolder.handle",
          "source": "ServletHolder.java:329"
        },
        {
          "method": "org.mortbay.jetty.servlet.WebApplicationHandler.dispatch",
          "source": "WebApplicationHandler.java:294"
        },
        {
          "method": "org.mortbay.jetty.servlet.ServletHandler.handle",
          "source": "ServletHandler.java:567"
        },
        {
          "method": "org.mortbay.http.HttpContext.handle",
          "source": "HttpContext.java:1808"
        },
        {
          "method": "org.mortbay.jetty.servlet.WebApplicationContext.handle",
          "source": "WebApplicationContext.java:525"
        },
        {
          "method": "org.mortbay.http.HttpContext.handle",
          "source": "HttpContext.java:1758"
        },
        {
          "method": "org.mortbay.http.HttpServer.service",
          "source": "HttpServer.java:879"
        },
        {
          "method": "org.mortbay.http.HttpConnection.service",
          "source": "HttpConnection.java:790"
        },
        {
          "method": "org.mortbay.http.HttpConnection.handleNext",
          "source": "HttpConnection.java:952"
        },
        {
          "method": "org.mortbay.http.HttpConnection.handle",
          "source": "HttpConnection.java:807"
        },
        {
          "method": "org.mortbay.http.SocketListener.handleConnection",
          "source": "SocketListener.java:197"
        },
        {
          "method": "org.mortbay.util.ThreadedServer.handle",
          "source": "ThreadedServer.java:289"
        },
        {
          "method": "org.mortbay.util.ThreadPool$PoolThread.run",
          "source": "ThreadPool.java:501"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.NullPointerException",
        "elements": [
          {
            "method": "org.eclipse.osgi.internal.resolver.BundleDescriptionImpl.getResolvedImports",
            "source": "BundleDescriptionImpl.java:175"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findImportedSource",
            "source": "BundleLoader.java:873"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
            "source": "BundleLoader.java:376"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
            "source": "BundleLoader.java:352"
          },
          {
            "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass",
            "source": "DefaultClassLoader.java:83"
          },
          {
            "method": "java.lang.ClassLoader.loadClass",
            "source": "Unknown Source"
          },
          {
            "method": "java.lang.ClassLoader.loadClassInternal",
            "source": "Unknown Source"
          },
          {
            "method": "java.lang.Class.forName0",
            "source": "Native Method"
          },
          {
            "method": "java.lang.Class.forName",
            "source": "Unknown Source"
          },
          {
            "method": "org.apache.axis.components.logger.LogFactory.class$",
            "source": "LogFactory.java:45"
          },
          {
            "method": "org.apache.axis.components.logger.LogFactory$1.run",
            "source": "LogFactory.java:45"
          },
          {
            "method": "java.security.AccessController.doPrivileged",
            "source": "Native Method"
          },
          {
            "method": "org.apache.axis.components.logger.LogFactory.getLogFactory",
            "source": "LogFactory.java:41"
          },
          {
            "method": "org.apache.axis.components.logger.LogFactory.\u003cclinit\u003e",
            "source": "LogFactory.java:33"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 4,
      "bugId": "141502",
      "date": "2006-05-12T21:29:56+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "critical"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.osgi.internal.resolver.BundleDescriptionImpl.getResolvedImports",
          "source": "BundleDescriptionImpl.java:175"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findImportedSource",
          "source": "BundleLoader.java:873"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:376"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:352"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass",
          "source": "DefaultClassLoader.java:83"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.forName0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.forName",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.axis.components.logger.LogFactory.class$",
          "source": "LogFactory.java:45"
        },
        {
          "method": "org.apache.axis.components.logger.LogFactory$1.run",
          "source": "LogFactory.java:45"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "org.apache.axis.components.logger.LogFactory.getLogFactory",
          "source": "LogFactory.java:41"
        },
        {
          "method": "org.apache.axis.components.logger.LogFactory.\u003cclinit\u003e",
          "source": "LogFactory.java:33"
        },
        {
          "method": "org.apache.axis.transport.http.AxisServletBase.\u003cclinit\u003e",
          "source": "AxisServletBase.java:56"
        },
        {
          "method": "sun.reflect.NativeConstructorAccessorImpl.newInstance0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeConstructorAccessorImpl.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingConstructorAccessorImpl.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Constructor.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.newInstance0",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.newInstance",
          "source": "Unknown Source"
        },
        {
          "method": "org.mortbay.jetty.servlet.Holder.newInstance",
          "source": "Holder.java:176"
        },
        {
          "method": "org.mortbay.jetty.servlet.ServletHolder.getServlet",
          "source": "ServletHolder.java:291"
        },
        {
          "method": "org.mortbay.jetty.servlet.ServletHolder.handle",
          "source": "ServletHolder.java:329"
        },
        {
          "method": "org.mortbay.jetty.servlet.WebApplicationHandler.dispatch",
          "source": "WebApplicationHandler.java:294"
        },
        {
          "method": "org.mortbay.jetty.servlet.ServletHandler.handle",
          "source": "ServletHandler.java:567"
        },
        {
          "method": "org.mortbay.http.HttpContext.handle",
          "source": "HttpContext.java:1808"
        },
        {
          "method": "org.mortbay.jetty.servlet.WebApplicationContext.handle",
          "source": "WebApplicationContext.java:525"
        },
        {
          "method": "org.mortbay.http.HttpContext.handle",
          "source": "HttpContext.java:1758"
        },
        {
          "method": "org.mortbay.http.HttpServer.service",
          "source": "HttpServer.java:879"
        },
        {
          "method": "org.mortbay.http.HttpConnection.service",
          "source": "HttpConnection.java:790"
        },
        {
          "method": "org.mortbay.http.HttpConnection.handleNext",
          "source": "HttpConnection.java:952"
        },
        {
          "method": "org.mortbay.http.HttpConnection.handle",
          "source": "HttpConnection.java:807"
        },
        {
          "method": "org.mortbay.http.SocketListener.handleConnection",
          "source": "SocketListener.java:197"
        },
        {
          "method": "org.mortbay.util.ThreadedServer.handle",
          "source": "ThreadedServer.java:289"
        },
        {
          "method": "org.mortbay.util.ThreadPool$PoolThread.run",
          "source": "ThreadPool.java:501"
        }
      ],
      "number": 1,
      "commentIndex": 4,
      "bugId": "141502",
      "date": "2006-05-12T21:29:56+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "critical"
    }
  ],
  "groupId": "141502",
  "bugId": "141502",
  "date": "2006-05-12T10:57:59+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "critical"
}