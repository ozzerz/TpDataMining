{
  "comments": [
    "Declarative Services from CVS Trunk throws the following exception\nwhen refreshing a bundle that was previously active:\n\n java.lang.IllegalArgumentException: object is not an instance of declaring class\n   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n   at java.lang.reflect.Method.invoke(Method.java:585)\n   at org.eclipse.equinox.ds.instance.InvokeMethod.invokeMethod(InvokeMethod.java:144)\n   at org.eclipse.equinox.ds.instance.InvokeMethod.bindComponent(InvokeMethod.java:103)\n   at org.eclipse.equinox.ds.instance.BuildDispose.bindServiceToReference(BuildDispose.java:413)\n   at org.eclipse.equinox.ds.instance.BuildDispose.bindReference(BuildDispose.java:356)\n   at org.eclipse.equinox.ds.instance.BuildDispose.bind(BuildDispose.java:306)\n   at org.eclipse.equinox.ds.instance.BuildDispose.buildComponentConfigInstance(BuildDispose.java:120)\n   at org.eclipse.equinox.ds.instance.InstanceProcess.registerComponentConfigs(InstanceProcess.java:112)\n   at org.eclipse.equinox.ds.resolver.Resolver.dispatchWork(Resolver.java:702)\n   at org.eclipse.equinox.ds.workqueue.WorkQueue$Queued.dispatch(WorkQueue.java:57)\n   at org.eclipse.equinox.ds.workqueue.WorkQueue.run(WorkQueue.java:108)\n\nThe problem can be recreated with the following sequences of steps:\n\n1. Start bundle\n2. Refresh bundle\n\n  - OR -\n\n1. Start bundle\n2. Stop bundle\n3. Refresh bundle\n4. Start bundle\n\nI tracked down the issue and found that references to a component\u0027s\nbind, unbind, activate and deactivate methods are not being reset when\nthe containing bundle\u0027s ClassLoader is re-created.  Therefore, the\nMethod fields are still referencing the methods from the old Class\ninstance.\n\nTo fix the issue, I added the following method to ComponentDescription\nto clear the activate and deactivate methods, as well as all of the\nreference bind and unbind methods:\n\n   public void clearReflectionMethods() {\n       activateMethodInitialized \u003d false;\n       activateMethod \u003d null;\n       deactivateMethodInitialized \u003d false;\n       deactivateMethod \u003d null;\n\n       Iterator iter \u003d referenceDescriptions.iterator();\n       while (iter.hasNext()) {\n           ReferenceDescription rd \u003d (ReferenceDescription) iter.next();\n           rd.setBindMethod(null);\n           rd.setUnbindMethod(null);\n       }\n   }\n\nI added a call to the new method in Activator.removedBundle(Bundle\nbundle, Object object).  This method is called when a bundle changes\nstate from ACTIVE to non-ACTIVE.  It may not be optimal to reset the\nMethod fields here, as simply stopping a bundle shouldn\u0027t cause its\nClassLoader to be recreated.  However, since the DS Activator uses the\ncustom BundleTracker class and does not implement BundleListener, this\nwas the best place I found to perform the operation.",
    "This is a good catch.  I don\u0027t think we considered what happens when packages get refreshed as we were writing this implementation.  \n\nI\u0027m adding BJ to the CC list - do you think this should be mentioned in the spec?\n\nJeremy, please attach a patch with your changes.",
    "Not sure it should be mentioned in the spec, as I think this is an implementation detail.\n\nIt seems we should catch the Bundle.UNRESOLVED event that is sent during package refresh and use that invalidate the reflection objects held for the bundle. \n\nTom, I assume that framework must send UNRESOLVED events for all bundles involved in a refresh?",
    "yup UNRESOLVED events are sent out.  You should listen to these events to know when to unset the methods for the components of the unresolved bundle.",
    "Created an attachment (id\u003d35020)\nPatch for #128703\n\nThis patch fixes the refresh bug.  It should affect ComponentDescription and Activator.",
    "Roy, can you provide a patch that listens to UNRESOLVED events to clear the methods?",
    "Created an attachment (id\u003d35431)\nUpdated patch - acts on UNRESOLVE\n\nUpdated patch - this clears the reflection cache only on UNRESOLVE, so merely stopping and restarting a bundle does not cause an unnecessary cache replacement.",
    "[contributed patch applied]\n\nRelease patch for M6.",
    "adding \"contributed\" keyword to patches contributed by the community."
  ],
  "commentCreationDates": [
    "2006-02-20T18:58:33+01:00",
    "2006-02-20T19:18:28+01:00",
    "2006-02-20T19:53:11+01:00",
    "2006-02-20T20:14:31+01:00",
    "2006-02-20T20:15:58+01:00",
    "2006-02-23T18:26:55+01:00",
    "2006-02-27T20:08:13+01:00",
    "2006-03-03T20:48:06+01:00",
    "2006-08-23T21:20:26+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "object is not an instance of declaring class",
      "elements": [
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.equinox.ds.instance.InvokeMethod.invokeMethod",
          "source": "InvokeMethod.java:144"
        },
        {
          "method": "org.eclipse.equinox.ds.instance.InvokeMethod.bindComponent",
          "source": "InvokeMethod.java:103"
        },
        {
          "method": "org.eclipse.equinox.ds.instance.BuildDispose.bindServiceToReference",
          "source": "BuildDispose.java:413"
        },
        {
          "method": "org.eclipse.equinox.ds.instance.BuildDispose.bindReference",
          "source": "BuildDispose.java:356"
        },
        {
          "method": "org.eclipse.equinox.ds.instance.BuildDispose.bind",
          "source": "BuildDispose.java:306"
        },
        {
          "method": "org.eclipse.equinox.ds.instance.BuildDispose.buildComponentConfigInstance",
          "source": "BuildDispose.java:120"
        },
        {
          "method": "org.eclipse.equinox.ds.instance.InstanceProcess.registerComponentConfigs",
          "source": "InstanceProcess.java:112"
        },
        {
          "method": "org.eclipse.equinox.ds.resolver.Resolver.dispatchWork",
          "source": "Resolver.java:702"
        },
        {
          "method": "org.eclipse.equinox.ds.workqueue.WorkQueue$Queued.dispatch",
          "source": "WorkQueue.java:57"
        },
        {
          "method": "org.eclipse.equinox.ds.workqueue.WorkQueue.run",
          "source": "WorkQueue.java:108"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "128703",
      "date": "2006-02-20T18:58:33+01:00",
      "product": "Equinox",
      "component": "Bundles",
      "severity": "normal"
    }
  ],
  "groupId": "128703",
  "bugId": "128703",
  "date": "2006-02-20T18:58:33+01:00",
  "product": "Equinox",
  "component": "Bundles",
  "severity": "normal"
}