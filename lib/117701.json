{
  "comments": [
    "Backtrack exceptions are generated too frequently by GNUCSourceParser.castExpression() method: in aprroximately one half of calls.\nMoreover, the same exception is thrown several times in the call stack, without any additional processing (for example, in GNUCSourceParser.multiplicativeExpression() method).\n\nIt introduces additional overhead and slows down indexing process.\nThe same situation with GNUCPPSourceParser.castExpression().\n\nI\u0027m going to do 2 things:\n- modify parser logic to avoid frequent exceptions from castException()\n- remove useless cascaded \"throw\u0027s\" where it\u0027s possible.\n\nJust elimination of cascaded exceptions can give 3-4% of indexing speed. \nI have tested preliminary solution on a set of 125 C files.\nBefore: indexing process runs ~44 seconds (average of 10 calls)\nAfter : indexing process runs ~42 seconds (average of 10 calls)\n\nWork is in progress.",
    "Status:\n\n1. GNUCSourceParser.typeId() method has been reworked to avoid raising backtrace exception (now returns null value instead). All it\u0027s references are modified to process this case (from castExpression(), in particular). \nResult: total indexing time reduced by ~10%\n\n2. GNUCSourceParser.multiplicativeExpression() was already corrected in CVS head. I have used old version before.\n\n3. Work is in progress, GNU CPP parser is not seriously investigated yet.\n\n",
    "Let me know if you get a patch available, I\u0027ll be happy to take a look at it.  \n\nI had done some experimentation previously in removing our exceptions, but I did not, at the time, see 10% improvement.  How are you coming across your metrics?",
    "Created an attachment (id\u003d30698)\nPreliminary version of proposed changes.\n\nAttached is not actual patch because work is not complete \n(CPP case is not affected anyhow).\n\n Anyway, current changes are:\n\n- inside \"typeId()\" method (GNUCSourceParser.java), \n\tCatch exceptions from declSpecifierSeq() and declarator(), as usual.\n        Don\u0027t raise our own backtrack exceptions but return null instead.\n        Note, exception parameter is not really used now by caller functions,\n        so passing null is enougth. \n- in all places where \"typeId()\" is called \n(AbstractGNUSourceCodeParser.java, GNUCSourceParser.java)\n            Process the case when type ID is null. \n            Note, exception processing remains possible.\nNothing else yet.\n\nMetrics are collected simply by getting currentTimeMillis(). \nSee DOMAddCompilationUnitToIndex.java changes. \nIt\u0027s may be not very precise, but indicative enougth.\nI\u0027m using a \"Midnight commander\" source for testing, \nIt contains 125 files (2.2M) of C code.\n\nWhen files AbstractGNUSourceCodeParser.java and \nGNUCSourceParser.java are not changed,\nindexing process takes ~38-39 seconds, \naccording to indexDocument() printouts.\nWith my changes, this process finishes after 33-34 seconds. \n\nI have tested index-related features in source editor \n(like go to definition, etc) - it seems to be working.\n\n",
    "The changes look good.  The performance seems promising ... perhaps we should do away with backtrack altogether, and use exceptions only for end of file?  C has few ambiguities as compared to C++, so if you are able to fix this problem for the CPP parser, we would be able to get much further ahead overall.  \n\nAlso, we have a fairly large JUnit (ParserTestSuite).  Running w/your patch introduces 21 new errors/failures.  There is 1 failure that exists with what is in HEAD right now, perhaps Andrew can take a look at that someday.  We should try and keep the test suite running as green as possible, if there are any tests that are moved from passing to failure a bug should be raised to track it.  \n\nOverall, I\u0027d say you are on the right track and I\u0027m interested in seeing how far you can take this.  As stated previously, I had experimented w/different exception strategies early on (when the bottleneck was more on the scanner side of things than the parse itself) and it did not pay off then ... but that was over a year ago, and the code has changed quite a bit since then.  \n\nThanks\nJC",
    "Created an attachment (id\u003d30779)\ncorrected \n\nComparing to previous patch, I have corrected postfixExpression() method: \"break\" misplace.\nCurrently, 72 of 75 cdt core tests are successfull (normally, 74 are OK).\nTime metrics: ~35 seconds (worse than wrong 1st variant but much better than standard one). ",
    "Some words about core tests failures.\n\nI\u0027ve started them several times for original code (from head, without my changes). Test env: Eclipse 3.2 M3, CDT plugins \u0026 tests from head.\nA number of failures is not stable: it can be 1..6 from time to time. \n\nWhen I have tested my changes, failures were raised 0, 2 or 3 times (also not stable) in the following places:\n- testGetTemplateSignature() /* rarely */\n- testGetChildrenOfTypeTemplate()\n- testGetNumberOfTemplateParameters()\n\nBut, original code fails on the same methods too !\nIt seems like tests are dependent on Moon phase...\n",
    "Current status:\noptimization of AbstractGNUSourceCodeParser.consume(int) method.\nBefore, it has raised ~8000 exceptions on mentioned \"mc\" source.\nChanges are:\n   - when possible, calls to consume(int) are replaced with consume()\n   - return null from consume(int) instead of exception\n   - all remaining calls are modified to handle null value.\nResult: \n   - together with previous changes, ~20% of time won. Indexing ~29-30 sec\n    (comparing to 38-39 sec with standard code)\n   - core tests behave in the same way as for standard code.\n\n \n",
    "Patch applied to HEAD. \n",
    "Can this be done for 3.0.2 as well. The build is set for Monday so we don\u0027t have much time.",
    "Created an attachment (id\u003d33641)\nPatch for C++ with the same changes as for C in 1st patch.\n\nThis is final patch for this bug.\n\"GNUCPPSourceParser\" class is mostly affected:\nbacktrack exceptions are eliminated where possible.\nThe same changes were made in \"GNUCSourceParser\" by\nmeans of 1st patch - so it is _not_ obsolete now.\n\nIn addition, frequently-used \"consume()\" method is \ncalled without parameter, where it is applicable.\nSo, extra checks for parameter and exception are\neliminated. It\u0027s a small saving, of course. But\nthis code is called very frequently during parse.\n\n\n",
    "I\u0027ll take a look at the new patch tomorrow.\nSee if i can apply them to 3.0X as well.",
    "In trying to apply your latest patch to HEAD, I see 46 new failures/errors in the core test suite, along the lines of \n\norg.eclipse.cdt.internal.core.parser.ParserException: FAILURE\n\tat org.eclipse.cdt.core.parser.tests.ast2.AST2BaseTest.parse(AST2BaseTest.java:130)\n\tat org.eclipse.cdt.core.parser.tests.ast2.AST2BaseTest.parse(AST2BaseTest.java:79)\n\tat org.eclipse.cdt.core.parser.tests.ast2.AST2Tests.testBug95720(AST2Tests.java:3069)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:57)\n\tat org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:24)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:109)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:379)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:177)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:338)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:282)\n\tat org.eclipse.core.launcher.Main.run(Main.java:977)\n\tat org.eclipse.core.launcher.Main.main(Main.java:952)",
    "And while I agree that removing the parameter from consume() calls will improve performance, the onus is now on the developer calling a subroutine to validate the tokens that are automagically \"assumed\" to be at the current position in the token stream.  ",
    "Looks like this will have to wait until 3.1.",
    "Regarding tests failures:\nThere was bug in GNUCSourceParser.postfixExpression().\n1. With this bug, there were 4 errors and many failures during parser test.\n2. When bug was fixed, 1 error (test7_3_3s12) and 13-14 failures occur.\n3. Before this patch (current header), same error and 10-11 failures occur.\n4. When I have rolled back patch from 2005-11-29, same error and 18 failures occur.\n\nSo, error in test7_3_3s12 has existed before current changes.\nFailures count is not stable in some cases.\n\nCurrently, work is in progress on test7_3_3s12 error root cause.\nIn addition, most \"stable\" failures are investigated.\nSince this bug is retargeted to 3.1, it seems to be not _very_ urgent.\n\n\n\n",
    "Final patch was checked in to CVS today.\n\nAffected files: \nparser/org/eclipse/cdt/internal/core/dom/parser/c/GNUCSourceParser.java\nparser/org/eclipse/cdt/internal/core/dom/parser/cpp/GNUCPPSourceParser.java\nparser/org/eclipse/cdt/internal/core/dom/parser/AbstractGNUSourceCodeParser.java\n\nChanges:\n- for C++ parser, exception calls are eliminated where possible.\n- in both C and C++ parser, many calls to \"consume(int)\" are replaced by \"consume()\". \nReplacements are made only when next token is known exactly, (checked before in \"if\" or \"switch\" statement), for example :\n   if (LT(1)\u003d\u003dIToken.t_while) {\n       consume(); // was: consume(IToken.t_while) \n       ...\n\nTest results are described in remark #15. No new errors now."
  ],
  "commentCreationDates": [
    "2005-11-23T11:29:20+01:00",
    "2005-11-25T11:57:35+01:00",
    "2005-11-25T18:55:57+01:00",
    "2005-11-28T10:11:26+01:00",
    "2005-11-28T15:45:51+01:00",
    "2005-11-29T16:19:42+01:00",
    "2005-11-29T17:03:07+01:00",
    "2005-11-30T16:23:27+01:00",
    "2005-12-02T21:17:51+01:00",
    "2006-01-25T20:20:55+01:00",
    "2006-01-26T13:20:03+01:00",
    "2006-01-26T20:47:26+01:00",
    "2006-01-27T16:03:48+01:00",
    "2006-01-27T16:05:33+01:00",
    "2006-01-30T00:55:28+01:00",
    "2006-02-06T14:56:15+01:00",
    "2006-02-09T13:58:07+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.cdt.internal.core.parser.ParserException",
      "message": "FAILURE",
      "elements": [
        {
          "method": "org.eclipse.cdt.core.parser.tests.ast2.AST2BaseTest.parse",
          "source": "AST2BaseTest.java:130"
        },
        {
          "method": "org.eclipse.cdt.core.parser.tests.ast2.AST2BaseTest.parse",
          "source": "AST2BaseTest.java:79"
        },
        {
          "method": "org.eclipse.cdt.core.parser.tests.ast2.AST2Tests.testBug95720",
          "source": "AST2Tests.java:3069"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:478"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:344"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:57"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run",
          "source": "CoreTestApplication.java:24"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:109"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:92"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:68"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:379"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:177"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:338"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:282"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:977"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:952"
        }
      ],
      "number": 0,
      "commentIndex": 12,
      "bugId": "117701",
      "date": "2006-01-27T16:03:48+01:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "normal"
    }
  ],
  "groupId": "117701",
  "bugId": "117701",
  "date": "2005-11-23T11:29:20+01:00",
  "product": "CDT",
  "component": "cdt-core",
  "severity": "normal"
}