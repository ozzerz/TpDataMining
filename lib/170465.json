{
  "comments": [
    "I can no longer index firefox 2.0 on my windows machine. The indexer job fails with the following exception:\njava.io.IOException: Map failed\nat sun.nio.ch.FileChannelImpl.map0(Native Method)\nat sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:742)\nat org.eclipse.cdt.internal.core.pdom.db.Chunk.\u003cinit\u003e(Chunk.java:50)\nat org.eclipse.cdt.internal.core.pdom.db.Database.pageIn(Database.java:539)\nat org.eclipse.cdt.internal.core.pdom.db.Database.getChunk(Database.java:245)\nat org.eclipse.cdt.internal.core.pdom.db.Database.getInt(Database.java:395)\n\nThe paging scheme introduced with bug 165451 does not work with mapped byte buffers. The problem is that there is no explicit operation to unmap a file-region. It eventually gets unmapped when the MappedByteBuffer object is finalized. I guess that in case you attempt to map the same file region before it was unmapped the exception above is thrown.\n\nActually I do not understand, why there is a need to page the database chunks. Even if each chunk adds to the virtual memory of the process, the operating system is free to page this memory if this is necessary/appropriate.\n\nIf we do have to page the chunks ourselves to limit the virtual memory used, we have to read the chunks into (possibly direct) byte buffers and have to make sure they get written back to disk, after they were changed.",
    "I\u0027ll quickly answer for the IBM guys. This is really intended for their remote indexer running on the mainframes which don\u0027t necessarily have their own paged memory schemes.\n\nNow having said that, I am concluding that paging should really only happen in that environment and not on the others. This is causing way more problems than it is solving and I\u0027m not sure how you were planning on getting around the missing unmap issue.",
    "The lack of a way to unmap MappedByteBuffers has been a problem since time immemorial.  If people are interested in the backstory there is a years-old bug in Sun\u0027s db that you can read:  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4724038\n\nI would rather preserve Doug\u0027s (and our own!) sanity for now and not try to get rid of the MappedByteBuffers.  That\u0027s a lot of work.\n\nMy proposed solution is the following:\n\n1.  Add a preference to turn on/off the paging.  This was the plan eventually anyway.  By default, paging will be off, and hence this problem won\u0027t affect any of you.\n\nIf paging is on, then the following will help:\n\n2.  If the cache size calculation is smarter (right now it\u0027s a fixed 1 MB), then pageouts will be less frequent, and hence this scenario will be much less likely to occur.  See bug #170349 for this discussion.\n\n3. If the map operation fails, we can catch the exception, do a System.gc(), sleep a short period, and then try again.  We would have a fixed number of retries in case of the super-perverse condition where the garbage collection just plain never happens, in which case we bail out with a sensible error message.\n\nI think that even though the above isn\u0027t a flawless solution, it\u0027s the most practical right now.  The effect on most users will be zero as they paging will be off unless they turn it on.  I think then with 2 and 3 combined we can get the chances of this happening down to a negligable level for those of us that care about paging, without us having to upheave the architecture more than we are already.\n\nHow does that sit with everyone?",
    "Thanks Chris, sounds good to me. Would it be possible to have the paging turned off soon. This thing is killing my productivity working on the Windows debugger. I\u0027m already faced with needing to put printfs in to debug it so I\u0027m doing a lot of edit/compile/run cycles which is triggering the issues.",
    " (In reply to comment #3)\n\u003e Thanks Chris, sounds good to me. Would it be possible to have the paging turned\n\u003e off soon. This thing is killing my productivity working on the Windows debugger.\n\u003e I\u0027m already faced with needing to put printfs in to debug it so I\u0027m doing a lot\n\u003e of edit/compile/run cycles which is triggering the issues.\n\nYep.  Since this is holding you and Markus up we\u0027ll patch this ASAP.",
    "I\u0027ve rolled the paging patch back out until we get the preference infrastructure in place.  I\u0027ve reopened 165451 as a result.\n\nI\u0027m leaving this bug open as we still need to track our workaround for the unmapping issue.",
    "Funny thing happened after all this. I was talking to a co-worker who just got back from visiting a customer. They have a large workspace with over 150 projects and were complaining that the indexer kept killing their machine. So I set up the environment and lo and behold, the memory consumption by the memory mapped buffers kept growing until it past some magic figure and I started getting out of memory exceptions. The combined indexes took up over 420MB. D\u0027oh!\n\nIt looks like I\u0027m going to have to do something drastic to solve their problem, which I need to do for 3.1.2. That something is getting rid of the memory mapped files and using straight byte buffers and making sure they get saved regularly. Plus use a paging system. Stay tuned...",
    "Fixed by removing the use of memory mapped files. See bug 170542.",
    "Setting to milestone 4.0 so we can generate a report of all bugs fixed in 4.0."
  ],
  "commentCreationDates": [
    "2007-01-15T14:04:55+01:00",
    "2007-01-15T15:12:20+01:00",
    "2007-01-15T16:32:57+01:00",
    "2007-01-15T17:09:22+01:00",
    "2007-01-15T17:13:21+01:00",
    "2007-01-15T19:17:53+01:00",
    "2007-01-15T21:01:55+01:00",
    "2007-03-23T12:07:22+01:00",
    "2007-05-14T02:34:46+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.IOException",
      "message": "Map failed",
      "elements": [
        {
          "method": "sun.nio.ch.FileChannelImpl.map0",
          "source": "Native Method"
        },
        {
          "method": "sun.nio.ch.FileChannelImpl.map",
          "source": "FileChannelImpl.java:742"
        },
        {
          "method": "org.eclipse.cdt.internal.core.pdom.db.Chunk.\u003cinit\u003e",
          "source": "Chunk.java:50"
        },
        {
          "method": "org.eclipse.cdt.internal.core.pdom.db.Database.pageIn",
          "source": "Database.java:539"
        },
        {
          "method": "org.eclipse.cdt.internal.core.pdom.db.Database.getChunk",
          "source": "Database.java:245"
        },
        {
          "method": "org.eclipse.cdt.internal.core.pdom.db.Database.getInt",
          "source": "Database.java:395"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "170465",
      "date": "2007-01-15T14:04:55+01:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "critical"
    }
  ],
  "groupId": "170465",
  "bugId": "170465",
  "date": "2007-01-15T14:04:55+01:00",
  "product": "CDT",
  "component": "cdt-core",
  "severity": "critical"
}