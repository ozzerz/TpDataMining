{
  "comments": [
    "Hy,\n\nthe FormEditor crash\u0027s when i make an addPage(IEditorPart, IEditorInput) and \nIEditorPart is an FormPage.\n\nThis can be Tested with the FormsExamples if you change\naddPage(new FreeFormPage(this)); \nto \naddPage(new FreeFormPage(this), getEditorInput()); \n\nThe Problem seems to be an Missing selection check in \nMultiPageEditorPart.class:414.\n\nRegards Thomas\n\nStackTrace:\norg.eclipse.jface.util.Assert$AssertionFailedException: null argument;\n        at org.eclipse.jface.util.Assert.isNotNull(Assert.java:139)\n        at org.eclipse.jface.util.Assert.isNotNull(Assert.java:116)\n        at \norg.eclipse.jface.viewers.SelectionChangedEvent.\u003cinit\u003eSelectionChangedEvent.jav\na:39)\n        at \norg.eclipse.ui.part.MultiPageEditorPart.pageChangeMultiPageEditorPart.java:442)\n        at \norg.eclipse.ui.forms.editor.FormEditor.pageChangeFormEditor.java:156)\n        at \norg.eclipse.ui.forms.editor.FormEditor.setActivePageFormEditor.java:240)\n        at \norg.eclipse.ui.part.MultiPageEditorPart.createPartControlMultiPageEditorPart.ja\nva:188)\n        at org.eclipse.ui.internal.PartPane$1.run(PartPane.java:118)\n        at \norg.eclipse.core.internal.runtime.InternalPlatform.runInternalPlatform.java:638\n)\n        at org.eclipse.core.runtime.Platform.run(Platform.java:497)\n        at rg.eclipse.ui.internal.PartPane.createChildControlPartPane.java:114)\n        at org.eclipse.ui.internal.PartPane.createControl(PartPane.java:230)",
    "We have the same problem as describted and hoped that will be fixed in the next\nintegration build.\n\nregards\nfrank",
    "Note however that FormPage by itself was not designed to be a standalone \neditor - rather a page in the multi-page editor that is added by \u0027addPage\n(IFormPage)\u0027. The method you are using is reserved for classes that can be \nstandalone editors by themselves (for example, TextEditor). Can you explain why \nyou need to call this particular method on the IFormPage class?",
    "Because we will create an editor like the plugin.xml editor and with \u0027addPage\n(IFormPage)\u0027 we must implement all the editor propertyChange handling \n(isDirty,..) twice.\nIf we can use \u0027addPage(IFormPage, IEditorInput)\u0027 we can write a normal \nIFormPage an the isDirty Handling is made by the MultiPageEditorPart.\n",
    "I am afraid I still don\u0027t understand the use case. The two methods are there \nfor a reason:\n\naddPage(IFormPage) is there to get individual form pages as in plugin.xml multi-\npage editor (PDE team is currently redesigning the very editor and we are using \naddPage(IFormPage) for all pages except source). \n\naddPage(IEditorPart, IEditorInput) is there for complete standalone editors \nthat need to be added as pages. We use this method to add TextEditor for source \npages.\n\nI still don\u0027t understand why adding IFormPage using the second method? ",
    "hy dejan,\nwhen i make addPage(IEditorPart, IEditorInput) the MultiPageEditorPart ads an \npropertyChange Listener to ervery part. \nWhen a property is changed in a part the MultiPageEditorPart notifys the \nworkbench for events e.g. isDirty.\nI will use these logic for my own editors an don\u0027t understand the reason to \nmake addPage(IEditorPart) and implement these by self.\ni will use a formpage as an editorpart with all advantages and not implement \nthe isDirty notification logic in all formpages.\nif this is not the logic what is the solution for these problem?\n\nregards thomas",
    "OK, that\u0027s a different story.\n\nPDE is now redesigning editors based on Eclipse Forms (you can find the code \nin CVS HEAD under \u0027org.eclipse.pde.ui\u0027 project in \u0027srcForms\u0027 source folder). \nYou can see there that we fire property changes on the multi-page editor \nitself, not on the page.\n\nThe concept was always that form pages are not editors by themselves and they \nsimply reach up to the multi-page editor to notify that they are dirty. If you \ncheck the new PDE implementation, you will see that forms mark themselves as \ndirty, turn around and mark the page dirty, which turns around and marks the \neditor dirty. No need for property editors. \n\nThe method \u0027addPage(IEditorPart, IEditorInput)\u0027 is reserved for cases where \nyou take an entire editor written by somebody else and add it as-is. Here it \nis important that the editor \u0027feels\u0027 normal inside the multi-page editor i.e. \nall the expected context is there. Form pages, on the other hand, know that \nthey are in the multi-page editor and can always delegate notification to the \neditor itself.",
    "This defect is fairly old - do you still have a problem with a more recent \ncode?",
    "Closing due to the defect\u0027s age."
  ],
  "commentCreationDates": [
    "2004-03-03T19:32:27+01:00",
    "2004-03-10T10:33:55+01:00",
    "2004-03-10T12:42:43+01:00",
    "2004-03-10T12:52:31+01:00",
    "2004-03-10T12:56:57+01:00",
    "2004-03-10T13:33:14+01:00",
    "2004-03-10T14:37:27+01:00",
    "2005-05-03T00:24:09+02:00",
    "2006-11-15T16:21:22+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.jface.util.Assert$AssertionFailedException",
      "message": "null argument;",
      "elements": [
        {
          "method": "org.eclipse.jface.util.Assert.isNotNull",
          "source": "Assert.java:139"
        },
        {
          "method": "org.eclipse.jface.util.Assert.isNotNull",
          "source": "Assert.java:116"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "53657",
      "date": "2004-03-03T19:32:27+01:00",
      "product": "Platform",
      "component": "User Assistance",
      "severity": "normal"
    }
  ],
  "groupId": "53657",
  "bugId": "53657",
  "date": "2004-03-03T19:32:27+01:00",
  "product": "Platform",
  "component": "User Assistance",
  "severity": "normal"
}