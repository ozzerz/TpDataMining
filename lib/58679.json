{
  "comments": [
    "We are using AspectJ on a large java project (ca 6000 classes) and have been \nrunning ajc 1.1 steadily for nearly a year - with no serious problems. \nWhen testing out the new 1.2 rc1 candidate, the following NPE ocurred:\n\n\nABORT\n        \nException thrown from AspectJ 1.2rc1\n\nThis might be logged as a bug already -- find current bugs at\n  http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\nBugs for exceptions thrown have titles File:line from the top stack, \ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nat http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\n\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nnull\njava.lang.NullPointerException\n        at org.eclipse.jdt.internal.compiler.CompilationResult.computePriority\n(CompilationResult.java:110)\n        at org.eclipse.jdt.internal.compiler.CompilationResult.quickPrioritize\n(CompilationResult.java:336)\n        at org.eclipse.jdt.internal.compiler.CompilationResult.getProblems\n(CompilationResult.java:230)\n        at org.eclipse.jdt.internal.compiler.CompilationResult.getAllProblems\n(CompilationResult.java:118)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult\n(AjBuildManager.java:661)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.acceptResult\n(AjCompilerAdapter.java:178)\n        at org.aspectj.ajdt.internal.compiler.WeaverAdapter.finishedWith\n(WeaverAdapter.java:203)\n        at org.aspectj.ajdt.internal.compiler.WeaverAdapter.weaveCompleted\n(WeaverAdapter.java:167)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:570)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave\n(AjCompilerAdapter.java:239)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling\n(AjCompilerAdapter.java:114)\n        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376)\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:600)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:160)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:94)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)\n        at org.aspectj.tools.ajc.Main.run(Main.java:280)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:217)\n        at org.aspectj.tools.ajc.Main.main(Main.java:79)\n\n\n1 fail|abort",
    "This is likely to be related to bug 57432.  If it is what I think it is then \nthe problem is that you are having \u003e100 errors/warnings (possibly declare \nerrors/warnings) for some input files - is that possible? (And is this a \nbinary weave?)\n",
    "Correct. There are probably \u003e 100 warnings generated. And it is a binary weave.",
    "phew... so I do know what I\u0027m doing :)\n\nWe go into the code that NPEs if there are \u003e100 errors - the code is intended \nto throw away all but the most important 100 errors.\n\nThere are two options for 1.2 final:\n\n- Disturb the codebase quite a lot adding support for binary source reference \ncontexts.  This will make the code that determines the top 100 errors work \nsuccessfully.\n\n- Increase the number from 100 to something like 100000 - that will mean it is \nhighly unlikely we\u0027ll ever trigger the prioritization logic.  We\u0027ll also leave \nthe bug open and fix it properly in the next release.\n",
    "I like your idea of increasing the max errors given the fact that this is \ncoming after 1.2rc1.  You should increase it to Integer.MAX or something \nsimilar to make sure it really won\u0027t show up in practice.",
    "Ok, I\u0027ve made the change, instead of the limit \nbeing \u0027compiler.options.maxProblemsPerunit\u0027, it is \u0027Integer.MAX_VALUE\u0027.  \nThe line I fixed is in AjCompilerAdapter.getBinarySourcesFrom().  Its marked\nXXX and with this bug number.\n\nAll the tests have passed.  I could respin a whole build and upload it \nsomewhere for Per to try but as its such a localized change and I\u0027m \n99.99999999% confident it is the fix for this bug, I\u0027m about to attach a zip \nfile to this bug report that contains the fix (a single .class file) - can you \ntry this for me Per?  Easiest way is to put patch.zip ahead of \naspectjtools.zip in the ajc.bat file and then attempting your binary weave.\n\nLet me know if it works for you and we\u0027ll decide whether to cut a new RC \ncontaining the fix.",
    "Created an attachment (id\u003d9681)\nContains one class file that \u0027fixes\u0027 this bug.\n",
    "I have created a new testcase for this.  A program that is subject to a binary \nweave and has 101 declare errors attached to it.  In AspectJ without the fix, \nthe testcase fails with an NPE.  I have also checked in the fix to up the \nlimit to Integer.MAX_VALUE.  We should now change this bug report to an \nenhancement.  The future enhancement would be to correctly support binary \nreference contexts for \u0027binary source\u0027 files (then the prioritization logic \nwould not NPE).  I\u0027ve marked the place in the code where Integer.MAX_VALUE is \nused - search for this bug number in the source.",
    "\n\n*** This bug has been marked as a duplicate of 57432 ***"
  ],
  "commentCreationDates": [
    "2004-04-15T18:12:36+02:00",
    "2004-04-19T09:35:09+02:00",
    "2004-04-19T10:29:43+02:00",
    "2004-04-19T10:39:06+02:00",
    "2004-04-19T18:27:50+02:00",
    "2004-04-20T10:19:30+02:00",
    "2004-04-20T10:21:31+02:00",
    "2004-04-23T14:41:32+02:00",
    "2004-05-13T11:12:24+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.CompilationResult.computePriority",
          "source": "CompilationResult.java:110"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.CompilationResult.quickPrioritize",
          "source": "CompilationResult.java:336"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.CompilationResult.getProblems",
          "source": "CompilationResult.java:230"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.CompilationResult.getAllProblems",
          "source": "CompilationResult.java:118"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult",
          "source": "AjBuildManager.java:661"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.acceptResult",
          "source": "AjCompilerAdapter.java:178"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.WeaverAdapter.finishedWith",
          "source": "WeaverAdapter.java:203"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.WeaverAdapter.weaveCompleted",
          "source": "WeaverAdapter.java:167"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:570"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:239"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:114"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:376"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:600"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:160"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:94"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:102"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:53"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:280"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:217"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:79"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "58679",
      "duplicateId": "57432",
      "date": "2004-04-15T18:12:36+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "57432",
  "bugId": "58679",
  "duplicateId": "57432",
  "date": "2004-04-15T18:12:36+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}