{
  "comments": [
    "When running Swing components in an SWT container, cut/copy/paste actions via \nthe keyboard no longer work.  (On Windows, CTRL-C, CTRL-X, CTRLV)\n\nThis defect is present in build M8 and in build 20040519",
    "This happens because Eclipse Workbench is intersepting these keys.",
    "A workaround is to register your own handler for cut/copy/paste, register it \nwhen the Swing component is active, and have it forward cut/copy/paste to the \nunderlying swing widget. ",
    "What eclipse interfaces would I use to \"register your own handler for \ncut/copy/paste\"?\n\nAlso is there any intention of fixing this defect?",
    "This is a pretty major issue for anyone doing Swing integration into eclipse.  \nCut/Copy/Paste/Undo/Redo etc. are all fundamentally required for any useful UI.\n\nI\u0027m prepared to help -- Could someone point me in the right direction to \ninvestigate this defect?  What classes are involved with key bindings, and \nwhere can I find documentation or eclipse code on keystroke handling?",
    "I\u0027d recommend looking at WidgetMethodHandler (and its descendent(s)).  Make \nsure that they handle the case where the underlying widget is not an SWT \nwidget.  This may not be possible.\n\nAn API change to WorkbenchCommandSupport might also be a solution, but this \nwould be too much for the 3.0 time frame.",
    "What component is responsible for \"stealing\" keystrokes from the widgets?  \n(Keystrokes for which there is a command are never \"seen\" by the underlying \nwidget using a KeyListener)",
    "Display.addFilter\nWorkbenchKeyboard\nWorkbenchContextSupport\nWorkbenchCommandSupport",
    "I just sat down with Steve and went through a bit of how this works.  \nApparently, a composite with the embedded bit set is reported as having focus \nwhenever an AWT/Swing control really has focus.  This embedded bit is also used \nfor things like the browser widget. ",
    "Does this mean that the embedded composite should receive these commands?",
    "I believe the global key filter should not enabled when an embedded composite \nhas focus.  Or, at least, it shouldn\u0027t eat key events. \n \n ",
    "The following code change to WorkbenchKeyboard.java seems to do the trick.  \nNotice how processing key events is avoided for any widget with the embedded \nstyle.  \n\nI\u0027m not sure if this change would have any other implications, however it \nseems to work: the Swing widgets process the cut/copy/paste commands properly, \nand other SWT widgets remain unaffected.  \n\nThe only remaining work to be done would be to update the AWT/Swing key \nmappings to match the workbench settings (this could be left to the \napplication code).\n\nvoid processKeyEvent(List keyStrokes, Event event) {\n        // Dispatch the keyboard shortcut, if any.\n        boolean eatKey \u003d false;\n        if (!keyStrokes.isEmpty()) {\n\n                // only attempt to process keystrokes for widgets that are\n                // not embedded.\n        \tif ((event.widget.getStyle() \u0026 SWT.EMBEDDED) \u003d\u003d 0) {\n\n\t            try {\n\t                eatKey \u003d press(keyStrokes, event);\n\t            } catch (CommandException e) {\n\t                logException(e);\n\t                eatKey \u003d true;\n\t            }\n        \t} else {\n        \t\tif (DEBUG \u0026\u0026 DEBUG_VERBOSE) {\n        \t\t\tSystem.out.println(\"skipping embedded widget\");\n        \t\t}\n        \t}\n        }\n\n        if (eatKey) {\n            switch (event.type) {\n            case SWT.KeyDown:\n                event.doit \u003d false;\n                break;\n            case SWT.Traverse:\n                event.detail \u003d SWT.TRAVERSE_NONE;\n                event.doit \u003d true;\n                break;\n            default:\n            }\n            event.type \u003d SWT.NONE;\n        }\n    }",
    "Also see Bug 56223. ",
    "Are you guys changing the keys for COPY/CUT/PASTE in RC2 in order to avoid this \nproblem? If that\u0027s the case, it\u0027s not going to work out for everyone because a \nlot of us are already used to the original CTL-C/X/V.",
    "Please ignore my last message. Sorry.",
    "Created an attachment (id\u003d12342)\nPatch to WidgetMethodHandler\n\nThe idea of turning of key bindings in a Swing widget isn\u0027t going to work\nperfectly well.  The problem is that the vast majority of Eclipse key bindings\nshould still work (e.g., Open Type, Ctrl+Shift+T).\n\nThe problem is that the global cut, copy, paste and selectAll methods rely on\nlooking up the required methods on the current focus control.  In the case of\nSwing, the focus control is a Composite.  My thought is that when this happens,\nit might be better to try to look up the focusOwner from Swing\u0027s focus manager.\n Then it would be possible to dispatch the cut, copy, paste and selectAll (if\nappropriate).\n\nHowever, this has a couple of problems right now:\n+ This patch seems to cause long hangs when looking up the methods (major).\n+ This technique will miss AWT components which provided no such methods (e.g.,\nTextField).  This I feel is a minor problem, as I believe AWT components are\nrarely used (compared to Swing components).",
    "Created an attachment (id\u003d12344)\nProject providing a test case\n\nThis plug-in project provides a view called \"Swing View\", which contains some\nembedded Swing components.  The top two text fields are a JTextField (left) and\nTextField (right).",
    "In I200406170800, using the test case I have, the cut/copy/paste key bindings \nwork as expected. \n \nCan you confirm? ",
    "While I\u0027m not entirely sure what the problem might have been, my test case now \nworks for me.  Moving to WORKSFORME. ",
    "The test case for defect 60934 (https://bugs.eclipse.org/bugs/show_bug.cgi?\nid\u003d60934) demonstrates the use of some simple swing text items in a wizard \ndialog where the cut/copy/paste keys don\u0027t work.  \n\nPlease see 60934 attachment https://bugs.eclipse.org/bugs/attachment.cgi?\nid\u003d10268\u0026action\u003dview",
    "This is happening only in dialogs opened with Swing/AWT component inside of \nthem.  The problem is as described in comment #15, but only applies to dialogs \n(where the WidgetMethodHandler is meant to take over). \n ",
    "This is a showstopper issue for anyone integrating Swing into eclipse wizard \ndialogs... is there any way to have this issue resolved?  I\u0027m prepared to \ncontribute.  If there is a preferred fix over my previous post ( bug 63235, \ncomment 11 ) could someone point me in the right direction?",
    "The direction taken in comment #15 might be preferrable.  Otherwise, your \napproach might work, but it would have to be restricted to the particular case \nthat matters (e.g., special case when the WidgetMethodHandler is about to eat a \nkey when a Swing component has focus). ",
    "The direction taken in comment 15 looks great... the only problem that I could \nsee with it is that the method call to selectAll/copy/paste for swing \ncomponents doesn\u0027t occur on the swing dispatch thread.  I imagine that it \nshould be fairly easy to eliminate the performance issue.  Would it make sense \nto dispatch the method call to a runnable on the swing event thread?\n\nOn the other hand, for the solution in comment 11, it\u0027s already restricted to \nthe embedded style.  Does it need restricting further?\n\n",
    "My concern is that disabling this key binding for all embedded widgets may not \nbe what we want to do.  There are a lot of situations other than embedded SWT \nwidgets in dialogs that would be affected by this.  While I can\u0027t think of any \nreason why this might be a problem, I would prefer a solution that only \naffected Swing widgets in dialogs. \n \nSwitching it to a Swing thread may fix the problems. ",
    "Created an attachment (id\u003d13123)\nA version of WidgetMethodHandler based on comment 15 that appears to fix the\nproblem\n\nAdditional work put into the patch referenced in comment 15 that appears to fix\nthe performance issue.\tCut/Copy/paste works very nicely.  Tested on\nJTextField, editable JTable, editable JComboBox.",
    "Created an attachment (id\u003d13124)\nA version of WidgetMethodHandler based on comment 15 that appears to fix the\nproblem\n\nThis version fixes the infinite loop issue.",
    "I\u0027ve now completed my testing the WidgetMethodHandler for both SWT and Swing \nitems, and it looks good.  This implementation is based on the patch sumbitted \nby Douglas Pollock (comment 15).\n\nThe loop and performance issue was caused by a loop that called Class.getMethod\n(name,args) while traversing up the inheritance hierarcy.  After reading the \njavadocs for Class.getMethod, this is unnecessary since Class.getMethod \nalready provides this functionality.",
    "I\u0027ll try to review and test the patch, and (assuming everything is good) I\u0027m \nsuggesting this for inclusion in 3.0.1. ",
    "Is there anything else that I can do to help?  (has the patch been committed?)",
    "I\u0027ve been away for the past three weeks.  The patch has not been committed. ",
    "I\u0027ve modified the patch a little bit more -- just some clean up, and removing \nanother unnecessary tree climbing piece of code.  I also tried to make it so \nthat proper error reporting happens if the Swing method fails to execute.  I \ndid this with a synchronous call to Swing. \n \nI tested with three different pieces of Eclipse.  The test is simply to cut \nfrom the piece being tested, and paste to another application or to another \nlocation within Eclipse. \n \nFirst of all, I tried several of the built-in views.  This included other \nembedded views, such as the Javadoc view.  It worked in all of these cases. \n \nI then tried the test case that I provided as an attachment to this bug.  This \ncase does not trigger the WidgetMethodHandler.  There are \ncopy/cut/paste/selectAll RetargetActions defined in the workbench.  When they \nhave no handler, they fall back to the native behaviour. \n \nLastly, I tested the wizard in the Bug 60934.  This wizard worked without \nproblem.  I tested select all, delete, copy and paste. \n \nBilly brought up one interesting point: it might be possible for this to cause \na deadlock if Eclipse owns the clipboard and Swing tries to get it.  It doesn\u0027t \nactually deadlock; it times out after about one second, and the paste (in \nSwing) fails.  So, I\u0027ve left it as an asynchronous execution and -- in the \nevent of failure -- it communicates back to the SWT event thread, and tells the \nworkbench to handle the exception. \n \nThis patch has been reviewed by Billy, and will be committed to the 3.0.1 \nbranch.  It should appear in the next 3.1 integration build (I200408170800) and \nthe next 3.0.1 maintenance build (I200408180800). \n \nPlease download one (or both) of these builds as they become available and \nconfirm the fix. \n ",
    "Works for me with build 200408180800 (3.0.1)\nThanks!",
    "Verified by reporter in M200408180800. ",
    "Pressing CTRL+A in an embedded JTextComponent causes an exception.  The expected behaviour is for all text to be selected (Select All).\n\nAfter inspecting the code in a debugger it was apparent that SelectAllHandler has found the appropriate method to call (JTextComponent.selectAll) however\nSelectAllHandler is attempting to invoke the method on an SWT composite (the focus control).\n\nThe stack trace is as follows:\n\njava.lang.IllegalArgumentException: object is not an instance of declaring class\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:589)\n\tat org.eclipse.ui.internal.handlers.SelectAllHandler.execute(SelectAllHandler.java:50)\n\tat org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:151)\n\tat org.eclipse.core.commands.Command.executeWithChecks(Command.java:460)\n\tat org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:421)\n\tat org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:160)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:466)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:798)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:845)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:563)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:506)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:122)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Display.filterEvent(Display.java:978)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:924)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:949)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:934)\n\tat org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:962)\n\tat org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:958)\n\tat org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1272)\n\tat org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:3336)\n\tat org.eclipse.swt.widgets.Control.windowProc(Control.java:3236)\n\tat org.eclipse.swt.widgets.Display.windowProc(Display.java:3965)\n\tat org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)\n\tat org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1799)\n\tat org.eclipse.swt.widgets.Display.messageProc(Display.java:2538)\n\tat org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)\n\tat org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1799)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2905)\n\tat org.eclipse.jface.window.Window.runEventLoop(Window.java:811)\n\tat org.eclipse.jface.window.Window.open(Window.java:789)\n\nAfter inspecting the code for SelectAllHandler, it was also apparent that the code will not handle embedded Swing components properly.  The SelectAllHandler code should  be modified to work the same as WidgetMethodHandler (its super class), which tests for the SWT.EMBEDDED style and invokes the method on the Swing event dispatch thread.\n\n",
    "BTW, this latest test occurred on 3.2M5a",
    "Please open a separate bug.",
    "I\u0027ve created a seperate log Bug 132215"
  ],
  "commentCreationDates": [
    "2004-05-20T17:56:55+02:00",
    "2004-05-20T19:13:30+02:00",
    "2004-05-20T22:10:56+02:00",
    "2004-06-01T02:09:08+02:00",
    "2004-06-01T21:50:25+02:00",
    "2004-06-02T15:23:38+02:00",
    "2004-06-02T17:21:54+02:00",
    "2004-06-02T21:00:12+02:00",
    "2004-06-03T16:40:35+02:00",
    "2004-06-10T17:59:38+02:00",
    "2004-06-10T18:03:09+02:00",
    "2004-06-10T18:52:53+02:00",
    "2004-06-11T18:09:05+02:00",
    "2004-06-13T15:43:17+02:00",
    "2004-06-13T16:21:22+02:00",
    "2004-06-17T01:30:51+02:00",
    "2004-06-17T01:39:17+02:00",
    "2004-06-17T18:38:44+02:00",
    "2004-06-17T21:10:20+02:00",
    "2004-06-25T02:41:44+02:00",
    "2004-06-29T21:39:59+02:00",
    "2004-07-06T00:59:19+02:00",
    "2004-07-06T14:45:30+02:00",
    "2004-07-07T17:23:33+02:00",
    "2004-07-07T18:16:15+02:00",
    "2004-07-10T01:47:21+02:00",
    "2004-07-10T03:12:05+02:00",
    "2004-07-10T03:15:09+02:00",
    "2004-07-10T20:20:15+02:00",
    "2004-07-31T00:44:51+02:00",
    "2004-08-09T19:51:38+02:00",
    "2004-08-13T17:14:56+02:00",
    "2004-08-23T21:21:12+02:00",
    "2004-08-24T19:46:30+02:00",
    "2006-03-16T16:28:53+01:00",
    "2006-03-16T16:29:32+01:00",
    "2006-03-16T18:12:26+01:00",
    "2006-03-16T18:23:21+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "object is not an instance of declaring class",
      "elements": [
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:589"
        },
        {
          "method": "org.eclipse.ui.internal.handlers.SelectAllHandler.execute",
          "source": "SelectAllHandler.java:50"
        },
        {
          "method": "org.eclipse.ui.internal.handlers.HandlerProxy.execute",
          "source": "HandlerProxy.java:151"
        },
        {
          "method": "org.eclipse.core.commands.Command.executeWithChecks",
          "source": "Command.java:460"
        },
        {
          "method": "org.eclipse.core.commands.ParameterizedCommand.executeWithChecks",
          "source": "ParameterizedCommand.java:421"
        },
        {
          "method": "org.eclipse.ui.internal.handlers.HandlerService.executeCommand",
          "source": "HandlerService.java:160"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand",
          "source": "WorkbenchKeyboard.java:466"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.press",
          "source": "WorkbenchKeyboard.java:798"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent",
          "source": "WorkbenchKeyboard.java:845"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings",
          "source": "WorkbenchKeyboard.java:563"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3",
          "source": "WorkbenchKeyboard.java:506"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent",
          "source": "WorkbenchKeyboard.java:122"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.filterEvent",
          "source": "Display.java:978"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:924"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:949"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:934"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendKeyEvent",
          "source": "Widget.java:962"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendKeyEvent",
          "source": "Widget.java:958"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.wmChar",
          "source": "Widget.java:1272"
        },
        {
          "method": "org.eclipse.swt.widgets.Control.WM_CHAR",
          "source": "Control.java:3336"
        },
        {
          "method": "org.eclipse.swt.widgets.Control.windowProc",
          "source": "Control.java:3236"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.windowProc",
          "source": "Display.java:3965"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.DispatchMessageW",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.DispatchMessage",
          "source": "OS.java:1799"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.messageProc",
          "source": "Display.java:2538"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.DispatchMessageW",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.DispatchMessage",
          "source": "OS.java:1799"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2905"
        },
        {
          "method": "org.eclipse.jface.window.Window.runEventLoop",
          "source": "Window.java:811"
        },
        {
          "method": "org.eclipse.jface.window.Window.open",
          "source": "Window.java:789"
        }
      ],
      "number": 0,
      "commentIndex": 34,
      "bugId": "63235",
      "date": "2006-03-16T16:28:53+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "63235",
  "bugId": "63235",
  "date": "2004-05-20T17:56:55+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}