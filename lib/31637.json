{
  "comments": [
    "When trying to debug an application the variables tab is empty. Also when I try\nto inspect or display a variable I get the following error logged in the eclipse\nlog file:\n\n!ENTRY org.eclipse.jdt.debug 4 120 Feb 12, 2003 11:11:29.503\n!MESSAGE Internal error logged from JDI Debug: \n!STACK 0\njava.lang.NullPointerException\n\tat org.eclipse.jdt.internal.debug.core.model.JDIValue.toString(JDIValue.java:362)\n\tat org.eclipse.jdt.internal.debug.eval.ast.instructions.Cast.execute(Cast.java:88)\n\tat\norg.eclipse.jdt.internal.debug.eval.ast.engine.Interpreter.execute(Interpreter.java:44)\n\tat\norg.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread$1$EvaluationRunnable.run(EvaluationThread.java:158)\n\tat\norg.eclipse.jdt.internal.debug.core.model.JDIThread.runEvaluation(JDIThread.java:600)\n\tat\norg.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread.doEvaluation(EvaluationThread.java:180)\n\tat\norg.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread.access$2(EvaluationThread.java:142)\n\tat\norg.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread$1.run(EvaluationThread.java:116)\n\tat java.lang.Thread.run(Thread.java:536)\n\n\nI am using Eclipse 2.1 (M5 / RC0).",
    "Hmmm. Now it seems as though inspect and display are working. Perhaps I was\ntrying to inspect/display before the object was constructed...\n\nHowever, the variables are still not shown in the window. The only thing I can\ndo is use inspect, but this is not a dynamic behaviour so each time the variable\nis created I must re-inspect it. :/\n\nI have double checked in the filter and display window that local variables are\nmarked as being shown, and I have tried setting it so that everything is marked\nas to be shown. This seems to have no affect.",
    "This bug also seems to be present in the integration build:\n\neclipse-SDK-I20030211-win32.zip\n\nalthough this was tested by just dropping this version in on top of the original\nM5 release that I had. Hopefully that should be ok...",
    "*** Bug 31636 has been marked as a duplicate of this bug. ***",
    "The problem of seeing variables is a dup of bug 30971. The NPE needs \ninvestigation.",
    "Can reproduce NPE by evaluating the following code:\n\njava.util.Vector v \u003d null;\nreturn (Object)v;",
    "Fixed NPE by overriding toString in JDIVoidValue and JDINullValue (this was a \nNPE encountered when generating an error message). The evaluation now results \nin the following error message in the Display view:\n\nEvaluation failed. Reason(s):\n\tClassCastException: Cannot cast null to java.lang.Object\n\nHowever, I beleive the result should just be \"null\", as this is valid code.",
    "Luc, I believe that our interpretter will not know what \"type\" the \"null\" value \nis (since only the value is on the stack, not its declaration and type). \nHowever, would it be safe to assume that when a value is null, we can simply \ncast it to whatever we want? Since it is null, nothing else can be sent to the \nobject in future. In fact, since the follow code executes without error, I \nbelieve we can do the cast safely:\n\npublic class Hello {\n  public static void main(String[] args) {\n    new Hello().foo();\n  }\n  public void foo() {\n    Set s \u003d bar();\n  }\n  \n  public Set bar() {\n\tVector v \u003d null;\n\treturn (Set)v;  \t\n  }\n}",
    "A null value can be cast to all non-primitive type (it\u0027s in the java spec).\n\nFixed in Cast#execute().",
    "Please verify (DarinW).",
    "Verified"
  ],
  "commentCreationDates": [
    "2003-02-12T10:32:58+01:00",
    "2003-02-12T12:41:24+01:00",
    "2003-02-12T13:19:19+01:00",
    "2003-02-12T13:29:54+01:00",
    "2003-02-12T15:00:17+01:00",
    "2003-02-12T17:51:25+01:00",
    "2003-02-12T17:56:49+01:00",
    "2003-02-12T18:05:48+01:00",
    "2003-02-13T16:24:21+01:00",
    "2003-02-13T16:24:43+01:00",
    "2003-02-14T02:35:28+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIValue.toString",
          "source": "JDIValue.java:362"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.eval.ast.instructions.Cast.execute",
          "source": "Cast.java:88"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.eval.ast.engine.Interpreter.execute",
          "source": "Interpreter.java:44"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread$1$EvaluationRunnable.run",
          "source": "EvaluationThread.java:158"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.core.model.JDIThread.runEvaluation",
          "source": "JDIThread.java:600"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread.doEvaluation",
          "source": "EvaluationThread.java:180"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread.access$2",
          "source": "EvaluationThread.java:142"
        },
        {
          "method": "org.eclipse.jdt.internal.debug.eval.ast.engine.EvaluationThread$1.run",
          "source": "EvaluationThread.java:116"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:536"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "31637",
      "date": "2003-02-12T10:32:58+01:00",
      "product": "Platform",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "31637",
  "bugId": "31637",
  "date": "2003-02-12T10:32:58+01:00",
  "product": "Platform",
  "component": "Debug",
  "severity": "normal"
}