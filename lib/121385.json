{
  "comments": [
    "I defined a aop.xml and a aspect, I have already copy aspectjweaver.jar D:\\work\\BTM\\lib\\aspectjweaver.jar, and added -javaagent:D:\\work\\BTM\\lib\\aspectjweaver.jar option to the JVM in Eclipse, it works fine if there are before and after advice in aspect, but it will be wrong once I used around advice. if I use compile-time weaving, this around advice works fine.\nmy Eclipse env: eclipse 3.0.2 + AJDT 1.2.1 RC1 release + Sun JDK 1.5.0.\n\naspect file:\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.JoinPoint;\npublic abstract aspect World { \n    //private Object result;\n\tpointcut greeting() : execution(* Hello.sayWorld(..)); \n    \n\tObject around(): greeting() {\n    \tSystem.out.println(\"around start!\");\n    \tObject result \u003d proceed();\n    \tSystem.out.println(\"around end!\");\n    \treturn result;\n\t}\n    \n//    before() : greeting() { \n//    \tSignature signature \u003d thisJoinPoint.getSignature();\n//        System.out.println(\"before \" + signature.getName()); \n//    } \n    \n//    after() returning () : greeting() { \n//    \tSignature signature \u003d thisJoinPoint.getSignature();\n//        System.out.println(\"after \" + signature.getName()); \n//    } \n\n} \n\naop.xml file:\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003caspectj\u003e\n\t\u003caspects\u003e\n\t\t\u003caspect name\u003d\"World\"/\u003e\n\t\t\u003cconcrete-aspect name\u003d\"World1\" extends\u003d\"World\"\u003e\n          \u003cpointcut name\u003d\"greeting\" expression\u003d\"execution(* Hello.sayWorld(..)) ||\n          execution(* Hello.sayHello(..))\"/\u003e\n        \u003c/concrete-aspect\u003e\n\t\u003c/aspects\u003e\n\t\u003cweaver options\u003d\"-Xreweavable -verbose -XlazyTjp -showWeaveInfo\"\u003e\n\t\t\u003cinclude within\u003d\"Hello\"/\u003e\n\t\u003c/weaver\u003e\n\u003c/aspectj\u003e\n\naround advice error message in eclipse console as below:\ninfo register aspect World\ninfo generating class \u0027World1\u0027\ninfo weaving \u0027Hello\u0027\ninfo weaver operating in reweavable mode.  Need to verify any required types exist.\nabort trouble in: \npublic class Hello extends java.lang.Object:\n  public void \u003cinit\u003e():\n                    ALOAD_0     // Hello this   (line 2)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void Hello.\u003cinit\u003e())\n    |               RETURN\n    constructor-execution(void Hello.\u003cinit\u003e())\n  end public void \u003cinit\u003e()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75\n:\n                    INVOKESTATIC Hello.sayHello ()V   (line 9)\n                    RETURN   (line 10)\n  end public static void main(String[])\n\n  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180\n:\n  end public static void sayHello()\n\n  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268\n:\n    method-execution(int Hello.sayWorld())\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)\n    |               LDC \"World\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               ICONST_0   (line 19)\n    |               IRETURN\n    method-execution(int Hello.sayWorld())\n  end public static int sayWorld()\n\n  static final void sayHello_aroundBody0():\n                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)\n                    LDC \"Hello\"\n                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n                    INVOKESTATIC Hello.sayWorld ()I   (line 14)\n                    POP\n                    RETURN   (line 15)\n  end static final void sayHello_aroundBody0()\nend public class Hello\n\npublic class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:\n  public void \u003cinit\u003e(Object[]):\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.\u003cinit\u003e ([Ljava/lang/Object;)V\n                    RETURN\n  end public void \u003cinit\u003e(Object[])\n\n  public Object run(Object[]):\n                    ALOAD_0\n                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;\n                    ASTORE_2\n                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V\n                    ACONST_NULL\n                    ARETURN\n  end public Object run(Object[])\nend public class Hello$AjcClosure1\n -- (NullPointerException) null\nnull\njava.lang.NullPointerException\n\tat org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup(BcelAdvice.java:457)\n\tat org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2685)\n\tat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:230)\n\tat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:405)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\nMessage: abort trouble in: \npublic class Hello extends java.lang.Object:\n  public void \u003cinit\u003e():\n                    ALOAD_0     // Hello this   (line 2)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void Hello.\u003cinit\u003e())\n    |               RETURN\n    constructor-execution(void Hello.\u003cinit\u003e())\n  end public void \u003cinit\u003e()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75\n:\n                    INVOKESTATIC Hello.sayHello ()V   (line 9)\n                    RETURN   (line 10)\n  end public static void main(String[])\n\n  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180\n:\n  end public static void sayHello()\n\n  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268\n:\n    method-execution(int Hello.sayWorld())\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)\n    |               LDC \"World\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               ICONST_0   (line 19)\n    |               IRETURN\n    method-execution(int Hello.sayWorld())\n  end public static int sayWorld()\n\n  static final void sayHello_aroundBody0():\n                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)\n                    LDC \"Hello\"\n                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n                    INVOKESTATIC Hello.sayWorld ()I   (line 14)\n                    POP\n                    RETURN   (line 15)\n  end static final void sayHello_aroundBody0()\nend public class Hello\n\npublic class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:\n  public void \u003cinit\u003e(Object[]):\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.\u003cinit\u003e ([Ljava/lang/Object;)V\n                    RETURN\n  end public void \u003cinit\u003e(Object[])\n\n  public Object run(Object[]):\n                    ALOAD_0\n                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;\n                    ASTORE_2\n                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V\n                    ACONST_NULL\n                    ARETURN\n  end public Object run(Object[])\nend public class Hello$AjcClosure1\n -- (NullPointerException) null\nnull\njava.lang.NullPointerException\n\tat org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup(BcelAdvice.java:457)\n\tat org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2685)\n\tat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:230)\n\tat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:405)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\norg.aspectj.bridge.AbortException: trouble in: \npublic class Hello extends java.lang.Object:\n  public void \u003cinit\u003e():\n                    ALOAD_0     // Hello this   (line 2)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void Hello.\u003cinit\u003e())\n    |               RETURN\n    constructor-execution(void Hello.\u003cinit\u003e())\n  end public void \u003cinit\u003e()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75\n:\n                    INVOKESTATIC Hello.sayHello ()V   (line 9)\n                    RETURN   (line 10)\n  end public static void main(String[])\n\n  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180\n:\n  end public static void sayHello()\n\n  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268\n:\n    method-execution(int Hello.sayWorld())\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)\n    |               LDC \"World\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               ICONST_0   (line 19)\n    |               IRETURN\n    method-execution(int Hello.sayWorld())\n  end public static int sayWorld()\n\n  static final void sayHello_aroundBody0():\n                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)\n                    LDC \"Hello\"\n                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n                    INVOKESTATIC Hello.sayWorld ()I   (line 14)\n                    POP\n                    RETURN   (line 15)\n  end static final void sayHello_aroundBody0()\nend public class Hello\n\npublic class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:\n  public void \u003cinit\u003e(Object[]):\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.\u003cinit\u003e ([Ljava/lang/Object;)V\n                    RETURN\n  end public void \u003cinit\u003e(Object[])\n\n  public Object run(Object[]):\n                    ALOAD_0\n                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;\n                    ASTORE_2\n                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V\n                    ACONST_NULL\n                    ARETURN\n  end public Object run(Object[])\nend public class Hello$AjcClosure1\n\n\tat org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:47)\n\tat org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:395)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1554)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\nHello\nWorld",
    "my test Hello class:\n\n\npublic class Hello {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tsayHello();\n\t} \n\t \n\tpublic static void sayHello() {\n\t\tSystem.out.println(\"Hello\");\n\t\tsayWorld();\n\t} \n\t\n\tpublic static int sayWorld() {\n\t\tSystem.out.println(\"World\");\n\t\treturn 0;\n\t}\n}\n",
    "Matthew is going to try and recreate this with the supplied info.",
    "This can easily be reproduces with supplied testcase (thanks). The priority should be to find a good workaround if possible.\n1. User confirms that before/after rather than works \n2. I can confirm that defining a concrete sub-aspect using code style (rather than XML) also works but defining one using annotation style fails in a similar way. I also get the failure with both source and binary weaving.\n3. It may work if the abstract aspect is defined using annotation style",
    "This can easily be reproduced with supplied testcase (thanks). The priority\nshould be to find a good workaround if possible.\n1. User confirms that before/after rather than around advice works \n2. I can confirm that defining a concrete sub-aspect using code style (rather\nthan XML) also works but defining one using annotation style fails in a similar\nway. I also get the failure with both source and binary weaving.\n3. It may work if the abstract aspect is defined using annotation style\n",
    "BTW looking at the weaver options \"-XlazyTjp\" is unecessary because it is now the default (although ironically it does not apply to around advice) and -Xreweavable should not be used (-XnotReweavable is the default for LTW) because it is unlikely that the code will need to be rewoven before going straight into the JVM and probably hurts performance (see Bug 114897).",
    "It does occur because of the mixing of styles.  The abstract aspect being code style, then the concrete sub-aspect (generated from the XML) being annotation style.  The problem is that when \u0027collecting\u0027 up the advice as part of processing the sub-aspect, the super aspect is returning \u0027true\u0027 for hasExtraParameter() and yet the extraVar is null.  A simple guard on the null value gets us over the problem in this case - but there is possibly something to look into, examining why hasExtraParameter() is returning true.\n\nthe null guard is in 1.5.0 final.",
    "Created an attachment (id\u003d32085)\nFailing LTW testcase\n\nUnfortunately while the NPE is cured we have a VerifyError instead. The World1 sub-aspect is generated and defined. The test is woven but cannot be defined.\n\njava.lang.VerifyError: (class: Hello, method: sayWorld signature: ()I) Unable to pop operand off an empty stack\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2365)\n\tat java.lang.Class.getMethod0(Class.java:2611)\n\tat java.lang.Class.getMethod(Class.java:1579)\n\tat org.aspectj.tools.ajc.AjcTestCase.run(AjcTestCase.java:608)\n\tat org.aspectj.testing.RunSpec.execute(RunSpec.java:56)\n\tat org.aspectj.testing.AjcTest.runTest(AjcTest.java:68)\n\tat org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111)\n\tat org.aspectj.systemtest.ajc150.Ajc150Tests.testNPEInBcelAdviceWithConcreteAspect_pr121385(Ajc150Tests.java:873)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\ninfo AspectJ Weaver Version DEVELOPMENT built on \ninfo register classloader org.aspectj.weaver.loadtime.WeavingURLClassLoader\ninfo using /C:/temp/ajcSandbox/ajcTest24128.tmp/META-INF/aop.xml\ninfo generating class \u0027World1\u0027\ninfo weaving \u0027Hello\u0027\ninfo weaver operating in reweavable mode.  Need to verify any required types exist.\nweaveinfo Join point \u0027method-execution(void Hello.sayHello())\u0027 in Type \u0027Hello\u0027 (Hello.java:7) advised by around advice from \u0027World1\u0027 (World.aj:7)\nweaveinfo Join point \u0027method-execution(int Hello.sayWorld())\u0027 in Type \u0027Hello\u0027 (Hello.java:12) advised by around advice from \u0027World1\u0027 (World.aj:7)\ninfo generating class \u0027Hello$AjcClosure1\u0027\ninfo generating class \u0027Hello$AjcClosure3\u0027\n",
    "Interesting that there is something missing off the stack and the code now commented out with a null check would load a value onto the stack.",
    "The problem may lie with trying to define the sub-aspect while initializing the weaving adaptor. When running in a different environment (AOSGi) I noticed that when World1 is defined the super-aspect World is loaded and weaving is attempted. In the harness this does not happen as the WeavingURLClassLoader uses a flag to avoid recursion during adaptor initialization. However although aspect World1 is woven during the generation process, World will not be woven (see Bug 119657).\n\nThere are 2 other concrete aop.xml tests in the harness in AtAjLTWTests . Changing them to use around instead of before advice only causes the AspectJ test to fail with a VerifyError; the @AspectJ one passes. So this may be a problem with around advice and/or mixing styles. However these tests use inner aspects so are not the same as the new test.\n",
    "Matthew - here is a patch - can you apply it to the weaver project and see if it helps your situation?\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d8\u003c\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nIndex: src/org/aspectj/weaver/bcel/BcelAdvice.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nRCS file: /home/technology/org.aspectj/modules/weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java,v\nretrieving revision 1.43\ndiff -u -r1.43 BcelAdvice.java\n--- src/org/aspectj/weaver/bcel/BcelAdvice.java\t19 Dec 2005 15:06:51 -0000\t1.43\n+++ src/org/aspectj/weaver/bcel/BcelAdvice.java\t21 Dec 2005 16:33:35 -0000\n@@ -400,7 +400,8 @@\n \t\tif (exposedState.getAspectInstance() !\u003d null) {\n \t\t\til.append(BcelRenderer.renderExpr(fact, world, exposedState.getAspectInstance()));\n \t\t}\n-        final boolean isAnnotationStyleAspect \u003d getConcreteAspect()!\u003dnull \u0026\u0026 getConcreteAspect().isAnnotationStyleAspect();\n+\t\tboolean x \u003d this.getDeclaringAspect().resolve(world).isAnnotationStyleAspect();\n+        final boolean isAnnotationStyleAspect \u003d getConcreteAspect()!\u003dnull \u0026\u0026 getConcreteAspect().isAnnotationStyleAspect() \u0026\u0026 x;\n         boolean previousIsClosure \u003d false;\n         for (int i \u003d 0, len \u003d exposedState.size(); i \u003c len; i++) {\n         \tif (exposedState.isErroneousVar(i)) continue; // Erroneous vars have already had error msgs reported!\n@@ -455,12 +456,14 @@\n \t                } else if (hasExtraParameter()) {\n                         previousIsClosure \u003d false;\n                         //extra var can be null here (@Aj aspect extends abstract code style, advice in code style)\n-                        if (extraVar !\u003d null) {\n+//                        if (extraVar !\u003d null) {\n                             extraVar.appendLoadAndConvert(\n                                 il,\n                                 fact,\n                                 getExtraParameterType().resolve(world));\n-                        }\n+                        \n+//                        } else\n+//                            il.append(InstructionConstants.ACONST_NULL);\n                     } else {\n                         previousIsClosure \u003d false;\n                         getConcreteAspect().getWorld().getMessageHandler().handleMessage(\nIndex: src/org/aspectj/weaver/bcel/BcelShadow.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nRCS file: /home/technology/org.aspectj/modules/weaver/src/org/aspectj/weaver/bcel/BcelShadow.java,v\nretrieving revision 1.86\ndiff -u -r1.86 BcelShadow.java\n--- src/org/aspectj/weaver/bcel/BcelShadow.java\t12 Dec 2005 10:48:46 -0000\t1.86\n+++ src/org/aspectj/weaver/bcel/BcelShadow.java\t21 Dec 2005 16:33:36 -0000\n@@ -2221,7 +2221,7 @@\n \t\t\t\tmunger.getAdviceArgSetup(\n \t\t\t\t\tthis,\n \t\t\t\t\tnull,\n-                    (munger.getConcreteAspect().isAnnotationStyleAspect())?\n+                    (munger.getConcreteAspect().isAnnotationStyleAspect() \u0026\u0026 munger.getDeclaringAspect().resolve(world).isAnnotationStyleAspect())?\n                         this.loadThisJoinPoint():\n \t\t\t\t\t    new InstructionList(InstructionConstants.ACONST_NULL)));\n \t\t    // adviceMethodInvocation \u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d8\u003c\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d",
    "the bug appears to be that we use two mechanisms to build the arguments for an around advice call - which mechanism we use depends on whether the advice was declared in a code style aspect or an annotation style aspect.\n\nThe problem here is that we ask the advice for the style used by the concrete aspect and the concrete aspect is annotation style.  But of course the advice was declared in a code style aspect.  We shouldn\u0027t check the concrete aspect but the declaring aspect for the advice.  Changing the code to do this check fixes this problem and we can remove the null check that was added just before 1.5.0 final.",
    "proper fix checked in. will be in the next dev build.",
    "fix available."
  ],
  "commentCreationDates": [
    "2005-12-19T10:32:32+01:00",
    "2005-12-19T10:45:11+01:00",
    "2005-12-19T11:14:11+01:00",
    "2005-12-19T14:29:56+01:00",
    "2005-12-19T14:36:06+01:00",
    "2005-12-19T15:12:24+01:00",
    "2005-12-20T14:32:16+01:00",
    "2005-12-21T16:03:11+01:00",
    "2005-12-21T16:13:51+01:00",
    "2005-12-21T16:32:16+01:00",
    "2005-12-21T16:33:22+01:00",
    "2005-12-21T17:05:12+01:00",
    "2005-12-21T17:21:13+01:00",
    "2006-02-15T11:17:51+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup",
          "source": "BcelAdvice.java:457"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure",
          "source": "BcelShadow.java:2685"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.implementOn",
          "source": "BcelAdvice.java:230"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implementMungers",
          "source": "Shadow.java:588"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Shadow.java:405"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "BcelClassWeaver.java:2146"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:467"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:102"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1543"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1494"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1275"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1097"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes",
          "source": "WeavingAdaptor.java:263"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:196"
        },
        {
          "method": "org.aspectj.weaver.loadtime.Aj.preProcess",
          "source": "Aj.java:65"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform",
          "source": "ClassPreProcessorAgentAdapter.java:52"
        },
        {
          "method": "sun.instrument.TransformerManager.transform",
          "source": "TransformerManager.java:122"
        },
        {
          "method": "sun.instrument.InstrumentationImpl.transform",
          "source": "InstrumentationImpl.java:155"
        },
        {
          "method": "java.lang.ClassLoader.defineClass1",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:620"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:124"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:260"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:56"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:195"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:188"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:268"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:251"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:319"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "121385",
      "date": "2005-12-19T10:32:32+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup",
          "source": "BcelAdvice.java:457"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure",
          "source": "BcelShadow.java:2685"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.implementOn",
          "source": "BcelAdvice.java:230"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implementMungers",
          "source": "Shadow.java:588"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Shadow.java:405"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "BcelClassWeaver.java:2146"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:467"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:102"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1543"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1494"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1275"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1097"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes",
          "source": "WeavingAdaptor.java:263"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:196"
        },
        {
          "method": "org.aspectj.weaver.loadtime.Aj.preProcess",
          "source": "Aj.java:65"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform",
          "source": "ClassPreProcessorAgentAdapter.java:52"
        },
        {
          "method": "sun.instrument.TransformerManager.transform",
          "source": "TransformerManager.java:122"
        },
        {
          "method": "sun.instrument.InstrumentationImpl.transform",
          "source": "InstrumentationImpl.java:155"
        },
        {
          "method": "java.lang.ClassLoader.defineClass1",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:620"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:124"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:260"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:56"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:195"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:188"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:268"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:251"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:319"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "121385",
      "date": "2005-12-19T10:32:32+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "org.aspectj.bridge.AbortException",
      "message": "trouble in:  public class Hello extends java.lang.Object:   public void \u003cinit\u003e():                     ALOAD_0     // Hello this   (line 2)                     INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V     constructor-execution(void Hello.\u003cinit\u003e())     |               RETURN     constructor-execution(void Hello.\u003cinit\u003e())   end public void \u003cinit\u003e()    public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75 :                     INVOKESTATIC Hello.sayHello ()V   (line 9)                     RETURN   (line 10)   end public static void main(String[])    public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180 :   end public static void sayHello()    public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268 :     method-execution(int Hello.sayWorld())     |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)     |               LDC \"World\"     |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V     |               ICONST_0   (line 19)     |               IRETURN     method-execution(int Hello.sayWorld())   end public static int sayWorld()    static final void sayHello_aroundBody0():                     GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)                     LDC \"Hello\"                     INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V                     INVOKESTATIC Hello.sayWorld ()I   (line 14)                     POP                     RETURN   (line 15)   end static final void sayHello_aroundBody0() end public class Hello  public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:   public void \u003cinit\u003e(Object[]):                     ALOAD_0                     ALOAD_1                     INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.\u003cinit\u003e ([Ljava/lang/Object;)V                     RETURN   end public void \u003cinit\u003e(Object[])    public Object run(Object[]):                     ALOAD_0                     GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;                     ASTORE_2                     INVOKESTATIC Hello.sayHello_aroundBody0 ()V                     ACONST_NULL                     ARETURN   end public Object run(Object[]) end public class Hello$AjcClosure1",
      "elements": [
        {
          "method": "org.aspectj.bridge.MessageWriter.handleMessage",
          "source": "MessageWriter.java:47"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage",
          "source": "WeavingAdaptor.java:395"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1554"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1494"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1275"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1097"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes",
          "source": "WeavingAdaptor.java:263"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:196"
        },
        {
          "method": "org.aspectj.weaver.loadtime.Aj.preProcess",
          "source": "Aj.java:65"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform",
          "source": "ClassPreProcessorAgentAdapter.java:52"
        },
        {
          "method": "sun.instrument.TransformerManager.transform",
          "source": "TransformerManager.java:122"
        },
        {
          "method": "sun.instrument.InstrumentationImpl.transform",
          "source": "InstrumentationImpl.java:155"
        },
        {
          "method": "java.lang.ClassLoader.defineClass1",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:620"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:124"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:260"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:56"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:195"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:188"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:268"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:251"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:319"
        }
      ],
      "number": 2,
      "commentIndex": 0,
      "bugId": "121385",
      "date": "2005-12-19T10:32:32+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.VerifyError",
      "message": "(class: Hello, method: sayWorld signature: ()I) Unable to pop operand off an empty stack",
      "elements": [
        {
          "method": "java.lang.Class.getDeclaredMethods0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.privateGetDeclaredMethods",
          "source": "Class.java:2365"
        },
        {
          "method": "java.lang.Class.getMethod0",
          "source": "Class.java:2611"
        },
        {
          "method": "java.lang.Class.getMethod",
          "source": "Class.java:1579"
        },
        {
          "method": "org.aspectj.tools.ajc.AjcTestCase.run",
          "source": "AjcTestCase.java:608"
        },
        {
          "method": "org.aspectj.testing.RunSpec.execute",
          "source": "RunSpec.java:56"
        },
        {
          "method": "org.aspectj.testing.AjcTest.runTest",
          "source": "AjcTest.java:68"
        },
        {
          "method": "org.aspectj.testing.XMLBasedAjcTestCase.runTest",
          "source": "XMLBasedAjcTestCase.java:111"
        },
        {
          "method": "org.aspectj.systemtest.ajc150.Ajc150Tests.testNPEInBcelAdviceWithConcreteAspect_pr121385",
          "source": "Ajc150Tests.java:873"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:478"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:344"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 3,
      "commentIndex": 7,
      "bugId": "121385",
      "date": "2005-12-21T16:03:11+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "121385",
  "bugId": "121385",
  "date": "2005-12-19T10:32:32+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}