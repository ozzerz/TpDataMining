{
  "comments": [
    "I am trying to create tasks programmatically with task/context handles that I supply. Mylar currently only accepts handles ending with - and some number. On the other hand I want to use long and self descriptive handle names other than automatically assigned \"local-xx\". The creation has no problems and I can populate the context as long I don\u0027t close the Eclipse workbench. But when reloading the tasklist I get an exception because the name that I used, and because of this exception task list won\u0027t get loaded.\n\nThe exception stack trace when I try to use \"Create UI\" is the following.\n\njava.lang.NumberFormatException: For input string: \"Create UI\"\nat java.lang.NumberFormatException.forInputString(Unknown Source)\nat java.lang.Integer.parseInt(Unknown Source)\nat java.lang.Integer.parseInt(Unknown Source)\nat org.eclipse.mylar.provisional.tasklist.TaskList.largestTaskHandleHelper(TaskList.java:351)\nat org.eclipse.mylar.provisional.tasklist.TaskList.findLargestTaskHandle(TaskList.java:336)\nat org.eclipse.mylar.provisional.tasklist.TaskListManager.readExistingOrCreateNewList(TaskListManager.java:486)\nat org.eclipse.mylar.provisional.tasklist.MylarTaskListPlugin$5.run(MylarTaskListPlugin.java:310)\nat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\nat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)\nat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3325)\nat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2971)\nat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1914)\nat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1878)\nat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)\nat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)\nat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\nat org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)\nat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)\nat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)\nat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:400)\nat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:177)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.eclipse.core.launcher.Main.invokeFramework(Main.java:336)\nat org.eclipse.core.launcher.Main.basicRun(Main.java:280)\nat org.eclipse.core.launcher.Main.run(Main.java:977)\nat org.eclipse.core.launcher.Main.main(Main.java:952)\n\nIf a handle ending with - and a number is a final design decision, then this bug is not important.",
    "Basically, can we just surround largestTaskHandleHelper method with try-catch and assign a default number if max \u003d\u003d 0, or can we add an attribute in tasklist.xml for storing a number for the next auto-generated task handle?",
    "A fix related to this went in today (bug 147617).  However, we should still figure out how to handle your case.  Could you give me an example of a couple of handle identifiers that you see yourself using?",
    "I used handle identifiers like \"Create UI\" and \"step1\".\n\nThe current code basically looks for \u0027-\u0027 to find the largest task number. If there\u0027s no \u0027-\u0027, the whole handle is tried to be parsed into an int. So if there\u0027s even one task with an unusual handle, the whole process of loading the task list fails.\n\nI\u0027m posting a patch for this and also replaced indexOf(\u0027-\u0027) with lastIndexOf(\u0027-\u0027)",
    "Created an attachment (id\u003d44928)\nexception handling when there\u0027s no \u0027-\u0027 in the handle identifier\n\nOh I just saw you fixed the lastIndexOf.\n\nThis patch is just the exception handling",
    "Patch applied.  In the future please provide a task context with patches since it makes them easier for me to apply.\n\nNote that the fomrat for a handle is important to make robust, which is why Mylar uses the \u003curl\u003e-\u003cint id\u003e format.  Do cheat sheets have an ID?  If they did a robust format for you could be something like: org.eclipse.help.cheatsheets-com.myapp.cheatsheet.intro.step1",
    "Fixed.",
    "Yes cheat sheets have IDs, but for the ones loaded from file, the id becomes the filename, which is not very robust. But a robust one including the application name etc.. can always be generated by hand.\n\nSorry about the task context by the way. Also, is there a way to export just one task? (e.g. a facility like right click to a task and choose export? - I guess this will be an enhancement report)",
    "Export it where?  You mean just the XML file for the context?  First let me know your use case and I\u0027ll point you at an existing report or ask you to create a new one.\n\nIf you provide some examples of IDs that you are planning to have for cheat sheet I can advise you on how robust they will be.",
    "How do you want me to send you the task context (or which file? just local-xx?) related to the patch? I think there\u0027s a neat way for bug repositories but I haven\u0027t used it yet (not for this bug though :)) I\u0027m new to Mylar, learning step by step :)\n\nI was thinking about exporting just one task context (yes xml file) to the filesystem. A use case may be mailing it to another developer, in case that the current project is not managed with a bug tracking tool. The export action does for all the tasks, but I may not want to share all of my tasks. I know I can copy the file from .mylar directory but I was just curious if there\u0027s a shortcut for that (+ if I copy the context file I would also need its element in tasklist.xml) \n\nI will write about cheat sheet IDs once I make more progress, but as I said IDs are just filenames, so I have to create robust filenames.",
    "You attach the context by right-clicking the task in the task list and clicking \"Attach Context\".  We don\u0027t (yet) support transferring contexts via other mechanisms (e.g. for non-repository tasks), but that will be on the table for 0.7 since the contexts are simply XML files."
  ],
  "commentCreationDates": [
    "2006-06-19T18:57:23+02:00",
    "2006-06-19T19:44:51+02:00",
    "2006-06-20T02:59:19+02:00",
    "2006-06-20T19:23:10+02:00",
    "2006-06-20T19:27:01+02:00",
    "2006-06-25T23:17:01+02:00",
    "2006-06-25T23:25:48+02:00",
    "2006-06-26T17:57:09+02:00",
    "2006-06-26T19:42:59+02:00",
    "2006-06-26T21:06:38+02:00",
    "2006-06-26T22:45:52+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NumberFormatException",
      "message": "For input string: \"Create UI\"",
      "elements": [
        {
          "method": "java.lang.NumberFormatException.forInputString",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Integer.parseInt",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Integer.parseInt",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.mylar.provisional.tasklist.TaskList.largestTaskHandleHelper",
          "source": "TaskList.java:351"
        },
        {
          "method": "org.eclipse.mylar.provisional.tasklist.TaskList.findLargestTaskHandle",
          "source": "TaskList.java:336"
        },
        {
          "method": "org.eclipse.mylar.provisional.tasklist.TaskListManager.readExistingOrCreateNewList",
          "source": "TaskListManager.java:486"
        },
        {
          "method": "org.eclipse.mylar.provisional.tasklist.MylarTaskListPlugin$5.run",
          "source": "MylarTaskListPlugin.java:310"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:123"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:3325"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2971"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1914"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1878"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:419"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:143"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:78"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:92"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:68"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:400"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:177"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:336"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:280"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:977"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:952"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "147752",
      "date": "2006-06-19T18:57:23+02:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "normal"
    }
  ],
  "groupId": "147752",
  "bugId": "147752",
  "date": "2006-06-19T18:57:23+02:00",
  "product": "Mylyn",
  "component": "Tasks",
  "severity": "normal"
}