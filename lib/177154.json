{
  "comments": [
    "Code that #defines macros with trailing single-line comments will be pasted, with comments, into expansion contexts.  D\u0027oh!\n\n#define LIT 1  // my value\nint func(int x) {\n   \n}\n\nint main() {\n  return func(LIT);   // fails to parse\n}",
    "Created an attachment (id\u003d60671)\npatch and test case\n\n",
    "Took a look... looks good to me...\n\nAny objections from anyone to committing this?",
    "I have a look.",
    "I don\u0027t get an error with the example in comment 0. The reason is probably that the scanner does not pop contexts when skipping a line comment.",
    "(In reply to comment #4)\n\u003e I don\u0027t get an error with the example in comment 0. The reason is probably that\n\u003e the scanner does not pop contexts when skipping a line comment.\n\nOk, while technically the macro expansion should neither contain single-line nor\nmulti-line comments it has no effect on parsing the code. --\u003e changing severity.\n\nA fix should remove both kinds of comments.\n\n",
    "I disagree that the severity is minor.  At least in 4.0M5, this bug caused the attached unit tests to fail, meaning the parser was affected.  The end result of this is that an editor containing uses of such macros shows an Outline that does not include the given function or any others past it.  \n\nThe scanner is storing the definition of the macro \"LIT\"  as \"1  // my value\".  Then substituting this text causes the func(LIT) call to be parsed as:\n\nfunc(1  // my value);\n\nwhich looks like:\n\nfunc(1\n\nMeaning the trailing \");\" tokens are ignored, and the function call looks like a syntax error.  (Or maybe I misunderstand and the literal \u0027/\u0027 and \u0027/\u0027 and \u0027my\u0027 and \u0027value\u0027 tokens are being scanned -- in either case, it\u0027s a problem, and does affect parsing the code.)\n\nMy patch removes the comments from the macro definition beforehand.  Multi-line trailing (and embedded) comments were already being removed, but not single-line ones.\n\n\n",
    "(In reply to comment #6)\n\u003e I disagree that the severity is minor.  At least in 4.0M5, this bug caused the\n\u003e attached unit tests to fail, meaning the parser was affected.  The end result\n\u003e of this is that an editor containing uses of such macros shows an Outline that\n\u003e does not include the given function or any others past it.\n\nThe unit test does not test whether the parser reports a syntax error in this case. The line comment in the macro expansion is not right, but it does not create a syntax error when expanded, therefore it is not a big issue. Did you actually try your example?\nThere may be another problem why the outline is missing something.",
    "Created an attachment (id\u003d62226)\nscreenshot\n\n",
    "I have tested with M5, works fine.",
    "Ok, sorry for the confusion.  \n\n(1) We are using a patched 4.0M5.  Maybe the underlying issue has been fixed elsewhere since then.  I did see the scanner from the HEAD neglected to remove single-line comments from macros as well, so I thought the same problem would arise there.  But it appears from Anton\u0027s comment that comments may be expected to be handled inside macro expansions.  \n\n(2) The vastly simplified case shown in the summary indeed does NOT show a problem when the trailing comment is left in place.  Sorry.  My reasoning was incorrect in presuming what a simpler example would look like.\n\nThe second case in the attached unit test, however, which is based on the actual code our customers reported the bug against, does show the problem for me.  Can anyone verify this?\n\nTaking out my patch, the failure occurs when parsing the \"actual reduced test case\" in this test:\n\norg.eclipse.cdt.internal.core.parser.ParserException: FAILURE\n\tat org.eclipse.cdt.core.parser.tests.ast2.AST2BaseTest.parse(AST2BaseTest.java:140)\n\tat org.eclipse.cdt.core.parser.tests.ast2.AST2Tests.testMacroCommentsBug_177154(AST2Tests.java:3558)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.eclipse.cdt.core.testplugin.util.BaseTestCase.run(BaseTestCase.java:85)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n",
    "Now, I see the problem. \nIf a macro with a line comment is itself used in an expansion, then the problem arises.\nThanks for the clarification!",
    "Patch applied.",
    "Created an attachment (id\u003d64178)\nanother unit test \n\n",
    "Our customers found another instance of this bug.  If the single line comment is placed on the macro definition, the parser enters an infinite loop.  If the comment is absent, the parser succeeds.  The attached test demonstrates this against today\u0027s HEAD.",
    "Interestingly the endless loop is somehow caused by the trailing \u0027\\t\u0027 (which is not removed from the macro definition). If the tab is changed to spaces, there is no problem.\nI still don\u0027t know why the tab causes an endless loop in the parser, but I fixed the comment removal such that tabs are replaced by spaces (outside string and character literals) anyway.",
    "(In reply to comment #15)\n\u003e Interestingly the endless loop is somehow caused by the trailing \u0027\\t\u0027 (which is\n\u003e not removed from the macro definition). If the tab is changed to spaces, there\n\u003e is no problem.\n\nDuring an investigation into bug 179383 I discovered that any runtime exception thrown by doFetchToken() in BaseScanner has the potential to cause an infinite loop in the parser. Maybe you are seeing a symptom of that.\n",
    "I also want to mention that the LALR based C99 parser that I\u0027m working on (bug 173110) has a lexer that removes all comments before passing the tokens to the preprocessor. This means that things like comments and spaces in macros are ignored by the preprocessor, so the kinds of problems described in this bug will not occur."
  ],
  "commentCreationDates": [
    "2007-03-13T16:05:52+01:00",
    "2007-03-13T16:07:03+01:00",
    "2007-03-13T16:21:46+01:00",
    "2007-03-27T12:22:29+02:00",
    "2007-03-28T11:13:57+02:00",
    "2007-03-28T13:40:34+02:00",
    "2007-03-28T15:22:03+02:00",
    "2007-03-28T15:34:09+02:00",
    "2007-03-28T15:54:40+02:00",
    "2007-03-28T15:55:43+02:00",
    "2007-03-28T16:06:26+02:00",
    "2007-03-28T16:28:41+02:00",
    "2007-03-28T16:34:23+02:00",
    "2007-04-18T14:52:43+02:00",
    "2007-04-18T14:53:56+02:00",
    "2007-04-19T11:35:12+02:00",
    "2007-04-19T16:23:54+02:00",
    "2007-04-19T16:26:14+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.cdt.internal.core.parser.ParserException",
      "message": "FAILURE",
      "elements": [
        {
          "method": "org.eclipse.cdt.core.parser.tests.ast2.AST2BaseTest.parse",
          "source": "AST2BaseTest.java:140"
        },
        {
          "method": "org.eclipse.cdt.core.parser.tests.ast2.AST2Tests.testMacroCommentsBug_177154",
          "source": "AST2Tests.java:3558"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "org.eclipse.cdt.core.testplugin.util.BaseTestCase.run",
          "source": "BaseTestCase.java:85"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3TestReference.java:128"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:38"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 0,
      "commentIndex": 10,
      "bugId": "177154",
      "date": "2007-03-28T16:06:26+02:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "major"
    }
  ],
  "groupId": "177154",
  "bugId": "177154",
  "date": "2007-03-13T16:05:52+01:00",
  "product": "CDT",
  "component": "cdt-core",
  "severity": "major"
}