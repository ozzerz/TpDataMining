{
  "comments": [
    "This is the Eclipse configuration used:\n\n- Eclipse FTP and WebDAV support 3.0.0\n- Eclipse Project SDK 3.0.1\n- Eclipse SDK Examples 3.0.1\n- EMF SDK 2.0.1\n- Examples for Eclipse Modeling Framework 2.0.1\n- GEF Logic Example 3.0.1\n- Graphical Editing Framework SDK 3.0.1\n- UML2 1.0.1\n- UML2 Documentation 1.0.1\n- UML2 Examples 1.0.1\n- UML2 Source 1.0.1\n- Visual Editor Examples 1.0.1\n- Visual Editor SDK 1.0.1.1\n\n\n\nTest case:\n\n1. Create a new Java project\n2. Within the new project, create a new visual class based on Swing\u0027s JFrame\n\n\n\nResult:\n\nThe graphical representation of the new visual class should be opened in the\nvisual editor, and the class itself should be listed in the Java Beans tab.\nHowever, this only occurs if the EMF 2.0.1 examples are either not installed or\ndeactivated. If EMF 2.0.1 examples are installed and active, the visual editor\npane remains empty, and the new class does not get listed in the Java Beans tab.\nThe same behaviour occurs when opening an existing JFrame subclass. Also, this\napplies to both JRE 1.4.2-06 and JRE 1.5.0.",
    "I\u0027ve investigated the problem and appealed to VE folks for input, posting the\nfollowing in the VE newsgroup:\n\n---\nHi all,\n\nBug 79078 was filed against EMF last Friday. Apparently, our Java model example\nbreaks VE. I\u0027ve taken a quick look, and the problem seems to be the following\nregistration in its plugin.xml:\n\n  \u003cextension point \u003d \"org.eclipse.emf.ecore.extension_parser\"\u003e\n    \u003cparser\n      type\u003d\"java\"\n      class\u003d\"org.eclipse.emf.java.util.JavaResourceFactoryImpl\"/\u003e\n  \u003c/extension\u003e\n\nThis is globally registering our custom Java resource factory against the \"java\"\nfile extension.\n\nI\u0027m seeing the following exception in /.metadata/.log:\n\n!ENTRY org.eclipse.ve.java.core 4 0 Nov 22, 2004 10:57:34.516\n!MESSAGE Exception thrown.\n!STACK 0\njava.lang.ClassCastException: org.eclipse.emf.java.util.JavaResourceImpl\n    at\norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.createJavaInstances(JavaSourceTranslator.java:705)\n    at\norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.buildCompositionModel(JavaSourceTranslator.java:774)\n    at\norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.decodeDocument(JavaSourceTranslator.java:881)\n    at\norg.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.loadModel(JavaSourceTranslator.java:656)\n    at\norg.eclipse.ve.internal.java.codegen.editorpart.JavaVisualEditorPart$Setup.run(JavaVisualEditorPart.java:1444)\n    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:66)\n\nHere, createJavaInstances() is obtaining the resource of a model object\n(URI\u003dplatform:/resource/Test/MyFrame.java), and casting it to XMIResource. It\u0027s\nnot expecting a JavaResourceImpl.\n\nSo, it would seem that VE isn\u0027t happy when .java files are parsed using custom\nnon-XMI resource implementation. Are you just expecting it to be handled by the\ndefault XMIResourceImpl, or registering a different subclass of\nXMIResourceFactoryImpl()? I didn\u0027t find that any VE registration against an\nextension, but I *did* see a registration of JavaXMIFactoryImpl() against the\n\"java\" *scheme*. Some background on VE\u0027s needs and expectations in this realm\nwould be most helpful.\n\nMy first instinct is that it might not be best to depend upon the global\nregistry like this. The safer thing to do might be to properly initialize the\nregistry local to your resource set, so as to suit your needs.\n",
    "We do the registration of the parsers in the editor\u0027s resource set rather than\nglobally now.",
    "Fixed in build 2.1.0.I200412020800"
  ],
  "commentCreationDates": [
    "2004-11-19T15:01:19+01:00",
    "2004-11-22T17:07:49+01:00",
    "2004-11-29T19:56:23+01:00",
    "2004-12-02T17:28:40+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassCastException",
      "message": "org.eclipse.emf.java.util.JavaResourceImpl",
      "elements": [
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.createJavaInstances",
          "source": "JavaSourceTranslator.java:705"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.buildCompositionModel",
          "source": "JavaSourceTranslator.java:774"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.decodeDocument",
          "source": "JavaSourceTranslator.java:881"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.core.JavaSourceTranslator.loadModel",
          "source": "JavaSourceTranslator.java:656"
        },
        {
          "method": "org.eclipse.ve.internal.java.codegen.editorpart.JavaVisualEditorPart$Setup.run",
          "source": "JavaVisualEditorPart.java:1444"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:66"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "79078",
      "date": "2004-11-22T17:07:49+01:00",
      "product": "EMF",
      "component": "Edit",
      "severity": "minor"
    }
  ],
  "groupId": "79078",
  "bugId": "79078",
  "date": "2004-11-19T15:01:19+01:00",
  "product": "EMF",
  "component": "Edit",
  "severity": "minor"
}