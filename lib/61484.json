{
  "comments": [
    "Part of a post from the platform-core-dev mailing list. Looks like changes in\nconfig.ini syntax break something in PDE?\n\n----------------\nActually there are more problems with this.  It looks like PDE also parses \nthis file and needs to be updated accordingly.  Here is a stack trace I \nget. \njava.lang.NumberFormatException: For input string: \"2:start\" \n        at \njava.lang.NumberFormatException.forInputString(NumberFormatException.java:4\n8)         at java.lang.Integer.parseInt(Integer.java:477) \n        at java.lang.Integer.\u003cinit\u003e(Integer.java:609) \n        at \norg.eclipse.pde.internal.ui.launcher.LauncherUtils.getAutoStartPlugins(Laun\ncherUtils.java:283)         at \norg.eclipse.pde.internal.ui.launcher.LauncherUtils.getPluginsToRun(Launcher\nUtils.java:212)         at \norg.eclipse.pde.internal.ui.launcher.WorkbenchLaunchConfigurationDelegate.g\netProgramArguments(WorkbenchLaunchConfigurationDelegate.java:120)         \nat \norg.eclipse.pde.internal.ui.launcher.WorkbenchLaunchConfigurationDelegate.c\nreateVMRunner(WorkbenchLaunchConfigurationDelegate.java:80)         at \norg.eclipse.pde.internal.ui.launcher.WorkbenchLaunchConfigurationDelegate.l\naunch(WorkbenchLaunchConfigurationDelegate.java:51)         at \norg.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfigurat\nion.java:569)         at \norg.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfigurat\nion.java:150)         at \norg.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch(DebugUIPlugin.ja\nva:770)         at \norg.eclipse.debug.internal.ui.DebugUIPlugin$6.run(DebugUIPlugin.java:932)  \n       at org.eclipse.core.internal.jobs.Worker.run(Worker.java:66)",
    "Wow, Jeff announced the breaking change a couple of hours ago, and people are \nalreay reporting to the mailing list that PDE has not adapted yet.  Can\u0027t a \nguy take a couple of hours off to work out anymore? :-)",
    "What is funny is that the breaking change has been made AFTER a freeze has \nbeen declared :-). Some freeze :-).",
    "Wassim: that\u0027s why I workout at 6am before anyone else is awake.\n\nDejan: end of day Friday is the same as Monday morning, right? \n\n:-)",
    "for the record, it is not the end of day yet.  Also, Wassim, Dorian and I went \nover this and all agreed that I could release the change.  Finally the change \nwas announced on eclipse-dev earlier today with an explanation.",
    "cc myself so I don\u0027t miss the information (or is that misinformation...)",
    "Wait a second, I already handled this. This afternoon I put in a workaround so \nthat the bundles listed on the osgi.bundles list are always started.  \nApparently I neglected to commit the updated eclipse.properties file.  Will do \nthis now.\n\nSee also bug 61458\n",
    "Actually, Jeff, PDE still has to do something.\nCurrently we assume that what follows a @ is an integer.\nRight now, it\u0027s no longer the case.  It might be integer:start",
    "yes but with the workaround people can continue working.\n\nTo clarify, the format after the @ is actually a \u0027:\u0027 separated list of # \nand \"start\" tokens.  In the future we may have more values there and these can \ncome in any order.\n\nHere is the fragment code that we use to handle the entries (from \nEclipseStarter.loadBasicBundles())\n\n\tint index \u003d name.indexOf(\u0027@\u0027);\n\tif (index \u003e\u003d 0) {\n\t\tString[] attributes \u003d getArrayFromList(name.substring(index + \n1, name.length()), \":\");\n\t\tname \u003d name.substring(0, index);\n\t\tfor (int j \u003d 0; j \u003c attributes.length; j++) {\n\t\t\tString attribute \u003d attributes[j];\n\t\t\tif (attribute.equals(\"start\"))\n\t\t\t\tstart \u003d true;\n\t\t\telse\n\t\t\t\tlevel \u003d Integer.parseInt(attribute);\n\t\t}\n\t}\n",
    "\u003eTo clarify, the format after the @ is actually a \u0027:\u0027 separated list of # \n\u003eand \"start\" tokens.  \nSo you\u0027re saying the entry could org.eclipse.core.runtime@2:start OR \norg.eclipse.core.runtime@start:2.  Correct?\n\n\u003eIn the future we may have more values there and these can come in any order.\nNot sure what you mean here.\n\n",
    "Given my interpretion of Jeff\u0027s comments, here is the method that determines \nthe start level.  The \"text\" parameter is the text that follows the @.\nThe first token that is a valid integer will be considered the start level.\nIf no such token is found, we return -1, indicating that the start level has \nnot been specified, and it would be up to the runtime to find an appropriate \nstart level.\n\nI will check in the code and mark as fixed.  Jeff, if I misinterpreted your \ncomments, please reopen and clarify.\n\nprivate static Integer getStartLevel(String text) {\n    StringTokenizer tok \u003d new StringTokenizer(text, \":\");\n    while (tok.hasMoreTokens()) {\n\tString token \u003d tok.nextToken().trim();\n\ttry {\n\t    return new Integer(token);\n\t} catch (NumberFormatException e) {\n\t}\n    }\n    return new Integer(-1);\n}\n",
    "Technically speaking we would take the LAST number but I actually think it is \nan error to have more than one so any behaviour would be ok.\n"
  ],
  "commentCreationDates": [
    "2004-05-08T03:17:12+02:00",
    "2004-05-08T03:27:57+02:00",
    "2004-05-08T03:31:26+02:00",
    "2004-05-08T03:33:29+02:00",
    "2004-05-08T03:38:05+02:00",
    "2004-05-08T03:38:43+02:00",
    "2004-05-08T03:48:29+02:00",
    "2004-05-08T03:51:45+02:00",
    "2004-05-08T03:59:06+02:00",
    "2004-05-08T04:10:46+02:00",
    "2004-05-08T04:43:07+02:00",
    "2004-05-08T06:39:49+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NumberFormatException",
      "message": "For input string: \"2:start\"",
      "elements": [
        {
          "method": "java.lang.NumberFormatException.forInputString",
          "source": "NumberFormatException.java:4 8"
        },
        {
          "method": "java.lang.Integer.parseInt",
          "source": "Integer.java:477"
        },
        {
          "method": "java.lang.Integer.\u003cinit\u003e",
          "source": "Integer.java:609"
        },
        {
          "method": "org.eclipse.pde.internal.ui.launcher.LauncherUtils.getAutoStartPlugins",
          "source": "Laun cherUtils.java:283"
        },
        {
          "method": "org.eclipse.pde.internal.ui.launcher.LauncherUtils.getPluginsToRun",
          "source": "Launcher Utils.java:212"
        },
        {
          "method": "org.eclipse.pde.internal.ui.launcher.WorkbenchLaunchConfigurationDelegate.getProgramArguments",
          "source": "WorkbenchLaunchConfigurationDelegate.java:120"
        },
        {
          "method": "org.eclipse.pde.internal.ui.launcher.WorkbenchLaunchConfigurationDelegate.createVMRunner",
          "source": "WorkbenchLaunchConfigurationDelegate.java:80"
        },
        {
          "method": "org.eclipse.pde.internal.ui.launcher.WorkbenchLaunchConfigurationDelegate.launch",
          "source": "WorkbenchLaunchConfigurationDelegate.java:51"
        },
        {
          "method": "org.eclipse.debug.internal.core.LaunchConfiguration.launch",
          "source": "LaunchConfigurat ion.java:569"
        },
        {
          "method": "org.eclipse.debug.internal.core.LaunchConfiguration.launch",
          "source": "LaunchConfigurat ion.java:150"
        },
        {
          "method": "org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch",
          "source": "DebugUIPlugin.ja va:770"
        },
        {
          "method": "org.eclipse.debug.internal.ui.DebugUIPlugin$6.run",
          "source": "DebugUIPlugin.java:932"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:66"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "61484",
      "date": "2004-05-08T03:17:12+02:00",
      "product": "PDE",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "61484",
  "bugId": "61484",
  "date": "2004-05-08T03:17:12+02:00",
  "product": "PDE",
  "component": "UI",
  "severity": "normal"
}