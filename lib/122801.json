{
  "comments": [
    "I get a message about a circular pointcut definition when reusing the superaspect definition in a subaspect redefinition (override), but only if the aspect is declared pertarget on that pointcut.  At a minimum we need to decide if the pointcut referred to in the superaspect pertarget clause should resolve to the superaspect pointcut or the subaspect pointcut.  I\u0027m inclined to use the overridden pointcut if the pointcut reference is unqualified, in order to support binary library aspects.  Conversely, library aspect writers who want to avoid overriding should be able to use a static reference to the library aspect, e.g.,\n\n   abstract aspect Foo pertarget(Foo.pc()) { ...\n\n(which would be an error if pc() is itself abstract). More (but not entirely) formally, a reference of the form Foo.pc() is resolved by looking in Foo and supertypes for a poincut pc, while an implicit reference of the form \"pc()\" is resolved by using the most-concrete type and then up the supertypes.\n\n-----------------------------------------------------------------\npackage bugs;\n\npublic class ReuseWhileRedefiningPointcut {\n\tstatic void run(){}\n\tpublic static void main(String[] args) {\n\t\trun();\n\t}\n        // use pertarget clause to see error message\n\tstatic abstract aspect Super { //pertarget(voidCalls()){\n\t\tpointcut voidCalls() : call(void *(..)) \n\t\t\t\u0026\u0026 within(ReuseWhileRedefiningPointcut);\n\t\tbefore() : voidCalls() {\n\t\t\tSystem.out.println(\"here: \" + thisJoinPoint);\n\t\t}\n\t}\n\t\n\tstatic aspect A extends Super {\n\t\tpointcut voidCalls() : Super.voidCalls() \u0026\u0026 call(void run());\n\t}\n}",
    "In AspectJ 1.5.1a (from AJDT), I now get a ClassCastException rather than a compiler error, so I\u0027m hoisting the priority to P2.\n\nInternal compiler error\njava.lang.ClassCastException: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature\n\n\tat org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile(AjState.java:783)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjState.noteResult(AjState.java:636)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult(AjBuildManager.java:884)\n\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:206)\n\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:90)\n\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)\n\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)\n\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\n\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\n",
    "I believe the classcast at that line is fixed (cant remember under which bug we did it though!)",
    "Verified fix in head just now.  I should have installed test code as test case."
  ],
  "commentCreationDates": [
    "2006-01-05T20:10:53+01:00",
    "2006-05-10T17:31:42+02:00",
    "2006-05-30T16:29:10+02:00",
    "2006-05-31T09:43:47+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassCastException",
      "message": "org.aspectj.weaver.MissingResolvedTypeWithKnownSignature",
      "elements": [
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile",
          "source": "AjState.java:783"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjState.noteResult",
          "source": "AjState.java:636"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult",
          "source": "AjBuildManager.java:884"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing",
          "source": "AjCompilerAdapter.java:206"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184",
          "source": "CompilerAdapter.aj:90"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:528"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:329"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:862"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:269"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:168"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "122801",
      "date": "2006-05-10T17:31:42+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "122801",
  "bugId": "122801",
  "date": "2006-01-05T20:10:53+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}