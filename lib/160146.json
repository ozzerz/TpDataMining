{
  "comments": [
    "This bug is very similar to Bug 117854 that is marked as fixed in 1.5.0, but my bug occurs against 1.5.2a.\n\nHibernate 3.1.3, JVM 1.5.0.8, AspectJ 1.5.2a. Spring 2.0RC3 (@Transactional aspect is used).\n\nStack trace\n\njava.lang.VerifyError: (class: de/ntec/lms/impl/topology/CellImpl$$EnhancerByCGLIB$$5c6597e7, method: getPlaces signature: ()Ljava/util/Set;) Inconsistent stack height 1 !\u003d 0\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\n\tat java.lang.Class.privateGetDeclaredConstructors(Class.java:2357)\n\tat java.lang.Class.getConstructor0(Class.java:2671)\n\tat java.lang.Class.newInstance0(Class.java:321)\n\tat java.lang.Class.newInstance(Class.java:303)\n\tat org.hibernate.proxy.CGLIBLazyInitializer.getProxy(CGLIBLazyInitializer.java:99)\n\tat org.hibernate.proxy.CGLIBProxyFactory.getProxy(CGLIBProxyFactory.java:47)\n\tat org.hibernate.tuple.AbstractEntityTuplizer.createProxy(AbstractEntityTuplizer.java:372)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.createProxy(AbstractEntityPersister.java:3121)\n\tat org.hibernate.event.def.DefaultLoadEventListener.createProxyIfNecessary(DefaultLoadEventListener.java:232)\n\tat org.hibernate.event.def.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:173)\n\tat org.hibernate.event.def.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:87)\n\tat org.hibernate.impl.SessionImpl.fireLoad(SessionImpl.java:862)\n\tat org.hibernate.impl.SessionImpl.internalLoad(SessionImpl.java:830)\n\tat org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:266)\n\tat org.hibernate.type.EntityType.resolve(EntityType.java:303)\n\tat org.hibernate.engine.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:116)\n\tat org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:842)\n\tat org.hibernate.loader.Loader.doQuery(Loader.java:717)\n\tat org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:224)\n\tat org.hibernate.loader.Loader.doList(Loader.java:2145)\n\tat org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2029)\n\tat org.hibernate.loader.Loader.list(Loader.java:2024)\n\tat org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:111)\n\tat org.hibernate.impl.SessionImpl.listCustomQuery(SessionImpl.java:1655)\n\tat org.hibernate.impl.AbstractSessionImpl.list(AbstractSessionImpl.java:142)\n\tat org.hibernate.impl.SQLQueryImpl.list(SQLQueryImpl.java:164)\n\tat de.ntec.lms.impl.topology.PlaceFinderImpl.reservePlace(PlaceFinderImpl.java:94)\n\tat de.ntec.lms.impl.topology.PlaceFinderTest.testReservation(PlaceFinderTest.java:165)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat de.ntec.common.spring.TxTestCase.access$0(TxTestCase.java:1)\n\tat de.ntec.common.spring.TxTestCase.doRunTest(TxTestCase.java:60)\n\tat de.ntec.common.spring.TxTestCase.runTest(TxTestCase.java:53)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
    "Forgot to mention -javaagent is used for weaving",
    "As discussed in the bug you reference, the fix/workaround is probably the same - to avoid weaving the CGLIB generated files by using something like:\n\n\u003cexclude within\u003d\"*CGLIB*\"/\u003e\n\nin your aop.xml file.\n\n",
    "Thank you, workaround I have already (it is specific for application),\nbut would give a try to your suggestion anyway.\n\nBut it would be very nice if bug will be fixed soon.",
    "Neither \n    \u003cweaver\u003e\n        \u003cexclude within\u003d\"*CGLIB*\" /\u003e \n        \u003cinclude within\u003d\"de.ntec..*\" /\u003e\n    \u003c/weaver\u003e\nnor\n    \u003cweaver\u003e\n        \u003cinclude within\u003d\"de.ntec..*\" /\u003e\n        \u003cexclude within\u003d\"*CGLIB*\" /\u003e \n    \u003c/weaver\u003e\nworks. Include I really need as there  are a lot of other classes that I do not wont to weave (all JDK ,  Spring, Hibernate ...).",
    "But this works\n        \u003cinclude within\u003d\"de.ntec..*\" /\u003e\n        \u003cexclude within\u003d\"de.ntec.lms.impl.topology.*CGLIB*\" /\u003e \nSorry for flooding.",
    "Have you tried using a recent development build of AspectJ? There have been a lot of bugs fixed since the 1.5.2 code came out (on which 1.5.2a is based). It would be helpful to know if this bug has been fixed already or not.",
    "The CGLIB generated code is not suitable for our weaving strategy - as discussed in the other bug, it contains some incorrect stack manipulation which AspectJ makes \u0027visible\u0027 when the code is woven.  I don\u0027t plan on changing our weaving strategy any time soon.  The CGLIB guys said they would take a patch for the problem if anyone cared to write it - then code they created would work fine with AspectJ.",
    "No, I have not, never use development builds for development. \nMay try just to clarify if bug is fixed. Would inform about results.",
    "Hello,\n\nrecent development build (aspectj-DEVELOPMENT-20061005121113.jar)\nexibits exactly the same behavior. \n\nConcerning CGLIB - in other bug discussin was stated not that CGLIB makes incorrect stack manipulation that AspectJ, in turn, makes visible,\nbut that CGLIB make some unusual but perfectly legal stack manipulation that AspectJ is not prepared for. \n\nAnyway, I have to agree that weaving of proxies is usually not so great idea, so excluding of CGLIB generated classes from weaving is a correct solution for most cases - the only thing that, IMHO, it shall be documented outside of bug-tracking system, e.g. in AspectJ FAQ (faq.html delivered with AspectJ).\n\nRegards,\n\nOleksandr",
    "Yes - could put something in the FAQ on this, or compiler limitations section of the doc.\n\nI shouldn\u0027t have used the word \u0027incorrect\u0027 earlier - I should have said \"unusual\".  AspectJ doesn\u0027t expect two exit points from a method to have different stack heights - so when they are merged to travel through a single after advice, the stack heights are discovered to be inconsistent on arrival at the advice call.  The fix to include multiple after advice sections would take a lot of work - and given that you usually don\u0027t want to weave these things - I have not done this work.\n",
    "As soon as it find its way into documentation it would be absolutely Ok.",
    "check in this timeframe if cglib have resolved the problem that causes this"
  ],
  "commentCreationDates": [
    "2006-10-08T11:34:52+02:00",
    "2006-10-08T11:38:15+02:00",
    "2006-10-08T21:43:22+02:00",
    "2006-10-08T23:08:55+02:00",
    "2006-10-08T23:15:41+02:00",
    "2006-10-08T23:17:51+02:00",
    "2006-10-09T02:29:40+02:00",
    "2006-10-09T09:04:36+02:00",
    "2006-10-09T12:12:31+02:00",
    "2006-10-09T13:28:23+02:00",
    "2006-10-09T14:30:15+02:00",
    "2006-10-09T17:13:54+02:00",
    "2007-10-25T11:27:29+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.VerifyError",
      "message": "(class: de/ntec/lms/impl/topology/CellImpl$$EnhancerByCGLIB$$5c6597e7, method: getPlaces signature: ()Ljava/util/Set;) Inconsistent stack height 1 !\u003d 0",
      "elements": [
        {
          "method": "java.lang.Class.getDeclaredConstructors0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.privateGetDeclaredConstructors",
          "source": "Class.java:2357"
        },
        {
          "method": "java.lang.Class.getConstructor0",
          "source": "Class.java:2671"
        },
        {
          "method": "java.lang.Class.newInstance0",
          "source": "Class.java:321"
        },
        {
          "method": "java.lang.Class.newInstance",
          "source": "Class.java:303"
        },
        {
          "method": "org.hibernate.proxy.CGLIBLazyInitializer.getProxy",
          "source": "CGLIBLazyInitializer.java:99"
        },
        {
          "method": "org.hibernate.proxy.CGLIBProxyFactory.getProxy",
          "source": "CGLIBProxyFactory.java:47"
        },
        {
          "method": "org.hibernate.tuple.AbstractEntityTuplizer.createProxy",
          "source": "AbstractEntityTuplizer.java:372"
        },
        {
          "method": "org.hibernate.persister.entity.AbstractEntityPersister.createProxy",
          "source": "AbstractEntityPersister.java:3121"
        },
        {
          "method": "org.hibernate.event.def.DefaultLoadEventListener.createProxyIfNecessary",
          "source": "DefaultLoadEventListener.java:232"
        },
        {
          "method": "org.hibernate.event.def.DefaultLoadEventListener.proxyOrLoad",
          "source": "DefaultLoadEventListener.java:173"
        },
        {
          "method": "org.hibernate.event.def.DefaultLoadEventListener.onLoad",
          "source": "DefaultLoadEventListener.java:87"
        },
        {
          "method": "org.hibernate.impl.SessionImpl.fireLoad",
          "source": "SessionImpl.java:862"
        },
        {
          "method": "org.hibernate.impl.SessionImpl.internalLoad",
          "source": "SessionImpl.java:830"
        },
        {
          "method": "org.hibernate.type.EntityType.resolveIdentifier",
          "source": "EntityType.java:266"
        },
        {
          "method": "org.hibernate.type.EntityType.resolve",
          "source": "EntityType.java:303"
        },
        {
          "method": "org.hibernate.engine.TwoPhaseLoad.initializeEntity",
          "source": "TwoPhaseLoad.java:116"
        },
        {
          "method": "org.hibernate.loader.Loader.initializeEntitiesAndCollections",
          "source": "Loader.java:842"
        },
        {
          "method": "org.hibernate.loader.Loader.doQuery",
          "source": "Loader.java:717"
        },
        {
          "method": "org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections",
          "source": "Loader.java:224"
        },
        {
          "method": "org.hibernate.loader.Loader.doList",
          "source": "Loader.java:2145"
        },
        {
          "method": "org.hibernate.loader.Loader.listIgnoreQueryCache",
          "source": "Loader.java:2029"
        },
        {
          "method": "org.hibernate.loader.Loader.list",
          "source": "Loader.java:2024"
        },
        {
          "method": "org.hibernate.loader.custom.CustomLoader.list",
          "source": "CustomLoader.java:111"
        },
        {
          "method": "org.hibernate.impl.SessionImpl.listCustomQuery",
          "source": "SessionImpl.java:1655"
        },
        {
          "method": "org.hibernate.impl.AbstractSessionImpl.list",
          "source": "AbstractSessionImpl.java:142"
        },
        {
          "method": "org.hibernate.impl.SQLQueryImpl.list",
          "source": "SQLQueryImpl.java:164"
        },
        {
          "method": "de.ntec.lms.impl.topology.PlaceFinderImpl.reservePlace",
          "source": "PlaceFinderImpl.java:94"
        },
        {
          "method": "de.ntec.lms.impl.topology.PlaceFinderTest.testReservation",
          "source": "PlaceFinderTest.java:165"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "de.ntec.common.spring.TxTestCase.access$0",
          "source": "TxTestCase.java:1"
        },
        {
          "method": "de.ntec.common.spring.TxTestCase.doRunTest",
          "source": "TxTestCase.java:60"
        },
        {
          "method": "de.ntec.common.spring.TxTestCase.runTest",
          "source": "TxTestCase.java:53"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3TestReference.java:128"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:38"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "160146",
      "date": "2006-10-08T11:34:52+02:00",
      "product": "AspectJ",
      "component": "LTWeaving",
      "severity": "major"
    }
  ],
  "groupId": "160146",
  "bugId": "160146",
  "date": "2006-10-08T11:34:52+02:00",
  "product": "AspectJ",
  "component": "LTWeaving",
  "severity": "major"
}