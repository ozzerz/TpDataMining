{
  "comments": [
    "Build ID: M20071023-1652\n\nSteps To Reproduce:\n1. Create a new Java project.\n\n2. Add jbossall-client.jar to the build path (available from http://labs.jboss.com/jbossas/downloads/ in the \"client/\" directory of the extracted download)\n\n3. Running the following code should work fine:\nProperties props \u003d new Properties();\nprops.put(Context.INITIAL_CONTEXT_FACTORY, \"org.jnp.interfaces.NamingContextFactory\");\nInitialContext ctx \u003d new InitialContext(props);\n\n4. Create a new plug-in project and add it as a project dependency to the first project.\n\n5. Running the above code now results in a ClassNotFoundException:\njavax.naming.NoInitialContextException: Cannot instantiate class: org.jnp.interfaces.NamingContextFactory [Root exception is java.lang.ClassNotFoundException: org/jnp/interfaces/NamingContextFactory]\n\tat javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:657)\n\tat javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:247)\n\tat javax.naming.InitialContext.init(InitialContext.java:223)\n\tat javax.naming.InitialContext.\u003cinit\u003e(InitialContext.java:197)\n\nMore information:\nWhen the first project is a plug-in project too (converted to plug-in project), and the dependency is defined via the manifest file, the behaviour is identical. However, if the above code is run as a JUnit plug-in test, it works. On Mac OS 10.4, Windows XP and Ubuntu 7.10, non-plug-in EJB-client calls (as above) work fine, so it seems something in the Java VM included in Leopard collides with the way classes are loaded when not running as an Eclipse app/plug-in test, but depending on a plug-in project. This blocks (non-plug-in) testing on Leopard for our current setup.",
    "The problem seems to arise when java is started with \"-XstartOnFirstThread\" (see http://groups.google.com/group/javaposse/browse_thread/thread/667449bae517655f), in my scenario (described in the original report) it works if I call \"Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader());\" before calling the server classes. Therefore it seems this is no Eclipse bug at all. A user in the linked discussion has reported this issue to Apple."
  ],
  "commentCreationDates": [
    "2007-11-09T19:36:53+01:00",
    "2007-11-16T10:16:35+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassNotFoundException",
      "message": "org/jnp/interfaces/NamingContextFactory]",
      "elements": [
        {
          "method": "javax.naming.spi.NamingManager.getInitialContext",
          "source": "NamingManager.java:657"
        },
        {
          "method": "javax.naming.InitialContext.getDefaultInitCtx",
          "source": "InitialContext.java:247"
        },
        {
          "method": "javax.naming.InitialContext.init",
          "source": "InitialContext.java:223"
        },
        {
          "method": "javax.naming.InitialContext.\u003cinit\u003e",
          "source": "InitialContext.java:197"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "209376",
      "date": "2007-11-09T19:36:53+01:00",
      "product": "Platform",
      "component": "Runtime",
      "severity": "blocker"
    }
  ],
  "groupId": "209376",
  "bugId": "209376",
  "date": "2007-11-09T19:36:53+01:00",
  "product": "Platform",
  "component": "Runtime",
  "severity": "blocker"
}