{
  "comments": [
    "More and more elements in JFace and UI request Customizable TooltipSupport. We should think about providing a common class providing a solid base for Tooltip implementations.",
    "Created an attachment (id\u003d53172)\nBase Implementation for ToolTip\n\n",
    "See also Bug 152969",
    "Boris: is this one of the ones you wanted me to look at?",
    "(In reply to comment #3)\n\u003e Boris: is this one of the ones you wanted me to look at?\n\nYes.",
    "This looks sufficiently complicated that I\u0027d feel bad about committing it without a testcase.  Tom, could you write a test case to verify this works as expected?",
    "Created an attachment (id\u003d53371)\nFull source of modified ToolTip Support class to use Snippets as TestCases\n\nI\u0027m in Italy the whole week (behind a stupid win32 proxy which denies my to get access to CVS repository :-( so all I can provide you is the possibility to test the whole biest with the best test case you could get (the newly added TooltipSupport). I\u0027ll attach the new ToolTip-Support-Class to the mail. \n\nIf this is done you have two great test-cases from JFace-Snippets-Collection:\n- org.eclipse.jface.snippets.viewers.Snippet011CustomTooltips\n- https://bugs.eclipse.org/bugs/attachment.cgi?id\u003d53061\n\nIf you give your OK to the ToolTip-Class and Boris/Tod to the modified version of TooltipSupport those could be applied to HEAD together.\n\nIf that\u0027s not OK with you all then I\u0027ll can provide seperate TestCases and patches when I\u0027m back in Austria leaving.",
    "Created an attachment (id\u003d53372)\nA better Version which removes unneeded code parts\n\n",
    "Created an attachment (id\u003d53398)\nImproved implementation for Tooltip exit handling\n\n",
    "Created an attachment (id\u003d53399)\nHelper to easily map tooltips to controls\n\n",
    "Created an attachment (id\u003d53400)\nExample Snippet\n\n",
    "Created an attachment (id\u003d53402)\nToolTip Support on top of Helper class\n\n",
    "Created an attachment (id\u003d53403)\nFix up for ColumnViewer to lazily initialize the ToolTip which vital\n\n",
    "I know that there\u0027s documentation missing at least ToolTipHelper#createTooltip() should state that it\u0027s valid to return null if no tooltip has to be displayed but I\u0027m ran out of time today. There\u0027s also an issue when the parent shell is put into background while the tooltip is shown.",
    "Created an attachment (id\u003d53410)\nPatch representing the previous changes\n\n",
    "I have issues :\n1) use of Timer class.  Is there a reason we can\u0027t just use Display.timerExec and forgo the async call?\n2) statically referring to the currently opened tooltip (assumed to be a singleton) when there is no synchronization on the open/dispose methods.  All kinds of badness could happen here.\n3) use of Display filters.  These are dangerous things that should be avoided at all costs.  Are they absolutely necessary?\n4) I worry that too much of the implementation for Tooltip isn\u0027t final.  This relates more to the previous two issues which make the solution brittle and dangerous.  For instance, a Tooltip implementation with broken dispose() would leave an increasing number of display filters,  shells, and threads (in the Timer) in the system.  \n5) There is one abstract Tooltip class, another abstract helper, and yet another support class.  Can this be condensed to one access point?",
    "(In reply to comment #15)\n\u003e I have issues :\n\u003e 1) use of Timer class.  Is there a reason we can\u0027t just use Display.timerExec\n\u003e and forgo the async call?\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d83200#c32\n\nWell yes we could ( and I did in the up coming version ;-). The draw back is that we cann\u0027t cancle runnables scheduled with timerExec but I wasn\u0027t also really happy with the Timer implementation so its gone.\n\n\u003e 2) statically referring to the currently opened tooltip (assumed to be a\n\u003e singleton) when there is no synchronization on the open/dispose methods.  All\n\u003e kinds of badness could happen here.\n\nAccepted and should be no problem any more because of using Display.timerExec() so we are in the same thread all day long. Right?\n\n\u003e 3) use of Display filters.  These are dangerous things that should be avoided\n\u003e at all costs.  Are they absolutely necessary?\n\nHow would you propose to get informed when the mouse leaves the current tooltip, I really really would love to not use the Display-Filters but I can\u0027t see another possibility to get informed about mouse leaving events?\n\n\u003e 4) I worry that too much of the implementation for Tooltip isn\u0027t final.  This\n\u003e relates more to the previous two issues which make the solution brittle and\n\u003e dangerous.  For instance, a Tooltip implementation with broken dispose() would\n\u003e leave an increasing number of display filters,  shells, and threads (in the\n\u003e Timer) in the system.  \n\nI\u0027ll upload a new version in a few minutes where people are not able to break dipose() any more.\n\n\u003e 5) There is one abstract Tooltip class, another abstract helper, and yet\n\u003e another support class.  Can this be condensed to one access point?\n\nIf now done the following:\n- ToolTipPart \u003d\u003e Hides ToolTip completely from the User who is not even able \n                 any more to create an instance from it\n- ToolTip        \u003d\u003e reduced the visibility to package\n- ToolTipSupport \u003d\u003e package visible and used in conjuction with LabelProviders \n                    which might not make sense for other controls\n\nThis means there\u0027s only one public access point namely ToolTipPart.",
    "Created an attachment (id\u003d53481)\nNew ToolTip without Threads and not API\n\n",
    "Created an attachment (id\u003d53482)\nNew public interface to implement tooltip support\n\n",
    "Created an attachment (id\u003d53483)\nRewritten Support for Viewers\n\n",
    "Created an attachment (id\u003d53484)\nSnippet to reflect changes\n\n",
    "I\u0027ve looked at the code a bit (haven\u0027t dug too deep yet) but many of the issues I had have been addressed.  I tried playing around with the snippet and came across some issues that may or may not be legitimate.  \n\n1)  on OS X the tooltip shell background color is the default grey gradient that normal shells have.  Should these things look like standard tooltips without undo effort?\n\n2) I added a tree to the example snippet and tried to interact with it when the tip appeared.  The tip would always disappear if I either had to move to get into it or used the mouse button.  Should it be possible to interact with these shells in any way?  If not, that should be documented somehow.",
    "Also, after applying these changes the test suites no longer succeed.  There are NPEs all over the place such as the following:\n\njava.lang.NullPointerException\n\tat org.eclipse.jface.window.ToolTipPart.\u003cinit\u003e(ToolTipPart.java:61)\n\tat org.eclipse.jface.viewers.ToolTipSupport.\u003cinit\u003e(ToolTipSupport.java:60)\n\tat org.eclipse.jface.viewers.ColumnViewer.\u003cinit\u003e(ColumnViewer.java:43)\n\tat org.eclipse.jface.viewers.AbstractTreeViewer.\u003cinit\u003e(AbstractTreeViewer.java:107)\n\tat org.eclipse.jface.viewers.TreeViewer.\u003cinit\u003e(TreeViewer.java:124)\n\tat org.eclipse.jface.viewers.TreeViewer.\u003cinit\u003e(TreeViewer.java:113)\n\tat org.eclipse.ui.views.navigator.ResourceNavigator.createViewer(ResourceNavigator.java:353)\n\tat org.eclipse.ui.views.navigator.ResourceNavigator.createPartControl(ResourceNavigator.java:273)\n\tat org.eclipse.ui.internal.ViewReference.createPartHelper(ViewReference.java:332)\n\tat org.eclipse.ui.internal.ViewReference.createPart(ViewReference.java:197)\n\tat org.eclipse.ui.internal.WorkbenchPartReference.getPart(WorkbenchPartReference.java:566)\n\tat org.eclipse.ui.internal.PartPane.setVisible(PartPane.java:290)\n\tat org.eclipse.ui.internal.ViewPane.setVisible(ViewPane.java:525)\n\tat org.eclipse.ui.internal.presentations.PresentablePart.setVisible(PresentablePart.java:140)\n\tat org.eclipse.ui.internal.presentations.util.PresentablePartFolder.select(PresentablePartFolder.java:268)\n\tat org.eclipse.ui.internal.presentations.util.LeftToRightTabOrder.select(LeftToRightTabOrder.java:65)\n\tat org.eclipse.ui.internal.presentations.util.TabbedStackPresentation.selectPart(TabbedStackPresentation.java:394)\n\tat org.eclipse.ui.internal.PartStack.refreshPresentationSelection(PartStack.java:1156)\n\tat org.eclipse.ui.internal.PartStack.setSelection(PartStack.java:1109)\n\tat org.eclipse.ui.internal.PartStack.showPart(PartStack.java:1335)\n\tat org.eclipse.ui.internal.PartStack.createControl(PartStack.java:604)\n\tat org.eclipse.ui.internal.PartStack.createControl(PartStack.java:535)\n\tat org.eclipse.ui.internal.PartSashContainer.createControl(PartSashContainer.java:570)\n\tat org.eclipse.ui.internal.PerspectiveHelper.activate(PerspectiveHelper.java:247)\n\tat org.eclipse.ui.internal.Perspective.onActivate(Perspective.java:836)\n\tat org.eclipse.ui.internal.WorkbenchPage.onActivate(WorkbenchPage.java:2412)\n\tat org.eclipse.ui.internal.WorkbenchWindow$6.run(WorkbenchWindow.java:2613)\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)\n\tat org.eclipse.ui.internal.WorkbenchWindow.setActivePage(WorkbenchWindow.java:2594)\n\tat org.eclipse.ui.internal.WorkbenchWindow.busyOpenPage(WorkbenchWindow.java:658)\n\tat org.eclipse.ui.internal.Workbench.busyOpenWorkbenchWindow(Workbench.java:813)\n\tat org.eclipse.ui.internal.Workbench.access$13(Workbench.java:803)\n\tat org.eclipse.ui.internal.Workbench$19.run(Workbench.java:1599)\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)\n\tat org.eclipse.ui.internal.Workbench.openWorkbenchWindow(Workbench.java:1596)\n\tat org.eclipse.ui.tests.dnd.DragTest.doSetUp(DragTest.java:170)\n\tat org.eclipse.ui.tests.harness.util.UITestCase.setUp(UITestCase.java:180)\n\tat junit.framework.TestCase.runBare(TestCase.java:128)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:230)\n\tat junit.framework.TestSuite.run(TestSuite.java:225)\n\tat org.eclipse.ui.tests.autotests.AutoTestSuite.run(AutoTestSuite.java:55)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:230)\n\tat junit.framework.TestSuite.run(TestSuite.java:225)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:58)\n\tat org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run(UITestApplication.java:105)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3238)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2990)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1936)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1900)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:422)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\n\tat org.eclipse.pde.internal.junit.runtime.UITestApplication.run(UITestApplication.java:45)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:104)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:74)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:348)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:165)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:341)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:285)\n\tat org.eclipse.core.launcher.Main.run(Main.java:987)\n\tat org.eclipse.core.launcher.Main.main(Main.java:962)\n",
    "\n(In reply to comment #22)\n\u003e Also, after applying these changes the test suites no longer succeed.  There\n\u003e are NPEs all over the place such as the following:\n\u003e java.lang.NullPointerException\n\nYou forgot to apply the fix to ColumnViewer didn\u0027t you?\nhttps://bugs.eclipse.org/bugs/attachment.cgi?id\u003d53403\n",
    "(In reply to comment #21)\n\u003e I\u0027ve looked at the code a bit (haven\u0027t dug too deep yet) but many of the issues\n\u003e I had have been addressed.  I tried playing around with the snippet and came\n\u003e across some issues that may or may not be legitimate.  \n\u003e 1)  on OS X the tooltip shell background color is the default grey gradient\n\u003e that normal shells have.  Should these things look like standard tooltips\n\u003e without undo effort?\n\nThat\u0027s the problem of your custom implementation. The snippet I\u0027ll upload fixes this.\n\n\u003e 2) I added a tree to the example snippet and tried to interact with it when the\n\u003e tip appeared.  The tip would always disappear if I either had to move to get\n\u003e into it or used the mouse button.  Should it be possible to interact with these\n\u003e shells in any way?  If not, that should be documented somehow.\n\nreplace the following code parts in ToolTip:\n----------------8\u003c----------------\n\tvoid handleMouseDown(Event event) {\n\t\tif( event.doit ) {\n\t\t\tdispose();\n\t\t}\n\t}\n\n\tvoid handleMouseExit(Event event) {\n\t\tif( event.doit ) {\n\t\t\tdispose();\n\t\t}\n\t}\n----------------8\u003c----------------\n\nLook at upcoming the snippet to see how this can be cancled. The really bad thing is that we cann\u0027t provide the exit-behaviour as shown in the snippet into the ToolTip isself because of bug #163980.\n\n\n",
    "Created an attachment (id\u003d53554)\nShown new possibility to cancle close events\n\n",
    "Created an attachment (id\u003d53590)\nToolTip-Class - Fixed version which now hides automatically\n\n",
    "Created an attachment (id\u003d53591)\nSnippet - Update snippet\n\n",
    "Some more complaints (yah, I\u0027m harsh :)\n\n1) Is there a good reason why the ToolTip class needs to exist?  There\u0027s only one implementation of it and it\u0027s package private.  Can we roll this into ToolTipPart in createTooltip?\n\n2) Your strategy for cancelling close events does not work on OS X.  Before we submit this I want to ensure that it\u0027s possible to have a tooltip with functioning controls on all platforms.  Ideally this support would work out of the box via flags or somesuch.  Futzing with event doit flags is going to be problemlatic to support on all platforms.  An example that shows such an interactive tooltip would be good.\n\n3) Can activate() be called in the constructor?  Being enabled by default seems sensible",
    "Created an attachment (id\u003d53647)\nPatch to reflect the changes\n\n",
    "Created an attachment (id\u003d53667)\npatch to address all things discussed on IRC with Kim\n\nHi, I think this addresses all your problems.",
    "I broke the class in two - a barebones baseclass and another default implementation.  Patch is committed but I am entering bugs to address some questions regarding our bounds checking and a possible optimization. ",
    "Verified in I20061212-0010"
  ],
  "commentCreationDates": [
    "2006-11-02T22:44:11+01:00",
    "2006-11-02T22:45:54+01:00",
    "2006-11-02T23:15:44+01:00",
    "2006-11-06T16:46:14+01:00",
    "2006-11-06T17:11:07+01:00",
    "2006-11-07T13:36:57+01:00",
    "2006-11-07T15:36:18+01:00",
    "2006-11-07T15:38:27+01:00",
    "2006-11-07T19:27:35+01:00",
    "2006-11-07T19:29:10+01:00",
    "2006-11-07T19:30:01+01:00",
    "2006-11-07T19:33:35+01:00",
    "2006-11-07T19:34:27+01:00",
    "2006-11-07T19:37:54+01:00",
    "2006-11-07T20:43:29+01:00",
    "2006-11-07T20:56:40+01:00",
    "2006-11-08T19:03:52+01:00",
    "2006-11-08T19:05:20+01:00",
    "2006-11-08T19:06:27+01:00",
    "2006-11-08T19:07:30+01:00",
    "2006-11-08T19:08:49+01:00",
    "2006-11-09T15:53:22+01:00",
    "2006-11-09T16:49:47+01:00",
    "2006-11-09T17:26:12+01:00",
    "2006-11-09T17:31:20+01:00",
    "2006-11-09T17:32:52+01:00",
    "2006-11-09T23:09:54+01:00",
    "2006-11-09T23:11:16+01:00",
    "2006-11-10T16:10:44+01:00",
    "2006-11-10T19:38:00+01:00",
    "2006-11-10T22:26:02+01:00",
    "2006-11-13T17:15:39+01:00",
    "2006-12-12T14:27:43+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jface.window.ToolTipPart.\u003cinit\u003e",
          "source": "ToolTipPart.java:61"
        },
        {
          "method": "org.eclipse.jface.viewers.ToolTipSupport.\u003cinit\u003e",
          "source": "ToolTipSupport.java:60"
        },
        {
          "method": "org.eclipse.jface.viewers.ColumnViewer.\u003cinit\u003e",
          "source": "ColumnViewer.java:43"
        },
        {
          "method": "org.eclipse.jface.viewers.AbstractTreeViewer.\u003cinit\u003e",
          "source": "AbstractTreeViewer.java:107"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeViewer.\u003cinit\u003e",
          "source": "TreeViewer.java:124"
        },
        {
          "method": "org.eclipse.jface.viewers.TreeViewer.\u003cinit\u003e",
          "source": "TreeViewer.java:113"
        },
        {
          "method": "org.eclipse.ui.views.navigator.ResourceNavigator.createViewer",
          "source": "ResourceNavigator.java:353"
        },
        {
          "method": "org.eclipse.ui.views.navigator.ResourceNavigator.createPartControl",
          "source": "ResourceNavigator.java:273"
        },
        {
          "method": "org.eclipse.ui.internal.ViewReference.createPartHelper",
          "source": "ViewReference.java:332"
        },
        {
          "method": "org.eclipse.ui.internal.ViewReference.createPart",
          "source": "ViewReference.java:197"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPartReference.getPart",
          "source": "WorkbenchPartReference.java:566"
        },
        {
          "method": "org.eclipse.ui.internal.PartPane.setVisible",
          "source": "PartPane.java:290"
        },
        {
          "method": "org.eclipse.ui.internal.ViewPane.setVisible",
          "source": "ViewPane.java:525"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.PresentablePart.setVisible",
          "source": "PresentablePart.java:140"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.PresentablePartFolder.select",
          "source": "PresentablePartFolder.java:268"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.LeftToRightTabOrder.select",
          "source": "LeftToRightTabOrder.java:65"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.TabbedStackPresentation.selectPart",
          "source": "TabbedStackPresentation.java:394"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack.refreshPresentationSelection",
          "source": "PartStack.java:1156"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack.setSelection",
          "source": "PartStack.java:1109"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack.showPart",
          "source": "PartStack.java:1335"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack.createControl",
          "source": "PartStack.java:604"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack.createControl",
          "source": "PartStack.java:535"
        },
        {
          "method": "org.eclipse.ui.internal.PartSashContainer.createControl",
          "source": "PartSashContainer.java:570"
        },
        {
          "method": "org.eclipse.ui.internal.PerspectiveHelper.activate",
          "source": "PerspectiveHelper.java:247"
        },
        {
          "method": "org.eclipse.ui.internal.Perspective.onActivate",
          "source": "Perspective.java:836"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.onActivate",
          "source": "WorkbenchPage.java:2412"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow$6.run",
          "source": "WorkbenchWindow.java:2613"
        },
        {
          "method": "org.eclipse.swt.custom.BusyIndicator.showWhile",
          "source": "BusyIndicator.java:67"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow.setActivePage",
          "source": "WorkbenchWindow.java:2594"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow.busyOpenPage",
          "source": "WorkbenchWindow.java:658"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.busyOpenWorkbenchWindow",
          "source": "Workbench.java:813"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.access$13",
          "source": "Workbench.java:803"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench$19.run",
          "source": "Workbench.java:1599"
        },
        {
          "method": "org.eclipse.swt.custom.BusyIndicator.showWhile",
          "source": "BusyIndicator.java:67"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.openWorkbenchWindow",
          "source": "Workbench.java:1596"
        },
        {
          "method": "org.eclipse.ui.tests.dnd.DragTest.doSetUp",
          "source": "DragTest.java:170"
        },
        {
          "method": "org.eclipse.ui.tests.harness.util.UITestCase.setUp",
          "source": "UITestCase.java:180"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:128"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:120"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:230"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:225"
        },
        {
          "method": "org.eclipse.ui.tests.autotests.AutoTestSuite.run",
          "source": "AutoTestSuite.java:55"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:230"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:225"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3TestReference.java:128"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:38"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:58"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run",
          "source": "UITestApplication.java:105"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:123"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:3238"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2990"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1936"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1900"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:422"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication.run",
          "source": "UITestApplication.java:45"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:78"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:104"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:74"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:348"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:165"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:341"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:285"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:987"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:962"
        }
      ],
      "number": 0,
      "commentIndex": 22,
      "bugId": "163274",
      "date": "2006-11-09T16:49:47+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "163274",
  "bugId": "163274",
  "date": "2006-11-02T22:44:11+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}