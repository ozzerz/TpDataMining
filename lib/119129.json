{
  "comments": [
    "Given:\n\npackage com.tpc.binding.test.bugs;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport java.util.ArrayList;\n\nimport org.eclipse.jface.databinding.DataBinding;\nimport org.eclipse.jface.databinding.IDataBindingContext;\nimport org.eclipse.jface.databinding.Property;\nimport org.eclipse.jface.databinding.swt.SWTProperties;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Combo;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.List;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.custom.CCombo;\n\npublic class ComboTest {\n\n   private ArrayList people \u003d new ArrayList();\n   \n   public ArrayList getPeople() {\n      return people;\n   }\n   \n   private Shell sShell \u003d null;\n   private Label label \u003d null;\n   private Combo combo \u003d null;\n   private List list \u003d null;\n   private CCombo cCombo \u003d null;\n   public static class Person {\n      private String firstName;\n      private String lastName;\n      \n      public Person(String firstName, String lastName) {\n         this.firstName \u003d firstName;\n         this.lastName \u003d lastName;\n      }\n      \n      private PropertyChangeSupport pcs \u003d new PropertyChangeSupport(this);\n      \n      public void addPropertyChangeListener(PropertyChangeListener l) {\n         pcs.addPropertyChangeListener(l);\n      }\n      \n      public void removePropertyChangeListener(PropertyChangeListener l) {\n         pcs.removePropertyChangeListener(l);\n      }\n      \n      public String getFirstName() {\n         return firstName;\n      }\n      \n      public void setFirstName(String firstName) {\n         String oldValue \u003d this.firstName;\n         this.firstName \u003d firstName;\n         pcs.firePropertyChange(\"firstName\", oldValue, firstName);\n      }\n      \n      public String getLastName() {\n         return lastName;\n      }\n      public void setLastName(String lastName) {\n         String oldValue \u003d this.lastName;\n         this.lastName \u003d lastName;\n         pcs.firePropertyChange(\"lastName\", oldValue, lastName);\n      }\n      \n      @Override\n      public String toString() {\n         return firstName + \" \" + lastName;\n      }\n   }\n   \n   /**\n    * This method initializes combo\t\n    *\n    */\n   private void createCombo() {\n      GridData gridData \u003d new org.eclipse.swt.layout.GridData();\n      gridData.horizontalAlignment \u003d org.eclipse.swt.layout.GridData.FILL;\n      gridData.verticalAlignment \u003d org.eclipse.swt.layout.GridData.BEGINNING;\n      combo \u003d new Combo(sShell, SWT.READ_ONLY);\n      combo.setLayoutData(gridData);\n   }\n\n   /**\n    * @param args\n    */\n   public static void main(String[] args) {\n      Display display \u003d Display.getDefault();\n      ComboTest thisClass \u003d new ComboTest();\n      thisClass.createSShell();\n      thisClass.bindControls();\n      thisClass.sShell.open();\n      while (!thisClass.sShell.isDisposed()) {\n         if (!display.readAndDispatch())\n            display.sleep();\n      }\n      display.dispose();\n   }\n   \n   public ComboTest() {\n      people.add(new Person(\"John\", \"Doe\"));\n      people.add(new Person(\"Bill\", \"Gates\"));\n      people.add(new Person(\"Laura\", \"Wilder\"));\n   }\n\n   /**\n    * This method initializes sShell\n    */\n   private void createSShell() {\n      GridData gridData1 \u003d new org.eclipse.swt.layout.GridData();\n      gridData1.verticalSpan \u003d 3;\n      GridData gridData2 \u003d new org.eclipse.swt.layout.GridData();\n      gridData2.horizontalAlignment \u003d org.eclipse.swt.layout.GridData.FILL;\n      gridData2.verticalAlignment \u003d org.eclipse.swt.layout.GridData.CENTER;\n      GridLayout gridLayout \u003d new GridLayout();\n      gridLayout.numColumns \u003d 2;\n      sShell \u003d new Shell();\n      sShell.setText(\"Shell\");\n      sShell.setLayout(gridLayout);\n      sShell.setSize(new Point(300, 200));\n      label \u003d new Label(sShell, SWT.NONE);\n      label.setText(\"Please select a person:\");\n      list \u003d new List(sShell, SWT.BORDER);\n      cCombo \u003d new CCombo(sShell, SWT.NONE);\n      cCombo.setLayoutData(gridData2);\n      list.setLayoutData(gridData1);\n      createCombo();\n   }\n\n   private void bindControls() {\n      IDataBindingContext dbc \u003d DataBinding.createContext(sShell);\n//      dbc.bind(new Property(combo, SWTProperties.ITEMS), new Property(this, \"people\", Person.class, true), null);\n//      dbc.bind(new Property(list, SWTProperties.ITEMS), new Property(this, \"people\", Person.class, true), null);\n      dbc.bind(new Property(cCombo, SWTProperties.ITEMS), new Property(this, \"people\", Person.class, true), null);\n   }\n\n}\n\n\nI get the following stack trace:\n\n\nException in thread \"main\" org.eclipse.jface.databinding.BindingException: Missing converter from class java.lang.String to class com.tpc.binding.test.bugs.ComboTest$Person\n\tat org.eclipse.jface.databinding.internal.CollectionBinding.\u003cinit\u003e(CollectionBinding.java:52)\n\tat org.eclipse.jface.databinding.internal.DataBindingContext.bind(DataBindingContext.java:295)\n\tat org.eclipse.jface.databinding.internal.DataBindingContext.bind(DataBindingContext.java:350)\n\tat org.eclipse.jface.databinding.internal.DataBindingContext.bind(DataBindingContext.java:407)\n\tat com.tpc.binding.test.bugs.ComboTest.bindControls(ComboTest.java:141)\n\tat com.tpc.binding.test.bugs.ComboTest.main(ComboTest.java:98)\n\n\nI get a similar stack trace if I uncomment either the Combo or List.\n\n\nIf elementType(modelCollection) !\u003d String, I should still be able to bind to a Combo, CCombo, or List, as long as I have a converter from elementType(modelCollection) to String.  The binder should be able to convert in the reverse direction for me automatically, since the position of the selected element always corresponds to the position of the original model element.\n\nMarking blocker because I can\u0027t convert large portions of my legacy code base (that relies on a custom combo class that wraps CCombo) without this (ie: it stops all development related to Combo, CCombo, and List in my code).",
    "One possible solution would be to put the methods of IUpdatableCollection into a new type IChangeableCollection, let IUpdatableCollection extend IUpdatable and IChangeableCollection, and allow an IChangeableCollection on the target side of bind(). When you bind an IChangeableCollection to an IUpdatableCollection, you don\u0027t need a converter from target to model, you don\u0027t need a validator, and you don\u0027t register an IChangeListener on the target.\n\nJust to throw oil on the fire \u003cg\u003e, this is another argument for one-way converters.",
    "I do not see any problem here, Dave.\n\nThe binding framework does not understand such thing as a read only targets (like a simple combo) and always expects to be able and convert left2right and right2left.  In your case it is a Person to String, and a String to *Person*.  .. you will have to supply a converter.  But this is not at all the problem you are facing.\n\nWhen you bind to a C/Combo or a Text widget, you are actually binding the items/text properties.  There is no domain model understanding per se.  The Combo (as would Text) has no clue about a Person?  For the Combo it is a bunch of Strings (items).  Selection of item[7] is not Person[7], but rather, converted String[7]\n\nWe all agreed a while back, that for domain-model functionality, JFace will be used.  With a JFace ComboViewer, you will be binding to the (Person) collection.  The Viewer has a LabelProvider to render the ?strings?, but selecting item[7], will indeed give you Person[7].  So would the ListViewer.\n\n\n? so if you change the bindControls() method as following, it will work just fine.  ? The only catch is that there is no CCombo viewer.\n\nprivate void bindControls() {\n      IDataBindingContext dbc \u003d DataBinding.createContext(sShell);\n      \n      ComboViewer cViewer \u003d new ComboViewer(combo);      \n      dbc.bind(new Property(cViewer, ViewersProperties.CONTENT), new Property(this, \"people\", Person.class, Boolean.TRUE), null);\n      // Need to bind the SELECTION so that something is selected up front\n      \n      ListViewer lViewer \u003d new ListViewer(list);\n      dbc.bind(new Property(lViewer, ViewersProperties.CONTENT), new Property(this, \"people\", Person.class, Boolean.TRUE), null);\n      \n   }\n",
    "Boris, any chance for a CCombo support in the ComboViewer?",
    "(In reply to comment #2)\n\u003e When you bind to a C/Combo or a Text widget, you are actually binding the\n\u003e items/text properties.  There is no domain model understanding per se.  The\n\u003e Combo (as would Text) has no clue about a Person?  For the Combo it is a bunch\n\u003e of Strings (items).  Selection of item[7] is not Person[7], but rather,\n\u003e converted String[7]\n\nBoris already explained one way we can make a CCombo or a List have domain model understanding.\n\n\u003e We all agreed a while back, that for domain-model functionality, JFace will be\n\u003e used.\n\nI don\u0027t remember any conversation where we aqgreed that we would never support domain model functionality on pure SWT controls.\n\nAnd if we had, then we wouldn\u0027t be supporting binding a model to a SWT table, which we do support today, but we would rather insist on everyone using TableViewer.  Boris, who is on the JFace team, wrote the SWT Table support, so that certainly was not his understanding either.\n\n\u003e  With a JFace ComboViewer, you will be binding to the (Person)\n\u003e collection.  The Viewer has a LabelProvider to render the ?strings?, but\n\u003e selecting item[7], will indeed give you Person[7].  So would the ListViewer.\n\nEven if CComboViewer existed, we can\u0027t do this because our control isn\u0027t a CCombo, but rather a Composite that wraps CCombo and adds new behavior.  A CComboViewer would not have this behavior.\n\n\nSo to summarize, your solution is inadaqute because:\n\n1) CComboViewer doesn\u0027t exist, so it\u0027s obviously not an option.\n\n2) Even if it did, our project couldn\u0027t use it because it wouldn\u0027t necessarily work with our customized CCombo control.\n\n3) Even if we could use a CComboViewer, your \"solution\" to our problem is to have our team rewrite 6 months of code to use CComboViewer everywhere, when we *could* just make our existing CCombo binder smarter and it would then be relatively easy to make a binder that would understand it?\n\n\nReopening bug since proposed solution does not take into account all circumstances involved.\n\n",
    "Regarding comment #3 and the fact that this bug was marked as Resolved/INVALID:\n\nI consider it to be very bad form for one committer to mark a bug as Resolved/INVALID without first waiting to see if there is a consensus among the other committers--ESPECIALLY when *two* other committers had expressed an opinion in direct opposition to marking the bug as INVALID in previous comments.\n",
    "\u003e \n\u003e Boris already explained one way we can make a CCombo or a List have domain\n\u003e model understanding.\n\u003e \n\nAnything... just takes time, effort.  At this time, we are trying to get our design goals in to play.  This was not one of them.\n\n\u003e \n\u003e I don\u0027t remember any conversation where we aqgreed that we would never support\n\u003e domain model functionality on pure SWT controls.\n\u003e \n\nAs far as I remember, you signed up on: http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-ui-home/databinding-proposal/scenarios.html ?  See the Combo section? domain models are bound to viewers only.\n\n\u003e So to summarize, your solution is inadaqute because:\n\nI am not going to argue with you on this forum, our solution does more than what we agreed on.  If you want to talk about this constructively, you are more than welcome.\n\n\nThis is not a blocker, if you want to implement it differently, than go for it.  It is yours.",
    "(In reply to comment #6)\n\u003e \u003e \n\u003e \u003e Boris already explained one way we can make a CCombo or a List have domain\n\u003e \u003e model understanding.\n\u003e \n\u003e Anything... just takes time, effort.  At this time, we are trying to get our\n\u003e design goals in to play.  This was not one of them.\n\u003e \n\u003e \u003e I don\u0027t remember any conversation where we aqgreed that we would never support\n\u003e \u003e domain model functionality on pure SWT controls.\n\u003e \n\u003e As far as I remember, you signed up on:\n\u003e http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-ui-home/databinding-proposal/scenarios.html\n\u003e ?  See the Combo section? domain models are bound to viewers only.\n\nThanks for clearing that up.  However, that document is ancient history now and as I remarked above, we *have* embraced a larger scope than that since then.\n\nNot only that, you resolved the bug as Resolved/INVALID, not Resolved/LATER, so it seemed to me that you were claiming that we didn\u0027t need the feature at all, which is a much stronger claim than you seem to be making now.\n\n\u003e \u003e So to summarize, your solution is inadaqute because:\n\u003e \n\u003e I am not going to argue with you on this forum, our solution does more than\n\u003e what we agreed on.  If you want to talk about this constructively, you are more\n\u003e than welcome.\n\nWhat else was I supposed to say?  You had marked the bug as Resolved/INVALID, so it was up to me to give the reasons why the bug *is* valid since you had failed to convince me otherwise.  That is the whole meaning of Resolved/INVALID, isn\u0027t it?\n\nIf you wanted to raise the question to the team that we had earlier decided that this feature would be out of scope (even though we have obviously gone beyond our original scope), I wouldn\u0027t have had a problem with that.\n\nIn addition, I think that Boris raises some good points that maybe we have API or design flaws that need to be addressed before our February API freeze.\n\nBut since I think you raised a valid point, I\u0027m going to call a vote of all data binding committers:\n\n+1 \u003d\u003d Resolved/LATER plus move the underlying design discussion to another bug.\n-1 \u003d\u003d Leave this bug open--we might *really* need to support this in order to be taken seriously as a data binding framework by anyone who has a legacy code base.\n\nMy vote is -1.\n",
    "See bug #69254 for the CComboViewer solution."
  ],
  "commentCreationDates": [
    "2005-12-02T21:32:11+01:00",
    "2005-12-02T22:11:06+01:00",
    "2005-12-05T19:27:19+01:00",
    "2005-12-05T19:30:29+01:00",
    "2005-12-05T20:35:37+01:00",
    "2005-12-05T20:56:02+01:00",
    "2005-12-05T20:59:26+01:00",
    "2005-12-05T23:15:53+01:00",
    "2005-12-07T23:14:15+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.jface.databinding.BindingException",
      "message": "Missing converter from class java.lang.String to class com.tpc.binding.test.bugs.ComboTest$Person",
      "elements": [
        {
          "method": "org.eclipse.jface.databinding.internal.CollectionBinding.\u003cinit\u003e",
          "source": "CollectionBinding.java:52"
        },
        {
          "method": "org.eclipse.jface.databinding.internal.DataBindingContext.bind",
          "source": "DataBindingContext.java:295"
        },
        {
          "method": "org.eclipse.jface.databinding.internal.DataBindingContext.bind",
          "source": "DataBindingContext.java:350"
        },
        {
          "method": "org.eclipse.jface.databinding.internal.DataBindingContext.bind",
          "source": "DataBindingContext.java:407"
        },
        {
          "method": "com.tpc.binding.test.bugs.ComboTest.bindControls",
          "source": "ComboTest.java:141"
        },
        {
          "method": "com.tpc.binding.test.bugs.ComboTest.main",
          "source": "ComboTest.java:98"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "119129",
      "date": "2005-12-02T21:32:11+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "enhancement"
    }
  ],
  "groupId": "119129",
  "bugId": "119129",
  "date": "2005-12-02T21:32:11+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "enhancement"
}