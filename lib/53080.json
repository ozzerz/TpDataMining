{
  "comments": [
    "build i0225, winxp, j9sc20031212\n\nAdding JM to CC for possible implications with runtime.\n\nI am unable to run a runtime workbench. I had the same problem yesterday with\ni0224, and i0219. Others had the same problem and I was under the understanding\nthat it required a synchronized fix release between runtime and pde and it would\nbe in today\u0027s build. \n\nWith today\u0027s build everyone else seems to work ok but I am still having problems.\n\nHere is my setup:\n- old workspace\n- as source from CVS:\n  - runtime, runtime.compatibility\n  - resources\n  - 3 osgi projects\n  - test harness, runtime tests, resources tests\n  - releng\n- as binary\n  - help, update.core, apache.ant\n- checked off everything in the target platform\n\nI have deleted my runtime-workbench dir and I get the same problem.\n\nI have deleted my /dev/.config dir and get the same problem.\n\nNote that I used to have update.configurator as source in my workspace and when\nI did, it was the plug-in which was referred to in the error message instead of\nosgi.util.\n\nIf we can\u0027t get a fix into a build today, is there a work-around that I could\nuse? Thanks.\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Feb 25, 2004 11:53:25.92\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.IllegalArgumentException: Bundle\nreference:file:/eclipse/target/prefs/plugins/org.eclipse.osgi.util/ not found\n\tat\norg.eclipse.core.runtime.adaptor.EclipseStarter.loadBasicBundles(EclipseStarter.java:228)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:90)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:279)\n\tat org.eclipse.core.launcher.Main.run(Main.java:742)\n\tat org.eclipse.core.launcher.Main.main(Main.java:581)",
    "Adding TJW to CC.\n\nI put a breakpoint in EclipseStarter.loadBasicBundles(). Here are the values for\nsome of the variables:\n\ninstallEntries\u003d\n[reference:file:C:/eclipse/dev/i0225/eclipse/plugins/org.eclipse.update.configurator_3.0.0/@3,\nreference:file:/eclipse/target/prefs/plugins/org.eclipse.osgi.util/,\nreference:file:/eclipse/target/prefs/plugins/org.eclipse.osgi.services/,\nreference:file:/eclipse/target/prefs/plugins/org.eclipse.core.runtime/@2]\n\nThen stepping into EclipseStarter.searchForBundle(), here are the variable\nvalues on the iteration that fails.\n\nname\u003d \"reference:file:/eclipse/target/prefs/plugins/org.eclipse.osgi.util/\"\nparent\u003d \"/eclipse/target/prefs/plugins\"\nfileLocation\u003d \"\\eclipse\\target\\prefs\\plugins\\org.eclipse.osgi.util\" \n\nThe problem seems that the following code on line 180\n   if (!fileLocation.isAbsolute())\nis evaluating to be true for fileLocation. This results in fileLocation being\nset to be the value below.\n\n\"\\eclipse\\target\\prefs\\plugins\\eclipse\\target\\prefs\\plugins\\org.eclipse.osgi.util\"\n\nIs it maybe the back-slashes that are causing problems because it seems to be an\nabsolute path to me??",
    "Spec for java.io.File\n\n    * Tests whether this abstract pathname is absolute.  The definition of\n    * absolute pathname is system dependent.  On UNIX systems, a pathname is\n    * absolute if its prefix is \u003ccode\u003e\"/\"\u003c/code\u003e.  On Microsoft Windows systems, a\n    * pathname is absolute if its prefix is a drive specifier followed by\n    * \u003ccode\u003e\"\\\\\"\u003c/code\u003e, or if its prefix is \u003ccode\u003e\"\\\\\"\u003c/code\u003e.\n\nI start Eclipse using -data \\eclipse\\target\\prefs\\plugins\\.\nWhen I changed it to c:\\eclipse\\target\\prefs\\plugins\\ it works ok.\n\nWhere does this bug report belong? Equinox?",
    "My read is that it is not a bug but a user error.  you spec\u0027d a relative path \nso we tack them together.  If you spec an absolute path (e.g., c:\\...) we use \nit.  What do you propose should happen?  Are you claiming that this used to \nwork and now doesn\u0027t?\n\n",
    "I should note that I use j9sc to run my dev and sunjdk1.4.2 to run my\nruntime-workbench.\n\nI\u0027ve never added a device to the beginning of my -data arg and its always worked. \n\nI would argue that a path with a leading slash is absolute. (according to the\nsecond part of the Windows part of the spec for #isAbsoute)",
    "not sure what we should do here.  fileLocation is a java.io.File.  We are just \ncalling isAbsolute().  We could put in a workaround I suppose...\n",
    "In a java app I tried:\n\nSystem.out.println(new java.io.File(\"\\\\eclipse\").isAbsolute());\nSystem.out.println(new java.io.File(\"c:/eclipse\").isAbsolute());\n\nsunjdk, ibm, and j9sc VMs all printed out \"false, true\". To me it sounds like a\nclass library bug but with all 3 VMs?....\n\n",
    "On windows is a path that begins with \"/\" or \"\\\\\" really absolute?  Doesn\u0027t it \ndepend on the current drive you are in?  If you are currently in the C:\\ drive \nand you say File(\"/temp\") then you get a file at C:\\temp.  But if you are \ncurrently are the D:\\ drive then you get a file at D:\\temp.  It seems like on \nwindows to have a completely absolute File you must use a drive letter.",
    "Looks like there might be a typo in the spec above? I forgot that you don\u0027t need\nto escape slashes in javadoc so those double-slahses are really double. (for UNC\npaths) Perhaps the first double-slash is supposed to be a single slash?\n\nI might be able to be convinced that /eclipse on Windows is relative. :-)\n\nEither way, this doesn\u0027t look like an Eclipse bug. (although we could improve\nthe error message and display the long bogus string to help users?)\n\nMarking as invalid.",
    "\\\\ is a UNC path.  I believe that that is absolute.",
    "Re-opening to move.",
    "Old Summary: \n  Can\u0027t run runtime workbench\n\nTalked to Jeff about this. We should investigate changing Location and making\nthe path absolute early on. After doing this, PDE would compute the plug-in\npaths (for passing into the launch config) correctly based on the new absolute\nversion of the path being passed in.\n\nOne trick we use in other places is:\n    new File(path).getAbsolutePath()",
    "This causes problems on macos.\nNote that -data is set with \"workspace\".\nIncreasing severity.",
    "*** Bug 53133 has been marked as a duplicate of this bug. ***",
    "fixed in HEAD",
    "*** Bug 53037 has been marked as a duplicate of this bug. ***",
    "verified fixed in i0302-1158"
  ],
  "commentCreationDates": [
    "2004-02-25T17:12:19+01:00",
    "2004-02-25T18:47:34+01:00",
    "2004-02-25T18:52:47+01:00",
    "2004-02-25T18:59:58+01:00",
    "2004-02-25T19:07:47+01:00",
    "2004-02-25T19:22:05+01:00",
    "2004-02-25T19:25:48+01:00",
    "2004-02-25T20:16:56+01:00",
    "2004-02-25T20:25:47+01:00",
    "2004-02-25T20:29:25+01:00",
    "2004-02-25T21:26:57+01:00",
    "2004-02-25T21:31:40+01:00",
    "2004-02-26T17:39:55+01:00",
    "2004-02-26T18:57:22+01:00",
    "2004-02-26T19:22:53+01:00",
    "2004-02-26T21:02:50+01:00",
    "2004-03-02T22:26:55+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Bundle reference:file:/eclipse/target/prefs/plugins/org.eclipse.osgi.util/ not found",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.loadBasicBundles",
          "source": "EclipseStarter.java:228"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:90"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:279"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:742"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:581"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "53080",
      "date": "2004-02-25T17:12:19+01:00",
      "product": "Equinox",
      "component": "Incubator",
      "severity": "critical"
    }
  ],
  "groupId": "53080",
  "bugId": "53080",
  "date": "2004-02-25T17:12:19+01:00",
  "product": "Equinox",
  "component": "Incubator",
  "severity": "critical"
}