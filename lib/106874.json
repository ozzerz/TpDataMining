{
  "comments": [
    "the folowing fails at runtime with a VerifyError.\nthe bug only occurs if the weaved in class is an inner class,\nthe pointcut is a set(* *.*) with the type and field name part left as \"*\" (a\npattern such as \"f*\" doesn\u0027t trigger the bug for instance),\nthe target of the pointcut is bounded to an advice declaration,\nand the \"-1.5\" switch is used when calling ajc.\n\n\npublic class Bug {\n  class Inner { // works if static\n    private Integer field;\n    void bug() {\n      field \u003d new Integer(0);\n    }\n  }\n\n  public static void main(String[] args) {\n    new Bug().new Inner().bug();\n  }\n}\n\naspect Aspect {\n  before(Object t) :\n    // target(Object) \u0026\u0026 // works\n    // this(t) \u0026\u0026 // works\n    target(t) \u0026\u0026 // fails\n    // set(* Bug.Inner.field) // works\n    // set(Integer Bug.Inner.*) // works\n    // get(* Bug.Inner.*) // works\n    set(* Bug.Inner.*) // fails\n  {}\n}\n\n\nException in thread \"main\" java.lang.VerifyError: (class: Bug$Inner, method:\n\u003cinit\u003e signature: (LBug;)V) Expecting to find object/array on stack\n        at Bug.main(Bug.java:10)",
    "just a quick note to say... we really appreciate the excellent bug reports that you submit with easily \nreproducable test cases. You\u0027re obviously pushing the new AspectJ support to the limits which is great. \nWhat is your project using aspectj for if you don\u0027t mind me asking ? ",
    "(In reply to comment #1)\nsee \"http://www.cs.mcgill.ca/~joerg/sel/research/optima.html\"\n\nit\u0027s a framework for multithreaded programming which allows application\nprogrammers to separate their work into (multithreaded) atomic components which\nget automatically undone if an exception is thrown past its boundary.\n\nwe decided to use aspectj because we needed to keep track of all the field\nmodifications in order to undo them, but I got carried away and used aspectj all\nover the place because I feel inter-type declarations allow me to modularize my\nwork better.\n\nI am also a big fan of the new syntactic features of java 1.5, which is why I am\nusing your new development branches intead of using abc, the alternative aspectj\ncompiler from my university.\n\nunfortunately, pushing the limits of aspectj has led me to discover the\nlimitations of its pointcut syntax. for now, I am bothered by the fact that\nalthough we can easily write code around all \"get(* *.*)\" statements inside \"*\nfoo(..)\" bodies, I could not figure a way of writing code around all \"* foo(..)\"\nexecutions containing \"get(* *.*)\" statements. as you may know, more powerful\nand programmable pointcut languages are being suggested by university folks (for\ninstance see \"www.st.informatik.tu-darmstadt.de\"), but available implementations\ndon\u0027t support my favorite 1.5 extensions, so aspectj still wins; keep up the\ngood work!",
    "for M4",
    "didn\u0027t realise it at the time, but pr109124 was a duplicate of this. I\u0027ve fixed\nthat bug, and just verified that it also fixes the problem reported here, so\nthis is now fixed and you can pick up the fix from the AspectJ download page\nlater on today.\n\nThanks, Adrian.\n\n*** This bug has been marked as a duplicate of 109124 ***"
  ],
  "commentCreationDates": [
    "2005-08-12T18:41:12+02:00",
    "2005-08-12T23:21:26+02:00",
    "2005-08-13T03:29:54+02:00",
    "2005-08-26T17:44:40+02:00",
    "2005-09-09T13:18:49+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.VerifyError",
      "message": "(class: Bug$Inner, method: \u003cinit\u003e signature: (LBug;)V) Expecting to find object/array on stack",
      "elements": [
        {
          "method": "Bug.main",
          "source": "Bug.java:10"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "106874",
      "duplicateId": "109124",
      "date": "2005-08-12T18:41:12+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "109124",
  "bugId": "106874",
  "duplicateId": "109124",
  "date": "2005-08-12T18:41:12+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}