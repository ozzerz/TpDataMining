{
  "comments": [
    "I have a .jj file that is processed using JavaCC.\nIf these files are compiled using command line javac\n(with debug on or off) or within Eclipse using Ant,\nthe program runs correctly. However, when compiled\nusing Eclipse, I get an error like the following:\n\nException in thread \"main\" java.lang.VerifyError: (class:\norg/rubato/rubettes/denotex/DenotexParser, method: basicModule signature:\n()Lorg/rubato/math/module/Module;) Illegal target of jump or branch\n\nHere DenotexParser is the file generated by JavaCC, basicModule\nis a method generated from a rule in the JavaCC file, that returns\nan object of class Module.",
    "Which Eclipse build are you using ? Also, can you attach the entire testcase \nwith steps ? A verify error sounds bad.\n\nPlease reopen defect once requested information is available.",
    "Currently I am running Build id: 200309170800.\nWhat do you mean by a testcase. What files/output\ndo you expect that I supply?",
    "We would like to get the source of this class:\norg.rubato.rubettes.denotex.DenotexParser\n\nIdeally it would be great if you could provide enough classes to be able to\ncompile without errors.",
    "I isolated a test case from the same error in the Help component.\nSee attach file. I will investigate to reduce it to a simple test case.",
    "Created an attachment (id\u003d6198)\nCompile this file using latest head contents\n\nWe might want to fix this bug before switching compiler for the build.",
    "Created an attachment (id\u003d6199)\nSimpler test case\n",
    "Increase severity since we have a test case to reproduce the problem and it\nseems that the Help component hits the same issue.\nHere are our bytecodes for the simpler test case:\n\n  final public void foo();\n    /* Stack: 1, Locals: 4 */\n    Code attribute:\n       0  iconst_0\n       1  istore_1\n       2  iconst_0\n       3  istore_2\n       4  iconst_0\n       5  istore_3\n       6  iload_1\n       7  tableswitch default: 25\n            case 0: 24\n      24  return\n      25  iload_3\n      26  ifeq 33\n      29  return\n      30  goto 82 \u003c\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d THIS IS ILLEGAL\n      33  iload_1\n      34  tableswitch default: 53\n            case 0: 52\n      52  return\n      53  iload_2\n      54  ifeq 61\n      57  return\n      58  goto 82  \u003c\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d THIS IS ILLEGAL\n      61  iload_1\n      62  tableswitch default: 81\n            case 0: 80\n      80  return\n      81  return",
    "Compiled with javac 1.4.1, we get:\n  /*  Method descriptor  #5 ()V */\n  final public void foo();\n    /* Stack: 1, Locals: 4 */\n    Code attribute:\n       0  iconst_0\n       1  istore_1\n       2  iconst_0\n       3  istore_2\n       4  iconst_0\n       5  istore_3\n       6  iload_1\n       7  lookupswitch default: 25\n            case 0: 24\n      24  return\n      25  iload_3\n      26  ifeq 30\n      29  return\n      30  iload_1\n      31  lookupswitch default: 49\n            case 0: 48\n      48  return\n      49  iload_2\n      50  ifeq 54\n      53  return\n      54  iload_1\n      55  lookupswitch default: 73\n            case 0: 72\n      72  return\n      73  return",
    "If we look at our bytecode, the two illegal goto are unreachable.",
    "We have a similar issue in help, with one of the JavaCC generated files.\nI will attach the file with problems, but if you want to run something to \nreproduce the problem:\n- extract org.apache.lucene from HEAD \n- run as \"Run-time Workbench\"\n- in the eclipse instance that comes up launch help Help-\u003eHelp Contents.\n- after help browser is showing the eclipse books, enter some text in the \nsearch entry field and hit go.\n- you\u0027ll see the error in the console:\n\njava.lang.VerifyError: (class: org/apache/lucene/demo/html/HTMLParser, method: \nArgValue signature: ()Lorg/apache/lucene/demo/html/Token;) Illegal target of \njump or branch\n\tat org.eclipse.help.internal.search.HTMLDocParser.openDocument\n(HTMLDocParser.java:74)\n\tat org.eclipse.help.internal.search.SearchIndex.addDocument\n(SearchIndex.java:112)\n\tat org.eclipse.help.internal.search.IndexingOperation.addDocuments\n(IndexingOperation.java:107)\n\tat org.eclipse.help.internal.search.IndexingOperation.execute\n(IndexingOperation.java:88)\n\tat org.eclipse.help.internal.search.SearchManager.updateIndex\n(SearchManager.java:148)\n\tat org.eclipse.help.internal.search.SearchManager.search\n(SearchManager.java:89)\n\tat org.eclipse.help.internal.search.SearchProgressMonitor$2.run\n(SearchProgressMonitor.java:144)\n\tat java.lang.Thread.run(Thread.java:536)",
    "Created an attachment (id\u003d6204)\nJavaCC generated file\n",
    "Created an attachment (id\u003d6205)\nSimplest test case ever\n",
    "Dorian,\n\nThe simpler test case is extracted from your example.\n\nThe goto is generated inside the if statement when there is a else statement and\nthe then statement is not considered as returning.\nI think this is where the bug is coming from. Debugging the simpler test case,\nit appears that the if statements that generates the illegal gotos are the ones\nwith a condition.\nif (b1) {\n\tif (true)\n\t\treturn;\n} else {\n\tswitch (i) {\n\t\tcase 0 :\n\t\t\tif (true)\n\t\t\t\treturn;\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tif (b) {\n\t\t\t\tif (true)\n\t\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tswitch (i) {\n\t\t\t\t\tcase 0 :\n\t\t\t\t\t\tif (true)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t}\n}\n\nThe then clause of this if\nif (b1) {\n\tif (true)\n\t\treturn;\n} else {\n\nis considered as not exiting, but it does. At least the code generation\nconsiders that it does. So we need to be consistent. The thenFlowInfo is\nconsidered as unreachable. Is this equivalent to a DEAD_END?",
    "Will investigate a fix. It is actually a consequence of another fix for bug \n40736.",
    "Bug 40736 was an incorrect diagnosis during flow analysis due to fake reachable \ncode in an IF statement. In order to fix it, I had changed the value of the \nflag #thenExit to be (flowInfo \u003d\u003d DEAD_END) instead of !flowInfo.isReachable().\nThis behavior gave the proper flow analysis behavior, but broke code gen which \ndid expect the flag to be position whenever the flow info isn\u0027t reachable (i.e. \ntruly unreachable or fake reachable).\n\nChange is being tested.",
    "Fix integrated. Will soon post a patch of JDTCore in our download area:\n\nhttp://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/jdt-core-\nhome/r3.0/main.html#updates\n\nRegression tests added.",
    "Confirming patch went out. Will release for integration rebuild.",
    "Verified.",
    "Regression test is InitializationTest#test166"
  ],
  "commentCreationDates": [
    "2003-09-08T13:47:48+02:00",
    "2003-09-08T15:05:47+02:00",
    "2003-09-23T15:52:54+02:00",
    "2003-09-23T21:34:06+02:00",
    "2003-09-23T22:02:14+02:00",
    "2003-09-23T22:03:36+02:00",
    "2003-09-23T22:14:38+02:00",
    "2003-09-23T22:19:20+02:00",
    "2003-09-23T22:20:45+02:00",
    "2003-09-23T22:22:20+02:00",
    "2003-09-23T22:43:00+02:00",
    "2003-09-23T22:45:03+02:00",
    "2003-09-23T22:57:34+02:00",
    "2003-09-23T22:59:09+02:00",
    "2003-09-23T23:06:23+02:00",
    "2003-09-23T23:33:01+02:00",
    "2003-09-23T23:40:14+02:00",
    "2003-09-24T09:41:16+02:00",
    "2003-10-14T17:14:05+02:00",
    "2003-10-18T14:00:26+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.VerifyError",
      "message": "(class: org/apache/lucene/demo/html/HTMLParser, method:  ArgValue signature: ()Lorg/apache/lucene/demo/html/Token;) Illegal target of  jump or branch",
      "elements": [
        {
          "method": "org.eclipse.help.internal.search.HTMLDocParser.openDocument",
          "source": "HTMLDocParser.java:74"
        },
        {
          "method": "org.eclipse.help.internal.search.SearchIndex.addDocument",
          "source": "SearchIndex.java:112"
        },
        {
          "method": "org.eclipse.help.internal.search.IndexingOperation.addDocuments",
          "source": "IndexingOperation.java:107"
        },
        {
          "method": "org.eclipse.help.internal.search.IndexingOperation.execute",
          "source": "IndexingOperation.java:88"
        },
        {
          "method": "org.eclipse.help.internal.search.SearchManager.updateIndex",
          "source": "SearchManager.java:148"
        },
        {
          "method": "org.eclipse.help.internal.search.SearchManager.search",
          "source": "SearchManager.java:89"
        },
        {
          "method": "org.eclipse.help.internal.search.SearchProgressMonitor$2.run",
          "source": "SearchProgressMonitor.java:144"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:536"
        }
      ],
      "number": 0,
      "commentIndex": 10,
      "bugId": "42692",
      "date": "2003-09-23T22:43:00+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "blocker"
    }
  ],
  "groupId": "42692",
  "bugId": "42692",
  "date": "2003-09-08T13:47:48+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "blocker"
}