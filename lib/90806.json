{
  "comments": [
    "Just seen this with Spacewar after doing right-click \u003e Convert file extensions\nand \"convert all to .java\":\n\njava.lang.NullPointerException\nat\norg.aspectj.asm.internal.ProgramElement.genHandleIdentifier(ProgramElement.java:474)\nat\norg.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.addUsesPointcutRelationsForNode(AsmHierarchyBuilder.java:372)\nat\norg.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:343)\nat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:167)\nat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1133)\nat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:314)\nat\norg.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:141)\nat\norg.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:81)\nat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:379)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:139)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:373)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:683)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:191)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:109)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:165)",
    "Couldn\u0027t quite recreate it via that route... but *this* route always works:\n\n1. Install the Telecom example\n2. Make billing.ajproperties the active configuration\n3. Open the billing aspect, change something simple (like adding a \u0027space\u0027\nsomewhere) and save, it will blow up with the NPE",
    "\nPutting breakpoints in the addUsesPointcutRelationsForNode() we discover the\nfailure happens when the node in question is \u0027after(Connection conn):\nTiming.endTiming(conn)\u0027 which is advice existing in the Billing aspect but\nreferring to a pointcut in the Timing aspect.\n\nArmed with that info, here is a much smaller project to demo the failure:\n\nX.aj contains:\npublic aspect X {\n  before(): Y.p() {}\n}\n\nY.aj contains:\npublic aspect Y {\n  pointcut p(): call(* *(..));\n}\n\nAdd a \u0027space\u0027 to X and save it, that causes an incremental build which then\ncauses it all to blow up in the same way.\n\nY can actually be a class or an aspect.\n\nThe actual bug is that if an incremental compile is performed, the\nresolvedpointcutdefinition in the referenced file (which is recovered from its\n.class file) will not have its sourcecontext set.  I\u0027ve changed the read() logic\nin resolvedpointcutdefinition to set it.\n\nThis then led to a problem with the test harness when I tried to add a test.  I\nadded X.aj and Y.aj then attempted to change X.aj and do a 2nd build - that is\nthe normal process we follow for incremental tests - AjState was thinking I had\nalso changed Y.aj for this 2nd build when I hadnt!\n\nThe problem is that because those files were *sooo* small, the compiler built\nthem super quick.  In order to determine what to build the 2nd time through, the\nlogic in AjState looks at the files on disk (X.aj,Y.aj) and compares their last\nmod times to the last successful build time.  What we actually did in AjState,\nbecause some systems don\u0027t have \u003c1000ms accuracy in the timers is change this\ncheck to \n\nif ((lastmodtime+1000)\u003e\u003d lastbuildtime) then file has changed and must be rebuilt.\n\nIn our case Y.aj got copied to the sandbox at some time n, for example:\n\n0000000100ms\n\nand the build completed in \u003c1second, so the last build time was:\n\n0000000700ms\n\nso our check \n\nif ((lastmodtime+1000)\u003e\u003d lastbuildtime)\n\nactually thinks that Y.aj has changed, when it hasn\u0027t!!\n\nThe solution is to pause for 1second after initially preparing the sandbox for\nthe first stage of an incremental compile test.  This ensures the lastBuildTime\nwill always be at least 1000ms beyond any last mod times on sandbox files :)\n\n\nFix checked in, waiting on build before closing bug.",
    "Fix available, see aspectj downloads page:\n\nBUILD COMPLETE -  build.471\nDate of build: 04/20/2005 20:56:23\nTime to build: 147 minutes 56 seconds\nLast changed: 04/20/2005 20:24:33\n\nI believe the fix made it for AJDT1.2.0M3"
  ],
  "commentCreationDates": [
    "2005-04-08T16:36:12+02:00",
    "2005-04-13T09:51:44+02:00",
    "2005-04-13T13:42:53+02:00",
    "2005-04-21T09:51:09+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.asm.internal.ProgramElement.genHandleIdentifier",
          "source": "ProgramElement.java:474"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.addUsesPointcutRelationsForNode",
          "source": "AsmHierarchyBuilder.java:372"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit",
          "source": "AsmHierarchyBuilder.java:343"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse",
          "source": "MethodDeclaration.java:167"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse",
          "source": "TypeDeclaration.java:1133"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse",
          "source": "CompilationUnitDeclaration.java:314"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild",
          "source": "AsmHierarchyBuilder.java:141"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit",
          "source": "AsmHierarchyBuilder.java:81"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit",
          "source": "EclipseFactory.java:379"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing",
          "source": "AjCompilerAdapter.java:139"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:373"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:683"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:191"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:109"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:165"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "90806",
      "date": "2005-04-08T16:36:12+02:00",
      "product": "AspectJ",
      "component": "IDE",
      "severity": "normal"
    }
  ],
  "groupId": "90806",
  "bugId": "90806",
  "date": "2005-04-08T16:36:12+02:00",
  "product": "AspectJ",
  "component": "IDE",
  "severity": "normal"
}