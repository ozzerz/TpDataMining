{
  "comments": [
    "All the example plugins depend on startup order of their prerequisites to work correctly. This dependency should not exist.",
    "Can you elaborate on startup order?",
    "When the JREFinder\u0027s Activator.start() is called, it is supposed to write a message to the console. However, when I click on the Inject menu in Jreinjector, I only see the message announcing that the DiscoveryRegistry has been started: the JREFinder\u0027s message does not show up. As a result, no JREs are actually added to Eclipse\u0027s list of JREs. I have verified that LazyStart is set to true in JREFinder\u0027s manifest. ",
    "\u003clemmy\u003e actually i think it might make more sense to let the toolbar action be part of the jrefinder and not part of the jreinjector.\n\u003clemmy\u003e that looks pretty much like the root cause for the problem to me.\n\u003crcjsuen\u003e so what happens after you find it\n\u003clemmy\u003e i envision the jreinjector more like a \"listener\" on discovery events.\n\u003clemmy\u003e it reacts to events but doesn\u0027t trigger them.\n\u003crcjsuen\u003e hm, makes sense",
    "I made the switch from having the GUI in Injector to having it in Finder. Now, it is Injector that doesn\u0027t start up while Finder starts fine (it starts when the Finder menu item is clicked).",
    "Currently jreinjector accesses the ECF discovery API via a programatically OSGi services. Non DS OSGi service aren\u0027t started automatically.\nA better way for jreinjector might be to use the ECF discovery ExtensionPoint instead of OSGi services. This way I assume the jreinjector gets started when ECF discovery is.\nUsing EP is no problem for discovery in layers above ECF discovery. Only below.",
    "I added the org.eclipse.ecf.startup extension to jreinjector but I get the following errors in the error logs when I try to run it as an Eclipse application:\n\nstartup class must implement org.eclipse.ui.IStartup\n\nBad extension specification\n\nUnable to execute early startup code for an extension\njava.lang.NoSuchMethodException: org.eclipse.core.runtime.IExtension.getDeclaringPluginDescriptor()\n\tat java.lang.Class.getDeclaredMethod(Unknown Source)\n...\n\nUnhandled Exception\n",
    "Based on a platform mailing list entry (http://dev.eclipse.org/newslists/news.eclipse.platform/msg55485.html), I think the correct way to get jreinjector to start is by having Discovery declare extension points for service listeners. The service consumer plugins can then create listener extensions and thus, the listeners will have to be run when they are needed by Discovery.",
    "I declared the extension point and had jreinjector provide an extension and voila! jreinjector now gets started. \n\n(Die bug die!!!)"
  ],
  "commentCreationDates": [
    "2007-07-12T21:45:51+02:00",
    "2007-07-13T07:47:50+02:00",
    "2007-07-13T15:28:36+02:00",
    "2007-07-14T15:45:57+02:00",
    "2007-07-18T17:30:06+02:00",
    "2007-07-19T09:43:29+02:00",
    "2007-07-19T17:22:06+02:00",
    "2007-07-19T17:37:53+02:00",
    "2007-07-19T23:38:38+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoSuchMethodException",
      "message": "org.eclipse.core.runtime.IExtension.getDeclaringPluginDescriptor()",
      "elements": [
        {
          "method": "java.lang.Class.getDeclaredMethod",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 6,
      "bugId": "196371",
      "date": "2007-07-19T17:22:06+02:00",
      "product": "SOC",
      "component": "Discovery",
      "severity": "normal"
    }
  ],
  "groupId": "196371",
  "bugId": "196371",
  "date": "2007-07-12T21:45:51+02:00",
  "product": "SOC",
  "component": "Discovery",
  "severity": "normal"
}