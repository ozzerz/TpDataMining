{
  "comments": [
    "Hi Mike,\nI solved this in the 0.8.0 release. Please enter a bugzilla to get it also back into 0.7.5.\n\ngr. Martin\n\nMichael Kanaley wrote:\n\u003e Hi Martin,\n\u003e   Did you file a bug for this issue below. I am interested in this fix (for \n\u003e the 0.7.5 releases) and want to track it so I know which version of Teneo it \n\u003e is supported in.\n\u003e \n\u003e Thanks,\n\u003e -mike\n\u003e \n\u003e \"Martin Taal\" \u003cmtaal@elver.org\u003e wrote in message \n\u003e news:f37kn7$71f$1@build.eclipse.org...\n\u003e\u003e There should be three, two for the joins to both tables (parent and child) \n\u003e\u003e (id and elt) and one for the id of the idbag entry itself (ID). My guess \n\u003e\u003e is that there is a nameclash between the id fields. Although one is \n\u003e\u003e lowercase (id) and the other uppercase (ID) hsqldb does not seem to make a \n\u003e\u003e difference.\n\u003e\u003e\n\u003e\u003e I encountered the same thing in a customer project I am doing right now. I \n\u003e\u003e have added an option to set the name of the idbag id element and this \n\u003e\u003e solved the issue for me.\n\u003e\u003e However, it will take a few weeks before I do a new release with this \n\u003e\u003e solution.\n\u003e\u003e\n\u003e\u003e gr. Martin\n\u003e\u003e\n\u003e\u003e Michael Kanaley wrote:\n\u003e\u003e\u003e The attached image indicates that there are only 2 generated, ID and ELT.\n\u003e\u003e\u003e That seems right - why does the Teneo commit fail?\n\u003e\u003e\u003e -mike\n\u003e\u003e\u003e\n\u003e\u003e\u003e\n\u003e\u003e\u003e\n\u003e\u003e\u003e \"Martin Taal\" \u003cmtaal@elver.org\u003e wrote in message \n\u003e\u003e\u003e news:f37a8j$38d$2@build.eclipse.org...\n\u003e\u003e\u003e\u003e Hi Mike,\n\u003e\u003e\u003e\u003e The mapping looks fine afaics. How many (and which) columns does the \n\u003e\u003e\u003e\u003e someclass_someotherclass table\n\u003e\u003e\u003e\u003e have?\n\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e gr. Martin\n\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e Michael Kanaley wrote:\n\u003e\u003e\u003e\u003e\u003e Hi Martin,\n\u003e\u003e\u003e\u003e\u003e   Sorry it was not clear from my first email but setting the @IdBag\n\u003e\u003e\u003e\u003e\u003e annotation does not work.\n\u003e\u003e\u003e\u003e\u003e Simply add the @IdBag annotation to the example I sent in the \n\u003e\u003e\u003e\u003e\u003e beginning. The\n\u003e\u003e\u003e\u003e\u003e mapping generated is:\n\u003e\u003e\u003e\u003e\u003e \u003cidbag name\u003d\"refs\" table\u003d\"someclass_someotherclass\" lazy\u003d\"true\"\n\u003e\u003e\u003e\u003e\u003e cascade\u003d\"all,delete-orphan\"\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e \u003ccollection-id column\u003d\"ID\" type\u003d\"long\"\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e \u003cgenerator class\u003d\"increment\"/\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e \u003c/collection-id\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e \u003ckey/\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e \u003cmany-to-many entity-name\u003d\"SomeOtherClass\" unique\u003d\"false\"/\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e \u003c/idbag\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e This does not look right but any attempt to set something does not \n\u003e\u003e\u003e\u003e\u003e work. Is\n\u003e\u003e\u003e\u003e\u003e there an @IdBag test suite I can look at?\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e And the exception thrown is:\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog trace\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: executing flush\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog trace\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: registering flush begin\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: Inserting collection: [SomeClass.refs#1]\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: fetching initial value: select max(ID) from \n\u003e\u003e\u003e\u003e\u003e someclass_someotherclass\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: about to open PreparedStatement (open PreparedStatements: 0, \n\u003e\u003e\u003e\u003e\u003e globally:\n\u003e\u003e\u003e\u003e\u003e 0)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: select max(ID) from someclass_someotherclass\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog trace\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: preparing statement\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: first free id: 1\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: about to close PreparedStatement (open PreparedStatements: 1,\n\u003e\u003e\u003e\u003e\u003e globally: 1)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:17 AM org.apache.commons.logging.impl.SLF4JLog trace\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: closing statement\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:18 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: about to open PreparedStatement (open PreparedStatements: 0, \n\u003e\u003e\u003e\u003e\u003e globally:\n\u003e\u003e\u003e\u003e\u003e 0)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:18 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: insert into someclass_someotherclass (id, ID, elt) values (?, ?, \n\u003e\u003e\u003e\u003e\u003e ?)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:18 AM org.apache.commons.logging.impl.SLF4JLog trace\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: preparing statement\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e May 25, 2007 10:13:18 AM org.apache.commons.logging.impl.SLF4JLog debug\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e FINE: could not insert collection: [SomeClass.refs#1] [insert into\n\u003e\u003e\u003e\u003e\u003e someclass_someotherclass (id, ID, elt) values (?, ?, ?)]\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e java.sql.SQLException: Column count does not match in statement [insert \n\u003e\u003e\u003e\u003e\u003e into\n\u003e\u003e\u003e\u003e\u003e someclass_someotherclass (id, ID, elt) values (?, ?, ?)]\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at org.hsqldb.jdbc.Util.throwError(Unknown Source)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at org.hsqldb.jdbc.jdbcPreparedStatement.\u003cinit\u003e(Unknown Source)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown Source)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:497)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:94)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:87)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.jdbc.AbstractBatcher.prepareBatchStatement(AbstractBatcher.java:218)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.persister.collection.AbstractCollectionPersister.recreate(AbstractCollectionPersister.java:1119)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.action.CollectionRecreateAction.execute(CollectionRecreateAction.java:26)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:248)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at \n\u003e\u003e\u003e\u003e\u003e org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:232)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at \n\u003e\u003e\u003e\u003e\u003e org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:143)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:338)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at test.TestBag.test(TestBag.java:97)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at java.lang.reflect.Method.invoke(Unknown Source)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestCase.runTest(TestCase.java:154)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestCase.runBare(TestCase.java:127)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestResult$1.protect(TestResult.java:106)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestResult.runProtected(TestResult.java:124)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestResult.run(TestResult.java:109)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestCase.run(TestCase.java:118)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestSuite.runTest(TestSuite.java:208)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at junit.framework.TestSuite.run(TestSuite.java:203)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e at\n\u003e\u003e\u003e\u003e\u003e org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e Also note that the Hibernate doc section you are referring to has \n\u003e\u003e\u003e\u003e\u003e changed to\n\u003e\u003e\u003e\u003e\u003e 14.3 for Hibernate 3.2.2 and it\u0027s content is slightly different.\n\u003e\u003e\u003e\u003e\u003e http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#queryhql-joins\n\u003e\u003e\u003e\u003e\u003e It no longer indicates that only one left joined collection is \n\u003e\u003e\u003e\u003e\u003e supported -\n\u003e\u003e\u003e\u003e\u003e but in practice, I have seen it only work with one collection.\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e Thanks,\n\u003e\u003e\u003e\u003e\u003e -mike\n\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e \"Martin Taal\" \u003cmtaal@elver.org\u003e wrote in message\n\u003e\u003e\u003e\u003e\u003e news:f35oj1$irq$1@build.eclipse.org...\n\u003e\u003e\u003e\u003e\u003e\u003e The syntax is: @IdBag (the source of the annotation is \n\u003e\u003e\u003e\u003e\u003e\u003e teneo.hibernate).\n\u003e\u003e\u003e\u003e\u003e\u003e But I am not sure if this will solve your problem. The hibernate docs \n\u003e\u003e\u003e\u003e\u003e\u003e say\n\u003e\u003e\u003e\u003e\u003e\u003e this about it (section 11.3):\n\u003e\u003e\u003e\u003e\u003e\u003e Note that, in the current implementation, only one collection role may \n\u003e\u003e\u003e\u003e\u003e\u003e be\n\u003e\u003e\u003e\u003e\u003e\u003e fetched in a query (everything else would be non-performant). Note \n\u003e\u003e\u003e\u003e\u003e\u003e also\n\u003e\u003e\u003e\u003e\u003e\u003e that the fetch construct may not be used in queries called using \n\u003e\u003e\u003e\u003e\u003e\u003e scroll()\n\u003e\u003e\u003e\u003e\u003e\u003e or iterate(). Finally, note that full join fetch and right join fetch \n\u003e\u003e\u003e\u003e\u003e\u003e are\n\u003e\u003e\u003e\u003e\u003e\u003e not meaningful.\n\u003e\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e\u003e Afaik the join behavior of an idbag is the same as for a bag. It is \n\u003e\u003e\u003e\u003e\u003e\u003e more\n\u003e\u003e\u003e\u003e\u003e\u003e the update and insert behavior which is better.\n\u003e\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e\u003e gr. Martin\n\u003e\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e\u003e Michael Kanaley wrote:\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e What is the syntax of the annotation?\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e I have attached an ecore as an example that is working with the \n\u003e\u003e\u003e\u003e\u003e\u003e\u003e \"refs\"\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e EAttribute of SomeClass using bags. I would like it to use IdBags\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e instead.\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e Also, as a side note, the real problem that I am trying to work \n\u003e\u003e\u003e\u003e\u003e\u003e\u003e around is\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e the following Hibernate exception when left joins on multiple bag\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e attributes are done.\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e \"org.hibernate.HibernateException: cannot simultaneously fetch \n\u003e\u003e\u003e\u003e\u003e\u003e\u003e multiple\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e bags\".\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e Will switching to idbags fix this issue?\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e Thanks,\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e -mike"
  ],
  "commentCreationDates": [
    "2007-06-05T21:56:41+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.sql.SQLException",
      "message": "Column count does not match in statement [insert  \u003e\u003e\u003e\u003e\u003e into \u003e\u003e\u003e\u003e\u003e someclass_someotherclass (id, ID, elt) values (?, ?, ?)] \u003e\u003e\u003e\u003e\u003e \u003e\u003e\u003e\u003e\u003e",
      "elements": [
        {
          "method": "org.hsqldb.jdbc.Util.throwError",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "191110",
      "date": "2007-06-05T21:56:41+02:00",
      "product": "EMFT",
      "component": "Teneo",
      "severity": "normal"
    }
  ],
  "groupId": "191110",
  "bugId": "191110",
  "date": "2007-06-05T21:56:41+02:00",
  "product": "EMFT",
  "component": "Teneo",
  "severity": "normal"
}