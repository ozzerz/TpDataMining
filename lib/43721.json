{
  "comments": [
    "OSX 10.2.8\nEclipse: 200309250800\n\nI am finding that the background compilation is hitting performance of the UI very badly, I am seeing \nlots of spinning beach balls not only when I save but during normal editing as well.\n\nI would like an option to do compilation in the foreground if possible. I could turn off autobuild but I \nreally like it.\n\nChanning",
    "More generally (at least on Windows 2000), all background activity seem to take \nall CPU.",
    "I am not seeing this behaviour on Windows 2000. We do run all background threads\nat a slightly lower priority (like the java index manager does), but it\u0027s\npossible that the threading implementation on Mac doesn\u0027t honour this (the Java\nthreading model makes no guarantees about thread scheduling or priorities). On\nWindows I see some UI performance degradation when there is alot of background\nactivity (for example, CVS auto-refresh and background build), but not enough to\nwant me to turn off background activity (IMO, some degradation is better than a\nmodal dialog that doesn\u0027t let me do *anything* while a build is happening).\n\nMike, what has your experience been on Mac so far?",
    "I\u0027m finding that this build has generally worse performance in the UI. Things like code completion is \nmuch slower - slow enough for the beach ball to appear waiting for the pop up to appear.\n\nI tried turning off autobuilding which helped a bit but not significantly so I am beginning to suspect \nsomething else may be responsible. Is there anything I could do to help establish what the trouble may \nbe?\n\nChanning",
    "I think I narrowed it down: it is only when the Progress view is visible (i.e. \nit is the top one on a stack of views) that I see the degradation in \nperformance.",
    "Not for me, progress view is not open.",
    "I entered bug 43758 for the problem with the Progress view on Win2000.",
    "I\u0027m confused. If the best you could do was *wait* before. Presumably, \"able to continue, but UI is \nbeing impacted\" is better.\n\nIn any case, we are now at the point where we can *begin* to look at those issues. It\u0027s clear that \ntuning for performance is still required.\n\nI\u0027m running a Mac. For me the performance has felt the same (or at least close enough that I \nhaven\u0027t noticed) when background jobs are *not* running and \"slow but acceptable\" when they are.\n",
    "For me, I am not able to continue. For example, after saving, for a about a second nothing happens, and \nthen i get a beach ball for up to 10 seconds. During normal editing I get frequent freezes/beach balls; \nand opening things like completion can take up to 10 seconds again.\n\nChanning",
    "So, you have no background jobs going and you open a file and it\u0027s significantly slower than it \nwas? That seems odd, because the code path should be the same as it was.\n\nIn any case, we *are* going to work on this. The rest of today is shot, here. We\u0027ll look at it next \nweek.\n\nWe\u0027re going to have to manage the fact that on really slow platforms, you can\u0027t effectively run \n*anything* in the background.\n",
    "I\u0027ll take a look at the specific cases you are seeing on my machine over the weekend. I can compare \nagainst the M3 build.",
    "I have no background jobs. Thanks for looking at it.\n\nChanning",
    "I have noticed several occurances this weekend of *significant* delays when switching between \neditor tabs. We\u0027re talking 20 seconds at least, and once \u003e 1min. The delays did not seem to \nbe coincident with background jobs according to the progress indicator. I was unable to find a \nrepeatable case to make them occur, but they seemed to be more prevalent when switching to \nsome *other* tab after a file had just been opened. [related to java indexing or some other system \njob?]\n\nWe need to understand what is going on here and fix it. The goal of the responsive UI work is to \nmake the UI *more* responsive.",
    "Since Channing is noticing a slowdown when there is no background activity, this\nmight be (at leasty partially) caused by the problem described in bug 43766. The\nUI thread is reconciling the compilation unit when I believe it shouldn\u0027t.  The\ntext team has fixed one of the cases (when breakpoints are added) and I\u0027m\nfollowing up on a second one.  This affects in particular the performance of\ndocument save and revert. \n\nI\u0027m not noticing a slowdown in content assist at all.  Channing, any details you\ncan provide would be useful: \n\n- is it on all content assists?\n- only on large files?\n- if you repeatedly invoke content assist at the same position, are subsequent\nattempts much faster than the first?",
    "I am currently seeing long delays when doing Synchronize with Repository... I saw this \nintermittently earlier today, but they seem to be happening every time now. ",
    "The main performance problem  I experience occurs during normal editing - when I am saving fairly \noften whilst coding. \nAfter saving, there is an initial pause which may be long enough for the wait cursor to appear, then a \nsmall break \u003c 1 second, and then a long period when the compilation is happening in the background \nbut the UI is frozen. The messages I see in the bottom left are \"Update for decoration completion\" and \n\"building workspace\". But that may be erroneous since the whole UI is locked up during this period.\n\nTo find out more, I started with a complete fresh install and rebuilt my project, which has improved \nthings since my first bug report. (Also, I had previously installed a plugin to edit velocity macro files \nwhich had terrible performance and I think was effecting what I was seeing.)\nContent assist is behaving normally now.\n\nFile size does not seem to be a factor but all my classes are fairly small.\n\nSorry that I cannot be more definite about whats happening, its hard to pin down.\n\nChanning",
    "After each save there is an auto-build. That should be taking approximately the amount of time \nthat it used to, and if you can\u0027t do anything while that is happening, that\u0027s not any different than \nbefore (when it was modal). However, the whole point of the exercise was to allow you to actually \n*do* something while the compile was happening. It may just be that Mac\u0027s aren\u0027t fast enough to \nsupport this.\n\nYou also indicate that there is an initial delay where events are not be processed (spinning ball). I\u0027d \nlike to know what is happening then.\n\nWhat kind of Mac are you running, Channing?\n\nDo you still have the progress view open? Do things behave differently with it closed?",
    "My mac is a power mac G4, 733 MHz processor, 1 Gb ram.\nI\u0027d be surprised if this was the problem since it happily runs oracle, mysql, tomcat and eclipse while I\u0027m \ndeveloping. Shutting them all down made no difference to eclipse performance though.\n\nHaving the progress view closed makes no difference.\n\nChanning",
    "Could this have anything to do with the new Synchronize view? I\u0027ve been having\nsimilar problems since installing 200309250800. They got particularly bad today\nwhen our CVS server was taken down; every time the synchronize view wanted to\nconnect to the server, I had to wait for the socket timeout before I got control\nback. Closing the synchronize view in the open perspective didn\u0027t help, however\n(I still get socket timeouts in the log, so I guess the synchronization is still\nrunning somewhere)\n\nLance",
    "Lance, that sounds like a different problem.  Please enter a new bug report\nagainst Platform VCM for that.",
    "Done: https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d43925\n\nLance",
    "I have just tried build 200309300800 and the UI is considerably slower than build 00309250800 - \nunusable now :-(\n\nI use the java browser perpective; just clicking on items in the projects, packages or types views takes \nup to 10 seconds just to highlight the selection.\n\nTurning off autobuild doesn\u0027t help so I suspect something else is wrong.\n\nI have noticed that eclipse now uses significantly more CPU (just visual inspection of a cp usage graph) \nthan it used to when doing anything.\n\nDouble clicking to open files also does not work so I\u0027ll raise bug but I suspect its related to this?\n\nChanning",
    "Channing, do you know how to generate java thread dumps on the mac?  It\u0027s just\nCtrl-Break in the Java console on windows, or kill -3 on most unixes.  If you\ncan, generate a few thread dumps from the periods when Eclipse is not\nresponsive. That would help me track down what\u0027s happening.  \n\nAlso, you might want to try the N20031002 to see how it behaves - we released a\nfew performance fixes yesterday. I don\u0027t know if they\u0027re related to the slowness\nyou\u0027re seeing, but it would help us narrow down the set of possible culprits. \nOf course, take the usual precautions of using a nightly build - don\u0027t trust it\nwith the only copy of your important data!",
    "John, I\u0027ll try what you suggest, although I\u0027m not sure how to generate a thread dump on macs - I\u0027ll look \nit up. \n\nChanning\n",
    "I\u0027m having difficulty starting eclipse on the command line, I tried this:\n\n% java -cp startup.jar org.eclipse.core.launcher.Main  -consolelog -showlocation -data workspace -\ndebug\nUsing the installation directory.\nStartup: using configuration file:/Users/channingwalton/java/eclipse.200309300800/.config/\nplatform.cfg\nBoot URL: file:/Users/channingwalton/java/eclipse.200309300800/plugins/org.eclipse.core.boot_3.0.0/\nboot.jar\nWorkspace location:\n   workspace\nDebug-Options:\n    file:/Users/channingwalton/java/eclipse.200309300800/.options\nInstall URL:\n    file:/Users/channingwalton/java/eclipse.200309300800/\n% \n\nThe stack in the log:\n!ENTRY org.eclipse.core.launcher 4 0 Oct 02, 2003 22:29:42.212\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.NoClassDefFoundError: org/eclipse/swt/widgets/Synchronizer\n        at java.lang.Class.getDeclaredConstructors0(Native Method)\n        at java.lang.Class.privateGetDeclaredConstructors(Class.java:1590)\n        at java.lang.Class.getConstructor0(Class.java:1762)\n        at java.lang.Class.newInstance0(Class.java:276)\n        at java.lang.Class.newInstance(Class.java:259)\n        at \norg.eclipse.core.internal.plugins.PluginDescriptor.createExecutableExtension(PluginDescriptor.java:138)\n        at \norg.eclipse.core.internal.plugins.PluginDescriptor.createExecutableExtension(PluginDescriptor.java:179)\n        at \norg.eclipse.core.internal.plugins.ConfigurationElement.createExecutableExtension(ConfigurationElement\n.java:103)\n        at org.eclipse.core.internal.runtime.InternalPlatform.loaderGetRunnable(InternalPlatform.java:589)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.internal.boot.InternalBootLoader.getRunnable(InternalBootLoader.java:471)\n        at org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:854)\n        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.launcher.Main.basicRun(Main.java:298)\n        at org.eclipse.core.launcher.Main.run(Main.java:764)\n        at org.eclipse.core.launcher.Main.main(Main.java:598)\n\n\nAny ideas?",
    "You don\u0027t have to start Eclipse from the command line in order to get thread dumps.\nStart Eclipse, and start the MacOS X Console.\nDo a \"ps -ax\". There should be two lines similar to these:\n\n  404  ??  S      0:00.06 /HD/Eclipse.app/Contents/MacOS/eclipse -psn_0_1441793\n  407  ??  S     11:48.01 /HD/Eclipse/eclipseI0930+/Eclipse.app/Contents/MacOS/java_swt \n-Xms30M -Xmx150M -cp /Volumes/HD/Ec\n\nUse the process id of the \"java_swt\" process (here 407) and do a \"kill -3 \u003cpid\u003e\"\nNow you should get a full thread dump on the console.",
    "Thanks Andre, I was looking in the wrong place for the thread dump.",
    "John, N20031002 didn\u0027t build properly and fails to launch as a result so I cannot test it.",
    "The M4 build is next week. I believe it is critical that we find and fix this problem before then.",
    "I don\u0027t think there is a single problem we are able to fix for M4.\nOn slower Macs where UI responsiveness is always at its limit, it does not\nseem to be a good idea to try to make the UI more responsive by running\nCPU and I/O intensive processing in the background.\nI suggest to introduce a new preference to disable background builds\n(but keep auto build).\n",
    "Hi Andre.\n\nMy Mac is a dual 800 MHz G4 Quicksilver and I see this problem so I don\u0027t think\nit\u0027s to do with \u0027slow\u0027 Macs (Channing will soon have a dual G5, so he might not\ncare any more :-)\n\nI strongly believe this problem is to do with repository synchronisation since I\nonly see it when I have the background synching enabled.\n\nRegards,\n\nLance",
    "I have a \u0027slow\u0027 G4 PB with 800MHz.\nWith the exception of background builds I have all background activities turned off.\nHowever, I cannot continue to work in foreground if the system is building in background.\nAnd even worse, background builds now take longer than foregound builds.\nSo I have to wait longer than before.",
    "Something else to add to the confusion: after my attempt with 200309300800 in which selecting items \nin the gui took up to 10 seconds, I tried again. This time its actually performing much better and I have \nbeen using this build reasonably happily if all background stuff is off.\n\nChanning",
    "Don\u0027t know if this helps but I managed to get a thread dump during a long freeze. I had just selected a \nProject in the Projects View to see all its problems (my filter for problems was selected resource and \nchildren).\n\nHere it is:\n\nFull thread dump Java HotSpot(TM) Client VM (1.4.1_01-24 mixed mode):\n\n\"Worker-166\" prio\u003d6 tid\u003d0x0a56f760 nid\u003d0xb1a9130 in Object.wait() [f058a000..f058ab70]\n\tat java.lang.Object.wait(Native Method)\n\tat org.eclipse.core.internal.jobs.WorkerPool.sleep(WorkerPool.java:108)\n\t- locked \u003c0x62ac2ac8\u003e (a org.eclipse.core.internal.jobs.WorkerPool)\n\tat org.eclipse.core.internal.jobs.WorkerPool.startJob(WorkerPool.java:134)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\n\"Worker-165\" prio\u003d6 tid\u003d0x0a7cad60 nid\u003d0xaf1bb80 in Object.wait() [f0e1b000..f0e1bb70]\n\tat java.lang.Object.wait(Native Method)\n\tat org.eclipse.core.internal.jobs.WorkerPool.sleep(WorkerPool.java:108)\n\t- locked \u003c0x62ac2ac8\u003e (a org.eclipse.core.internal.jobs.WorkerPool)\n\tat org.eclipse.core.internal.jobs.WorkerPool.startJob(WorkerPool.java:134)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\n\"Worker-164\" prio\u003d6 tid\u003d0x0a579250 nid\u003d0xaf1b8d0 in Object.wait() [f0488000..f0488b70]\n\tat java.lang.Object.wait(Native Method)\n\tat org.eclipse.core.internal.jobs.WorkerPool.sleep(WorkerPool.java:108)\n\t- locked \u003c0x62ac2ac8\u003e (a org.eclipse.core.internal.jobs.WorkerPool)\n\tat org.eclipse.core.internal.jobs.WorkerPool.startJob(WorkerPool.java:134)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\n\"Worker-161\" prio\u003d6 tid\u003d0x0a976980 nid\u003d0xb1c04c0 in Object.wait() [f080f000..f080fb70]\n\tat java.lang.Object.wait(Native Method)\n\tat org.eclipse.core.internal.jobs.WorkerPool.sleep(WorkerPool.java:108)\n\t- locked \u003c0x62ac2ac8\u003e (a org.eclipse.core.internal.jobs.WorkerPool)\n\tat org.eclipse.core.internal.jobs.WorkerPool.startJob(WorkerPool.java:134)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\n\"Thread-52\" daemon prio\u003d6 tid\u003d0x095e55d0 nid\u003d0x8a684a0 runnable [f0d9a000..f0d9ab70]\n\tat java.net.PlainSocketImpl.socketAccept(Native Method)\n\tat java.net.PlainSocketImpl.accept(PlainSocketImpl.java:353)\n\t- locked \u003c0x639f74e8\u003e (a java.net.PlainSocketImpl)\n\tat java.net.ServerSocket.implAccept(ServerSocket.java:439)\n\tat java.net.ServerSocket.accept(ServerSocket.java:410)\n\tat \norg.apache.tomcat.util.net.DefaultServerSocketFactory.acceptSocket(DefaultServerSocketFactory.java:10\n7)\n\tat org.apache.tomcat.util.net.PoolTcpEndpoint.acceptSocket(PoolTcpEndpoint.java:356)\n\tat org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:529)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:619)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Thread-51\" daemon prio\u003d6 tid\u003d0x095e4b90 nid\u003d0x8cd6480 in Object.wait() [f0d19000..f0d19b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:595)\n\t- locked \u003c0x63ba8108\u003e (a org.apache.tomcat.util.threads.ThreadPool$ControlRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Thread-50\" daemon prio\u003d6 tid\u003d0x095e4950 nid\u003d0x8c27730 in Object.wait() [f0c98000..f0c98b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:595)\n\t- locked \u003c0x63ba8180\u003e (a org.apache.tomcat.util.threads.ThreadPool$ControlRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Thread-49\" daemon prio\u003d6 tid\u003d0x095e4730 nid\u003d0x8244b00 in Object.wait() [f060b000..f060bb70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:595)\n\t- locked \u003c0x63ba81f8\u003e (a org.apache.tomcat.util.threads.ThreadPool$ControlRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"StandardManager[/help]\" daemon prio\u003d6 tid\u003d0x095de390 nid\u003d0x8f509f0 waiting on condition \n[f0a94000..f0a94b70]\n\tat java.lang.Thread.sleep(Native Method)\n\tat org.apache.catalina.session.StandardManager.threadSleep(StandardManager.java:810)\n\tat org.apache.catalina.session.StandardManager.run(StandardManager.java:869)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"MonitorRunnable\" daemon prio\u003d6 tid\u003d0x08e6a0f0 nid\u003d0x8a5dcd0 in Object.wait() \n[f0a13000..f0a13b70]\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on \u003c0x639f7468\u003e (a org.apache.tomcat.util.threads.ThreadPool$MonitorRunnable)\n\tat org.apache.tomcat.util.threads.ThreadPool$MonitorRunnable.run(ThreadPool.java:503)\n\t- locked \u003c0x639f7468\u003e (a org.apache.tomcat.util.threads.ThreadPool$MonitorRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Thread-47\" daemon prio\u003d6 tid\u003d0x08e69690 nid\u003d0x8a5da70 in Object.wait() [f0992000..f0992b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:595)\n\t- locked \u003c0x639f75d0\u003e (a org.apache.tomcat.util.threads.ThreadPool$ControlRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Thread-46\" daemon prio\u003d6 tid\u003d0x08e68c50 nid\u003d0x8f28d60 in Object.wait() [f0911000..f0911b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:595)\n\t- locked \u003c0x639f7648\u003e (a org.apache.tomcat.util.threads.ThreadPool$ControlRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Thread-45\" daemon prio\u003d6 tid\u003d0x08e68610 nid\u003d0x8f28b00 in Object.wait() [f0890000..f0890b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:595)\n\t- locked \u003c0x639f76c0\u003e (a org.apache.tomcat.util.threads.ThreadPool$ControlRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Thread-44\" daemon prio\u003d6 tid\u003d0x08e68380 nid\u003d0x8f50790 in Object.wait() [f070d000..f070db70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:595)\n\t- locked \u003c0x639f7738\u003e (a org.apache.tomcat.util.threads.ThreadPool$ControlRunnable)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"StandardManager[]\" daemon prio\u003d6 tid\u003d0x08e64190 nid\u003d0x8f48180 waiting on condition \n[f068c000..f068cb70]\n\tat java.lang.Thread.sleep(Native Method)\n\tat org.apache.catalina.session.StandardManager.threadSleep(StandardManager.java:810)\n\tat org.apache.catalina.session.StandardManager.run(StandardManager.java:869)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Java indexing\" daemon prio\u003d4 tid\u003d0x06194f00 nid\u003d0x5e7d9b0 in Object.wait() [f0509000..f0509b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:358)\n\t- locked \u003c0x62d2e818\u003e (a org.eclipse.jdt.internal.core.search.indexing.IndexManager)\n\tat java.lang.Thread.run(Thread.java:554)\n\n\"Signal Dispatcher\" daemon prio\u003d10 tid\u003d0x00106db0 nid\u003d0x83ab0 waiting on condition [0..0]\n\n\"Finalizer\" daemon prio\u003d8 tid\u003d0x00103170 nid\u003d0x833b0 in Object.wait() [f0203000..f0203b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:111)\n\t- locked \u003c0x62abb970\u003e (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:127)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)\n\n\"Reference Handler\" daemon prio\u003d10 tid\u003d0x001025e0 nid\u003d0x82820 in Object.wait() \n[f0182000..f0182b70]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:426)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:113)\n\t- locked \u003c0x62abb9d8\u003e (a java.lang.ref.Reference$Lock)\n\n\"main\" prio\u003d5 tid\u003d0x000f9de0 nid\u003d0xa0000dec runnable [bfffe000..bffff5e8]\n\tat org.eclipse.swt.widgets.Tree.getItems(Tree.java:564)\n\tat org.eclipse.swt.widgets.Tree.getItems(Tree.java:558)\n\tat org.eclipse.jface.viewers.TreeViewer.getChildren(TreeViewer.java:114)\n\tat org.eclipse.jface.viewers.AbstractTreeViewer.createAddedElement(AbstractTreeViewer.java:172)\n\tat org.eclipse.jface.viewers.AbstractTreeViewer.add(AbstractTreeViewer.java:156)\n\tat \norg.eclipse.ui.internal.progress.ProgressContentProvider$1.runInUIThread(ProgressContentProvider.java:\n269)\n\tat org.eclipse.ui.progress.UIJob$1.run(UIJob.java:81)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:102)\n\t- locked \u003c0x6215a6b8\u003e (a org.eclipse.swt.widgets.RunnableLock)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:2074)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1900)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2106)\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:2089)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:298)\n\tat org.eclipse.core.launcher.Main.run(Main.java:764)\n\tat org.eclipse.core.launcher.Main.main(Main.java:598)\n\n\"VM Thread\" prio\u003d5 tid\u003d0x001014e0 nid\u003d0x825a0 runnable \n\n\"VM Periodic Task Thread\" prio\u003d10 tid\u003d0x001064b0 nid\u003d0x83850 waiting on condition \n\"Exception Catcher Thread\" prio\u003d10 tid\u003d0x000fa8c0 nid\u003d0x79860 runnable ",
    "Channing, stack traces like this are very useful. Feel free to attach more when\nyou get further freezes so we can figure out if there is a pattern.  The bug\nreport will be more readable if you create attachments for these traces rather\nthan pasting directly into the comment field (use the \"Create a New Attachment\"\nlink near the top).\n\nThere are a half dozen tomcat threads running, I assume this is due to some\nadditional plugins and not one of the base SDK plugins.  In any case they all\nappear to be idle so it shouldn\u0027t have too much effect.\n\nThanks for bearing with us!",
    "Hi,\nI will attach future stacks - sorry about that.\n\nI have no plugin that uses tomcat - is it the help system? I am using tomcat on the command line \nthough but that shoudn\u0027t have anything to do with it (unless its OSX shared library thing?)\n\nI have been using the latest integration release for the last couple of days with synchronization turned \noff and haven\u0027t had any real performance problems. I am going to turn it back on and see what happens.\n\nChanning",
    "Suspect tomcat threads may be from help.",
    "Created an attachment (id\u003d6357)\nThread dump during and after UI locked up\n\nThe attached is the thread dump during and just after the UI locked up for.\nEclipse returned to the state I first experienced with sever delays switching\nbetween editors and editing in general - wait cursors for just about anything.\n\nchanning",
    "I realised that I should qualify what I mean by \u0027after UI lock up\u0027. After the UI has locked up, I can move \nthe cursor, and perhaps scroll lists without trouble. If I start to type, move to another editor, open new \nfiles, then the UI will lock for a while again.\n\nChanning",
    "Could the Java editor be waiting on a resource owned by the background build?",
    "I turned the autobuild off and it made no difference to me.",
    "I think this is just an example of WAAAAY to much work being done when it\nshouldn\u0027t be.  Here is the chain of events causing the \"freeze\" in Channing\u0027s\nlatest trace:\n\n- user double clicks in editor\n- selection change is fired to all listeners in the workbench page\n- marker view listens to selection change\n- marker view refilters itself, to show only markers in the current selection\n- since the current selection is a text selection, marker view uses the editor\ninput as the selection -- so it\u0027s the java file (compilation unit)\n- there is an adapter so that selections can tell the marker view if they\ncontain a given marker\n- compilation unit is asked if it contains a given marker\n- a java model object is created to represent the compilation unit\n- first, the java model checks if the compilation unit is on the classpath...\nthis involves parsing the java file to determine the package name.\n\nSo, what we have is the possibility of a java file being parsed whenever the\nselection changes in an editor.\n\nI am continuing to investigate to decide where this performance bug should go. \nChanning, in the meantime, try either closing the tasks/problems views, or\nturning off the filtering based on selection.  This appears to be what\u0027s killing\nyou.",
    "John, thats it! If i turn off filtering the performance is good, turn it on and its bad. It didn\u0027t even occur to \nme that it might be the problem :-)",
    "I\u0027ve just discovered it was reported by someone else and just fixed a couple of\nhours ago!  See bug 44069.  Apparently a fix is in for M4.\n\nI\u0027m going to leave this open for now.  Channing, thanks again for the stack\ntraces.  If you have any more performance problems you can add more details here\nand I\u0027ll investigate.",
    "Excellent, I hope thats it. Performance feels quite good now.\n\nChanning",
    "Philippe, is the parsing really necessary to obtain a CU element?",
    "No parsing is involved here. It is simply tokenizing the file name when \ncreating a unit handle. The rational is that it wants to eliminate up front \ncreation of invalid unit handles (name !\u003d identifier). I would love to get rid \nof this sanity check, but this was already in 1.0... ",
    "Sorry, is it tokenizing the file name (no file reading involved) or tokenizing \nthe package declaration (have to read the file)?",
    "Just the file name ",
    "Sorry, I was fooled because I saw the Scanner was being invoked in the stack\ntrace. Still seems like a lot of work... I\u0027ll try some profiling with today\u0027s\nbuild to see where the bulk of the time is going when the marker view is\nfiltered on selection.",
    "The degradation problem with the Problems View was in build I20030930+ only \n(so it would not have been present in 20030925) (bug 39436).  However, there \nis another problem with the filtering mechanism in the Problems view that \nwould cause performance issues (bug 44443 - Problems View should \u0027filter\u0027 more \nefficiently).  This problem has been around since the creation of the Problems \nview.\n\n ",
    "I posted a patch of JDTCore so as to not validate file names when creating \nhandles (also see bug 44462). This isn\u0027t released in M4. Will be for early M5.\n\nSee patch posted in update area:\nhttp://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/jdt-core-\nhome/r3.0/main.html#updates\n",
    "Just to clarify, the patch will avoid all scanning issues which were visible in \nthe thread dump. Hope this helps.",
    "Profiling of the behaviour in M4 shows that the main problem with the problems\nview is fixed.  I\u0027m seeing minimal time updating the marker view on selection\nchanges in the java editor.  Philippe\u0027s optimization is no longer needed in this\ncase since the code path that it optimizes is no longer being hit as often. \nThere are still times where the marker view is doing redundant refreshes (bug\n44443 has more details), but it isn\u0027t showing up in this case.\n\nI did some more profiling, and found that in certain situations the key binding\nfiltering is creating almost 1 MB of garbage per key press (entered bug 44864\nfor this).  It\u0027s likely that this has also been contributing to general slowness\nin the editor.\n\nI\u0027m going to close this particular bug since it no longer has a clear case\nshowing regression.\n\nChanning (and others): please enter new bug reports if/when you experience new\nslow spots on the Mac.  The stack traces help greatly in narrowing down the issues."
  ],
  "commentCreationDates": [
    "2003-09-26T10:21:11+02:00",
    "2003-09-26T15:32:43+02:00",
    "2003-09-26T17:52:16+02:00",
    "2003-09-26T17:57:56+02:00",
    "2003-09-26T18:02:27+02:00",
    "2003-09-26T18:10:02+02:00",
    "2003-09-26T18:22:45+02:00",
    "2003-09-26T19:16:14+02:00",
    "2003-09-26T19:24:15+02:00",
    "2003-09-26T19:51:33+02:00",
    "2003-09-26T19:55:46+02:00",
    "2003-09-26T21:12:36+02:00",
    "2003-09-29T16:19:21+02:00",
    "2003-09-29T21:46:57+02:00",
    "2003-09-29T22:04:52+02:00",
    "2003-09-30T00:29:05+02:00",
    "2003-09-30T01:56:32+02:00",
    "2003-09-30T09:07:54+02:00",
    "2003-09-30T17:44:09+02:00",
    "2003-09-30T17:52:53+02:00",
    "2003-09-30T18:39:49+02:00",
    "2003-10-01T10:46:53+02:00",
    "2003-10-02T15:57:35+02:00",
    "2003-10-02T22:54:50+02:00",
    "2003-10-02T23:37:09+02:00",
    "2003-10-03T00:23:28+02:00",
    "2003-10-03T00:27:42+02:00",
    "2003-10-03T00:32:31+02:00",
    "2003-10-03T15:42:44+02:00",
    "2003-10-03T17:11:06+02:00",
    "2003-10-03T17:30:23+02:00",
    "2003-10-03T17:54:24+02:00",
    "2003-10-03T18:05:53+02:00",
    "2003-10-04T18:38:02+02:00",
    "2003-10-06T15:52:39+02:00",
    "2003-10-06T16:11:04+02:00",
    "2003-10-06T20:33:41+02:00",
    "2003-10-07T22:19:10+02:00",
    "2003-10-07T22:21:58+02:00",
    "2003-10-08T00:32:05+02:00",
    "2003-10-08T00:45:23+02:00",
    "2003-10-08T00:58:42+02:00",
    "2003-10-08T01:12:08+02:00",
    "2003-10-08T01:21:17+02:00",
    "2003-10-08T01:24:09+02:00",
    "2003-10-08T05:44:30+02:00",
    "2003-10-08T09:27:52+02:00",
    "2003-10-08T14:54:13+02:00",
    "2003-10-08T15:29:43+02:00",
    "2003-10-08T15:49:40+02:00",
    "2003-10-08T16:48:10+02:00",
    "2003-10-10T18:43:37+02:00",
    "2003-10-10T23:51:21+02:00",
    "2003-10-15T01:13:42+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "org/eclipse/swt/widgets/Synchronizer",
      "elements": [
        {
          "method": "java.lang.Class.getDeclaredConstructors0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.privateGetDeclaredConstructors",
          "source": "Class.java:1590"
        },
        {
          "method": "java.lang.Class.getConstructor0",
          "source": "Class.java:1762"
        },
        {
          "method": "java.lang.Class.newInstance0",
          "source": "Class.java:276"
        },
        {
          "method": "java.lang.Class.newInstance",
          "source": "Class.java:259"
        },
        {
          "method": "org.eclipse.core.internal.plugins.PluginDescriptor.createExecutableExtension",
          "source": "PluginDescriptor.java:138"
        },
        {
          "method": "org.eclipse.core.internal.plugins.PluginDescriptor.createExecutableExtension",
          "source": "PluginDescriptor.java:179"
        },
        {
          "method": "org.eclipse.core.internal.plugins.ConfigurationElement.createExecutableExtension",
          "source": "ConfigurationElement .java:103"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.loaderGetRunnable",
          "source": "InternalPlatform.java:589"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.getRunnable",
          "source": "InternalBootLoader.java:471"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:854"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:461"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:298"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:764"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:598"
        }
      ],
      "number": 0,
      "commentIndex": 24,
      "bugId": "43721",
      "date": "2003-10-02T23:37:09+02:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    }
  ],
  "groupId": "43721",
  "bugId": "43721",
  "date": "2003-09-26T10:21:11+02:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "major"
}