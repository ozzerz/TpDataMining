{
  "comments": [
    "This works fine without -emacssym, but dies with it:\n\naspect Foo {\n  before() : call(void foo()) { }\n  void Bar.bar() { foo(); }\n}\nclass Bar {\n  void foo() { }\n}\n\nmunger: (before: (persingleton(Foo) \u0026\u0026 call(ExactTypePattern(void) foo()))-\u003evoid Foo.ajc$before$Foo$f()) on method-call(void Bar.foo())\ntrouble in: \npublic class Foo extends java.lang.Object:\n  TypeMungers: [(BcelTypeMunger ResolvedTypeMunger(Method, void Bar.bar()))]\n  public static final Foo ajc$perSingletonInstance\n  static void \u003cclinit\u003e():\n                    INVOKESTATIC Foo.ajc$clinit ()V   (line 1)\n    staticinitialization(void Foo.\u003cclinit\u003e())\n    |               RETURN\n    staticinitialization(void Foo.\u003cclinit\u003e())\n  end static void \u003cclinit\u003e()\n\n  void \u003cinit\u003e():\n                    ALOAD_0     // Foo this   (line 1)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void Foo.\u003cinit\u003e())\n    |               RETURN\n    constructor-execution(void Foo.\u003cinit\u003e())\n  end void \u003cinit\u003e()\n\n  public void ajc$before$Foo$f()    AdviceAttribute(before, call(ExactTypePattern(void) foo()), 0, 15)\n:\n    advice-execution(void Foo.ajc$before$Foo$f())\n    |               RETURN   (line 2)\n    advice-execution(void Foo.ajc$before$Foo$f())\n  end public void ajc$before$Foo$f()\n\n  public static void ajc$interMethod$Foo$Bar$bar(Bar)    EffectiveSignatureAttribute(void Bar.bar(), method-execution)\n:\n    method-execution(void Bar.bar())\n    |               ALOAD_0     // Bar arg0   (line 3)\n    | method-call(void Bar.foo())\n    | |             GETSTATIC Foo.ajc$perSingletonInstance LFoo;\n    | |             INVOKEVIRTUAL Foo.ajc$before$Foo$f ()V\n    | |             INVOKEVIRTUAL Bar.foo ()V\n    | method-call(void Bar.foo())\n    |               RETURN\n    method-execution(void Bar.bar())\n  end public static void ajc$interMethod$Foo$Bar$bar(Bar)\n\n  public static void ajc$interMethodDispatch1$Foo$Bar$bar(Bar)    EffectiveSignatureAttribute(void Bar.bar(), method-call)\n:\n                    ALOAD_0     // Bar arg0\n                    INVOKEVIRTUAL Bar.ajc$interMethodDispatch2$$bar ()V\n                    RETURN\n  end public static void ajc$interMethodDispatch1$Foo$Bar$bar(Bar)\n\n  public static Foo aspectOf()    org.aspectj.weaver.AjAttribute$AjSynthetic@f8f7db\n:\n                    GETSTATIC Foo.ajc$perSingletonInstance LFoo;\n                    ARETURN\n  end public static Foo aspectOf()\n\n  public static boolean hasAspect()    org.aspectj.weaver.AjAttribute$AjSynthetic@5856a5\n:\n                    GETSTATIC Foo.ajc$perSingletonInstance LFoo;\n                    IFNULL L0\n                    ICONST_1\n                    IRETURN\n                L0: ICONST_0\n                    IRETURN\n  end public static boolean hasAspect()\n\n  private static void ajc$clinit()    org.aspectj.weaver.AjAttribute$AjSynthetic@c39a20\n:\n                    NEW Foo\n                    DUP\n                    INVOKESPECIAL Foo.\u003cinit\u003e ()V\n                    PUTSTATIC Foo.ajc$perSingletonInstance LFoo;\n                    RETURN\n  end private static void ajc$clinit()\nend public class Foo\nException thrown from AspectJ 1.1b2\n\nThis might be logged as a bug already -- see the bug database at\n  http://dev.eclipse.org (product: AspectJ, component: compiler)\n\nBugs for exceptions thrown have titles File:line from the top stack, \ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nnull\njava.lang.NullPointerException\n\tat org.aspectj.weaver.AsmAdaptor.findOrCreateBodyNode(Unknown Source)\n\tat org.aspectj.weaver.AsmAdaptor.getNode(Unknown Source)\n\tat org.aspectj.weaver.AsmAdaptor.noteMunger(Unknown Source)\n\tat org.aspectj.weaver.Shadow.implementMungers(Unknown Source)\n\tat org.aspectj.weaver.Shadow.implement(Unknown Source)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(Unknown Source)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(Unknown Source)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(Unknown Source)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles(Unknown Source)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(Unknown Source)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(Unknown Source)\n\tat org.aspectj.tools.ajc.Main.run(Unknown Source)\n\tat org.aspectj.tools.ajc.Main.runMain(Unknown Source)\n\tat org.aspectj.tools.ajc.Main.main(Unknown Source)\n\n\n1 fail|abort",
    "This bug just touched on the surface of many problems with structure model \ngeneration.  The worst of those bugs are now all fixed in the current tree.  \nThe testcase for these is to run the standard test suite with the -emacssym \nflag so that model will be generated for every test case in the suite.\n\nThis bug shows up in all of the ide support implementations, and using -\nemacssym is a good way of testing all of them minimally."
  ],
  "commentCreationDates": [
    "2003-01-09T02:22:48+01:00",
    "2003-01-14T21:43:59+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.AsmAdaptor.findOrCreateBodyNode",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.AsmAdaptor.getNode",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.AsmAdaptor.noteMunger",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implementMungers",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "29186",
      "date": "2003-01-09T02:22:48+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "29186",
  "bugId": "29186",
  "date": "2003-01-09T02:22:48+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}