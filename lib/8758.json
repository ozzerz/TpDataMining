{
  "comments": [
    "This is the log...\n\n\nLog: Mon Jan 28 13:54:55 MSK 2002\n4 org.eclipse.jdt.ui 1 Internal Error\norg.eclipse.core.internal.resources.ResourceException: Errors during build.\n    at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:222)\n    at\norg.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:701)\n    at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1237)\n    at\norg.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:78)\n    at\norg.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:296)\n    at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:249)\n    at org.eclipse.jface.wizard.WizardDialog.run(WizardDialog.java:713)\n    at\norg.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizard.performFinish(NewProjectCreationWizard.java:63)\n    at org.eclipse.jface.wizard.WizardDialog.finishPressed(WizardDialog.java:570)\n    at org.eclipse.jface.wizard.WizardDialog.buttonPressed(WizardDialog.java:311)\n    at org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:344)\n    at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:85)\n    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)\n    at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)\n    at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)\n    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)\n    at org.eclipse.jface.window.Window.runEventLoop(Window.java:536)\n    at org.eclipse.jface.window.Window.open(Window.java:523)\n    at org.eclipse.ui.actions.NewProjectAction.run(NewProjectAction.java:96)\n    at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)\n    at\norg.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)\n    at\norg.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)\n    at\norg.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)\n    at\norg.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)\n    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)\n    at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)\n    at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)\n    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)\n    at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:844)\n    at org.eclipse.ui.internal.Workbench.run(Workbench.java:827)\n    at\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)\n    at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)\n    at java.lang.reflect.Method.invoke(Native Method)\n    at org.eclipse.core.launcher.Main.basicRun(Main.java:151)\n    at org.eclipse.core.launcher.Main.run(Main.java:502)\n    at org.eclipse.core.launcher.Main.main(Main.java:362)\n    2 org.eclipse.core.resources 566 Errors during build.\n        2\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cchildren\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n        2 org.eclipse.jdt.core 75 java.lang.NullPointerException encountered\nwhile running org.eclipse.jdt.internal.core.newbuilder.JavaBuilder.\njava.lang.NullPointerException\n    at\norg.eclipse.jdt.internal.compiler.lookup.BlockScope.emulateOuterAccess(BlockScope.java:347)\n    at\norg.eclipse.jdt.internal.compiler.ast.SingleNameReference.manageEnclosingInstanceAccessIfNecessary(SingleNameReference.java:558)\n    at\norg.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseCode(SingleNameReference.java:119)\n    at\norg.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:31)\n    at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)\n    at\norg.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:59)\n    at\norg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analyseCode(AbstractMethodDeclaration.java:79)\n    at\norg.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:145)\n    at\norg.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.analyseCode(QualifiedAllocationExpression.java:41)\n    at\norg.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:35)\n    at\norg.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.analyseCode(ConstructorDeclaration.java:79)\n    at\norg.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:208)\n    at\norg.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:345)\n    at\norg.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:67)\n    at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:456)\n    at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:261)\n    at\norg.eclipse.jdt.internal.core.newbuilder.AbstractImageBuilder.compile(AbstractImageBuilder.java:212)\n    at\norg.eclipse.jdt.internal.core.newbuilder.AbstractImageBuilder.compile(AbstractImageBuilder.java:188)\n    at\norg.eclipse.jdt.internal.core.newbuilder.BatchImageBuilder.build(BatchImageBuilder.java:49)\n    at\norg.eclipse.jdt.internal.core.newbuilder.JavaBuilder.buildAll(JavaBuilder.java:117)\n    at\norg.eclipse.jdt.internal.core.newbuilder.JavaBuilder.build(JavaBuilder.java:68)\n    at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:358)\n    at\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:821)\n    at org.eclipse.core.runtime.Platform.run(Platform.java:395)\n    at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:116)\n    at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:181)\n    at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:191)\n    at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:140)\n    at\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:821)\n    at org.eclipse.core.runtime.Platform.run(Platform.java:395)\n    at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:154)\n    at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:216)\n    at\norg.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:701)\n    at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1237)\n    at\norg.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:78)\n    at\norg.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:296)\n    at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:249)\n    at org.eclipse.jface.wizard.WizardDialog.run(WizardDialog.java:713)\n    at\norg.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizard.performFinish(NewProjectCreationWizard.java:63)\n    at org.eclipse.jface.wizard.WizardDialog.finishPressed(WizardDialog.java:570)\n    at org.eclipse.jface.wizard.WizardDialog.buttonPressed(WizardDialog.java:311)\n    at org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:344)\n    at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:85)\n    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)\n    at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)\n    at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)\n    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)\n    at org.eclipse.jface.window.Window.runEventLoop(Window.java:536)\n    at org.eclipse.jface.window.Window.open(Window.java:523)\n    at org.eclipse.ui.actions.NewProjectAction.run(NewProjectAction.java:96)\n    at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)\n    at\norg.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)\n    at\norg.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)\n    at\norg.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)\n    at\norg.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)\n    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)\n    at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)\n    at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)\n    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)\n    at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:844)\n    at org.eclipse.ui.internal.Workbench.run(Workbench.java:827)\n    at\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)\n    at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)\n    at java.lang.reflect.Method.invoke(Native Method)\n    at org.eclipse.core.launcher.Main.basicRun(Main.java:151)\n    at org.eclipse.core.launcher.Main.run(Main.java:502)\n    at org.eclipse.core.launcher.Main.main(Main.java:362)\n        2\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c/children\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d",
    "Could you produce ?\n1- the build number of your Eclipse SDK\n2- a source sample exposing this defect \n\n",
    "There should be an error logged against the offending compilation unit, which \nmessage should be the stack trace from the .log.\n\nThis might help you to narrow the offending source. Good luck !",
    "build number: 20011219",
    "Could you find the source of the offending compilation unit and paste it in ?\nThis problem occurs while performing the innerclass emulation, and there should \nbe a compilation error on this offending unit, which message is the stack trace \nwhich was in the log.\n\nI am interested in the source of the unit so as to reproduce it.",
    "I will give you test class in near future but now I resposible saying that - it\nhave about 10 inner classes and third level of innerness.\n",
    "Seems like a good stress test of innerclasses.\nPlease just send me the whole thing, I will give it a try.\n\n",
    "Deferring since waiting for a testcase.",
    "import java.awt.*;\nimport java.awt.event.*;\nimport java.awt.font.*;\nimport java.awt.geom.*;\n\nimport java.util.*;\n\nimport javax.swing.*;\nimport javax.swing.table.*;\nimport javax.swing.border.*;\nimport javax.swing.plaf.ToolTipUI;\nimport javax.swing.plaf.ComponentUI;\n\n\npublic class FTOchartFrame\n{\n\n\t//constants\n\tprivate static final int GENERATE_RANDOM_DEMO \u003d 1;\n\tprivate static final int GENERATE_CUSTOM_DEMO \u003d 2;\n\n\t/** Field \u003ccode\u003eDEMO_LENGTH\u003c/code\u003e */\n\tprotected static int DEMO_LENGTH \u003d 5;\n\n\t//data\n\n\t/** Field \u003ccode\u003eparent\u003c/code\u003e */\n\tprivate java.util.List pieData \u003d new ArrayList();\n\tprivate FTOpiePiece[]  workCopy;\n\tprivate Map            content \u003d new HashMap();\n\n\t//components\n\tprivate JSplitPane split;\n\n\t/** Field \u003ccode\u003echart\u003c/code\u003e */\n\tprotected FTO2dChart chart;\n\n\t/** Field \u003ccode\u003elegend\u003c/code\u003e */\n\tprotected FTOchartLegend legend;\n\n\t//formatting\n\n\t/** Field \u003ccode\u003elegendWidth\u003c/code\u003e */\n\tprotected int legendWidth \u003d 100;\n\n\t/** Field \u003ccode\u003eminSize\u003c/code\u003e */\n\tprotected int minSize \u003d 125;\n\n\t/** Field \u003ccode\u003em_backgroundColor\u003c/code\u003e */\n\tpublic static Color m_backgroundColor;\n\n\t//options\n\n\n\t/** Field \u003ccode\u003eisLegendVisible\u003c/code\u003e */\n\tprotected boolean isLegendVisible \u003d true;\n\n\t/** Field \u003ccode\u003eisEllipseEnabled\u003c/code\u003e */\n\tpublic boolean isEllipseEnabled \u003d false;\n\n\t/** Field \u003ccode\u003eisDataModified\u003c/code\u003e */\n\tpublic boolean  isDataModified   \u003d true;\n\tprivate boolean isInitializing   \u003d true;\n\tprivate boolean isCallbackNeeded \u003d true;\n\n\t//for test\n\n\t/** Field \u003ccode\u003etest\u003c/code\u003e */\n\tThread test;\n\n\tprotected FTOchartFrame( int mode )\n\t{\n\n\n\t\tThread test \u003d new Thread( new Runnable()\n\t\t{\n\n\t\t\tpublic void run()\n\t\t\t{\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\twhile ( true )\n\t\t\t\t\t{\n\t\t\t\t\t\tThread.currentThread().sleep( 3000 );\n\n\t\t\t\t\t\tVector newData \u003d\n\t\t\t\t\t\t\tnew Vector( Arrays\n\t\t\t\t\t\t\t\t.asList( generateRandomTest() ) );\n\n\t\t\t\t\t\trebuildPie( newData );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch ( Exception e ) {}\n\t\t\t}\n\t\t} );\n\n\t\t//test.start();\n\t}\n\n\t/**\n\t * Constructor \u003ccode\u003eFTOchartFrame\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003et\u003c/code\u003e is of \u003ccode\u003eFTOaccJtable\u003c/code\u003e type\n\t * @param \u003ccode\u003edata\u003c/code\u003e is of \u003ccode\u003ejava.util.List\u003c/code\u003e type\n\t * @param \u003ccode\u003etitle\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t * @param \u003ccode\u003econf\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTOchartFrame( java.util.List data, String title,\n\t\t\t\t\t\t  String conf )\n\t{\n\n\n\t\tinitContent();\n\n\t\t//pieData \u003d createDataSet( data );\n\t\trebuildPie( data );\n\n\t\tchart  \u003d createPieChart();\n\t\tlegend \u003d new FTOchartLegend( this );\n\n\t\tchart.setLegend( legend );\n\n\t\tsplit \u003d new JSplitPane( JSplitPane.HORIZONTAL_SPLIT, true, chart,\n\t\t\t\t\t\t\t\tlegend );\n\n\t\tsplit.setDividerSize( 0 );\n\t\tsplit.setEnabled( false );\n\n\t\tWindowListener wndCloser \u003d new WindowAdapter()\n\t\t{\n\n\t\t\tpublic void windowClosing( WindowEvent e )\n\t\t\t{\n\n\t\t\t\tif ( ( test !\u003d null ) \u0026\u0026 test.isAlive() )\n\t\t\t\t\ttest.interrupt();\n\n\n\t\t\t\tdispose();\n\t\t\t}\n\n\t\t\tpublic void windowActivated( WindowEvent e )\n\t\t\t{\n\n\t\t\t}\n\t\t};\n\n\t\tresetFromConfig();\n\n\n\t\tSwingUtilities.invokeLater( new Runnable()\n\t\t{\n\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003edispose\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void dispose()\n\t{\n\n\t\tSwingUtilities.invokeLater( new Runnable()\n\t\t{\n\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\tdestroy();\n\t\t\t}\n\t\t} );\n\t}\n\n\tprivate void destroy()\n\t{\n\n\t\tif ( chart \u003d\u003d null )\n\t\t\treturn;\n\n\t\tchart.destroy();\n\t\tlegend.destroy();\n\n\t\tpieData.clear();\n\n\t\tworkCopy \u003d null;\n\n\t\tcontent.clear();\n\t\tsplit.removeAll();\n\n\t\tsplit  \u003d null;\n\t\tchart  \u003d null;\n\t\tlegend \u003d null;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003ereapplyConfig\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003econf\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic void reapplyConfig( String conf )\n\t{\n\n\n\t\tresetFromConfig();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eactivateChart\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void activateChart()\n\t{\n\n\n\t\tisCallbackNeeded \u003d false;\n\n\t}\n\n\tprotected void resetFromConfig()\n\t{\n\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetConfig\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\n\t//  public String getConfig()\n\n\tprotected void centerWindow()\n\t{\n\n\n\t}\n\n\t//Convert FTOpieChartableElement to FTOpiePiece\n\n\n\tprivate void initContent()\n\t{\n\t\tcontent \u003d Collections.synchronizedMap( content );\n\t}\n\n\tprivate static java.util.List createTestData( int mode )\n\t{\n\n\t\tjava.util.List data \u003d null;\n\n\t\tif ( mode \u003d\u003d GENERATE_RANDOM_DEMO )\n\t\t\tdata \u003d new ArrayList( Arrays.asList( generateRandomTest() ) );\n\t\telse if ( mode \u003d\u003d GENERATE_CUSTOM_DEMO )\n\t\t\tdata \u003d new ArrayList( Arrays.asList( generateCustomTest() ) );\n\n\t\treturn Collections.synchronizedList( data );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003erebuildPie\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ev\u003c/code\u003e is of \u003ccode\u003ejava.util.List\u003c/code\u003e type\n\t *\n\t */\n\tpublic void rebuildPie( java.util.List v )\n\t{\n\n\t\tHashMap update \u003d new HashMap();\n\n\n\t\tHashSet updates  \u003d new HashSet( update.keySet() );\n\t\tSet     current  \u003d content.keySet();\n\t\tSet     newItems \u003d new HashSet();\n\t\tSet     oldItems \u003d new HashSet();\n\n\t\t//check for new items\n\t\tif ( !current.containsAll( updates ) )\n\t\t{\n\t\t\tnewItems \u003d new HashSet( updates );\n\n\t\t\tnewItems.removeAll( current );\n\n\t\t\tisDataModified \u003d true;\n\t\t}\n\n\t\t//check for removed items\n\t\tif ( !updates.containsAll( current ) )\n\t\t{\n\t\t\toldItems \u003d new HashSet( current );\n\n\t\t\toldItems.removeAll( updates );\n\n\t\t\tisDataModified \u003d true;\n\t\t}\n\n\t\t//removing old items\n\t\tfor ( Iterator i \u003d oldItems.iterator(); i.hasNext(); )\n\t\t{\n\t\t\tFTOpiePiece p \u003d (FTOpiePiece) content.get( i.next() );\n\n\t\t\tif ( p.isPieceSelected() )\n\t\t\t\tselectionChanged( -1, false );\n\n\t\t\tpieData.remove( p );\n\t\t}\n\n\t\tcurrent.removeAll( oldItems );\n\n\t\t//checking for modifications in existing data\n\t\tfor ( Iterator i \u003d current.iterator(); i.hasNext(); )\n\t\t{\n\n\t\t}\n\n\t\t//adding new Items\n\t\tfor ( Iterator i \u003d newItems.iterator(); i.hasNext(); )\n\t\t{\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eisEmpty\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean isEmpty()\n\t{\n\n\t\t//return workCopy.length \u003d\u003d 0;\n\t\treturn pieData.size() \u003d\u003d 0;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetWorkCopy\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eFTOpiePiece[]\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTOpiePiece[] getWorkCopy()\n\t{\n\t\treturn workCopy;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetWorkCopy\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eFTOpiePiece[]\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setWorkCopy( FTOpiePiece[] c )\n\t{\n\n\t\tworkCopy \u003d c;\n\n\t\tif ( legend !\u003d null )\n\t\t\tlegend.m_pieData \u003d c;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetChart\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eFTO2dChart\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTO2dChart getChart()\n\t{\n\t\treturn chart;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetData\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003ejava.util.List\u003c/code\u003e type\n\t *\n\t */\n\tpublic java.util.List getData()\n\t{\n\t\treturn pieData;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eselectionChanged\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eindex\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t * @param \u003ccode\u003enotify\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic void selectionChanged( int index, boolean notify )\n\t{\n\t\tchart.selectionChanged( index, notify );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eselectionChanged\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eid\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic void selectionChanged( String id )\n\t{\n\t\tchart.selectionChanged( id );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eclearSelection\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void clearSelection()\n\t{\n\t\tchart.clearSelection();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetGradientPaint\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean getGradientPaint()\n\t{\n\t\treturn ( chart.getEffectIndex() \u003d\u003d chart.EFFECT_GRADIENT );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003einvertGradient\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void invertGradient()\n\t{\n\n\t\tif ( chart.getEffectIndex() \u003d\u003d chart.EFFECT_GRADIENT )\n\t\t\tchart.setEffectIndex( chart.EFFECT_PLAIN );\n\t\telse\n\t\t\tchart.setEffectIndex( chart.EFFECT_GRADIENT );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetShadows\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean getShadows()\n\t{\n\t\treturn chart.getDrawShadow();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003einvertShadows\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void invertShadows()\n\t{\n\n\t\tif ( chart.getDrawShadow() )\n\t\t\tchart.setDrawShadow( false );\n\t\telse\n\t\t\tchart.setDrawShadow( true );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetLegend\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean getLegend()\n\t{\n\t\treturn isLegendVisible;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003einvertLegend\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void invertLegend()\n\t{\n\n\t\tisLegendVisible \u003d !isLegendVisible;\n\n\n\t\tsetDevLocation();\n\n\t\t//chart.repaint();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetSortingNeeded\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean getSortingNeeded()\n\t{\n\t\treturn chart.getSorting();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003einvertSorting\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void invertSorting()\n\t{\n\n\t\tif ( chart.getSorting() )\n\t\t\tchart.setSorting( false );\n\t\telse\n\t\t\tchart.setSorting( true );\n\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetEllipseEnabled\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean getEllipseEnabled()\n\t{\n\t\treturn isEllipseEnabled;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003einvertEllipse\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void invertEllipse()\n\t{\n\n\t\tisEllipseEnabled \u003d !isEllipseEnabled;\n\n\t\tchart.calculateDimensions();\n\t\tchart.repaint();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetGap\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getGap()\n\t{\n\t\treturn chart.getGap();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eincreaseGap\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void increaseGap()\n\t{\n\t\tchart.increaseGap();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003edecreaseGap\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void decreaseGap()\n\t{\n\t\tchart.decreaseGap();\n\t}\n\n\tprotected void processComponentEvent( ComponentEvent e )\n\t{\n\n\n\t\tsetDevLocation();\n\t}\n\n\tprotected void setDevLocation()\n\t{\n\n\t\tif ( split \u003d\u003d null )\n\t\t\treturn;\n\n\t\tint devider \u003d split.getWidth() - split.getDividerSize();\n\n\t\tif ( ( isLegendVisible ) \u0026\u0026 ( split.getWidth() \u003e\u003d 2 * legendWidth ) )\n\t\t\tdevider -\u003d legendWidth;\n\n\t\tsplit.setDividerLocation( devider );\n\t}\n\n\tprivate FTO2dChart createPieChart()\n\t{\n\n\t\tFTO2dChart chart \u003d new FTO2dChart( FTO2dChart.CHART_DOUBLE_PIE,\n\t\t\t\t\t\t\t\t\t\t   this );\n\n\t\tchart.setEffectIndex( FTO2dChart.EFFECT_PLAIN );\n\t\tchart.setDrawShadow( true );\n\n\t\treturn chart;\n\t}\n\n\t//For testing only\n\tprivate static FTOinputData[] generateRandomTest()\n\t{\n\n\t\tint[] yData   \u003d new int[DEMO_LENGTH];\n\t\tint[] yDataPL \u003d new int[DEMO_LENGTH];\n\n\t\tfor ( int k \u003d 0; k \u003c DEMO_LENGTH; k++ )\n\t\t{\n\t\t\tyData[k]   \u003d (int) ( Math.random() * 100 );\n\t\t\tyDataPL[k] \u003d (int) ( Math.random() * 100 );\n\n\t\t\tboolean sign \u003d ( (int) ( Math.random() * 100 ) ) % 2 \u003d\u003d 0;\n\n\t\t\tif ( k \u003e 0 )\n\t\t\t{\n\t\t\t\tyData[k]   \u003d ( yData[k - 1] + yData[k] ) / 2;\n\t\t\t\tyDataPL[k] \u003d ( yDataPL[k - 1] + yDataPL[k] ) / 2;\n\n\t\t\t\tif ( sign )\n\t\t\t\t\tyDataPL[k] *\u003d -1;\n\t\t\t}\n\t\t}\n\n\t\tFTOinputData[] pieData \u003d new FTOinputData[DEMO_LENGTH];\n\n\t\tfor ( int k \u003d 0; k \u003c DEMO_LENGTH; k++ )\n\t\t{\n\t\t\tFTOinputData piece \u003d new FTOinputData( \" piece \" + k,\n\t\t\t\t\t\t\t\t\t\t\t\t   \" piece \" + k, yData[k],\n\t\t\t\t\t\t\t\t\t\t\t\t   yDataPL[k] );\n\n\t\t\tpieData[k] \u003d piece;\n\t\t}\n\n\t\treturn pieData;\n\t}\n\n\t//For testing only\n\tprivate static FTOinputData[] generateCustomTest()\n\t{\n\n\t\tint nData \u003d 8;\n\n\t\tDEMO_LENGTH \u003d nData;\n\n\t\tFTOinputData[] data   \u003d new FTOinputData[nData];\n\t\tdouble         volume \u003d 50;\n\t\tdouble         pl     \u003d 0;\n\t\tFTOinputData   piece  \u003d new FTOinputData( \" piece \" + 0,\n\t\t\t\t\t\t\t\t\t\t\t\t  \" piece \" + 0, volume, pl );\n\n\t\tdata[0] \u003d piece;\n\t\tvolume  \u003d 45;\n\t\tpl      \u003d 60;\n\t\tpiece   \u003d new FTOinputData( \" piece \" + 1, \" piece \" + 1, volume,\n\t\t\t\t\t\t\t\t\tpl );\n\t\tdata[1] \u003d piece;\n\t\tvolume  \u003d 45;\n\t\tpl      \u003d -100;\n\t\tpiece   \u003d new FTOinputData( \" piece \" + 2, \" piece \" + 2, volume,\n\t\t\t\t\t\t\t\t\tpl );\n\t\tdata[2] \u003d piece;\n\t\tvolume  \u003d 45;\n\t\tpl      \u003d 15;\n\t\tpiece   \u003d new FTOinputData( \" piece \" + 3, \" piece \" + 3, volume,\n\t\t\t\t\t\t\t\t\tpl );\n\t\tdata[3] \u003d piece;\n\t\tvolume  \u003d 45;\n\t\tpl      \u003d -30;\n\t\tpiece   \u003d new FTOinputData( \" piece \" + 4, \" piece \" + 4, volume,\n\t\t\t\t\t\t\t\t\tpl );\n\t\tdata[4] \u003d piece;\n\t\tvolume  \u003d 45;\n\t\tpl      \u003d -50;\n\t\tpiece   \u003d new FTOinputData( \" piece \" + 5, \" piece \" + 5, volume,\n\t\t\t\t\t\t\t\t\tpl );\n\t\tdata[5] \u003d piece;\n\t\tvolume  \u003d 45;\n\t\tpl      \u003d 105;\n\t\tpiece   \u003d new FTOinputData( \" piece \" + 6, \" piece \" + 6, volume,\n\t\t\t\t\t\t\t\t\tpl );\n\t\tdata[6] \u003d piece;\n\t\tvolume  \u003d 40;\n\t\tpl      \u003d 0;\n\t\tpiece   \u003d new FTOinputData( \" piece \" + 7, \" piece \" + 7, volume,\n\t\t\t\t\t\t\t\t\tpl );\n\t\tdata[7] \u003d piece;\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eremoveWhiteSpacing\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003edimension\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void removeWhiteSpacing( double dimension )\n\t{\n\n\t}\n\n\t//For testing only\n\n\t/**\n\t * Method \u003ccode\u003emain\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eargv\u003c/code\u003e is of \u003ccode\u003eString[]\u003c/code\u003e type\n\t *\n\t */\n\tpublic static void main( String argv[] )\n\t{\n\t\tnew FTOchartFrame( GENERATE_RANDOM_DEMO );\n\t}\n}\n\nclass FTOchartLegend extends JPanel\n{\n\n\t/** Field \u003ccode\u003elegend\u003c/code\u003e */\n\tFTOlegendPanel legend;\n\n\t/** Field \u003ccode\u003escroll\u003c/code\u003e */\n\tJScrollPane scroll;\n\n\t/** Field \u003ccode\u003em_pieData\u003c/code\u003e */\n\tFTOpiePiece[] m_pieData;\n\n\t/** Field \u003ccode\u003eparent\u003c/code\u003e */\n\tFTOchartFrame parent;\n\n\t/** Field \u003ccode\u003eisSelectionChanged\u003c/code\u003e */\n\tboolean isSelectionChanged \u003d false;\n\n\t/**\n\t * Constructor \u003ccode\u003eFTOchartLegend\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eparent\u003c/code\u003e is of \u003ccode\u003eFTOchartFrame\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTOchartLegend( FTOchartFrame parent )\n\t{\n\n\t\tsuper( new BorderLayout() );\n\n\t\tsetBackground( FTOchartFrame.m_backgroundColor );\n\n\t\tm_pieData   \u003d parent.getWorkCopy();\n\t\tthis.parent \u003d parent;\n\t\tlegend      \u003d new FTOlegendPanel();\n\t\tscroll      \u003d\n\t\t\tnew JScrollPane( legend,\n\t\t\t\t\t\t\t JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,\n\t\t\t\t\t\t\t JScrollPane.HORIZONTAL_SCROLLBAR_NEVER );\n\n\t\tadd( scroll, BorderLayout.CENTER );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003edestroy\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void destroy()\n\t{\n\n\t\tscroll.removeAll();\n\t\tremoveAll();\n\n\t\tscroll    \u003d null;\n\t\tparent    \u003d null;\n\t\tlegend    \u003d null;\n\t\tm_pieData \u003d null;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eselectionChanged\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void selectionChanged()\n\t{\n\n\t\tisSelectionChanged \u003d true;\n\n\t\trepaint();\n\t}\n\n\tclass FTOlegendPanel extends JComponent\n\t{\n\n\t\t/** Field \u003ccode\u003em_xMargin\u003c/code\u003e */\n\t\tint m_xMargin \u003d 5;\n\n\t\t/** Field \u003ccode\u003em_yMargin\u003c/code\u003e */\n\t\tint m_yMargin \u003d 10;\n\n\t\t/** Field \u003ccode\u003erect_width\u003c/code\u003e */\n\t\tint rect_width \u003d 15;\n\n\t\t/** Field \u003ccode\u003erect_height\u003c/code\u003e */\n\t\tint rect_height \u003d 10;\n\n\t\t/** Field \u003ccode\u003eisHidden\u003c/code\u003e */\n\t\tboolean isHidden \u003d false;\n\n\t\t/** Field \u003ccode\u003em_lineThickness\u003c/code\u003e */\n\t\tint m_lineThickness \u003d 3;\n\n\t\t/** Field \u003ccode\u003em_stroke\u003c/code\u003e */\n\t\tStroke m_stroke \u003d new BasicStroke( m_lineThickness,\n\t\t\t\t\t\t\t\t\t\t   BasicStroke.CAP_SQUARE,\n\t\t\t\t\t\t\t\t\t\t   BasicStroke.JOIN_BEVEL );\n\n\t\t/** Field \u003ccode\u003etextFont\u003c/code\u003e */\n\t\tFont textFont \u003d new Font( \"Arial\", Font.BOLD, rect_height );\n\n\t\t/** Field \u003ccode\u003eselFont\u003c/code\u003e */\n\t\tFont selFont \u003d new Font( \"Arial\", Font.BOLD, rect_height + 1 );\n\n\t\t/**\n\t\t * Constructor \u003ccode\u003eFTOlegendPanel\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t */\n\t\tpublic FTOlegendPanel()\n\t\t{\n\n\t\t\tsuper();\n\n\t\t\taddMouseListener( new MouseAdapter()\n\t\t\t{\n\n\t\t\t\tpublic void mousePressed( MouseEvent e )\n\t\t\t\t{\n\n\t\t\t\t\tif ( ( e.getModifiers() \u0026 MouseEvent.BUTTON1_MASK ) \u003e 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tPoint p     \u003d e.getPoint();\n\t\t\t\t\t\tint   index \u003d getPieceIndexAtPoint( p );\n\n\t\t\t\t\t\tparent.selectionChanged( index, true );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\tenableEvents( ComponentEvent.COMPONENT_RESIZED );\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003eprocessComponentEvent\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003ee\u003c/code\u003e is of \u003ccode\u003eComponentEvent\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic void processComponentEvent( ComponentEvent e )\n\t\t{\n\n\t\t\tif ( getWidth() \u003d\u003d 0 )\n\t\t\t{\n\t\t\t\tif ( !isHidden )\n\t\t\t\t{\n\t\t\t\t\tparent.getChart().repaint();\n\n\t\t\t\t\tisHidden \u003d true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( isHidden )\n\t\t\t{\n\t\t\t\tisHidden \u003d false;\n\n\t\t\t\tparent.getChart().repaint();\n\t\t\t}\n\t\t}\n\n\t\tprotected int getPieceIndexAtPoint( Point p )\n\t\t{\n\n\t\t\tint result \u003d -1;\n\n\t\t\tif ( m_pieData.length \u003d\u003d 0 )\n\t\t\t\treturn result;\n\n\t\t\tint x \u003d\n\t\t\t\t( getWidth() - ( 2 * m_xMargin + rect_width + textFont\n\t\t\t\t.getSize() / 2 * m_pieData[0].getName().length() ) ) / 2;\n\t\t\tint y \u003d m_yMargin;\n\n\t\t\tfor ( int i \u003d 0; i \u003c m_pieData.length; i++ )\n\t\t\t{\n\t\t\t\tRectangle2D.Double r \u003d new Rectangle2D.Double( x, y,\n\t\t\t\t\t\t\t\t\t\t   rect_width, rect_height );\n\n\t\t\t\tif ( r.contains( p.getX(), p.getY() ) )\n\t\t\t\t{\n\t\t\t\t\tresult \u003d i;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ty +\u003d rect_height + m_yMargin;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003epaintComponent\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003eg\u003c/code\u003e is of \u003ccode\u003eGraphics\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic void paintComponent( Graphics g )\n\t\t{\n\n\t\t\tif ( parent.isEmpty() || ( m_pieData.length \u003d\u003d 0 ) )\n\t\t\t\treturn;\n\n\t\t\tRectangle  selection \u003d null;\n\t\t\tGraphics2D g2        \u003d (Graphics2D) g;\n\n\t\t\t//setting background\n\t\t\tg2.setColor( FTOchartFrame.m_backgroundColor );\n\n\t\t\tint x     \u003d\n\t\t\t\t( getWidth() - ( 2 * m_xMargin + rect_width + textFont\n\t\t\t\t.getSize() / 2 * m_pieData[0].getName().length() ) ) / 2;\n\t\t\tint y     \u003d m_yMargin;\n\t\t\tint textX \u003d x + rect_width + m_xMargin;\n\n\t\t\tg2.setFont( textFont );\n\t\t\tg2.setStroke( m_stroke );\n\n\t\t\tfor ( int i \u003d 0; i \u003c m_pieData.length; i++ )\n\t\t\t{\n\t\t\t\tRectangle2D.Double r \u003d new Rectangle2D.Double( x, y,\n\t\t\t\t\t\t\t\t\t\t   rect_width, rect_height );\n\n\t\t\t\tg2.setColor( m_pieData[i].getPieceColor() );\n\t\t\t\tg2.fill3DRect( x, y, rect_width, rect_height, true );\n\n\t\t\t\tif ( m_pieData[i].isPieceSelected() )\n\t\t\t\t{\n\t\t\t\t\tg2.setColor( FTO2dChart.m_SelectionColor );\n\t\t\t\t\tg2.draw( r );\n\t\t\t\t\tg2.setFont( selFont );\n\t\t\t\t\tg2.drawString( m_pieData[i].getName().toUpperCase(),\n\t\t\t\t\t\t\t\t   textX, y + selFont.getSize() - 2 );\n\t\t\t\t\tg2.setFont( textFont );\n\t\t\t\t\tg2.setColor( m_pieData[i].getPieceColor() );\n\n\t\t\t\t\tselection \u003d new Rectangle( x, y, rect_width,\n\t\t\t\t\t\t\t\t\t\t\t   rect_height );\n\t\t\t\t}\n\n\t\t\t\tg2.drawString( m_pieData[i].getName().toUpperCase(), textX,\n\t\t\t\t\t\t\t   y + textFont.getSize() );\n\n\t\t\t\ty +\u003d rect_height + m_yMargin;\n\t\t\t}\n\n\t\t\tsetPreferredSize( new Dimension( getWidth(), y ) );\n\t\t\trevalidate();\n\n\t\t\tif ( selection !\u003d null )\n\t\t\t{\n\t\t\t\tif ( isSelectionChanged )\n\t\t\t\t{\n\t\t\t\t\tscrollRectToVisible( selection );\n\n\t\t\t\t\tisSelectionChanged \u003d false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass FTO2dChart extends JPanel\n{\n\n\t/** Field \u003ccode\u003eCHART_DOUBLE_PIE\u003c/code\u003e */\n\tpublic static final int CHART_DOUBLE_PIE \u003d 1;\n\n\t/** Field \u003ccode\u003eEFFECT_PLAIN\u003c/code\u003e */\n\tpublic static final int EFFECT_PLAIN \u003d 0;\n\n\t/** Field \u003ccode\u003eEFFECT_GRADIENT\u003c/code\u003e */\n\tpublic static final int EFFECT_GRADIENT \u003d 1;\n\n\t/** Field \u003ccode\u003eEFFECT_IMAGE\u003c/code\u003e */\n\tpublic static final int EFFECT_IMAGE \u003d 2;\n\n\t/** Field \u003ccode\u003eMAX_GAP\u003c/code\u003e */\n\tfinal static double MAX_GAP \u003d 0.055;\n\n\t/** Field \u003ccode\u003eMIN_GAP\u003c/code\u003e */\n\tfinal static double MIN_GAP \u003d 0;\n\n\t/** Field \u003ccode\u003em_chartType\u003c/code\u003e */\n\tprotected int m_chartType \u003d CHART_DOUBLE_PIE;\n\n\t/** Field \u003ccode\u003eparent\u003c/code\u003e */\n\tprotected FTOchartFrame parent;\n\n\t/** Field \u003ccode\u003em_title\u003c/code\u003e */\n\tprotected JLabel m_title;\n\n\t/** Field \u003ccode\u003em_chart\u003c/code\u003e */\n\tprotected FTOchartPanel m_chart;\n\n\t/** Field \u003ccode\u003em_xData\u003c/code\u003e */\n\tprotected int[] m_xData;\n\n\t/** Field \u003ccode\u003em_yData\u003c/code\u003e */\n\tprotected int[] m_yData;\n\n\t/** Field \u003ccode\u003em_xMin\u003c/code\u003e */\n\tprotected int m_xMin;\n\n\t/** Field \u003ccode\u003em_xMax\u003c/code\u003e */\n\tprotected int m_xMax;\n\n\t/** Field \u003ccode\u003em_yMin\u003c/code\u003e */\n\tprotected int m_yMin;\n\n\t/** Field \u003ccode\u003em_yMax\u003c/code\u003e */\n\tprotected int         m_yMax;\n\tprivate FTOpiePiece[] m_model \u003d new FTOpiePiece[0];\n\n\t/** Field \u003ccode\u003em_effectIndex\u003c/code\u003e */\n\tprotected int m_effectIndex \u003d EFFECT_PLAIN;\n\n\t/** Field \u003ccode\u003em_stroke\u003c/code\u003e */\n\tprotected Stroke m_stroke;\n\n\t/** Field \u003ccode\u003em_sel_stroke\u003c/code\u003e */\n\tprotected Stroke m_sel_stroke;\n\n\t/** Field \u003ccode\u003em_foregroundImage\u003c/code\u003e */\n\tprotected Image m_foregroundImage;\n\n\t/** Field \u003ccode\u003em_lineColor\u003c/code\u003e */\n\tpublic static Color m_lineColor \u003d Color.black;\n\n\t/** Field \u003ccode\u003em_SelectionColor\u003c/code\u003e */\n\tpublic static Color m_SelectionColor \u003d Color.white;\n\n\t/** Field \u003ccode\u003em_drawShadow\u003c/code\u003e */\n\tprotected boolean m_drawShadow \u003d false;\n\n\t/** Field \u003ccode\u003em_lineThickness\u003c/code\u003e */\n\tprotected float m_lineThickness \u003d (float) 1.6;\n\n\t/** Field \u003ccode\u003eisRotated\u003c/code\u003e */\n\tprotected boolean isRotated \u003d true;\n\n\t/** Field \u003ccode\u003eisSortingNeeded\u003c/code\u003e */\n\tprotected boolean isSortingNeeded \u003d true;\n\n\t/** Field \u003ccode\u003elegend\u003c/code\u003e */\n\tprotected FTOchartLegend legend;\n\n\t/**\n\t * Constructor \u003ccode\u003eFTO2dChart\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003etype\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t * @param \u003ccode\u003eparent\u003c/code\u003e is of \u003ccode\u003eFTOchartFrame\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTO2dChart( int type, FTOchartFrame parent )\n\t{\n\n\t\tsuper( new BorderLayout() );\n\n\t\tsetBackground( FTOchartFrame.m_backgroundColor );\n\n\t\tthis.parent \u003d parent;\n\t\tm_chartType \u003d type;\n\n\t\tif ( type \u003d\u003d CHART_DOUBLE_PIE )\n\t\t{\n\t\t\tm_stroke     \u003d new BasicStroke( m_lineThickness,\n\t\t\t\t\t\t\t\t\t\t\tBasicStroke.CAP_ROUND,\n\t\t\t\t\t\t\t\t\t\t\tBasicStroke.JOIN_ROUND );\n\t\t\tm_sel_stroke \u003d new BasicStroke( m_lineThickness + 1,\n\t\t\t\t\t\t\t\t\t\t\tBasicStroke.CAP_ROUND,\n\t\t\t\t\t\t\t\t\t\t\tBasicStroke.JOIN_ROUND );\n\t\t}\n\n\t\tm_chart \u003d new FTOchartPanel();\n\n\t\tadd( m_chart, BorderLayout.CENTER );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003edestroy\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void destroy()\n\t{\n\n\t\tm_chart.destroy();\n\t\tremoveAll();\n\n\t\tparent  \u003d null;\n\t\tm_chart \u003d null;\n\t\tlegend  \u003d null;\n\t\tm_model \u003d null;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetGap\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ed\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setGap( double d )\n\t{\n\t\tm_chart.setGap( d );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetGap\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getGap()\n\t{\n\t\treturn m_chart.getGap();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003ecalculateDimensions\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void calculateDimensions()\n\t{\n\t\tm_chart.calcDimensions();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eincreaseGap\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void increaseGap()\n\t{\n\n\t\tm_chart.increaseGap();\n\n\t\tm_chart.isGap \u003d true;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003edecreaseGap\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void decreaseGap()\n\t{\n\n\t\tm_chart.decreaseGap();\n\n\t\tm_chart.isGap \u003d true;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eselectionChanged\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eindex\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t * @param \u003ccode\u003enotify\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic void selectionChanged( int index, boolean notify )\n\t{\n\t\tm_chart.selectionChanged( index, notify );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eclearSelection\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void clearSelection()\n\t{\n\t\tm_chart.clearSelection();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eselectionChanged\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eid\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic void selectionChanged( String id )\n\t{\n\n\t\tint index \u003d -1;\n\n\t\tfor ( int i \u003d 0; i \u003c m_model.length; i++ )\n\t\t{\n\t\t\tif ( m_model[i].getId().equals( id ) )\n\t\t\t{\n\t\t\t\tindex \u003d i;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tselectionChanged( index, false );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eguiCallback\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eindex\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic void guiCallback( int index )\n\t{\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetSorting\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean getSorting()\n\t{\n\t\treturn isSortingNeeded;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetChartHeight\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic int getChartHeight()\n\t{\n\t\treturn m_chart.getHeight();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetSorting\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003epar\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setSorting( boolean par )\n\t{\n\n\t\tisSortingNeeded  \u003d par;\n\t\tisRotated        \u003d true;\n\t\tm_chart.isSorted \u003d false;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetLegend\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003elegend\u003c/code\u003e is of \u003ccode\u003eFTOchartLegend\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setLegend( FTOchartLegend legend )\n\t{\n\t\tthis.legend \u003d legend;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetEffectIndex\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eeffectIndex\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setEffectIndex( int effectIndex )\n\t{\n\n\t\tm_effectIndex \u003d effectIndex;\n\n\t\tif ( m_effectIndex \u003d\u003d EFFECT_GRADIENT )\n\t\t\tm_chart.isGradient \u003d true;\n\n\t\trepaint();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetEffectIndex\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic int getEffectIndex()\n\t{\n\t\treturn m_effectIndex;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetStroke\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003estroke\u003c/code\u003e is of \u003ccode\u003eStroke\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setStroke( Stroke stroke )\n\t{\n\n\t\tm_stroke \u003d stroke;\n\n\t\tm_chart.repaint();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetForegroundImage\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eimg\u003c/code\u003e is of \u003ccode\u003eImage\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setForegroundImage( Image img )\n\t{\n\n\t\tm_foregroundImage \u003d img;\n\n\t\trepaint();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetForegroundImage\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eImage\u003c/code\u003e type\n\t *\n\t */\n\tpublic Image getForegroundImage()\n\t{\n\t\treturn m_foregroundImage;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetStroke\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eStroke\u003c/code\u003e type\n\t *\n\t */\n\tpublic Stroke getStroke()\n\t{\n\t\treturn m_stroke;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetLineColor\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eColor\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setLineColor( Color c )\n\t{\n\n\t\tm_lineColor \u003d c;\n\n\t\tm_chart.repaint();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetLineColor\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eColor\u003c/code\u003e type\n\t *\n\t */\n\tpublic Color getLineColor()\n\t{\n\t\treturn m_lineColor;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetDrawShadow\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003edrawShadow\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setDrawShadow( boolean drawShadow )\n\t{\n\n\t\tm_drawShadow \u003d drawShadow;\n\n\t\tm_chart.repaint();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetDrawShadow\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean getDrawShadow()\n\t{\n\t\treturn m_drawShadow;\n\t}\n\n\tclass FTOchartPanel extends JComponent implements ActionListener\n\t{\n\n\t\t/** Field \u003ccode\u003em_xMargin\u003c/code\u003e */\n\t\tint m_xMargin \u003d 10;\n\n\t\t/** Field \u003ccode\u003em_yMargin\u003c/code\u003e */\n\t\tint m_yMargin \u003d 10;\n\n\t\t/** Field \u003ccode\u003em_pieGap\u003c/code\u003e */\n\t\tdouble m_pieGap;\n\n\t\t//min 0.025 max 0.055\n\n\t\t/** Field \u003ccode\u003egapStep\u003c/code\u003e */\n\t\tdouble gapStep \u003d 0.01;\n\n\t\t/** Field \u003ccode\u003emin_gap\u003c/code\u003e */\n\t\tdouble min_gap \u003d 0.025;\n\n\t\t/** Field \u003ccode\u003em_gapCoefficient\u003c/code\u003e */\n\t\tdouble m_gapCoefficient \u003d 0;    //0.035;\n\n\t\t/** Field \u003ccode\u003em_ringCoefficient\u003c/code\u003e */\n\t\tfinal double m_ringCoefficient \u003d 0.1;\n\n\t\t/** Field \u003ccode\u003em_x\u003c/code\u003e */\n\t\tint m_x;\n\n\t\t/** Field \u003ccode\u003em_y\u003c/code\u003e */\n\t\tint m_y;\n\n\t\t/** Field \u003ccode\u003em_w\u003c/code\u003e */\n\t\tint m_w;\n\n\t\t/** Field \u003ccode\u003em_h\u003c/code\u003e */\n\t\tint m_h;\n\n\t\t/** Field \u003ccode\u003elastSelectedPiece\u003c/code\u003e */\n\t\tint lastSelectedPiece \u003d -1;\n\n\t\t/** Field \u003ccode\u003estartIndex\u003c/code\u003e */\n\t\tint startIndex \u003d 0;\n\n\t\t/** Field \u003ccode\u003eisSorted\u003c/code\u003e */\n\t\tboolean isSorted \u003d false;\n\n\t\t/** Field \u003ccode\u003eisResized\u003c/code\u003e */\n\t\tboolean isResized \u003d true;\n\n\t\t/** Field \u003ccode\u003eisGradient\u003c/code\u003e */\n\t\tboolean isGradient \u003d false;\n\n\t\t/** Field \u003ccode\u003eisGap\u003c/code\u003e */\n\t\tboolean              isGap           \u003d false;\n\t\tprivate final String ACTION_SHADOWS  \u003d \"shadows\";\n\t\tprivate final String ACTION_ELLIPSE  \u003d \"ellipse\";\n\t\tprivate final String ACTION_PAINTING \u003d \"gradient\";\n\t\tprivate final String ACTION_SORTING  \u003d \"sorting\";\n\t\tprivate final String ACTION_GAP_UP   \u003d \"gap+\";\n\t\tprivate final String ACTION_GAP_DOWN \u003d \"gap-\";\n\t\tprivate final String ACTION_LEGEND   \u003d \"legend\";\n\n\t\t/** Field \u003ccode\u003epopup\u003c/code\u003e */\n\t\tprotected FTOchartPopupMenu popup;\n\n\t\t/** Field \u003ccode\u003ecomp\u003c/code\u003e */\n\t\tprotected Comparator comp \u003d new FTOchartComparator();\n\n\t\tFTOchartPanel()\n\t\t{\n\n\t\t\tenableEvents( ComponentEvent.COMPONENT_RESIZED );\n\n\t\t\tpopup \u003d new FTOchartPopupMenu( parent );\n\n\t\t\tregisterKeyboardActions();\n\t\t\trestoreOriginal();\n\n\n\t\t\t//Initializing tooltips\n\t\t\tsetToolTipText( \"\" );\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003edestroy\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t */\n\t\tpublic void destroy()\n\t\t{\n\n\t\t\tpopup.destroy();\n\t\t\tremoveAll();\n\n\t\t\tcomp  \u003d null;\n\t\t\tpopup \u003d null;\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003esetGap\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003ed\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic void setGap( double d )\n\t\t{\n\t\t\tm_gapCoefficient \u003d d;\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003egetGap\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic double getGap()\n\t\t{\n\t\t\treturn m_gapCoefficient;\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003ecreateToolTip\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @return the value of \u003ccode\u003eJToolTip\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic JToolTip createToolTip()\n\t\t{\n\n\t\t\tJToolTip tip \u003d new FTOtoolTip();\n\n\t\t\ttip.setComponent( this );\n\n\t\t\treturn tip;\n\t\t}\n\n\t\tprivate synchronized void restoreOriginal()\n\t\t{\n\n\t\t\tm_model \u003d new FTOpiePiece[0];\n\n\t\t\tjava.util.List data \u003d parent.getData();\n\t\t\tjava.util.List copy \u003d new ArrayList( data );\n\n\t\t\tm_model \u003d (FTOpiePiece[]) copy.toArray( m_model );\n\n\t\t\tparent.setWorkCopy( m_model );\n\t\t}\n\n\t\tprivate void registerKeyboardActions()\n\t\t{\n\n\t\t\tKeyStroke ks \u003d KeyStroke.getKeyStroke( KeyEvent.VK_S, 0, false );\n\n\t\t\tregisterKeyboardAction( this, ACTION_SHADOWS, ks,\n\t\t\t\t\t\t\t\t\tWHEN_IN_FOCUSED_WINDOW );\n\n\t\t\tks \u003d KeyStroke.getKeyStroke( KeyEvent.VK_E, 0, false );\n\n\t\t\tregisterKeyboardAction( this, ACTION_ELLIPSE, ks,\n\t\t\t\t\t\t\t\t\tWHEN_IN_FOCUSED_WINDOW );\n\n\t\t\t/*ks \u003d KeyStroke.getKeyStroke( KeyEvent.VK_O, 0, false );\n\t\t\tregisterKeyboardAction( this, ACTION_SORTING, ks, WHEN_IN_FOCUSED_WINDOW );*/\n\t\t\tks \u003d KeyStroke.getKeyStroke( KeyEvent.VK_G, 0, false );\n\n\t\t\tregisterKeyboardAction( this, ACTION_PAINTING, ks,\n\t\t\t\t\t\t\t\t\tWHEN_IN_FOCUSED_WINDOW );\n\n\t\t\tks \u003d KeyStroke.getKeyStroke( KeyEvent.VK_UP, 0, false );\n\n\t\t\tregisterKeyboardAction( this, ACTION_GAP_UP, ks,\n\t\t\t\t\t\t\t\t\tWHEN_IN_FOCUSED_WINDOW );\n\n\t\t\tks \u003d KeyStroke.getKeyStroke( KeyEvent.VK_DOWN, 0, false );\n\n\t\t\tregisterKeyboardAction( this, ACTION_GAP_DOWN, ks,\n\t\t\t\t\t\t\t\t\tWHEN_IN_FOCUSED_WINDOW );\n\n\t\t\tks \u003d KeyStroke.getKeyStroke( KeyEvent.VK_L, 0 );\n\n\t\t\tregisterKeyboardAction( this, ACTION_LEGEND, ks,\n\t\t\t\t\t\t\t\t\tWHEN_IN_FOCUSED_WINDOW );\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003eactionPerformed\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003ee\u003c/code\u003e is of \u003ccode\u003eActionEvent\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic void actionPerformed( ActionEvent e )\n\t\t{\n\n\t\t\tif ( parent.isEmpty() )\n\t\t\t\treturn;\n\n\t\t\tString command \u003d e.getActionCommand();\n\n\t\t\tif ( command.equals( ACTION_ELLIPSE ) )\n\t\t\t\tparent.invertEllipse();\n\t\t\telse if ( command.equals( ACTION_GAP_DOWN ) )\n\t\t\t\tparent.decreaseGap();\n\t\t\telse if ( command.equals( ACTION_GAP_UP ) )\n\t\t\t\tparent.increaseGap();\n\t\t\telse if ( command.equals( ACTION_LEGEND ) )\n\t\t\t\tparent.invertLegend();\n\t\t\telse if ( command.equals( ACTION_PAINTING ) )\n\t\t\t\tparent.invertGradient();\n\t\t\telse if ( command.equals( ACTION_SHADOWS ) )\n\t\t\t\tparent.invertShadows();\n\t\t\telse if ( command.equals( ACTION_SORTING ) )\n\t\t\t\tparent.invertSorting();\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003eprocessMouseEvent\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003ee\u003c/code\u003e is of \u003ccode\u003eMouseEvent\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic void processMouseEvent( MouseEvent e )\n\t\t{\n\n\t\t\tif ( e.isPopupTrigger() )\n\t\t\t{\n\t\t\t\tpopup.show( this, e.getX(), e.getY() );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( ( e.getID() \u003d\u003d MouseEvent.MOUSE_PRESSED )\n\t\t\t\t\t\t\u0026\u0026 ( e.getModifiers() \u0026 MouseEvent.BUTTON1_MASK )\n\t\t\t\t\t\t   \u003e 0 )\n\t\t\t\t{\n\t\t\t\t\tPoint p     \u003d e.getPoint();\n\t\t\t\t\tint   index \u003d getPieceIndexAtPoint( p );\n\n\t\t\t\t\tselectionChanged( index, true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsuper.processMouseEvent( e );\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003eincreaseGap\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t */\n\t\tpublic void increaseGap()\n\t\t{\n\n\t\t\tif ( (int) ( m_gapCoefficient * 1000 )\n\t\t\t\t\t\u003d\u003d (int) ( MAX_GAP * 1000 ) )\n\t\t\t\treturn;\n\n\t\t\tm_gapCoefficient +\u003d gapStep;\n\n\t\t\tif ( m_gapCoefficient \u003c min_gap )\n\t\t\t\tm_gapCoefficient \u003d min_gap;\n\n\t\t\trepaint();\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003edecreaseGap\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t */\n\t\tpublic void decreaseGap()\n\t\t{\n\n\t\t\tm_gapCoefficient -\u003d gapStep;\n\n\t\t\tif ( m_gapCoefficient \u003c min_gap )\n\t\t\t\tm_gapCoefficient \u003d 0;\n\n\t\t\trepaint();\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003eselectionChanged\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003eindex\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t\t * @param \u003ccode\u003eisNotifyNeeded\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic void selectionChanged( int index, boolean isNotifyNeeded )\n\t\t{\n\n\t\t\tif ( index \u003c 0 )\n\t\t\t\treturn;\n\n\t\t\tif ( lastSelectedPiece \u003d\u003d index )\n\t\t\t\treturn;\n\n\t\t\tif ( lastSelectedPiece \u003e\u003d 0 )\n\t\t\t\tm_model[lastSelectedPiece].setPieceSelected( false );\n\n\t\t\tlastSelectedPiece \u003d index;\n\n\t\t\tm_model[index].setPieceSelected( true );\n\t\t\tlegend.selectionChanged();\n\n\t\t\tisRotated \u003d true;\n\n\t\t\trepaint();\n\n\t\t\tif ( isNotifyNeeded )\n\t\t\t\tguiCallback( index );\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003eclearSelection\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t */\n\t\tpublic void clearSelection()\n\t\t{\n\n\t\t\tif ( lastSelectedPiece \u003c 0 )\n\t\t\t\treturn;\n\n\t\t\tm_model[lastSelectedPiece].setPieceSelected( false );\n\n\t\t\tlastSelectedPiece \u003d -1;\n\n\t\t\tlegend.selectionChanged();\n\t\t\trepaint();\n\t\t}\n\n\t\tprotected void arrangePieces()\n\t\t{\n\n\t\t\tisSorted \u003d false;\n\n\t\t\tif ( !isSortingNeeded )\n\t\t\t\trestoreOriginal();\n\t\t\telse\n\t\t\t{\n\t\t\t\tjava.util.List copy \u003d Arrays.asList( m_model );\n\n\t\t\t\tCollections.sort( copy, comp );\n\t\t\t}\n\n\t\t\tlegend.repaint();\n\t\t}\n\n\t\tprotected void resetColors()\n\t\t{\n\n\t\t\tif ( m_model.length \u003d\u003d 0 )\n\t\t\t\treturn;\n\n\t\t\tint plCount     \u003d 0;\n\t\t\tint profitCount \u003d 0;\n\t\t\tint zeroCount   \u003d 0;\n\n\t\t\tfor ( int i \u003d 0; i \u003c m_model.length; i++ )\n\t\t\t{\n\t\t\t\tif ( m_model[i].isProfitPiece() \u003e 0 )\n\t\t\t\t\tprofitCount++;\n\t\t\t\telse if ( m_model[i].isProfitPiece() \u003c 0 )\n\t\t\t\t\tplCount++;\n\t\t\t\telse\n\t\t\t\t\tzeroCount++;\n\t\t\t}\n\n\t\t\tint            profitStep \u003d 155 / ( profitCount + 1 );\n\t\t\tint            plStep     \u003d 200 / ( plCount + 1 );\n\t\t\tint            zeroStep   \u003d 200 / ( zeroCount + 1 );\n\t\t\tjava.util.List copy       \u003d Arrays.asList( m_model );\n\t\t\tArrayList      l          \u003d new ArrayList( copy );\n\n\t\t\tCollections.sort( l, comp );\n\n\t\t\t//pl \u003c 0 - red\n\t\t\tfor ( int i \u003d 0; i \u003c plCount; i++ )\n\t\t\t{\n\t\t\t\tFTOpiePiece p \u003d (FTOpiePiece) l.get( i );\n\t\t\t\tColor       c \u003d new Color( 255 - plStep * i, 0, 0 );\n\n\t\t\t\tp.setGradientStart( new Color( 255, 0, 0 ) );\n\t\t\t\tp.setPieceColor( c );\n\t\t\t}\n\n\t\t\t//pl \u003d 0 - blue\n\t\t\tfor ( int i \u003d plCount; i \u003c plCount + zeroCount; i++ )\n\t\t\t{\n\t\t\t\tFTOpiePiece p \u003d (FTOpiePiece) l.get( i );\n\t\t\t\tColor       c \u003d new Color( 0, 0,\n\t\t\t\t\t\t\t\t\t\t   255 - zeroStep * ( i - plCount ) );\n\n\t\t\t\tp.setGradientStart( new Color( 0, 0, 255 ) );\n\t\t\t\tp.setPieceColor( c );\n\t\t\t}\n\n\t\t\t// pl \u003e 0 - green\n\t\t\tfor ( int i \u003d plCount + zeroCount; i \u003c m_model.length; i++ )\n\t\t\t{\n\t\t\t\tFTOpiePiece p \u003d (FTOpiePiece) l.get( i );\n\t\t\t\tColor       c \u003d new Color( 0, 100\n\t\t\t\t\t\t\t\t\t\t   + profitStep\n\t\t\t\t\t\t\t\t\t\t\t * ( i - plCount\n\t\t\t\t\t\t\t\t\t\t\t\t - zeroCount ), 0 );\n\n\t\t\t\tp.setGradientStart( new Color( 0, 255, 0 ) );\n\t\t\t\tp.setPieceColor( c );\n\t\t\t}\n\t\t}\n\n\t\tprivate int getPieceIndexAtPoint( Point p )\n\t\t{\n\n\t\t\tint result \u003d -1;\n\n\t\t\tfor ( int i \u003d 0; i \u003c m_model.length; i++ )\n\t\t\t{\n\t\t\t\tif ( ( m_model[i].getShape() !\u003d null )\n\t\t\t\t\t\t\u0026\u0026 ( m_model[i].getShapePL() !\u003d null ) )\n\t\t\t\t{\n\t\t\t\t\tif ( m_model[i].getShape().contains( p.getX(), p.getY() )\n\t\t\t\t\t\t\t|| m_model[i].getShapePL().contains( p.getX(),\n\t\t\t\t\t\t\t\tp.getY() ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tresult \u003d i;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tprotected void processComponentEvent( ComponentEvent e )\n\t\t{\n\n\t\t\tcalcDimensions();\n\n\t\t\tisResized \u003d true;\n\n\t\t\trepaint();\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003ecalcDimensions\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t */\n\t\tpublic void calcDimensions()\n\t\t{\n\n\t\t\tif ( parent \u003d\u003d null )\n\t\t\t\treturn;\n\n\t\t\tDimension d \u003d getSize();\n\n\t\t\tm_x \u003d m_xMargin;\n\t\t\tm_y \u003d m_yMargin;\n\t\t\tm_w \u003d d.width - 2 * m_xMargin;\n\t\t\tm_h \u003d d.height - 2 * m_yMargin;\n\n\t\t\tif ( !parent.isEllipseEnabled\n\t\t\t\t\t\u0026\u0026 ( Math.abs( d.getWidth() - d.getHeight() ) \u003e 1 ) )\n\t\t\t\tparent.removeWhiteSpacing( Math.min( d.getWidth(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t d.getHeight() ) );\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003egetToolTipText\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003eevent\u003c/code\u003e is of \u003ccode\u003eMouseEvent\u003c/code\u003e type\n\t\t *\n\t\t * @return the value of \u003ccode\u003eString\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic String getToolTipText( MouseEvent event )\n\t\t{\n\n\t\t\tint    index  \u003d getPieceIndexAtPoint( new Point( event.getX(),\n\t\t\t\t\t\t\t\tevent.getY() ) );\n\t\t\tString result \u003d null;\n\n\t\t\tif ( index \u003e\u003d 0 )\n\t\t\t{\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003epaint\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t * @param \u003ccode\u003eg\u003c/code\u003e is of \u003ccode\u003eGraphics\u003c/code\u003e type\n\t\t *\n\t\t */\n\t\tpublic void paint( Graphics g )\n\t\t{\n\n\t\t\tif ( parent.isEmpty() )\n\t\t\t\treturn;\n\n\t\t\tGraphics2D g2 \u003d (Graphics2D) g;\n\n\t\t\t//setting graphics quality options\n\t\t\tsetGraphicOptions( g2 );\n\n\t\t\t//calculating gap absolute value\n\t\t\tm_pieGap \u003d m_gapCoefficient * Math.min( m_w, m_h );\n\n\t\t\t//setting stroke\n\t\t\tif ( m_stroke !\u003d null )\n\t\t\t\tg2.setStroke( m_stroke );\n\n\t\t\t//setting background\n\t\t\tg2.setColor( FTOchartFrame.m_backgroundColor );\n\t\t\tg2.fill( g2.getClip() );\n\n\t\t\tswitch ( m_chartType )\n\t\t\t{\n\n\t\t\t\tcase CHART_DOUBLE_PIE :\n\t\t\t\t{\n\n\t\t\t\t\t//Calculating angles\n\t\t\t\t\tif ( parent.isDataModified )\n\t\t\t\t\t{\n\t\t\t\t\t\trestoreOriginal();\n\t\t\t\t\t\tconvertToAngles();\n\n\t\t\t\t\t\tisRotated             \u003d true;\n\t\t\t\t\t\tparent.isDataModified \u003d false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !isSorted )\n\t\t\t\t\t\tarrangePieces();\n\n\t\t\t\t\t//initializing painting area\n\t\t\t\t\tdouble ww \u003d m_w - 2 * m_pieGap;\n\t\t\t\t\tdouble hh \u003d m_h - 2 * m_pieGap;\n\n\t\t\t\t\tif ( !parent.isEllipseEnabled )\n\t\t\t\t\t{\n\t\t\t\t\t\tww \u003d Math.min( ww, hh );\n\t\t\t\t\t\thh \u003d ww;\n\t\t\t\t\t}\n\n\t\t\t\t\t//if ( m_drawShadow )\n\t\t\t\t\t//{\n\t\t\t\t\tww -\u003d m_pieGap;\n\t\t\t\t\thh -\u003d m_pieGap;\n\n\t\t\t\t\t//}\n\t\t\t\t\t//recalculating angles, rotating if needed\n\t\t\t\t\tif ( isRotated )\n\t\t\t\t\t\tcalculateAngles();\n\n\t\t\t\t\t//creating shapes, if needed\n\t\t\t\t\tif ( isRotated || isResized || isGradient || isGap )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( int k \u003d 0; k \u003c m_model.length; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcreatePiePiece( k, ww, hh );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tisRotated  \u003d false;\n\t\t\t\t\t\tisResized  \u003d false;\n\t\t\t\t\t\tisGradient \u003d false;\n\t\t\t\t\t\tisGap      \u003d false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//drawing shadows, if needed\n\t\t\tif ( m_drawShadow )\n\t\t\t\tfor ( int k \u003d 0; k \u003c m_model.length; k++ )\n\t\t\t\t{\n\t\t\t\t\tg2.setColor( Color.gray );\n\t\t\t\t\tg2.fill( m_model[k].getShadow() );\n\t\t\t\t}\n\n\t\t\tlastSelectedPiece \u003d -1;\n\n\t\t\t//drawing pieces ( exclude selected )\n\t\t\tfor ( int k \u003d 0; k \u003c m_model.length; k++ )\n\t\t\t{\n\t\t\t\tif ( !m_model[k].isPieceSelected() )\n\t\t\t\t{\n\n\t\t\t\t\t//setting gradient paint\n\t\t\t\t\tif ( ( m_effectIndex \u003d\u003d EFFECT_GRADIENT )\n\t\t\t\t\t\t\t\u0026\u0026 ( m_model[k].getGradient() !\u003d null ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tg2.setPaint( m_model[k].getGradient() );\n\t\t\t\t\t\tg2.fill( m_model[k].getShape() );\n\t\t\t\t\t\tg2.fill( m_model[k].getShapePL() );\n\t\t\t\t\t}\n\n\t\t\t\t\t//setting plain color\n\t\t\t\t\telse if ( ( m_effectIndex \u003d\u003d EFFECT_PLAIN )\n\t\t\t\t\t\t\t  \u0026\u0026 ( m_model[k].getPieceColor() !\u003d null ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tg2.setColor( m_model[k].getPieceColor() );\n\t\t\t\t\t\tg2.fill( m_model[k].getShape() );\n\t\t\t\t\t\tg2.fill( m_model[k].getShapePL() );\n\t\t\t\t\t}\n\n\t\t\t\t\t//if no gap, then border painting needed\n\t\t\t\t\tif ( m_gapCoefficient \u003d\u003d 0 )\n\t\t\t\t\t\tg2.setColor( m_lineColor );\n\n\t\t\t\t\tg2.draw( m_model[k].getShape() );\n\t\t\t\t\tg2.draw( m_model[k].getShapePL() );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tlastSelectedPiece \u003d k;\n\t\t\t}\n\n\t\t\t//drawing selected piece\n\t\t\tif ( lastSelectedPiece \u003e\u003d 0 )\n\t\t\t{\n\n\t\t\t\t//setting stroke\n\t\t\t\tif ( m_stroke !\u003d null )\n\t\t\t\t\tg2.setStroke( m_sel_stroke );\n\n\t\t\t\tint k \u003d lastSelectedPiece;\n\n\t\t\t\t//setting gradient paint\n\t\t\t\tif ( ( m_effectIndex \u003d\u003d EFFECT_GRADIENT )\n\t\t\t\t\t\t\u0026\u0026 ( m_model[k].getGradient() !\u003d null ) )\n\t\t\t\t{\n\t\t\t\t\tg2.setPaint( m_model[k].getGradient() );\n\t\t\t\t\tg2.fill( m_model[k].getShape() );\n\t\t\t\t\tg2.fill( m_model[k].getShapePL() );\n\t\t\t\t}\n\n\t\t\t\t//setting plain color\n\t\t\t\telse if ( ( m_effectIndex \u003d\u003d EFFECT_PLAIN )\n\t\t\t\t\t\t  \u0026\u0026 ( m_model[k].getPieceColor() !\u003d null ) )\n\t\t\t\t{\n\t\t\t\t\tg2.setColor( m_model[k].getPieceColor() );\n\t\t\t\t\tg2.fill( m_model[k].getShape() );\n\t\t\t\t\tg2.fill( m_model[k].getShapePL() );\n\t\t\t\t}\n\n\t\t\t\t//setting selection color\n\t\t\t\tg2.setColor( m_SelectionColor );\n\t\t\t\tg2.draw( m_model[k].getShape() );\n\t\t\t\tg2.draw( m_model[k].getShapePL() );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Method \u003ccode\u003eupdateUI\u003c/code\u003e\n\t\t *\n\t\t *\n\t\t */\n\t\tpublic void updateUI()\n\t\t{\n\n\t\t\tsuper.updateUI();\n\n\t\t\tif ( popup \u003d\u003d null )\n\t\t\t\treturn;\n\n\t\t\tSwingUtilities.updateComponentTreeUI( popup );\n\t\t\tpopup.pack();\n\t\t\tSwingUtilities.invokeLater( new Runnable()\n\t\t\t{\n\n\t\t\t\tpublic void run()\n\t\t\t\t{\n\t\t\t\t\tsetupFontsAndColors();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**  */\n\t\tpublic void setupFontsAndColors() {}\n\n\t\tprotected void convertToAngles()\n\t\t{\n\n\t\t\tdouble sum   \u003d 0;\n\t\t\tdouble sumPL \u003d 0;\n\n\t\t\tfor ( int k \u003d 0; k \u003c m_model.length; k++ )\n\t\t\t{\n\t\t\t\tm_model[k].setVolumeAngle( Math.max( m_model[k].getVolume(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 ) );\n\t\t\t\tm_model[k].setPLAngle( Math.max( m_model[k].getPL(), 0 ) );\n\n\t\t\t\tsum   +\u003d m_model[k].getVolumeAngle();\n\t\t\t\tsumPL +\u003d m_model[k].getPLAngle();\n\t\t\t}\n\n\t\t\tfor ( int k \u003d 0; k \u003c m_model.length; k++ )\n\t\t\t{\n\t\t\t\tm_model[k].setVolumeAngle( m_model[k].getVolumeAngle()\n\t\t\t\t\t\t\t\t\t\t   * 360.0 / sum );\n\t\t\t\tm_model[k].setPLAngle( m_model[k].getPLAngle() * 360.0\n\t\t\t\t\t\t\t\t\t   / sumPL );\n\t\t\t}\n\n\t\t\tisSorted \u003d false;\n\n\t\t\tresetColors();\n\t\t}\n\n\t\tprotected void calculateAngles()\n\t\t{\n\n\t\t\tdouble start  \u003d 0.0;\n\t\t\tdouble finish \u003d 0.0;\n\n\t\t\tstartIndex        \u003d 0;\n\t\t\tlastSelectedPiece \u003d -1;\n\n\t\t\tfor ( int i \u003d 0; i \u003c m_model.length; i++ )\n\t\t\t{\n\t\t\t\tif ( m_model[i].isPieceSelected() )\n\t\t\t\t{\n\t\t\t\t\tlastSelectedPiece \u003d i;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ( lastSelectedPiece \u003e\u003d 0 )\n\t\t\t\t\t\u0026\u0026 ( m_model[lastSelectedPiece].isProfitPiece() !\u003d 0 ) )\n\t\t\t\tstartIndex \u003d lastSelectedPiece;\n\n\t\t\tfor ( int k \u003d 0; k \u003c m_model.length; k++ )\n\t\t\t{\n\t\t\t\tfinish \u003d start + m_model[k].getVolumeAngle();\n\n\t\t\t\tm_model[k].setStart( start );\n\t\t\t\tm_model[k].setFinish( finish );\n\n\t\t\t\tstart \u003d finish;\n\t\t\t}\n\n\t\t\tcalculatePLangles();\n\t\t}\n\n\t\tprotected void calculatePLangles()\n\t\t{\n\n\t\t\tdouble startPL  \u003d m_model[startIndex].getStart();\n\t\t\tdouble finishPL \u003d 0.0;\n\n\t\t\tfor ( int k \u003d startIndex; k \u003c m_model.length; k++ )\n\t\t\t{\n\t\t\t\tfinishPL \u003d startPL + m_model[k].getPLAngle();\n\n\t\t\t\tm_model[k].setStartPL( startPL );\n\t\t\t\tm_model[k].setFinishPL( finishPL );\n\n\t\t\t\tstartPL \u003d finishPL;\n\t\t\t}\n\n\t\t\tfor ( int k \u003d 0; k \u003c startIndex; k++ )\n\t\t\t{\n\t\t\t\tfinishPL \u003d startPL + m_model[k].getPLAngle();\n\n\t\t\t\tm_model[k].setStartPL( startPL );\n\t\t\t\tm_model[k].setFinishPL( finishPL );\n\n\t\t\t\tstartPL \u003d finishPL;\n\t\t\t}\n\t\t}\n\n\t\tprotected void createPiePiece( int index, double ww, double hh )\n\t\t{\n\n\t\t\t//calculating ring width\n\t\t\tdouble ringWidthX \u003d ww * m_ringCoefficient;\n\t\t\tdouble ringWidthY \u003d hh * m_ringCoefficient;\n\n\t\t\t//calculating angles\n\t\t\tdouble f1   \u003d Math.min( 90 - m_model[index].getStart(),\n\t\t\t\t\t\t\t\t\t90 - m_model[index].getFinish() );\n\t\t\tdouble f2   \u003d Math.max( 90 - m_model[index].getStart(),\n\t\t\t\t\t\t\t\t\t90 - m_model[index].getFinish() );\n\t\t\tdouble f1PL \u003d Math.min( 90 - m_model[index].getStartPL(),\n\t\t\t\t\t\t\t\t\t90 - m_model[index].getFinishPL() );\n\t\t\tdouble f2PL \u003d Math.max( 90 - m_model[index].getStartPL(),\n\t\t\t\t\t\t\t\t\t90 - m_model[index].getFinishPL() );\n\n\t\t\t//creating shapes\n\t\t\tArc2D.Double shp  \u003d new Arc2D.Double( m_x, m_y, ww, hh, f2PL,\n\t\t\t\t\t\t\t\t\t\t\t\t  ( -1 ) * ( f2PL - f1PL ),\n\t\t\t\t\t\t\t\t\t\t\t\t  Arc2D.PIE );\n\t\t\tShape        shp2 \u003d new Ellipse2D.Double( m_x + ringWidthX,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  m_y + ringWidthY,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  ww - 2 * ringWidthX,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  hh - 2 * ringWidthY );\n\t\t\tShape        shp3 \u003d new Arc2D.Double( m_x + ringWidthX\n\t\t\t\t\t\t\t\t\t\t\t\t  + m_pieGap,\n\t\t\t\t\t\t\t\t\t\t\t\t  m_y + ringWidthY\n\t\t\t\t\t\t\t\t\t\t\t\t  + m_pieGap,\n\t\t\t\t\t\t\t\t\t\t\t\t  ww - 2\n\t\t\t\t\t\t\t\t\t\t\t\t  * ( m_pieGap + ringWidthX ),\n\t\t\t\t\t\t\t\t\t\t\t\t  hh - 2\n\t\t\t\t\t\t\t\t\t\t\t\t  * ( m_pieGap + ringWidthY ),\n\t\t\t\t\t\t\t\t\t\t\t\t  f2, ( -1 ) * ( f2 - f1 ),\n\t\t\t\t\t\t\t\t\t\t\t\t  Arc2D.PIE );\n\t\t\tArea         a    \u003d new Area( shp );\n\t\t\tArea         a2   \u003d new Area( shp2 );\n\t\t\tArea         a3   \u003d new Area( shp3 );\n\n\t\t\ta.subtract( a2 );\n\n\t\t\tdouble f   \u003d ( f1 + f2 ) / 2 * Math.PI / 180;\n\t\t\tdouble fPL \u003d ( f1PL + f2PL ) / 2 * Math.PI / 180;\n\n\t\t\tif ( m_effectIndex \u003d\u003d EFFECT_GRADIENT )\n\t\t\t{\n\t\t\t\tPoint  center \u003d new Point( (int) shp.getCenterX(),\n\t\t\t\t\t\t\t\t\t\t   (int) shp.getCenterY() );\n\t\t\t\tdouble radius \u003d Math.min( ww / 2, hh / 2 );\n\t\t\t\tPoint  finish \u003d\n\t\t\t\t\tnew Point( (int) ( center.x + radius * Math.cos( f ) ),\n\t\t\t\t\t\t\t   (int) ( center.y - radius * Math.sin( f ) ) );\n\n\t\t\t\tm_model[index].setGradient( new GradientPaint( center.x,\n\t\t\t\t\t\tcenter.y, m_model[index].getGradientStart(),\n\t\t\t\t\t\tfinish.x, finish.y, m_model[index].getPieceColor(),\n\t\t\t\t\t\ttrue ) );\n\t\t\t}\n\n\t\t\t//translating if needed\n\t\t\tif ( m_pieGap !\u003d 0 )\n\t\t\t{\n\t\t\t\tAffineTransform s1 \u003d\n\t\t\t\t\tAffineTransform.getTranslateInstance( m_pieGap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  * Math.cos( fPL ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -m_pieGap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  * Math.sin( fPL ) );\n\n\t\t\t\ta \u003d new Area( s1.createTransformedShape( a ) );\n\n\t\t\t\tAffineTransform s2 \u003d\n\t\t\t\t\tAffineTransform.getTranslateInstance( m_pieGap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  * Math.cos( f ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -m_pieGap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  * Math.sin( f ) );\n\n\t\t\t\ta3 \u003d new Area( s2.createTransformedShape( a3 ) );\n\t\t\t}\n\n\t\t\tif ( m_pieGap !\u003d 0 )\n\t\t\t{\n\t\t\t\tAffineTransform s3 \u003d\n\t\t\t\t\tAffineTransform.getTranslateInstance( m_pieGap,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  m_pieGap );\n\n\t\t\t\ta3 \u003d new Area( s3.createTransformedShape( a3 ) );\n\t\t\t\ta  \u003d new Area( s3.createTransformedShape( a ) );\n\t\t\t}\n\n\t\t\tm_model[index].setShape( new Area( a3 ) );\n\t\t\tm_model[index].setShapePL( a );\n\t\t\ta3.add( a );\n\n\t\t\t//creating shadows if needed\n\t\t\t//if ( m_drawShadow )\n\t\t\t//{\n\t\t\tAffineTransform s0     \u003d\n\t\t\t\tAffineTransform.getTranslateInstance( m_pieGap, m_pieGap );\n\t\t\tShape           shadow \u003d s0.createTransformedShape( a3 );\n\n\t\t\tm_model[index].setShadow( shadow );\n\n\t\t\t//}\n\t\t}\n\n\t\tprotected void fillByImage( Graphics2D g2, Shape shape, int xOffset )\n\t\t{\n\n\t\t\tif ( m_foregroundImage \u003d\u003d null )\n\t\t\t\treturn;\n\n\t\t\tint wImg \u003d m_foregroundImage.getWidth( this );\n\t\t\tint hImg \u003d m_foregroundImage.getHeight( this );\n\n\t\t\tif ( ( wImg \u003c\u003d 0 ) || ( hImg \u003c\u003d 0 ) )\n\t\t\t\treturn;\n\n\t\t\tg2.setClip( shape );\n\n\t\t\tRectangle bounds \u003d shape.getBounds();\n\n\t\t\tfor ( int xx \u003d bounds.x + xOffset; xx \u003c bounds.x + bounds.width;\n\t\t\t\t\txx +\u003d wImg )\n\t\t\t\tfor ( int yy \u003d bounds.y; yy \u003c bounds.y + bounds.height;\n\t\t\t\t\t\tyy +\u003d hImg )\n\t\t\t\t\tg2.drawImage( m_foregroundImage, xx, yy, this );\n\t\t}\n\n\t\tprotected void setGraphicOptions( Graphics2D g )\n\t\t{\n\n\t\t\tg.setRenderingHint( RenderingHints.KEY_ANTIALIASING,\n\t\t\t\t\t\t\t\tRenderingHints.VALUE_ANTIALIAS_ON );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_COLOR_RENDERING,\n\t\t\t\t\t\t\t\tRenderingHints.VALUE_COLOR_RENDER_QUALITY );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_ALPHA_INTERPOLATION,\n\t\t\t\t\t\t\t\tRenderingHints\n\t\t\t\t\t\t\t\t\t.VALUE_ALPHA_INTERPOLATION_QUALITY );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_FRACTIONALMETRICS,\n\t\t\t\t\t\t\t\tRenderingHints.VALUE_FRACTIONALMETRICS_ON );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_STROKE_CONTROL,\n\t\t\t\t\t\t\t\tRenderingHints.VALUE_STROKE_PURE );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_RENDERING,\n\t\t\t\t\t\t\t\tRenderingHints.VALUE_RENDER_QUALITY );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_TEXT_ANTIALIASING,\n\t\t\t\t\t\t\t\tRenderingHints.VALUE_TEXT_ANTIALIAS_ON );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_INTERPOLATION,\n\t\t\t\t\t\t\t\tRenderingHints\n\t\t\t\t\t\t\t\t\t.VALUE_INTERPOLATION_NEAREST_NEIGHBOR );\n\t\t\tg.setRenderingHint( RenderingHints.KEY_DITHERING,\n\t\t\t\t\t\t\t\tRenderingHints.VALUE_DITHER_ENABLE );\n\t\t}\n\t}\n}\n\nclass FTOpiePiece\n{\n\n\tprivate boolean       isSelected \u003d false;\n\tprivate int           isProfit;\n\tprivate double        angleOfVolume;\n\tprivate double        angleOfPL;\n\tprivate double        volume;\n\tprivate double        pl;\n\tprivate Color         pieceColor;\n\tprivate GradientPaint gradient;\n\tprivate String        pieceName;\n\tprivate String        id;\n\tprivate double        start;\n\tprivate double        finish;\n\tprivate double        startPL;\n\tprivate double        finishPL;\n\tprivate Shape         instance;\n\tprivate Shape         instancePL;\n\tprivate Shape         shadow;\n\tprivate boolean       isRepaintNeeded \u003d false;\n\tprivate Color         gradStart       \u003d Color.white;\n\tprivate Object        source;\n\n\t/**\n\t * Constructor \u003ccode\u003eFTOpiePiece\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eid\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t * @param \u003ccode\u003ename\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t * @param \u003ccode\u003evolume\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t * @param \u003ccode\u003epl\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t * @param \u003ccode\u003eisProfit\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTOpiePiece( String id, String name, double volume, double pl,\n\t\t\t\t\t\tint isProfit, Object source )\n\t{\n\n\t\tthis.pieceName \u003d name;\n\t\tthis.volume    \u003d volume;\n\t\tthis.pl        \u003d pl;\n\t\tthis.isProfit  \u003d isProfit;\n\t\tthis.start     \u003d start;\n\t\tthis.finish    \u003d finish;\n\t\tthis.id        \u003d id;\n\t\tthis.source    \u003d source;\n\t}\n\n\tprotected Object getSource()\n\t{\n\t\treturn source;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetId\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic String getId()\n\t{\n\t\treturn id;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetGradientStart\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eColor\u003c/code\u003e type\n\t *\n\t */\n\tpublic Color getGradientStart()\n\t{\n\t\treturn gradStart;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetGradientStart\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eColor\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setGradientStart( Color c )\n\t{\n\t\tgradStart \u003d c;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetName\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic String getName()\n\t{\n\t\treturn pieceName;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetVolume\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getVolume()\n\t{\n\t\treturn volume;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetVolume\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ev\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setVolume( double v )\n\t{\n\t\tvolume \u003d v;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetPL\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getPL()\n\t{\n\t\treturn pl;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetPL\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003epl\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setPL( double pl )\n\t{\n\t\tthis.pl \u003d pl;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetVolumeAngle\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getVolumeAngle()\n\t{\n\t\treturn angleOfVolume;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetVolumeAngle\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ev\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setVolumeAngle( double v )\n\t{\n\t\tangleOfVolume \u003d v;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetPLAngle\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getPLAngle()\n\t{\n\t\treturn angleOfPL;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetPLAngle\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003epl\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setPLAngle( double pl )\n\t{\n\t\tangleOfPL \u003d pl;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eisProfitPiece\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic int isProfitPiece()\n\t{\n\t\treturn isProfit;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetProfit\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ep\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setProfit( int p )\n\t{\n\t\tisProfit \u003d p;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eisPieceSelected\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean isPieceSelected()\n\t{\n\t\treturn isSelected;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetPieceSelected\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eselected\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setPieceSelected( boolean selected )\n\t{\n\t\tisSelected \u003d selected;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetPieceColor\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eColor\u003c/code\u003e type\n\t *\n\t */\n\tpublic Color getPieceColor()\n\t{\n\t\treturn pieceColor;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetPieceColor\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ecolor\u003c/code\u003e is of \u003ccode\u003eColor\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setPieceColor( Color color )\n\t{\n\t\tpieceColor \u003d color;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetGradient\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eGradientPaint\u003c/code\u003e type\n\t *\n\t */\n\tpublic GradientPaint getGradient()\n\t{\n\t\treturn gradient;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetGradient\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003egradient\u003c/code\u003e is of \u003ccode\u003eGradientPaint\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setGradient( GradientPaint gradient )\n\t{\n\t\tthis.gradient \u003d gradient;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetStart\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getStart()\n\t{\n\t\treturn start;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetStart\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003estartAngle\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setStart( double startAngle )\n\t{\n\t\tstart \u003d startAngle;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetFinish\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getFinish()\n\t{\n\t\treturn finish;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetFinish\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003efinishAngle\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setFinish( double finishAngle )\n\t{\n\t\tfinish \u003d finishAngle;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetStartPL\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getStartPL()\n\t{\n\t\treturn startPL;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetStartPL\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003estartAngle\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setStartPL( double startAngle )\n\t{\n\t\tstartPL \u003d startAngle;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetFinishPL\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getFinishPL()\n\t{\n\t\treturn finishPL;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetFinishPL\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003efinishAngle\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setFinishPL( double finishAngle )\n\t{\n\t\tfinishPL \u003d finishAngle;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetShape\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eShape\u003c/code\u003e type\n\t *\n\t */\n\tpublic Shape getShape()\n\t{\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetShape\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eshape\u003c/code\u003e is of \u003ccode\u003eShape\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setShape( Shape shape )\n\t{\n\t\tinstance \u003d shape;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetShapePL\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eShape\u003c/code\u003e type\n\t *\n\t */\n\tpublic Shape getShapePL()\n\t{\n\t\treturn instancePL;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetShapePL\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eshape\u003c/code\u003e is of \u003ccode\u003eShape\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setShapePL( Shape shape )\n\t{\n\t\tinstancePL \u003d shape;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetShadow\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eShape\u003c/code\u003e type\n\t *\n\t */\n\tpublic Shape getShadow()\n\t{\n\t\treturn shadow;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetShadow\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eshape\u003c/code\u003e is of \u003ccode\u003eShape\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setShadow( Shape shape )\n\t{\n\t\tshadow \u003d shape;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eisRepaintRequired\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic boolean isRepaintRequired()\n\t{\n\t\treturn isRepaintNeeded;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetRepaintRequired\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eproceed\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic void setRepaintRequired( boolean proceed )\n\t{\n\t\tisRepaintNeeded \u003d proceed;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003etoString\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic String toString()\n\t{\n\n\t\tString text \u003d \"\\n\";\n\n\t\ttext +\u003d \"**********************\" + \"\\n\";\n\t\ttext +\u003d \"**********************\" + \"\\n\";\n\t\ttext +\u003d \"ID \u003d \" + id + \"\\n\";\n\t\ttext +\u003d \"Name \u003d \" + pieceName + \"\\n\";\n\t\ttext +\u003d \"Volume \u003d \" + volume + \"\\n\";\n\t\ttext +\u003d \"Pl \u003d \" + pl + \"\\n\";\n\t\ttext +\u003d \"Profit \u003d \" + isProfit + \"\\n\";\n\t\ttext +\u003d \"**********************\" + \"\\n\";\n\n\t\treturn text;\n\t}\n}\n\nclass FTOchartComparator implements Comparator\n{\n\n\t/**\n\t * Method \u003ccode\u003ecompare\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eo1\u003c/code\u003e is of \u003ccode\u003eObject\u003c/code\u003e type\n\t * @param \u003ccode\u003eo2\u003c/code\u003e is of \u003ccode\u003eObject\u003c/code\u003e type\n\t *\n\t * @return the value of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic int compare( Object o1, Object o2 )\n\t{\n\n\t\tint         result \u003d 0;\n\t\tFTOpiePiece p1     \u003d (FTOpiePiece) o1;\n\t\tFTOpiePiece p2     \u003d (FTOpiePiece) o2;\n\t\tint         pr1    \u003d p1.isProfitPiece();\n\t\tint         pr2    \u003d p2.isProfitPiece();\n\n\t\tif ( pr1 !\u003d pr2 )\n\t\t{\n\t\t\tresult \u003d pr1 - pr2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdouble a1 \u003d p1.getPL();\n\t\t\tdouble a2 \u003d p2.getPL();\n\n\t\t\tif ( pr1 \u003d\u003d 0 )\n\t\t\t{\n\t\t\t\ta1 \u003d p1.getVolume();\n\t\t\t\ta2 \u003d p2.getVolume();\n\t\t\t}\n\n\t\t\tif ( pr1 \u003c 0 )\n\t\t\t\tresult \u003d (int) ( a2 - a1 );\n\t\t\telse\n\t\t\t\tresult \u003d (int) ( a1 - a2 );\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nclass FTOchartPopupMenu extends JPopupMenu implements ActionListener\n{\n\n\tprivate FTOchartFrame parent;\n\tprivate JMenuItem     showLegend     \u003d null;\n\tprivate JMenuItem     showShadows    \u003d null;\n\tprivate JMenuItem     gradientPaint  \u003d null;\n\tprivate JMenuItem     ellipseEnabled \u003d null;\n\tprivate JMenuItem     sortingEnabled \u003d null;\n\tprivate JMenuItem     increaseGap    \u003d null;\n\tprivate JMenuItem     decreaseGap    \u003d null;\n\n\t/**\n\t * Constructor \u003ccode\u003eFTOchartPopupMenu\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eparent\u003c/code\u003e is of \u003ccode\u003eFTOchartFrame\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTOchartPopupMenu( FTOchartFrame parent )\n\t{\n\n\t\tsuper();\n\n\t\tthis.parent \u003d parent;\n\n\t\taddMenuItems();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003edestroy\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void destroy()\n\t{\n\n\t\tparent \u003d null;\n\n\t\tremoveAll();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eactionPerformed\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ee\u003c/code\u003e is of \u003ccode\u003eActionEvent\u003c/code\u003e type\n\t *\n\t */\n\tpublic void actionPerformed( ActionEvent e )\n\t{\n\n\t\tJMenuItem source \u003d (JMenuItem) e.getSource();\n\n\t\tif ( source \u003d\u003d showLegend )\n\t\t\tparent.invertLegend();\n\t\telse if ( source \u003d\u003d showShadows )\n\t\t\tparent.invertShadows();\n\t\telse if ( source \u003d\u003d gradientPaint )\n\t\t\tparent.invertGradient();\n\t\telse if ( source \u003d\u003d ellipseEnabled )\n\t\t\tparent.invertEllipse();\n\t\telse if ( source \u003d\u003d sortingEnabled )\n\t\t\tparent.invertSorting();\n\t\telse if ( source \u003d\u003d increaseGap )\n\t\t\tparent.increaseGap();\n\t\telse if ( source \u003d\u003d decreaseGap )\n\t\t\tparent.decreaseGap();\n\t}\n\n\tprivate void addMenuItems()\n\t{\n\n\t\tshowShadows \u003d new JMenuItem( \"\" );\n\n\t\tshowShadows.addActionListener( this );\n\t\tadd( showShadows );\n\t\tshowShadows.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_S, 0,\n\t\t\t\tfalse ) );\n\n\t\tellipseEnabled \u003d new JMenuItem( \"\" );\n\n\t\tellipseEnabled.addActionListener( this );\n\t\tadd( ellipseEnabled );\n\t\tellipseEnabled.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_E,\n\t\t\t\t0, false ) );\n\n\t\tsortingEnabled \u003d new JMenuItem( \"\" );\n\n\t\tsortingEnabled.addActionListener( this );\n\n\t\t/*add( sortingEnabled );\n\t\tsortingEnabled.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_O, 0,false ) );*/\n\t\tgradientPaint \u003d new JMenuItem( \"\" );\n\n\t\tgradientPaint.addActionListener( this );\n\t\tadd( gradientPaint );\n\t\tgradientPaint.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_G,\n\t\t\t\t0, false ) );\n\n\t\tJSeparator s \u003d new JSeparator();\n\n\t\tadd( s );\n\n\t\tincreaseGap \u003d new JMenuItem( \"Increase gap\" );\n\n\t\tincreaseGap.addActionListener( this );\n\t\tadd( increaseGap );\n\t\tincreaseGap.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_UP,\n\t\t\t\t0, false ) );\n\n\t\tdecreaseGap \u003d new JMenuItem( \"Decrease gap\" );\n\n\t\tdecreaseGap.addActionListener( this );\n\t\tadd( decreaseGap );\n\t\tdecreaseGap.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_DOWN,\n\t\t\t\t0, false ) );\n\n\t\ts \u003d new JSeparator();\n\n\t\tadd( s );\n\n\t\tshowLegend \u003d new JMenuItem( \"\" );\n\n\t\tshowLegend.addActionListener( this );\n\t\tadd( showLegend );\n\t\tshowLegend.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_L,\n\t\t\t\t0 ) );\n\n\t\t//resetPopup();\n\t}\n\n\t/**\n\t * Method \u003ccode\u003eshow\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003einvoker\u003c/code\u003e is of \u003ccode\u003eComponent\u003c/code\u003e type\n\t * @param \u003ccode\u003ex\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t * @param \u003ccode\u003ey\u003c/code\u003e is of \u003ccode\u003eint\u003c/code\u003e type\n\t *\n\t */\n\tpublic void show( Component invoker, int x, int y )\n\t{\n\n\t\tif ( parent.isEmpty() )\n\t\t\treturn;\n\n\t\tresetPopup();\n\t\tsuper.show( invoker, x, y );\n\t}\n\n\tprivate void resetPopup()\n\t{\n\n\t\tString text \u003d new String();\n\n\t\tif ( parent.getShadows() )\n\t\t\ttext \u003d \"Hide shadows\";\n\t\telse\n\t\t\ttext \u003d \"Show shadows\";\n\n\t\tshowShadows.setText( text );\n\n\t\tif ( parent.getEllipseEnabled() )\n\t\t\ttext \u003d \"Disable ellipse\";\n\t\telse\n\t\t\ttext \u003d \"Enable ellipse\";\n\n\t\tellipseEnabled.setText( text );\n\n\t\tif ( parent.getLegend() )\n\t\t\ttext \u003d \"Hide legend\";\n\t\telse\n\t\t\ttext \u003d \"Show legend\";\n\n\t\tshowLegend.setText( text );\n\n\t\tif ( parent.getSortingNeeded() )\n\t\t\ttext \u003d \"Sorting disabled\";\n\t\telse\n\t\t\ttext \u003d \"Sorting enabled\";\n\n\t\tsortingEnabled.setText( text );\n\n\t\tif ( parent.getGradientPaint() )\n\t\t\ttext \u003d \"Use plain painting\";\n\t\telse\n\t\t\ttext \u003d \"Use Gradient painting\";\n\n\t\tgradientPaint.setText( text );\n\n\t\tif ( (int) ( parent.getGap() * 1000 )\n\t\t\t\t\u003d\u003d (int) ( FTO2dChart.MAX_GAP * 1000 ) )\n\t\t\tincreaseGap.setEnabled( false );\n\t\telse\n\t\t\tincreaseGap.setEnabled( true );\n\n\t\tif ( parent.getGap() \u003d\u003d FTO2dChart.MIN_GAP )\n\t\t\tdecreaseGap.setEnabled( false );\n\t\telse\n\t\t\tdecreaseGap.setEnabled( true );\n\t}\n}\n\n//Test class\nclass FTOinputData\n{\n\n\tprivate Object id;\n\tprivate String name;\n\tprivate double value;\n\tprivate double delta;\n\n\t/**\n\t * Constructor \u003ccode\u003eFTOinputData\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eid\u003c/code\u003e is of \u003ccode\u003eObject\u003c/code\u003e type\n\t * @param \u003ccode\u003ename\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t * @param \u003ccode\u003evalue\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t * @param \u003ccode\u003edelta\u003c/code\u003e is of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic FTOinputData( Object id, String name, double value, double delta )\n\t{\n\n\t\tthis.id    \u003d id;\n\t\tthis.name  \u003d name;\n\t\tthis.value \u003d value;\n\t\tthis.delta \u003d delta;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003ecloneMe\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eObject\u003c/code\u003e type\n\t *\n\t */\n\tpublic Object cloneMe()\n\t{\n\n\t\ttry\n\t\t{\n\t\t\treturn super.clone();\n\t\t}\n\t\tcatch ( java.lang.CloneNotSupportedException ex )\n\t\t{\n\n\t\t\t// do nothing - we\u0027re cloneable\n\t\t\t// this try/catch block is only to make the compiler happy\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetId\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eObject\u003c/code\u003e type\n\t *\n\t */\n\tpublic Object getId()\n\t{\n\t\treturn id;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetSymbol\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic String getSymbol()\n\t{\n\t\treturn name;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetCurrentValue\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getCurrentValue()\n\t{\n\t\treturn value;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetDeltaValue\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003edouble\u003c/code\u003e type\n\t *\n\t */\n\tpublic double getDeltaValue()\n\t{\n\t\treturn delta;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetDateTime\u003c/code\u003e\n\t *\n\t *\n\t * @return the value of \u003ccode\u003eDate\u003c/code\u003e type\n\t *\n\t */\n\tpublic Date getDateTime()\n\t{\n\t\treturn new Date( System.currentTimeMillis() );\n\t}\n}\n\nclass FTOplafMacros implements SwingConstants\n{\n\n\t// don\u0027t make these final, since the value is\n\t// different on each platform\n\tprivate static String LINE_SEPARATOR     \u003d\n\t\tSystem.getProperty( \"line.separator\" );\n\tprivate static int    LINE_SEPARATOR_LEN \u003d LINE_SEPARATOR.length();\n\n\t/**\n\t * Method \u003ccode\u003ebreakupLines\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003etext\u003c/code\u003e is of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t * @return the value of \u003ccode\u003eString[]\u003c/code\u003e type\n\t *\n\t */\n\tpublic static String[] breakupLines( String text )\n\t{\n\n\t\tint len \u003d text.length();\n\n\t\tif ( len \u003d\u003d 0 )\n\t\t\treturn new String[]{ \"\" };\n\t\telse\n\t\t{\n\t\t\tVector data  \u003d new Vector( 10 );\n\t\t\tint    start \u003d 0;\n\t\t\tint    i     \u003d 0;\n\n\t\t\twhile ( i \u003c len )\n\t\t\t{\n\t\t\t\tif ( text.startsWith( LINE_SEPARATOR, i ) )\n\t\t\t\t{\n\t\t\t\t\tdata.addElement( text.substring( start, i ) );\n\n\t\t\t\t\tstart \u003d i + LINE_SEPARATOR_LEN;\n\t\t\t\t\ti     \u003d start;\n\t\t\t\t}\n\t\t\t\telse if ( text.charAt( i ) \u003d\u003d \u0027\\n\u0027 )\n\t\t\t\t{\n\t\t\t\t\tdata.addElement( text.substring( start, i ) );\n\n\t\t\t\t\tstart \u003d i + 1;\n\t\t\t\t\ti     \u003d start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( start !\u003d len )\n\t\t\t\tdata.addElement( text.substring( start ) );\n\n\t\t\tint    numlines \u003d data.size();\n\t\t\tString lines[]  \u003d new String[numlines];\n\n\t\t\tdata.copyInto( lines );\n\n\t\t\treturn lines;\n\t\t}\n\t}\n}\n\nclass FTOmultiLineToolTipUI extends ToolTipUI\n{\n\n\t/** Field \u003ccode\u003eSINGLETON\u003c/code\u003e */\n\tstatic FTOmultiLineToolTipUI SINGLETON \u003d new FTOmultiLineToolTipUI();\n\n\t/** Field \u003ccode\u003eDISPLAY_ACCELERATOR\u003c/code\u003e */\n\tstatic boolean DISPLAY_ACCELERATOR \u003d true;\n\n\t/** Field \u003ccode\u003eaccelerator_offset\u003c/code\u003e */\n\tint accelerator_offset \u003d 15;\n\n\t/** Field \u003ccode\u003einset\u003c/code\u003e */\n\tint inset \u003d 3;\n\n\tprivate FTOmultiLineToolTipUI() {}\n\n\t/**\n\t * Method \u003ccode\u003einitialize\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic static void initialize()\n\t{\n\n\t\t// don\u0027t hardcode class name, this way we can obfuscate.\n\t\tString key  \u003d \"ToolTipUI\";\n\t\tClass  cls  \u003d SINGLETON.getClass();\n\t\tString name \u003d cls.getName();\n\n\t\tUIManager.put( key, name );\n\t\tUIManager.put( name, cls );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003ecreateUI\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eJComponent\u003c/code\u003e type\n\t *\n\t * @return the value of \u003ccode\u003eComponentUI\u003c/code\u003e type\n\t *\n\t */\n\tpublic static ComponentUI createUI( JComponent c )\n\t{\n\t\treturn SINGLETON;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003einstallUI\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eJComponent\u003c/code\u003e type\n\t *\n\t */\n\tpublic void installUI( JComponent c )\n\t{\n\n\t\tLookAndFeel.installColorsAndFont( c, \"ToolTip.background\",\n\t\t\t\t\t\t\t\t\t\t  \"ToolTip.foreground\",\n\t\t\t\t\t\t\t\t\t\t  \"ToolTip.font\" );\n\t\tLookAndFeel.installBorder( c, \"ToolTip.border\" );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003euninstallUI\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eJComponent\u003c/code\u003e type\n\t *\n\t */\n\tpublic void uninstallUI( JComponent c )\n\t{\n\t\tLookAndFeel.uninstallBorder( c );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003esetDisplayAcceleratorKey\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eval\u003c/code\u003e is of \u003ccode\u003eboolean\u003c/code\u003e type\n\t *\n\t */\n\tpublic static void setDisplayAcceleratorKey( boolean val )\n\t{\n\t\tDISPLAY_ACCELERATOR \u003d val;\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetPreferredSize\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eJComponent\u003c/code\u003e type\n\t *\n\t * @return the value of \u003ccode\u003eDimension\u003c/code\u003e type\n\t *\n\t */\n\tpublic Dimension getPreferredSize( JComponent c )\n\t{\n\n\t\tFont font \u003d c.getFont();\n\n\t\t//      FontMetrics fontMetrics \u003d\n\t\t//          Toolkit.getDefaultToolkit().getFontMetrics( font );\n\t\tFontMetrics fontMetrics \u003d c.getFontMetrics( font );\n\n\t\t//Toolkit.getDefaultToolkit().getFontMetrics( font );\n\t\tint    fontHeight \u003d fontMetrics.getHeight();\n\t\tString tipText    \u003d ( (JToolTip) c ).getTipText();\n\n\t\tif ( tipText \u003d\u003d null )\n\t\t\ttipText \u003d \"\";\n\n\t\tString    lines[]   \u003d FTOplafMacros.breakupLines( tipText );\n\t\tint       num_lines \u003d lines.length;\n\t\tDimension dimension;\n\t\tint       width, height, onewidth;\n\n\t\theight \u003d num_lines * fontHeight;\n\t\twidth  \u003d 0;\n\n\t\tfor ( int i \u003d 0; i \u003c num_lines; i++ )\n\t\t{\n\t\t\tonewidth \u003d fontMetrics.stringWidth( lines[i] );\n\n\t\t\tif ( DISPLAY_ACCELERATOR \u0026\u0026 ( i \u003d\u003d num_lines - 1 ) )\n\t\t\t{\n\t\t\t\tString keyText \u003d getAcceleratorString( (JToolTip) c );\n\n\t\t\t\tif ( !keyText.equals( \"\" ) )\n\t\t\t\t\tonewidth +\u003d fontMetrics.stringWidth( keyText )\n\t\t\t\t\t\t\t\t+ accelerator_offset;\n\t\t\t}\n\n\t\t\twidth \u003d Math.max( width, onewidth );\n\t\t}\n\n\t\treturn new Dimension( width + inset * 2, height + inset * 2 );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetMinimumSize\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eJComponent\u003c/code\u003e type\n\t *\n\t * @return the value of \u003ccode\u003eDimension\u003c/code\u003e type\n\t *\n\t */\n\tpublic Dimension getMinimumSize( JComponent c )\n\t{\n\t\treturn getPreferredSize( c );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetMaximumSize\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eJComponent\u003c/code\u003e type\n\t *\n\t * @return the value of \u003ccode\u003eDimension\u003c/code\u003e type\n\t *\n\t */\n\tpublic Dimension getMaximumSize( JComponent c )\n\t{\n\t\treturn getPreferredSize( c );\n\t}\n\n\t/**\n\t * Method \u003ccode\u003epaint\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003eg\u003c/code\u003e is of \u003ccode\u003eGraphics\u003c/code\u003e type\n\t * @param \u003ccode\u003ec\u003c/code\u003e is of \u003ccode\u003eJComponent\u003c/code\u003e type\n\t *\n\t */\n\tpublic void paint( Graphics g, JComponent c )\n\t{\n\n\t\tFont font \u003d c.getFont();\n\n\t\t//FontMetrics fontMetrics \u003d\n\t\t//  Toolkit.getDefaultToolkit().getFontMetrics( font );\n\t\tFontMetrics fontMetrics \u003d c.getFontMetrics( font );\n\t\tDimension   dimension   \u003d c.getSize();\n\t\tint         fontHeight  \u003d fontMetrics.getHeight();\n\t\tint         fontAscent  \u003d fontMetrics.getAscent();\n\t\tString      tipText     \u003d ( (JToolTip) c ).getTipText();\n\t\tString      lines[]     \u003d FTOplafMacros.breakupLines( tipText );\n\t\tint         num_lines   \u003d lines.length;\n\t\tint         height;\n\t\tint         i;\n\n\t\tg.setColor( c.getBackground() );\n\t\tg.fillRect( 0, 0, dimension.width, dimension.height );\n\t\tg.setColor( c.getForeground() );\n\n\t\tfor ( i \u003d 0, height \u003d 2 + fontAscent; i \u003c num_lines;\n\t\t\t\ti++, height +\u003d fontHeight )\n\t\t{\n\t\t\tg.drawString( lines[i], inset, height );\n\n\t\t\tif ( DISPLAY_ACCELERATOR \u0026\u0026 ( i \u003d\u003d num_lines - 1 ) )\n\t\t\t{\n\t\t\t\tString keyText \u003d getAcceleratorString( (JToolTip) c );\n\n\t\t\t\tif ( !keyText.equals( \"\" ) )\n\t\t\t\t{\n\t\t\t\t\tFont smallFont \u003d new Font( font.getName(),\n\t\t\t\t\t\t\t\t\t\t\t   font.getStyle(),\n\t\t\t\t\t\t\t\t\t\t\t   font.getSize() - 2 );\n\n\t\t\t\t\tg.setFont( smallFont );\n\t\t\t\t\tg.drawString( keyText,\n\t\t\t\t\t\t\t\t  fontMetrics.stringWidth( lines[i] )\n\t\t\t\t\t\t\t\t  + accelerator_offset, height );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Method \u003ccode\u003egetAcceleratorString\u003c/code\u003e\n\t *\n\t *\n\t * @param \u003ccode\u003etip\u003c/code\u003e is of \u003ccode\u003eJToolTip\u003c/code\u003e type\n\t *\n\t * @return the value of \u003ccode\u003eString\u003c/code\u003e type\n\t *\n\t */\n\tpublic String getAcceleratorString( JToolTip tip )\n\t{\n\n\t\tJComponent comp \u003d tip.getComponent();\n\n\t\tif ( comp \u003d\u003d null )\n\t\t\treturn \"\";\n\n\t\tKeyStroke[] keys          \u003d comp.getRegisteredKeyStrokes();\n\t\tString      controlKeyStr \u003d \"\";\n\t\tKeyStroke   postTip       \u003d KeyStroke.getKeyStroke( KeyEvent.VK_F1,\n\t\t\t\t\t\t\t\t\t\tEvent.CTRL_MASK );\n\n\t\tfor ( int i \u003d 0; i \u003c keys.length; i++ )\n\t\t{\n\n\t\t\t// Ignore ToolTipManager postTip action,\n\t\t\t// in swing1.1beta3 and onward\n\t\t\tif ( postTip.equals( keys[i] ) )\n\t\t\t\tcontinue;\n\n\t\t\tchar c   \u003d (char) keys[i].getKeyCode();\n\t\t\tint  mod \u003d keys[i].getModifiers();\n\n\t\t\tif ( mod \u003d\u003d InputEvent.CTRL_MASK )\n\t\t\t{\n\t\t\t\tcontrolKeyStr \u003d \"Ctrl+\" + (char) keys[i].getKeyCode();\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if ( mod \u003d\u003d InputEvent.ALT_MASK )\n\t\t\t{\n\t\t\t\tcontrolKeyStr \u003d \"Alt+\" + (char) keys[i].getKeyCode();\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn controlKeyStr;\n\t}\n}\n\nclass FTOtoolTip extends JToolTip\n{\n\n\t/**\n\t * Method \u003ccode\u003eupdateUI\u003c/code\u003e\n\t *\n\t *\n\t */\n\tpublic void updateUI()\n\t{\n\t\tsetUI( FTOmultiLineToolTipUI.SINGLETON );\n\t}\n}",
    "Was able to reproduce with test case, thanks much.",
    "Simplified test case:\n\nimport javax.swing.JComponent;\nimport javax.swing.JPanel;\n\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\npublic class FTOchartFrame {\n\tpublic void selectionChanged(int index, boolean notify) {}\n}\n\nclass FTOchartLegend extends JPanel {\n\n\tFTOchartFrame parent;\n\tclass FTOlegendPanel extends JComponent {\n\t\tpublic FTOlegendPanel() {\n\t\t\tObject x \u003d new Object() {\n\t\t\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\t\t\tparent.selectionChanged(0, true);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n}\n\nas soon as removing the super type (JComponent from FTOlegendPanel, it compiles \nok)...\n\n\n",
    "Dmitry,\n\nAs a work-around, you can qualify the invocation of parent.selectionChanged\n(...) as follows, and it will compile ok.\n\nFTOchartLegend.this.parent.selectionChanged(...)",
    "Problem identified. When resolving single names, we did set the depth \nincorrectly (during each iteration of the loop through enclosing scopes) \ninstead of when returning the found file only.\n\nFixed, regression test added (will go into next integration build)."
  ],
  "commentCreationDates": [
    "2002-01-30T16:00:23+01:00",
    "2002-01-30T19:30:17+01:00",
    "2002-01-30T19:39:27+01:00",
    "2002-01-31T12:24:10+01:00",
    "2002-02-01T18:13:17+01:00",
    "2002-02-01T18:28:47+01:00",
    "2002-02-02T11:46:49+01:00",
    "2002-02-11T09:28:18+01:00",
    "2002-02-11T11:51:13+01:00",
    "2002-02-11T12:18:02+01:00",
    "2002-02-11T12:49:44+01:00",
    "2002-02-11T12:51:47+01:00",
    "2002-02-11T14:37:42+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Errors during build.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.events.BuildManager.build",
          "source": "BuildManager.java:222"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.endOperation",
          "source": "Workspace.java:701"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1237"
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation.run",
          "source": "WorkspaceModifyOperation.java:78"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext.runInCurrentThread",
          "source": "ModalContext.java:296"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext.run",
          "source": "ModalContext.java:249"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.run",
          "source": "WizardDialog.java:713"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizard.performFinish",
          "source": "NewProjectCreationWizard.java:63"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.finishPressed",
          "source": "WizardDialog.java:570"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.buttonPressed",
          "source": "WizardDialog.java:311"
        },
        {
          "method": "org.eclipse.jface.dialogs.Dialog$1.widgetSelected",
          "source": "Dialog.java:344"
        },
        {
          "method": "org.eclipse.swt.widgets.TypedListener.handleEvent",
          "source": "TypedListener.java:85"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:74"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.notifyListeners",
          "source": "Widget.java:637"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:1413"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1205"
        },
        {
          "method": "org.eclipse.jface.window.Window.runEventLoop",
          "source": "Window.java:536"
        },
        {
          "method": "org.eclipse.jface.window.Window.open",
          "source": "Window.java:523"
        },
        {
          "method": "org.eclipse.ui.actions.NewProjectAction.run",
          "source": "NewProjectAction.java:96"
        },
        {
          "method": "org.eclipse.jface.action.Action.runWithEvent",
          "source": "Action.java:452"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:407"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent",
          "source": "ActionContributionItem.java:361"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$0",
          "source": "ActionContributionItem.java:352"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent",
          "source": "ActionContributionItem.java:47"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:74"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.notifyListeners",
          "source": "Widget.java:637"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:1413"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1205"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:844"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:827"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:878"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:321"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:151"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:502"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:362"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "8758",
      "date": "2002-01-30T16:00:23+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.BlockScope.emulateOuterAccess",
          "source": "BlockScope.java:347"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.SingleNameReference.manageEnclosingInstanceAccessIfNecessary",
          "source": "SingleNameReference.java:558"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseCode",
          "source": "SingleNameReference.java:119"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode",
          "source": "MessageSend.java:31"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.Block.analyseCode",
          "source": "Block.java:36"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode",
          "source": "IfStatement.java:59"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analyseCode",
          "source": "AbstractMethodDeclaration.java:79"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode",
          "source": "TypeDeclaration.java:145"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.analyseCode",
          "source": "QualifiedAllocationExpression.java:41"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode",
          "source": "MessageSend.java:35"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.analyseCode",
          "source": "ConstructorDeclaration.java:79"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode",
          "source": "TypeDeclaration.java:208"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode",
          "source": "TypeDeclaration.java:345"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode",
          "source": "CompilationUnitDeclaration.java:67"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:456"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:261"
        },
        {
          "method": "org.eclipse.jdt.internal.core.newbuilder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:212"
        },
        {
          "method": "org.eclipse.jdt.internal.core.newbuilder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:188"
        },
        {
          "method": "org.eclipse.jdt.internal.core.newbuilder.BatchImageBuilder.build",
          "source": "BatchImageBuilder.java:49"
        },
        {
          "method": "org.eclipse.jdt.internal.core.newbuilder.JavaBuilder.buildAll",
          "source": "JavaBuilder.java:117"
        },
        {
          "method": "org.eclipse.jdt.internal.core.newbuilder.JavaBuilder.build",
          "source": "JavaBuilder.java:68"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$2.run",
          "source": "BuildManager.java:358"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:821"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:395"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:116"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:181"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:191"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$1.run",
          "source": "BuildManager.java:140"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:821"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:395"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:154"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.build",
          "source": "BuildManager.java:216"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.endOperation",
          "source": "Workspace.java:701"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1237"
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation.run",
          "source": "WorkspaceModifyOperation.java:78"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext.runInCurrentThread",
          "source": "ModalContext.java:296"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext.run",
          "source": "ModalContext.java:249"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.run",
          "source": "WizardDialog.java:713"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizard.performFinish",
          "source": "NewProjectCreationWizard.java:63"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.finishPressed",
          "source": "WizardDialog.java:570"
        },
        {
          "method": "org.eclipse.jface.wizard.WizardDialog.buttonPressed",
          "source": "WizardDialog.java:311"
        },
        {
          "method": "org.eclipse.jface.dialogs.Dialog$1.widgetSelected",
          "source": "Dialog.java:344"
        },
        {
          "method": "org.eclipse.swt.widgets.TypedListener.handleEvent",
          "source": "TypedListener.java:85"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:74"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.notifyListeners",
          "source": "Widget.java:637"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:1413"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1205"
        },
        {
          "method": "org.eclipse.jface.window.Window.runEventLoop",
          "source": "Window.java:536"
        },
        {
          "method": "org.eclipse.jface.window.Window.open",
          "source": "Window.java:523"
        },
        {
          "method": "org.eclipse.ui.actions.NewProjectAction.run",
          "source": "NewProjectAction.java:96"
        },
        {
          "method": "org.eclipse.jface.action.Action.runWithEvent",
          "source": "Action.java:452"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:407"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent",
          "source": "ActionContributionItem.java:361"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$0",
          "source": "ActionContributionItem.java:352"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent",
          "source": "ActionContributionItem.java:47"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:74"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.notifyListeners",
          "source": "Widget.java:637"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:1413"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1205"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:844"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:827"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:878"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:321"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:151"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:502"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:362"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "8758",
      "date": "2002-01-30T16:00:23+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "major"
    }
  ],
  "groupId": "8758",
  "bugId": "8758",
  "date": "2002-01-30T16:00:23+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "major"
}