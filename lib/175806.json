{
  "comments": [
    "A few different users are reporting stack traces like this:\n\njava.lang.NullPointerException\n        at org.aspectj.apache.bcel.generic.MethodGen.\u003cinit\u003e(MethodGen.java:305)\n        at org.aspectj.weaver.bcel.LazyMethodGen.initialize(LazyMethodGen.java:295)\n        at org.aspectj.weaver.bcel.LazyMethodGen.markAsChanged(LazyMethodGen.java:502)\n        at org.aspectj.weaver.bcel.LazyMethodGen.getBody(LazyMethodGen.java:900)\n        at org.aspectj.weaver.bcel.BcelShadow.makeShadowForMethod(BcelShadow.java:738)\n        at org.aspectj.weaver.bcel.BcelShadow.makeMethodExecution(BcelShadow.java:730)\n\nI believe this problem occurs when the bytecode isn\u0027t quite 100% correct.  For example, if an entry in the localvariable or linenumber table isn\u0027t quite right (maybe it points into the middle of an instruction rather than an instruction boundary).  Normally it is a sign of a compiler bug when this happens and so the root cause of the problem should be fixed and the weaver is happy again.  But increasingly other tools are getting to the bytes post compilation and before we see them, these tools transform the bytecode but don\u0027t do a very good job of fixing the line number and local variable tables.  When this happens, AspectJ crashes and looks bad, when it isn\u0027t our fault at all.  I think we can cope to some degree with getting in this incorrect data.  for example:\n\n0: blah\n1: blah\n3: blah\nLinenumbertable\nLine5: instruction2\n\nif we see a table like that, we could just assume that Line5 is instruction1, whereas at the moment we will crash with an NPE.",
    "modified the lookup code to allow for this and default to a safe position in the bytecode.",
    "org.aspectj/bundles updated with new bcel.jar"
  ],
  "commentCreationDates": [
    "2007-02-28T10:26:43+01:00",
    "2007-02-28T13:15:01+01:00",
    "2007-03-01T15:25:56+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.apache.bcel.generic.MethodGen.\u003cinit\u003e",
          "source": "MethodGen.java:305"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.initialize",
          "source": "LazyMethodGen.java:295"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.markAsChanged",
          "source": "LazyMethodGen.java:502"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.getBody",
          "source": "LazyMethodGen.java:900"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.makeShadowForMethod",
          "source": "BcelShadow.java:738"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.makeMethodExecution",
          "source": "BcelShadow.java:730"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "175806",
      "date": "2007-02-28T10:26:43+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "enhancement"
    }
  ],
  "groupId": "175806",
  "bugId": "175806",
  "date": "2007-02-28T10:26:43+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "enhancement"
}