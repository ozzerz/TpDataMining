{
  "comments": [
    "For each inspect popup numerous objects are leaked.\nIt appears the root of the leaks is the failure to dispose/uninstall the \nInformationPresenter. \n\nWhen I add this though I get:\n\njava.lang.NullPointerException\nat org.eclipse.debug.internal.ui.LazyModelPresentation.removeListener\n(LazyModelPresentation.java:162)\nat org.eclipse.debug.internal.ui.DelegatingModelPresentation.removeListener\n(DelegatingModelPresentation.java:243)\nat org.eclipse.jface.viewers.ContentViewer.handleDispose\n(ContentViewer.java:152)\n...",
    "So with the uninstall, the LazyModelPresentation is disposed via the \nExpressionInfoControl dispose (via the new uninstall code). \nBut then when the VariablesViewer is disposed (when the popup is closed), a \nlistener is attempted to be removed from the LazyModelPresentation but the \nlistener collection has already been nulled out --\u003e NPE",
    "Instead of calling dispose() on the Information Control, we should be calling uninstall on the \nInformation Presenter (which will call dispose for us).\nFixed in PopupInformationControl, PopupDisplayAction, and PopupInspectAction.",
    "Darins, please verify",
    "Things are better but still for each inspect we are leaking 1 \nAbstractInformationControlManager$1 and 1 InformationPresenter and the \nreference appears to be from the instance variable fInformationPresenter of \nthe PopupInspectAction. Sorry I have run out of time to look into this tonight \nbut I thought I would put these findings out there for you.",
    "Actually it could be that the listener (AbstractInformationControlManager$1) \nis still not getting removed as an event listener (added on line 430 of \nAbstractInformationControlManager.install)",
    "Hoping to move the debug popups to generic framework provided by UI team. See Bug #72374",
    "Adding my name to the cc list as we are now tracking performance issues more\nclosely. Please remove the performance keyword if this is not a performance bug.\n",
    "Have the remaining leaks been fixed?\n",
    "The remaining leak is in AbstractInformationControlManager\u0027s install(). A dispose listener is added to \nthe control and is not removed by uninstall() or dispose().\nMoving to TEXT for comment.",
    "Can you clarify? The listener is added to the Widget. The widget nulls out the\neventTable upon dispose. Do you have dump from a profiler that shows the\nallocation path?",
    "We install the InformationPresenter on a TextViewer when the user executes the popup Inspect action. \nWhen the popup is dismissed, the listener is not removed because the TextViewer\u0027s Widget is not \ndisposed. Closing the viewer probably does clean up anything left over.\nSee DarinS\u0027 comment #4 for details of what is being leaked.\nSorry, no dump from a profiler. Waiting for a new license still.",
    "Reopening for investigation.",
    "I\u0027ve added code to remove the listener and profiled it with I20050426-1700 plus\nmy fix and could no longer detect leaks by using Run \u003e Inspect (Ctrl+Shift+I).\n\nPlease note that creating (and afterwards disposing) the information control\nmanager for every single popup isn\u0027t efficient. The idea is to install it once\non the subject control. Please consider fixing this on your part.",
    "This bug should be marked as fixed, as the leak is fixed. A new bug should be \nopened for the issue of re-creating the popup on each inpsect.",
    "Marking as fixed."
  ],
  "commentCreationDates": [
    "2004-08-31T18:15:52+02:00",
    "2004-08-31T18:25:36+02:00",
    "2004-09-02T17:21:49+02:00",
    "2004-09-02T17:22:17+02:00",
    "2004-09-03T01:35:11+02:00",
    "2004-09-03T01:39:10+02:00",
    "2004-11-12T17:37:56+01:00",
    "2005-03-07T16:57:15+01:00",
    "2005-04-25T17:02:59+02:00",
    "2005-04-25T17:43:21+02:00",
    "2005-04-25T18:05:20+02:00",
    "2005-04-25T20:16:33+02:00",
    "2005-04-27T12:28:32+02:00",
    "2005-04-27T13:05:47+02:00",
    "2005-04-27T15:21:13+02:00",
    "2005-04-27T15:21:30+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.debug.internal.ui.LazyModelPresentation.removeListener",
          "source": "LazyModelPresentation.java:162"
        },
        {
          "method": "org.eclipse.debug.internal.ui.DelegatingModelPresentation.removeListener",
          "source": "DelegatingModelPresentation.java:243"
        },
        {
          "method": "org.eclipse.jface.viewers.ContentViewer.handleDispose",
          "source": "ContentViewer.java:152"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "72977",
      "date": "2004-08-31T18:15:52+02:00",
      "product": "Platform",
      "component": "Text",
      "severity": "normal"
    }
  ],
  "groupId": "72977",
  "bugId": "72977",
  "date": "2004-08-31T18:15:52+02:00",
  "product": "Platform",
  "component": "Text",
  "severity": "normal"
}