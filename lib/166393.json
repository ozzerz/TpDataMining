{
  "comments": [
    "Build ID: M20060921-0945\n\nSteps To Reproduce:\nMy code is using TaglibIndex.resolve(String basePath, String reference, boolean crossProjects)\n\nClients pass in the \"reference\" parameter to my code- in some cases for external resources, the reference gets passed in as a full doc root path, like:\n\nD:/dev/jdk/eclipse/plugins/com.sample/templates/JSP/a.jsp\n\nThe very first time this happens (after bringing up eclipse), passing in this URI causes the TaglibIndex code to print out a ResourceException (see below).  \n\nThis is because the TaglibIndex parses the project from that url and gets \"dev\" which does not exist which is why it causes an exception. \n\nI am wondering if it would be possible for the TaglibIndex to either check if the Project actually exists before attempting to access it, or could throw the exception back to me.  Essentially, that exception starts filling up the logs, and in my case should really just be hidden, so I would like to either be able to handle it myself, or to have it ignored.  I could do the existence check in my own code, but all that I am given is a String URI so I would have to do expensive resource processing, so I thought it might make sense for the check to happen in the TaglibIndexer. \n\nHere\u0027s the stack trace that gets printed out:\n\n!MESSAGE Resource /dev does not exist.\n!STACK 1\norg.eclipse.core.internal.resources.ResourceException: Resource /dev does not exist.\n\tat org.eclipse.core.internal.resources.Resource.checkExists(Unknown Source)\n\tat org.eclipse.core.internal.resources.Resource.checkAccessible(Unknown Source)\n\tat org.eclipse.core.internal.resources.Project.checkAccessible(Unknown Source)\n\tat org.eclipse.core.internal.resources.Resource.accept(Unknown Source)\n\tat org.eclipse.jst.jsp.core.taglib.ProjectDescription.index(Unknown Source)\n\tat org.eclipse.jst.jsp.core.taglib.ProjectDescription.restoreReferences(Unknown Source)\n\tat org.eclipse.jst.jsp.core.taglib.ProjectDescription.\u003cinit\u003e(Unknown Source)\n\tat org.eclipse.jst.jsp.core.taglib.TaglibIndex.createDescription(Unknown Source)\n\tat org.eclipse.jst.jsp.core.taglib.TaglibIndex.internalResolve(Unknown Source)\n\tat org.eclipse.jst.jsp.core.taglib.TaglibIndex.resolve(Unknown Source)\n\nMore information:",
    "Tom, the path passed in should be to a workspace resource using its full path, not its location.  Is the mention of the plugins folder just a coincidence, or is this a use case you want supported?",
    "In this scenario, some template files that are being copied over from the eclipse plugins directory are being processed.  That is why the base path is pointing outside of the workspace.  So it\u0027s an unavoidable scenario for me.  \n\nI can perform the same checks that you do in interalResolve to turn that path into a resource and get the project and see if it exists, but I was hoping to avoid that duplication because I thought calls to getWorkspaceFileAtLocation/findFilesForLocation were expensive, and my code gets called a lot.  That\u0027s why I thought maybe once you obtain the project in your code, you could first check if it exists or not.   \n\n"
  ],
  "commentCreationDates": [
    "2006-11-30T19:57:51+01:00",
    "2006-11-30T21:40:48+01:00",
    "2006-11-30T22:08:08+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Resource /dev does not exist.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.resources.Resource.checkExists",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.checkAccessible",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.checkAccessible",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.accept",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jst.jsp.core.taglib.ProjectDescription.index",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jst.jsp.core.taglib.ProjectDescription.restoreReferences",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jst.jsp.core.taglib.ProjectDescription.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jst.jsp.core.taglib.TaglibIndex.createDescription",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jst.jsp.core.taglib.TaglibIndex.internalResolve",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jst.jsp.core.taglib.TaglibIndex.resolve",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "166393",
      "date": "2006-11-30T19:57:51+01:00",
      "product": "Web Tools",
      "component": "jst.jsp",
      "severity": "normal"
    }
  ],
  "groupId": "166393",
  "bugId": "166393",
  "date": "2006-11-30T19:57:51+01:00",
  "product": "Web Tools",
  "component": "jst.jsp",
  "severity": "normal"
}