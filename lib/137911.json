{
  "comments": [
    "If I instanciate SWT\u0027s browser widget on my linux machine where the requirements of this widgets seems not to be fulfiled (i.e. I get an SWTError) there still seems to be something connected with the parent object. To being more specific, I get a \"ghost\" widget which is taking space like a normal widget. The style used for instantiation is SWT.BORDER.\n\nAs I don\u0027t want to exit the application in this case, but like to provide a fall-back widget, I added a workaround which comprises a auxiliary composite embedding the browser widget only. This auxiliary composite is then disposed on the expection\u0027s scope.\n\nHowever, I think the browser should leave the parent object untouched if its instantiation failes.",
    "I was under the impression that we disposed of the browser should creation fail before returning from the constructor.",
    "I\u0027ve verified on gtk and motif that the Browser does get auto-disposed if it fails during initialization, and have pasted a test snippet below that demonstrates this.\n\nHowever the Browser does not get auto-disposed if an SWTError is thrown after initialization, which is similar to all other widgets.  Maybe the browser is being initialized for you fine, but is hitting a problem soon after this stage (this could still be in the constructor)?  Can you run the snippet below and put \"e.printStackTrace()\" in the catch block to see where the SWTError is coming from?  And I assume you\u0027re running on gtk?\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t    Display display \u003d new Display ();\n\t    Shell shell \u003d new Shell (display);\n\t    shell.setBounds (10,10,600,200);\n\t    shell.setLayout(new FillLayout());\n\t    new Label(shell, SWT.BORDER).setText(\"label 0\");\n\t    try {\n\t\t    Browser browser \u003d new Browser(shell, SWT.NONE);\n\t\t    browser.setUrl(\"http://www.google.ca\");\n\t    } catch (SWTError e) {\n\t    \t// it failed to instantiate, so don\u0027t have a Browser\n\t    }\n\t    new Label(shell, SWT.BORDER).setText(\"label 1\");\n\t    shell.open();\n\t    while (!shell.isDisposed ()){\n\t        if (!display.readAndDispatch ()) display.sleep ();\n\t    }\n\t    display.dispose ();\n\t}\n}\n",
    "I\u0027m nearly sure that it happens during instantiation and not afterwards. To be sure, I will verify this tomorrow. However, the differenence between your test case and my is that I have already opened the shell before adding the browser widget.",
    "I tested your example now on linux using gtk and I get the same results like I got in my program. I.e. a ghost widget can be seen.\n\nHere is the stack trace\n\norg.eclipse.swt.SWTError: XPCOM error -2142568438\n\tat org.eclipse.swt.browser.Browser.error(Browser.java:1181)\n\tat org.eclipse.swt.browser.Browser.\u003cinit\u003e(Browser.java:247)\n\tat Main.main(Main.java:15)\n\nDigging further in the code of the Browser especially there where the stack trace points to, I cannot see a dispose() call before throwing the exception in several places.\n",
    "I have a suspicion that you\u0027re running on Debian (am I right?) and are hitting the problem described in bug 138076, but are catching the SWTError and trying to recover.  If you get the 0425 nightly build or newer you\u0027ll probably find that the SWTError is not thrown for you anymore.\n\nSN: Since clients are catching SWTError when invoking the Browser constructor then it seems like the Browser should be disposed on all failures in the constructor, not just the originally intended set of initialization steps such as an NS_InitEmbedding failure.\n",
    "Yes, I\u0027m running debian here and bug 138076 describes why Browser fails here as well. It would be nice if Browser cleans up in any case.",
    "This change will be made post-3.2, since at this stage (RC2 this week) changes are restricted to fixing major problems such as crashes.\n\nIn the meantime, though this case should no longer happen for you (as long as bug 138076 is verified to be the right fix), you can ensure that there are never ghosts by always doing a \u003cbrowser\u003e.dispose() in your catch block, since it is valid to dispose a widget multiple times.\n",
    "I don\u0027t think that this workaround will work, because I get a reference to the object only if its instantiation succeed. For the time being, I can live with the workaround I proposed in my initial comment.",
    "fixed on gtk and motif \u003e 0606 (3.3 stream)\n",
    "Moving to new M1 milestone"
  ],
  "commentCreationDates": [
    "2006-04-21T11:47:19+02:00",
    "2006-04-24T18:02:50+02:00",
    "2006-04-24T18:47:21+02:00",
    "2006-04-24T19:28:01+02:00",
    "2006-04-25T11:30:30+02:00",
    "2006-04-25T15:44:13+02:00",
    "2006-04-25T16:00:42+02:00",
    "2006-04-25T16:39:02+02:00",
    "2006-04-25T16:53:54+02:00",
    "2006-06-06T15:37:08+02:00",
    "2006-06-12T23:15:53+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.swt.SWTError",
      "message": "XPCOM error -2142568438",
      "elements": [
        {
          "method": "org.eclipse.swt.browser.Browser.error",
          "source": "Browser.java:1181"
        },
        {
          "method": "org.eclipse.swt.browser.Browser.\u003cinit\u003e",
          "source": "Browser.java:247"
        },
        {
          "method": "Main.main",
          "source": "Main.java:15"
        }
      ],
      "number": 0,
      "commentIndex": 4,
      "bugId": "137911",
      "date": "2006-04-25T11:30:30+02:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "normal"
    }
  ],
  "groupId": "137911",
  "bugId": "137911",
  "date": "2006-04-21T11:47:19+02:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "normal"
}