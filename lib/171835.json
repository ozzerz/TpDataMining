{
  "comments": [
    "The method returns \"false\" when the URI maps to a local file that is readonly.\n\nThe problem is in the isReadOnly() method, at the line I\u0027ve flagged; see below.  I think it should be testing \u0027localURI\u0027 rather than \u0027uri\u0027.  (At least that\u0027s what my experiments tell me.)\n\n  ...\n  result \u003d Boolean.FALSE;\n  URI localURI \u003d CommonPlugin.asLocalURI(uri);\n  if (uri.isFile() \u0026\u0026 !uri.isRelative())          // \u003c\u003c\u003c\u003c\u003c---- HERE\n  {\n     File file \u003d new File(localURI.toFileString());\n     if (file.exists() \u0026\u0026 !file.canWrite())\n     {\n     ...\n\nI also don\u0027t understand why the code uses isRelative().  Assuming that it is possible to get a relative URI at this point, should that affect the test?  Assuming that we\u0027ve previously loaded the resource ... and hence resolved the relative URI to a local file ... shouldn\u0027t isReadOnly() reflect the permissions the user has for that file?\n\n(BTW ... the last line of the method ia a bit lame.)",
    "Stephen,\n\nThis seems to have been slightly broken by bugzilla 125917.  It should indeed be testing the localURI.  URI.isFile is implemented like this:\n\n  public boolean isFile()\n  {\n    return isHierarchical() \u0026\u0026\n      ((isRelative() \u0026\u0026 !hasQuery()) || SCHEME_FILE.equalsIgnoreCase(scheme));\n  }\n\nso a relative URI returns true for isFile.  But a relative URIs interpretation is ambiguous (and is determined by the URI converter\u0027s createInput/OutputStream).  It could mean a workspace path or a file system path, so we will consider it read only and expect that clients will need to override the method to handle relative URIs according to their interpretation; we always strongly advise that absolute URIs be used for all resource URIs so don\u0027t expect clients to encounter this in \"normal\" scenarios.\n\nI\u0027m not sure what makes the last line of the method lame.\n\nA fix has been committed for both 2.2.2 and HEAD.",
    "I realise that relative URLs are potentially ambiguous.  But should that matter here?  Isn\u0027t it reasonable to assume that a relative URL is going to resolve to the same file in isReadOnly() and in createInput/OutputStream()?  And if not, wouldn\u0027t it be better for all of the methods to throw an exception if they see a relative URL?\n\nThis is actually rather important to me because my editor misbehaves if the user tries to save a resource to a readonly file.  There is no user visible message to say that the save has failed, and the editor appears to be clean.  This may be due to something I\u0027ve done incorrectly ... but my point is that a working \u0027isReadOnly\u0027 method is rather important.\n\n(FWIW ... I\u0027d code the last line as \"return res \u003d\u003d Boolean.TRUE;\")",
    "Steve,\n\nThe problem is that a relative URI resolves to a workspace path in the default URI converter but here it would be interpretted as a file relative to the current directory of the Eclipse IDE, so it\u0027s likely to be misinterpretted and so we treat it as read-only unless specialized by the user.  Relative URIs as Resource URIs aren\u0027t wrong, they are just a bad idea, so throwing exceptions seems inappropriate.  I don\u0027t think you are having a problem because of this fact.\n\nI\u0027m sure your editor\u0027s behavior will be fixed by this change. You won\u0027t be able to make changes to the model, and hence you\u0027ll never be able to save.  With the bug in place, when I try to save, my Ecore editor turns to the problems page and displays an error like this:\norg.eclipse.emf.ecore.resource.Resource$IOWrappedException: File /abc/model/usecase.ecore is read-only.\n\tat org.eclipse.emf.ecore.resource.impl.URIConverterImpl$PlatformResourceOutputStream.flush(URIConverterImpl.java:151)\n\tat org.eclipse.emf.ecore.resource.impl.URIConverterImpl$PlatformResourceOutputStream.close(URIConverterImpl.java:103)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.save(ResourceImpl.java:950)\n\tat org.eclipse.emf.ecore.presentation.EcoreEditor$11.execute(EcoreEditor.java:1467)\n\tat org.eclipse.ui.actions.WorkspaceModifyOperation$1.run(WorkspaceModifyOperation.java:101)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1743)\n\nHave you changed your editor to ignore exceptions thrown while saving?\n\nThe map itself might have been accessed directly and some client might have done a put of new Boolean(\u003csomeValue\u003e) and in that case, \u003d\u003d would fail.  Funny that the \u003d\u003d verses .equals issue should arise again. :-)",
    "Fixed in 2.2.2.M200702010000",
    "Fixed in 2.3.0.I200702010200"
  ],
  "commentCreationDates": [
    "2007-01-26T18:26:08+01:00",
    "2007-01-26T19:03:11+01:00",
    "2007-01-26T22:23:57+01:00",
    "2007-01-26T22:48:42+01:00",
    "2007-02-01T15:17:41+01:00",
    "2007-02-01T15:20:28+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.emf.ecore.resource.Resource$IOWrappedException",
      "message": "File /abc/model/usecase.ecore is read-only.",
      "elements": [
        {
          "method": "org.eclipse.emf.ecore.resource.impl.URIConverterImpl$PlatformResourceOutputStream.flush",
          "source": "URIConverterImpl.java:151"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.URIConverterImpl$PlatformResourceOutputStream.close",
          "source": "URIConverterImpl.java:103"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.save",
          "source": "ResourceImpl.java:950"
        },
        {
          "method": "org.eclipse.emf.ecore.presentation.EcoreEditor$11.execute",
          "source": "EcoreEditor.java:1467"
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation$1.run",
          "source": "WorkspaceModifyOperation.java:101"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1743"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "171835",
      "date": "2007-01-26T22:48:42+01:00",
      "product": "EMF",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "171835",
  "bugId": "171835",
  "date": "2007-01-26T18:26:08+01:00",
  "product": "EMF",
  "component": "Core",
  "severity": "normal"
}