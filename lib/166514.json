{
  "comments": [
    "Build ID: M20060921-0945\n\nSteps To Reproduce:\n\n1. Install the latest AJDT 1.4.1 for Eclipse 3.2.1\n\n2. Create a new class like this:\nimport java.util.Map;\n\npublic class DelegatingMap\u003cK, V\u003e implements Map\u003cK, V\u003e {\n\n    protected final Map\u003cK, V\u003e delegate;\n\n    public DelegatingMap(Map\u003cK, V\u003e delegate) {\n        super();\n        this.delegate \u003d delegate;\n    }\n\n}\n\n3. Save it and get an Internal compiler error:\njava.lang.NullPointerException\nat org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented(AjProblemReporter.java:231)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod(MethodVerifier.java:96)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods(MethodVerifier.java:269)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Method ... pter.java:102)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\n\nMore information:",
    "Build ID: M20060921-0945\nAJDT Version: 1.4.1.200611230655\nAspectJ version: 1.5.3.200611221118\n\nI get 12 problems, all errors, all of the type:\n\n\"The type DelegatingMap\u003cK,V\u003e must implement the inherited abstract method Map\u003cK,V\u003e.clear()\"\n\nI don\u0027t get any NPE.",
    "*** Bug 166517 has been marked as a duplicate of this bug. ***",
    "Reassigning to aspectj...",
    "This could also be a dup of bug 162601 (they display the same stack trace)\n\nFelix - were you using the same project when you raised 162601?\n",
    "I have been able to reproduce the issue in a new Java project in Eclipse, that I then converted into an AspectJ project. Creating the above class proved to be only the last step, I had to create a working aspect as well. Below are the additional types I created. The DelegatingMap should be created after all the other types are in place. Saving it will produce the exception.\n\npackage test;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Documented\n@Target({ ElementType.FIELD })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Relationship {\n    \n}\n\n************************************************************************\n\npackage test;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class PersistentDomainObject {\n    \n    @Relationship\n    private Set\u003cPersistentDomainObject\u003e objects \u003d new HashSet\u003cPersistentDomainObject\u003e();\n\n    /**\n     * @return the objects\n     */\n    public Set\u003cPersistentDomainObject\u003e getObjects() {\n        return objects;\n    }\n\n    /**\n     * @param objects the objects to set\n     */\n    public void setObjects(Set\u003cPersistentDomainObject\u003e objects) {\n        this.objects \u003d objects;\n    }\n\n}\n\n**********************************************************************\n\npackage test;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\n\n@Aspect\npublic class RelationshipAspect {\n\n    /**\n     * \n     */\n    public RelationshipAspect() {\n        super();\n    }\n    \n    @Around(\"get(@test.Relationship * test.PersistentDomainObject+.*)\")\n    public Object aroundGet(ProceedingJoinPoint thisJoinPoint) throws Throwable {\n        Object result \u003d thisJoinPoint.proceed();\n        return result;\n    }\n    \n    @Around(\"set(@test.Relationship test.PersistentDomainObject+ test..*.*)\")\n    public Object aroundSet(ProceedingJoinPoint thisJoinPoint) throws Throwable {\n        Object result \u003d thisJoinPoint.proceed();\n        return result;\n    }\n\n}\n",
    "You can probably mark bug# 162601 as a duplicate of this one. The stack trace is the same, but I was never able to reproduce it reliably.",
    "*** Bug 162601 has been marked as a duplicate of this bug. ***",
    "Marking the product as aspectj since this bug relates to the compiler and is just been seen when the compiler is invoked via ajdt.",
    "check if this is a core AJ bug or a bug because of the eclipse compiler version we are based on. if it is the latter we will fix it in 1.6 when we move to the new compiler.",
    "*** Bug 176737 has been marked as a duplicate of this bug. ***",
    "*** Bug 184523 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2006-12-01T16:53:17+01:00",
    "2006-12-06T17:30:23+01:00",
    "2006-12-07T11:24:12+01:00",
    "2006-12-07T11:25:23+01:00",
    "2006-12-07T11:30:01+01:00",
    "2006-12-07T15:06:11+01:00",
    "2006-12-07T15:10:34+01:00",
    "2006-12-07T15:19:47+01:00",
    "2006-12-07T15:21:23+01:00",
    "2007-10-26T10:11:39+02:00",
    "2007-10-26T12:48:25+02:00",
    "2007-10-26T13:11:39+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented",
          "source": "AjProblemReporter.java:231"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod",
          "source": "MethodVerifier.java:96"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods",
          "source": "MethodVerifier.java:269"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "166514",
      "date": "2006-12-01T16:53:17+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "166514",
  "bugId": "166514",
  "date": "2006-12-01T16:53:17+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}