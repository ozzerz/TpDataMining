{
  "comments": [
    "This is with 1.5.1a.\n\nI am developing a web application and I ran into this compiler crash.\nThe resource to be copied (Thumbs.db) was in use and therefore could\nnot be copied. However, AJC ended up producing an internal error instead\nof a warning or a normal error.\n\njava.io.FileNotFoundException\nat java.io.FileOutputStream.open(Native Method)\nat java.io.FileOutputStream.\u003cinit\u003e(FileOutputStream.java:179)\nat java.io.FileOutputStream.\u003cinit\u003e(FileOutputStream.java:131)\nat org.aspectj.util.FileUtil.makeOutputStream(FileUtil.java:1258)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:504)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile(AjBuildManager.java:482)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:424)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:320)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nFileNotFoundException thrown: C:\\work\\workspace\\MyCompany\\class\\images\\Thumbs.db (Access is denied)",
    "The problem is not that the compiler fails, but the message isn\u0027t nice.  But errors I think are restricted to compile-time errors - not unexpected exceptions stemming from configuration errors.\n\nI don\u0027t see a clean way around the verbosity, but I agree with the sentiment.  It would be nice if for every stack trace stemming from a user or environment error we could guess  what the error was a provide instructions on how to fix - or at least note for IOExceptions the affected file in an error message.  Here I think the message (at the bottom) is clear enough, but printing the stack might be unnecessary.  But I don\u0027t think we can know for all these whether to print the stack; we might know it in FileUtil.makeOutputStream(..) or in all the callers thereof, but we can\u0027t really call it a compiler error so it ends up being an abort, handled like all the others.\n\nReopen if you disagree, but I don\u0027t see a clean fix for this class of problems, and a point fix for this case introduces a new kind of error.  It might be that we create a new message kind, AbortWarning, which stops processing but by convention only emits a message and not a trace.  that crosscutting smell.",
    "Any stack trace produced by a compiler is very unnerving to user--new or old.\nIt reduces confidence in the tool due to a dobut that there may be more \nproblems not yet known. I don\u0027t remember, for example, Javac ever producing \na stack trace.\n\nHere I can see a nice message produced by the compiler:\nError copying resources: C:\\work\\workspace\\MyCompany\\class\\images\\Thumbs.db (Access is denied)\n\nHere is an advice that would do the job (not that I am suggesting this as necessarily a good way of implementing, but only as a possible way):\nObject around() : execution(* FileUtil.makeOutputStream(..))\n      \u0026\u0026 cflow(execution(* AjBuildManager.copyResourcesToDestination(..))) {\n    try {\n         return proceed();\n    } catch (IOException ex) { // or perhaps even Exception\n         printError(\"Error copying resources: \" + ex.getMessage());\n    }\n}",
    "*** Bug 142383 has been marked as a duplicate of this bug. ***",
    "I\u0027ve fixed this - now a proper error is produced for this case rather than a stack trace.  My fix is a *bit* like Ramnivas\u0027 aspect hand coded ;)\n\nfix will be in next dev build.",
    "fix available."
  ],
  "commentCreationDates": [
    "2006-04-24T06:19:17+02:00",
    "2006-05-10T19:33:42+02:00",
    "2006-05-11T01:35:42+02:00",
    "2006-05-18T08:51:05+02:00",
    "2006-05-18T10:18:51+02:00",
    "2006-05-18T12:49:07+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.FileNotFoundException",
      "elements": [
        {
          "method": "java.io.FileOutputStream.open",
          "source": "Native Method"
        },
        {
          "method": "java.io.FileOutputStream.\u003cinit\u003e",
          "source": "FileOutputStream.java:179"
        },
        {
          "method": "java.io.FileOutputStream.\u003cinit\u003e",
          "source": "FileOutputStream.java:131"
        },
        {
          "method": "org.aspectj.util.FileUtil.makeOutputStream",
          "source": "FileUtil.java:1258"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource",
          "source": "AjBuildManager.java:504"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile",
          "source": "AjBuildManager.java:482"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination",
          "source": "AjBuildManager.java:424"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:320"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:161"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:122"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "138171",
      "date": "2006-04-24T06:19:17+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "138171",
  "bugId": "138171",
  "date": "2006-04-24T06:19:17+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}