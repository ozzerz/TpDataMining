{
  "comments": [
    "I get a problem with the compiled code, but I can\u0027t really figure out if it\u0027s a\ncompiler bug or a \u0027feature\u0027 of java.\n\nThe execution of the following code generates a NullPointerException in a method\nadded by the compiler.\n\npublic class Test {\n  abstract class Super {\n    public Super() {\n      hop();\n    }\n    abstract void hop();\n  }\n\n  class Inner extends Super {\n    public Inner() {\n      super();\n    }\n    public void hop() {\n      System.out.println(fField);\n    }\n  }\n  \n  private Object fField;\n  public static void main(String[] args) {\n    Test3 test\u003d new Test3(\"foo\");\n    Inner inn\u003d test.new Inner();\n    System.out.println(\"Test ...\");\n  }\n  public Test3(Object field) {\n    fField\u003d field;\n  }\n}\n\nThe exception stack trace :\n\nException in thread \"main\" java.lang.NullPointerException\n  at Test3.access$0(Test3.java:23)\n  at Test3$Inner.hop(Test3.java:19)\n  at Test3$Super.\u003cinit\u003e(Test3.java:6)\n  at Test3$Inner.\u003cinit\u003e(Test3.java:15)\n  at Test3.main(Test3.java:27)\n\nThe problem is : the constructor of Inner calls the constructor of Super which\ncalls hop() on \u0027this\u0027 instance. By polymorphism, Inner#hop() is called. In\nInner#hop(), we try to access to fField, which in a field of Test. For get the\nvalue of this field, the method access$0(..) is called. This method returns the\nenclosing instance of the given object, the field this$0 of the given object.\nBut in this case, this field is not yet initialised. So the methode returns\nnull. For get the value of fField, a getField instruction is executed on the\nreturn value. As the value is null, the VM throws an exception.\n\nThe question is: does this code is correct, and the compiler should manages the\ncase ? or is it a weakness in java ?\n\nI tried to get an answer from the java specs, but I didn\u0027t find any good\ninformation.\nIn the java lang spec, at\nhttp://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#229267,\nthere is something about anonymous classes in constructors, but it\u0027s not really\nrelevant.\nThe VM spec says to look at\nhttp://java.sun.com/products/jdk/1.1/docs/guide/innerclasses/spec/innerclasses.doc.html\nIn this document, there is one note (end of the first bloc in \nhttp://java.sun.com/products/jdk/1.1/docs/guide/innerclasses/spec/innerclasses.doc2.html)\nwhich says that some implementations delay the initialisation of this$0 after\nthe call of the super constructor, so the problem can occurs.\n\nBut I didn\u0027t find anything saying that the initialisation of this$0 can\u0027t be\ndone before the execution of the super constructor.\n\n\nFor info, javac from the Sun 1.4.1 sdk generates the same type of code and\nthrows the same NPE.",
    "This is a known limitation of innerclass emulations, due to the fact that most \nVMs forbide initializing synthetic slots (this$0) prior to performing super \nconstructor calls. This is precisely the scenario you are running into.\n\nNewer VMs will no longer reject code where synthetics are initialized before \nthe super call, therefore if you toggle our compiler in 1.4 compliant mode, it \nwill produce bytecodes doing the proper generation.\n\nIf toggling our compiler in 1.4 mode, you\u0027ll be able to run on 1.4 JREs and get:\nfoo\nTest ...",
    "Closing"
  ],
  "commentCreationDates": [
    "2002-10-04T18:34:54+02:00",
    "2002-10-08T18:08:00+02:00",
    "2002-10-08T18:08:14+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "Test3.access$0",
          "source": "Test3.java:23"
        },
        {
          "method": "Test3$Inner.hop",
          "source": "Test3.java:19"
        },
        {
          "method": "Test3$Super.\u003cinit\u003e",
          "source": "Test3.java:6"
        },
        {
          "method": "Test3$Inner.\u003cinit\u003e",
          "source": "Test3.java:15"
        },
        {
          "method": "Test3.main",
          "source": "Test3.java:27"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "24400",
      "date": "2002-10-04T18:34:54+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "24400",
  "bugId": "24400",
  "date": "2002-10-04T18:34:54+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}