{
  "comments": [
    "I have a concrete aspect that implements an interface that is affected by an ITD (TemplateOperationMonitor in the Glassbox Inspector). However, the weaver chokes when trying to generate the concrete aspect. From inspection, the code for the concrete aspect generator doesn\u0027t weave into concrete aspects. Sample error output:\n\nerror Abstract method \u0027getLogger\u0027 cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): \u003cconcrete-aspect name\u003d\u0027glassbox.inspector.monitor.operation.test.TestMonitor\u0027 extends\u003d\u0027glassbox.inspector.monitor.operation.TemplateOperationMonitor\u0027/\u003e in aop.xml\nwarning register definition failed -- (AbortException) Abstract method \u0027getLogger\u0027 cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): \u003cconcrete-aspect name\u003d\u0027glassbox.inspector.monitor.operation.test.TestMonitor\u0027 extends\u003d\u0027glassbox.inspector.monitor.operation.TemplateOperationMonitor\u0027/\u003e in aop.xml\nAbstract method \u0027getLogger\u0027 cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): \u003cconcrete-aspect name\u003d\u0027glassbox.inspector.monitor.operation.test.TestMonitor\u0027 extends\u003d\u0027glassbox.inspector.monitor.operation.TemplateOperationMonitor\u0027/\u003e in aop.xml\nMessage: error Abstract method \u0027getLogger\u0027 cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): \u003cconcrete-aspect name\u003d\u0027glassbox.inspector.monitor.operation.test.TestMonitor\u0027 extends\u003d\u0027glassbox.inspector.monitor.operation.TemplateOperationMonitor\u0027/\u003e in aop.xml\norg.aspectj.bridge.AbortException: Abstract method \u0027getLogger\u0027 cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): \u003cconcrete-aspect name\u003d\u0027glassbox.inspector.monitor.operation.test.TestMonitor\u0027 extends\u003d\u0027glassbox.inspector.monitor.operation.TemplateOperationMonitor\u0027/\u003e in aop.xml\n\tat org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:417)\n\tat org.aspectj.weaver.loadtime.ConcreteAspectCodeGen.reportError(ConcreteAspectCodeGen.java:332)\n\tat org.aspectj.weaver.loadtime.ConcreteAspectCodeGen.validate(ConcreteAspectCodeGen.java:169)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects(ClassLoaderWeavingAdaptor.java:372)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions(ClassLoaderWeavingAdaptor.java:195)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:136)\n\tat org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass(WeavingURLClassLoader.java:120)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.defineClass(ExtensibleURLClassLoader.java:80)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.findClass(ExtensibleURLClassLoader.java:46)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:242)\n\tat glassbox.inspector.monitor.operation.TestTemplateOperationMonitor.testTemplateMonitor(TestTemplateOperationMonitor.java:19)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
    "I also get this error when trying to instantiate a concrete aspect from the Glassbox Inspector. The corresponding aspects works as a code-style aspect. The offending part is here:\n\n    after(Object controller) returning (OperationRequestContext context): \n      cflow(adviceexecution() \u0026\u0026 args(controller, ..) \u0026\u0026 this(AbstractOperationMonitor)) \u0026\u0026 call(OperationRequestContext+.new(..)) {\n        context.controller \u003d controller;\n    }    \n\nAgain, this code requires weaving into the concrete aspect, which isn\u0027t done by the current loadtime weaving implementation.\n\n\nMessage: error at C:\\devel\\glassboxInspector\\GlassboxInspector\\src\\glassbox\\inspector\\monitor\\operation\\AbstractOperationMonitor.aj:81::0 the parameter arg1 is not bound in [all branches of] pointcut\norg.aspectj.bridge.AbortException: the parameter arg1 is not bound in [all branches of] pointcut\n\tat org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:417)\n\tat org.aspectj.weaver.World.showMessage(World.java:563)\n\tat org.aspectj.weaver.bcel.BcelWeaver.raiseUnboundFormalError(BcelWeaver.java:785)\n\tat org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranch(BcelWeaver.java:640)\n\tat org.aspectj.weaver.bcel.BcelWeaver.validateBindings(BcelWeaver.java:582)\n\tat org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts(BcelWeaver.java:511)\n\tat org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:449)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:139)\n\tat org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass(WeavingURLClassLoader.java:120)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.defineClass(ExtensibleURLClassLoader.java:80)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.findClass(ExtensibleURLClassLoader.java:46)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:242)\n\tat glassbox.inspector.monitor.operation.TestTemplateOperationMonitor.testTemplateMonitor(TestTemplateOperationMonitor.java:19)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n",
    "The summary should probably be changed to LTW concrete-aspect definitions not exposed to weaver.\n\nThis is a limitation of the current implementation and will be documented as such under bug 132111. This might be quite tricky to fix as we cannot treat LTW-defined aspects like declared ones because their byte-code is not known to the class loader and they must be defined agressively. I don\u0027t think it\u0027s a high priority as ITDs and advice on simple scoping aspects, which are currently the main use-case for this feature, is unusual.",
    "I agree re: the summary name.\n\nWhy can\u0027t ConcreteAspectCodeGen just create an unwoven BCEL representation and let the normal weaving process affect it, just like registering any other aspect in an aop.xml file, then call generatedClassHandler.acceptClass on the concrete aspect definitions AFTER weaving?\n\nI think it is a limitation that will be important to others. I hit it with the Glassbox Inspector immediately when I tested trying to extend our abstract aspects with concrete-aspects, which is clearly valuable to support users who don\u0027t want to use AspectJ.\n\nIn our case the ITD\u0027s and advice apply to all aspects in the hierarchy, not just to XML-defined concrete aspects which I agree is low priority.",
    "Changed summary and component as suggested. Should investigate for 1.5.3.",
    "*** Bug 149096 has been marked as a duplicate of this bug. ***",
    "Currently in registerAspects() we loop through the set of concrete aspects and do the following:\n1. Generate the byte-code\n2. Define the class\n3. Register the aspect\n\nThe trick is to replace (2) with a call to just define the new aspect type to the World and save the generated byte-code. Then after _all_ aspects have been registered and we have prepared the weaver we can then loop through the generated aspects again and weave each one in turn. I have a simple pointcut \u0026 advice testcase working and will add one that generates an around closure.\n\nRon,\n\nCould you please attached simple versions of the ITD and cflow testcases. Also the code has changed considerably in this area so you may like to try Glassbox again to see what messages you get.",
    "Added testcases for ITD, around closure and cflow (from Bug 149096 \"NoSuchFieldError when using cflow with XML concrete aspect\").",
    "Fix available in aspectj-DEVELOPMENT-20061004162124.jar."
  ],
  "commentCreationDates": [
    "2006-03-16T04:01:41+01:00",
    "2006-03-16T04:32:07+01:00",
    "2006-03-16T14:11:01+01:00",
    "2006-03-16T15:29:02+01:00",
    "2006-09-25T12:19:38+02:00",
    "2006-09-25T12:22:34+02:00",
    "2006-10-03T18:29:39+02:00",
    "2006-10-04T15:34:45+02:00",
    "2006-10-05T12:54:25+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.aspectj.bridge.AbortException",
      "message": "Abstract method \u0027getLogger\u0027 cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): \u003cconcrete-aspect name\u003d\u0027glassbox.inspector.monitor.operation.test.TestMonitor\u0027 extends\u003d\u0027glassbox.inspector.monitor.operation.TemplateOperationMonitor\u0027/\u003e in aop.xml",
      "elements": [
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage",
          "source": "WeavingAdaptor.java:417"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ConcreteAspectCodeGen.reportError",
          "source": "ConcreteAspectCodeGen.java:332"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ConcreteAspectCodeGen.validate",
          "source": "ConcreteAspectCodeGen.java:169"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects",
          "source": "ClassLoaderWeavingAdaptor.java:372"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions",
          "source": "ClassLoaderWeavingAdaptor.java:195"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize",
          "source": "ClassLoaderWeavingAdaptor.java:136"
        },
        {
          "method": "org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass",
          "source": "WeavingURLClassLoader.java:120"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.defineClass",
          "source": "ExtensibleURLClassLoader.java:80"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.findClass",
          "source": "ExtensibleURLClassLoader.java:46"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:251"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:319"
        },
        {
          "method": "java.lang.Class.forName0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.forName",
          "source": "Class.java:242"
        },
        {
          "method": "glassbox.inspector.monitor.operation.TestTemplateOperationMonitor.testTemplateMonitor",
          "source": "TestTemplateOperationMonitor.java:19"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:478"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:344"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "132080",
      "date": "2006-03-16T04:01:41+01:00",
      "product": "AspectJ",
      "component": "LTWeaving",
      "severity": "normal"
    },
    {
      "exceptionType": "org.aspectj.bridge.AbortException",
      "message": "the parameter arg1 is not bound in [all branches of] pointcut",
      "elements": [
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage",
          "source": "WeavingAdaptor.java:417"
        },
        {
          "method": "org.aspectj.weaver.World.showMessage",
          "source": "World.java:563"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.raiseUnboundFormalError",
          "source": "BcelWeaver.java:785"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranch",
          "source": "BcelWeaver.java:640"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.validateBindings",
          "source": "BcelWeaver.java:582"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts",
          "source": "BcelWeaver.java:511"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave",
          "source": "BcelWeaver.java:449"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize",
          "source": "ClassLoaderWeavingAdaptor.java:139"
        },
        {
          "method": "org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass",
          "source": "WeavingURLClassLoader.java:120"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.defineClass",
          "source": "ExtensibleURLClassLoader.java:80"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.findClass",
          "source": "ExtensibleURLClassLoader.java:46"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:251"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:319"
        },
        {
          "method": "java.lang.Class.forName0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.forName",
          "source": "Class.java:242"
        },
        {
          "method": "glassbox.inspector.monitor.operation.TestTemplateOperationMonitor.testTemplateMonitor",
          "source": "TestTemplateOperationMonitor.java:19"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:478"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:344"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "132080",
      "date": "2006-03-16T04:32:07+01:00",
      "product": "AspectJ",
      "component": "LTWeaving",
      "severity": "normal"
    }
  ],
  "groupId": "132080",
  "bugId": "132080",
  "date": "2006-03-16T04:01:41+01:00",
  "product": "AspectJ",
  "component": "LTWeaving",
  "severity": "normal"
}