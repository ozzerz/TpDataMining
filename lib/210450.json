{
  "comments": [
    "We need to make file parsing, and especially repository file parsing, as future-proof as possible.  An old p2 client needs to be able to make sense of new metadata/artifact repositories that get created in the future.  Currently our parsing is too strict. I attempted to add an extra attribute to a random element in content.xml, and the metadata repository failed to load (RepositoryCreationException). Also, we should avoid putting data into the files that is subject to change, such as names of non-API classes. Currently a processing instruction is added that exposes internal class names.\n\nFor reference, here is the exception when attempting to load a repository that defines an unrecognized attribute:\n\norg.eclipse.equinox.p2.core.repository.RepositoryCreationException: org.eclipse.core.runtime.CoreException: Error parsing metadata repository\n\tat org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryIO.read(MetadataRepositoryIO.java:53)\n\tat org.eclipse.equinox.internal.p2.metadata.repository.SimpleMetadataRepositoryFactory.load(SimpleMetadataRepositoryFactory.java:43)\n\tat org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:178)\n\tat org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:123)\n\tat org.eclipse.equinox.internal.p2.console.ProvisioningHelper.addMetadataRepository(ProvisioningHelper.java:41)\n\tat org.eclipse.equinox.internal.p2.director.app.Application.run(Application.java:172)\n\tat org.eclipse.equinox.internal.p2.director.app.Application.start(Application.java:213)\n\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:193)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:362)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:175)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:516)\n\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:456)\n\tat org.eclipse.equinox.launcher.Main.run(Main.java:1194)\n\tat org.eclipse.equinox.launcher.Main.main(Main.java:1170)",
    "Dave, do you want to look at this, or else I can.",
    "I have done a basic pass over this. Changes:\n\n - unexpected attributes and elements are just ignored. There is a debug trace option for enabling more pedantic checking, but by default they are just skipped. This allows us to add new elements/attributes in the future without breaking old clients.\n\n - Most other parsing problems have been dialed down to WARNING rather than ERROR. These problems will be logged but the entire parse will not fail. The most tricky case here is missing required attributes. The two general strategies are to use default values for missing attributes, or to skip the entire element if there is no way to determine a default value (such as the id of an IU). I have done a quick pass on these but may not have caught all of them.\n\n - Only a SAX fatalError will cause the entire parse to abort. This typically means a syntax error or IOException has occurred.",
    "A remaining issue here is the processing instruction at the start of each file with class name and version.  I think we shouldn\u0027t be exposing the class names here since they are subject to change. We have already had renames of some of these classes, and luckily the affected parsers were not checking the class attribute so they weren\u0027t broken.  What I have done for now is to stop reading the class attribute (it was actually only the metadata repo parsing that was currently using it).  That way if the class names change in the future we won\u0027t break old clients. Eventually once we have all moved to a new p2 client, I think we should stop writing the class attribute completely.\n\nHaving a version number in the processing instruction is definitely useful. However, I think the original tolerance range is too strict (currently it only tolerates the current exact version: [0.0.1,0.0.1].  I have changed the tolerance range to [0.0.1,2.0.0). I.e., it tolerates the current version, up to version 2.0 exclusive. This will allow us to bump all the versions to 1.0 before we ship, without breaking older milestone builds.  \n\nGoing forward after 1.0, I suspect we will rarely or never actually advance the file version to 2.0 (an incompatible change for old clients), but it\u0027s nice to have that option available. From the experience of plugin.xml, for which all versions of Eclipse can parse all versions of the file, we may find cases in the future where we want to bump the minor version so that clients can make different assumptions about the file.",
    "I think we\u0027re in a decent state now. This gives us a bit more flexibility to evolve our file formats over the coming weeks/months while still allowing us to self-hosting and use p2 to upgrade from build to build.  Dave, I\u0027ll pass this over to you to double-check what I\u0027ve done and see if you have further things you want to do in this area. Feel free to close when ready.",
    "Just had an interesting conversation with Jeff about the case where there are multiple versions of the agent using the same agent data location. Example:\n\n1) Agent v1.0 creates a new profile, writes profile registry in format v1.0\n2) Agent v2.0 updates that profile, writing out the profile registry in a new format v1.1.  Say this format introduces a new attribute.\n3) Agent v1.0 reads the profile, and it throws away the attribute that it doesn\u0027t recognize. Then it modifies and writes the profile, permanently discarding the new attribute added in 2).\n\nWe may want to distinguish version tolerance for reading versus writing files. I.e., if the file version is v2.0, we allow a v1.0 reader to read the file, but only a v2.0 or greater writer can modify the file. This allows the case of an old client upgrading itself by referring to a new metadata/artifact repository, but it doesn\u0027t support co-existence of multiple agent versions on the same data area."
  ],
  "commentCreationDates": [
    "2007-11-20T21:11:32+01:00",
    "2007-11-20T21:14:40+01:00",
    "2007-11-23T15:09:54+01:00",
    "2007-11-23T18:35:22+01:00",
    "2007-11-23T18:47:14+01:00",
    "2007-11-23T21:12:12+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.runtime.CoreException",
      "message": "Error parsing metadata repository",
      "elements": [
        {
          "method": "org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryIO.read",
          "source": "MetadataRepositoryIO.java:53"
        },
        {
          "method": "org.eclipse.equinox.internal.p2.metadata.repository.SimpleMetadataRepositoryFactory.load",
          "source": "SimpleMetadataRepositoryFactory.java:43"
        },
        {
          "method": "org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository",
          "source": "MetadataRepositoryManager.java:178"
        },
        {
          "method": "org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository",
          "source": "MetadataRepositoryManager.java:123"
        },
        {
          "method": "org.eclipse.equinox.internal.p2.console.ProvisioningHelper.addMetadataRepository",
          "source": "ProvisioningHelper.java:41"
        },
        {
          "method": "org.eclipse.equinox.internal.p2.director.app.Application.run",
          "source": "Application.java:172"
        },
        {
          "method": "org.eclipse.equinox.internal.p2.director.app.Application.start",
          "source": "Application.java:213"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppHandle.run",
          "source": "EclipseAppHandle.java:193"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:106"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:76"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:362"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:175"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:64"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:43"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:615"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.invokeFramework",
          "source": "Main.java:516"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.basicRun",
          "source": "Main.java:456"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.run",
          "source": "Main.java:1194"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.main",
          "source": "Main.java:1170"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "210450",
      "date": "2007-11-20T21:11:32+01:00",
      "product": "Equinox",
      "component": "Incubator",
      "severity": "normal"
    }
  ],
  "groupId": "210450",
  "bugId": "210450",
  "date": "2007-11-20T21:11:32+01:00",
  "product": "Equinox",
  "component": "Incubator",
  "severity": "normal"
}