{
  "comments": [
    "It should be possible to access a repository through different connectors using the same url. Currently the task list discards one of the repositories if two repositories share the same url in spite of the distinct repository kind.",
    "The tasklist tests of the Mylar test suite ran successfully. I did get test failures though which seem unrelated to the patch (and occured before applying the patch):\n\njava.lang.NullPointerException\n\tat org.eclipse.mylar.monitor.tests.StatisticsReportingTest.testFilteredModeDetection(StatisticsReportingTest.java:161)\n\t[...]\n\njunit.framework.AssertionFailedError\n\t[...]\n\tat org.eclipse.mylar.tasklist.tests.BackgroundSaveTest.testBackgroundSave(BackgroundSaveTest.java:56)\n\t[...]\n\nThis was printed on the console:\n\n[2006-07-12, 23:48:47] Status INFO: org.eclipse.mylar.core code\u003d0 java search failed\n java.lang.NullPointerException, exception: java.lang.NullPointerException\n\tat org.eclipse.core.internal.filesystem.InternalFileSystemCore.getStore(InternalFileSystemCore.java:104)\n\tat org.eclipse.core.filesystem.EFS.getStore(EFS.java:296)\n\tat org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsCharArray(Util.java:1044)\n\tat org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsCharArray(Util.java:1033)\n\tat org.eclipse.jdt.internal.core.search.JavaSearchDocument.getCharContents(JavaSearchDocument.java:53)\n\tat org.eclipse.jdt.internal.core.search.matching.PossibleMatch.getContents(PossibleMatch.java:72)\n\tat org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:9047)\n\tat org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:9019)\n\tat org.eclipse.jdt.internal.compiler.parser.Parser.dietParse(Parser.java:7707)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.parseAndBuildBindings(MatchLocator.java:1473)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:975)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1074)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1195)\n\tat org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:94)\n\tat org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:212)\n\tat org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:503)\n\tat org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:538)\n\tat org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:143)\n\tat org.eclipse.mylar.internal.java.search.AbstractJavaRelationProvider$JavaSearchOperation.run(AbstractJavaRelationProvider.java:310)\n\tat org.eclipse.mylar.internal.java.search.AbstractJavaRelationProvider$JavaSearchJob.run(AbstractJavaRelationProvider.java:291)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\n\n",
    "Created an attachment (id\u003d46212)\nTest case and fix\n\n",
    "Created an attachment (id\u003d46213)\nmylar/context/zip\n\n",
    "It seems a good idea to move away from referencing repositories by the URLs and use some generated and hidden key/id instead. Then it won\u0027t be necessary to \"refactor\" tasks that are affected by the repository URL change...",
    "Created an attachment (id\u003d46272)\nUpdated test case and updated fix\n\n",
    "Created an attachment (id\u003d46273)\nmylar/context/zip\n\n",
    "Created an attachment (id\u003d46297)\nUpdated patch\n\nTest cases now run successfullly except for this one (which is unrelated to the patch):\n\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.assertTrue(Assert.java:20)\n\tat junit.framework.Assert.assertTrue(Assert.java:27)\n\tat org.eclipse.mylar.tasklist.tests.BackgroundSaveTest.testBackgroundSave(BackgroundSaveTest.java:56)\n[...]",
    "We can not support two repositories of a different kind that have the same URL because we base the identity of tasks on: repository url + task id.  So if I had applied the patch two tasks with the same ID but from a different repository would have the same identity.  This would cause problems with the Task List and they would have the same context since contexts rely on task handles. \n\nHowever, your test is a good one since it specifies what the behavior should be, so I simply changed the last line to the following, and applied the patch for the test.\n\n  assertEquals(1, manager.getAllRepositories().size());",
    "If we don\u0027t want to support this we should make sure that users do not create multiple repositories with the same url. I\u0027ll create a patch for AbstractRepositorySettingsPage to make sure that the entered url is unique.",
    "Created an attachment (id\u003d46401)\nCheck if url is unique when creating/editing repository\n\nThe patch makes sure each repository has a unique url. \n\nBut why not extend task handles to include the repository kind? That way repository urls would only have to be unique per connector and the corresponding AbstractRepositoryConnector instance could be determined reliably from a task handle.",
    "Created an attachment (id\u003d46402)\nmylar/context/zip\n\n",
    "Patch applied and having that check is definitely a good idea.  Yes, we could add the kind to the handle and I\u0027ve considered that.  We would\u0027t gain very much from it (i.e. having the exact same URL for two different kind of repositories is not a good idea due to the inevitable user and administration confrusion).  It would require performing a migration of the task list and all contexts, so if we end up doing such a migration at some point we should consider this again.",
    "Wrong assignment.",
    "Previusly fixed."
  ],
  "commentCreationDates": [
    "2006-07-12T23:01:17+02:00",
    "2006-07-12T23:57:59+02:00",
    "2006-07-12T23:58:00+02:00",
    "2006-07-12T23:58:58+02:00",
    "2006-07-13T01:25:48+02:00",
    "2006-07-13T23:51:11+02:00",
    "2006-07-13T23:52:00+02:00",
    "2006-07-14T16:56:51+02:00",
    "2006-07-15T02:30:32+02:00",
    "2006-07-15T16:57:36+02:00",
    "2006-07-17T23:16:43+02:00",
    "2006-07-17T23:17:03+02:00",
    "2006-07-18T07:25:49+02:00",
    "2006-07-21T03:49:00+02:00",
    "2006-07-21T03:49:57+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.mylar.monitor.tests.StatisticsReportingTest.testFilteredModeDetection",
          "source": "StatisticsReportingTest.java:161"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "150446",
      "date": "2006-07-12T23:57:59+02:00",
      "product": "Mylyn",
      "component": "Core",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.core.internal.filesystem.InternalFileSystemCore.getStore",
          "source": "InternalFileSystemCore.java:104"
        },
        {
          "method": "org.eclipse.core.filesystem.EFS.getStore",
          "source": "EFS.java:296"
        },
        {
          "method": "org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsCharArray",
          "source": "Util.java:1044"
        },
        {
          "method": "org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsCharArray",
          "source": "Util.java:1033"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchDocument.getCharContents",
          "source": "JavaSearchDocument.java:53"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.getContents",
          "source": "PossibleMatch.java:72"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.parser.Parser.parse",
          "source": "Parser.java:9047"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.parser.Parser.parse",
          "source": "Parser.java:9019"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.parser.Parser.dietParse",
          "source": "Parser.java:7707"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.parseAndBuildBindings",
          "source": "MatchLocator.java:1473"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:975"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1074"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1195"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:94"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches",
          "source": "BasicSearchEngine.java:212"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.search",
          "source": "BasicSearchEngine.java:503"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:538"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run",
          "source": "JavaSearchQuery.java:143"
        },
        {
          "method": "org.eclipse.mylar.internal.java.search.AbstractJavaRelationProvider$JavaSearchOperation.run",
          "source": "AbstractJavaRelationProvider.java:310"
        },
        {
          "method": "org.eclipse.mylar.internal.java.search.AbstractJavaRelationProvider$JavaSearchJob.run",
          "source": "AbstractJavaRelationProvider.java:291"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "150446",
      "date": "2006-07-12T23:57:59+02:00",
      "product": "Mylyn",
      "component": "Core",
      "severity": "major"
    },
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "elements": [
        {
          "method": "junit.framework.Assert.fail",
          "source": "Assert.java:47"
        },
        {
          "method": "junit.framework.Assert.assertTrue",
          "source": "Assert.java:20"
        },
        {
          "method": "junit.framework.Assert.assertTrue",
          "source": "Assert.java:27"
        },
        {
          "method": "org.eclipse.mylar.tasklist.tests.BackgroundSaveTest.testBackgroundSave",
          "source": "BackgroundSaveTest.java:56"
        }
      ],
      "number": 2,
      "commentIndex": 7,
      "bugId": "150446",
      "date": "2006-07-14T16:56:51+02:00",
      "product": "Mylyn",
      "component": "Core",
      "severity": "major"
    }
  ],
  "groupId": "150446",
  "bugId": "150446",
  "date": "2006-07-12T23:01:17+02:00",
  "product": "Mylyn",
  "component": "Core",
  "severity": "major"
}