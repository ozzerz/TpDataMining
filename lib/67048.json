{
  "comments": [
    "This will likely have to just be a readme item as it would appear to be a \nproblem with the xml parser.\n\nThe XMLRootHandler fails parsing an XMl file if that fail has a byte order \nmark (BOM) (fatal SAXParseException that the document root element is missing).\n\nThis only occurs using the Crimson parser. With the Xerces parser the file is \nparsed successfully.\nFor a test file with a BOM, see bug 61564\n\nAs a result of this problem, valid buildfiles do not have the Run Ant menu \nentries in the Run context menu.",
    "That is right, some parsers seem not to be able to take BOMs in XML files.",
    "Darin, actually I am seeing problems happening while using IBM\u0027s VM (which uses\nXerces). Using Sun\u0027s vm does not cause any problem. Can you confirm this?",
    "This is what I am seeing with IBM 1.4.1 (if you enable tracing for\norg.eclipse.core.runtime and and check the contenttypes/debug debug option, you\nshould be able to see errors thrown by content describers in the log).\n\nsun.io.MalformedInputException\n\tat sun.io.ByteToCharUnicode.flush(ByteToCharUnicode.java:214)\n\tat sun.nio.cs.StreamDecoder$ConverterSD.flushInto(StreamDecoder.java:305)\n\tat sun.nio.cs.StreamDecoder$ConverterSD.implRead(StreamDecoder.java:329)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:222)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:207)\n\tat org.apache.xerces.impl.XMLEntityScanner.load(Unknown Source)\n\tat org.apache.xerces.impl.XMLEntityScanner.skipString(Unknown Source)\n\tat\norg.apache.xerces.impl.XMLDocumentScannerImpl$XMLDeclDispatcher.dispatch(Unknown\nSource)\n\tat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown\nSource)\n\tat org.apache.xerces.parsers.DTDConfiguration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.DTDConfiguration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n\tat org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)\n\tat javax.xml.parsers.SAXParser.parse(Unknown Source)\n\tat\norg.eclipse.core.internal.content.XMLRootHandler.parseContents(XMLRootHandler.java:176)\n\tat\norg.eclipse.core.runtime.content.XMLRootElementContentDescriber.checkCriteria(XMLRootElementContentDescriber.java:75)\n\tat\norg.eclipse.core.runtime.content.XMLRootElementContentDescriber.describe(XMLRootElementContentDescriber.java:105)\n\tat org.eclipse.core.internal.content.ContentType.describe(ContentType.java:172)\n\tat\norg.eclipse.core.internal.content.ContentTypeManager.internalFindContentTypesFor(ContentTypeManager.java:278)\n\tat\norg.eclipse.core.internal.content.ContentTypeManager.getDescriptionFor(ContentTypeManager.java:244)\n\tat\norg.eclipse.core.internal.resources.ContentDescriptionManager.readDescription(ContentDescriptionManager.java:93)\n\tat\norg.eclipse.core.internal.resources.ContentDescriptionManager.getDescriptionFor(ContentDescriptionManager.java:58)\n\tat org.eclipse.core.internal.resources.File.getCharset(File.java:220)",
    "The content type fails to be set for me using a Sun 1.4.2 VM (crimson parser) \nusing the test case of bug 61564.\n\nDebugging the following fatal exception occurs:\n\nThread [main] (Suspended (exception SAXParseException))\n\tXMLRootHandler(DefaultHandler).fatalError(SAXParseException) line: 447\n\tParser2.fatal(String, Object[], Exception) line: 3342\n\tParser2.fatal(String) line: 3327\n\tParser2.parseInternal(InputSource) line: 635\n\tParser2.parse(InputSource) line: 333\n\tXMLReaderImpl.parse(InputSource) line: 448\n\tSAXParserImpl(SAXParser).parse(InputSource, DefaultHandler) line: 345\n\tXMLRootHandler.parseContents(InputSource) line: 176\n\tXMLRootElementContentDescriber.checkCriteria(InputSource) line: 75\n\tXMLRootElementContentDescriber.describe(InputStream, \nIContentDescription) line: 105\n\tContentType.describe(IContentDescriber, InputStream, \nContentDescription) line: 172\n\tContentTypeManager.internalFindContentTypesFor(InputStream, IContentType\n[]) line: 278\n\tContentTypeManager.getDescriptionFor(InputStream, String, QualifiedName\n[]) line: 244\n\tContentDescriptionManager.readDescription(File) line: 92\n\tContentDescriptionManager.getDescriptionFor(File, ResourceInfo) line: 57\n\tFile.getContentDescription() line: 239\n\tEncodingActionGroup.getEncodingFromContent(IFile) line: 209\n\tEncodingActionGroup.getDefaultEncodingText(ITextEditor, String) line: \n196\n\tEncodingActionGroup.access$0(ITextEditor, String) line: 186\n\tEncodingActionGroup$PredefinedEncodingAction.update() line: 166\n\tEncodingActionGroup.update() line: 437\n\tDefaultEncodingSupport.reset() line: 93\n\tAntEditor(TextEditor).updatePropertyDependentActions() line: 312\n\tAntEditor(AbstractTextEditor).firePropertyChange(int) line: 4525\n\tAbstractTextEditor$3.run() line: 301\n\tAbstractTextEditor$ElementStateListener.execute(Runnable) line: 424\n\tAbstractTextEditor$ElementStateListener.elementDirtyStateChanged\n(Object, boolean) line: 304\n\tTextFileDocumentProvider$FileBufferListener.dirtyStateChanged\n(IFileBuffer, boolean) line: 249\n\tTextFileBufferManager.fireDirtyStateChanged(IFileBuffer, boolean) line: \n240\n\tResourceTextFileBuffer(ResourceFileBuffer).commit(IProgressMonitor, \nboolean) line: 304\n\tAntEditorDocumentProvider(TextFileDocumentProvider).commitFileBuffer\n(IProgressMonitor, TextFileDocumentProvider$FileInfo, boolean) line: 680\n\tTextFileDocumentProvider$2.execute(IProgressMonitor) line: 642\n\tTextFileDocumentProvider$2\n(TextFileDocumentProvider$DocumentProviderOperation).run(IProgressMonitor) \nline: 105\n\tWorkspaceModifyDelegatingOperation.execute(IProgressMonitor) line: 67\n\tWorkspaceModifyOperation$1.run(IProgressMonitor) line: 91\n\tWorkspace.run(IWorkspaceRunnable, ISchedulingRule, int, \nIProgressMonitor) line: 1673\n\tWorkspaceModifyDelegatingOperation(WorkspaceModifyOperation).run\n(IProgressMonitor) line: 105\n\tWorkspaceOperationRunner.run(boolean, boolean, IRunnableWithProgress, \nISchedulingRule) line: 73\n\tWorkspaceOperationRunner.run(boolean, boolean, IRunnableWithProgress) \nline: 63\n\tAntEditorDocumentProvider(TextFileDocumentProvider).executeOperation\n(TextFileDocumentProvider$DocumentProviderOperation, IProgressMonitor) line: 403\n\tAntEditorDocumentProvider(TextFileDocumentProvider).saveDocument\n(IProgressMonitor, Object, IDocument, boolean) line: 623\n\tAntEditor(AbstractTextEditor).performSave(boolean, IProgressMonitor) \nline: 3444\n\tAntEditor(AbstractTextEditor).doSave(IProgressMonitor) line: 3233\n\tAntEditor.doSave(IProgressMonitor) line: 683\n\tEditorManager$12.run(IProgressMonitor) line: 1160\n\tEditorManager$10.run(IProgressMonitor) line: 1015\n\tModalContext.runInCurrentThread(IRunnableWithProgress, \nIProgressMonitor) line: 303\n\tModalContext.run(IRunnableWithProgress, boolean, IProgressMonitor, \nDisplay) line: 253\n\tApplicationWindow$1.run() line: 588\n\tBusyIndicator.showWhile(Display, Runnable) line: 69\n\tWorkbenchWindow(ApplicationWindow).run(boolean, boolean, \nIRunnableWithProgress) line: 585\n\tWorkbenchWindow.run(boolean, boolean, IRunnableWithProgress) line: 1653\n\tEditorManager.runProgressMonitorOperation(String, \nIRunnableWithProgress, IWorkbenchWindow) line: 1021\n\tEditorManager.savePart(ISaveablePart, IWorkbenchPart, boolean) line: \n1165\n\tWorkbenchPage.savePart(ISaveablePart, IWorkbenchPart, boolean) line: \n2528\n\tWorkbenchPage.saveEditor(IEditorPart, boolean) line: 2540\n\tSaveAction.run() line: 69\n\tSaveAction(Action).runWithEvent(Event) line: 881\n\tActionHandler.execute(Map) line: 141\n\tCommand.execute(Map) line: 132\n\tWorkbenchKeyboard.executeCommand(String) line: 469\n\tWorkbenchKeyboard.press(List, Event) line: 887\n\tWorkbenchKeyboard.processKeyEvent(List, Event) line: 928\n\tWorkbenchKeyboard.filterKeySequenceBindings(Event) line: 546\n\tWorkbenchKeyboard.access$2(WorkbenchKeyboard, Event) line: 494\n\tWorkbenchKeyboard$1.handleEvent(Event) line: 259\n\tEventTable.sendEvent(Event) line: 82\n\tDisplay.filterEvent(Event) line: 714\n\tTree(Widget).sendEvent(Event) line: 795\n\tTree(Widget).sendEvent(int, Event, boolean) line: 820\n\tTree(Widget).sendEvent(int, Event) line: 805\n\tTree(Control).sendKeyEvent(int, int, int, int, Event) line: 1734\n\tTree(Control).sendKeyEvent(int, int, int, int) line: 1730\n\tTree(Control).WM_CHAR(int, int) line: 3067\n\tTree.WM_CHAR(int, int) line: 1372\n\tTree(Control).windowProc(int, int, int, int) line: 2970\n\tDisplay.windowProc(int, int, int, int) line: 3298\n\tOS.DispatchMessageW(MSG) line: not available [native method]\n\tOS.DispatchMessage(MSG) line: 1467\n\tDisplay.readAndDispatch() line: 2396\n\tWorkbench.runEventLoop(Window$IExceptionHandler, Display) line: 1375\n\tWorkbench.runUI() line: 1346\n\tWorkbench.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 252\n\tPlatformUI.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 141\n\tIDEApplication.run(Object) line: 96\n\tPlatformActivator$1.run(Object) line: 335\n\tEclipseStarter.run(Object) line: 272\n\tEclipseStarter.run(String[], Runnable) line: 128\n\tNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not \navailable [native method]\n\tNativeMethodAccessorImpl.invoke(Object, Object[]) line: 39\n\tDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25\n\tMethod.invoke(Object, Object[]) line: 324\n\tMain.basicRun(String[]) line: 186\n\tMain.run(String[]) line: 647\n\tMain.main(String[]) line: 631\n",
    "Thanks, Darin, the problem I was seeing was actually bug 67975 (UTF-16 BOM on\nWindows IBM VM). \n\nThis bug is caused by:\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4508058\n\nAnd affects not only content type determination, but also any other Crimson\nclients such as Ant. When running manually or as an external builder, I get this\nerror:\n\nBuildfile: d:\\temp\\tests\\runtime-workbench\\AntTest\\build.xml\nBUILD FAILED: D:\\temp\\tests\\runtime-workbench\\AntTest\\build.xml:1: Document root\nelement is missing.\nTotal time: 125 milliseconds\n\nThere is one thing I do not understand: when running with IBM 1.4.1, content\ntype detection works fine, but running Ant manually (using the \"Run Ant\" action)\nfails. What is worse, running the same script as external too builder works\nfine. Darin, is there any difference between the two modes of running Ant w.r.t.\nXML parsing?",
    "All kinds of differences :-)\nAll depends on the VM you are running the Ant build within and what is on the \nAnt runtime classpath. You can specify Xerces to be on the Ant runtime \nclasspath and then Xerces is used as the parser (just like Ant at the \ncommandline).\n\nExternal tool builders by default run in the same VM (IBM 1.4.1). Your Run As \ntest case: is that running in IBM 1.4.1 or in a Sun VM? What does its runtime \nclasspath look like?",
    "Ok, got it. Since I am running (alternately) wit Sun and IBM VMs on the same\nworkspace, I guess I ran Ant for the first time using Sun\u0027s VM, and then when\nrunning with IBM\u0027s VM the original settings (Sun\u0027s) were remembered. Using the\n\"Run-\u003eAnt build...\" action, it seems I caused the settings to be re-computed for\nthe current default JRE, because then Ant worked.",
    "So you are going to add a readme section about this. \nI should probably add one in Ant land to specify how to run the Ant builds for \nbuildfiles that do contain a BOM. Logged bug 68132",
    "So is there an workaround (other than running with Xerces?)?\n\nAlso, the problem is only with UTF-8 BOMs (UTF-16 BOMs are fine).",
    "Not that I know of.",
    "Added to README for 3.0.\n",
    "*** Bug 70177 has been marked as a duplicate of this bug. ***",
    "Would it be possible to read in the entire file, strip out the BOM characters, \nand process as normal?\n\nI know that this is probably a bit overkill for every parse of every file, but \nif we encounter this particular Exception in parsing, couldn\u0027t we rejig the \nfile a bit to strip the BOM in memory before parsing ?"
  ],
  "commentCreationDates": [
    "2004-06-14T19:41:29+02:00",
    "2004-06-14T23:11:10+02:00",
    "2004-06-21T18:45:30+02:00",
    "2004-06-21T18:50:18+02:00",
    "2004-06-21T19:53:59+02:00",
    "2004-06-21T23:43:16+02:00",
    "2004-06-21T23:48:15+02:00",
    "2004-06-21T23:55:44+02:00",
    "2004-06-22T03:54:12+02:00",
    "2004-06-22T19:49:32+02:00",
    "2004-06-22T19:51:23+02:00",
    "2004-06-22T21:45:11+02:00",
    "2004-07-19T16:56:47+02:00",
    "2004-07-19T17:07:05+02:00"
  ],
  "traces": [
    {
      "exceptionType": "sun.io.MalformedInputException",
      "elements": [
        {
          "method": "sun.io.ByteToCharUnicode.flush",
          "source": "ByteToCharUnicode.java:214"
        },
        {
          "method": "sun.nio.cs.StreamDecoder$ConverterSD.flushInto",
          "source": "StreamDecoder.java:305"
        },
        {
          "method": "sun.nio.cs.StreamDecoder$ConverterSD.implRead",
          "source": "StreamDecoder.java:329"
        },
        {
          "method": "sun.nio.cs.StreamDecoder.read",
          "source": "StreamDecoder.java:222"
        },
        {
          "method": "java.io.InputStreamReader.read",
          "source": "InputStreamReader.java:207"
        },
        {
          "method": "org.apache.xerces.impl.XMLEntityScanner.load",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLEntityScanner.skipString",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLDocumentScannerImpl$XMLDeclDispatcher.dispatch",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.DTDConfiguration.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.DTDConfiguration.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.XMLParser.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.AbstractSAXParser.parse",
          "source": "Unknown Source"
        },
        {
          "method": "javax.xml.parsers.SAXParser.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.content.XMLRootHandler.parseContents",
          "source": "XMLRootHandler.java:176"
        },
        {
          "method": "org.eclipse.core.runtime.content.XMLRootElementContentDescriber.checkCriteria",
          "source": "XMLRootElementContentDescriber.java:75"
        },
        {
          "method": "org.eclipse.core.runtime.content.XMLRootElementContentDescriber.describe",
          "source": "XMLRootElementContentDescriber.java:105"
        },
        {
          "method": "org.eclipse.core.internal.content.ContentType.describe",
          "source": "ContentType.java:172"
        },
        {
          "method": "org.eclipse.core.internal.content.ContentTypeManager.internalFindContentTypesFor",
          "source": "ContentTypeManager.java:278"
        },
        {
          "method": "org.eclipse.core.internal.content.ContentTypeManager.getDescriptionFor",
          "source": "ContentTypeManager.java:244"
        },
        {
          "method": "org.eclipse.core.internal.resources.ContentDescriptionManager.readDescription",
          "source": "ContentDescriptionManager.java:93"
        },
        {
          "method": "org.eclipse.core.internal.resources.ContentDescriptionManager.getDescriptionFor",
          "source": "ContentDescriptionManager.java:58"
        },
        {
          "method": "org.eclipse.core.internal.resources.File.getCharset",
          "source": "File.java:220"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "67048",
      "date": "2004-06-21T18:50:18+02:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "normal"
    }
  ],
  "groupId": "67048",
  "bugId": "67048",
  "date": "2004-06-14T19:41:29+02:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "normal"
}