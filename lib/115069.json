{
  "comments": [
    "In our tool thats based on TPTP that relies heavily on EMF models and their \npersistence, we have a definite case where we need to store strings that may \ncontain special characters like backspace (^H). Java accepts these characters \nas part of a string and so does the EMF model. But when I save the model, the \n^H is saved as is and not escaped. So far so good. But when the model is \nreopened, EMF chokes on seeing a ^H within a string (more precisely, it is the \nSAX Parser). Here is the stack trace. \n\nWrapped exception\norg.xml.sax.SAXParseException: An invalid XML character (Unicode: 0x8) was \nfound in the value of attribute \"name\" and element is \"interactionFragments\".\n\tat org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException\n(Unknown Source)\n\tat org.apache.xerces.util.ErrorHandlerWrapper.fatalError(Unknown \nSource)\n\tat org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\n\tat org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\n\tat org.apache.xerces.impl.XMLScanner.reportFatalError(Unknown Source)\n\tat org.apache.xerces.impl.XMLScanner.scanAttributeValue(Unknown Source)\n\tat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanAttribute\n(Unknown Source)\n\tat \norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanStartElement(Unknown \nSource)\n\tat \norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher\n.dispatch(Unknown Source)\n\tat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument\n(Unknown Source)\n\tat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n\tat org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)\n\tat javax.xml.parsers.SAXParser.parse(Unknown Source)\n\tat org.eclipse.emf.ecore.xmi.impl.XMLLoadImpl.load\n(XMLLoadImpl.java:129)\n\tat org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doLoad\n(XMLResourceImpl.java:155)",
    "As far as I know, it\u0027s not valid to have this character in XML.  Have you tried\nmanually putting an encoded backspace character in the XML to see if that even\nworks?  I have a feeling you need XML 1.1 to support that...",
    "Ed is correct - this character (encoded or not) is not allowed in XML 1.0:\nhttp://www.w3.org/TR/REC-xml/#dt-character\n\nTherefore XML parser will fail to process this character. If you need to use \nthis character you need to start using XML 1.1. I am not sure if all parsers \nyet support XML 1.1. Also EMF does not support yet serializing to XML 1.1.",
    "Ashish, given that you are not responding to any comments, I assume you agree\nwith  our explanation and therefore I am marking this bug as invalid.\nIf you require support for XML 1.1 in your application, feel free to reopen this\nbug.",
    "Sorry I did not reply to this earlier. I cannot recollect getting an email about this. Anyways, my point in filing the defect was to see if EMF persistence could escape the backspace character before writing and convert back after reading.\n\nI suspect, similar approach is done for other characters not supported by XML. Is it not possible to escape a ^H too?\n\nNow that you bring up XML 1.1, since xerces is the parser we use, do we know if i already supports XML 1.1?",
    "\u003e Anyways, my point in filing the defect was to see if EMF\n\u003e persistence could escape the backspace character \n\u003e before writing and convert back after reading.\n\nRead my message above. EMF receives all its data from an XML parser - which will refuse to parse a document that either contains ^H or contains a reference to ^H. Therefore, no escaping of this character will solve your problem.\n\nThe problem can only be solved if you use XML 1.1. Meaning that documents must have \u003c?xml version\u003d\"1.1\"?\u003e in the header and you must have a parser which supports XML 1.1. \n\nXerces does support XML 1.1. I am closing this bug as invalid, however, if you need EMF to support XML 1.1, please open a new feature request bug for XML 1.1 support in EMF.\n\nThank you."
  ],
  "commentCreationDates": [
    "2005-11-04T14:34:10+01:00",
    "2005-11-04T16:23:31+01:00",
    "2005-11-04T18:57:37+01:00",
    "2005-11-08T16:05:29+01:00",
    "2006-01-05T23:02:24+01:00",
    "2006-01-13T16:42:56+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.xml.sax.SAXParseException",
      "message": "An invalid XML character (Unicode: 0x8) was  found in the value of attribute \"name\" and element is \"interactionFragments\".",
      "elements": [
        {
          "method": "org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.util.ErrorHandlerWrapper.fatalError",
          "source": "Unknown  Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLErrorReporter.reportError",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLErrorReporter.reportError",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLScanner.reportFatalError",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLScanner.scanAttributeValue",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanAttribute",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanStartElement",
          "source": "Unknown  Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.XML11Configuration.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.XML11Configuration.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.XMLParser.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.parsers.AbstractSAXParser.parse",
          "source": "Unknown Source"
        },
        {
          "method": "javax.xml.parsers.SAXParser.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.emf.ecore.xmi.impl.XMLLoadImpl.load",
          "source": "XMLLoadImpl.java:129"
        },
        {
          "method": "org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doLoad",
          "source": "XMLResourceImpl.java:155"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "115069",
      "date": "2005-11-04T14:34:10+01:00",
      "product": "EMF",
      "component": "XML/XMI",
      "severity": "normal"
    }
  ],
  "groupId": "115069",
  "bugId": "115069",
  "date": "2005-11-04T14:34:10+01:00",
  "product": "EMF",
  "component": "XML/XMI",
  "severity": "normal"
}