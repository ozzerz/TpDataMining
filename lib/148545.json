{
  "comments": [
    "MyEnum.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\npublic enum MyEnum {\n\tONE, TWO, THREE, FOUR, FIVE\n}\n\n---\n\nMyAnnotation.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnnotation {\n\tMyEnum[] value();\n}\n\n---\n\nMyClass.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\npublic class MyClass {\n\n\tpublic MyEnum getValue() {\n\t\treturn MyEnum.ONE;\n\t}\n\n\t@MyAnnotation({ MyEnum.ONE, MyEnum.TWO })\n\tpublic void test() {\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew MyClass().test();\n\t}\n}\n\n---\n\nMyAspect.aj\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nimport java.util.Arrays;\n\nprivileged public aspect MyAspect {\n\n\tObject around(MyClass o, MyAnnotation a) :\n\t\t\texecution(@MyAnnotation * *(..)) \u0026\u0026\n\t\t\ttarget(o) \u0026\u0026\n\t\t\t@annotation(a) {\n\t\tif (!isOneOf(o.getValue(), a.value()))\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\to.getValue() +\n\t\t\t\t\t\" is not one of \" +\n\t\t\t\t\tArrays.toString(a.value()));\n\t\treturn proceed(o, a);\n\t}\n\n\tprivate static final \u003cT\u003e boolean isOneOf(T obj, T[] arr) {\n\t\tfor (T el : arr) if (obj \u003d\u003d el) return true;\n\t\treturn false;\n\t}\n}\n\n---\n\nExecuting the main method of MyClass produces:\n\nException in thread \"main\" java.lang.NoSuchMethodError: MyAspect.isOneOf(LMyEnum;[LMyEnum;)Z\n\tat MyAspect.ajc$privMethod$MyAspect$MyAspect$isOneOf(MyAspect.aj:1)\n\tat MyClass.test_aroundBody1$advice(MyClass.java:109)\n\tat MyClass.test(MyClass.java:1)\n\tat MyClass.main(MyClass.java:12)\n\n---\n\nWhat\u0027s interesting is that if you remove the \"privileged\" modifier from the aspect definition, then it works fine.",
    "fix committed - will be in next dev build.  the privilege accessor generation code wasnt aware of generic methods.",
    "fix available in latest AJ dev build."
  ],
  "commentCreationDates": [
    "2006-06-25T00:27:17+02:00",
    "2006-06-26T09:31:33+02:00",
    "2006-06-26T10:20:45+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoSuchMethodError",
      "message": "MyAspect.isOneOf(LMyEnum;[LMyEnum;)Z",
      "elements": [
        {
          "method": "MyAspect.ajc$privMethod$MyAspect$MyAspect$isOneOf",
          "source": "MyAspect.aj:1"
        },
        {
          "method": "MyClass.test_aroundBody1$advice",
          "source": "MyClass.java:109"
        },
        {
          "method": "MyClass.test",
          "source": "MyClass.java:1"
        },
        {
          "method": "MyClass.main",
          "source": "MyClass.java:12"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "148545",
      "date": "2006-06-25T00:27:17+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "148545",
  "bugId": "148545",
  "date": "2006-06-25T00:27:17+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}