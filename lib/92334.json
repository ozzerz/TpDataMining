{
  "comments": [
    "fyi, unisolated but repeating bug...\n\nUsing AJDT 1.2.0 M3 with AspectJ 1.5.0M2 and the following code, when I rename\nthe aspect to \"Logging\", I get the BCException below.  Not true of simpler\nscenarios, and the entire code is a bit much for now.  Appeared to result from\nreference to renamed type in \"within(..)\".\n\nSorry for no test case.\n\n----------------------------\n    static aspect Logging {\n        pointcut logAdvice() : Pointcuts.logging() \n            \u0026\u0026 adviceexecution() \n            \u0026\u0026 within(!Logging) \n            \u0026\u0026 cflow(execution(void WrapMain.runMain(String[])))\n            \u0026\u0026 !cflow(adviceexecution() \u0026\u0026 within(Logging))\n            ;\n        \n        pointcut logTests() : Pointcuts.logging() \n            \u0026\u0026 (execution(void WrapMain.runMain(String[])) \n                || execution(static void main(String[])) \n                || execution(void AComposite.recurse(..))\n                );\n\n        // todo @SuppressAjWarnings;\n        before() : logAdvice() {\n            log(\"\"+thisJoinPoint);\n        }\n        \n        // todo @SuppressAjWarnings;\n        before() : logTests() { \n            log(thisJoinPoint \n                    + \" this: \" + thisJoinPoint.getThis()\n                    + \" targ: \" + thisJoinPoint.getTarget()\n                    + \" args: \" + LangUtil.flatten(thisJoinPoint.getArgs())\n                    );\n        }\n        \n        after(WrapMain me) returning (List\u003cObject\u003e list) : Pointcuts.logging()\n            \u0026\u0026 args(me) \u0026\u0026\n            execution(static * MainAssembler.PackageDir.packageChildren(WrapMain)) {\n            log(me + \" kids \" + list);\n        }\n    }\n\n\n---------------------------\njava.lang.ClassCastException: org.aspectj.weaver.ResolvedMember\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:933)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:244)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:119)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:385)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:683)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:165)",
    "Problem actually occurs because some advice is not matching - this is probably\nbecause of the rename.  Here is a standalone program that blows up in the same way:\n\naspect Logging {\n  before(): call(* *(..)) \u0026\u0026 cflow(execution(* *(..)) {}\n}\n\nThe problem is a line of code assuming shadow mungers are of a certain class,\nthis is the code that puts out the \u0027advice did not match warning\u0027 (this message\nis only put out if -1.5 option is specified for compilation).  Some features of\nthe AJ language are implemented by creating other classes of shadow munger - for\nexample, the cflow() above.  In these cases the code attempts to cast a munger\nto an invalid type and BANG.\n\nThis is fixed in the latest dev build.",
    "Should mention the other bug, bug 93345 fixed this.  Will close in a few days if\nno update...",
    "Fixed, grab the latest dev build."
  ],
  "commentCreationDates": [
    "2005-04-22T08:00:15+02:00",
    "2005-05-31T14:49:06+02:00",
    "2005-06-01T18:17:07+02:00",
    "2005-06-03T17:39:32+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassCastException",
      "message": "org.aspectj.weaver.ResolvedMember",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:933"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:244"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:119"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:385"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:683"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:168"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:102"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:122"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:165"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "92334",
      "date": "2005-04-22T08:00:15+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "92334",
  "bugId": "92334",
  "date": "2005-04-22T08:00:15+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}