{
  "comments": [
    "I20060117-0800\n\nAttempting to hide a view in the current perspective, when it is deactivated does not work. The view remains open, but its control disappears. Attached is an example plug-in (based on the \"Plugin with a view\" sample). The view adds itself as a perspective listener and attempts to hide itself when its perspective is deactivated.\n\n* import the attached zip file as an existing project\n* launch a new workspace, open Java perspective\n* Show View \u003e Other... \u003e Sample Category \u003e Sample View\n* Open a new perspective\n* switch back to Java perspective\n\u003e the view is still there (with its control missing)\n\nDebug wants to use the \"hide\" feature to hide views it automatically opened, when a perspective change occurrs, such that it does not leave views open. (there does not seem to be a way to close a view in a specific perspective, so we are opting to \"clean\" a perspective when the user changes perspectives).",
    "Created an attachment (id\u003d33161)\nexample plug-in\n\n",
    "As this bug is important for debug, I\u0027m wondering if we could get some indication as to whether this will be fixed for 3.2 (and when)? Thanks for your help.",
    "The perspective listener is notified of the event after the perspective has been deactivated, which is too late to hide the view.  Still it should fail gracefully and not leave the view half-baked.  Does it generate anything in the error log?\n\nNick, is there some other obvious way we can help the debug guys with their usecase?\n\nPW\n",
    "I agree the workbench should not be left in an inconsistent state.  \nNotifications that end in \"ed\" should be sent only after the change has occurred.\nIf the perspective has already been deactivated, then hideView should have no effect, or should affect only the new perspective (if it has been activated).\n\nThere have been other requests to allow explicit management of views in any open perspective.  \n\nFor Debug\u0027s case, I believe this is all driven by contexts.  The workbench should really be handling all this internally - they shouldn\u0027t have to manage this themselves.  \n\nBoth of these are major enhancements though, and too late for 3.2.\n\nAdding an IPerspectiveListener4 with pre-notifications (e.g. perspectiveDeactivating) might suffice.\n\n\n\n",
    "Problem aside, note that PerspectiveAdapter implements IPerspectiveListener through IPerspectiveListener3.  If we add a 4th, it should implement that too.\n",
    "When I trace through the perspective deactivated/activated code, it appears that the \"next\" perspective has not yet been activated when the deactivated callback is made. Perhaps it is in an \"in between\" state?\n\nIf a pre-deactivate callback would allow us to hide views in a perspective before another is activated, then that solution would be good for debug.\n\nI did not see any log entires regarding the \"broken\" view state.",
    "Although, after \"left over\" views were left behind, I did get errors like this:\n\njava.lang.ArrayIndexOutOfBoundsException: -1\n    at java.util.ArrayList.get(ArrayList.java:326)\n    at org.eclipse.ui.internal.WorkbenchPage$ActivationList.bringToTop(WorkbenchPage.java:3598)\n    at org.eclipse.ui.internal.WorkbenchPage.updateVisibility(WorkbenchPage.java:3112)\n    at org.eclipse.ui.internal.WorkbenchPage.setPerspective(WorkbenchPage.java:3036)\n    at org.eclipse.ui.internal.WorkbenchPage.busySetPerspective(WorkbenchPage.java:912)\n    at org.eclipse.ui.internal.WorkbenchPage.access$12(WorkbenchPage.java:897)\n    at org.eclipse.ui.internal.WorkbenchPage$12.run(WorkbenchPage.java:3152)\n    at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)\n    at org.eclipse.ui.internal.WorkbenchPage.setPerspective(WorkbenchPage.java:3150)\n    at org.eclipse.ui.internal.PerspectiveBarContributionItem.select(PerspectiveBarContributionItem.java:122)\n    at org.eclipse.ui.internal.PerspectiveBarContributionItem$1.widgetSelected(PerspectiveBarContributionItem.java:91)\n    at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:90)\n    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:920)\n    at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3287)\n    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2907)\n    at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1790)\n    at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1754)\n    at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:400)\n    at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)\n    at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:106)\n    at org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:109)\n    at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:93)\n    at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:69)\n    at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:374)\n    at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:169)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:324)\n    at org.eclipse.core.launcher.Main.invokeFramework(Main.java:338)\n    at org.eclipse.core.launcher.Main.basicRun(Main.java:282)\n    at org.eclipse.core.launcher.Main.run(Main.java:977)\n    at org.eclipse.core.launcher.Main.main(Main.java:952)",
    "Is there any hope of IPerspectiveListener4 with pre-notifications in 3.2?",
    "Darin, could you clarify why you need to \"clean up\" the perspective when switching away from it?  I would have thought that the progressive exposure of Debug views was not something you\u0027d want to unwind.  That is, if you thought they were useful to the user when they were opened, why are they no longer useful when the user switches away from the perspective (he may after all switch back and want to resume with the same setup)?\n\n",
    "Darin, I think we might be able to add the pre-notification API for 3.2 (which means preferably for M5).\n\nI would prefer to address this more globally ... either evaluating more event sources to see if a pre and post pattern is useful or fixing the perspective so that you can close a view when the perspective is inactive, but I guess we\u0027re running out of time.\n\nIf Nick has no objections, then I think we will add the pre-events to an incarnation of IPerspectiveListener4.\n\nPW\n",
    "The debugger opens and closes views automatically depending on how clients have defined their view bindings. Our \u0027view binding\u0027 extension point allows a client to say \"auto-close\" this view when a debug session ends. As well, we auto-close views that were auto-opened in any non-debug perspectives when a debug session ends. Thus, when debugging in the Java perspective, and debugging ends, we close all debug related views automatically.\n\nIf the user changes perspectives manually while a debug session is active (say from Java to Debug), we have to clean up (close all \"auto-close\" views) when leaving the persepctive, as there is no way to close views in a perspective when the debug session later terminates (there is no API to say \"close view X in perspective Y\").  \n\nI would prefer to see view close (hide) work on the existing deactivated callback, if possible. However, if pre-notifications are necessary, that is fine (I just don\u0027t want you to add API that is not required).",
    "Added API with IPerspectiveListener4 (added to PerspectiveAdapter).  It fires a preDeactive event.  Now the following code works cleanly:\npublic void perspectivePreDeactivate(IWorkbenchPage page,\n\t\tIPerspectiveDescriptor perspective) {\n\tIViewPart view \u003d window.getActivePage().findView(\n\t\t\tIPageLayout.ID_BOOKMARKS);\n\tif (view !\u003d null) {\n\t\twindow.getActivePage().hideView(view);\n\t}\n}\n\nRelease into HEAD \u003e20060204\n\nPW\n",
    "fixed",
    "verified in I20060216-0010\n\nPW"
  ],
  "commentCreationDates": [
    "2006-01-17T20:17:08+01:00",
    "2006-01-17T20:17:44+01:00",
    "2006-01-18T19:53:46+01:00",
    "2006-01-19T02:44:29+01:00",
    "2006-01-19T18:11:29+01:00",
    "2006-01-19T18:26:28+01:00",
    "2006-01-24T14:30:01+01:00",
    "2006-01-24T14:33:27+01:00",
    "2006-01-26T14:50:20+01:00",
    "2006-01-26T15:08:59+01:00",
    "2006-01-26T15:31:38+01:00",
    "2006-01-26T15:36:58+01:00",
    "2006-02-04T21:19:55+01:00",
    "2006-02-07T12:10:32+01:00",
    "2006-02-16T17:53:20+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "-1",
      "elements": [
        {
          "method": "java.util.ArrayList.get",
          "source": "ArrayList.java:326"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage$ActivationList.bringToTop",
          "source": "WorkbenchPage.java:3598"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.updateVisibility",
          "source": "WorkbenchPage.java:3112"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.setPerspective",
          "source": "WorkbenchPage.java:3036"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.busySetPerspective",
          "source": "WorkbenchPage.java:912"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.access$12",
          "source": "WorkbenchPage.java:897"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage$12.run",
          "source": "WorkbenchPage.java:3152"
        },
        {
          "method": "org.eclipse.swt.custom.BusyIndicator.showWhile",
          "source": "BusyIndicator.java:69"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.setPerspective",
          "source": "WorkbenchPage.java:3150"
        },
        {
          "method": "org.eclipse.ui.internal.PerspectiveBarContributionItem.select",
          "source": "PerspectiveBarContributionItem.java:122"
        },
        {
          "method": "org.eclipse.ui.internal.PerspectiveBarContributionItem$1.widgetSelected",
          "source": "PerspectiveBarContributionItem.java:91"
        },
        {
          "method": "org.eclipse.swt.widgets.TypedListener.handleEvent",
          "source": "TypedListener.java:90"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:920"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3287"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2907"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1790"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1754"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:400"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:143"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:106"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:109"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:93"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:69"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:374"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:169"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:338"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:282"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:977"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:952"
        }
      ],
      "number": 0,
      "commentIndex": 7,
      "bugId": "124200",
      "date": "2006-01-24T14:33:27+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "124200",
  "bugId": "124200",
  "date": "2006-01-17T20:17:08+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}