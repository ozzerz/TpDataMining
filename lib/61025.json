{
  "comments": [
    "The API lets you list features that are enabled in the configuration, but not \nthose installed in sites that the config knows about that are not enabled.\n\nThis can be seen in the Product Configuration dialog when you select the \ndisabled features toggle.\n\nUse case is an ISV trying to install their software on a target product who \nchecks for their pre-reqs up front.  They can only see configured features so \nthey say no - we can\u0027t install or worse, install the missing features again.  \nIf they could list disabled features then after the first search they could ask \nagain - is the feature there but disabled?\n\nThe API should either add an option to the current command, or a new command.  \nMaybe the implementation should be a list all features and each includes an \nattribute (prefix or suffix) that identifies state.  \nMaybe it should be:\n-command allFeatures\n\nI don\u0027t see this as an option on the API doc page: \nhttp://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-update-\nhome/doc/working/documentation/standalone_update.html",
    "This is probably worth adding.\nFor the time being, if you need to re-install the feature, I think nothing \ngets downloaded unless it needed be, so that should not be too much of a \nconcern.",
    "I will have to see if this works, but I think we can do this without extra \nflags, the output will have to be changes to show all features, and for each \none to say if it is enabled or not.",
    "That would be true for an update manager performed process, but some of this \nAPI might be used by an ISVs formal install tool that checked what was there, \nwhat could be there, and added what was missing via a setup.exe approach.\n\nSo, this might result in redundantly installed features... we don\u0027t want to ask \nthem to walk all sites known to the configuration.",
    "I will probably go with -listFeatures and show the state of each feature.",
    "OK, the configuredFeatures command is replaced by listFeatures.\nFeatures will be listed as\n\nsite\n   feature: feature_id    configured \n   feature: feature_id    unconfigured\n",
    "Sounds ok... if pressed for comment I\u0027d ask why not enabled and disabled given \nthese are the terms in the UI and also the values used to change their state:\n\n\n    -application  org.eclipse.update.core.standaloneUpdate\n    -command enable\n    -featureId feature_id \n    -version version \n",
    "The terminology is all over the place. If you go to all possible places and \nalso look at api\u0027s and docs, you will both configure/enable and \nunconfigure/disable.\n\nAt some point, Dejan and I have been talking about distinct semantics for \nconfigured and enabled. Enabling and disabling as user actions, applied to \nconfigured features.\nFor example, if a feature is updated, old version is unconfigured, and new \nversion is configured and enabled.\nA user could disable it, but not unconfigure it. Also, a user would not be \nable to enable the old version which is unconfigured.\n\nAnyway, I have no preference, so I will change it to enable/disable.",
    "But... isn\u0027t reverting to a previous entry in the install history just that? \n(disabling a current feature and going back to the previous one?)\n\nAgreed that there are some subtle plays on what we want to do, what we want the \nusers to be able to do, and what the tool allows them to do.  Problem is always \nthat we can\u0027t quite say that many things should never be done by anyone, just \nnot by most.... that is hard to manage.  The \u0027blessed\u0027 is a moving target \nusually controlled inside the local shop.  ",
    "FYI - tried it on 0506  - works fine. But... (isn\u0027t there always a)... \n\nI didn\u0027t think it was there, actually, I didn\u0027t think. I just ran my bat cmd \nwith its configuredFeatures request.  This results in a nullPointer exception.\nThe .log entry tells me it is an invalid command, but that also might be nice \nto see in the console/direct feedback (instead of just a \"Command failed\", go \nsee .log).  \n\nNot sure the null pointer exception should be there after you catch that it is \nnot a supported command.\n\nAnd... while here (I kept testing with left brain) - I could not get disable to \nwork.  Finally got it - had to re-read the instructions.  I said -from instead \nof -to. Should you have shouted at me in the command response for using the -\nfrom when it did not belong - or is that over the top (as -from is used \nelsewhere).\n\nOne last bit before the .log.  You might want to be explicit in the doc for \nlistFeatures on the output format.  I looked at it and wondered.  Are you \ngiving me the dir name or the featureID_versionID.  I actually renamed my dir \nto see for sure.  The way it is formatted right now also requires that the \ncaller parse out version ID.  You could argue for \"FeatID VersionID Status\" as \nthe format.....  less confusing.  I won\u0027t argue for that - but will ask that it \nbe documented carefully.  Course - it might be easier to use the other format \nthan document carefully :-).\n\nFull log from failed command type:\nCommand-line arguments: -application org.eclipse.update.core.standaloneUpdate -\ncommand configuredFeatures\n!ENTRY org.eclipse.update.core 4 0 May 07, 2004 11:02:33.554\n!MESSAGE Invalid command:configuredFeatures\n!ENTRY org.eclipse.update.core 4 0 May 07, 2004 11:02:33.564\n!MESSAGE  [java.lang.NullPointerException]\n!STACK 0\njava.lang.NullPointerException\n\tat org.eclipse.update.standalone.CmdLineArgs.getCommand\n(CmdLineArgs.java:92)\n\tat org.eclipse.update.standalone.StandaloneUpdateApplication.run\n(StandaloneUpdateApplication.java:39)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:283)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:242)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:119)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:84)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:59)\n\tat java.lang.reflect.Method.invoke(Method.java:389)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:269)\n\tat org.eclipse.core.launcher.Main.run(Main.java:700)\n\tat org.eclipse.core.launcher.Main.main(Main.java:684)\n\n",
    "Re-openning to address Pat\u0027s feedback.",
    "addressed issues in comment #9"
  ],
  "commentCreationDates": [
    "2004-05-05T14:33:12+02:00",
    "2004-05-05T19:48:59+02:00",
    "2004-05-05T19:50:25+02:00",
    "2004-05-05T19:53:40+02:00",
    "2004-05-05T19:56:46+02:00",
    "2004-05-05T20:15:00+02:00",
    "2004-05-05T20:26:23+02:00",
    "2004-05-05T22:16:35+02:00",
    "2004-05-05T22:37:33+02:00",
    "2004-05-07T17:57:11+02:00",
    "2004-05-07T20:23:01+02:00",
    "2004-05-09T04:37:26+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.update.standalone.CmdLineArgs.getCommand",
          "source": "CmdLineArgs.java:92"
        },
        {
          "method": "org.eclipse.update.standalone.StandaloneUpdateApplication.run",
          "source": "StandaloneUpdateApplication.java:39"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:283"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:242"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:119"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:84"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:57"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:59"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:389"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:269"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:700"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:684"
        }
      ],
      "number": 0,
      "commentIndex": 9,
      "bugId": "61025",
      "date": "2004-05-07T17:57:11+02:00",
      "product": "Platform",
      "component": "Update",
      "severity": "enhancement"
    }
  ],
  "groupId": "61025",
  "bugId": "61025",
  "date": "2004-05-05T14:33:12+02:00",
  "product": "Platform",
  "component": "Update",
  "severity": "enhancement"
}