{
  "comments": [
    "Using M7 as a development environment, I can not run \"Run ... runtime workbench\" \nwith last weeks integration build (I20040226) as the target. I get the following \nmessage in log. I marked as \"blocker\" since I\u0027d think this would be a common way \nof doing development on Eclipse (that is, use milestone build as development \nplatform, and latest integration build as target). I would be surprised if not \nalready found, but I couldn\u0027t find existing bugzilla. A workaround would be \nappreciated. BTW ... using just the integration build, and launching runtime \nworkbench seems to work fine. \n\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Feb 28, 2004 21:17:37.924\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.IllegalStateException: Bundle reference:file:D:\n/builds/Daily/eclipse-SDK-3.0M7-win32/eclipse/workspace/org.eclipse.osgi.util/ \n[2] is not active\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.\nensureBundlesActive(EclipseStarter.java:123)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:\n93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:279)\n\tat org.eclipse.core.launcher.Main.run(Main.java:742)\n\tat org.eclipse.core.launcher.Main.main(Main.java:581)",
    "In the I build the pde, update and some part of runtime have been reorganized in\nsuch a way that they are mot compatible with M7.\nUse your I build as your dev environment.\n\nPlease close as invalid if it works for you.",
    "Well ... it might work for me personally, but I\u0027m just a small part of a large \nteam. So, are you saying that everyone who wants to \"keep up\" with integration \nbuilds, has to start doing development with an integration build as their \ndevelopment environment?! This seems a little dangerous, since I builds are not \ncompletly stable and not completely tested (by definition). Or are you saying \nthere\u0027s no easy work around at the moment ... but there is still efforts being \nmade to fix this incompatibility by the next integration build? If no hope of \nbeing compatible, then we (as a large team) have two alternatives, either all \nmove up to do developement on potenitally unstable I builds, or all sit back \nand wait for M8 (and get further out of synch with base) ... neither seem like \ngood alternatives, so I\u0027m reluctant to close as invalid. ",
    "Your concerns are valid however there is not much we can do about this.  The \nnew function/structure we are putting in place needs more/different information \nthan the older environments can offer.  As I\u0027m sure you can appreciate, it is \nvery difficult for us to manage our code and artifacts to capture the vision \nfor 3.0 if we have to maintain N iterations of the structure we did along the \nway.  As was noted, this issue is not specific to the runtime.  At least \nseveral components have conspired to break things all at once :-/\n\nAs for what you should do, I suggest moving to the latest I builds.  There are \nproblems to be sure but we all use them and are not losing data or crashing. \n\nI\u0027m going to close this.  If someone can offer up the relevant fixes or take \nsome other work we can reopen but we just don\u0027t have the cycles.",
    "Jeff, can the PDE not organize itself so that part of its \nfunctionality/implementation is provided by the *TARGET* version of Eclipse, \ninstead of the developement version? Or perhaps they could provide fragments \nfor each target runtime, but that blows up pretty quick.\n\nIt seems like this is the only way to prevent this in the future.  After all, \nEclipse is an extensible IDE, and it would be naive to think that developers do \nnot have lots of custom tools installed and running in their development \nenvironment.  The extreme case is people who use WSAD to develop for WSAD.",
    "moving to PDE \u0027cause I know it will make Wassim happy...",
    "In M7, update.configurator expects \"platform.cfg\" and PDE generates one for it.\nIn 0226, update.configurator expects \"platform.xml\" and PDE generates one for \nit.\n\nYou are using M7 as a host platform to target a 0226 (a later build). \nI\u0027m not sure why you expect PDE in M7 to be forward-compatible.  I\u0027m no \npsychic on what the future holds for update.configurator ;-)\n\nIn your scenario, you are using M7, so PDE generates a \"platform.cfg\", which \nis not understood by 0226\u0027s update.configurator.\n\nNote that update and core runtime are still moving targets and PDE is not \nexpected and cannot be expected to provide backward compatibility on a build-\ndate granularity level.\n\nWhile we acknowlege the inconvenience this may have caused you, there is \nnothing that can be done in this case.  There is a breaking point where \nupdate.configurator changed its platform config file format.\n\nPDE provides backward-compatiblity with 2.x releases, and that\u0027s as far as \nbackward compatibility goes.",
    "So there is something in 0226 which knows how to generate a \"platform.xml\" \nfile. So the suggestion was that you make that functionality visible to the \nolder IDE (M7), so that it could know how to launch 0226.  Or better yet, it \nactually asks 0226 to launch iteself.\n\nObviously you can\u0027t do this after the fact and I don\u0027t expect an M7.0.1 \nrelease.  But, going forward you could take this approach to avoid the problem \nthe future.  That way Eclipse R3.0 could be used to develop for Eclipse 4.0.",
    "I have to agree with Randy on this one.  In our case there are plugins we \nrequire for development that have not been upgraded to a 3.0 base.  We have no \nchoice but to stay back a level for our workbench, but we are required to \nlaunch, debug, certify our work on 3.0.  It\u0027s untenable.  As more tools are \nacquired from more sources, workbenches are going to be held back by their \nweakest link.  This is going to be a much more common scenario.  Its akin to \nrequiring that all nodes of a network be upgrade the same level of software at \nthe same time which is something we all know customers will not accept.",
    "I don\u0027t understand why you think that forward-compatibility on the part of PDE \nis feasible and expected.\n\nThe suggestion made by Randy in comment #7 is simply impossible.\n\nLet\u0027s use Randy\u0027s R3.0 and R4.0 hypothetical scenario as an example:\n\nWhen we ship R3.0, update.configurator (from the Update component) expects a \nplatform.xml file that it could launch successfully, and PDE generates one for \nit.\n\nLet\u0027s say in R4.0, the Update team decided to go with an (arbitrary) \nplatform.ini file instead of platform.xml.  PDE in R4.0 could adapt to that \nchange and be even backward-compatible so that it could be used to target R3.0 \npatforms.\nOn the other hand, PDE 3.0 could not have foreseen these breaking changes \nobviously, so what could have possibly been done in the 3.0 development cycle \nto account for the future unforseen breaking change?  Nothing.\n\nRandy is suggesting that 3.0PDE could call 4.0 update.configurator (from the \ntarget platform) to have it generate the correct configuration file.\nHow is that possible?  The host platform instance (3.0) and its plugins don\u0027t \nhave plugins from the target platform on their runtime classpath.  The only \nupdate.configurator a 3.0 PDE would have on its classpath is the one that was \nshipped with it.  It cannot call APIs from the 4.0 update.configurator in the \ntarget platform.",
    "In other words, PDE will always require that the target platform be the same \nor older than PDE itself. This is a perfectly reasonable requirement - the \nself-hosting Eclipse is typically the latest stable build from Eclipse.org and \nas long as it is backward-compatible with previous releases, all is well.",
    "It seems there are 2 possibilities (other than doing nothing):\n\n1) Support N+1 hosting. Provide a 2.1.x version of PDE which can launch a 3.0 \nversion of Eclipse.  Worst case you double your work load.  The alternative is \nthat users wait for every tool they have installed to support the latest \nversion of eclipse before they themselves can do so.\n\n2) I thought bundles could come from anywhere.  In fact, I though I saw a demo \nat EclipseCon where a \"plugin\" was loaded over a network instead of from the \nplug-ins folder.  Could you not use the new runtime support to do what you said \nis impossible? Dynamically define a bundle in the target runtime and ask core \nto activate it?",
    "Regarding solution #1:\nMaybe I just can\u0027t relate to the workflow that requires forward \ncompatibility.  Once upon a time when I was on the WSADIE team, I remember \nusing the latest and greatest lightweight Eclipse to target my product that \nwas based on a previous version of Eclipse.  I don\u0027t remember anybody using a \nplatform as their host workbench that is older than the target platform.\nPlus, in this proposed solution, which would require a double work load at \nworst, I\u0027m not sure this so-called patch really fits the criterion of a \ncritical fix that should go into a service release.  So I can\u0027t see it \nhappening.\n\nRegarding solution #2:\nAlthough it is technically possible in the Eclipse of tomorrow to point at a \nbundle and dynamically install it, two main problems come to mind immediately:\n\n1. When you install update.configurator 4.0 dynamically, the 3.0 counterpart \ngets deactivated and who knows what the ramifications of this might be.  There \nis no guarantee there is binary compatibility between update.configurator 4.0 \nand the rest of the Update plug-ins in 3.0.  Spend a day with the Update team, \nand see what happens if people start mixing plug-ins themselves.  You could \nend up with a pretty messy configuration.\n\n2. Back to the whole crystal ball thing, you are making the assumption that \nthe plug-in needed to read the configuration file is always going to be \nupdate.configurator.  What if they change it to something else?  After all, \nthe name did change between 2.x and 3.0.  PDE simply can\u0027t make assumptions \nand predictions about future platforms and what plug-ins to dynamically \ninstall.",
    "\"when I was on the WSADIE\".  You were at the bottom of the stack, and there was \nsignificant lag in what your target version of eclpise was and what was \"latest \nand greatest\".  In addition, WSAD has reduced the lag time and is very much in-\nstep with the workbench.  Also, the number of add-in tools has increased over \ntime.\n\n\"When you install update.configurator 4.0 dynamically, the 3.0 counterpart \ngets deactivated and who knows what the ramifications of this might be\"\n\nObviously this would have to be split into 2 pieces. the 3.0 counterpart would \nnever even get loaded since that is not the target runtime. One piece is would \nbe contant and part of the IDE, and it would load the dynamic second piece from \nthe target IDE. I suppose if I went into preferences and changed my target \nplatform, then at that point the portion provided by the target runtime would \nget shutdown and swapped out."
  ],
  "commentCreationDates": [
    "2004-02-29T02:29:09+01:00",
    "2004-02-29T14:53:23+01:00",
    "2004-02-29T16:05:37+01:00",
    "2004-02-29T20:24:03+01:00",
    "2004-03-01T15:36:34+01:00",
    "2004-03-01T16:58:31+01:00",
    "2004-03-01T17:27:06+01:00",
    "2004-03-01T18:26:30+01:00",
    "2004-03-08T19:39:54+01:00",
    "2004-03-08T20:05:39+01:00",
    "2004-03-08T20:19:15+01:00",
    "2004-03-08T20:44:35+01:00",
    "2004-03-09T04:31:00+01:00",
    "2004-03-09T16:49:53+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Bundle reference:file:D: /builds/Daily/eclipse-SDK-3.0M7-win32/eclipse/workspace/org.eclipse.osgi.util/  [2] is not active",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.ensureBundlesActive",
          "source": "EclipseStarter.java:123"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java: 93"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:279"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:742"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:581"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "53354",
      "date": "2004-02-29T02:29:09+01:00",
      "product": "PDE",
      "component": "UI",
      "severity": "blocker"
    }
  ],
  "groupId": "53354",
  "bugId": "53354",
  "date": "2004-02-29T02:29:09+01:00",
  "product": "PDE",
  "component": "UI",
  "severity": "blocker"
}