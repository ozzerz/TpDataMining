{
  "comments": [
    "For an RCP app, we need the ability to specify the links directory away from \nthe RCP directory. We have a need to have several apps share the RCP \nimplementation without sharing the apps themselves. Thus we want to start the \nRCP and point it to an application specific config and workspace as well as an \napplication specific links area.",
    "See also: bug 35037, bug 46226, bug 68526, bug 79363.",
    "Need a bit more info here.  First are you using update.configurator?  this is \nthe only way the links dir will do anything for you.\n\nSecond, do you really care about what plugins are *deployed* or just which are \n*installed*?  The point here is that the configuration is the guy who defines \nwhat plugins are presented (installed) to the runtime for execution.  You can \nhave 1000s of plugins in linked dirs and otherwise but have a configuration \nthat only lists 3 and you will only get those 3.  There may be some minor \nperformance impacts during certain install operations but in general the \nruntime only cares about the plugins that it has been told about.\n\nUsing this model you and all your friends can make as many extensions (links \ndir entries) as you want but each \"product\" comes with a configuration that \nidentifies the list of features/plugins to use (via the platform.xml file).  \nThen you run eclipse -configuration \u003cmy configuration\u003e and only those plugins \nin \u003cmy configuration\u003e/org.eclipse.update/platform.xml are run.  If you update \nthis configuration, only that configuration is affected.\n\nDoes this work for you?",
    "I have gotten this to work by specifying all the plugins in config.ini using \nosgi.bundles. This is not what I want to be doing. I do have the \nupdate.configurator plugin as that seemed the only way to get anything to \nwork. I had thought that the solution was to keep the platform.xml from a \nworking version but, when I deleted the links directory from the eclipse RCP \ninstall dir, platform.xml was replaced (put into the history) with one that \ndid not have the linked directories.\n\nWhat I want is to have multiple apps installed on a machine using the same RCP \ninstallation but with no intermingling of plugins between any of the apps.",
    "We like using update.configurator because it allows for pieces to be added\neasily (later installs, user plugins, 3rd party plugins, etc.).\n\nI think what Jim is asking for is the following. Assume there\u0027s an Eclipse\ninstall on the machine (could be a bare RCP + the configurator or it could be a\nfull SDK). Call that the Base. We don\u0027t want to modify the Base. We might not\neven be able to because of permissions or policy.\n\nLater we want to install a rich client program, call it P1. This will go in a\ndirectory completely seperate from the Base. It will include only plugins and\nfeatures unique to P1, and not any of the RCP plugins like osgi or core.runtime.\nP1 is the first in a long line of rich client programs so we don\u0027t want to\nduplicate any common stuff. P1 has a links directory with Base.link which points\nback to the Base.\n\nFirst attempt: We copy startup.jar into P1 and create a batch file (or use the\nnative launcher) to run the Main class. The startup code figures the Install Dir\nis P1, and fails to find osgi and the configurator in P1/plugins (apparently\nthis is before the code that knows about the links directory) and aborts with\n\"Could not find framework\".\n\nSecond attempt: We try creating a batch file in P1 that runs java with a\nclasspath pointing to Base/startup.jar. The startup code figures the Install Dir\nis the Base, gets osgi and configurator and other plugins out of Base/plugins\nok, but has no way to relate back to the P1 directory. It looks in Base/links,\nwhich doesn\u0027t exist, so it aborts with \"Application P1.application could not be\nfound in the registry\".\n\nIf there was a way to provide some kind of \"links path\" instead of a single\nlinks directory then we could tell it to look in P1 and P1/links to compute the\nclosure of all the plugins needed to run P1 (and possibly extensions to P1).\nAnother possible implementation is move knowlege of the links directory very\nearly into the launcher so that even the framework could be acquired from there.\nThere may be other ways to address it that you could think of.\n\nLooking ahead a little, when P2 comes out, we want to support running P1 only,\nrunning P2 only, or running a product suite that combines P1 and P2. Without\nchanging P1 or the Base. And so forth. It\u0027s almost like \"product fragments\" but\nbackards from the normal way you think of fragments working.\n\nSee also bug 53338 comment #3 for a different perspective.",
    "It seems the only point of contention here is that you don\u0027t want to update the \neclipse/links directory.  Not sure why not.  This is completely expected.  By \ndoing this you will have one base that \"knows\" about all the plugins in P1, \nP2, ... (the extensions).  This does NOT mean that when you run Eclipse all \nthose plugins will be installed into the running eclipse.  That is the job of \nthe configuration.\n\nYou can have any number of configurations you want.  The configurations\u0027s job \nis to carve up the pool of plugins to form a consistent set to run.  These (and \nonly these) are installed into OSGi/runtime and thus run.  \n\nConcrete example. \n\n- install base as you described\n- install P1 in a completetly separate location.  P1 should include:\n  - all the plugins/features you care to put there\n  - a configuration (complete with platform.xml) that identifies the \nfeatures/plugins from P1, base and whatever else you need)\n  - an eclipse launcher (use the new one with the .ini file) or a bat file that \nruns \n      eclipse -configuration \u003cp1\u003e/configurations -cp \u003cbase\u003e/startup.jar\n- add P1.link to base/links\n\nUser then runs the launcher/bat in P1 and gets P1 function.\n\nRepeat for P2 etc.\n\nSeems like you tried this but had problems?  Did you do exactly what is \ndescribed?  ",
    "When I tried this I did not have the links directory under eclipse. The \nplatform.xml specified the different extension directories but was over-\nwritten when eclipse started. Is there maybe some documentation on the format \nof platform.xml that I am missing?\nAlso, the senario that you are describing seems to presume that you would \nnever use the update configurator, is that true? Am I to fully specify \nosgi.bundles? I do not neccessarily want app1 to know about the plugins \navailable in app2.",
    "Caveat:  There may be a bug that you are encountering that is scuppering the \nuse I am describing.  What I am saying \"should\" work.  i\u0027ve not had time to \nconfirm.  Adding Dorian to the party to make sure I\u0027m not blowing smoke.\n\nAcutally, the scenario presumes that you ARE using update.configurator.  It is \nthe guy that reads the platform.xml.  As you have seen, you don\u0027t really want \nto be messing with the osgi.bundles list.  Not fun.  If you use osgi.bundles \nthen you are, in effect, not using the configurator (the configurator may go \nand find some plugins to install but the would find that they rae already \ninstalled cause they were on the osgi.bundles list).\n\nAs for app1 and app2 knowing about each other, again, my point is that app1 \u003d\u003d \nconfiguration 1, app2 \u003d\u003d configuration 2.  Having 5000 plugins in the same \nshared plugins dir does not mean that you know about all of them.  You only get \nto see the ones you are told about in your configuration.",
    "Where are the docs for platform.xml?",
    "When I looked at platform.xml it showed the static locations of the contents \nof the links directory. So, why do I even need the links directory if I have \nplatform.xml? Mind you, I would rather not have to code platform.xml at all. \nThat seems the job of the update configurator. If I could tell the \nconfigurator where to look for the links directory then none of this would be \nan issue. By the way, why isn\u0027t the update configurator part of the RCP \ninstallation?",
    "the links dir is the mechanism for locating plugins not for choosing which \nplugins to run.  The platform.xml is the mechanism for choosing which plugins \nto run.  My sense here is that your are fighting the design.  \n\nYou might not need the links dirs.  Perhaps they are only used by \nupdate.configurator when it needs to do a full reconcilation?  Dorian?\n\nDon\u0027t know where the doc for the file is.  Dorian should be able to help there.\n\nThere is alot of discussion about update.configurator and its in/exclusion \nin/from the RCP.  Summary is that features etc are update notions and update is \nnot a base part of RCP.  The current (config.ini) story is not happy and we are \nlooking at the options.  ",
    "My experience has shown that the platform.xml does not seem to work to boot up \nthe application. The update conigurator seems to be required. That is, unless \nI am not using the correct features of platform.xml. I am using a platform.xml \nthat was created by the update configurator.",
    "With the hope I don\u0027t confuse you more, let me add a couple of comments about \nplatform.xml:\n\nPlatform.xml is currently an internal format, but I plan to document it anyway \n(bug 74637). The file is generated by the update.configurator on a first run, \nor upon a configuration change (new installs, updates, feature disabling, and \nso on). Normally, the file is under the complete control of the \nupdate.configurator: one can change it programmatically using the \nIPlatformConfiguration interface, but it is best left up to the update \nconfigurator to manipulate it as it needs. \n\n*Important*.\nIf you manually edit it, then make sure that the \"date\" attribute in the root \nelement \u003cconfig\u003e is not there. I won\u0027t go into the technical details about how \nconfigurator handles timestamps and all that, but just edit the file and don\u0027t \nwrite a date attribute in the \u003cconfig\u003e. The update configurator will \nregenerate the file with the appropriate timestamp, without touching the rest \nof the file.\n\nLinks is the pre 3.0 way to handle multiple installation folders, and because \nplatform.xml is not API, it is still supported. Changes in links will be \nreflected in platform.xml. If platform.xml ever becomes an API, than links \ncould be deprecated.\n",
    "These kinds of caveats are the very reason why it would be much more friendly \nfor enterprise deployments of the sort we are trying to accomplish if Jim\u0027s \noriginal request could be accommodated.  When you start talking \nabout \"internal format\" and such, it makes me very concerned about our ability \nto automate the process of creating the right plugin.xml content for each of \nour deployed applications and have it hold up over time.\n\nIn addition, it is much more clean for us and our customers if the application \nlevel plug-ins can be partitioned rather than all dumped into one directory.  \nThis kind of separation of the various installed applications is what they \nwill expect.  There will not necessarily be any relationship with the various \ninstalled applications.  Some feature sets may run together as part of a given \nsuite of applications, others will be totally unrelated applications.  As Ed \nnoted in an earlier comment, our desire is to create something like an \nRCP \"framework install\" such that we can lay down various versions of the RCP \non a machine and then *separately* install various applications to run on top \nof it.\n\nSo, the reason that we are pushing against your design is not to be difficult \nwith you, but to satisfy the kind of enterprise customer deployment \nrequirements that we need to satisfy.  As such, I would really like have you \nconsider this request from our perspective rather than trying to shoehorn our \nrequirements into a workaround using the current behavior that you have \nimplemented.\n\nThat said, I would suggest a two phased approach.  In phase one, your help in \ngetting us up and running using platform.xml has been and will continue to be \ngreatly appreciated.  In phase two, let\u0027s discuss how we can satisfy \nenterprise deployment requirements.  This is something that the add-in \nprovider community requested for the development roadmap as a high priority \nitem and it has been accepted per the recent draft that I have seen.  We don\u0027t \nneed a fix immediately, but we need to know the path forwards.",
    "This really meshes well with some of the comments in bug 53338. If the links \ndirectory did not have to be under eclipse then you get what Ed was talking \nabout in that bug. Also you reduce \"dll hell\" which is basicly what you have \nwith this current implementation.\n\nI do not like the idea of being told to use internal, undocumented, methods to \nachieve our goals.",
    "Just to clarify the \"internal\" aspect of platform.xml: \nIts syntax is currently internal, but if the solution to the problems \ndescribed here or elsewhere requires it to be public, then it can be polished \nand made API.\nAlso, using the API\u0027s in the org.eclipse.update.configurator package you can \ncreate, set the content and save the configuration (platform.xml), without you \nhaving to know the exact syntax. I know of a group who\u0027s taken this approach \nand things work ok for them (but they had to do some work to get it going).",
    "Is the intent that the links directory go away? If so, what is the intended \nway to do the same thing in the future?\n\nIf the links directory is not intended to go away then moving its location \nseems fairly simple. It appears to be accessed in only one place and it \nappears to be hardcoded. That can be changed to be a property access instead \nand the property can be initialized to the current value. Then all we would \nhave to do is set the property in config.ini.",
    "I just tested using platform.xml to define things. I don\u0027t think it works the \nway you are stating. First I could not use it without the links directory, \nwhich seems to support what you are saying but doesn\u0027t make that much sense to \nme. If I have already specified the locations of the linked in extensions, why \nreplace what I have. I would guess that it is simply responding to the fact \nthat the links had changed so it is removing those links I had specified. To \ntest that theory I put the links directory back and had the correct \nplatform.xml. Things ran fine. I then added a new entry to the links directory \nwhich would simulate installing another RCP app. I re-ran the app and then \nlooked at platform.xml. It contained the new entry. This is not what was \nimplied in comment #5. So, unless I am missing something, there is NO way to \nhave app 1 that only knows which bundles are installed for it vs app2 which \ncould have a totally separate set without using osgi.bundles.\n\nMaybe I am missing the point of comment #5.",
    "We are in agreement on the problem and that it is interesting but the differ on \nthe solution.  For us the links dir has a very specific and narrow purpose (as \noutlined) and it appears that in your usecase, you do not the function for \nwhich links was designed.  So lets set that aside and look at the mechanism \nthat is designed to address this usecase.\n\nWhat you really want is to manage the platform.xml.  This is what defines the \nconfiguration that you run.  For example, try the following\n- delete all links directories you can possibly find\n- install a base Eclipse (whatever that is for you) in c:\\base\n- install Product 1 someplace separate in c:\\product1\n- create c:\\product1\\eclipes\\configuration\\org.eclipse.update and add the \nfollwoing platform.xml\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003cconfig transient\u003d\"false\" version\u003d\"3.0\"\u003e\n  \u003csite enabled\u003d\"true\" policy\u003d\"USER-EXCLUDE\" updateable\u003d\"true\" \nurl\u003d\"platform:/base/\"\u003e\n    \u003cfeature application\u003d\"org.eclipse.ui.ide.workbench\" \nid\u003d\"org.eclipse.platform\" primary\u003d\"true\" \nurl\u003d\"features/org.eclipse.platform_3.1.0/\" version\u003d\"3.1.0\"\u003e\n      \u003croot\u003eplatform:/base/plugins/org.eclipse.platform_3.1.0/\u003c/root\u003e\n    \u003c/feature\u003e\n    \u003cfeature id\u003d\"org.eclipse.jdt\" url\u003d\"features/org.eclipse.jdt_3.1.0/\" \nversion\u003d\"3.1.0\"\u003e\n    \u003c/feature\u003e\n    \u003cfeature id\u003d\"org.eclipse.pde\" url\u003d\"features/org.eclipse.pde_3.1.0/\" \nversion\u003d\"3.1.0\"\u003e\n    \u003c/feature\u003e\n  \u003c/site\u003e\n  \u003csite enabled\u003d\"true\" policy\u003d\"USER-EXCLUDE\" updateable\u003d\"true\" \nurl\u003d\"file:/c:/product1/eclipse/\"\u003e\n    \u003cfeature id\u003d\"your id here\" url\u003d\"features/your feature location here/\" \nversion\u003d\"your version here\"\u003e\n    \u003c/feature\u003e\n  \u003c/site\u003e\n\u003c/config\u003e\n\n- note that I took a guess at what would be in your base so you may have to \nupdate the feature list there.\n- also add the relevant features in the site for product 1.\n- now run eclipse -configration c:\\product1\\eclipse\\configuration\n\nThis should just work.  You can install product 2 in the same way and the two \nwill be isolated.  You could even then simply create a platform.xml thta listed \nsites for the base, product1 and product2 and get a \"suite\". \n\nYou can ship the structure (including platform.xml) I just defined on the CD \nand the only install time work would be to update the url for the site (i.e., \nchange c:\\product1 to be the right value).  Alternatively you could use the \nupdate API to craft the platform.xml at install time (this requires an \ninitialization run of the installed product.  something like \n    eclipse -initialize -configuration c:\\product1\\eclipse\\configuration\n\nIf you want to have direct control over the platform.xml and are sensitive to \nthe current non-API ness of platform.xml then we should convert this bug into \na \"please make platform.xml API\" bug.\n",
    "This works. There is no links directory. I have a feature for my app and a \nfeature for any shared plugins. So the solutions appears to be that we need to\n1) document platform.xml\n2) Provide a wizard for editting platform.xml. I would suggest that there be a \nproduct wizard much like there is a feature wizard. This wizard collects other \nfeatures together in the platform.xml.\n\nQuestion: Originally I was not using a feature for the app nor for the shared \nplugins. The update configurator managed it for me. With this solution, is the \nfeature now required? Should we be encouraging the use of features more in the \nother case?",
    "Glad this works for you.  As for the wizard etc, what I will suggest is that \nrather than going this path, we should investigate doing it through the \nexisting Update API.  In a shared install scenario you should likely initialize \nthe configuration anyway.  So at install time you would run \n  eclipse -configuration p1 -application \u003csome update application\u003e \nthat causes Update to add p1 to the current configuration as a site.  In effect \nyou are adding yourself to yourself.  My understanding from Dorian is that this \ncapability exists now and is reasonably straightforward.  \n\nPerhaps Dorian can point us at a simple example?\n\nI am all for making platform.xml API and providing editing capabilities.  See \nbug 46226.  Not sure that this is absolutely necessary for this usecase however \nas you may actually be better off with the solution outlined above (running \nsomething on install).\n",
    "For comment #19: you don\u0027t have to use features. They will be very useful, \nthough, if you plan to update or provide patches later. Using update.core you \ncan programmatically, or from the command line, perform install/update/etc. \noperations.\n\nAs for Jeff\u0027s comment #20:\nThe command to add a site to the configuration is part of the update headless \nsupport, but it needs the org.eclipse.update.core plugin.\nThe syntax is described at:\n\nhttp://help.eclipse.org/help30/index.jsp?\ntopic\u003d/org.eclipse.platform.doc.isv/reference/misc/update_standalone.html\n\nin particular:\n\njava -cp c:/base/eclipse/startup.jar org.eclipse.core.launcher.Main \n    -application  org.eclipse.update.core.standaloneUpdate\n    -command addSite\n    -from d:/p1\n    -configuration d:/p1/configuration\n\n\nIf you don\u0027t install that plugin, then you need to create a platform.xml that \nlists the two sites (the base and the p1 site), even empty, and let the update \nconfigurator fill in the rest.\n\nplatform.xml as API: documenting the current behavior is fine, but making it \nAPI would require some more work, so update does not get locked in the current \nformat. On the other hand, because it can be editted via API\u0027s, perhaps PDE \ncan provide the editor, without exposing the actual xml syntax.\n",
    "There\u0027s still a problem with this approach. I want to have a native launcher\np1.exe with its own icon in the d:\\p1 directory. If I simply copy eclipse.exe\nthen it complains that:\n\"The P1 executable launcher was unable to locate its companion startup.jar file\n(in the same directory as the executable).\"\n\nIf I copy startup.jar too then it complains that:\n\"An error has occurred. See the log file...\"\nand the log file says:\njava.lang.RuntimeException: Could not find framework\n\tat org.eclipse.core.launcher.Main.getBootPath(Main.java:401)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:174)\n\tat org.eclipse.core.launcher.Main.run(Main.java:710)\n\tat org.eclipse.core.launcher.Main.main(Main.java:694)\n\nAny suggestions? I tried setting the shared_ur attribute in platform.xml,\nvariants of this:\n\u003cconfig date\u003d\"1105998242796\" transient\u003d\"false\" version\u003d\"3.0\"\nshared_ur\u003d\"file:/d:/base/eclipse\"\u003e\nbut as I expected it had no effect.\n\nMaybe eclipse needs an -installDir option to tell it where to find startup.jar\nand the framework instead of assuming the directory containing the native\nlauncher or its parents?",
    "The -install option or the osgi.install.area property allow you to set that. See:\n\nhttp://help.eclipse.org/help30/topic/org.eclipse.platform.doc.isv/reference/misc/runtime-options.html",
    "org.eclipse.platform.Main parses the -install option which sort of does what I\nwant, though I still have to have a local copy of startup.jar because the native\nlauncher doesn\u0027t respect that.",
    "Oops, you are right, I misunderstood your question. -vmargs -jar\n\u003cyour-path\u003e/startup.jar, then?",
    "No effect. eclipse.c looks explicitly for the startup.jar file in the same\ndirectory as eclipse.exe or in parent directories as a mark of a correct install\ndirectory.\n\nI guess I could make a dummy startup.jar and put the real one on the classpath\nbut this is getting kludgy.",
    "The problem with startup.jar is captured in bug #81969.",
    "so can this bug be closed now?",
    "Yes, we can close this."
  ],
  "commentCreationDates": [
    "2005-01-05T18:56:01+01:00",
    "2005-01-05T20:02:47+01:00",
    "2005-01-05T21:13:20+01:00",
    "2005-01-05T21:19:24+01:00",
    "2005-01-05T22:27:55+01:00",
    "2005-01-06T19:58:05+01:00",
    "2005-01-06T20:40:29+01:00",
    "2005-01-06T21:22:33+01:00",
    "2005-01-06T21:29:24+01:00",
    "2005-01-06T21:34:54+01:00",
    "2005-01-06T22:07:43+01:00",
    "2005-01-06T22:10:16+01:00",
    "2005-01-07T00:43:42+01:00",
    "2005-01-07T05:29:56+01:00",
    "2005-01-07T14:55:51+01:00",
    "2005-01-07T15:03:46+01:00",
    "2005-01-07T15:47:37+01:00",
    "2005-01-07T17:59:36+01:00",
    "2005-01-07T21:00:04+01:00",
    "2005-01-07T21:33:09+01:00",
    "2005-01-07T22:18:17+01:00",
    "2005-01-08T00:17:27+01:00",
    "2005-01-17T22:08:08+01:00",
    "2005-01-17T22:16:33+01:00",
    "2005-01-17T22:21:30+01:00",
    "2005-01-17T22:35:31+01:00",
    "2005-01-17T22:47:36+01:00",
    "2005-01-18T13:41:27+01:00",
    "2005-01-18T14:38:23+01:00",
    "2005-01-18T14:59:19+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "Could not find framework",
      "elements": [
        {
          "method": "org.eclipse.core.launcher.Main.getBootPath",
          "source": "Main.java:401"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:174"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:710"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:694"
        }
      ],
      "number": 0,
      "commentIndex": 22,
      "bugId": "82271",
      "date": "2005-01-17T22:08:08+01:00",
      "product": "Platform",
      "component": "Runtime",
      "severity": "major"
    }
  ],
  "groupId": "82271",
  "bugId": "82271",
  "date": "2005-01-05T18:56:01+01:00",
  "product": "Platform",
  "component": "Runtime",
  "severity": "major"
}