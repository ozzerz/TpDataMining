{
  "comments": [
    "Build 20020515\n\nWith existing workspace, tried to upgrade it to latest SDK using the PDE import.\nSelected all binary projects, and requested to import them as binaries over \nexisting ones.\n\nIt failed with the following errors while deleting the projects:\n\n!SUBENTRY 1 org.eclipse.pde.ui 4 4 5/16/02 10:27 AM\n!MESSAGE Problem while importing plugin \"org.eclipse.ui.win32\": Problems \nencountered while deleting resources.\n!SUBENTRY 1 org.eclipse.pde.ui 4 4 5/16/02 10:27 AM\n!MESSAGE Problem while importing plugin \"org.eclipse.update.ui.win32\": Problems \nencountered while deleting resources.\n!ENTRY org.eclipse.core.resources 4 271 5/16/02 10:29 AM\n\nFrom thereon, had to manually delete these projects in the filesystem, given \ntheir .project and .classpath files were gone.",
    "This behavior was first observed with build 20020514.",
    "This may be because you played with files and made them out of sync. \n\nDo you suggest forcing deletion of out-of-sync resources?",
    "F3 candidate.",
    "*** Bug 18661 has been marked as a duplicate of this bug. ***",
    "*** Bug 16389 has been marked as a duplicate of this bug. ***",
    "Wassim, this one is experienced by several users (see the duplicates for more \ninfo). Looks like something causes certain fragment files on the disk to be in \nuse and when we try to delete the project (even with \u0027force\u0027 option), we fail. \nThis leave us with a partially deleted project that causes more trouble after \nthat.",
    "*** Bug 20143 has been marked as a duplicate of this bug. ***",
    "Another bug has been opened as a duplicate of this bug (this one with F3) - we \nstill have this problem and must reproduce it. ",
    "Another case",
    "*** Bug 20276 has been marked as a duplicate of this bug. ***",
    "I think I know what the problem is, and it is not PDE:\n\nThis happens when a new build is used but old workspace is retained. When the \nplatform starts, I tried to expand org.eclipse.ui.win32 and delete \nworkbenchwin32.jar. It failed with the same error as reported by the Import \nwizard. Obviously, the problem is in some kind of a race condition probably \ncaused by JDT whereby workbenchwin32.jar is still open when we try to delete it.\n\nOne important prereq for this but to appear is that there has to be cross-\nreference between projects. Namely, org.eclipse.ui has workbenchwin32.jar in \nits classpath. This is because PDE must recreate run-time conditions as close \nas possible, and fragment libraries are added to referenced plug-ins by the \nplug-in registry during the registry resolve phase.\n\nI tried to create a small test case with only one fragment and one plug-in and \ncouldn\u0027t. There is something with the old workspace and new build that sets \nthis problem off. It is possible that JDT is persisting some classpath \ninformation that is not present in the new workspace. Another theory is that\nthere are errors in metadata that accumulate and cause this that are not \npresent in a fresh workspace. BTW, if you try to set up a fresh workspace, \nimport binary projects, then try to delete workbenchwin32.jar, it will work.\nIt has to be a few drivers old workspace.\n\nMoving to JDT for comments. As I said, use F3 build, point to an earlier \nworkspace with binary projects and try to delete \u0027workbenchwin32.jar\u0027 in \norg.eclipse.ui.win32. It will fail to delete it. I traced it down to the \nFile.delete() call, meaning that it something is keeping the file open.",
    "The index consistency check could be the guilty one, but I remember we tried to \nreproduce with no indexing (hacked version of jdt/core) and were still able to \nreproduce.\n\nNote that any other thread needing to access the JAR through the JavaModel \ncould also cause grief. I am thinking of the various operations performed from \nJDT/UI on startup (hierarchy computations etc...).\n\n",
    "If indexing was proven to be the offending piece, then a dummy search query \nfrom PDE would do the trick before performing PDE actions, indeed search \nqueries are blocked until indexer is idle.",
    "I think PDE should be more resilient, and provide a \u0027Retry\u0027 action when this \noccurs, after maybe retrying once for free after a little pause (?). ",
    "I will try to retry but this will only help if this is a race issue. If \nsomebody is leaving the JAR open, no amount of waiting will help.",
    "JDT is never keeping a JAR opened for more than an operation duration. Any \nclient might be in the middle of a JAR access when PDE discards it, and if \nclients are not taking workspace locks, then this kind of situation may occur.\n\nMost of JDT code doesn\u0027t take the lock, and I would not change this at this \nstage due to possible deadlocks or performance degradations down the road.\n\nThe best would be if PDE was a little more resilient and offer to recover from \nthese situations.\n\nDeferring",
    "This problem continues to occur - we are receiving new defects that describe \nthe same symptoms. It should probably be addressed in 2.1 cycle.",
    "I am seeing a lot of problems using PDE lately, especially importing source \nplug-ins. I doubt it has much to do with this, though these issues are still \nexisting.\n\n\nTagging as 2.1 for getting attention, but this is a cross PDE/JDT-Core defect. \nNo other tool (as far as we know) exposes this behavior.\n",
    "As said earlier, race conditions are causing trouble here. We identified a \nscenario where deleting a project could leave some indexing work behind, which \nwe believe could interfere with project deletion.\n\nThis is being fixed for next integration build, however as said in previous \nnote, even disabling the indexing thread did cause ths kind of problem to occur \nsomehow. There must be multiple causes leading to this issue, and with today\u0027s \nchange, we\u0027ll make it occur less often.\n\nStill other threads are doing some work in parallel to PDE activity, and if any \nof them cause a JAR to be read (through JDT/Core or other layer), then the same \nproblem would occur again.\n",
    "Problem has been identified. PDE is using the ResourceBundle support to find \nthe translated strings of a plugin using a URLClassloader that points to some \njar files in the workspace. The following stack trace shows where a ZipFile on \na jar file is opened:\njava.lang.Exception: Stack trace\n        at java.lang.Thread.dumpStack(Thread.java:1071)\n        at java.util.zip.ZipFile.\u003cinit\u003e(ZipFile.java:116)\n        at java.util.jar.JarFile.\u003cinit\u003e(JarFile.java:117)\n        at java.util.jar.JarFile.\u003cinit\u003e(JarFile.java:55)\n        at sun.misc.URLClassPath$JarLoader.getJarFile(URLClassPath.java:576)\n        at sun.misc.URLClassPath$JarLoader.\u003cinit\u003e(URLClassPath.java:541)\n        at sun.misc.URLClassPath$3.run(URLClassPath.java:319)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at sun.misc.URLClassPath.getLoader(URLClassPath.java:308)\n        at sun.misc.URLClassPath.getLoader(URLClassPath.java:285)\n        at sun.misc.URLClassPath.getResource(URLClassPath.java:155)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:190)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:186)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:299)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:255)\n        at java.util.ResourceBundle.loadBundle(ResourceBundle.java:1009)\n        at java.util.ResourceBundle.findBundle(ResourceBundle.java:884)\n        at java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:711)\n        at java.util.ResourceBundle.getBundle(ResourceBundle.java:661)\n        at org.eclipse.pde.internal.core.NLResourceHelper.getResourceBundle\n(NLResourceHelper.java:45)\n        at org.eclipse.pde.internal.core.NLResourceHelper.getResourceBundle\n(NLResourceHelper.java:27)\n        at org.eclipse.pde.internal.core.NLResourceHelper.getResourceString\n(NLResourceHelper.java:63)\n        at org.eclipse.pde.internal.core.AbstractModel.getResourceString\n(AbstractModel.java:61)\n        at org.eclipse.pde.internal.core.plugin.PluginObject.getTranslatedName\n(PluginObject.java:84)\n        at org.eclipse.pde.internal.core.plugin.AbstractPluginModelBase.toString\n(AbstractPluginModelBase.java:175)\n        at org.eclipse.pde.internal.core.CoreArraySorter.compare\n(CoreArraySorter.java:12)\n        at org.eclipse.pde.internal.core.CoreSorter.quickSort\n(CoreSorter.java:18)\n        at org.eclipse.pde.internal.core.CoreSorter.sortInPlace\n(CoreSorter.java:50)\n        at org.eclipse.pde.internal.core.ExternalModelManager.loadModels\n(ExternalModelManager.java:225)\n        at org.eclipse.pde.internal.core.ExternalModelManager.getPluginCount\n(ExternalModelManager.java:160)\n        at \norg.eclipse.pde.internal.ui.wizards.imports.PluginImportWizardDetailedPage$3.run\n(PluginImportWizardDetailedPage.java:229)\n        at org.eclipse.jface.operation.ModalContext$ModalContextThread.run\n(ModalContext.java:98)\n\nHowever this ZipFile is never explicitely closed. It is then closed only when \nthe Finalyzer thread runs, which doesn\u0027t happen before the end of the import. \nAs a result, the projects containing these jar files cannot be deleted and the \nimport fails.",
    "Is there something we can do to close the zip file explicitly?",
    "I don\u0027t think so since you\u0027re using ResourceBundle.getBundle(). But why do you \nadd the workspace fragment jars to the list in \nAbstractPluginModelBase.getFragmentLocations() in the first place? \n\nChanging this method to the following content fixes the problem:\nprotected URL[] getFragmentLocations() {\n\tVector result \u003d new Vector();\n\tif (pluginBase !\u003d null) {\n\t\tString id \u003d pluginBase.getId();\n\t\tString version \u003d pluginBase.getVersion();\n\t\t// Add matching external fragments\n\t\tExternalModelManager emng \u003d PDECore.getDefault\n().getExternalModelManager();\n\t\tif (emng.hasEnabledModels()) {\n\t\t\tIFragmentModel[] models \u003d emng.getFragmentModels(null);\n\t\t\taddMatchingFragments(id, version, models, result);\n\t\t}\n\t\t// Add matching workspace fragments\n\t\t/*WorkspaceModelManager wmng \u003d PDECore.getDefault\n().getWorkspaceModelManager();\n\t\tIFragmentModel[] models \u003d wmng.getWorkspaceFragmentModels();\n\t\taddMatchingFragments(id, version, models, result);\n\t\t*/\n\t}\n\tURL[] locations \u003d new URL[result.size()];\n\tresult.copyInto(locations);\n\treturn locations;\n}\n",
    "Translations are delivered using fragments. When resource bundles for a plug-in \nare located in fragments, we are looking in the plug-in first, then in \nfragments to resolve the translated string. We (PDE) are simply recreating the \nrun-time behaviour. We must support a scenario where both the fragment with \ntranslations and the plug-in are in the workspace. By commenting out \nthe portion of code as shown above, we would not be able to support this \nscenario.\n\nAn alternative solution would be to force the garbage collection as soon\nas plug-in model is removed from the list - that should run the \nfinalizer and close the zip file.",
    "I don\u0027t think that there is any guarantee that ZipFile.finalize() will run even \nif you explicitely call the garbage collector. This might be a workaround, but \nfor me the problem comes from the fact that you use the ResourceBundle support \non workspace data.\n\nMoving to PDE as this is not a JDT issue.",
    "The Java specs clearly states that no assumption should be made about when \nfinalizers run (2.17.7). The only assumption you can make is that it will be \nrun when memory for this object is freed. Even a manual GC would not solve this \nissue, because it depends on the GC implementation to free this object or not \nat this very moment (also GC may take quite some time, and cause some IDE \nfreeze). \n\nAgain, why are you introspecting the workspace at all for this ? It seems that \nyou should only show a picture of the imported plug-ins. The only usage I can \nimagine is a case where the plug-in is external, and the fragment is internal \nand not replaced, but in the case of fragments being available externally, \ninternal fragments should be shadowed by external ones (names in internal \nfragment are likely obsolete). \n\nAs a work-around : knowing the library limitation, your code should be more \nresilient and retry deleting fragment until you succeed.\n\n",
    "*** Bug 16921 has been marked as a duplicate of this bug. ***",
    "Fixed in the I-20021001 build.\nHere is a brief explanation of what was causing the problem:\nWe were using ResourceBundle.getBundle(String,Locale,ClassLoader) to translate \nstrings.  The class loader passed to the resource bundle contains references \nto workspace libraries among other things. When a project is being deleted \nfrom the workspace, we were making sure to dispose of the resource bundle that \nit was using.  However, the problem was that the ResourceBundle class \nmaintains a \"static\" cache of bundles and the class loaders they reference.\nIt is the class loaders, maintained in the cache (whose initial size is 25 \naccording to API doc), that were keeping a reference to jar files we were \ntrying to delete, thus preventing their deletion.\n\nWhat we do now is:\n1. Using a URLClassloader, we first get the resource file we\u0027re looking for as \nan input stream.\n2. We create a PropertyResourceBundle using the PropertyResourceBundle\n(InputStream) constructor.\n3.  We use bundle from step 2 to translate our strings.\n\nThis way, we don\u0027t lose any functionality.  No resource loaders are cached, \nand we will never run into this problem ever again.",
    "Problem seems to be back in build 20021015,\n\nsee attached .log and attached picture of dialog.\n",
    "sorry for it is build 20021016 (not 20021015)",
    "Created an attachment (id\u003d2198)\nPicture of error dialog after importing\n",
    "Created an attachment (id\u003d2199)\n,log\n",
    "Note that the stack traces in the log are just the result of PDE creating an \nempty project without a .classpath file.",
    "Could not reproduce.  However, I could imagine where this new problem could be \ncaused, and I added a minor check there.\nPlease verify in next I-build.",
    "I also got the problem in 20021016 doing the same as Dani.",
    "Now the error is gone but the import failed to attach the libraries when running\nin autobuild mode \u003d\u003d\u003e tons of errors appear after waiting for minutes\nIt seems that build kicks in before the classpath is updated.\nIt works when autobuild is off.\n",
    "There has not been a new I-build since you reported the problem yesterday.  \nPlease verify when the new I-build is uploaded.",
    "Not true: I reported the problem against I20021016. There has been a new build\nyesterday: I20021017 Thu, 17 Oct 2002 -- 16:46 (-0400)\n",
    "It\u0027s not on the site.",
    "I just downloaded I-20021017 and tested importing with fragments, deleting \nfragments, replacing fragments,...\nEverything worked fine.\nSo what I will do is close the defect and mark it as resolved.\nPlease re-open this defect only if you run into the problem that this defect \nwas \"originally\" opened for. (i.e. if you ever get the error \u0027could not delete \norg.eclipse.ui.win32\u0027 and such).\nShould anyone encounter \"other\" problems with importing, please open a separate \nbug report.  This way we can spare the long list of people on the cc list of \nthis defect from receiving unnecessary mail.",
    "Build eclipse-SDK-I20021031-win32\n\nReopening. This problem (the original problem) just happened to me. I had just \nswitched my install from an old build to the latest and greatest 2.1 build, \nand I was trying to upgrade the plug-in projects in my workspace. The problems \nwere with win32 plug-in fragment projects. I\u0027ve been trying, but I\u0027ve been \nunable to cause the failure again.\n",
    "Got the problem also with build 20021119. Same steps as Jeem.",
    "The bug has not resurfaced in about two months.\nClosing...",
    "I have seen this within the last month.",
    "Same for me when upgrading existing workspace.",
    "*** Bug 16115 has been marked as a duplicate of this bug. ***",
    "I have not encountered this problem in ages, and the import operation has \nchanged quite a bit due to background building.  So I am closing the door on \nthis dark chapter ;-)  \nOf course, please reopen if necessary."
  ],
  "commentCreationDates": [
    "2002-05-16T10:28:40+02:00",
    "2002-05-16T10:34:22+02:00",
    "2002-05-16T15:40:53+02:00",
    "2002-06-07T01:42:08+02:00",
    "2002-06-07T16:19:44+02:00",
    "2002-06-07T17:54:54+02:00",
    "2002-06-07T19:07:50+02:00",
    "2002-06-13T15:14:56+02:00",
    "2002-06-13T15:16:00+02:00",
    "2002-06-13T22:09:39+02:00",
    "2002-06-13T22:10:15+02:00",
    "2002-06-14T02:16:14+02:00",
    "2002-06-14T10:40:25+02:00",
    "2002-06-14T12:03:12+02:00",
    "2002-06-14T14:54:48+02:00",
    "2002-06-14T16:10:42+02:00",
    "2002-06-14T17:03:52+02:00",
    "2002-09-12T15:48:31+02:00",
    "2002-09-18T13:36:22+02:00",
    "2002-09-23T16:25:53+02:00",
    "2002-09-24T16:34:03+02:00",
    "2002-09-24T16:40:08+02:00",
    "2002-09-24T16:48:26+02:00",
    "2002-09-24T16:55:21+02:00",
    "2002-09-24T17:12:20+02:00",
    "2002-09-25T10:55:40+02:00",
    "2002-09-26T18:28:26+02:00",
    "2002-10-02T07:01:33+02:00",
    "2002-10-17T09:00:33+02:00",
    "2002-10-17T09:02:41+02:00",
    "2002-10-17T09:03:41+02:00",
    "2002-10-17T09:04:16+02:00",
    "2002-10-17T11:24:51+02:00",
    "2002-10-17T17:38:04+02:00",
    "2002-10-18T10:03:38+02:00",
    "2002-10-18T13:55:53+02:00",
    "2002-10-18T14:05:16+02:00",
    "2002-10-18T14:18:00+02:00",
    "2002-10-18T14:19:39+02:00",
    "2002-10-18T18:48:54+02:00",
    "2002-11-01T16:55:39+01:00",
    "2002-11-22T10:11:02+01:00",
    "2003-01-23T20:13:46+01:00",
    "2003-01-24T13:42:51+01:00",
    "2003-01-28T14:35:40+01:00",
    "2003-03-13T21:43:00+01:00",
    "2003-10-22T08:26:33+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "Stack trace",
      "elements": [
        {
          "method": "java.lang.Thread.dumpStack",
          "source": "Thread.java:1071"
        },
        {
          "method": "java.util.zip.ZipFile.\u003cinit\u003e",
          "source": "ZipFile.java:116"
        },
        {
          "method": "java.util.jar.JarFile.\u003cinit\u003e",
          "source": "JarFile.java:117"
        },
        {
          "method": "java.util.jar.JarFile.\u003cinit\u003e",
          "source": "JarFile.java:55"
        },
        {
          "method": "sun.misc.URLClassPath$JarLoader.getJarFile",
          "source": "URLClassPath.java:576"
        },
        {
          "method": "sun.misc.URLClassPath$JarLoader.\u003cinit\u003e",
          "source": "URLClassPath.java:541"
        },
        {
          "method": "sun.misc.URLClassPath$3.run",
          "source": "URLClassPath.java:319"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "sun.misc.URLClassPath.getLoader",
          "source": "URLClassPath.java:308"
        },
        {
          "method": "sun.misc.URLClassPath.getLoader",
          "source": "URLClassPath.java:285"
        },
        {
          "method": "sun.misc.URLClassPath.getResource",
          "source": "URLClassPath.java:155"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:190"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:186"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:299"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:255"
        },
        {
          "method": "java.util.ResourceBundle.loadBundle",
          "source": "ResourceBundle.java:1009"
        },
        {
          "method": "java.util.ResourceBundle.findBundle",
          "source": "ResourceBundle.java:884"
        },
        {
          "method": "java.util.ResourceBundle.getBundleImpl",
          "source": "ResourceBundle.java:711"
        },
        {
          "method": "java.util.ResourceBundle.getBundle",
          "source": "ResourceBundle.java:661"
        },
        {
          "method": "org.eclipse.pde.internal.core.NLResourceHelper.getResourceBundle",
          "source": "NLResourceHelper.java:45"
        },
        {
          "method": "org.eclipse.pde.internal.core.NLResourceHelper.getResourceBundle",
          "source": "NLResourceHelper.java:27"
        },
        {
          "method": "org.eclipse.pde.internal.core.NLResourceHelper.getResourceString",
          "source": "NLResourceHelper.java:63"
        },
        {
          "method": "org.eclipse.pde.internal.core.AbstractModel.getResourceString",
          "source": "AbstractModel.java:61"
        },
        {
          "method": "org.eclipse.pde.internal.core.plugin.PluginObject.getTranslatedName",
          "source": "PluginObject.java:84"
        },
        {
          "method": "org.eclipse.pde.internal.core.plugin.AbstractPluginModelBase.toString",
          "source": "AbstractPluginModelBase.java:175"
        },
        {
          "method": "org.eclipse.pde.internal.core.CoreArraySorter.compare",
          "source": "CoreArraySorter.java:12"
        },
        {
          "method": "org.eclipse.pde.internal.core.CoreSorter.quickSort",
          "source": "CoreSorter.java:18"
        },
        {
          "method": "org.eclipse.pde.internal.core.CoreSorter.sortInPlace",
          "source": "CoreSorter.java:50"
        },
        {
          "method": "org.eclipse.pde.internal.core.ExternalModelManager.loadModels",
          "source": "ExternalModelManager.java:225"
        },
        {
          "method": "org.eclipse.pde.internal.core.ExternalModelManager.getPluginCount",
          "source": "ExternalModelManager.java:160"
        },
        {
          "method": "org.eclipse.pde.internal.ui.wizards.imports.PluginImportWizardDetailedPage$3.run",
          "source": "PluginImportWizardDetailedPage.java:229"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:98"
        }
      ],
      "number": 0,
      "commentIndex": 20,
      "bugId": "16114",
      "date": "2002-09-24T16:34:03+02:00",
      "product": "PDE",
      "component": "UI",
      "severity": "critical"
    }
  ],
  "groupId": "16114",
  "bugId": "16114",
  "date": "2002-05-16T10:28:40+02:00",
  "product": "PDE",
  "component": "UI",
  "severity": "critical"
}