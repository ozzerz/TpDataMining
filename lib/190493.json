{
  "comments": [
    "Build 3.3rc2.\n\nDue to APT(jsr269) enabling by default, the compiler will try to load 1.6 classes during its initialization process when attempting to compile in 1.6 compliant mode.\n\nUnless the compiler runs itself on a 1.6 VM, it will crash with the following exception:\n\nException in thread \"main\" java.lang.UnsupportedClassVersionError: Bad version number in .class file\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:164)\n\tat org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager(Main.java:3385)\n\tat org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:3332)\n\tat org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1545)\n\tat Compile.main(Compile.java:101)\n\nThe net effect is that one cannot cross compile for 1.6 on a \u003c1.6 JVM.\n\nOnly workaround is to turn off APT by specifying \"-proc:none\" on command line.",
    "The APT portion shouldn\u0027t be enabled unless a JRE1.6 is detected, since doomed.",
    "Do we want to reject the case, silently ignore apt if the VM is not a 1.6 VM or report a warning?",
    "We should compile with no APT on a lesser VM. Now logging a warning in the console seems nice to have (if problematic at this stage, I would make this a subsequent request. The problem now is the exception and the inability to run the compiler).",
    "Created an attachment (id\u003d69722)\nProposed fix\n\n",
    "Created an attachment (id\u003d69723)\nBetter patch\n\nThe only change with the first patch is the error message reported to the user.",
    "Risk:\nNo risk. This will enhance the user experience for cross compilation without crashing if the VM is not a 1.6 VM. Except for annotations processing, a 1.6 VM is not required to target 1.6 .class files.\nRegarding the patch, if the VM version cannot be properly detected , the catch block is used to properly disable annotations. On all VMs I tried (IBM, Sun, Harmony, BEA), the catch block is never reached.\n\nBenefits:\nThis looks like a regression from 3.2. Our compiler being used more and more by other projects (Tomcat, GCJ,...), we don\u0027t want to break users when they target 1.6 without using a 1.6 VM. So this low risk fix will fix this undesirable behavior.\n\nPhilippe, J?rome, Maxime and Kent, please review",
    "Patch looks good. Change is important to preserve cross-compile ability for 1.6 (regression from 3.2; due to enabling of jsr269 - mandated for java6 compliance).",
    "A few details:\n- you adopted the \u0027key\u003dmessage\u0027 convention for this new entry into\n  messages.properties, while it seems that the \u0027key \u003d message\u0027 (white space\n  around the equal sign) convention prevails for the existing entries;\n- checkVMVersion doc should state that its parameter must be one of the \n  ClassFileConstants.JDK* constants; these have a format different from, say,\n  the one for the java.class.version property, hence it\u0027s not trivial to guess\n  what format to use;\n- I do not quite see why checkVMVersion makes abstraction of the minor version \n  number returned by the environment; if it\u0027s correct, a comment would help;\n- we may want to open a fup bug to avoid the logging of a warning when the \n  -proc:none flag is provided (no need to report that the APT will be disabled\n  when the user explicitly asked so anyway);\n- conversely, what happens if a user sets an explicit -processor option?\n- when no explicit -proc option is given, the effect of the patch looks very \n  like \u0027moving the default to -proc:none\u0027; the doc and the error message could\n  make this more explicit;\n- the doc for annotation processing suffers a few spelling and syntax mistakes, \n  but this is not in the scope of this bug;\n- I am puzzled by the fact that initializeAnnotationProcessorManager can \n  silently fail, but another case of that behavior exists beside this patch,\n  hence I\u0027d consider that it is not new.\n\nAs far as removing the exception is concerned, the patch will do it, and the concerned I have expressed can be addressed separately, hence I vote +1.\n\n",
    "checkVMVersion(long) always take the same parameter (ClassFileConstants.JDK1_6), so it looks a simpler solution would have been to introduce getVMVersion() and compare it to ClassFileConstants.JDK1_6. But this is being picky. So +1 for 3.3RC4.",
    "(In reply to comment #8)\n\u003e A few details:\n\u003e - you adopted the \u0027key\u003dmessage\u0027 convention for this new entry into\n\u003e   messages.properties, while it seems that the \u0027key \u003d message\u0027 (white space\n\u003e   around the equal sign) convention prevails for the existing entries;\nI can change that.\n\n\u003e - checkVMVersion doc should state that its parameter must be one of the \n\u003e   ClassFileConstants.JDK* constants; these have a format different from, say,\n\u003e   the one for the java.class.version property, hence it\u0027s not trivial to guess\n\u003e   what format to use;\nI\u0027ll add it to the doc.\n\n\u003e - I do not quite see why checkVMVersion makes abstraction of the minor version \n\u003e   number returned by the environment; if it\u0027s correct, a comment would help;\nThe minor number seems to be irelevant for me. We have to make sure that the major number is supported. Also I never see a java compiler changing the minor number from 0.\n\n\u003e - we may want to open a fup bug to avoid the logging of a warning when the \n\u003e   -proc:none flag is provided (no need to report that the APT will be disabled\n\u003e   when the user explicitly asked so anyway);\nif -proc:none is specified, the checkVMVersion method is not run.\n\n\u003e - conversely, what happens if a user sets an explicit -processor option?\nI don\u0027t see what this would change.\n\n\u003e - when no explicit -proc option is given, the effect of the patch looks very \n\u003e   like \u0027moving the default to -proc:none\u0027; the doc and the error message could\n\u003e   make this more explicit;\nThe message says that apt has been disabled. This is exactly what it does since according to the jsr269, apt needs to be enabled by default.\n\n\u003e - the doc for annotation processing suffers a few spelling and syntax mistakes, \n\u003e   but this is not in the scope of this bug;\nCould you please open a bug report for this? Doc changes can still be done for RC4.\n\n\u003e - I am puzzled by the fact that initializeAnnotationProcessorManager can \n\u003e   silently fail, but another case of that behavior exists beside this patch,\n\u003e   hence I\u0027d consider that it is not new.\nCould you please detail what you mean?\n\nThanks.",
    "(In reply to comment #10)\n\u003e (In reply to comment #8)\n\u003e \u003e A few details:\n...\n\u003e \u003e - I do not quite see why checkVMVersion makes abstraction of the minor version \n\u003e \u003e   number returned by the environment; if it\u0027s correct, a comment would help;\n\u003e The minor number seems to be irelevant for me. We have to make sure that the\n\u003e major number is supported. Also I never see a java compiler changing the minor\n\u003e number from 0.\nSo would you please making a comment in the source?\n\u003e \n\u003e \u003e - we may want to open a fup bug to avoid the logging of a warning when the \n\u003e \u003e   -proc:none flag is provided (no need to report that the APT will be disabled\n\u003e \u003e   when the user explicitly asked so anyway);\n\u003e if -proc:none is specified, the checkVMVersion method is not run.\nBut according to your patch you will still log a warning (Main:3389 of the patched version)?\n\u003e \u003e - conversely, what happens if a user sets an explicit -processor option?\n\u003e I don\u0027t see what this would change.\nI would suggest that we then raise an explicit error, since there is a contradiction between specifying processors and not using a suitable (\u003e\u003d6) runtime.\n\u003e \u003e - when no explicit -proc option is given, the effect of the patch looks very \n\u003e \u003e   like \u0027moving the default to -proc:none\u0027; the doc and the error message could\n\u003e \u003e   make this more explicit;\n\u003e The message says that apt has been disabled. This is exactly what it does since\n\u003e according to the jsr269, apt needs to be enabled by default.\nMore precisely, it could be worded in a way that explicitly says that it behaves as if \u0027-proc:none\u0027 had been specified. I admit it\u0027s a matter of taste though.\n\u003e \u003e - the doc for annotation processing suffers a few spelling and syntax mistakes, \n\u003e \u003e   but this is not in the scope of this bug;\n\u003e Could you please open a bug report for this? Doc changes can still be done for\n\u003e RC4.\nI\u0027ll do.\n\u003e \u003e - I am puzzled by the fact that initializeAnnotationProcessorManager can \n\u003e \u003e   silently fail, but another case of that behavior exists beside this patch,\n\u003e \u003e   hence I\u0027d consider that it is not new.\n\u003e Could you please detail what you mean?\nI mean that Main:3447 and Main:3456 of the patched source silently switch to no APT, with no echo to the caller. I do not quite like it, but, since line Main:3447 is not related to this bug/patch, I won\u0027t argue about the rationale behind that, and I\u0027ll \u0027excuse\u0027 the patch for doing something that the code already did in other circumstances.\n\nBTW, these remarks only reflect my not so humble opinion, and please feel absolutely free to ignore them.",
    "(In reply to comment #11)\n\u003e So would you please making a comment in the source?\nYes, I can mention it.\n\n\u003e But according to your patch you will still log a warning (Main:3389 of the\n\u003e patched version)?\nIf -proc:none is specified, this.compilerOptions.processAnnotations is false.\nSo I don\u0027t see how I log a warning. I tried and I don\u0027t have a warning.\n\n\u003e I would suggest that we then raise an explicit error, since there is a\n\u003e contradiction between specifying processors and not using a suitable (\u003e\u003d6)\n\u003e runtime.\nSounds sufficient to do what we do now with the warnings. We might reconsider according to the feedback from the users.",
    "(In reply to comment #12)\n...\n\u003e If -proc:none is specified, this.compilerOptions.processAnnotations is false.\n\u003e So I don\u0027t see how I log a warning. I tried and I don\u0027t have a warning.\nMissed the correlation, apologies.",
    "Created an attachment (id\u003d69990)\nReleased patch with doc changes\n\nReleased for 3.3RC4.\nTo verify it, please use the ecj.jar file from the download page.",
    "Released for 3.3RC4.",
    "Olivier please add 2 regression tests for this bug: one for the catch(UnsupportedClassVersionError) case, and one for the checkVMVersion(...) case.",
    "Added regression test org.eclipse.jdt.core.tests.compiler.regression.BatchCompilerTest#test144 for the checkVMVersion call.\nI could not find a VM that would allow the catch block to be reachable. This is added in case the java.class.version property has a wrong format or an unknown value. Since it is not reached, it doesn\u0027t \"cost\" anything.\n",
    "(In reply to comment #17)\n\u003e Added regression test\n\u003e org.eclipse.jdt.core.tests.compiler.regression.BatchCompilerTest#test144 for\n\u003e the checkVMVersion call.\ntest144 is not a regression test. If I revert the fix, the test doesn\u0027t fail with an UnsupportedClassVersionError.\n",
    "(In reply to comment #18)\n\u003e (In reply to comment #17)\n\u003e \u003e Added regression test\n\u003e \u003e org.eclipse.jdt.core.tests.compiler.regression.BatchCompilerTest#test144 for\n\u003e \u003e the checkVMVersion call.\n\u003e test144 is not a regression test. If I revert the fix, the test doesn\u0027t fail\n\u003e with an UnsupportedClassVersionError.\n\u003e \nPlease ignore, I didn\u0027t see your previous (sorry about that)\n",
    "Verified for 3.3RC4 using I20070606-0010.\n"
  ],
  "commentCreationDates": [
    "2007-06-01T17:24:05+02:00",
    "2007-06-01T17:25:00+02:00",
    "2007-06-01T17:57:04+02:00",
    "2007-06-01T18:06:44+02:00",
    "2007-06-01T18:23:54+02:00",
    "2007-06-01T18:27:22+02:00",
    "2007-06-01T19:02:23+02:00",
    "2007-06-01T19:05:02+02:00",
    "2007-06-04T09:04:58+02:00",
    "2007-06-04T12:53:16+02:00",
    "2007-06-04T14:56:37+02:00",
    "2007-06-04T15:44:30+02:00",
    "2007-06-04T15:54:53+02:00",
    "2007-06-04T16:40:25+02:00",
    "2007-06-04T19:23:41+02:00",
    "2007-06-04T19:25:09+02:00",
    "2007-06-05T13:01:45+02:00",
    "2007-06-05T13:10:26+02:00",
    "2007-06-05T13:38:05+02:00",
    "2007-06-05T13:42:41+02:00",
    "2007-06-07T01:08:11+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.UnsupportedClassVersionError",
      "message": "Bad version number in .class file",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass1",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:620"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:124"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:260"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:56"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:195"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:188"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:268"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:251"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:319"
        },
        {
          "method": "java.lang.Class.forName0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.forName",
          "source": "Class.java:164"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager",
          "source": "Main.java:3385"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.batch.Main.performCompilation",
          "source": "Main.java:3332"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.batch.Main.compile",
          "source": "Main.java:1545"
        },
        {
          "method": "Compile.main",
          "source": "Compile.java:101"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "190493",
      "date": "2007-06-01T17:24:05+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "major"
    }
  ],
  "groupId": "190493",
  "bugId": "190493",
  "date": "2007-06-01T17:24:05+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "major"
}