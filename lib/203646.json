{
  "comments": [
    "The following program causes an NPE:\n\ninterface I {\n\tinterface J\u003c T \u003e {\n\t\tT getT();\n\t}\n}\npublic aspect InnerGenericInterface {\n\tpublic T I.J\u003c T \u003e.intro() {\n\t\treturn null;\n\t}\n}\n\nThe following very similar program compiles and works fine:\n\ninterface J\u003c T \u003e {\n\tT getT();\n}\npublic aspect InnerGenericInterface {\n\tpublic T J\u003c T \u003e.intro() {\n\t\treturn null;\n\t}\n}\n\nHere\u0027s the exception trace:\njava.lang.NullPointerException\nat org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind(AsmElementFormatter.java:162)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:392)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.ja ... on$1.run(GlobalBuildAction.java:183)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\nCompile error: NullPointerException thrown: null",
    "removing some noise from test program:\n\n// fails\n\ninterface I {\n\tinterface J\u003c T \u003e {}\n}\npublic aspect InnerGenericInterface {\n\tpublic void I.J\u003c T \u003e.intro() {}\n}\n\n// succeeds\n\ninterface J\u003c T \u003e {}\npublic aspect InnerGenericInterface {\n\tpublic void J\u003c T \u003e.intro() {}\n}\n\n",
    "ok - i\u0027ve committed fixes for this.  If you go further with ITDs on generic types, we still break, but I think that may need some parsing rule changes.  For example:\n\ninterface I1\u003cA\u003e {\n  interface I2\u003cB\u003e {}\n}\n\naspect X {\n  public void I1\u003cX\u003e.I2\u003cY\u003e.foo(X x,Y y) {}\n}\n\ncould be possible but doesn\u0027t compile at the moment:\n\najc -1.5 Cool.java\nCool.java:8 [error] Syntax error on token(s), misplaced construct(s)\npublic void I1\u003cX\u003e.I2\u003cY\u003e.foo(X x,Y y) {}\n              ^^^\n\n1 error\n\n",
    "bug 208991 raised to cover the double type parameterization case, closing this issue as fixed in 1.5.4"
  ],
  "commentCreationDates": [
    "2007-09-17T21:56:14+02:00",
    "2007-09-17T21:59:12+02:00",
    "2007-10-29T17:03:31+01:00",
    "2007-11-07T10:06:06+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind",
          "source": "AsmElementFormatter.java:162"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit",
          "source": "AsmHierarchyBuilder.java:392"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse",
          "source": "MethodDeclaration.java:185"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "203646",
      "date": "2007-09-17T21:56:14+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "203646",
  "bugId": "203646",
  "date": "2007-09-17T21:56:14+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}