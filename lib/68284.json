{
  "comments": [
    "Brief summary: with a SOCKS proxy enabled, any JUnit test will no longer run.\n\nI have a socks proxy server running on localhost, port 1080.  I entered this \ninformation in the Window/Preferences/Internet section appropriately.  Next, \ntry to run any JUnit test.  I get the following error:\n\njava.lang.IllegalArgumentException: Error: parameter \u0027-port\u0027 not specified\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.defaultInit\n(RemoteTestRunner.java:239)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.init\n(RemoteTestRunner.java:177)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main\n(RemoteTestRunner.java:166)\nException in thread \"main\" \n\nI am actually using IBM\u0027s WSAD 5.1.1, but the problem appears to be with \nv2.1.2 of the Eclipse platform",
    "One further update: I\u0027ve tried various workarounds for this, but can\u0027t come up \nwith anything that both lets the test run and prevents this error from \noccurring.\n\nWorkaround 1: turn off proxy, add \"-DsocksProxyHost\u003dlocalhost -\nDsocksProxyPort\u003d1080\" to test case configuration.  This seems to just cause \nthe JUnit test to terminate without any output.\n\nWorkaround 2: try the above with IBM and Sun VMs (maybe IBM\u0027s JVM doesn\u0027t \nrespect those properties?).  Same result.\n\nWorkaround 3: turn off proxy, run WSAD/Eclipse under SocksCAP, which *should* \nmean that all access should be transparent.  Certain network connectivity in \nEclipse works fine; JUnit test cases fail with connection timeout errors \nindicating that for whatever reason the java process is not inheriting its \nSocksCAP-wrappedness from the parent Eclipse process.",
    "In related news :-), running through an HTTP proxy gets around the -port \nerror, but any URLConnection opened inside a JUnit test running via the JUnit \nplugin in Eclipse will not have its proxy host or port set properly.  The net \nresult is that even without SOCKS but with an HTTP proxy I cannot connect from \na class being run inside a JUnit test.",
    "JUnit creates an ordinary socket connection to the target VM. So I wonder \nwhether you can debug Java programs with Eclipse while SOCKS is enabled?\n\nCan you please add the command line that is used to invoke JUnit to the bug \nreport. To do so select the JUnit target in the Debug view and open the \nproperties dialog. It will show you the process information.\n\nThe obvious workaround is to use the JUnit text runner and run your tests as a \nJava program.",
    "Hi, Erich; first, here\u0027s the command line to *run* a JUnit test case with \nSOCKS enabled in the workbench:\n\nC:\\WSAD5.1.1\\eclipse\\jre\\bin\\javaw.exe -classpath \nC:/WSAD5.1.1/eclipse/plugins/org.eclipse.jdt.junit_2.1.1/junitsupport.jar;C:\\wo\nrkspace\\inst_nb\\Sand\\target\\classes;C:\\home\\lnelson\\.maven\\repository\\bsf\\jars\\\nbsf-2.2.jar;C:\\home\\lnelson\\.maven\\repository\\junit\\jars\\junit-3.8.1.jar \norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner -port -1 -classNames \nsand.files.TestCaseDownloadableFile\n\nNote \"-1\" specified as the port argument.\n\nNow, if I try to *debug* the test case, I get a dialog box error:\n\nException occurred during launch\n\nReason:\n  Cannot find a free socket for the debugger\n\n...so yes, you appear to be correct; debugging in general probably doesn\u0027t \nwork.  I\u0027ll check this.\n\nI\u0027ve worked around the problem, incidentally, by turning off the SOCKS proxy \nand passing \"-Dhttp.proxyHost\u003dlocalhost -Dhttp.proxyPort\u003d8000\" as VM arguments \nto my test case.  This seems, in fact, the only way to get proxy information \npassed to the JUnit process.  In my case, I\u0027m running Guidescope on my box \nthat in turn chains to a SOCKS proxy (Putty with dynamic port forwarding) so \nthat allows me to get out.",
    "Moving back to the JDT/UI inbox",
    "Darin, do you provide special support for this in debug?",
    "We do not provide any special support for this in debug. We use the Java class libraries to choose a free port on which to debug via our SocketUtil class:\n\n/**\n * Returns a free port number on localhost, or -1 if unable to find a free port.\n * \n * @return a free port number on localhost, or -1 if unable to find a free port\n * @since 3.0\n */\npublic static int findFreePort() {\n\tServerSocket socket\u003d null;\n\ttry {\n\t\tsocket\u003d new ServerSocket(0);\n\t\treturn socket.getLocalPort();\n\t} catch (IOException e) { \n\t} finally {\n\t\tif (socket !\u003d null) {\n\t\t\ttry {\n\t\t\t\tsocket.close();\n\t\t\t} catch (IOException e) {\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\t\t\n}\t",
    "Won\u0027t fix this specially for JUnit, given that plain debug has the same problems. Waiting for a decision for global proxy handling in bug 119278."
  ],
  "commentCreationDates": [
    "2004-06-23T14:35:02+02:00",
    "2004-06-23T16:24:44+02:00",
    "2004-06-23T17:31:03+02:00",
    "2004-06-23T19:23:58+02:00",
    "2004-06-23T19:37:51+02:00",
    "2006-05-24T11:48:30+02:00",
    "2006-06-23T19:59:58+02:00",
    "2006-07-05T17:58:15+02:00",
    "2006-07-06T16:46:34+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Error: parameter \u0027-port\u0027 not specified",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.defaultInit",
          "source": "RemoteTestRunner.java:239"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.init",
          "source": "RemoteTestRunner.java:177"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:166"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "68284",
      "date": "2004-06-23T14:35:02+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "major"
    }
  ],
  "groupId": "68284",
  "bugId": "68284",
  "date": "2004-06-23T14:35:02+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "major"
}