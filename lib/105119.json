{
  "comments": [
    "To be able to use a thirdparty library it seems to be\n\u0027best practice\u0027 to package it into a kind of thirdparty plugin.\nDue to the fact that this plugin simply exports the JAR bundling\nthe thirdparty library code without contibuting any other\nresources or even Java code, it is called a \u0027library plugin\u0027 and\nthe plugin descriptor might look like this:\n\n\u003cplugin\n    id\u003d\"com.thirdparty\"\n    name\u003d\"Thirdparty Library\"\n    version\u003d\"1.0.0\"\u003e\n\n    \u003cruntime\u003e\n        \u003clibrary name\u003d\"lib/jdom.jar\"\u003e\n            \u003cexport name\u003d\"*\"/\u003e\n        \u003c/library\u003e\n    \u003c/runtime\u003e\n\n    \u003crequires /\u003e\n\n\u003c/plugin\u003e\n\nEasy. Now let\u0027s say I\u0027d like to use this plugin to build another\nplugin called com.eclipse.tools. One has to define the dependency\non com.thirdparty an that\u0027s it, isn\u0027t it?\n\n\u003cplugin\n    id\u003d\"com.eclipse.tools\"\n    name\u003d\"Eclipse Tools\"\n    version\u003d\"1.0.0\"\n    class\u003d\"com.eclipse.tools.ToolsPlugin\"\u003e\n\n    \u003cruntime\u003e\n        \u003clibrary name\u003d\"eclipse-tools.jar\"\u003e\n            \u003cexport name\u003d\"*\"/\u003e\n        \u003c/library\u003e\n    \u003c/runtime\u003e\n\n    \u003crequires\u003e\n        ...\n        \u003cimport plugin\u003d\"com.thirdparty\"/\u003e\n    \u003c/requires\u003e\n    ...\n\n\u003c/plugin\u003e\n\nEasy. Easy? Not. You won\u0027t be able to compile your com.thirdparty that\nreferences any classes from com.thirdparty. Why not? I simply don\u0027t know.\nDo you? But I know a workaround everybody with the same problem seems\nto know as well: put the JAR file com.thirdparty exports on the\n\u0027Java Build Path\u0027 of the com.eclipse.tools plugin project. That works,\nbut again: why does one have to do it? At runtime there\u0027s no such\nthing as a \u0027Java Build Path\u0027 and com.eclipse.tools finds com.thirdparty\nclasses as exported by the com.thirdparty plugin descriptor. Why not\nat compile time? This is a bug, isn\u0027t it? And: if two plugins exporting\na JAR built by compiling its source code they provide it works simply\nby defining the plugin dependencies. It seems that the PDE only knows\nabout output folders such as \u0027bin\u0027 or \u0027classes\u0027 and ignores the JARs\ndefined as export.\n\nShouldn\u0027t PDE look for the output folders and if not found for the JARs exported?",
    "You can try to right click on the plugin xml use the compute classpath in the\npde submenu.\n\nOtherwise, if you are using eclipse 3.1, I recommend you to use the wizard New \u003e\nPlugin dev \u003e  plugin from existing jars, it will create the appropriate manifests.\n\n\n",
    "\u003e You can try to right click on the plugin xml use the compute classpath in the\n\u003e pde submenu.\n\nGood hint, but this just doesn\u0027t work properly, neither.\nIt doesn\u0027t add the JARs exported by a library plugin to the classpath\nof the dependant plugin. I just tried it.\n\n\u003e Otherwise, if you are using eclipse 3.1, I recommend you to use the wizard New \u003e\n\u003e Plugin dev \u003e  plugin from existing jars, it will create the appropriate manifests.\n\nO.k. I did just that and found out that the wizard added\nthe project nature org.eclipse.jdt.core.javanature, the JavaBuilder\nand a .classpath file. But what for?\n\nAnyway. I updated my library plugin correspondigly and it still\ndoesn\u0027t work.\n\nPascal, do you have library plugins that work the way I do expect\nthem to work in the PDE (add dependancy and PDE automatically\ndoes the rest...).\n",
    "Created an attachment (id\u003d25306)\n2plugins.zip\n\nWorks for me.\nZip of 2 plugins from my workspace attached.",
    "\u003e Works for me.\n\u003e Zip of 2 plugins from my workspace attached.\n\nCheers. It seems to work for me as well now. The crucial difference seems\nto be the \u0027classpathentry\u0027 attribute \u0027exported\u0027 which had not been set\nto \u0027true\u0027 in my library plugin. Which GUI component controls this attribute?\nI inserted it manually by editing .classpath.\n\nAnd: is it really necessary for the lib plugin project to include the\n\u0027Java Builder\u0027 and to have \u0027Java Nature\u0027?",
    "Works for me as well.\n\nSummary:\n\nLibrary Plugins need to have\n\n   1. A Java Builder\n   2. A Java Nature\n   3. A .classpath file tagging all exported JARs as exported\u003d\u0027true\u0027 \n",
    "Does not work for me under eclipse 3.2 (Build id: M20060629-1905, the official release), nor under eclipse 3.3 M1 (Build id: I20060810-1230).\n\nSteps to reproduce:\n1. Start eclipse\n2. Import the projects from the 2plugins.zip attachment\n3. Right-Click on the \"com.example.hello\" project -\u003e export... -\u003e deployable plugins and fragments -\u003e next\n4. select both projects, select eclipse path als destination -\u003e finish\n5. restart eclipse\n6. When hitting the button installed by our plugin, the following error happens:\n\njava.lang.NoClassDefFoundError: com/example/library/ClassInLibrary\nat com.example.hello.actions.SampleAction.run(SampleAction.java:37)\nat org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:254)\nat org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:229)\nat org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:539)\nat org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:488)\nat org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:441)\nat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\nat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:928)\nat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3348)\nat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2968)\nat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1914)\nat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1878)\nat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)\nat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\nat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\nat org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)\nat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)\nat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)\nat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:400)\nat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:177)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.eclipse.core.launcher.Main.invokeFramework(Main.java:336)\nat org.eclipse.core.launcher.Main.basicRun(Main.java:280)\nat org.eclipse.core.launcher.Main.run(Main.java:977)\nat org.eclipse.core.launcher.Main.main(Main.java:952)\n\n(copied from the error log)\n\nIf I\u0027ve done something wrong with exporting the plugin, please tell me how to do it correctly. Otherwise, please reopen this bug. Note that the plugin works as expected when running it by running it with \"right-click -\u003e run as -\u003e eclipse application\".\n"
  ],
  "commentCreationDates": [
    "2005-07-26T08:48:14+02:00",
    "2005-07-26T15:26:37+02:00",
    "2005-07-26T17:06:51+02:00",
    "2005-07-26T18:37:19+02:00",
    "2005-07-27T10:21:25+02:00",
    "2005-07-27T10:26:45+02:00",
    "2006-09-12T14:28:57+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "com/example/library/ClassInLibrary",
      "elements": [
        {
          "method": "com.example.hello.actions.SampleAction.run",
          "source": "SampleAction.java:37"
        },
        {
          "method": "org.eclipse.ui.internal.PluginAction.runWithEvent",
          "source": "PluginAction.java:254"
        },
        {
          "method": "org.eclipse.ui.internal.WWinPluginAction.runWithEvent",
          "source": "WWinPluginAction.java:229"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:539"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$2",
          "source": "ActionContributionItem.java:488"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$6.handleEvent",
          "source": "ActionContributionItem.java:441"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:928"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3348"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2968"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1914"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1878"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:419"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:78"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:92"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:68"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:400"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:177"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:336"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:280"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:977"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:952"
        }
      ],
      "number": 0,
      "commentIndex": 6,
      "bugId": "105119",
      "date": "2006-09-12T14:28:57+02:00",
      "product": "PDE",
      "component": "UI",
      "severity": "major"
    }
  ],
  "groupId": "105119",
  "bugId": "105119",
  "date": "2005-07-26T08:48:14+02:00",
  "product": "PDE",
  "component": "UI",
  "severity": "major"
}