{
  "comments": [
    "The static initializer of org.eclipse.jface.dialogs.Dialog cannot\nbe executed in a non-UI thread. The problematic call-chain is:\nJFaceResources.getImageRegistry() -\u003e Display.getCurrent().\nIn a non-UI thread this returns null, causing an NPE in the static\ninitializer. As the result, this class fails to load.\n\nI stumbled over this because I wanted to perform aspect weaving (using the\nnew hooks in the OSGI) on a subclass of Dialog. For that purpose I had to \nforce loading these classes from infrastructure code, perhaps even before \nthe UI was up and running.\n\nAnother (hypothetical) scenario where this will cause problems would be a \nconfigurable factory, which could be programmed like this:\n   Class myDialogClass;\n   void init() { myDialogClass \u003d Class.forName(readDialogClassName()); }\n   Dialog createDialog() { return (Dialog)myDialogClass.newInstance(); }\nAlso in this case method init() would crash if invoked within a non-UI thread.\n\nIMHO, a static initializer should never make any assumptions about the\ncontext it is being executed in. \n\nThe code in question seems to exist for backward compatibility only. \n(Typo in javadoc: @see Display#getSystemIcon(int ID), should read: getSystemImage, the same typo in ImageRegistry.get()).\nIn fact ImageRegistry.get(String) re-maps the deprecated keys from\nDialog to the new ones in SWT, so I believe the code in the static \ninitializer has not even any effect, the entries entered into the \nimage registry will never be retrieved by that name. \nCorrect me if I\u0027m wrong.",
    "Hi Stephan!\n\nThe static initializer does have an effect - the DLG_IMG_MESSAGE_* keys are not deprecated and are not mapped to SWT images in ImageRegistry.\n\nIn general, JFace assumes that it is only used from the UI thread. That said, I agree that we should avoid writing static initializers that do real work. In this particular case, what we could do is move the code to ImageRegistry.get().",
    "(In reply to comment #1)\n\u003e Hi Stephan!\nHi Boris!\n\n\u003e The static initializer does have an effect - the DLG_IMG_MESSAGE_* keys are not\n\u003e deprecated and are not mapped to SWT images in ImageRegistry.\nYou\u0027re right. I\u0027m sorry, I confused DLG_IMG_* and DLG_IMG_MESSAGE_*\n \n\u003e In general, JFace assumes that it is only used from the UI thread.\nWhich is a sound assumption for explicit method calls.\n\n\u003e That said, I\n\u003e agree that we should avoid writing static initializers that do real work. In\n\u003e this particular case, what we could do is move the code to ImageRegistry.get().\n\nSounds like a great idea to me. \n\n",
    "*** Bug 83445 has been marked as a duplicate of this bug. ***",
    "bug 151973 reports the same problem in the Wizard class.  Susan, what solution should we use to address the NPE in the static initializers of the Dialog and Wizard classes?",
    "haven\u0027t looked into this one yet (marking 3.3 so it will get investigated).\nBoris had suggested in comment #1 that the code be moved to lazy initializers in the ImageRegistry.get() methods.  The image constants have to remain in the Dialog and Wizard classes, but the image registry could know about them?",
    "(In reply to comment #5)\n\u003e haven\u0027t looked into this one yet (marking 3.3 so it will get investigated).\n\u003e Boris had suggested in comment #1 that the code be moved to lazy initializers\n\u003e in the ImageRegistry.get() methods.  The image constants have to remain in the\n\u003e Dialog and Wizard classes, but the image registry could know about them?\n\nThe image constants are API in Dialog and Wizard and could be treated specially in ImageRegistry.  At the moment, I cannot think of a more elegant solution.  Once the code creating the images is moved into ImageRegistry.get, we should leave a comment about this in teh Dialog and Wizard classes.\n",
    "Upon thinking about it a bit more, I think we should explicitly register these images as part of creating the default image registry in JFaceResources.getImageRegistry().    The current code just creates the default registry, but we could add a method to initialize it with some images.  This has the advantage of registering the images only in the default registry (preserving the old behavior) and not polluting a generic class like ImageRegistry with references to images in the default registry.",
    "(In reply to comment #7)\n\u003e Upon thinking about it a bit more, I think we should explicitly register these\n\u003e images as part of creating the default image registry in\n\u003e JFaceResources.getImageRegistry().\n\nMakes much more sense than my suggestion.",
    "Created an attachment (id\u003d49485)\napply patch to org.eclipse.jface\n\nSusan, is this patch what you were envisioning?  If so, I can release it and we can nix 2 bugs with one patch! :)",
    "Yes, this looks right.  Thanks.\n\nI looked at the source, but did not verify that it fixes the problem...do you have a snippet that verifies the fix?  If so, can you post it here so I can verify during M2 pass?",
    "Created an attachment (id\u003d49528)\ntest classes\n\nThis small test case replicates the NPE before the patch is applied. After the patch is applied, the name of each of the two test classes should be printed to the console.  (Run the Bug142299 class as an SWT app).",
    "released fix to HEAD for build \u003e 20060906",
    "thanks, Karice!",
    "Many thanks for this fix. Is there any chance of it (and the fix for bug 151973) making it into a 3.2.x maintenance release?",
    "No chance of getting this into 3.2.1 - the deadline for bugs to be considered for 3.2.1 has passed.  If there is a 3.2.2 release then perhaps it is a possibility.  If/when a 3.2.2 release plan becomes official then open a new bug with a reference to this bug (since the fix is attached to this one) and ask for it to be targetted to 3.2.2.",
    "verified on WinXP, I20060919-0010.\nSnippet runs without NPE and prints the class names to the console.",
    "*** Bug 184791 has been marked as a duplicate of this bug. ***",
    "Can this patch be applied to Eclipse 3.2.2?",
    "(In reply to comment #18)\n\u003e Can this patch be applied to Eclipse 3.2.2?\n\nAs far as I know, there are currently no plans to do further maintenance releases in the 3.2 stream, but I could be wrong - cc\u0027ing McQ to confirm.",
    "I understand your position, however, our product is based on Eclipse 3.2.2, we would like to patch it ourself if you could please provide a patch that can be applied to 3.2.2, we would appreciate that.",
    "The existing patch can be applied, but please understand it has not been tested against a 3.2.2 base.",
    "After the original bug has been fixed (thanks!) the very same\nproblem has been newly introduced in class PopupDialog (I\u0027m in 3.3RC3).\n\nOffending initializations are \n   private static final GridDataFactory LAYOUTDATA_GRAB_BOTH \u003d GridDataFactory.fillDefaults().grab(true,true);\n\nand\n   private static final GridLayoutFactory POPUP_LAYOUT_FACTORY \u003d GridLayoutFactory\n\t\t.fillDefaults().margins(POPUP_MARGINWIDTH, POPUP_MARGINHEIGHT)\n\t\t.spacing(POPUP_HORIZONTALSPACING, POPUP_VERTICALSPACING);\n\nThese have been in introduced in PopupDialog v1.26 in response to bug 156790.\n\nThis causes the following exception:\n  java.lang.IllegalArgumentException: Argument cannot be null\n        at org.eclipse.swt.SWT.error(SWT.java:3547)\n        at org.eclipse.swt.SWT.error(SWT.java:3481)\n        at org.eclipse.swt.SWT.error(SWT.java:3452)\n        at org.eclipse.swt.graphics.GC.\u003cinit\u003e(GC.java:141)\n        at org.eclipse.swt.graphics.GC.\u003cinit\u003e(GC.java:111)\n        at org.eclipse.jface.layout.LayoutConstants.initializeConstants(LayoutConstants.java:36)\n        at org.eclipse.jface.layout.LayoutConstants.getSpacing(LayoutConstants.java:67)\n        at org.eclipse.jface.layout.GridLayoutFactory.fillDefaults(GridLayoutFactory.java:128)\n        at org.eclipse.jface.dialogs.PopupDialog.\u003cclinit\u003e(PopupDialog.java:211)\n\nCould you PLEASE use some kind of lazy initialization for these fields??",
    "(In reply to comment #22)\nHi Stephan,\n\nSorry about breaking this again. I have filed a new bug for this: bug 191834.",
    "Marking as verified again."
  ],
  "commentCreationDates": [
    "2006-05-17T20:08:45+02:00",
    "2006-05-17T21:10:34+02:00",
    "2006-05-17T21:23:16+02:00",
    "2006-07-07T19:15:52+02:00",
    "2006-07-31T20:05:59+02:00",
    "2006-07-31T21:11:01+02:00",
    "2006-07-31T22:14:41+02:00",
    "2006-07-31T22:24:33+02:00",
    "2006-07-31T22:52:32+02:00",
    "2006-09-06T16:16:29+02:00",
    "2006-09-06T19:10:22+02:00",
    "2006-09-06T20:46:17+02:00",
    "2006-09-06T21:40:09+02:00",
    "2006-09-06T22:00:44+02:00",
    "2006-09-08T10:38:02+02:00",
    "2006-09-08T17:01:51+02:00",
    "2006-09-19T19:05:41+02:00",
    "2007-05-01T17:41:30+02:00",
    "2007-05-01T20:30:27+02:00",
    "2007-05-01T21:03:10+02:00",
    "2007-05-02T17:35:33+02:00",
    "2007-05-02T18:46:53+02:00",
    "2007-06-09T22:24:25+02:00",
    "2007-06-10T03:44:45+02:00",
    "2007-06-10T03:45:03+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Argument cannot be null",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3547"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3481"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3452"
        },
        {
          "method": "org.eclipse.swt.graphics.GC.\u003cinit\u003e",
          "source": "GC.java:141"
        },
        {
          "method": "org.eclipse.swt.graphics.GC.\u003cinit\u003e",
          "source": "GC.java:111"
        },
        {
          "method": "org.eclipse.jface.layout.LayoutConstants.initializeConstants",
          "source": "LayoutConstants.java:36"
        },
        {
          "method": "org.eclipse.jface.layout.LayoutConstants.getSpacing",
          "source": "LayoutConstants.java:67"
        },
        {
          "method": "org.eclipse.jface.layout.GridLayoutFactory.fillDefaults",
          "source": "GridLayoutFactory.java:128"
        },
        {
          "method": "org.eclipse.jface.dialogs.PopupDialog.\u003cclinit\u003e",
          "source": "PopupDialog.java:211"
        }
      ],
      "number": 0,
      "commentIndex": 22,
      "bugId": "142299",
      "date": "2007-06-09T22:24:25+02:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "142299",
  "bugId": "142299",
  "date": "2006-05-17T20:08:45+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}