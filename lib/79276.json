{
  "comments": [
    "There exists no support in the TableViewer for the clear operation in Table.\nIf the table doesn\u0027t use SWT.VIRTUAL, this could (maybe) be worked around by \ncalling remove-insert ..\n\nHowever, when using the virtual option, TableViewer\u0027s remove does not update \nthe VirtualManager which can cause anything from the wrong object being shown \n(removing chances indeces) to null error being thrown.\n\nUsing clear directly on the Table will of course cause a null pointer error \nsince item.cached is reset, next time the table needs to display the item \nVirtualManager fails to locate the item in its hash.\n\nMarcel",
    "Tod, someone from SWT who understands both SWT and JFace should review the \ndesign of the JFace virtual table viewer sometime soon before 3.1.  How about \nme and Vikki?",
    "That would be a good idea Steve. The main issue we are going to have is people \nwho play directly with the Table API like this example here.\n\nWe have to decide if we want to have some sort of callback mechanism in place \nor tell them just to use what is supplied in TableViewer.\n\nMarcel you can do the same thing by calling refresh on the viewer and updating \nyour content provider without this issue but Steve and Vikki should look at my \nimplementation so that they can see what the issues are.",
    "Refresh would get the new data displayed (assuming clear isn\u0027t called), but \nthis solution doesn\u0027t apply to my needs. The fact that an item is kept for each \nof the table\u0027s lines is already a problem, clearing the data might slightly \nimprove that ...\n\nMy problem is deeper than that.\nI have a HUGE amount of data to display, could be millions of lines.\nIt is impractical to even create it all even ignoring the memory explosion \nproblem. The idea is to use a virtual table, a table that asks for an item \nwhenever it needs it.\nThe Table as is could probably be used this way by clearing data that\u0027s not \ndisplayed at the moment (could keep a cache of a certain size for efficiency if \nuser does PgUp-PgDown).\n\nThe TableViewer assumes too many things about the data especially small data \nsize. The TableViewer should act pretty much like Swing\u0027s JTable with model \u0026 \nrenderer. Unless the user specifies he wants the data to be cached, no caching \nshould be done. Caching items increases the memory utilization needlessly, the \nuser can control better if to re-generate data if needed of cache it.\n\nI\u0027ve mentioned before, as well as others, that the contents provider model \nshould have a getValueAt(row, col) or at least a getUserItem(row).\nThe VirtualManager (from what I\u0027m understood from its code) only defers the \ncreation of TableItem.\n\nThe defence of the current TableViewer design has been (correct me if I\u0027m \nwrong) that if you want to support filtering/sorting this is a must.\nThe contents modal should be responsible for these. It should be able to decide \nif filtering/sorting is supported and how will this be done on the data.\nThe viewer should only get data and display it.\n\nMarcel\n\nP.S. - I will revert to v3.0 for now since there I can (in a twisted way) get \nalmost the needed behavior.\n",
    "Marcel see Bug 60117 for the discussion on deferred content providers. We \ndon\u0027t have a released solution for this yet.",
    "I an equal problem like marcel. (Eclipse M4) I use a TableViewer with the\nvirtual flag. Initially it is empty. Then data are loaded in the table (e.g. one\nrow). After a user interaction the table is cleared through advising the\ncontentprovider to return an array with a length of 0.\n\nThis works great. But when I set new datarows again (e.g. 1 row) in the empty\ntable an Index out of bounds exception occurs: \n\njava.lang.IllegalArgumentException: Index out of bounds\n\tat org.eclipse.swt.SWT.error(SWT.java:2813)\n\tat org.eclipse.swt.SWT.error(SWT.java:2752)\n\tat org.eclipse.swt.SWT.error(SWT.java:2723)\n\tat org.eclipse.swt.widgets.Widget.error(Widget.java:388)\n\tat org.eclipse.swt.widgets.Table.getItem(Table.java:1232)\n\tat org.eclipse.jface.viewers.TableViewer.getCreatedItems(TableViewer.java:383)\n\tat org.eclipse.jface.viewers.TableViewer.internalRefresh(TableViewer.java:728)\n\tat org.eclipse.jface.viewers.TableViewer.internalRefresh(TableViewer.java:706)\n\n\nI analysed the problem and it is the following:\nThe currentVisibleIndex is only changed in the \"setData\" - listener attached in\naddTableListener() in the TableViewer class.\nThis listener is activated if a new row is added in the model, but it is not\nnotificated when the table is \"cleared\". So on the next internalRefresh the\ngetCreatedItems() table tries to get the item at the first index of the table,\nbut the table is empty.",
    "Todd, we must have someone from SWT look at what you are doing.  Keeping a \ncurrent visible index sounds completely wrong to me.",
    "I agree - I think we should work on this together and I think I might have a \nbetter solution but I want to bounce it off of you.",
    "Upping priority. Steve has some ideas for this sort of thing we may address in 3.2.",
    "Steve, do you remember what ideas Tod is referring to?",
    "From memory and this bug report, Tod was attempting to keep \na \"currentVisibleIndex\".  In general, this doesn\u0027t make sense.  The operating \nsystem can ask for the contents of any item at any time, even those that are \nnot visible.  We need to determine what problem \"currentVisibleIndex\" is \nsolving and see whether the problem is real and/or if there is already a \nsolution in SWT.",
    "There is no \"currentVisibleIndex\" kept by TableViewer. Regarding the original problem (lacking support for clear/remove), there is a method TableViewer.clear(), and TableViewer.remove(int index) is missing.\n\nMarcel/Martin: Is this still a problem for you?",
    "Removing the target milestone. Please add a comment if you need index-based remove.",
    "Personally, I\u0027ve worked around this problem by extending the existing class.\nI do think that TableViewer should have a remove method and any other mehtod that can be directly accessed in Table, even if it is for soundness only."
  ],
  "commentCreationDates": [
    "2004-11-23T13:57:36+01:00",
    "2004-11-23T14:24:00+01:00",
    "2004-11-23T15:14:37+01:00",
    "2004-11-23T16:16:26+01:00",
    "2004-11-23T16:32:40+01:00",
    "2005-01-06T18:52:52+01:00",
    "2005-01-10T16:48:15+01:00",
    "2005-01-10T17:46:27+01:00",
    "2005-05-19T17:37:45+02:00",
    "2005-11-08T22:36:17+01:00",
    "2005-11-09T16:02:38+01:00",
    "2005-12-08T23:34:05+01:00",
    "2005-12-10T02:41:32+01:00",
    "2005-12-27T10:14:01+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Index out of bounds",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2813"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2752"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2723"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.error",
          "source": "Widget.java:388"
        },
        {
          "method": "org.eclipse.swt.widgets.Table.getItem",
          "source": "Table.java:1232"
        },
        {
          "method": "org.eclipse.jface.viewers.TableViewer.getCreatedItems",
          "source": "TableViewer.java:383"
        },
        {
          "method": "org.eclipse.jface.viewers.TableViewer.internalRefresh",
          "source": "TableViewer.java:728"
        },
        {
          "method": "org.eclipse.jface.viewers.TableViewer.internalRefresh",
          "source": "TableViewer.java:706"
        }
      ],
      "number": 0,
      "commentIndex": 5,
      "bugId": "79276",
      "date": "2005-01-06T18:52:52+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "enhancement"
    }
  ],
  "groupId": "79276",
  "bugId": "79276",
  "date": "2004-11-23T13:57:36+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "enhancement"
}