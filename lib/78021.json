{
  "comments": [
    "In order to test exception scenarios in an existing framework, I have\ncreated an aspect to inject an exception.  The exception is injected into\nsome code running within a try/catch/finally block.  After the exception is\nthrown, I am expecting control to pass to the catch block.  However, what\nis happening is that the catch block code is not executed, control passes\nthrough the finally block and the (undeclared) exception is thrown to the\ncalling method.\n\nHere is a distilled test case:\n\npublic class MainClass {\n\n       protected Integer counter;\n       private int j;\n\n       public static void main(String[] args) {\n\n               MainClass mh \u003d new MainClass();\n               try {\n                       mh.doSomething();\n               } catch (Exception e) {\n                       System.out.println(\"Exception thrown by\ndoSomething!!!!!\");\n                       e.printStackTrace();\n               }\n       }\n\n       public void doSomething() {\n               int i \u003d 0;\n               while (i++ \u003c 1) {\n                       counter\u003dnull;\n\n                       try {\n                               counter \u003d getCounter();\n                               if (counter \u003d\u003d null) {\n                                       break;\n                               }\n\n                               commit();\n                       } catch (Throwable e) {\n                               System.out.println(\"Caught exception \" +\ne);\n                       } finally {\n                               System.out.println(\"In finally block\");\n                       }\n               }\n       }\n\n       protected Integer getCounter() {\n               return new Integer(j++);\n       }\n\n       protected void commit() throws SQLException {\n               System.out.println(\"Main.commit\");\n       }\n}\n\nThe following aspect injects the exception:\n\npublic aspect SimpleExceptionThrowingAspect {\n\n   pointcut commitOperation() : call (* MainClass+.commit(..));\n\n   before() throws SQLException : commitOperation() {\n        throw new SQLException(\"Dummy SQL Exception\", \"55102\");\n   }\n}\n\nExpected output is:\n       Caught exception java.sql.SQLException: Dummy SQL Exception\n       In finally block\n\nActual output is:\n       In finally block\n       Exception thrown by doSomething!!!!!\n       java.sql.SQLException: Dummy SQL Exception        at\nnz.govt.moh.test.SimpleExceptionThrowingAspect.ajc$before$nz_govt_moh_test_SimpleExceptionThrowingAspect$1$292c82f1(SimpleExceptionThrowingAspect.aj:10)\n\n       at nz.govt.moh.test.MainClass.doSomething(MainClass.java:32)\n       at nz.govt.moh.test.MainClass.main(MainClass.java:14)\n\n\nRemoving the \"break;\" statement from MainClass.java causes the expected\noutput to be produced.",
    "This is related to bug 79554 - they are both to do with us creating an incorrect\nexception table for a woven method.  The exception table for the unwoven code is:\n\n  Exception table:\n   from   to  target type\n     9    38    38   Class java/lang/Throwable\n     9    29    64   any \n    32    61    64   any\n    81    84    64   any\n\nOnce woven, this changes to:\n\n  Exception table:\n   from   to  target type\n    87    90    70   any\n    32    67    70   any\n     9    44    44   Class java/lang/Throwable\n     9    29    70   any\n\nThe inclusion of \u0027any\u0027 with a range that overlaps the \u0027Throwable\u0027 range is\ncausing the problem.  When the exception occurs, it is right in the overlap\nrange and so in the woven code we skip the catch block, do the finally stuff and\n rethrow the exception.\n\n",
    "When unpacking, we associate a priority with entries in the exception table. \nThis priority can be used when writing the class out to ensure we don\u0027t break\nthe ordering carefully constructed by the compiler.  We currently ignore the\npriority - leading to situations where sometimes entries for finally blocks\nobscure entries for real catch blocks.  The implementation of the priority for\nnewly created exception handlers (created during weaving) doesn\u0027t seem quite\nright as they are given either super high priority (Integer.MAX) or super low\npriority (-1).  There are comments in the code (around\nLazyMethodGen.insertHandler()) which suggest what the right long term\nimplementation would be but having spent the last day in the code, it is not\ntrivial and the simpler immediate fix of using the priorities fixes this bug and\nthe related 79954.\n\nWe can do the full implementation of the priority work when (if?) someone finds\na situation that the current algorithm doesn\u0027t cope with.\n\nFix checked in - waiting for build.",
    "Fix available:\n\nBUILD COMPLETE -  build.429\nDate of build: 01/11/2005 11:52:16\nTime to build: 103 minutes 38 seconds\nLast changed: 01/11/2005 11:22:16\nLast log entry: Fixes for 78021, 79554 - both to do with us breaking the\nexception table for a method on weaving *if* finally blocks are involved.\nLatest good AspectJ jar available at:\ndownload.eclipse.org/technology/ajdt/dev/aspectj-DEVELOPMENT.jar\n"
  ],
  "commentCreationDates": [
    "2004-11-06T18:47:16+01:00",
    "2005-01-10T11:13:08+01:00",
    "2005-01-11T11:32:00+01:00",
    "2005-01-11T15:34:57+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.sql.SQLException",
      "message": "Dummy SQL Exception",
      "elements": [
        {
          "method": "nz.govt.moh.test.SimpleExceptionThrowingAspect.ajc$before$nz_govt_moh_test_SimpleExceptionThrowingAspect$1$292c82f1",
          "source": "SimpleExceptionThrowingAspect.aj:10"
        },
        {
          "method": "nz.govt.moh.test.MainClass.doSomething",
          "source": "MainClass.java:32"
        },
        {
          "method": "nz.govt.moh.test.MainClass.main",
          "source": "MainClass.java:14"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "78021",
      "date": "2004-11-06T18:47:16+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "78021",
  "bugId": "78021",
  "date": "2004-11-06T18:47:16+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}