{
  "comments": [
    "I\u0027m getting an ArrayIndexOutOfBoundsException in JavaModelManager:219:\n\njava.lang.ArrayIndexOutOfBoundsException: 60\nat org.eclipse.jdt.internal.core.JavaModelManager$CompilationParticipants.getCompilationParticipants(JavaModelManager.java:219)\nat org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.notifyParticipants(ReconcileWorkingCopyOperation.java:197)\nat org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:74)\nat org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:720)\nat org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:779)\nat org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1123)\nat org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:97)\n\nThe error happens when I switch editors, when I try to compile, opening the context menu and at thousands of other times.\n\nAfter some searching, I stumbled over the settings in a new project which (no idea why) suddenly decided to require Java 6.0. It seems that Eclipse doesn\u0027t do the correct bounds checking in this case. I wonder why this is. Isn\u0027t Java 6 supported by Eclipse 3.2? If not, why can I select it in the project properties?",
    "I\u0027ll investigate.\nI am surprised because I ran using a 1.6 VM last week and I didn\u0027t get it.",
    "Could you please provide your workspace settings or project settings if you used project specific options?\nYou should have 1.6.",
    "I have no 1.6 JRE installed. My latest JRE is 5 but I had a project set to Java 6 compliance level. Maybe that\u0027s the cause.",
    "Can you attach the org.eclipse.jdt.core.prefs of this project (you\u0027ll find it in .settings directory)?\nThanks\n",
    "I had some trouble to reproduce the bug now that it\u0027s fixed. I\u0027m using the maven 2 plugin and, well, see for yourself:\n\norg.eclipse.jdt.core.compiler.codegen.targetPlatform\u003d${maven.compile.target}\norg.eclipse.jdt.core.compiler.codegen.unusedLocal\u003dpreserve\norg.eclipse.jdt.core.compiler.compliance\u003d${maven.compile.source}\norg.eclipse.jdt.core.compiler.debug.lineNumber\u003dgenerate\norg.eclipse.jdt.core.compiler.debug.localVariable\u003dgenerate\norg.eclipse.jdt.core.compiler.debug.sourceFile\u003dgenerate\norg.eclipse.jdt.core.compiler.problem.assertIdentifier\u003derror\norg.eclipse.jdt.core.compiler.problem.enumIdentifier\u003derror\norg.eclipse.jdt.core.compiler.source\u003d${maven.compile.source}\n\nIt seems that Eclipse tries to make sense of these and fails :-)\n\nProposed solution: Eclipse should check the values it gets from this file and complain if they don\u0027t make sense instead of starting to throw strange exceptions. I\u0027ll also file a bug report against m2eclipse.\n",
    "Created an attachment (id\u003d54171)\nProposed patch\n\n",
    "What happens if the string is just \"x\"?\n\nI suggest to add a real check like Pattern.compile(\"1\\\\.[1-5]\").match(sourceLevel).match() and check against that before you try to evaluate the string.",
    "Created an attachment (id\u003d54183)\nNew proposed patch\n\nYou\u0027re right, my initial fix wasn\u0027t really good, this one should be better...\nIt does not use Pattern method which would be too costly for such a verification.\n",
    "Are you sure VERSION_JSR14 (\"jsr14\") is no longer necessary? Your new patch doesn\u0027t support it anymore.\n\nIf so, why not also delete the constant?",
    "(In reply to comment #9)\n\u003e Are you sure VERSION_JSR14 (\"jsr14\") is no longer necessary? Your new patch\n\u003e doesn\u0027t support it anymore.\n\u003e \n\u003e If so, why not also delete the constant?\n\u003e \nVERSION_JSR14 is a specific version for target platform and only used by batch compiler. In this bug test case, we\u0027re in Java Model (and so do not use batch compiler) and we\u0027re testing source level... So, this constant is still necessary but we do not need to support it in this peculiar case.\n",
    "I just wanted to make sure the batch compiler won\u0027t be using the new code eventually. Someone, who doesn\u0027t notice this patch, might be surprised when versionToJdkLevel suddenly behaves differently.",
    "(In reply to comment #11)\n\u003e I just wanted to make sure the batch compiler won\u0027t be using the new code\n\u003e eventually. Someone, who doesn\u0027t notice this patch, might be surprised when\n\u003e versionToJdkLevel suddenly behaves differently.\n\u003e \nPlease, note that:\n1) versionToJdkLevel does not behave differently, I just rewrote it to be more optimized (avoid several calls to String.equals(Object) method) as it is called from JavaModelManager method in my new fix and I didn\u0027t want to have time penalty using this method...\n2) even this method is public, it\u0027s not API as CompilerOptions is in an internal package \u003d\u003e it\u0027s only supposed to be used by our own code (ie. JDT/Core)\n\u003d\u003e nobody should be surprised even if we decided to change this method behavior...\n",
    "Created an attachment (id\u003d54244)\nLast proposed patch\n\nPoint 1) in my previous comment was wrong (this was not my day yesterday :-( ...)\nI effectively modified versionToJdkLevel method behavior as I missed VERSION_JSR14 value! New patch fix this last (?) issue.\nThanks the review :-)\n",
    "Created an attachment (id\u003d54255)\nUltimate proposed patch\n\nAfter Philippe\u0027s review, change indexForSourceLevel(String) method of JavaModelManager.CompilerParticipant to avoid any assumption on JDK level major version value...",
    "Released for 3.3 M4 in HEAD stream.\n",
    "Verified for 3.3M4 with I20061212-0010."
  ],
  "commentCreationDates": [
    "2006-11-15T21:16:51+01:00",
    "2006-11-15T23:44:21+01:00",
    "2006-11-16T00:04:18+01:00",
    "2006-11-16T08:42:14+01:00",
    "2006-11-16T09:17:07+01:00",
    "2006-11-17T20:46:58+01:00",
    "2006-11-20T14:18:07+01:00",
    "2006-11-20T16:35:48+01:00",
    "2006-11-20T17:46:43+01:00",
    "2006-11-20T19:56:22+01:00",
    "2006-11-20T20:32:44+01:00",
    "2006-11-20T20:41:30+01:00",
    "2006-11-20T21:46:37+01:00",
    "2006-11-21T09:36:19+01:00",
    "2006-11-21T11:51:42+01:00",
    "2006-11-21T12:55:51+01:00",
    "2006-12-12T12:01:20+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "60",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager$CompilationParticipants.getCompilationParticipants",
          "source": "JavaModelManager.java:219"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.notifyParticipants",
          "source": "ReconcileWorkingCopyOperation.java:197"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation",
          "source": "ReconcileWorkingCopyOperation.java:74"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.run",
          "source": "JavaModelOperation.java:720"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.runOperation",
          "source": "JavaModelOperation.java:779"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.reconcile",
          "source": "CompilationUnit.java:1123"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run",
          "source": "JavaReconcilingStrategy.java:97"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "164707",
      "date": "2006-11-15T21:16:51+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "164707",
  "bugId": "164707",
  "date": "2006-11-15T21:16:51+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}