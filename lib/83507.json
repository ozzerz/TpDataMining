{
  "comments": [
    "This test seems to be failing often on Linux. The test closes all editors, \nadds a part listener, launches to a breakpoint and waits for an editor to open \nbefore it attempts a \"run to line\". There are three tests, and the first of \nthe three seems to fail often. It does not seem to fail on windows. The test \nclaims the editor does not open, but I suspect it is open and the test wasn\u0027t \nnotified for some reason.\n\n\nEditor did not open \n\njunit.framework.AssertionFailedError: Editor did not open\nat org.eclipse.jdt.debug.tests.core.RunToLineTests.runToLine\n(RunToLineTests.java:164)\nat org.eclipse.jdt.debug.tests.core.RunToLineTests.testRunToLine\n(RunToLineTests.java:104)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\nat org.eclipse.jdt.debug.tests.DebugSuite$1.run(DebugSuite.java:53)\nat java.lang.Thread.run(Thread.java:534)",
    "I think the problem is somewhere in RemoteTreeViewer.\n\nEverytime the top stack frame change, two selection change events are generated.\nThese two events generate two calls to LaunchView#openEditorForStackFrame(),\nwhich are not correctly handled. The first call creates a SourceLookupJob to\nfind the corresponding source, what is correct. But the second call creates a\nSourceDisplayJob which will be run to early and will use the result of a\nprevious source lookup, instead of waiting for the result of the SourceLookupJob\ncreated in the first call.\nThe result is in the test, instead of opening an editor directly for\nBreakpoint.java, an editor is created for the test program of the previous test,\nthen the content of the editor is switched to Breakpoint.java (a new editor is\nnot create, the \u0027reuse editor\u0027 option is on by defaut). The test doesn\u0027t notice\nthe file is correctly displayed and fails.\n\nThe two selection change events are generated by one\nRemoteTreeViewer#SelectionJob ran twice. The job is scheduled first in\nRemoteTreeViewer#deferSelection() and then in RemoteTreeViewer#runDeferedUpdates().\n\nYou can see the two scheduling by putting breakpoints in these methods and\ndebugging a program to a breakpoint.",
    "I haven\u0027t looked at this too carefully yet. Do you think the problem is that the selection event is fired \nmore than once, or that the synchronization of the source lookup and display jobs (in LaunchView) is \nincorrect?",
    "Most likely this is the result of a bug in the variables view. See bug 83453.",
    "\n\n*** This bug has been marked as a duplicate of 83453 ***",
    "The test failed again in the last nightly build (on Windows and Linux).",
    "I added output to the test and noticed that when the test fails, we are \ngetting an unexpected notification from the workbench for \"part open\". The \nworkbench tells us that \"WatchItemTests.java\" was opened, when in fact, \nthe \"Breakpoints.java\" editor was opened (I saw it with my own eyes :-). \nOutput from the 3 tests shows the following (one failure, two pass - i.e. 1st \ntess fails, and last 2 pass).\n\nWatchItemTests.java\nBreakpoints.java\nBreakpoints.java\n\nI will see if I can write a test to show the workbench part notification \nfailure.",
    "Of course, my test that does the open \"1\"/close all/open \"2\" does not fail.",
    "I don\u0027t think this is a worbench part notification failure. I think we are\nasking to open \"WachItemTest.java\" because it\u0027s result of the previous source\nlookup, then we change the input for the newly open editor to \"Breakpoint.java\"\n(the option \u0027reuse editor when displaying source code\u0027 is on by defaut). The\nworkbench send us the correct notification.\n\nI will debug this problem a bit more, and try to develop the explication I gave\nin comment 1.",
    "I agree - I think it has to do with the editor re-use caching in the \nSourceLookupFacility.",
    "Found a fix - the scheduleSourceLookup() should null the previous source \nlookup result before running. Otherwise, another selection change can occurr \ncausing the previous source lookup result to display (since the source lookup \njob has not yet completed).\n\nI also need to see why there is an extra selection change.",
    "Fixed. By nulling out the previous source lookup result, if two selection \nchange events are received for the same stack frame before the first source \nlookup job completes, we avoid showing the wrong source. ",
    "Luc, please verify. \n\nI found that I did not always get to selection change notifications, so this \nseems like the right fix (but insight on the two selection change events would \nbe nice).",
    "NOTE: I don\u0027t think the two selection events are actually a bug. I think they \nhappen on the first suspend caused by the interaction of \"auto expand\" and \nexplicitly selecting the top stack frame in a thread when a debug target is \ncreated and the thread suspends. Sometimes you don\u0027t get two - it depends on \nthe timing.",
    "Verified."
  ],
  "commentCreationDates": [
    "2005-01-23T17:14:05+01:00",
    "2005-01-25T00:58:12+01:00",
    "2005-01-25T16:54:12+01:00",
    "2005-01-26T15:40:42+01:00",
    "2005-01-26T17:38:54+01:00",
    "2005-01-27T19:01:56+01:00",
    "2005-02-01T15:57:22+01:00",
    "2005-02-01T16:58:43+01:00",
    "2005-02-01T18:02:08+01:00",
    "2005-02-01T18:06:11+01:00",
    "2005-02-01T18:41:00+01:00",
    "2005-02-01T19:04:45+01:00",
    "2005-02-01T19:06:37+01:00",
    "2005-02-01T19:44:57+01:00",
    "2005-02-16T00:25:47+01:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "message": "Editor did not open",
      "elements": [
        {
          "method": "org.eclipse.jdt.debug.tests.core.RunToLineTests.runToLine",
          "source": "RunToLineTests.java:164"
        },
        {
          "method": "org.eclipse.jdt.debug.tests.core.RunToLineTests.testRunToLine",
          "source": "RunToLineTests.java:104"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "org.eclipse.jdt.debug.tests.DebugSuite$1.run",
          "source": "DebugSuite.java:53"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:534"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "83507",
      "date": "2005-01-23T17:14:05+01:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "83507",
  "bugId": "83507",
  "date": "2005-01-23T17:14:05+01:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "normal"
}