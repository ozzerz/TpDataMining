{
  "comments": [
    "Using a method named proceed(..) in around advice confuses the compiler (in at\nleast the 2-3 ways shown below).  \n\nTrue of the current tree (untested in 1.1.1).  Workaround for now is to rename\nthe method.  \n\n---- first problem: NPE in compiler\njava.lang.NullPointerException\n\tat\norg.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor.endVisit(MakeDeclsPublicVisitor.java:44)\n\npublic class Proceeding {\n    public static void main(String[] args) { }\n    static aspect A {\n        interface IProceed {\n            void proceed(Runnable next);\n        }\n        IProceed decorator;\n        void around() : execution(void main(String[])) {\n            decorator.proceed(new Runnable() {\n                public void run() {\n                    proceed();\n                }\n            });\n        }\n    }\n}\n\n---- second problem: incorrect error wrt number of arguments\n\npublic class Proceeding {\n    public static void main(String[] args) {\n    }\n    static aspect A {\n        void around() : execution(void main(String[])) {\n            Proceeding.proceed(null); // BUG: treated as proceed(Object);\n        }\n    }\n    static void proceed(Object o) {}\n}\n\n---- third hypothetical: we should document how ambiguity is resolved\n\npublic class Proceeding {\n    public static void main(String[] args) {\n    }\n    static aspect A {\n        void around() : execution(void main(String[])) {\n            proceed(); // special form or Proceeding.proceed()?\n        }\n    }\n    void proceed() {}\n}",
    "Sorry - last hypo should be\n\n  static void proceed() {}\n  ^^^^^^\n\n\n",
    "To maintain a simple specification the rule should be that a bare proceed in \nan aspect is always the special form and can never refer to a method even if \none is defined by the aspect.  However, we should support calling proceed with \na receiver as in examples 1 and 2 as this is clearly unambiguous.\n\nThis can probably be fixed fairly easily by modifying the method \nProceed.findEnclosingAround to check if Proceed.receiver exists and if so to \nclaim the proceed is not inside an around and therefore should be treated as a \nnormal method.",
    "Raising to a P2 bug to increase visibility, but not marking 1.2 as I don\u0027t \nthink this should delay a 1.2 release.",
    "marked as target 1.2.1",
    "Fixed following Jim\u0027s suggestion. Had to make one refinement which is to treat \nthe proceed as the special form in the case when the receiver is null, OR the \nreceiver is non-null and receiver.isThis() returns true.\n\nAll three of the cases below now work correctly. \n\nI also added the following to the semantics appendix:\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nAny occurence of proceed(..) within the body of around advice is treated as the \nspecial proceed form (even if the aspect defines a method named proceed) unless \na target other than the aspect instance is specified as the recipient of the \ncall. For example, in the following program the first call to proceed will be \ntreated as a method call to the ICanProceed instance, whereas the second call to \nproceed is treated as the special proceed form. \n\n  aspect A {\n     Object around(ICanProceed canProceed) : execution(* *(..)) \u0026\u0026 \nthis(canProceed) {\n        canProceed.proceed();         // a method call\n        return proceed(canProceed);   // the special proceed form\n     }\n     \n     private Object proceed(ICanProceed canProceed) {\n        // this method cannot be called from inside the body of around advice in\n        // the aspect\n     }\n  }\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nThe wording is slightly cumbersome, but it was very hard to phrase this \naccurately.",
    "Fix now available in latest development jar from AspectJ download page.",
    "Fix released as part of AspectJ 1.2.1"
  ],
  "commentCreationDates": [
    "2004-03-07T03:43:04+01:00",
    "2004-03-07T03:44:16+01:00",
    "2004-03-18T19:12:19+01:00",
    "2004-03-18T19:12:57+01:00",
    "2004-08-09T21:23:53+02:00",
    "2004-08-10T15:18:10+02:00",
    "2004-08-10T18:05:02+02:00",
    "2004-10-21T10:31:13+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor.endVisit",
          "source": "MakeDeclsPublicVisitor.java:44"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "53981",
      "date": "2004-03-07T03:43:04+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "53981",
  "bugId": "53981",
  "date": "2004-03-07T03:43:04+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}