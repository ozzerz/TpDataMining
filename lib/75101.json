{
  "comments": [
    "Empty strings in Extended Data Elements are not serialized.\n\nFor example,\n\npublic void testEmtpyEDEValue() throws Exception {\n\t\tString cbeString;\n\t\t{\t\n\t\t\tCommonBaseEvent cbe \u003d EventFactoryImpl.getInstance\n().createCommonBaseEvent();\n\t\t\tCommonBaseEventLogRecord cbelr \u003d new \nCommonBaseEventLogRecord(cbe);\n\t\t\tcbelr.setLoggerName(\"\");\n\t\t\t\n\t\t\tassertEquals(cbelr.getLoggerName(), \"\");\t\n\t\u003c\u003c this works fine\n\t\t\tcbeString \u003d EventFormatter.toCanonicalXMLString(cbe);\n\t\t}\n\n\t\tSystem.out.println(\"cbestring:\"+cbeString);\n\t\tCommonBaseEvent cbe2 \u003d EventFormatter.eventFromCanonicalXML\n(cbeString);\n\t\tCommonBaseEventLogRecord cbelr2 \u003d new CommonBaseEventLogRecord\n(cbe2);\n\t\t\n\t\tassertEquals(cbelr2.getLoggerName(), \"\");\t\t\u003c\u003c this \ncauses an Exception in getLoggerName\n\t}\t\n\n\nThe output is:\n\ncbestring:\u003cCommonBaseEvent creationTime\u003d\"2004-09-25T16:03:23.637Z\" \nversion\u003d\"1.0.1\"\u003e\n\t\u003cextendedDataElements name\u003d\"sequenceNumber\" type\u003d\"long\"\u003e\n\t\t\u003cvalues\u003e14\u003c/values\u003e\n\t\u003c/extendedDataElements\u003e\n\t\u003cextendedDataElements name\u003d\"threadID\" type\u003d\"int\"\u003e\n\t\t\u003cvalues\u003e10\u003c/values\u003e\n\t\u003c/extendedDataElements\u003e\n\t\u003cextendedDataElements name\u003d\"loggerName\" type\u003d\"string\"\u003e\t\tNote - \nno \"values\" in this EDE\n\t\u003c/extendedDataElements\u003e\n\u003c/CommonBaseEvent\u003e\nE.E.\nTime: 1.723\nThere were 2 errors:\n1) testEmtpyEDEValue(com.ibm.ws.logging.object.WsLogRecordHelperTest)\norg.eclipse.emf.common.util.BasicEList$BasicIndexOutOfBoundsException: index\u003d0, \nsize\u003d0\n\tat org.eclipse.emf.common.util.BasicEList.get(BasicEList.java(Compiled \nCode))\n\tat \norg.eclipse.hyades.logging.java.CommonBaseEventLogRecord.getLoggerName\n(CommonBaseEventLogRecord.java)\n\tat com.ibm.ws.logging.object.WsLogRecordHelperTest.testEmtpyEDEValue\n(WsLogRecordHelperTest.java:178)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:84)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:59)\n\tat com.ibm.ws.logging.object.WsLogRecordHelperTest.main\n(WsLogRecordHelperTest.java:54)",
    "Please see defect #75102(https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d75102) \nfor the same defect proposed for Hyades v3.0.2.\n",
    "JUnit test cases:\n\nCommonBaseEventLogRecordTest.java:\n\n    /**\n     * Test an empty logger name.\n     */\n    public void testEmptyStringDataInExtendedDataElementValues() {\n\n        try {\n\n            CommonBaseEvent commonBaseEvent \u003d \nEventFactory.eINSTANCE.createCommonBaseEvent();\n\n            CommonBaseEventLogRecord commonBaseEventLogRecord \u003d new \nCommonBaseEventLogRecord(commonBaseEvent);\n            commonBaseEventLogRecord.setLoggerName(\"\");\n            \n            assertEquals(commonBaseEventLogRecord.getLoggerName(),\"\");\n            \n            assertTrue(commonBaseEvent.getExtendedDataElements().size() \u003e 1);\n            \n            assertEquals(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getName\n(),CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME);\n\n            assertEquals(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getTypeAsInt(),ExtendedDataElement.TYPE_STRING_VALUE);\n\n            assertEquals(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getValues().size(),1);\n            \n            assertEquals(((String)(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getValues().get(0))),\"\");\n\n            String commonBaseEventString \u003d \nEventFormatter.toCanonicalXMLDocString(commonBaseEvent);\n\n            CommonBaseEvent serializedCommonBaseEvent \u003d \nEventFormatter.eventsFromCanonicalXMLDoc(commonBaseEventString)[0];\n            \n            CommonBaseEventLogRecord serializedCommonBaseEventLogRecord \u003d new \nCommonBaseEventLogRecord(serializedCommonBaseEvent);\n            \n            assertEquals(serializedCommonBaseEventLogRecord.getLoggerName(),\"\");\n\n            assertTrue(serializedCommonBaseEvent.getExtendedDataElements().size\n() \u003e 1);\n            \n            assertEquals(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getName\n(),CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME);\n\n            assertEquals(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getTypeAsInt(),ExtendedDataElement.TYPE_STRING_VALUE);\n\n            assertEquals(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getValues().size(),1);\n            \n            assertEquals(((String)(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements\n(CommonBaseEventLogRecord.EXTENDED_DATA_ELEMENT_NAME_LOGGER_NAME).get\n(0))).getValues().get(0))),\"\");\n        } \n        catch (AssertionFailedError a) {\n            throw (a);\n        } \n        catch (Throwable t) {\n            assertTrue(t.toString(), false);\n        }\n    }\n\n\nEventFormatterTest.java:\n\n    public void testEmptyStringDataInExtendedDataElementValues() {\n\n        try {\n\n            final String EXTENDED_DATA_ELEMENT_NAME \u003d \"Test Name\";\n            \n            CommonBaseEvent commonBaseEvent \u003d \nEventFactory.eINSTANCE.createCommonBaseEvent();\n            commonBaseEvent.addExtendedDataElement\n(EXTENDED_DATA_ELEMENT_NAME,\"\");\n            \n            assertEquals(commonBaseEvent.getExtendedDataElements().size(),1);\n            \n            assertEquals(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements().get(0))).getName\n(),EXTENDED_DATA_ELEMENT_NAME);\n\n            assertEquals(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements().get(0))).getTypeAsInt\n(),ExtendedDataElement.TYPE_STRING_VALUE);\n\n            assertEquals(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements().get(0))).getValues().size(),1);\n            \n            assertEquals(((String)(((ExtendedDataElement)\n(commonBaseEvent.getExtendedDataElements().get(0))).getValues().get(0))),\"\");\n\n            String commonBaseEventString \u003d \nEventFormatter.toCanonicalXMLDocString(commonBaseEvent);\n\n            CommonBaseEvent serializedCommonBaseEvent \u003d \nEventFormatter.eventsFromCanonicalXMLDoc(commonBaseEventString)[0];\n            \n            assertEquals(serializedCommonBaseEvent.getExtendedDataElements\n().size(),1);\n            \n            assertEquals(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements().get(0))).getName\n(),EXTENDED_DATA_ELEMENT_NAME);\n\n            assertEquals(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements().get(0))).getTypeAsInt\n(),ExtendedDataElement.TYPE_STRING_VALUE);\n\n            assertEquals(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements().get(0))).getValues().size\n(),1);\n            \n            assertEquals(((String)(((ExtendedDataElement)\n(serializedCommonBaseEvent.getExtendedDataElements().get(0))).getValues().get\n(0))),\"\");\n        } \n        catch (AssertionFailedError a) {\n            throw (a);\n        } \n        catch (Throwable t) {\n            assertTrue(t.toString(), false);\n        }\n    }\n    ",
    "Created an attachment (id\u003d14807)\nEventFormatter.java fix.\n",
    "Outstanding:  Require fix for SAXEventHandler.java since empty elements do not \ninfer/persist empty string values.",
    "Code checked-in to HEAD on September 30, 2004:\n\norg.eclipse.hyades.logging.core:\n\n-SAXEventHandler.java\n-EventFormatter.java\n-plugin.properties\n-EventFormatterTest.java\n\norg.eclipse.hyades.logging.java14:\n\n-CommonBaseEventLogRecordTest.java\n\n",
    "Verified in Toronto\u0027s 20041001_1236 (HEAD) build on October 5, 2004.",
    "Closing.",
    "*** Bug 76070 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2004-09-27T18:57:48+02:00",
    "2004-09-27T18:59:29+02:00",
    "2004-09-27T22:28:04+02:00",
    "2004-09-27T22:28:59+02:00",
    "2004-09-27T22:30:02+02:00",
    "2004-09-30T21:49:02+02:00",
    "2004-10-04T15:11:33+02:00",
    "2004-10-04T15:12:01+02:00",
    "2004-10-12T14:48:17+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.emf.common.util.BasicEList$BasicIndexOutOfBoundsException",
      "message": "index\u003d0,  size\u003d0",
      "elements": [
        {
          "method": "org.eclipse.emf.common.util.BasicEList.get",
          "source": "BasicEList.java(Compiled  Code)"
        },
        {
          "method": "org.eclipse.hyades.logging.java.CommonBaseEventLogRecord.getLoggerName",
          "source": "CommonBaseEventLogRecord.java"
        },
        {
          "method": "com.ibm.ws.logging.object.WsLogRecordHelperTest.testEmtpyEDEValue",
          "source": "WsLogRecordHelperTest.java:178"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:84"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:57"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:59"
        },
        {
          "method": "com.ibm.ws.logging.object.WsLogRecordHelperTest.main",
          "source": "WsLogRecordHelperTest.java:54"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "75101",
      "date": "2004-09-27T18:57:48+02:00",
      "product": "Hyades",
      "component": "Exec.logging",
      "severity": "major"
    }
  ],
  "groupId": "75101",
  "bugId": "75101",
  "date": "2004-09-27T18:57:48+02:00",
  "product": "Hyades",
  "component": "Exec.logging",
  "severity": "major"
}