{
  "comments": [
    "Build ID: M20060921-0945\n\nSteps To Reproduce:\n1.Create a project with multiple output paths\n2. Full Build\n3. Modify any file\n4. Incremental Build get\u0027s converted into Full Build \n\n\nMore information:\nWhen using Maven2 and generating an eclipse porject, the default is to generate a separate output path for unit test-classes than normal application classes. So Eclipse compiles test-classes to target/test-classe rather than target/classes.\n\n\nWhat happens is when any file is changed and an incremental build triggered, ASPECTJ checks for changes in the classpath.... In so doing, it performs the following test inside AjState.changed(List oldPath, List newPath, boolean checkClassFiles, File oldOutputLocation):\n\nif (f.exists() \u0026\u0026 f.isDirectory() \u0026\u0026 checkClassFiles \u0026\u0026 !(f.equals(oldOutputLocation)))\n\nif this expression evaluates to true, it triggers cancels the incremental build and triggers a full build. When checking the folder /target/test-classes it checks to see if it matches the oldOutputLocation variable which  for some reason contains /target/classes (the default output folder). Thus, every time anything is changed, no matter where it triggers a full rebuild.\n\nFor the record, my test classes are not in my aspectj inpath and I don\u0027t use aspectj at all for my test classes.",
    "Created an attachment (id\u003d55861)\nA JAR file containing a simple sample project to recreate the problem\n\n",
    "After discussions with Helen and Andy, and running some tests, the consensus seems to be that this is an AspectJ bug.  AjState only stores one outpath, which is always set to the project default, regardless of whether the default is actually used.  Thus it is possible to have, say, a \"src\" folder with a corresponding \"src_output\" folder, a \"tests\" folder with a corresponding \"tests_output\" folder, and a redundant project default output folder set to something else completely, yet the later is always used for comparisons by AjState.",
    "Over to the AspectJ folks...",
    "Looking into the AjState and incremental building, there\u0027s a whole host of things which do not cope with having multiple output directories. I believe I\u0027ve fixed these and in doing so also fixed this bug, however, I\u0027m finding it hard to write a MultiProjectIncrementalTest which fails in the same way that I see in a runtime workbench. I think this is merely down to differences between the harness and how ajdt uses ajde. However, I have tested my fix in a runtime workbench and am no longer seeing full builds when they should be incremental. I\u0027ll keep going with trying to write a test for this bug....",
    "The reason I wasn\u0027t able to reproduce this within the test harness was that AJDT includes all output directories on its classpath whereas our harness didn\u0027t. Fixing that means I now have a testcase.",
    "Created an attachment (id\u003d56092)\nupdate harness to be able to specify if care about the order of the stderr output\n\nThe changes that I\u0027ve made mean that we can no longer count on the order that aspects appear in the aop.xml file (because I\u0027m having to record the filename the aspect is in along with the name of the aspect I\u0027m using a HashMap which doesn\u0027t guarentee order). There\u0027s one LTW test (LTWTests.testAspectsIncludeWithLintWarning) that fails because of this. After discussions with Matthew, this particular test just cares that the messages come out rather than in which order, therefore I\u0027ve modified the harness to take an extra argument as to whether or not we care about the order. The xml can now be:\n\n\u003crun class\u003d\"Main\" ltw\u003d\"aop-aspectsincludewithlintwarning.xml\"\u003e\n   \u003cstdout\u003e\n      \u003cline text\u003d\"Main.main\"/\u003e\n      \u003cline text\u003d\"Main.test1\"/\u003e\n      \u003cline text\u003d\"Main.test2\"/\u003e\n   \u003c/stdout\u003e\n   \u003cstderr ordered\u003d\"no\"\u003e    \u003c--------------- added option\n      \u003cline text\u003d\"warning aspect Aspect1 exluded for class loader org.aspectj.weaver.loadtime.WeavingURLClassLoader [Xlint:aspectExcludedByConfiguration]\"/\u003e\n      \u003cline text\u003d\"warning aspect Aspect2 exluded for class loader org.aspectj.weaver.loadtime.WeavingURLClassLoader [Xlint:aspectExcludedByConfiguration]\"/\u003e\n      \u003cline text\u003d\"pakkage.Aspect3.before_test2\"/\u003e\n    \u003c/stderr\u003e\n\u003c/run\u003e\n\n\nThe attached zip file contains two patches:\n\n- testing.txt : apply to the testing project\n- tests.txt: apply to the tests project\n\nThese patches provide the changes to the test harness.",
    "Created an attachment (id\u003d56094)\nzip containing tests and fixes\n\nThe attached zip contains the following:\n\n- ajde.txt: apply this patch to the ajde project\n- ajdt-core.txt: apply this patch to the org.aspectj.ajdt.core project\n- testing.txt: apply this patch to the testing project (this patch is a duplicate of the patch provided in comment #6)\n- tests.txt: apply this patch to the tests project (this patch contains the patch provided in comment #6 but adds a lot more tests for this bug)\n- inpathJar.jar - place in tests\\multiIncremental\\inpathTesting\\base\n\n\nTo test these patches and ensure that the tests fail before applying the fixes you need to apply the ajde.txt patch. This adds a couple of extra interface methods to OutputLocationManager. You also need to apply the part of ajdt-core.txt to CompilationResultDestinationManager (this adds the same two interface methods). Not doing this means that not all the output locations are added to the classpath in AjdeInteractionTestbed.MyProjectPropertiesAdapter. Consequently the test IncrementalOutputLocationManagerTests.testPr166580() will pass without my fixes (this was the reason it was failing in AJDT and I initially had trouble reproducing it in the harness).\n\nTogether these patches provide testcases and fixes for all the places AjBuildConfig.getOutputDir() was called without taking into account that this may return null or that there may be an outputLocationManager.",
    "Created an attachment (id\u003d56095)\nReplacement testcase class\n\nReplace the version of MoreOutputLocationManagerTests in the patch provided with the previous comment with this one. This version uses the correct outputlocationmanager (although there\u0027s no difference in impls, this one was meant to be used instead)",
    "mmm, i applied all the patches then ran the tests, this test failed for me:\n\ntestAjStateDeleteResourcesInInputDir\n\nfailed with:\njunit.framework.AssertionFailedError: expected state to have resource inDirResource.txtbut it did not\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.assertTrue(Assert.java:20)\n\tat org.aspectj.systemtest.incremental.tools.MoreOutputLocationManagerTests.testAjStateDeleteResourcesInInputDir(MoreOutputLocationManagerTests.java:264)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\nwhat did i do wrong?",
    "Created an attachment (id\u003d56280)\ntest files that were missing from the previous patches\n\nOooops - yes, the previous attachments did not contain the text files needed for this test. This attachment contains the two missing resources:\n\n- inDirResource.txt - copy to tests\\multiIncremental\\inpathTesting\\base\\injarBin\\pkg\n\n- inpathResource.txt - copy to tests\\multiIncremental\\inpathTesting\\origInpathClass",
    "tests now pass. patches in.\niplog",
    "This fix is now available in AJDT 1.5.0.200701100718 for Eclipse 3.3M4 .\n",
    "fix available in latest AJ builds too."
  ],
  "commentCreationDates": [
    "2006-12-02T00:32:21+01:00",
    "2006-12-18T17:15:22+01:00",
    "2006-12-18T17:17:14+01:00",
    "2006-12-18T17:22:38+01:00",
    "2006-12-21T17:43:40+01:00",
    "2006-12-22T08:43:51+01:00",
    "2006-12-22T12:50:31+01:00",
    "2006-12-22T13:15:29+01:00",
    "2006-12-22T14:10:00+01:00",
    "2006-12-22T17:44:19+01:00",
    "2007-01-02T11:50:43+01:00",
    "2007-01-09T09:45:32+01:00",
    "2007-01-10T13:08:28+01:00",
    "2007-01-29T10:59:47+01:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "message": "expected state to have resource inDirResource.txtbut it did not",
      "elements": [
        {
          "method": "junit.framework.Assert.fail",
          "source": "Assert.java:47"
        },
        {
          "method": "junit.framework.Assert.assertTrue",
          "source": "Assert.java:20"
        },
        {
          "method": "org.aspectj.systemtest.incremental.tools.MoreOutputLocationManagerTests.testAjStateDeleteResourcesInInputDir",
          "source": "MoreOutputLocationManagerTests.java:264"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3TestReference.java:128"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:38"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 0,
      "commentIndex": 9,
      "bugId": "166580",
      "date": "2006-12-22T17:44:19+01:00",
      "product": "AspectJ",
      "component": "Build",
      "severity": "normal"
    }
  ],
  "groupId": "166580",
  "bugId": "166580",
  "date": "2006-12-02T00:32:21+01:00",
  "product": "AspectJ",
  "component": "Build",
  "severity": "normal"
}