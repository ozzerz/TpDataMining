{
  "comments": [
    "When switching between two different types of editor (ie: a plugin.xml editor\nand a java editor), there is visible flicker in the coolbar and a noticeable\ndelay as the cool items are updated. The same flicker and delay can be observed\nin the toolbar of the console view when switching between consoles. \n\nBoth appear to be due to SubContributionManager. This should be investigated\nfurther.",
    "no big deal Stefan but please use performance as a keyword (i.e. not a component\n[performance] in the subject)",
    "Sorry. :-) I\u0027ll try to remember.",
    "Why do you believe this is caused by SubContributionManager?  It sounds like\nyou\u0027ve done some investigation further than what is described here.  Would you\nbe able to share that information?\n\nFlicker in the cool bars is typically a problem with the \"setRedraw\" method on\nControl.  This is generally a more pronounced problem on X Windows, as mapping\nand unmapping widgets automatically forces a redraw.\n",
    "When working on the component framework, I observed that SubActionBars was\nrunning much slower than I would have expected (in the activate/deactivate code)\nand it caused considerable flicker when using toolbars/coolbars. \n\nThis is just a suggestion to investigate why. SubContributionManager is just a\nhunch.\n",
    "Created an attachment (id\u003d20920)\npatch to jface\n\nAdds the following optimizations:\n- ActionContributionItem images get disposed with the contribution item rather\nthan its widgets\n- MenuManager lazily updates its children when they become visible\n- Avoids calls to SWT methods that reach to the OS\n",
    "Created an attachment (id\u003d20921)\npatch to the workbench\n\nUpdates the workbench to take advantage of the MenuManager changes.\n\nImproves perspective switching by about 10% on my machine. Part activation\nshould also be faster (haven\u0027t measured it yet)",
    "Tod: this is the PR we were discussing.",
    "Nick this was the one I brought up to you. Stefan has a fix that will great\nreduce our menu creation but may cause a regression for the empty sub menu case.\nI\u0027ll let you guys sort it out...",
    "Actually, this patch seems to have slowed down actually opening menus. Will fix.",
    "re: comment 9\n\nFalse alarm: it\u0027s no slower than before -- it just seemed slower because of the\noverhead of my profiler.",
    "Created an attachment (id\u003d21010)\nSlightly faster jface patch\n\nI just tested part activation. Without the patch, it takes 210ms to switch\nbetween the manifest editor and the java editor. With the patch, it takes\n106ms. Measured with an instrumenting profiler so there\u0027s a large error here,\nbut the improvement is significant.",
    "I instrumented the code with println and System.currentTimeMillis.  I tested\nthis on Motif.  I used the Java perspective, and had \"link with editor\" turned\non in the package explorer.\n\nI did not investigate the correctness of these two patches.\n\n\nWITH PATCH:\n----------\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@135b95d)\n::: elapsedTime \u003d 91\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@e988c6)\n::: elapsedTime \u003d 79\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@135b95d)\n::: elapsedTime \u003d 140\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@e988c6)\n::: elapsedTime \u003d 83\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@135b95d)\n::: elapsedTime \u003d 99\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@e988c6)\n::: elapsedTime \u003d 111\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@135b95d)\n::: elapsedTime \u003d 100\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@e988c6)\n::: elapsedTime \u003d 67\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@135b95d)\n::: elapsedTime \u003d 132\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@e988c6)\n::: elapsedTime \u003d 109\n\nJava Editor     \u003d 91 + 140 + 99 + 100 + 132 \u003d 562 / 5 \u003d 112.4\nManifest Editor \u003d 79 + 83 + 111 + 67 + 109  \u003d 449 / 5 \u003d 89.8\n\n\nWITHOUT PATCH:\n-------------\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@1906773)\n::: elapsedTime \u003d 359\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@daa9f1)\n::: elapsedTime \u003d 138\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@1906773)\n::: elapsedTime \u003d 236\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@daa9f1)\n::: elapsedTime \u003d 149\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@1906773)\n::: elapsedTime \u003d 273\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@daa9f1)\n::: elapsedTime \u003d 131\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@1906773)\n::: elapsedTime \u003d 239\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@daa9f1)\n::: elapsedTime \u003d 131\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@1906773)\n::: elapsedTime \u003d 240\nPartStack.selectPart(org.eclipse.ui.internal.presentations.PresentablePart@daa9f1)\n::: elapsedTime \u003d 142\n\nJava Editor     \u003d 359 + 236 + 273 + 239 + 240 \u003d 1347 / 5 \u003d 269.4\nManifest Editor \u003d 138 + 149 + 131 + 131 + 142 \u003d 691 / 5  \u003d 138.2\n\n\nIMPROVEMENT:\n-----------\nJava Editor     \u003d 112.4 / 269.4 \u003d 41.7% of total (58.3% faster)\nManifest Editor \u003d 89.8 / 138.2  \u003d 65.0% of total (35.0% faster)\n",
    "We used to have to update the menus eagerly in order for accelerators to work,\nwhich may still be an issue for standalone JFace apps.  Doug, does the new\ncommands work change the situation for standalone JFace apps?\n\nOtherwise, the patch looks OK to me.  Should probably do similarly for updating\nimages in the MenuItem case.\n\nFor the case where all items in a menu are disabled, we don\u0027t currently disable\nthe parent item, so that should not be an issue.  E.g. try Navigate \u003e Go To or\nNavigate \u003e Show In from the Debug view.\n",
    "Actually, if the cost of getImage() is non-negligable compared to the cost of\nsetImage, then we should not do the MenuItem case, since flicker is not\nnoticeable there unless the menu is showing during the update (a rare case).\n\n",
    "Yes, it still applies to the stand-alone JFace case, to any case in the\nworkbench where the user defines an accelerator using the deprecated mechanisms\n(and it does not conflict with a command-defined accelerator), and it also\napplies to the key bindings Ctrl+Shift+[0-9A-F] on GTK+.\n\nI suppose we would need to detect these cases, and make sure that these kinds of\nitems are updated appropriately ... with the awareness that the command\narchitecture can change its set of bindings at any time.",
    "Re: comment 14\n\ngetImage is basically free (it just returns a pointer), whereas setImage is\nexpensive (it calls out to the OS).\n\nRe: comment 13\n\nThe potential regression involves empty submenus (ones with either no\ncontribution items or filled with contributions that do not create any widgets).\nEntirely-disabled submenus should be unchanged.\n",
    "Added a performance test for switching between a java editor and a plugin.xml\neditor. Backported it to the 3.0.1 stream and committed it.",
    "Committed patch to head.\n\nAlso added new JFace tests:\n- A test for the potential regression mentioned in comment 16 (it wasn\u0027t\nactually a problem).\n- A regression test for lazy population of MenuManager.\n",
    "re: comment #17, I think it needs to be backported to the 3.0 stream as this is\nthe one we compared to for 3.1.\n\nTod is that correct.",
    "I thought we agreed that this patch could not be committed as-is, because it\nwould break the standalone SWT+JFace use of accelerators.\n",
    "Yes - it needs to be the perf_30 stream",
    "Re: comment 20\n\nPlease explain in more detail what may be broken re: accelerators. I\u0027d like to\nwrite JUnit tests and fix the breakage, if any.\n",
    "The scenario is:\n- code adds an action with an explicit accelerator, e.g.\nsaveAction.setText(\"Save@Ctrl+S\");\n- action is added to a menu or submenu\n- the MenuItem for it needs to be created eagerly for the accelerator to work\n- if menus are created lazily, then this won\u0027t happen",
    "The patch for this bug caused a regression with    \nIWorkbenchWindowPulldownDelegates (Bug 105936).    \n   \nHas the accelerator case been addressed?  If not, then this might account for \na post I\u0027ve seen on the newsgroups.... \n   ",
    "Unfortunately, I think we might want to consider rolling back all of these    \nchanges for 3.2 M1.  Stefan made these changes, but unfortunately he isn\u0027t the    \none looking after [Contributions] or [Coolbars] and isn\u0027t going to be on our \nteam anymore.  We have known this area of code to be brittle, and so further \nsubtle breakages may exist.  And, there are other issues (see comment #23, for \nexample).  \n ",
    "The accelerators can be fixed. The performance improvement is worth the effort\n(50% faster focus changes is not a small gain). Let\u0027s try to fix the bug without\nlosing the performance improvements.\n\nJust because I\u0027m not paid to work on Eclipse anymore doesn\u0027t mean I intend to\nignore it. I still love Eclipse. :-) It just means it\u0027ll take a bit longer,\nsince I\u0027m now fixing bugs in my spare time.\n",
    "If you look at our performance results the perspective switching is now about\n50% faster - this is a significant improvement for some of the common but\ncomplicated perspectives like the Java perspective.\n\nStefan is still allocated time to work on Eclipse - Stefan if you want to give\nthis to Paul and help get him going please feel free.",
    "Created an attachment (id\u003d25672)\nJFace rollback patch\n\nRollback to the JFace changes",
    "Created an attachment (id\u003d25673)\nWorkbench rollback patch\n",
    "Comment #27 was about perspective switching which this bug is not about. Stefan\nis there a performance test where we can determine if this is faster or not?",
    "I\u0027m going to rollback these changes until after 3.1 M1.  Then we can hopefully \napply something that won\u0027t break accelerators. \n ",
    "The rollback changes to ActionContributionItem and MenuManager are currently\ncausing the MenuManagerTest.testLazyMenuCreation to fail on Windows.\n\njunit.framework.AssertionFailedError: Menu has wrong number of MenuItems\nexpected:\u003c0\u003e but was:\u003c6\u003e\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.failNotEquals(Assert.java:282)\n\tat junit.framework.Assert.assertEquals(Assert.java:64)\n\tat junit.framework.Assert.assertEquals(Assert.java:201)\n\tat\norg.eclipse.jface.tests.action.MenuManagerTest.assertChildWidgetCount(MenuManagerTest.java:248)\n\tat\norg.eclipse.jface.tests.action.MenuManagerTest.testLazyMenuCreation(MenuManagerTest.java:195)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat\norg.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:57)\n\tat\norg.eclipse.pde.internal.junit.runtime.UITestApplication$1.run(UITestApplication.java:99)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3114)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2768)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1734)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1698)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:367)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)\n\tat\norg.eclipse.pde.internal.junit.runtime.UITestApplication.run(UITestApplication.java:39)\n\tat\norg.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:376)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:163)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:334)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:278)\n\tat org.eclipse.core.launcher.Main.run(Main.java:973)\n\tat org.eclipse.core.launcher.Main.main(Main.java:948)\n\n",
    "I have rolled back the test suites on HEAD.... ",
    "... and on the 3.0.1 perf stream .... ",
    "Yes, the editor switching test for switching between the java and PDE editors\nshould be 50% faster (see comment 12), but that test was added with this patch\nand may have been rolled back.\n\nThis also sped up the perspective switching tests, but I originally benchmarked\nthis without the new presentation optimizations. At the time, the perspective\nswitching tests were about 10% faster, but we don\u0027t yet have a test for two\nperspectives with wildly different action sets. I\u0027d expect most of the tests for\nswitching and opening perspectives to be faster with the patch, but it\u0027s hard to\nsay by how much with the current code. \n",
    "This is the test that should show the biggest improvement with the patch:\n\nperformance.EditorSwitchTest#testEditorSwitch:1.java,plugin.xml()\n",
    "Moving Dougs bugs",
    "Assigning to component owner\nPW\n",
    "This should be fixed or close out in 3.4\nPW\n"
  ],
  "commentCreationDates": [
    "2005-04-05T21:23:10+02:00",
    "2005-04-05T21:37:01+02:00",
    "2005-04-05T22:12:00+02:00",
    "2005-04-06T16:29:35+02:00",
    "2005-04-06T20:11:42+02:00",
    "2005-05-11T03:19:56+02:00",
    "2005-05-11T03:23:00+02:00",
    "2005-05-11T21:16:28+02:00",
    "2005-05-11T21:19:14+02:00",
    "2005-05-11T21:57:05+02:00",
    "2005-05-11T22:20:29+02:00",
    "2005-05-11T22:38:25+02:00",
    "2005-05-12T16:24:27+02:00",
    "2005-05-12T16:34:11+02:00",
    "2005-05-12T16:41:11+02:00",
    "2005-05-12T16:41:58+02:00",
    "2005-05-12T18:33:32+02:00",
    "2005-07-08T19:40:43+02:00",
    "2005-07-08T23:22:59+02:00",
    "2005-07-11T17:39:19+02:00",
    "2005-07-11T18:43:57+02:00",
    "2005-07-11T18:51:34+02:00",
    "2005-07-11T23:01:42+02:00",
    "2005-07-11T23:19:13+02:00",
    "2005-08-03T20:28:57+02:00",
    "2005-08-04T00:18:23+02:00",
    "2005-08-04T03:15:42+02:00",
    "2005-08-04T12:52:59+02:00",
    "2005-08-04T16:01:48+02:00",
    "2005-08-04T16:02:19+02:00",
    "2005-08-04T16:06:55+02:00",
    "2005-08-04T20:55:24+02:00",
    "2005-08-05T15:46:44+02:00",
    "2005-08-05T16:10:24+02:00",
    "2005-08-05T16:16:02+02:00",
    "2005-08-05T23:40:16+02:00",
    "2005-08-05T23:44:31+02:00",
    "2006-04-21T19:56:48+02:00",
    "2007-04-06T01:04:13+02:00",
    "2007-06-21T17:26:23+02:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "message": "Menu has wrong number of MenuItems expected:\u003c0\u003e but was:\u003c6\u003e",
      "elements": [
        {
          "method": "junit.framework.Assert.fail",
          "source": "Assert.java:47"
        },
        {
          "method": "junit.framework.Assert.failNotEquals",
          "source": "Assert.java:282"
        },
        {
          "method": "junit.framework.Assert.assertEquals",
          "source": "Assert.java:64"
        },
        {
          "method": "junit.framework.Assert.assertEquals",
          "source": "Assert.java:201"
        },
        {
          "method": "org.eclipse.jface.tests.action.MenuManagerTest.assertChildWidgetCount",
          "source": "MenuManagerTest.java:248"
        },
        {
          "method": "org.eclipse.jface.tests.action.MenuManagerTest.testLazyMenuCreation",
          "source": "MenuManagerTest.java:195"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:478"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:344"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:57"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run",
          "source": "UITestApplication.java:99"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:123"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:3114"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2768"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1734"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1698"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:367"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:143"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:103"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication.run",
          "source": "UITestApplication.java:39"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:226"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:376"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:163"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:334"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:278"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:973"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:948"
        }
      ],
      "number": 0,
      "commentIndex": 32,
      "bugId": "90355",
      "date": "2005-08-05T15:46:44+02:00",
      "product": "Platform",
      "component": "UI",
      "severity": "enhancement"
    }
  ],
  "groupId": "90355",
  "bugId": "90355",
  "date": "2005-04-05T21:23:10+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "enhancement"
}