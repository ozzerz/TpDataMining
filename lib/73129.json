{
  "comments": [
    "I am debugging a program with KeyStore with BouncyCastleProvider using R3.0. I\nput the BouncyCastle\u0027s package into the jre/lib/ext/ and change file\njava.security to support BouncyCastleProvider.\n\nNow I run my program to verify password on a UBER-type keystore. And it runs OK\nwith result showing the password valided. Now I want to add the \"plugin.jar\"\nwhich is under the directory jre/lib to the project. (I don\u0027t know why the\n\"plugin.jar\" is not belong to the default system libraries.) So I have to turn\noff the \"Use default system libraries\" option in the \"Edit JRE\" dialog. Now I\nchange my mind and do not add the \"plugin.jar\" into project but still leave the\n\"Use default system libraries\" option off. After \"OK\"ing to lots of dialog, I\nrun my program again now I get different result!! OK, I re-open the \"Edit JRE\"\nto turn on the \"Use default system libraries\" option and run the program again.\nAnd I get the right result!\n\nSo just turning the \"Use default system libraries\" option off or on make a big\ndifference?? I don\u0027t understand and never understand so I open Eclipse 3.0 M7 to\n test such steps. But M7 works well without error. Maybe it\u0027s the problem of my\nEclipse R3.0\u0027s JDK and workspace. So I create another brand-new Eclipse R3.0\nwith a new workspace and test the same steps. But without luck error ocurrs.",
    "/*******************************************************************************\n * Copyright (c) 2002, 2004 IDSignet.\n * All rights reserved.\n * http://www.idsignet.com\n *\n * Created on Sep 2, 2004 \n *******************************************************************************/\nimport java.io.FileInputStream;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\n\n/**\n * @author Janyckee Joz\n */\npublic class IDSignature {\n    /*\n     * @see com.idsignet.desktop.keytool.wizards.recover.RecoverPage#getKeystore\n     */\n    public static KeyStore getKeystore(String store, String pass) {\n        boolean canOpen \u003d false;\n        KeyStore keyStore \u003d null;\n\n        /*\n         * Try to open the keystore file, by testing all the 3 supported file\n         * formats.\n         */\n\n        try {\n            keyStore \u003d KeyStore.getInstance(\"UBER\", \"BC\");\n            FileInputStream fis \u003d new FileInputStream(store);\n            keyStore.load(fis, pass.toCharArray());\n            canOpen \u003d true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"USER exception.\");\n        }\n\n        if (!canOpen) {\n            try {\n                keyStore \u003d KeyStore.getInstance(\"PKCS12\", \"BC\");\n                FileInputStream fis \u003d new FileInputStream(store);\n                keyStore.load(fis, pass.toCharArray());\n                canOpen \u003d true;\n            } catch (Exception e) {\n                e.printStackTrace();\n                System.out.println(\"PKCS12 exception.\");\n            }\n        }\n\n        if (!canOpen) {\n            try {\n                keyStore \u003d KeyStore.getInstance(\"JKS\");\n                FileInputStream fis \u003d new FileInputStream(store);\n                keyStore.load(fis, pass.toCharArray());\n                canOpen \u003d true;\n            } catch (Exception e) {\n                e.printStackTrace();\n                System.out.println(\"JKS exception.\");\n            }\n        }\n\n        if (canOpen)\n            return keyStore;\n\n        return null;\n    }\n\n    /*\n     * @see\ncom.idsignet.desktop.keytool.wizards.recover.SelectKeyPage#setKeystore(KeyStore)\n     */\n    public static String[] getKeyAliasList(KeyStore ks) {\n        List keyList \u003d new ArrayList();\n        if (ks !\u003d null) {\n            try {\n                Enumeration enum \u003d ks.aliases();\n                while (enum.hasMoreElements()) {\n                    String element \u003d (String) enum.nextElement();\n                    if (ks.isKeyEntry(element))\n                        keyList.add(element);\n                }\n            } catch (Exception e) {\n            }\n        }\n        Object[] keyObjects \u003d keyList.toArray();\n        String[] aliasList \u003d new String[keyList.size()];\n        for (int i \u003d 0; i \u003c keyObjects.length; i++) {\n            aliasList[i] \u003d (String) keyObjects[i];\n        }\n        return aliasList;\n    }\n    \n    /*\n     * @see\ncom.idsignet.desktop.formdesigner.model.signatur.XMLSignatureManager#verifyPassword(String,\nString)\n     */\n\tpublic static boolean verifyKeyPassword(KeyStore ks, String alias, String pwd) {\n\t    if (ks \u003d\u003d null) {\n\t        return false;\n\t    }\n        boolean ret \u003d false;\n        /**\n         * Make sure that we can fetch the private key out of the keystore with\n         * the password provided. If not, then the password is not good.\n         * \u003cp\u003e\n         * Notes:\n         * \u003cp\u003e\n         * This scheme does not work with the current implementation of PKCS12,\n         * as the default BC implementation does not care about key password.\n         */\n        if (pwd !\u003d null) {\n            try {\n                ks.getKey(alias, pwd.toCharArray());\n                ret \u003d true;\n            } catch (NoSuchAlgorithmException e) {\n                ret \u003d false;\n            } catch (UnrecoverableKeyException e) {\n                ret \u003d false;\n            } catch (KeyStoreException e) {\n                ret \u003d false;\n            }\n\n        }\n        return ret;\n    }\n\n\tpublic static boolean verifyKeyPassword(String ks, String ksPassword, String\nkeyAlias, String keyPassword) {\n\t    KeyStore keystore \u003d getKeystore(ks, ksPassword);\n\t    System.out.println(keystore);\n\t    return verifyKeyPassword(keystore, keyAlias, keyPassword);\n\t}\n\t\n\tpublic static void main(String[] args) {\n        System.out.println(verifyKeyPassword(\"user.p12\", \"aaa\", \"user\", \"aaa\"));\n    }\n\n}",
    "Can you be more specific on what doesn\u0027t work ? Are you getting an exception \nat runtime ?\n\nMoving to JDT Debug for comments.",
    "When running with the \"Use default system libraries\" option ON, the console:\n------------------------------------------\njava.security.KeyStore@1b8e059\ntrue\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nWhen running with the \"Use default system libraries\" option OFF, the console:\n------------------------------------------\njava.io.IOException: Error initialising store of key store.\n\tat org.bouncycastle.jce.provider.JDKKeyStore.makePBECipher(JDKKeyStore.java:470)\n\tat\norg.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore.engineLoad(JDKKeyStore.java:982)\n\tat java.security.KeyStore.load(KeyStore.java:652)\n\tat IDSignature.getKeystore(IDSignature.java:36)\n\tat IDSignature.verifyKeyPassword(IDSignature.java:131)\n\tat IDSignature.main(IDSignature.java:137)\nUSER exception.\njava.io.IOException: stream does not represent a PKCS12 key store\n\tat\norg.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(JDKPKCS12KeyStore.java:660)\n\tat java.security.KeyStore.load(KeyStore.java:652)\n\tat IDSignature.getKeystore(IDSignature.java:47)\n\tat IDSignature.verifyKeyPassword(IDSignature.java:131)\n\tat IDSignature.main(IDSignature.java:137)\nPKCS12 exception.\njava.io.IOException: Invalid keystore format\n\tat sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:612)\n\tat java.security.KeyStore.load(KeyStore.java:652)\n\tat IDSignature.getKeystore(IDSignature.java:59)\n\tat IDSignature.verifyKeyPassword(IDSignature.java:131)\n\tat IDSignature.main(IDSignature.java:137)\nJKS exception.\nnull\nfalse\n",
    "What is \"plugin.jar\"? The default libraries for a JRE are those on \nthe \"sun.boot.class.path\" system property of the VM.\n\nHowever, when you turn off the \"default libraries\" option an explicit bootpath \nwill be specified when you launch using the JRE. This can cause problems with \nsecurity providers.",
    "\"plugin.jar\" contain the \"netscape.javascript.*\" and things like that. I am\nusing Linux GTK, Sun JDK1.4.2. And \"plugin.jar\" is in my \"jre/lib\". It seems\nthat it\u0027s not named as \"plugin.jar\" in previous or other version.\n\nAnd using Eclipse 3.0 M7, it runs OK with the \"default libraries\" off. But using\nEclipse R3.0, it fails.",
    "This may be the expected behavior - i.e. does an explicit bootpath of all the \nlibraries assocaited with the JRE cause trouble from the command line (i.e. \nlaunching externally from Eclipse)? To see the command line that Eclispe \ngenerates, launch the program from Eclipse, select the debug target/process \nand see its \"Properties\" (context menu).",
    "OK. Thanks. Now I get the point. There are bugs of Eclipse M7 which always uses\ncommand such as:\n /home/zhourj/bin/j2sdk1.4.2/jre/bin/java -classpath /home/zhourj/workspace/test\n-Xdebug -Xnoagent -Djava.compiler\u003dNONE\n-Xrunjdwp:transport\u003ddt_socket,suspend\u003dy,address\u003dlocalhost:39213 IDSignature\nno matter whether I turn the \"Use default system libraries\" option off or on. \n\nThe Eclipse R3.0 does the right things. It\u0027s should NOT mark as a bug. Sorry\n\nAnd I still  suggest that the \"plugin.jar\" should be on the list of \"default\nsystem libraries\"(package of netscape.* and others. And the plugin.jar is under\njre/lib, but it\u0027s not treated as default library. I have spent some time\nwondering why.). ",
    "Since we didn\u0027t explicitly fix this bug, I\u0027m going to re-open it to mark \nas \"works for me\".",
    "works for me."
  ],
  "commentCreationDates": [
    "2004-09-02T10:00:53+02:00",
    "2004-09-02T10:02:40+02:00",
    "2004-09-02T10:40:42+02:00",
    "2004-09-02T10:53:04+02:00",
    "2004-09-02T16:47:55+02:00",
    "2004-09-03T03:19:08+02:00",
    "2004-09-10T17:31:51+02:00",
    "2004-09-13T05:18:14+02:00",
    "2004-09-13T15:13:53+02:00",
    "2004-09-13T15:14:20+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.IOException",
      "message": "Error initialising store of key store.",
      "elements": [
        {
          "method": "org.bouncycastle.jce.provider.JDKKeyStore.makePBECipher",
          "source": "JDKKeyStore.java:470"
        },
        {
          "method": "org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore.engineLoad",
          "source": "JDKKeyStore.java:982"
        },
        {
          "method": "java.security.KeyStore.load",
          "source": "KeyStore.java:652"
        },
        {
          "method": "IDSignature.getKeystore",
          "source": "IDSignature.java:36"
        },
        {
          "method": "IDSignature.verifyKeyPassword",
          "source": "IDSignature.java:131"
        },
        {
          "method": "IDSignature.main",
          "source": "IDSignature.java:137"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "73129",
      "date": "2004-09-02T10:53:04+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "enhancement"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "stream does not represent a PKCS12 key store",
      "elements": [
        {
          "method": "org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad",
          "source": "JDKPKCS12KeyStore.java:660"
        },
        {
          "method": "java.security.KeyStore.load",
          "source": "KeyStore.java:652"
        },
        {
          "method": "IDSignature.getKeystore",
          "source": "IDSignature.java:47"
        },
        {
          "method": "IDSignature.verifyKeyPassword",
          "source": "IDSignature.java:131"
        },
        {
          "method": "IDSignature.main",
          "source": "IDSignature.java:137"
        }
      ],
      "number": 1,
      "commentIndex": 3,
      "bugId": "73129",
      "date": "2004-09-02T10:53:04+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "enhancement"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "Invalid keystore form",
      "elements": [
        {
          "method": "atsun.security.provider.JavaKeyStore.engineLoad",
          "source": "JavaKeyStore.java:612"
        },
        {
          "method": "java.security.KeyStore.load",
          "source": "KeyStore.java:652"
        },
        {
          "method": "IDSignature.getKeystore",
          "source": "IDSignature.java:59"
        },
        {
          "method": "IDSignature.verifyKeyPassword",
          "source": "IDSignature.java:131"
        },
        {
          "method": "IDSignature.main",
          "source": "IDSignature.java:137"
        }
      ],
      "number": 2,
      "commentIndex": 3,
      "bugId": "73129",
      "date": "2004-09-02T10:53:04+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "enhancement"
    }
  ],
  "groupId": "73129",
  "bugId": "73129",
  "date": "2004-09-02T10:00:53+02:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "enhancement"
}