{
  "comments": [
    "Build ID: 3.2-\n\nHep, I am getting \njava.lang.IllegalAccessError: a/A\nwhen running b.C for the following files.\nUsing suns javac it works.\n\npackage a;\nabstract class A {\n\tpublic final boolean returnTrue() {\n\t\treturn true;\n\t}\t\n}\n\npackage a;\npublic class B extends A {\n}\n\npackage b;\nimport a.B;\npublic class C extends B {\n\t\n\tpublic void test1() {\n                // works\n\t\tSystem.out.println(super.returnTrue());\n\t}\n\t\n\tpublic void test2() {\n\t\t// java.lang.IllegalAccessError: a/A\n\t\t//        at b/C.test2\n\t\t//        at b/C.main\n\t\tSystem.out.println(returnTrue());\n\t}\n\t\t\n\tpublic static void main(String[] args) {\n\t\tC c \u003d new C();\n                // works\n\t\tSystem.out.println(c.returnTrue());\n\t\tc.test1();\n\t\tc.test2();\n\t}\n}\n\nWorkaround is to declare class A public, or\nwrite super.returnTrue() everywhere. \n\nLooking at the bytecode the difference is which class returnTrue()\nshould be found/invoked in. Jview fails when it is class A. Writing super force the bytecode to have class B. I am not familiar enough to the java language to \nsay whether it is a jview bug or eclipse compiler.",
    "What version of javac are you using?\nPlease provide Eclipse compiler settings.\nReopen when requested information is available.",
    "C:/Program\\ Files/Java/jdk1.5.0_06/bin/javac.exe -source 1.3 -target 1.1 b/C.java\n\nEclipse is setup to the same source and target. Additional are\n\"Add variable attributes..\", \"Add line number...\", \"Add source name..\", and \"Preserve unused ...\" turned on.\n\n",
    "What is the compliance level for the Eclipse compiler?",
    "The compliance level is set to 1.3",
    "If you compare with javac 1.5, you should set the compliance to be 1.5 and manually set the source to 1.3 and the target to 1.1.\nThis seems to work fine.\nClosing as INVALID.",
    "Yes, it works for me too. \n\nNow, whats the difference between these settings? and were do I read about them? I only found the exact same text in the help file.\n\n",
    "(In reply to comment #6)\n\u003e Yes, it works for me too. \n\u003e Now, whats the difference between these settings? and were do I read about\n\u003e them? I only found the exact same text in the help file.\nWhat text are you talking about?\nI\u0027ll check the help and I\u0027ll try to clarify this point.",
    "\u003e\u003e Now, whats the difference between these settings?\n\u003e I\u0027ll check the help and I\u0027ll try to clarify this point.\n\nStill in 3.3:\n\n* Compiler compliance level  - Specifies the compiler compliance level. \n\n*Generated class files compatibility - Specifies the generated class file compatibility. \n\n*Source compatibility - Specifies the compatibility of the accepted source code. \n  \nThis is not clear to me at all. Please be more elaborate\n\n",
    "(In reply to comment #8)\n\u003e * Compiler compliance level  - Specifies the compiler compliance level. \nThis indicates what version of javac it corresponds to.\nCompliance 1.4 means javac 1.4.\n\n\u003e *Generated class files compatibility - Specifies the generated class file\n\u003e compatibility. \nThis is the target level. This means it corresponds to the VM you are targetting. Target 1.3 to run on a VM 1.3. However you need to use 1.3 libraries on the classpath.\n\n\u003e *Source compatibility - Specifies the compatibility of the accepted source\n\u003e code. \nThis corresponds to the source level that you want the compiler to parse. 1.4 in order to be able to handle the assert statement. 1.5 to be able to handle static imports, new for statements, generics,...\n\n\n\u003e This is not clear to me at all. Please be more elaborate\nHope this clarify it a bit\n",
    "\u003e\u003e * Compiler compliance level  - Specifies the compiler compliance level. \n\n\u003e This indicates what version of javac it corresponds to.\n\u003e Compliance 1.4 means javac 1.4.\n\nGiven say target 1.3 how does this change the classfiles? (with the samme classpath). \n\n\u003e\u003e *Generated class files compatibility - Specifies the generated class file\n\u003e\u003e compatibility. \n\n\u003e This is the target level. This means it corresponds to the VM you are\n\u003e targetting. Target 1.3 to run on a VM 1.3. However you need to use 1.3\n\u003e libraries on the classpath.\n\nSo if I dont change the classpath this will change nothing? Or is this the languange specification setting? Say target was 1.1, but I had 1.5 in classpath, then calls to stringbuffer.append(stringbuffer) is still generated?\n\n\n\u003e\u003e *Source compatibility - Specifies the compatibility of the accepted source\n\u003e\u003e code. \n\n\u003e This corresponds to the source level that you want the compiler to parse. 1.4\n\u003e in order to be able to handle the assert statement. 1.5 to be able to handle\n\u003e static imports, new for statements, generics,...\n\nIs it correct if I say that this does not change the output classes (if it compiles)? Hmm, I am not sure why this is under compiler, as this is something I want my editor to tell me (e.i mark the \"errors\").\n\n\n",
    "The compliance level set to 1.3 means that the target level is 1.1. This affects some method invocation resolution. The declaring class is set differently. This is  exactly what is causing you grief.\nIf you use javac 1.3 you should end up with the same issue.",
    "Hmm, you didnt answered all 3 questions. So here is a 4th:\n\n\u003e The compliance level set to 1.3 means that the target level is 1.1.\n\nAre you implying that if I set target manually then \ncompliance level is ignored?",
    "(In reply to comment #12)\n\u003e Hmm, you didnt answered all 3 questions. So here is a 4th:\nI don\u0027t know exactly what kind of answers you expect. \n\n\u003e The compliance level set to 1.3 means that the target level is 1.1.\n\u003e Are you implying that if I set target manually then \n\u003e compliance level is ignored?\nThe compliance level is not ignored, but you can change the default target level. Each compliance level comes with a default source and target level. These default values can be overriden.\n\nYour problem is that you are not comparing the same thing. In comment 2, you show a command line that you use to run javac.\nIf you don\u0027t set the compliance level to 1.5 and the target to 1.1 and the source to 1.3, you cannot compare our results with what javac produces according to comment 2.\n\nWhat do you expect? I reopen this bug?"
  ],
  "commentCreationDates": [
    "2006-12-12T16:39:37+01:00",
    "2006-12-13T02:03:38+01:00",
    "2006-12-13T11:10:11+01:00",
    "2006-12-13T16:10:27+01:00",
    "2006-12-13T16:31:46+01:00",
    "2006-12-15T02:11:14+01:00",
    "2006-12-18T14:04:46+01:00",
    "2006-12-19T01:19:35+01:00",
    "2007-07-12T22:24:18+02:00",
    "2007-07-13T02:50:05+02:00",
    "2007-07-13T12:11:31+02:00",
    "2007-07-13T14:30:40+02:00",
    "2007-07-13T17:08:55+02:00",
    "2007-07-13T17:35:01+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalAccessError",
      "message": "a/A   //        at b/C.test2   //",
      "elements": [
        {
          "method": "b.C.mainSystem.out.println",
          "source": "returnTrue()"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "167676",
      "date": "2006-12-12T16:39:37+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "167676",
  "bugId": "167676",
  "date": "2006-12-12T16:39:37+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}