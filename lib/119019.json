{
  "comments": [
    "This bug was raised on the aspectj-users list:\n\n-------------------------------------------------------------------------------\n\nConsider the following:\n\n\n[code]\npackage bar;\n\n\npublic class TargetITDClass {}\n\n\n\npackage foo;\n\n\nimport bar.TargetClass;\n\n\npublic aspect ITDWithACall {\n    public void TargetClass.doSomething(String param) {\n        String changedParam\u003d changeParam(param);\n    }\n\n\n    \u003cmodifiers\u003e String changeParam(String param) { /// \u003c\u003d HERE\n        return param + \"-modified\";\n    }\n}\n\n\n[/code]\n\n\nSo when changing the modifiers of the changeParam() method the following behavior is seen:\n\n\n1/ non-static modifier: correctly reported that you cannot make a static reference to the non-static method changeParam\n\n2/ public static modifiers: everything works as expected\n\n\n3/ !public (anything else than public) static modifiers: results in the following exception:\n\n\n[stack]\njava.lang.NullPointerException\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.manageSyntheticAccessIfNecessary(MessageSend.java:230)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:60)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.analyseCode(LocalDeclaration.java:49)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:84)\nat org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.analyseCode(InterTypeMethodDeclaration.java:79)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:732)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:271)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:80)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:517)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:810)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null\n[/stack]\n\n\nIMO this should result in a compilation error with the error changeParam is not accessible from the context (or something like this).\n\n--------------------------------------------------------------------------------\n\nI\u0027ve recreated this with the latest aj build and will attach the failing testcase.\n\nNote that with java if something isn\u0027t accessible it gives out a compiler error  of the form:\n\n\"The method changeParm(String) from the type C is not visible\"",
    "Created an attachment (id\u003d31018)\ntestcase patch\n\nPatch containing failing testcase.\n\nApply to the tests project.",
    "The error messages like \"The method changeParm(String) from the type C is not visible\" and \"Cannot make a static reference to the non-static method changeParam(String) from the type ITDWithACall\" come from org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(..) which is called from org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodSend.resolveMethodBinding(..).\n\nIn the case which reports the NPE we return the MethodBinding for \"java.lang.String changeParam(java.lang.String)\", however, in the cases which report errors we return ProblemMethodBinding\u0027s. Since we return with a MethodBinding we continue along until we reach the NPE. \n\nThe code which is causing the NPE is:\n\nSourceTypeBinding currentCompatibleType \u003d (SouurceTypeBinding)enclosingSourceType.enclosingTypeAt((bits \u0026 DepthMASK) \u003e\u003e DepthSHIFT);\nsyntheticAccessor\u003dcurrentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());\n\nand it\u0027s the currentCompatibleType which is null.\n\nThis all happens if the modifier is protected i.e. we have\n\n    protected static String changeParam(String param) { \n        return param + \"-modified\";\n    }\n\nIf, however, we have\n\n    private static String changeParam(String param) { \n        return param + \"-modified\";\n    }\n\nthen everything compiles fine. This implies that we shouldn\u0027t return an error in the case of protected. \n\nAlso, if the modifier \"protected\" is removed and we have:\n\n    static String changeParam(String param) { \n        return param + \"-modified\";\n    }\n\nthen again everything compiles fine.\n\nLooking at the documentation, \"inter-type methods and constructors execute in the context of the target type, they inherit the scope of the declaring aspect\", so the fix should not be to return an error, it should be to cope better with the case when the method is protected.\n\nLooking again at the code for MessageSend.manageSyntheticAccessIfNecessary(..) (the method where the NPE is happening) in the case when the methodbinding is private there is an AspectJ Extension....maybe there needs to be something else done in the case of the methodbinding being protected.",
    "fix is almost ready to check in - had to modify the compiler to correctly use Scope.invocationType() rather than Scope.enclosingSourceType() since an ITD was involved.",
    "fixes checked in - waiting on build",
    "fix available."
  ],
  "commentCreationDates": [
    "2005-12-02T11:43:38+01:00",
    "2005-12-02T11:55:10+01:00",
    "2005-12-02T15:02:12+01:00",
    "2005-12-02T16:10:10+01:00",
    "2005-12-04T13:41:46+01:00",
    "2005-12-05T08:09:26+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.manageSyntheticAccessIfNecessary",
          "source": "MessageSend.java:230"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode",
          "source": "MessageSend.java:60"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.analyseCode",
          "source": "LocalDeclaration.java:49"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode",
          "source": "MethodDeclaration.java:84"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.analyseCode",
          "source": "InterTypeMethodDeclaration.java:79"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode",
          "source": "TypeDeclaration.java:732"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode",
          "source": "TypeDeclaration.java:271"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode",
          "source": "CompilationUnitDeclaration.java:80"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:517"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:329"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:810"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:254"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:163"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "119019",
      "date": "2005-12-02T11:43:38+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "119019",
  "bugId": "119019",
  "date": "2005-12-02T11:43:38+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}