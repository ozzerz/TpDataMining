{
  "comments": [
    "3.0 M4\n\nAfter editing for a while, the text hovers won\u0027t appear any longer. Other hovers\nstill work (annotation, overview), and other editors are not affected. Closing\nand reopening fixes the problem.\n\nThere is an exception on stdout / stderr, but not logged:\n\njava.lang.InterruptedException\n        at\norg.eclipse.jdt.internal.codeassist.SelectionEngine.\u003cinit\u003e(SelectionEngine.java:125)\n        at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:168)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:272)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:266)\n        at\norg.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo(Unknown\nSource)\n        at\norg.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo(Unknown\nSource)\n        at\norg.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo(Unknown\nSource)\n        at\norg.eclipse.jface.text.TextViewerHoverManager$2.run(TextViewerHoverManager.java:119)",
    "InterruptedException happens in J Core land but ICodeAssist.codeSelect does not\nspecify to throw an InterruptedException.",
    "This isn\u0027t sent by JDT Core, but rather by thread support:\n\n * Thrown when a thread is waiting, sleeping, or otherwise paused for\n * a long time and another thread interrupts it using the\n * \u003ccode\u003einterrupt\u003c/code\u003e  method in class \u003ccode\u003eThread\u003c/code\u003e. \n\nBack to UI.",
    "Philippe, to me this looks like a bug in the VM, stack trace or maybe compiler:\nwe don\u0027t have any wait, sleep, join or similar in our code and since\nInterruptedException is a checked exception we cannot catch it, right.\n\nCan you comment what you think of that bug.",
    "This cannot come from JDT Core but by the thread in which this action is being \nperformed. The hovering mechanism is playing in the background, so there may \nreside the issue. Aren\u0027t you creating a thread/job ?",
    "We are creating a thread. That\u0027s right. However, as Dani points out, there are \nno waits, joins, or sleeps in the code the thread executes. We just start the \nthread and let it run until it has ended. This means we don\u0027t have a chance to \ncatch the InterruptedException. If we would try, we would get a compilation \nerror.",
    "Right, but this exception comes from the threading support, not from JDT Core. \nSomeone is basically attempting to interrupt the thread activity. This cannot \ncome from JDT Core.",
    "I agree with you I just thought you might give more insight to the problem itself. ",
    "From Javadoc and lang spec it is not clear why I should get a checked\nInterruptedExcpetion if it is not declared, is it?\n",
    "We think this is a VM bug. We now protected the hover code to heal itself in\nsuch a case i.e. hover support will continue to work for that editor.\n",
    "Isn\u0027t the hovering auto-cancelling if the user starts typing again ?",
    "Yes, we send interrupt() to the thread but this does not explain why a checked\nexception is thrown by methods which don\u0027t declare it. Lower level methods which\ndeclare to throw InterruptedException could/should check the interrupted flag\nand then throw the exception, right?"
  ],
  "commentCreationDates": [
    "2003-10-13T16:27:37+02:00",
    "2003-10-13T16:41:43+02:00",
    "2003-10-14T15:45:38+02:00",
    "2003-10-14T16:34:46+02:00",
    "2003-10-14T17:10:55+02:00",
    "2003-10-15T08:59:41+02:00",
    "2003-10-15T11:58:00+02:00",
    "2003-10-15T12:04:39+02:00",
    "2003-10-15T12:06:08+02:00",
    "2003-10-15T12:35:45+02:00",
    "2003-10-15T12:44:55+02:00",
    "2003-10-15T12:51:22+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.InterruptedException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.codeassist.SelectionEngine.\u003cinit\u003e",
          "source": "SelectionEngine.java:125"
        },
        {
          "method": "org.eclipse.jdt.internal.core.Openable.codeSelect",
          "source": "Openable.java:168"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.codeSelect",
          "source": "CompilationUnit.java:272"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.codeSelect",
          "source": "CompilationUnit.java:266"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jface.text.TextViewerHoverManager$2.run",
          "source": "TextViewerHoverManager.java:119"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "44756",
      "date": "2003-10-13T16:27:37+02:00",
      "product": "JDT",
      "component": "Text",
      "severity": "normal"
    }
  ],
  "groupId": "44756",
  "bugId": "44756",
  "date": "2003-10-13T16:27:37+02:00",
  "product": "JDT",
  "component": "Text",
  "severity": "normal"
}