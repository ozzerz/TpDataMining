{
  "comments": [
    "(RC4)\n\nThis came up in the newsgroup some time ago, but I can\u0027t find a bug.\n\nThe junit view will truncate long trace messages, making comparisons of long\nassertions impossible within eclipse. If the messages are copied to the\nclipboard and then pasted into an editor, the full message is included.\n\nThe junit view should never truncate messages.",
    "Created an attachment (id\u003d24054)\nScreen shot of junit view with truncation\n",
    "Here is the full trace output if obtained via the clipboard (the screen shot has\nalready been attached to this bug):\n\njunit.framework.AssertionFailedError: \n  Unexpected method call\nsendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId\u003dsim-bkaplan.20050613.equity.INTC.32,orderId\u003dINTC-1118681624673-0,cancelId\u003d\u003cnull\u003e,accountId\u003dsim-acct1,symbol\u003dINTC,openClose\u003dOPEN,longShort\u003dLONG,state\u003dCOMPLETE,priceQualifier\u003dMARKET,price\u003d10.010000,quantity\u003d0,remainingQuantity\u003d0,fillQuantity\u003d0,fillPrice\u003d0.000000,route\u003dSIM,timestamp\u003d\u003cnull\u003e]):\n   \nsendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId\u003dsim-bkaplan.20050613.equity.INTC.32,orderId\u003dINTC-1118681624673-0,cancelId\u003d\u003cnull\u003e,accountId\u003dsim-acct1,symbol\u003dINTC,openClose\u003dOPEN,longShort\u003dLONG,state\u003dCOMPLETE,priceQualifier\u003dMARKET,price\u003d10.010000,quantity\u003d0,remainingQuantity\u003d0,fillQuantity\u003d0,fillPrice\u003d0.000000,route\u003dSIM,timestamp\u003d\u003cnull\u003e]):\nexpected: 0, actual: 1\n   \nsendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId\u003dsim-bkaplan.20050613.equity.INTC.32,orderId\u003dINTC-1118681624673-0,cancelId\u003d\u003cnull\u003e,accountId\u003dsim-acct1,symbol\u003dINTC,openClose\u003dOPEN,longShort\u003dLONG,state\u003dLIVE,priceQualifier\u003dMARKET,price\u003d10.010000,quantity\u003d0,remainingQuantity\u003d100,fillQuantity\u003d0,fillPrice\u003d0.000000,route\u003dSIM,timestamp\u003d\u003cnull\u003e]):\nexpected: 1, actual: 0\n\tat org.easymock.MockControl$4.invoke(MockControl.java:148)\n\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:44)\n\tat $Proxy10.sendOrderEvent(Unknown Source)\n\tat\norg.blackboxtrader.liquidityarbitrage.spi.omnipro.fixgate.FixgateOrderExecutionServiceGatewayApplication.onMessage(FixgateOrderExecutionServiceGatewayApplication.java:137)\n\tat\norg.blackboxtrader.liquidityarbitrage.spi.omnipro.fixgate.FixgateOrderExecutionServiceGatewayApplicationTest.testExecutionReportOrderComplete(FixgateOrderExecutionServiceGatewayApplicationTest.java:130)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat\norg.blackboxtrader.testsupport.junit.Log4jSupportTestCase.run(Log4jSupportTestCase.java:132)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n",
    "David, can you please investigate...",
    "Bug 74647 addressed this problem, but only for the first line of the trace.  The\nroot cause is in either Windows or SWT: more information at bug 77711.  There\nare two possible workarounds until 77711 is resolved:\n\n1) I could change JUnit to wrap any line of longer than 256 characters.  The\ndownside is that this would mean that the version copied to the clipboard would\nalso be wrapped.\n\n2) The user could copy to clipboard and paste in the Java Stacktrace Console (or\nsomewhere else) whenever a line gets too long.  This would maintain the original\ntrace, with the obvious downside that part of the trace remains hidden.\n\nBarry, what is the best solution for you right now?",
    "Never mind, that was a false dilemma.\n\nWe can easily wrap the lines in the view and provide an unwrapped trace for\ncopying and pasting, which is the best of both worlds.  I\u0027ll attach a patch soon.",
    "Created an attachment (id\u003d24221)\nPatch to junit plug-in\n\nThis wraps all lines that are too long to be displayed.  Choosing \"Copy Trace\"\nfrom the context menu will still copy the original, unwrapped trace.",
    "Created an attachment (id\u003d24222)\nPatch to the jdt.ui tests to prevent regression\n",
    "Tobias,\n\nCan you review at your convenience?  Thanks.",
    "Reviewed and released patch by David\n\nFixed \u003e 20050701",
    "Thanks much!",
    "You are welcome!"
  ],
  "commentCreationDates": [
    "2005-06-28T00:23:48+02:00",
    "2005-06-28T00:24:58+02:00",
    "2005-06-28T00:25:47+02:00",
    "2005-06-28T17:09:59+02:00",
    "2005-06-29T16:34:05+02:00",
    "2005-06-29T16:51:00+02:00",
    "2005-06-30T17:59:31+02:00",
    "2005-06-30T18:00:56+02:00",
    "2005-06-30T18:03:49+02:00",
    "2005-07-01T11:02:04+02:00",
    "2005-07-01T15:57:58+02:00",
    "2005-07-01T16:00:14+02:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "message": "Unexpected method call sendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId\u003dsim-bkaplan.20050613.equity.INTC.32,orderId\u003dINTC-1118681624673-0,cancelId\u003d\u003cnull\u003e,accountId\u003dsim-acct1,symbol\u003dINTC,openClose\u003dOPEN,longShort\u003dLONG,state\u003dCOMPLETE,priceQualifier\u003dMARKET,price\u003d10.010000,quantity\u003d0,remainingQuantity\u003d0,fillQuantity\u003d0,fillPrice\u003d0.000000,route\u003dSIM,timestamp\u003d\u003cnull\u003e]):     sendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId\u003dsim-bkaplan.20050613.equity.INTC.32,orderId\u003dINTC-1118681624673-0,cancelId\u003d\u003cnull\u003e,accountId\u003dsim-acct1,symbol\u003dINTC,openClose\u003dOPEN,longShort\u003dLONG,state\u003dCOMPLETE,priceQualifier\u003dMARKET,price\u003d10.010000,quantity\u003d0,remainingQuantity\u003d0,fillQuantity\u003d0,fillPrice\u003d0.000000,route\u003dSIM,timestamp\u003d\u003cnull\u003e]): expected: 0, actual: 1     sendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId\u003dsim-bkaplan.20050613.equity.INTC.32,orderId\u003dINTC-1118681624673-0,cancelId\u003d\u003cnull\u003e,accountId\u003dsim-acct1,symbol\u003dINTC,openClose\u003dOPEN,longShort\u003dLONG,state\u003dLIVE,priceQualifier\u003dMARKET,price\u003d10.010000,quantity\u003d0,remainingQuantity\u003d100,fillQuantity\u003d0,fillPrice\u003d0.000000,route\u003dSIM,timestamp\u003d\u003cnull\u003e]): expected: 1, actual: 0",
      "elements": [
        {
          "method": "org.easymock.MockControl$4.invoke",
          "source": "MockControl.java:148"
        },
        {
          "method": "org.easymock.internal.ObjectMethodsFilter.invoke",
          "source": "ObjectMethodsFilter.java:44"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "101953",
      "date": "2005-06-28T00:25:47+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "101953",
  "bugId": "101953",
  "date": "2005-06-28T00:23:48+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}