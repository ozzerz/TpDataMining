{
  "comments": [
    "The likely reason being that besides calling methods of org.eclipse.swt.graphics.GC, methods on org.eclipse.swt.widgets.Display are also called, which is not allowed in a non-UI thread.\n\n\u003d\u003d\u003d\u003d\u003d\n\nHere\u0027s the discussion from the newsgroup:\n\nDavid,\n\n- The \"Invalid Thread Access\" happens for us too, with BIRT 2.1 (LATEST).\n- Oddly, it didn\u0027t happen for us with BIRT 2.0\n\nThe stacktrace is below. Here\u0027s my take why it happens (I should probably\nenter bug report):\nSuppose we have 2 threads,\n- the regular UI thread\n- worker thread calling the Generator.build()\n\nNow:\n1. GENERALLY, SWT does allow painting (or measuring stuff) with a GC from a\nsecond thread: this means: you CAN call ANY method of GC from within a\nworker thread.\n2. BUT: You cannot create a new GC instance from the second thread like\nthis: \"new GC(display)\" because this construction calls methods of object\ndisplay.\n\nThe reason?\n- The \"display\" object which is passed is actually a \"widget\", and so the\nwidget rules apply: calling its methods can only be done from the thread\nwhere it was created (i.e. our UI thread). This applies to calls such as\n\"new GC(display)\", display.getDPI() (Ivo\u0027s problem), and in fact to all the\nmethods of class Display.\n\nOptions?\n- One option is to do new Display() from within the 2nd worker thread, but\nthis only works on Windows.\n- Another option is to do the a) \"new GC(display)\", b) display.getXXX() in\nthe UI thread, like the following pattern:\n\nin Generator.build():\n\nDisplay display \u003d Display.getCurrent();\nGC gc;\nif(display \u003d\u003d null) {\n    // Bad, no display for this thread \u003d\u003e we are not in (a) UI thread\n    display.syncExec(new Runnable() {void run() { gc \u003d new GC(display);}});\n} else {\n    gc \u003d new GC(display);\n}\n\nOR:\n\nDisplay display \u003d Display.getCurrent();\nint dpi;\nif(display \u003d\u003d null) {\n    // Bad, no display for this thread \u003d\u003e we are not in (a) UI thread\n    display.syncExec(new Runnable() {void run() { dpi \u003d\ndisplay.getDPI();}});\n} else {\n    dpi \u003d display.getDPI();\n}\n\nNeedless to say this will only work if the UI thread spins the message loop,\nand it is best if everything you need from the display is taken at one step.\nProbably you should also bug the SWT devs to explain you all the intricasies\nof using GC from within worker thread.\n\nIvan\n\nP.S. The stacktrace:\n\norg.eclipse.swt.SWTException: Invalid thread access\nat org.eclipse.swt.SWT.error(SWT.java:3374)\nat org.eclipse.swt.SWT.error(SWT.java:3297)\nat org.eclipse.swt.SWT.error(SWT.java:3268)\nat org.eclipse.swt.widgets.Display.error(Display.java:978)\nat org.eclipse.swt.widgets.Display.checkDevice(Display.java:638)\nat org.eclipse.swt.widgets.Display.getSystemFont(Display.java:2038)\nat org.eclipse.swt.widgets.Display.internal_new_GC(Display.java:2174)\nat org.eclipse.swt.graphics.GC.\u003cinit\u003e(GC.java:132)\nat org.eclipse.swt.graphics.GC.\u003cinit\u003e(GC.java:99)\nat\norg.eclipse.birt.chart.device.swt.SwtTextMetrics.\u003cinit\u003e(SwtTextMetrics.java:\n67)\nat\norg.eclipse.birt.chart.device.swt.SwtDisplayServer.getTextMetrics(SwtDisplay\nServer.java:256)\nat org.eclipse.birt.chart.computation.Methods.computeBox(Methods.java:764)\nat\norg.eclipse.birt.chart.model.layout.impl.LabelBlockImpl.getPreferredSize(Lab\nelBlockImpl.java:263)\nat\norg.eclipse.birt.chart.internal.layout.LayoutManager.doLayout_tmp(LayoutMana\nger.java:65)\nat\norg.eclipse.birt.chart.internal.layout.LayoutManager.doLayout(LayoutManager.\njava:597)\nat org.eclipse.birt.chart.factory.Generator.build(Generator.java:962)\nat\ncom.sciant.cpgi.ccp.ui.internal.GenerateChartStateJob.run(GenerateChartState\nJob.java:47)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\n\n\n\"Ivo Bosticky\" \u003civo@catapult.com\u003e wrote in message\nnews:e9p3dp$nhv$1@utils.eclipse.org...\n\u003e David,\n\u003e\n\u003e I pasted the stack trace below.\n\u003e\n\u003e Just so that you know, we\u0027re using BIRT Chart Engine 2.0.1 in standalone\n\u003e mode - so not latest release.\n\u003e\n\u003e If it would make it easier, I can give you my BIRT Chart Canvas code to\nhave\n\u003e a look at (it should be easy for me to convert it into a stand-alone\n\u003e application).\n\u003e\n\u003e Thanks\n\u003e Ivo\n\u003e\n\u003e Jul 20, 2006 5:04:29 PM org.eclipse.birt.chart.exception.ChartException\n\u003e logThis\n\u003e SEVERE: Exception\n\u003e org.eclipse.birt.chart.exception.ChartException: $NO-RB$ Invalid thread\n\u003e access\n\u003e         at\norg.eclipse.birt.chart.factory.Generator.build(Generator.java:867)\n\u003e         at\n\u003e\ncom.catapult.pesq.ui.swt.detailed_analysis.BirtChartCanvas$Updater.completeU\npdate(BirtChartCanvas.java:143)\n\u003e         at\n\u003e\ncom.catapult.pesq.ui.swt.detailed_analysis.BirtChartCanvas$Updater.run(BirtC\nhartCanvas.java:99)\n\u003e         at java.lang.Thread.run(Thread.java:595)\n\u003e Caused by: org.eclipse.swt.SWTException: Invalid thread access\n\u003e         at org.eclipse.swt.SWT.error(SWT.java:2942)\n\u003e         at org.eclipse.swt.SWT.error(SWT.java:2865)\n\u003e         at org.eclipse.swt.SWT.error(SWT.java:2836)\n\u003e         at org.eclipse.swt.widgets.Display.error(Display.java:995)\n\u003e         at org.eclipse.swt.widgets.Display.checkDevice(Display.java:626)\n\u003e         at org.eclipse.swt.widgets.Display.getDPI(Display.java:1403)\n\u003e         at\n\u003e\norg.eclipse.birt.chart.device.swt.SwtDisplayServer.getDpiResolution(SwtDispl\nayServer.java:196)\n\u003e         at\n\u003e\norg.eclipse.birt.chart.computation.withaxes.PlotWith2DAxes.\u003cinit\u003e(PlotWith2D\nAxes.java:89)\n\u003e         at\norg.eclipse.birt.chart.factory.Generator.build(Generator.java:860)\n\u003e         ... 3 more\n\u003e org.eclipse.birt.chart.exception.ChartException: $NO-RB$ Invalid thread\n\u003e access\n\u003e         at\norg.eclipse.birt.chart.factory.Generator.build(Generator.java:867)\n\u003e         at\n\u003e\ncom.catapult.pesq.ui.swt.detailed_analysis.BirtChartCanvas$Updater.completeU\npdate(BirtChartCanvas.java:143)\n\u003e         at\n\u003e\ncom.catapult.pesq.ui.swt.detailed_analysis.BirtChartCanvas$Updater.run(BirtC\nhartCanvas.java:99)\n\u003e         at java.lang.Thread.run(Thread.java:595)\n\u003e Caused by: org.eclipse.swt.SWTException: Invalid thread access\n\u003e         at org.eclipse.swt.SWT.error(SWT.java:2942)\n\u003e         at org.eclipse.swt.SWT.error(SWT.java:2865)\n\u003e         at org.eclipse.swt.SWT.error(SWT.java:2836)\n\u003e         at org.eclipse.swt.widgets.Display.error(Display.java:995)\n\u003e         at org.eclipse.swt.widgets.Display.checkDevice(Display.java:626)\n\u003e         at org.eclipse.swt.widgets.Display.getDPI(Display.java:1403)\n\u003e         at\n\u003e\norg.eclipse.birt.chart.device.swt.SwtDisplayServer.getDpiResolution(SwtDispl\nayServer.java:196)\n\u003e         at\n\u003e\norg.eclipse.birt.chart.computation.withaxes.PlotWith2DAxes.\u003cinit\u003e(PlotWith2D\nAxes.java:89)\n\u003e         at\norg.eclipse.birt.chart.factory.Generator.build(Generator.java:860)\n\u003e         ... 3 more\n\u003e\n\u003e David Michonneau wrote:\n\u003e\n\u003e \u003e Hi Ivo,\n\u003e \u003e\n\u003e \u003e Can you post the stack trace? How do you start the non-UI thread?\n\u003e \u003e\n\u003e \u003e Thanks,\n\u003e \u003e\n\u003e \u003e David\n\u003e \u003e\n\u003e \u003e \"Ivo Bosticky\" \u003civo@catapult.com\u003e wrote in message\n\u003e \u003e news:e9n9sv$lml$1@utils.eclipse.org...\n\u003e \u003e\u003e Hi David,\n\u003e \u003e\u003e\n\u003e \u003e\u003e I was able to render our chart into an Image, and then draw this image\non\n\u003e \u003e\u003e the SWT Canvas each time it requires a repaint. With this approach most\n\u003e \u003e\u003e of the repaint delays have been eliminated, and our problem has been\n\u003e \u003e\u003e solved.\n\u003e \u003e\u003e\n\u003e \u003e\u003e I still can\u0027t get around the initial repaint delay, because I don\u0027t\nseem\n\u003e \u003e\u003e to\n\u003e \u003e\u003e be able to get the Chart to build and render in a non-SWT thread. I get\n\u003e \u003e\u003e an Invalid Access Exception while calling\n\u003e \u003e\u003e IDeviceRenderer.getDisplayServer().getDpiResolution() while scaling. If\n\u003e \u003e\u003e the\n\u003e \u003e\u003e scaling is taken out then I get the same exception from\n\u003e \u003e\u003e Generator.build(...)\n\u003e \u003e\u003e\n\u003e \u003e\u003e Thank you for your help.\n\u003e \u003e\u003e Ivo\n\u003e \u003e\u003e\n\u003e \u003e\u003e\n\u003e \u003e\u003e\n\u003e \u003e\u003e\n\u003e \u003e\u003e David Michonneau wrote:\n\u003e \u003e\u003e\n\u003e \u003e\u003e\u003e Hi Ivo,\n\u003e \u003e\u003e\u003e\n\u003e \u003e\u003e\u003e First, you can try using Generator.refresh() and not\nGenerator.build(),\n\u003e \u003e\u003e\u003e if\n\u003e \u003e\u003e\u003e the only thing that changes is the data. Typically what takes time is\n\u003e \u003e\u003e\u003e not the generation, but the rendering itself. To make it faster, you\n\u003e \u003e\u003e\u003e want to minimize the rendering time for each datapoint, which implies:\n\u003e \u003e\u003e\u003e\n\u003e \u003e\u003e\u003e - a simple datapoint marker graphic with a plain color\n\u003e \u003e\u003e\u003e - No datapoint label (use a tooltip instead)\n\u003e \u003e\u003e\u003e - No X Axis label (or skip every 1000 labels if you want to show 10\n\u003e \u003e\u003e\u003e labels\n\u003e \u003e\u003e\u003e in a 10000 points chart for instance).\n\u003e \u003e\u003e\u003e\n\u003e \u003e\u003e\u003e You can try upgrading to 2.1 too, the performance should be better.\n\u003e \u003e\u003e\u003e\n\u003e \u003e\u003e\u003e As for making the UI responsive, it\u0027s indeed a good idea to generate\nthe\n\u003e \u003e\u003e\u003e chart into an image in a separate thread then update the UI with the\nnew\n\u003e \u003e\u003e\u003e image. It\u0027s like double-buffering and will also avoid any flickering,\n\u003e \u003e\u003e\u003e you can look in the SWT chart examples of the examples plugin to see\nhow\n\u003e \u003e\u003e\u003e to do\n\u003e \u003e\u003e\u003e it.\n\u003e \u003e\u003e\u003e\n\u003e \u003e\u003e\u003e Thanks,\n\u003e \u003e\u003e\u003e\n\u003e \u003e\u003e\u003e David\n\u003e \u003e\u003e\u003e\n\u003e \u003e\u003e\u003e \"Ivo Bosticky\" \u003civo@catapult.com\u003e wrote in message\n\u003e \u003e\u003e\u003e news:e9kmnn$spc$1@utils.eclipse.org...\n\u003e \u003e\u003e\u003e\u003e Hi,\n\u003e \u003e\u003e\u003e\u003e\n\u003e \u003e\u003e\u003e\u003e We\u0027re rendering Charts onto a SWT Canvas in our RCP application.\n\u003e \u003e\u003e\u003e\u003e Performance is sufficient for simple charts, but when the number\n\u003e \u003e\u003e\u003e\u003e of data-points increases, screen repaints slow down. At 10000 data\n\u003e \u003e\u003e\u003e\u003e points, it takes several seconds each time the Canvas needs to\n\u003e \u003e\u003e\u003e\u003e be repainted. Since the SWT thread is doing the generation\n\u003e \u003e\u003e\u003e\u003e and rendering, the GUI appears unresponsive, and this is turning\n\u003e \u003e\u003e\u003e\u003e into a usability issue. It\u0027s possible that the number of data\n\u003e \u003e\u003e\u003e\u003e points will increase to the 100,000 level in the future, at\n\u003e \u003e\u003e\u003e\u003e which stage the rendering will take too long for users to\n\u003e \u003e\u003e\u003e\u003e tolerate without a progress dialog. I had a look at the Chart FAQ\n\u003e \u003e\u003e\u003e\u003e and also into IDeviceRenderer, and I suspect it should be possible\n\u003e \u003e\u003e\u003e\u003e to generate the chart once into an Image, and then use this cached\n\u003e \u003e\u003e\u003e\u003e Image to update the SWT Canvas, but I\u0027m not sure exactly how to\n\u003e \u003e\u003e\u003e\u003e go about doing this. Does someone out there have experience with this\n\u003e \u003e\u003e\u003e\u003e issue and how to go about resolving it?\n\u003e \u003e\u003e\u003e\u003e\n\u003e \u003e\u003e\u003e\u003e Thanks,\n\u003e \u003e\u003e\u003e\u003e Ivo\n\u003e \u003e\u003e\u003e\u003e\n\u003e \u003e\u003e\u003e\u003e\n\u003e \u003e\u003e\n\u003e",
    "Add thread protection for the creation of GC",
    "Could you elaborate a bit on what exactly is fixed? In other words:\n1. Will it be possible to call Generatior.build() from a non-UI thread, using my workarounds?\n2. Or you\u0027ve just forbidden it completely (not very nice)?\n\n",
    "Now I call Display.syncExec() to create a new GC. So you can call the Generator.build()  from non-UI thread. If there are any other questions, please tell me.",
    "Great! \n\nYou\u0027ve also syncExec\u0027d the call to\n\"Display.getDPI()\" which used to happen outside of new GC(), at\norg.eclipse.birt.chart.device.swt.SwtDisplayServer.getDpiResolution(SwtDispl\nayServer.java:196)\n\nfor Ivo. Right?\n",
    "Thank you for your reminder. Thread protection has been also added to SwtDisplayServer.getDpiResolution()."
  ],
  "commentCreationDates": [
    "2006-07-24T13:35:27+02:00",
    "2006-10-09T09:39:16+02:00",
    "2006-10-09T10:04:51+02:00",
    "2006-10-09T10:17:43+02:00",
    "2006-10-09T10:21:29+02:00",
    "2006-10-09T10:33:27+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Invalid thread access",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3374"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3297"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3268"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.error",
          "source": "Display.java:978"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.checkDevice",
          "source": "Display.java:638"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.getSystemFont",
          "source": "Display.java:2038"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.internal_new_GC",
          "source": "Display.java:2174"
        },
        {
          "method": "org.eclipse.swt.graphics.GC.\u003cinit\u003e",
          "source": "GC.java:132"
        },
        {
          "method": "org.eclipse.swt.graphics.GC.\u003cinit\u003e",
          "source": "GC.java:99"
        },
        {
          "method": "org.eclipse.birt.chart.device.swt.SwtTextMetrics.\u003cinit\u003e",
          "source": "SwtTextMetrics.java: 67"
        },
        {
          "method": "org.eclipse.birt.chart.device.swt.SwtDisplayServer.getTextMetrics",
          "source": "SwtDisplay Server.java:256"
        },
        {
          "method": "org.eclipse.birt.chart.computation.Methods.computeBox",
          "source": "Methods.java:764"
        },
        {
          "method": "org.eclipse.birt.chart.model.layout.impl.LabelBlockImpl.getPreferredSize",
          "source": "Lab elBlockImpl.java:263"
        },
        {
          "method": "org.eclipse.birt.chart.internal.layout.LayoutManager.doLayout_tmp",
          "source": "LayoutMana ger.java:65"
        },
        {
          "method": "org.eclipse.birt.chart.internal.layout.LayoutManager.doLayout",
          "source": "LayoutManager. java:597"
        },
        {
          "method": "org.eclipse.birt.chart.factory.Generator.build",
          "source": "Generator.java:962"
        },
        {
          "method": "com.sciant.cpgi.ccp.ui.internal.GenerateChartStateJob.run",
          "source": "GenerateChartState Job.java:47"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "151576",
      "date": "2006-07-24T13:35:27+02:00",
      "product": "BIRT",
      "component": "Chart",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.birt.chart.exception.ChartException",
      "message": "$NO-RB$ Invalid thread \u003e access \u003e",
      "elements": [
        {
          "method": "org.eclipse.birt.chart.factory.Generator.build",
          "source": "Generator.java:867"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "151576",
      "date": "2006-07-24T13:35:27+02:00",
      "product": "BIRT",
      "component": "Chart",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Invalid thread access \u003e",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2942"
        }
      ],
      "number": 2,
      "commentIndex": 0,
      "bugId": "151576",
      "date": "2006-07-24T13:35:27+02:00",
      "product": "BIRT",
      "component": "Chart",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.birt.chart.exception.ChartException",
      "message": "$NO-RB$ Invalid thread \u003e access \u003e",
      "elements": [
        {
          "method": "org.eclipse.birt.chart.factory.Generator.build",
          "source": "Generator.java:867"
        }
      ],
      "number": 3,
      "commentIndex": 0,
      "bugId": "151576",
      "date": "2006-07-24T13:35:27+02:00",
      "product": "BIRT",
      "component": "Chart",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Invalid thread access \u003e",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2942"
        }
      ],
      "number": 4,
      "commentIndex": 0,
      "bugId": "151576",
      "date": "2006-07-24T13:35:27+02:00",
      "product": "BIRT",
      "component": "Chart",
      "severity": "normal"
    }
  ],
  "groupId": "151576",
  "bugId": "151576",
  "date": "2006-07-24T13:35:27+02:00",
  "product": "BIRT",
  "component": "Chart",
  "severity": "normal"
}