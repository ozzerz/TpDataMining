{
  "comments": [
    "Hello,\nI would like to propose a new kind of view we can find in other IDE like sharp\ndevelop for instance. It is the scout view (in #develop idiom) and consists in\nproposing in a palette vieww by category code snipets that we can drag and drop\ninto the current editor. For some kind of works, it is better than code assist\nbecause we can\u0027t recall in mind every key shortcuts, and it is a good help to\nhave  that presented visually.\nhttp://www.icsharpcode.net/OpenSource/SD/Tour/094/ToolScout.aspx\nbest regards\nXavier",
    "*** Bug 197243 has been marked as a duplicate of this bug. ***",
    "\u003e We envision a view showing a tree/table with the templates and a part which\n\u003e allows to edit the selected template. We also need an import/export wizard and\n\u003e maybe a new template wizard. The view should only show the templates which make\n\u003e sense in the context of the active editor.\n\u003e This is all possible but not trivial.\n\u003e \nI am not looking at the contexts (that needs tracking of the cursor in the editor) - but surely we can update the view depending on the current editor. Eclipse text editor provides the TemplatePreferencePage which is used by JDT and Ant. If a link can be provided between the templates and the type of editor then the view can change its contents depending on the active editor and show a message when the templates are not available for the current editor.\n\nJust supporting a view for the Java editor itself is of great value. I did a small hack to show the preference page in a view and using it as a fast view (see eclipsesnippets.blogspot.com). I find that itself is pretty useful.\n\nAs for the functionality of export, import, restore defaults etc. - IMO, it is best to leave it in the preferences. The often used functionality like add, delete, modify templates can be provided by the view. The view can be in-addition to the preference page, instead of being a replacement for it.\n\nMay be I will cookup something and post it in next couple of days.\n\nHow does this sound?\n\n",
    "A simple view that only allows to configure the (Java editor) template preferences is not something we would release. You could offer it a separate plug-in though. ",
    "While I can\u0027t find the visuals referred to in comment 0, this sounds vaguely like the Snippets view provided by WTP.  It has a requirement on GEF, though, which is not part of the default platform.",
    "Yes, I think Benno already made a similar comment. Would it be possible to refactor that view so that it doesn\u0027t depend on GEF so that it can be hosted by Platform Text?",
    "(In reply to comment #5)\n\u003e Yes, I think Benno already made a similar comment. Would it be possible to\n\u003e refactor that view so that it doesn\u0027t depend on GEF so that it can be hosted by\n\u003e Platform Text?\n\u003e \n\nThe problem with that view is that it does not make use of content assist. I prefer the UI of the current templates to that of Snippets view.\n\n-- KD\n\n\n",
    "(In reply to comment #3)\n\u003e A simple view that only allows to configure the (Java editor) template\n\u003e preferences is not something we would release. You could offer it a separate\n\u003e plug-in though. \n\u003e \n\nI am not looking for a simple view. Rather a view that supports the current editor and changes contents depending on it. I have ant/java editors that support templates in my eclipse installation. As a POC may be a view that supports these two editors.\n\n",
    "Created an attachment (id\u003d74439)\npalette view\n\nThis is the palette view contributed by amateras html editor I was referring to. ",
    "Created an attachment (id\u003d74440)\nsnipped view\n\nThis shows WTPs snipped view and its corresponding customize dialog.",
    "(In reply to comment #5)\n\u003e Yes, I think Benno already made a similar comment. Would it be possible to\n\u003e refactor that view so that it doesn\u0027t depend on GEF so that it can be hosted by\n\u003e Platform Text?\n\nIt would take some work, but yes, it could.  Nothing that\u0027s part of the API relies on GEF.  The view can show and hide its categories based on the active part, most often according to the content type being edited by the active editor.  The difference in behavior (and content) between Content Assist\u0027s Templates and the Snippets view have yet to be settled, though, and that\u0027s one of several reasons I\u0027ve not actively sought its inclusion in the platform thus far.\n\nIt might be possible to surface the Templates within the view, though, wrapping them in such a way that they trigger the same behavior as an ICompletionProposal when dropped into an editor.  It would require some investigation to see what\u0027s publicly available through API.\n\nBenno, does the Amateras palette use a similar customizing dialog?",
    "Created an attachment (id\u003d74444)\nPalette configuration dialogs\n\n",
    "Created an attachment (id\u003d74505)\nTemplatesView plugin sources\n\nThese are the sources for the templatesview plugin. See the followup post for details.\n\n",
    "Like I mentioned earlier I created a plugin for TemplatesView and posted it as a zip file. Few points of usage (and few questions at the end):\n\n1. I followed the structure of ContentOutline for creating the TemplateView.\n2. Editor needs to provide ITemplatePage through getAdapter(). Since this is not possible without updating the editors themselves, I used Platform#AdapterManager to add template pages to AntEditor and CompilationUnitEditor. When you launch the eclipse workbench, click on the Sample command (or Sample command from Sample Menu). This command does the registration from then onwards the template view should work.\n3. The template view is added to the Java perspective.\n4. No images - just text buttons on the view toolbar. The toolbar supports add/delete/edit.\n5. The View menu support import/export/revert/restore options.\n\nSince I tried to create the plugin as an external plugin quite a bit of access restriction warnings and duplicate code is used. Can someone tell me what is the best way to package this type of plugins? Is it as a patch against the Eclipse platform code? This is the first time I am contributing, so any help is appreciated.\n\n\n",
    "One more point. This is the hacked code - all the Java doc etc. need to be updated.\n\n",
    "Hello,\n\nAfter hunting around quite a bit, I still could not find how I can do the following. Can anyone throw some light?\n\n1. I have a template and IEditorPart (We can assume that it is an AbstractTextEditor). How can I programmatically invoke content assist?\n2. I am planning to add an option to filter the templates only to the currently active content. For this I need to get a callback whenever editor change the currently edited content type. How can I get this.\n\nCan we do these with the available public API on editors?\n\nTIA.\n\n",
    "Hey, that\u0027s already pretty nice, I like the PageBookView stuff\n\nI would prefer a patch against the platform. I guess org.eclipse.ui.workbench.texteditor for the TemplatePage/TemplateView stuff and org.eclipse.jdt.ui for the Java related stuff. You can then also patch CompilationUnitEditor to adapt to ITemplatePage.\n\nThings to do:\n- It must be possible to drag text from an editor to the view\n- It must be possible to past text into the view\n- It must be possible to drag text from the view to an editor. This needs investigation, since the drop would not be a text drop but a special drop which evaluates the variables. Some kind of a TemplateProposal drop. Same for past into editor.\n- I don\u0027t like the table, neither on the preference page nor in the view. At least columns of the table must be sortable. But I would want a tree/table tree with context types as root nodes. But that\u0027s probably another bug.\n- Maybe we should allow to edit the templates in the source viewer in the template view and not (only) in the dialog.\n\nFew comments:\n- ITemplatePage can extend IPage instead of IPageBookViewPage\n- TemplateView and TemplatePreferencePage share a lot of code, maybe we can find a common abstraction.",
    "(In reply to comment #16)\n\u003e I would prefer a patch against the platform.\nfrom CVS or the 3.3? Both are OK with me.\n\n\u003e Things to do:\n\u003e - It must be possible to drag text from an editor to the view\nWe can invoke the New... editor here. I think the JDT folk should add some magic to provide the content assist for template creation.\n\n\u003e - It must be possible to past text into the view\nOK.\n\u003e - It must be possible to drag text from the view to an editor. This needs\n\u003e investigation, since the drop would not be a text drop but a special drop which\n\u003e evaluates the variables. Some kind of a TemplateProposal drop. Same for past\n\u003e into editor.\nI am thinking of double click. When a template item is double clicked we can invoke TemplateProposal#apply. For now, I might extend ITemplatePage to provide the needed glue from the editors.\n\u003e - I don\u0027t like the table, neither on the preference page nor in the view. At\n\u003e least columns of the table must be sortable. But I would want a tree/table tree\n\u003e with context types as root nodes. But that\u0027s probably another bug.\nSomehow, I feel that the table view is the easiest to use. Assuming that this view is going to be used often, a tree-table view might not be a right choice. Still, let us wait on this.\n\u003e - Maybe we should allow to edit the templates in the source viewer in the\n\u003e template view and not (only) in the dialog.\nShould be possible. We will not be able to provide a visual clue that an edit is happening and this might not be such a good idea.\n\u003e \n\u003e Few comments:\n\u003e - ITemplatePage can extend IPage instead of IPageBookViewPage\nIPage is supposed to have been deprecated.\n\u003e - TemplateView and TemplatePreferencePage share a lot of code, maybe we can\n\u003e find a common abstraction.\nYes. Similarly the (Ant/Java)TemplatePreferencePages have lot of common code with (Ant/Java)TemplatePage. A refactoring is needed here.\n",
    "(In reply to comment #17)\n\u003e from CVS or the 3.3? Both are OK with me.\n\nCVS HEAD\n\n\u003e We can invoke the New... editor here. I think the JDT folk should add some\n\u003e magic to provide the content assist for template creation.\n\nI don\u0027t understand. I thought when dropping text a new template will be created with a default name and the Pattern will be the dropped text, no variables.\n\n\u003e I am thinking of double click. When a template item is double clicked we can\n\u003e invoke TemplateProposal#apply. For now, I might extend ITemplatePage to provide\n\u003e the needed glue from the editors.\n\nDouble click does edit the template which is what I would expect. I think all we need is a new Transfer like TemplateTransfer and the editor been a DropTarget for TemplateTransfer. When dropped the editor can create and apply the TemplateProposal add the drop position.\n\n\u003e Somehow, I feel that the table view is the easiest to use. Assuming that this\n\u003e view is going to be used often, a tree-table view might not be a right choice.\n\u003e Still, let us wait on this.\n\nWe plan to add more context types and templates. I feel that the table does not scale. But more important, it is not possible to drop/past into a context type with the table.\n\n\u003e Should be possible. We will not be able to provide a visual clue that an edit\n\u003e is happening and this might not be such a good idea.\n\nYes, good point. And we don\u0027t know how to save/cancel.\n\n\u003e IPage is supposed to have been deprecated.\n\nIndeed, you\u0027re right.\n\nI forgot:\n- View has to listen to preference changes and update accordingly.\n\n\u003e 1. I have a template and IEditorPart (We can assume that it is an\n\u003e AbstractTextEditor). How can I programmatically invoke content assist?\n\nI don\u0027t know, why?\n\n\u003e 2. I am planning to add an option to filter the templates only to the \n\u003e currently active content. For this I need to get a callback whenever \n\u003e editor change the currently edited content type. How can I get this.\n\nI don\u0027t know. I don\u0027t think that\u0027s the right thing to do. If you drag/copy a template then you can drop/past it anywhere in the editor. Maybe we can have a \u0027link with editor\u0027 mode, but I think a table with context types as root would be a more elegant solution. However, we might want to filter the view based on other criteria, i.e. you don\u0027t want to show a foreach template if the active CU does not belong to a 1.5+ project.",
    "\u003e As for the functionality of export, import, restore defaults etc. - IMO, it is\n\u003e best to leave it in the preferences.\n\nYes, I agree with you now. It does not make much sens to copy the code/functionality of the preference page. It should be possible to create a template by drop/past, delete templates, and maybe rename templates. For everything else the preference page should be used. An action like \u0027Configure...\u0027 should open the appropriate preference page. \nThe value-add it allows to create a new template with drag and drop and that is context sensitive. ",
    "(In reply to comment #18)\n\u003e (In reply to comment #17)\n\u003e \u003e We can invoke the New... editor here. I think the JDT folk should add some\n\u003e \u003e magic to provide the content assist for template creation.\n\u003e \n\u003e I don\u0027t understand. I thought when dropping text a new template will be created\n\u003e with a default name and the Pattern will be the dropped text, no variables.\n\u003e \nYou are looking at plain snippets. For making effective use of content assist, name is needed (and it seems to be mandatory, New... template doesn\u0027t allow an empty name.\n\n\u003e \u003e I am thinking of double click. When a template item is double clicked we can\n\u003e \u003e invoke TemplateProposal#apply. For now, I might extend ITemplatePage to provide\n\u003e \u003e the needed glue from the editors.\n\u003e \n\u003e Double click does edit the template which is what I would expect. I think all\n\u003e we need is a new Transfer like TemplateTransfer and the editor been a\n\u003e DropTarget for TemplateTransfer. When dropped the editor can create and apply\n\u003e the TemplateProposal add the drop position.\n\u003e \nDouble click need to perform the default action. In case of templates it is inserting it into the active editor at the current cursor position. This is how, WST snippets also work.\nFor the last few days, I am using the Snippets view. Drag\u0026Drop snippets into an editor might not be such a good idea. For one, the drop position got to be accurate and being text it is tougher to drop at the right place.\n\n\u003e \u003e Somehow, I feel that the table view is the easiest to use. Assuming that this\n\u003e \u003e view is going to be used often, a tree-table view might not be a right choice.\n\u003e \u003e Still, let us wait on this.\n\u003e \n\u003e We plan to add more context types and templates. I feel that the table does not\n\u003e scale. But more important, it is not possible to drop/past into a context type\n\u003e with the table.\n\u003e \nI am looking into the ExpandBar. It looks good - except that most of the defaults for background, gradient etc. are taken from the Display defaults. Extending it or enhancing it is an option that need to be looked at.\n\n\u003e \u003e 1. I have a template and IEditorPart (We can assume that it is an\n\u003e \u003e AbstractTextEditor). How can I programmatically invoke content assist?\n\u003e \n\u003e I don\u0027t know, why?\n\u003e \nForget it. Since, I started touching the JavaEditor and AntEditor this becomes moot.\n\n\u003e \u003e 2. I am planning to add an option to filter the templates only to the \n\u003e \u003e currently active content. For this I need to get a callback whenever \n\u003e \u003e editor change the currently edited content type. How can I get this.\n\u003e \n\u003e I don\u0027t know. I don\u0027t think that\u0027s the right thing to do. If you drag/copy a\n\u003e template then you can drop/past it anywhere in the editor. Maybe we can have a\n\u003e \u0027link with editor\u0027 mode, but I think a table with context types as root would\n\u003e be a more elegant solution. However, we might want to filter the view based on\n\u003e other criteria, i.e. you don\u0027t want to show a foreach template if the active CU\n\u003e does not belong to a 1.5+ project.\n\u003e \nLink with the editor is the mode I have in mind. In this mode only the context specific items will be\nshown.\n\nAs far as the progress, I checked out the sources from CVS and made it work against them. Once the expandbar part of the work is done, I will post the patch.\n\n",
    "Created an attachment (id\u003d74784)\nView snapshot\n\nHi,\n\nThis is how currently template view looks. Any comments and suggestions?\n\n-- KD\n\n",
    "(In reply to comment #21)\n\u003e Created an attachment (id\u003d74784) [details]\n\u003e View snapshot\n\u003e \n\u003e Hi,\n\u003e \n\u003e This is how currently template view looks. Any comments and suggestions?\n\u003e \n\u003e -- KD\n\u003e \n\nThe Platform and JDT does not use ExpandBar and we will most likely not start using it. I would use a table/tree. But this is to the Platform/Text lead to decide.\n",
    "Btw I\u0027ve played a bit with the snippets view:\n\nI find it strange, that the customize dialog does show the views content again. This time using a tree instead of expand bars, why?\n\nThe customize dialog has some resize problems, bug 198242\n\nSome mnemonics are missing.\n\nWe don\u0027t use table cell editors, and if we do we provide a second way to enter data, like an Edit... dialog.\n\nBut the strangest thing is if you define a template using a variable and you drop this template into an editor a dialog pops up where the user has to enter the values for the variables. The linked mode should be used for this kind of interactions. See screen shot. \n\nAlso if you cancel the drop a strange exception is drown, bug 198243 ",
    "Created an attachment (id\u003d74917)\nInsert variable dialog\n\n",
    "(In reply to comment #22)\n\u003e The Platform and JDT does not use ExpandBar and we will most likely not start\n\u003e using it. I would use a table/tree. But this is to the Platform/Text lead to\n\u003e decide.\n\u003e \n\nIt is bad - the expand bar view (on OSX atleast) looks really good.\n\nI finished view with all the features we discussed. Will post a patch later today (need to rush for a meeting).\n\nAnyhow, converting the expandbar into a tree/table should not be a major problem - if that is what makes us stuck.\n\nLater.\n\n",
    "Created an attachment (id\u003d75026)\nTemplatesView plugin sources - patch against CVS - using TreeControl\n\nHi,\n\nThis patch adds a TemplatesView page to the general category. Ant and Java editors are modified to support the view. Like Benno suggested in an earlier message, the control is changed to Tree. I am taking back my words on ExpandBar - this looks good and the code is much more cleaner. Thanks Benno.\n\nFeatures of the templates view:\n\n1. Templates can be added, modified and deleted from the view.\n2. Collapse all/Expand all option on the toolbar. The option will act as collapse-all if any one context is being viewed.\n3. Drag\u0026Drop from the editors will create a new snippet. You can turn on an option from the View menu to launch the New dialog when a snippet is dropped. You can drag into different contexts and the new template will be created in that context.\n4. Copy\u0026Paste - you can copy a template and paste it into the editor. Similarly text from the clipboard can be copied into the templates view.\n\nI will post a detailed list of modifications later.\n\nNote-1: this patch contains binary files (images). Most of these images are copied from the WST snippet view.\nNote-2: JavaTemplatesPage.java - the code for insertTemplate() is ugly. Can someone with a knowledge of contentassist with java editor have a look at it?\nNote-3: can someone knowing AntEditor have a look at the AntTemplatesPage.java\n\nKnown problems:\n\n1. When the DnD/Copy-Paste can\u0027t happen (pasting a template into a readonly editor or incompatible editor) fails silently. I think this is a reasonable solution.\n\nPlease give me feedback.\n\n",
    "Few more missed features:\n\n1. Link to editor mode. When turned on, shows only the templates for the current context.\n2. Show disabled items (from view menu): will include the disabled templates in the view. These items are greyed out for visual indication. Otherwise they work as regular templates.\n3. Preferences: You can open the preferences page from the menu.\n4. Context menu on the items.\n\nThat should cover all the points.\n\nAwaiting your feedback.\n\n",
    "\u003eThe Platform and JDT does not use ExpandBar and we will most likely not start\n\u003eusing it. I would use a table/tree. But this is to the Platform/Text lead to\n\u003edecide.\nWe won\u0027t start to use ExpandBar at this point.\n\nThe patch is way too big as it contains many whitespace changes. Make sure to only change what\u0027s really needed and then please create and attach a new patch.\n\nIf we want to put this into ui.views we need to get Platform UI into the boat - adding Tod and Boris to comment on this. Can one of you guys quickly look at this and comment? Thanks.\n\nRegarding double-click on a template: I would need to play around with this to make a final statement here. Both suggested actions make sense. Maybe we need to add a mode similar to the History view where the user can choose what happens.\n",
    "Created an attachment (id\u003d75067)\nTemplatesView patch: whitespace problems corrected\n\nEclipse save options gave the problem with the earlier patch. Sorry for that. I recreated the patch after removing inadvertent changes. Please bear with first time contributor.\n\nThe patch is still hefty at around 140K - some of it is because of factoring out EditTemplateDialog from TemplatePreferencePage.\n\n",
    "(In reply to comment #28)\n\u003e We won\u0027t start to use ExpandBar at this point.\n\u003e \nFair enough. After working with ExpandBar - I think it still has a way to go before it can be considered for inclusion in standard packages.\n\n\u003e The patch is way too big as it contains many whitespace changes. Make sure to\n\u003e only change what\u0027s really needed and then please create and attach a new patch.\n\u003e \nSorry for that. I just posted a new patch. Please have a look.\n\n\u003e If we want to put this into ui.views we need to get Platform UI into the boat -\n\u003e adding Tod and Boris to comment on this. Can one of you guys quickly look at\n\u003e this and comment? Thanks.\n\u003e \nFew reasons why I thought it should be part of ui.views:\n\n1. Structurally both ContentOutline view and Templates view are the same. The only difference is the type of adapter looked for in the EditorPart.\n2. Similar to ContentOutline, Template is tightly related to editors.\n3. I am visualizing a case where a visual editor might provide a palette using ITemplatesPage interface.\n\nIn case this goes to ui.views, a refactoring can be done to create an abstract class from which both can be subclassed.\n\n\u003e Regarding double-click on a template: I would need to play around with this to\n\u003e make a final statement here. Both suggested actions make sense. Maybe we need\n\u003e to add a mode similar to the History view where the user can choose what\n\u003e happens.\nI am looking at this view as more of a handy tool to use templates. PreferencesPane can still be used for high maintenance tasks.",
    "\u003ePlease bear with first time contributor.\nSure - don\u0027t worry ;-)\n\n\u003eFew reasons why I thought it should be part of ui.views:\nDon\u0027t get me wrong: ui.views is a good host for this that\u0027s why I added Tod and Boris to consider. We can\u0027t put it into a Text plug-in. The only other host might be ltk.ui which is not yet part of any official build.",
    "Comments to the patch:\n- you need to attach the resource (images) separate from the patch\n- org.eclipse.ui.workbench.texteditor cannot depend on org.eclipse.ui.views\n- the patch breaks clients as it remove API (EditTempalteDialog)\n- you need to add your name to each copyright and also add the copyright\n  notice to the new files\n- add since tags to all new APIs (including private members)\n-\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().activate(fEditor);\nshould not be used. Simpler is fEditor.getSite().getPage().activate(fEditor).\n- I see that it uses the same approach as the Content Outline. Clients always had trouble finding out how to extend this. It might be simpler and more visible  for clients if we take the extension point road.\n\nComments to the UI/Usability\n- the view is too big and scrolling behavior should mainly be on the tree and \n  not just tree+preview\n- I get very strange insertions when I drop a Java code template on Javadoc\n- drag over feedback should indicate when I can\u0027t drop a template,\n  e.g. when I drag a Java code template over Javadoc (see also next comment)\n- I\u0027m not sure we need to see all templates for the active editor. It might\n  be better to only show those visible in the current context. But not yet\n  sure on that one.\n- for performance reasons you shouldn\u0027t update the templates view on each \n  keystroke. Rather do it on post selection change. This also allows you to \n  decouple it from the editor a bit more.\n\nOK - so much for now. Benno please provide more detailed comments on the usability. I will add more comments when the next patch is ready.",
    "(In reply to comment #32)\nDaniel:\n\nThanks for the feedback. Will do the modifications and post a new patch.\n\nFew comments:\n\u003e Comments to the patch:\n\u003e - org.eclipse.ui.workbench.texteditor cannot depend on org.eclipse.ui.views\nWhere can we put the TemplatesPage that provides an implementation of ITemplatesPage for text editor? It can\u0027t go into org.eclipse.ui.views because it depends on the Template classes. I will relook at the structure. Any suggestions are most welcome.\n\u003e - the patch breaks clients as it remove API (EditTempalteDialog)\nI just made it a top level class - it is still the same code. Another option is to make it public in TemplatePreferencePage and make use of it. Does not seem good. However, I did not find any existing plugins making use of EditTemplateDialog. JDT/Ant overrides the editTemplate/createViewer.\n\n\u003e - I see that it uses the same approach as the Content Outline. Clients always\n\u003e had trouble finding out how to extend this. It might be simpler and more\n\u003e visible  for clients if we take the extension point road.\n\u003e \nI think ContentOutline took that route because technically it might not be very easy to implement it other way. We need to change the page in the pagebook view whenever the current editor changes. For that we need to inquire the editor for the object to use. I think getAdapter is suitable for this purpose. I am not clear how to go about it using extension points. Any suggestions?\n\n\u003e Comments to the UI/Usability\n\u003e - the view is too big and scrolling behavior should mainly be on the tree and \n\u003e   not just tree+preview\nWhich platform did you check it? The scrolling behavior on OSX is only on the tree. The preview is always fixed size at the bottom of the view.\n\n\u003e - I get very strange insertions when I drop a Java code template on Javadoc\nI guess you got a single character inserted. The JavaTemplatesPage implementation of insertTemplate() is not very nice. I need help from the jdt folks and don\u0027t know how to ask for it.\n\n\u003e - drag over feedback should indicate when I can\u0027t drop a template,\n\u003e   e.g. when I drag a Java code template over Javadoc (see also next comment)\nCan be done. But actually it is useful sometimes to drop a Javadoc template into a Java comment. Like I mentioned with some help from JDT folks, these can be made better.\n\n\u003e - I\u0027m not sure we need to see all templates for the active editor. It might\n\u003e   be better to only show those visible in the current context. But not yet\n\u003e   sure on that one.\nYup. I guess you missed link to editor mode. Check it out.\n\n\u003e - for performance reasons you shouldn\u0027t update the templates view on each \n\u003e   keystroke. Rather do it on post selection change. This also allows you to \n\u003e   decouple it from the editor a bit more.\n\u003e \nThe templates view is not updated at each keystroke. It gets updated only when the context changes and that too if the link-to-editor mode is on.\n\nThanks for the comments and suggestions.\n\n",
    "(In reply to comment #33)\n\u003e I just made it a top level class - it is still the same code. Another option is\n\u003e to make it public in TemplatePreferencePage and make use of it. Does not seem\n\u003e good. However, I did not find any existing plugins making use of\n\u003e EditTemplateDialog. JDT/Ant overrides the editTemplate/createViewer.\n\nActually we subclass it in WTP (you could say that requirement was my fault).  It\u0027s necessary to provide the correct syntax coloring while editing our languages\u0027 templates.\n",
    "(In reply to comment #23)\n\u003e Btw I\u0027ve played a bit with the snippets view:\n\u003e \n\u003e I find it strange, that the customize dialog does show the views content again.\n\u003e This time using a tree instead of expand bars, why?\n\nIt was a GEF-lead design.  The PaletteViewer UI used by the view and the left-half of the Customize dialog are provided by GEF.\n\n\u003e But the strangest thing is if you define a template using a variable and you\n\u003e drop this template into an editor a dialog pops up where the user has to enter\n\u003e the values for the variables. The linked mode should be used for this kind of\n\u003e interactions. See screen shot. \n\nThis was largely chosen because the view doesn\u0027t exclusively target interactions with text editors.  Both the dialog that\u0027s shown and the transfer type(s) used when dropping a snippet are fully controllable by extension point.  And I\u0027m not sure if Linked Edit mode existed when the view was first created.",
    "(In reply to comment #34)\n\u003e Actually we subclass it in WTP (you could say that requirement was my fault). \n\u003e It\u0027s necessary to provide the correct syntax coloring while editing our\n\u003e languages\u0027 templates.\n\u003e \nI will put it back as a protected member extending the EditTemplateDialog with fully qualified name. In that case it does not break the API at the same time I do not need to replicate the code in TemplatesPage. How does it sound?\n\nIs snippets view orthogonal to templates? Can we make it to implement ITemplatesPage and provide the getAdapter() to return it?\n\n",
    "\u003eI will relook at the structure. Any suggestions are most welcome.\nAs long as we don\u0027t even know whether ui.views would accept such a view we can\u0027t go discussing further. Maybe it needs to be put into \n\n\u003e\u003e - the patch breaks clients as it remove API (EditTempalteDialog)\n\u003eI just made it a top level class - it is still the same code. \nThe class is a protected class inside another one. If you move it out then this breaks binary compatibility (just look at the name of the class files before and after your change). Your newly proposed change might work but I\u0027m not 100% sure without doing more investigation. I prefer no to do this. From you patch I can\u0027t see any other client of the edit template dialog, so why not just *use* the existing one? I don\u0027t pan/want to make this class API by itself anyway.\n\n\u003eThe templates view is not updated at each keystroke\nI didn\u0027t investigate in detail what exactly the view is doing. It\u0027s clear from the code that it listens to caret location changes and that\u0027s not OK.\n\n\u003eYup. I guess you missed link to editor mode. Check it out.\nOK, then I\u0027d say the out of the box experience is wrong ;-)\n\nRegarding inserting templates from wrong context: simply disallow it, as the \"JDT folks\" doesn\u0027t want to support this.\n\n\u003eWhich platform did you check it? \nWindowsXP. There the view scrolls as one unit. I found the view hard to use as I found myself scrolling all the time (see upcoming picture).\n\nSome additional comment to the idea of using an extension point: this only makes sense if we think that other kinds of templates (not just the known editor text templates) could be contributed and which then insert some text/code. If that\u0027s not the case we can stick with the adapter for now.",
    "Created an attachment (id\u003d75300)\nPicture showing bad scrolling behavior on WindowsXP\n\n",
    "My findings (all with java templates and java editor)\n\n--------------------------------------------------------\n1. DnD or copy/paste a template into editor\n2. Undo\nIs:\n The first character of the template is not removed\nShould:\n Remove all characters\n-------------------------------------------------------\nGiven:\npackage p;\n/**\n *|\n */\npublic class E {}\n1. Replace \u0027|\u0027 with caret\n2. Select javadoc templat \u0027\u003ci\u003e\u0027\n3. Insert\nIs:\n/**\n \u003ci\u003e\u003c/i\u003e\n */\nShould:\n/**\n *\u003ci\u003e\u003c/i\u003e\n */\n-------------------------------------------------------\n1. Make file shown in java editor read only\n2. Drag and drop a template\nIs:\n Template is inserted and editor dirty\nShould:\n Dialog should ask to make file writable\n-------------------------------------------------------\nOn view resize the column width of the table changes, jumps around, flickers, this on WinXP\n-------------------------------------------------------\nThe scrollbars are on the view and not on the tree for me too.\n-------------------------------------------------------\n1. Select javadoc node\n2. New...\nIs:\n Dialog shows java as context\nShould:\n Have taken javadoc as context\n------------------------------------------------------\nShould be able to drag and drop a template on its own context. Result would be a copy of the template.\n------------------------------------------------------\nShould be able to paste a template on itself. Result would be a copy of the template.\n------------------------------------------------------\nI\u0027m still not convinced of the double click/insert mode. Once the focus is in the template view the caret is not shown anymore in the editor and I don\u0027t see where the template will be inserted.\n------------------------------------------------------\nWhen in linked with editor mode the context nodes collapse on context switch. The nodes should either be always expanded or remember there expand state.\n------------------------------------------------------\nWhat\u0027s the \u0027Show no dialog on drop\u0027 action for? I mean, of course we should not show a dialog, unless absolutely necessary.\n------------------------------------------------------\n1. Got the following when creating \u0027New...\u0027 template:\njava.lang.NullPointerException\n\tat org.eclipse.ui.texteditor.templates.TemplatesPage.setDisableItemColors(TemplatesPage.java:602)\n\tat org.eclipse.ui.texteditor.templates.TemplatesPage.refresh(TemplatesPage.java:1226)\n\tat org.eclipse.ui.texteditor.templates.TemplatesPage.access$6(TemplatesPage.java:1224)\n\tat org.eclipse.ui.texteditor.templates.TemplatesPage$1.propertyChange(TemplatesPage.java:478)\n\nI can not reproduce but TreeItem#getData() is spec\u0027d to possible return null.\n-------------------------------------------------------\n\n\u003e The JavaTemplatesPage implementation of insertTemplate() is not very nice. \n\u003e I need help from the jdt folks and don\u0027t know how to ask for it.\n\nI guess bug 1, 2 and 3 are due to this. I can have a look at it after M1 if you want.",
    "(In reply to comment #36)\n\u003e Is snippets view orthogonal to templates? Can we make it to implement\n\u003e ITemplatesPage and provide the getAdapter() to return it?\n\nYes, it\u0027s orthogonal.  The Snippets view is not a PageBook View, and it\u0027s usage wasn\u0027t designed for it to be one page in a page book.  It shows and hides drawers as needed depending on the active editor\u0027s input and the user\u0027s preference, largely because we envisioned picking snippets from multiple languages with a single editor.",
    "Created an attachment (id\u003d75416)\nicons used in templatesview.patch\n\nThis zip contains all the icons files used in the TemplatesView.\n\n",
    "Created an attachment (id\u003d75417)\nTemplatesView - fixed copyright, bugs and improved(hopefully) UI\n\nThis patch contains TemplatesView. The images are in a separate zip file that is attached earlier.\n\nSorry for the long post. I am trying to address all comments/suggestions from the earlier posts.\n\nComments:\n\n1. I used SashForm and ViewForm for displaying the view. IMO, it looks nicer.\n2. Most probably, the bug with scrollpanes (jumping view, scrollbars, single scrollbar etc.) is fixed. I could not check it on windows - please check it out.\n3. Selecting multiple templates is used only for deleting. All other options require a single select.\n4. DnD is only copy mode. You can DnD a template into another context and the template is created in that context.\n5. Bug with JavaEditor is fixed - You can drop a template into a JavaEditor if the editor itself supports the template at that drop position (hitting ctl-space returns this template in the list) or at the beginning of line, or at the end of a line or after any whitespace character.\n6. If the template is dropped within a java identifier - the part before the drop position goes into the template (this is how JavaEditor also works).\n7. Can\u0027t drop templates into a read-only editor. I did not go with the suggestion with prompting a dialog because the templates view is shown for java class files also.\n8. Link to editor mode is the default.\n9. Preferences (options, sash size, tree column widths) are saved.\n10. I am using bold-italic for the contexts in the treeview. I didn\u0027t find any other standard view decorating the nodes. We can remove it if needed.\n11. TemplatePreferencePage - I reverted back. Changed the visibility of EditTemplateDialog in TemplatePreferencePage to public so that I can access it from TemplatesPage. I am not happy with this. IMO, the EditTemplateDialog should be a toplevel class (still need not be published) and should be referenced from both TemplatePreferencePage and TemplatesPage.\n12. Insertion on Double click seems to be a natural operation on a template. I am using this view for the last few days, and once in a while from the editor I type in a new line and double click a template. Since the focus is back to the editor, I go ahead with typing. It saves quite a few keystrokes.\n13. About the show new dialog option: since the effectiveness of the templates is in their ability to insert into an editor by typing the first few characters and invoking content assist, entering a name for the template seems good to me. The alternative is to drop the code, click on edit and modify the name. I suggest we keep it. (BTW, the new dialog is shown even when pasting code or copying a template).\n14. Removed dependence of editor on the ui.views. TemplatesPage implements IPageBookPage and since ITemplatesPage is anyhow a marker interface - this does not matter. Though, I prefer explicitly implementing ITemplatesPage.\n15. Now, we start a compoundchange while applying a template in JavaTemplatesPage. Undo removes the whole insertion of the template.\n16. handleCursorPositionChanged: It is necessary. SelectionProvider#addSelectionListener() not providing the updates properly for JavaEditor(it works for AntEditor and the number of invocations are still the same). Since a single caret position change can change the current context, this is the right place to hook into the editor.\n17. When we drop/paste code from an editor the $ characters are being escaped for saving into the pattern.\n18. DragOver caching: JavaTemplatesPage caches the result for an offset and returns it if the current offset is same as the earlier one. This is done to improve performance, as dragOver() is called repeatedly even when the drop position does not change.\n19. All copyright messages are updated/added.\n20. Added @since 3.4 tags to all new API.\n21. Sorry for the NPE in the earlier version. bug - fixed.\n\nI am wondering whether it is a good idea to provide a default template support at the AbstractTextEditor level. In that case all text editors that do not use the templates still get rudimentary template support and those that provide get their own versions. What do you think?\n\nThat is all for now. Please give me feedback.\n",
    "Created an attachment (id\u003d75435)\nReplace the file in the patch with this file. Fixed few problems with inserting a template.\n\n",
    "Please attach a full functional patch that someone can grap and test.",
    "Created an attachment (id\u003d75441)\nTemplatesView - fixed a problem while inserting a template into JavaEditor\n\nThis is the full patch with the fix (attachment: 75435) included. You need the icons from attachment 75416 along with this patch.\n\nChanges:\n\n1. Does not allow a template to be applied if the context differs.\n2. Does not allow a template to be applied if the prefix at the drop position does not match the template.\n3. Does validation checks while pasting a template into the editor.\n\n",
    "--------------------------------------------------\nView should open where the outline view is shown.\n--------------------------------------------------\nDon\u0027t use italic for context nodes. Maybe bold. Maybe something like:\n\u0027Java (24 Templates)\u0027. No description.\n-------------------------------------------------\nUse the ColumnLabelProvider to set the font and color of columns\n-------------------------------------------------\nDon\u0027t resize the column width when resizing the view\n-------------------------------------------------\nShould be able to move a template to another context\n-------------------------------------------------\nI changed my opinion regarding double click. DnD does not allow to wrap a template around a word/line selection, whereas double click insertion does allow that.\n-------------------------------------------------\nI think \u0027disabled\u0027 templates will lead to confusion. The preference page seams not to use the term disabled, which is good for us. We can use the term \u0027hide\u0027 in the context of the view. The action would be renamed to \u0027Show hidden templates\u0027 (or so) and a context menu action should be added to \u0027hide\u0027 respectively \u0027show\u0027 a template. I like that the hidden templates are drawn grayed when shown, but this is not accessible and the meaning of the grayed color is not obvious. Maybe something like: \u0027catch block (marked as hidden)\u0027\n-------------------------------------------------\nAll in all we\u0027re close now, ui wise at least, maybe we should use some images in the tree to add a bit of color. I\u0027ll attach a screen shot showing my proposed changes.",
    "Created an attachment (id\u003d75769)\nproposed chages\n\n",
    "As I said, I think we are almost there with the UI, but I did not review the code at all and as long as I don\u0027t get a go from Platform I will not review the code, as this would just be a waste of time.\n\nTod? Boris? What do you think?",
    "Created an attachment (id\u003d75791)\nIcons to be used with templates view\n\n",
    "Created an attachment (id\u003d75794)\nTemplatesView - implemented suggested improvements\n\n(In reply to comment #46)\n\u003e --------------------------------------------------\n\u003e View should open where the outline view is shown.\n\nThis is handled by JDT perspective factory. Fixed. I am also opening the view along with the outline\nview.\n\n\u003e --------------------------------------------------\n\u003e Don\u0027t use italic for context nodes. Maybe bold. Maybe something like:\n\u003e \u0027Java (24 Templates)\u0027. No description.\n\nI was uncomfortable with the decoration. I removed the decoration. The context nodes show \u0027Java (24 templates, 3 hidden)\n\n\u003e -------------------------------------------------\n\u003e Use the ColumnLabelProvider to set the font and color of columns\n\nThanks for the heads-up. TemplateLabelProvider now implements ITableColorProvider.\n\n\u003e -------------------------------------------------\n\u003e Don\u0027t resize the column width when resizing the view\n\nDone.\n\n\u003e -------------------------------------------------\n\u003e Should be able to move a template to another context\n\nIt is already provided. You can either use edit/DnD or cut\u0026paste. Is it not working that way?\n\n\u003e -------------------------------------------------\n\u003e I changed my opinion regarding double click. DnD does not allow to wrap a\n\u003e template around a word/line selection, whereas double click insertion does\n\u003e allow that.\n\nThanks. Another nice feature is that if a line/word selection does not exist in the template - the template replaces the selected buffer. This is also quite handy.\n\n\u003e -------------------------------------------------\n\u003e I think \u0027disabled\u0027 templates will lead to confusion. The preference page seams\n\u003e not to use the term disabled, which is good for us. We can use the term \u0027hide\u0027\n\u003e in the context of the view. The action would be renamed to \u0027Show hidden\n\u003e templates\u0027 (or so) and a context menu action should be added to \u0027hide\u0027\n\u003e respectively \u0027show\u0027 a template. I like that the hidden templates are drawn\n\u003e grayed when shown, but this is not accessible and the meaning of the grayed\n\u003e color is not obvious. Maybe something like: \u0027catch block (marked as hidden)\u0027\n\nI changed all the labels to hidden. I am still uncomfortable with the terminology as everywhere in the code it is referred to as disabled/enabled.\n\n\u003e -------------------------------------------------\n\u003e All in all we\u0027re close now, ui wise at least, maybe we should use some images\n\u003e in the tree to add a bit of color. I\u0027ll attach a screen shot showing my\n\u003e proposed changes.\n\u003e \n\nThanks. It really helped. I am happy with the icons used now - but open to any changes others suggest.\n\nBesides the above changes, I cleaned up the JavaTemplatesPage code. Now it uses JavaContext and JavaDocContext extensions for drop position checking - and seems to be much more reliable than the older version.\n\n",
    "(In reply to comment #48)\n\u003e As I said, I think we are almost there with the UI, but I did not review the\n\u003e code at all and as long as I don\u0027t get a go from Platform I will not review the\n\u003e code, as this would just be a waste of time.\n\u003e \n\u003e Tod? Boris? What do you think?\n\u003e \n\nI really hope this becomes part of the eclipse standard. This is quite useful.\n\nPlease do review the code even otherwise when you get some time. I am sure the feedback will be quite useful to me. As it is, thanks to you and Daniel, I learned quite a bit from this work.\n\n-- KD\n\n",
    "(In reply to comment #48)\n\u003e As I said, I think we are almost there with the UI, but I did not review the\n\u003e code at all and as long as I don\u0027t get a go from Platform I will not review the\n\u003e code, as this would just be a waste of time.\n\u003e \n\u003e Tod? Boris? What do you think?\n\nSorry for not responding earlier, I was swamped with other work.\n\nIt seems that the best way forward would be to push GEF\u0027s PaletteView down into the platform (or IDE?).  I would be fine with that given that it\u0027s another rather general PageBookView that may be used by a number of other projects, not all of which can/should depend on GEF.  However, I am sure that this has been discussed before - does someone else have pointers to a previous discussion about this?",
    "I personally think moving GEF into the platform (distribution) would be a good idea. \n\nIt\u0027s runtime is relatively small, and is relatively stable (i.e. should not need a lot of support or \"new function\"). I\u0027m not sure where it might have been discussed in writing, but in informal discussions, the reasons for not doing it earlier was that there was no reason to make platform larger, if the platform didn\u0027t use it. So ... maybe that\u0027s changing? I\u0027m adding Anthony (I think its current lead) for awareness/comment. \n\n",
    "(In reply to comment #52)\n\u003e It seems that the best way forward would be to push GEF\u0027s PaletteView down into\n\u003e the platform (or IDE?).  I would be fine with that given that it\u0027s another\n\u003e rather general PageBookView that may be used by a number of other projects, not\n\u003e all of which can/should depend on GEF.  However, I am sure that this has been\n\u003e discussed before - does someone else have pointers to a previous discussion\n\u003e about this?\n\u003e \n\nIMO, palette view and templates view are two different entities. Taking UML class diagram editor as an example a palette view provides objects like classes, attributes, associations etc. These are the basic elements that can be placed on the canvas. This list should be owned by the editor and is not editable by the user. The templates view for the editor may provide diagram templates for GoF patterns. This should be customizable by the user. I can\u0027t think of a need for a palette view for a text based editor - I might be wrong at that.\n\nBoth PaletteView and TemplatesView share the same structure and code with ContentOutline view. All of them are tightly coupled with editor and change their content depending on the current editor. May be a higher level abstraction needs to be factored out of these.\n\n",
    "(In reply to comment #52)\n\u003e It seems that the best way forward would be to push GEF\u0027s PaletteView down into\n\u003e the platform (or IDE?).  I would be fine with that given that it\u0027s another\n\u003e rather general PageBookView that may be used by a number of other projects, not\n\u003e all of which can/should depend on GEF.  However, I am sure that this has been\n\u003e discussed before - does someone else have pointers to a previous discussion\n\u003e about this?\n\nGEF\u0027s PaletteView is simply a PageBookView. All pages in PaletteView implement PalettePage, which is simply a IPageBookViewPage.\n\nHowever, the next step is the definition of a PaletteViewerPage, which is the base implementation of a PalettePage. It is a full GEF object requiring a GEF PaletteViewerProvider and a GEF EditDomain (command stack).\n\nSo PaletteView is a GEF Object, so you need to be a GEF based editor to make use of it.  \n\n\n\n\n",
    "(In reply to comment #55)\n\u003e GEF\u0027s PaletteView is simply a PageBookView. All pages in PaletteView implement\n\u003e PalettePage, which is simply a IPageBookViewPage.\n\u003e \n\u003e However, the next step is the definition of a PaletteViewerPage, which is the\n\u003e base implementation of a PalettePage. It is a full GEF object requiring a GEF\n\u003e PaletteViewerProvider and a GEF EditDomain (command stack).\n\u003e \n\u003e So PaletteView is a GEF Object, so you need to be a GEF based editor to make\n\u003e use of it.  \n\u003e \n\nSo we could push down PaletteView and IPalettePage to ui.views. GEF can then keep its PaletteViewerPage base implementation in GEF and we could provide a base implementation in ui/workbench/texteditor? Our implementation would be based on text templates (the patch provided by Kara). \n\nHow does that sound?",
    "(In reply to comment #56)\n\u003e So we could push down PaletteView and IPalettePage to ui.views. GEF can then\n\u003e keep its PaletteViewerPage base implementation in GEF and we could provide a\n\u003e base implementation in ui/workbench/texteditor? Our implementation would be\n\u003e based on text templates (the patch provided by Kara). \n\u003e \n\u003e How does that sound?\n\u003e \n\nBenno:\n\nI have few reservations with this suggestion.\n\n1. A palette view does not make sense for text editors. Palette is strongly associated with graphics.\n2. This will foreclose having templates/templatesview for graphical editors.\n3. Templates terminology is already in widespread use - changing it might not be a good idea.\n\nMy suggestion will be to add TemplatesView/ITemplatesPage to the ui.views. PaletteView/IPalettePage should stay with GEF.\n\n",
    "(In reply to comment #56)\n\u003e So we could push down PaletteView and IPalettePage to ui.views. GEF can then\n\u003e keep its PaletteViewerPage base implementation in GEF and we could provide a\n\u003e base implementation in ui/workbench/texteditor? Our implementation would be\n\u003e based on text templates (the patch provided by Kara). \n\u003e \n\u003e How does that sound?\n\nThis is what I was thinking too.  We need to be very conservative about which views end up in the platform as universally applicable views.  A palette view sounds universally applicable to me. I am not convinced that a template view makes sense for everybody.",
    "Created an attachment (id\u003d76655)\nPalette and Templates view with UML2 class editor\n\nI could not figure out how to get the thumbnail for stored pattern. Otherwise, this is a screenshot from a working prototype that uses TemplatesPage and implements it for DiagramDocumentEditor from GMF. In effect it provides the templates for all the editors based on this.\n\nAfter having a look at it, I feel the TemplatesPage can be used for both text based as well as graphical editors. There is very little that is dependent on a text editor there.\n\n",
    "(In reply to comment #58)\n\u003e This is what I was thinking too.  We need to be very conservative about which\n\u003e views end up in the platform as universally applicable views.  A palette view\n\u003e sounds universally applicable to me. I am not convinced that a template view\n\u003e makes sense for everybody.\n\u003e \nI have given some reasons in comment #54 and comment #57. Please also look at the screen shot I  uploaded that shows both palette view and templates view. I hope that will make it clear as to what I have in mind.\n\nNow that M1 is out, can someone look at it and see whether this can go into M2?\n\n",
    "!!! This answer only targets where to put the Palette/Template view. !!!\n\nFor WTP I see another problem with the Palette view: its Snippet view is not just tied to WTP editors but can be used along with other editors (e.g. the Java editor) as well. WTP can only migrate to the Palette view if Platform UI provides an extension point so that more than one client can provide Palette items for the active editor. This however sounds like more work for Platform UI than just put in some placeholder and probably also means a major rework for WTP. Boris, Nitin please comment.\n\nAn alternative approach would be to implement the view in org.eclipse.ui.editors but not register it via plugin.xml. As far as I know if then two clients register that view under the same ID (which Platform Text would make public) then only one view would appear in the UI and that view would then be able to show the templates for the active editor i.e. exactly like the Outline view does.",
    "(In reply to comment #61)\n\nI could see us adding another PageBookView, but not a view with internal structure so that multiple plug-ins can contribute items. The latter would not only mean more work, but also that we at the Platform UI would have to decide how palettes look like for any editor. Given the differences between textual and graphical editors, this does not seem like a good idea to me.",
    "!!! This answer only targets the code itself i.e. code review. !!!\n\nThis is another round of code review. Templates(view) and TemplatePage(s) as a whole are not yet reviewed.\n\nPlease remove the Ant stuff from the patch. Once the Templates view is committed to HEAD you can file a bug report against Ant and attach the code there.\n\n\u003e16. handleCursorPositionChanged: It is necessary.\nNo way ;-). You must not update the view each time the caret or cursor position changes. Use a post selection listener (the Java editor does the same to update the Outline view).\n\n- never ever make something API if not really needed, e.g. \n  ITemplatesViewImageConstants\n\n- TemplatesViewImages: this is overkill. Simply use the plug-ins image registry.\n\n- TemplatePages should not offer API to insert a template - this looks like a \n  layer breaker and needs another solution.\n\n- updating of the page needs to be generalized so that not every single editor\n  needs to do it.\n\n- same for the ClipboardOperationAction: we need to provide a generic extensible\n  action so that we don\u0027t copy the code all over the place.\n\n- JavaContextExtension looks strange and pollutes the context class hierarchy\n\n- creating your own compilation unit in JavaContextExtension  is not needed - \n  you can get it directly from the Java editor\n\n- move the Templates view classes into *.templates.view package(s).\n\n- field naming conventions sometimes not correctly used. Use\n  - f* for non-static non-final\n  - fg* for static non-final\n  - big letters for constants i.e. static final\n\n- rename the view to TemplatesView (almost all out views end with \"View\")\n\n- copyright for files added in 2007 must look like:\n   * Copyright (c) 2007\n  not:\n   * Copyright (c) 2000, 2007\n\n- add your credential the same in all files and use this format.\nName (company if applicable) - text - \u003cfull bug url\u003e\ne.g.:\nDakshinamurthy Karra - Templates view - https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d69581",
    "!!! This now about the UI / usability. !!!\n- end sentences with a \u0027.\u0027 and use similar wording as in the Outline view i.e. \"Templates are not available.\"\n\n- we don\u0027t use \u0027Preference Page...\u0027 - just \u0027Preferences...\u0027\n\n- don\u0027t use generic strings: if you remove one template use singular and not plural\n\n- DnD causes exceptions when I drag a context (i.e. a parent node)\n\n- \u003e4. DnD is only copy mode. You can DnD a template into another context and the\n\u003etemplate is created in that context.\nIt should be possible to move the template to another context as well\n\n- \u0027Copy\u0027 is missing from the context menu\n\n- if you want to support copying and moving templates from one\n  context to the other then you also need to enable this via Copy/Paste\n  and hence add it to the context menu too.\n\n- \u0027Collapse or Expand...\u0027 is strange and we have this nowhere in the UI\n  \u003d\u003d\u003e either remove it completely or replace it with a \u0027Collapse All\u0027\n\n- casing of tool tips is wrong, e.g. \u0027Link with editor\u0027 must be\n  changed to \u0027Link with Editor\u0027\n\n- \u0027Link with Editor\u0027 state must be adopted by next editor which gets\n  opened. This is not the case.\n\n- Remove the \u0027hidden\u0027 stuff completely: this also makes\n  the labels shorter (also remove the template count). Otherwise you need to provide support to hide and\n  show templates too and that\u0027s overkill. This isn\u0027t used that often.\n\n- use \u0027Java\u0027, \u0027Javadoc\u0027 and SWT (uppercase initial letter - except for SWT)\n\n- I would remove the option to paste a snippet without dialog: without the\n  dialog the drop happens almost unnoticed. We can add it later should\n  someone complain about the dialog.\n\n- pasting snippets should generate a new name i.e. \"Pasted Snippet\"\n  \"Pasted Snippet 2\", \"Pasted Snippet 3\" etc.\n\n- SWT templates don\u0027t use the SWT template icon.\n\n- for read-only and Class files don\u0027t show the templates view contents i.e.\n  say \"Templates are not available.\".\n",
    "\u003e11. TemplatePreferencePage - I reverted back. Changed the visibility of\n\u003eEditTemplateDialog in TemplatePreferencePage to public so that I can access it\n\u003efrom TemplatesPage.\nYou can access a protected class from the same package - no need to change that visibility.",
    "This got missed by the big amount of feedback: it looks nice and goes into the right direction ;-)",
    "(In reply to comment #63)\n\u003e Please remove the Ant stuff from the patch. Once the Templates view is\n\u003e committed to HEAD you can file a bug report against Ant and attach the code\n\u003e there.\n\u003e \n\nWill do. The reason I did this for AntEditor also is to ensure that the API for TemplatesPage is generic and useful for other editors. Otherwise, unknowingly I might put some dependencies on JavaEditor itself.\n\n\u003e \u003e16. handleCursorPositionChanged: It is necessary.\n\u003e No way ;-). You must not update the view each time the caret or cursor position\n\u003e changes. Use a post selection listener (the Java editor does the same to update\n\u003e the Outline view).\n\u003e \nCode does not lie ;-). I tried doing the update in the post selection listener and that does not work for Java editor (it works for AntEditor). I did not look at the code, but my guess is that JavaEditor overrides the selection listener to behave differently than AbstractTextEditor. For example, the JavaDoc and the associated element are considered as a single unit and a selection event is fired only when another element is selected. Since we want different templates to be displayed for JavaDoc and Java code, this does not work properly.\n\n\u003e - never ever make something API if not really needed, e.g. \n\u003e   ITemplatesViewImageConstants\n\u003e \n\u003e - TemplatesViewImages: this is overkill. Simply use the plug-ins image\n\u003e registry.\n\u003e \n\nThe plugin does not have an image registry. That is why I created separate classes for these images (and I followed what seemed to be the conventions for creating images in eclipse). How shall we go about it in this case? Create an image registry at the plugin level?\n\n\u003e - JavaContextExtension looks strange and pollutes the context class hierarchy\n\u003e \n\u003e - creating your own compilation unit in JavaContextExtension  is not needed - \n\u003e   you can get it directly from the Java editor\n\u003e \nThanks for the info. I will look into this. I do not consider the code in JavaTemplatesPage as final. I tried to reduce the amount of modifications done in the JDT per-se.\n\nThanks for the rest of the feedback.\n\n(Note: We are in different timezones - so bear with me as I do the modifications and post them tomorrow.)",
    "(In reply to comment #64)\n\u003e - \u0027Collapse or Expand...\u0027 is strange and we have this nowhere in the UI\n\u003e   \u003d\u003d\u003e either remove it completely or replace it with a \u0027Collapse All\u0027\n\u003e \nI will replace it with \u0027collapse all\u0027.\n\n\u003e - Remove the \u0027hidden\u0027 stuff completely: this also makes\n\u003e   the labels shorter (also remove the template count). Otherwise you need to\n\u003e provide support to hide and\n\u003e   show templates too and that\u0027s overkill. This isn\u0027t used that often.\n\u003e \nDo you want the hidden templates to be shown? We can remove all other options but still show the hidden templates also with greyed fonts. Since inserting an hidden template still works the same way - it should be OK.\n\n\u003e - use \u0027Java\u0027, \u0027Javadoc\u0027 and SWT (uppercase initial letter - except for SWT)\n\u003e \nThese are the names given by JDT as TemplateContext names. I don\u0027t think they should be touched.\n\n\u003e - I would remove the option to paste a snippet without dialog: without the\n\u003e   dialog the drop happens almost unnoticed. We can add it later should\n\u003e   someone complain about the dialog.\n\u003e \nI agree with you on this. But Benno feels that we should not have a dialog and I feel that we should have a dialog. Seeing as it is we have two view points among developers, may be we should keep it?\n\n\u003e - SWT templates don\u0027t use the SWT template icon.\n\u003e \nI did not understand. Can you clarify?\n\n\u003e - for read-only and Class files don\u0027t show the templates view contents i.e.\n\u003e   say \"Templates are not available.\".\n\u003e \nHere I differ. It is pretty useful to cut some code from a class/readonly file and paste it into templates for using in our own code. Since the drop is not supported (in case of readonly files, we ask the used whether to make it writeable) - this should be fine.\n\n",
    "(In reply to comment #66)\n\u003e This got missed by the big amount of feedback: it looks nice and goes into the\n\u003e right direction ;-)\n\u003e \nThanks.\n\n-- KD\n\n",
    "\u003eThe plugin does not have an image registry.\nEvery UI plug-in has one. You can use: \nTextEditorPlugin.getDefault().getImageRegistry();\n\n\u003e\u003e \u003e16. handleCursorPositionChanged:\nOK, we/I can take a look at this later. As noted this sync code needs to be generalized (pushed down) anyway.\n\n\u003eWill do. The reason I did this for AntEditor also is to ensure that\nThat\u0027s good. Keep on doing that but post it a separate patch.\n\n\u003eDo you want the hidden templates to be shown? \nI would completely remove them. This functionality is rarely used and if someone disable the template on the preference it is pretty safe to not show it in the Templates view either.\n\n\u003eThese are the names given by JDT as TemplateContext names. I don\u0027t think they\n\u003eshould be touched.\nIndeed. I filed bug.\n\n\u003eI did not understand. Can you clarify?\nUse code assist to add an SWT template and you\u0027ll see that those templates have a different icon. Ah - just saw you also don\u0027t need the template icon used for normal text templates in content assist. We should use the same icon.\n\n- read-only files:\nPoint taken ;-) But if linking is enabled the view should show nothing as no templates are available.\n\n\nAh, and two other things I noticed just a few minutes ago while using it:\n- DnD inside the view needs to auto-scroll if at the border.\n- the local tool bar should also get an \u0027Insert Template\u0027 button.",
    "(In reply to comment #68)\n\u003e \u003e - I would remove the option to paste a snippet without dialog: without the\n\u003e \u003e   dialog the drop happens almost unnoticed. We can add it later should\n\u003e \u003e   someone complain about the dialog.\n\u003e \u003e \n\u003e I agree with you on this. But Benno feels that we should not have a dialog and\n\u003e I feel that we should have a dialog. Seeing as it is we have two view points\n\u003e among developers, may be we should keep it?\n\nAhh, I thought a dialog is shown when dropping a template into an editor. But a dialog is shown when dropping a snipped into the template view. Showing a dialog when creating a new template is fine. ",
    "\u003e\u003eThese are the names given by JDT as TemplateContext names. I don\u0027t think they\n\u003e\u003eshould be touched.\n\u003eIndeed. I filed bug.\nIt\u0027s bug 202239.",
    "Created an attachment (id\u003d77830)\nIcons to be used with templatesview\n\n",
    "Created an attachment (id\u003d77831)\nTemplatesView - implemented suggested improvements\n\nI implemented all of the comments/suggestions made by Dani with an exception. Few comments:\n\n1. I factored TemplatesPage into TemplatesPage and TextEditorTemplatesPage. The TemplatesPage can be used by any editor that uses jface text template infrastructure. TextEditorTemplatesPage can be used by editors that use AbstractTextEditor.\n2. handleCursorPositionChanged: Post selection listener works - sorry, Dani. I somehow missed the *post* part of it and always using SelectionListener which did not work. Now it works.\n3. ClipBoardOperation: Again by using AbstractTextEditor#setAction/getAction this can be avoided. However, can someone please look into the way I implemented it in TextEditorTemplatesPage#setupPasteOperation()?\n4. Readonly editor and Templates: Implementing not showing the templates is painful (the default message is shown by TemplatesView, not TemplatesPage). Besides this, when we drop a snippet into the TemplatesView we need the tree to be visible. My suggestion is to leave it as it is.\n\nPlease give your comments/suggestions.\n\n",
    "(In reply to comment #74)\n\u003e Created an attachment (id\u003d77831) [details]\n\u003e TemplatesView - implemented suggested improvements\n\nMy review of TemplatesPage:\n\n------------------------------------------------------------------------\nThe tree flickers on context switch. In TemplatesPage.refresh write:\n\nfTreeViewer.getTree().setRedraw(false);\ntry {\n\tfTreeViewer.refresh();\n\tfTreeViewer.expandAll();\n} finally {\n\tfTreeViewer.getTree().setRedraw(true);\n}\n-------------------------------------------------------------------------\nThe icons and +/- signs are too small. Compare i.e. with problems view. The reason is that context.gif is not 16x16 pixel in size.\n-------------------------------------------------------------------------\nUse org.eclipse.ui.internal.texteditor.PixelConverter instead of something like gc.stringExtent(\"XXXXXXXXXXXXXXX\").x;\n-------------------------------------------------------------------------\nUse com.ibm.icu.text.Collator.compare(String, String) to compare strings, always! Write something like Collator.getInstance().compare(a, b); \n\nSee javadoc of java.lang.String.compareToIgnoreCase(String):\n\u0027Note that this method does _not_ take locale into account, and will result in an unsatisfactory ordering for certain locales.\u0027\n-------------------------------------------------------------------------\nWhy do you override isSorterProperty in TemplateViewerComparator?\n-------------------------------------------------------------------------\nIn TemplatesContentProvider.getTemplates(String) check that the template has not been deleted. I would add a method to TemplateStore: getTemplatesData(String contextTypeId) with a similar implementation as the existing getTemplates(String contextTypeId).\n-------------------------------------------------------------------------\nRewrite something like\nif (isActiveContext(contextType) || !fLinkWithEditor)\nto\nif (!fLinkWithEditor || isActiveContext(contextType))\nfor performance and correctness reasons: Code which is not executed can not fail and needs no cpu time. Infix expressions are evaluated from left to right in java.\n--------------------------------------------------------------------------\nTemplatesPage.updateContextTypes(String[]) should be final\n--------------------------------------------------------------------------\nyou do not pass fControl to createTemplateTree but to setupPatternViewer, be consistent (pass it to both). Although you pass it to setupPatternViewer you do also reference the field fControl in there. Once you call it createXXXX then you call it setupXXXX, but both method do create something.\n--------------------------------------------------------------------------\nGet rid of fields:\nfSashSize, fLinkWithEditorAction, fNameWidth, fDescriptionWidth\nEach field increases the possible states an object can have and makes it therefore harder to understand OO code.\n--------------------------------------------------------------------------\nI _highly_ recommend to you to get rid of fields fSelectedTemplateList and fSelectedType. Always ask the viewer directly for the selection instead, otherwise you have to keep to models in sync which is painfully and very though to maintain.\n--------------------------------------------------------------------------\nI think you can safely get rid of fContextMenu: The menu is disposed when the tree it is attached to is disposed.\n--------------------------------------------------------------------------\nWhy can I only drag a single template and not multiple (to i.e. drop it into another context)? -\u003e Get rid of fDNDTemplate. Maybe you need two transfer types: Template transfer and TemplatePersistencetData transfer?\n--------------------------------------------------------------------------\n\nEnhancement requests:\n-------------------------------------------------------------------------\nIt would be very nice if the tree could remember the collapsed/expanded contexts.\n-------------------------------------------------------------------------\nAllow to sort by column\n-------------------------------------------------------------------------\n\nThat\u0027s it for now, more to come...\n\nAhh and yes agreed:\n\u003e This got missed by the big amount of feedback: it looks nice and goes into the\n\u003e right direction ;-)",
    "(In reply to comment #75)\nThanks for the feedback. Few comments below:\n\u003e -------------------------------------------------------------------------\n\u003e Use org.eclipse.ui.internal.texteditor.PixelConverter instead of something like\n\u003e gc.stringExtent(\"XXXXXXXXXXXXXXX\").x;\n\nI want to keep TemplatesPage free of texteditor dependency. Depending where ITemplatesPage and TemplatesView landup finally, TemplatesPage should also go there.\n\n\u003e -------------------------------------------------------------------------\n\u003e Use com.ibm.icu.text.Collator.compare(String, String) to compare strings,\n\u003e always! Write something like Collator.getInstance().compare(a, b); \n\u003e \n\nProblem with Cut\u0026Paste ;-). The same code exists in TemplatePreferencePage. How do we go about fixing that? Do we raise a bug against it and provide a patch or fix it with this patch itself?\n\n\u003e -------------------------------------------------------------------------\n\u003e Why do you override isSorterProperty in TemplateViewerComparator?\n\nAgain another Cut\u0026Paste problem. Having a look at the Java doc, I think it is required to be overridden and return true. I will check it again.\n\n\u003e -------------------------------------------------------------------------\n\u003e In TemplatesContentProvider.getTemplates(String) check that the template has\n\u003e not been deleted. I would add a method to TemplateStore:\n\u003e getTemplatesData(String contextTypeId) with a similar implementation as the\n\u003e existing getTemplates(String contextTypeId).\n\nPassing false to TemplateStore#getTemplateData() will not return deleted templates. This is OK.\n\n\u003e Get rid of fields:\n\u003e fSashSize, fLinkWithEditorAction, fNameWidth, fDescriptionWidth\n\u003e Each field increases the possible states an object can have and makes it\n\u003e therefore harder to understand OO code.\nThe fields are a left-over from the earlier version that updates preferences on dispose(). Fixed.\n\n\u003e --------------------------------------------------------------------------\n\u003e I _highly_ recommend to you to get rid of fields fSelectedTemplateList and\n\u003e fSelectedType. Always ask the viewer directly for the selection instead,\n\u003e otherwise you have to keep to models in sync which is painfully and very though\n\u003e to maintain.\nThese are used quite often and calling a function to get the current selection and create these each and every time does not look good.\n\n\u003e --------------------------------------------------------------------------\n\u003e I think you can safely get rid of fContextMenu: The menu is disposed when the\n\u003e tree it is attached to is disposed.\nThis piece is picked from JavaOutlinePage. I am not sure whether this is needed or not - will do a little experimentation and remove it if not needed.\n\n\u003e --------------------------------------------------------------------------\n\u003e Why can I only drag a single template and not multiple (to i.e. drop it into\n\u003e another context)? -\u003e Get rid of fDNDTemplate. Maybe you need two transfer\n\u003e types: Template transfer and TemplatePersistencetData transfer?\nToo much work for too little benefit ;-). We do not need another transfer for implementing this. Let us consider it as an enhancement request.\n\n\u003e -------------------------------------------------------------------------\n\u003e It would be very nice if the tree could remember the collapsed/expanded\n\u003e contexts.\nMight not be very useful. As I understand this, you are suggesting that the tree should remember the state for each context - am I right?\n\n\u003e -------------------------------------------------------------------------\n\u003e Allow to sort by column\n\u003e -------------------------------------------------------------------------\n\u003e \nYup. Will attempt once this finds a home ;-).\n\n\u003e That\u0027s it for now, more to come...\n\u003e \nWaiting....\n",
    "(In reply to comment #76)\n\u003e \u003e -------------------------------------------------------------------------\n\u003e \u003e Use org.eclipse.ui.internal.texteditor.PixelConverter instead of something like\n\u003e \u003e gc.stringExtent(\"XXXXXXXXXXXXXXX\").x;\n\u003e \n\u003e I want to keep TemplatesPage free of texteditor dependency. Depending where\n\u003e ITemplatesPage and TemplatesView landup finally, TemplatesPage should also go\n\u003e there.\n\u003e \nThe reason I did not move TemplatesPage currently is that we need a dependency on jface.text that is not available with ui.views. Pending the final decision on where it will be hosted, I am deferring this refactoring.\n\n",
    "(In reply to comment #76)\n\u003e Problem with Cut\u0026Paste ;-). The same code exists in TemplatePreferencePage. \n\u003e How do we go about fixing that? Do we raise a bug against it and provide a\n\u003e patch or fix it with this patch itself?\n\nUuuh, ok, good point;-) Probably got missed when fixing bug 157093, have to ask Dani why Collator is not used. I can\u0027t see any reason why to do a comparToIgnoreCase.\n\n\u003e Too much work for too little benefit ;-). We do not need another transfer for\n\u003e implementing this. Let us consider it as an enhancement request.\n\nOk, agreed, but we must at least allow to drag multiple selected templates: 1. it\u0027s feels strange that I can\u0027t drag if multiple selection. 2. There may be drop targets (in the future) which can handle drop of multiple templates.\n\n\u003e Might not be very useful. As I understand this, you are suggesting that the\n\u003e tree should remember the state for each context - am I right?\n\nYes, remember for each context. Useful because i.e. if I do Swing programming then I\u0027m not interested in SWT templates. Either there must be a way to hide a context or if the state is remembered I can collapse the SWT context node and don\u0027t have to look at its children ever again. Hint: This is only an example, we won\u0027t show SWT context if SWT is not on the classpath. But even if it is I still may not be interested in SWT templates.\n\n\u003e \u003e --------------------------------------------------------------------------\n\u003e \u003e I _highly_ recommend to you to get rid of fields fSelectedTemplateList and\n\u003e \u003e fSelectedType. Always ask the viewer directly for the selection instead,\n\u003e \u003e otherwise you have to keep to models in sync which is painfully and very though\n\u003e \u003e to maintain.\n\u003e These are used quite often and calling a function to get the current selection\n\u003e and create these each and every time does not look good.\n\nTrust me, get rid of it! This will make the code much cleaner, i.e. look at addTemplate:\n...\nfSelectedTemplateList.clear();\nfSelectedTemplateList.add(data);\nchangeSelection();\n\nchangeSelection:\nif (isSingleTemplateSelected()) //yes I know that\n\tfTreeViewer.setSelection(\n              new StructuredSelection(fSelectedTemplateList.get(0)), true);\n              //I know the first element, it\u0027s data!\nelse\n\tfTreeViewer.setSelection(new StructuredSelection());//will never hit\nupdateSelectedItems();\n\nupdateSelectedItems:\nfSelectedTemplateList.clear();//oh no! all for nothing!\n...(lot of code: retrieving selection from tree, \n             filling into fSelectedTemplateList) //I know the result!\nupdatePatternViewer(getSelectedTemplate());\n\ngetSelectedTemplate: //Mmmm what might be the result? it\u0027s data.getTemplate!\nif (isSingleTemplateSelected())\n return ((TemplatePersistenceData)fSelectedTemplateList.get(0)).getTemplate();\n\nThis are like 50 lines of very hard to understand code which do basically nothing. You can do the same in about 1 line of code (fTreeViewer.setSelection(new StructuredSelection(data), true);). This does not only not look good it is also bad.\n\n----------------------------------------------------------------------------\nJust saw this:\nString suffix\u003d fSelectedTemplateList.size() \u003d\u003d 1 ? \"\" : \"s\";\nString title\u003d NLSUtility.format(\"Removing Template{0}\", new Object[] {suffix});\n\nThis only works for English. Other languages may have other/no ways to express plural.",
    "(In reply to comment #78)\n\u003e ----------------------------------------------------------------------------\n\u003e Just saw this:\n\u003e String suffix\u003d fSelectedTemplateList.size() \u003d\u003d 1 ? \"\" : \"s\";\n\u003e String title\u003d NLSUtility.format(\"Removing Template{0}\", new Object[] {suffix});\n\u003e \n\u003e This only works for English. Other languages may have other/no ways to express\n\u003e plural.\n\u003e \nHow to do this properly? Do we keep two NLS strings - one for singular and one for plural?\n",
    "\u003eHow to do this properly? Do we keep two NLS strings - one for singular and one\n\u003efor plural?\nYep ;-)",
    "Created an attachment (id\u003d78536)\nIcons to be used with TemplatesView\n\n",
    "Created an attachment (id\u003d78538)\nTemplatesView - implemented suggested improvements\n\nOne more update. Adds the ability to DnD multiple templates within the Templates view. Remembers the collapse/expand state of the contexts.\n\nNote-1: The fSelectedTemplateList can\u0027t be removed (though I cleaned up the code quite a bit in this area and changed it into an array). The reason is that once a drag operation starts the selection is overwritten.\n\nNote-2: The TemplateTransfer uses TemplatePersistanceData. Since these objects are *referred* to by the TemplateStore these are transferred as java objects. The transfer can work only within the same instance of eclipse. IMO, this is OK.\n\n\n",
    "(In reply to comment #82)\n\u003e Created an attachment (id\u003d78538) [details]\n\u003e TemplatesView - implemented suggested improvements\n\u003e \n\u003e One more update. Adds the ability to DnD multiple templates within the\n\u003e Templates view. Remembers the collapse/expand state of the contexts.\n\nCool! Thanks!\n\n\u003e Note-1: The fSelectedTemplateList can\u0027t be removed (though I cleaned up the\n\u003e code quite a bit in this area and changed it into an array). \n\nNever use exceptions for control flow! As you do in setSelectedTemplates. See i.e. here: http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page\u003d2 In short, throwing exceptions is expensive. The runtime must switch context and generate a stack trace. And it is hard to read/understand, see, you need a comment to explain what you do... Also, what if Iterator#hasNext has a bug which leads to a ClassCastException?\n\n\u003e The reason is that once a drag operation starts the selection is overwritten.\n\nSorry, I don\u0027t understand.\n\n\u003e Note-2: The TemplateTransfer uses TemplatePersistanceData. Since these objects\n\u003e are *referred* to by the TemplateStore these are transferred as java objects.\n\u003e The transfer can work only within the same instance of eclipse. IMO, this is\n\u003e OK.\n\nWhy don\u0027t you use Template in TemplateTransfer?\nWhy do you call getSelectedTemplates() in EditorDropTarget? Use event.data?\nWhy do you set the selection in the view when dropping into editor?\nWhy is editor drop target part of TemplatePage? Shouldn\u0027t this code better be in AbstractTextEditor along with setupEditorDropTarget?\nWhat is getTransfers and getTemplateDataFromDrop? Wouldn\u0027t it be enough if the view is a drop target for TextTransfers? Same for getTemplateDataFromClipboard?\n\nThe undo first character bug is back. You don\u0027t need to insert the first character into the document, use CompilationUnitContext#forceEvaluation(true) instead.",
    "(In reply to comment #83)\n\u003e \u003e Note-1: The fSelectedTemplateList can\u0027t be removed (though I cleaned up the\n\u003e \u003e code quite a bit in this area and changed it into an array). \n\u003e \n\u003e Never use exceptions for control flow! As you do in setSelectedTemplates. See\n\u003e i.e. here: http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page\u003d2\n\u003e In short, throwing exceptions is expensive. The runtime must switch context and\n\u003e generate a stack trace. And it is hard to read/understand, see, you need a\n\u003e comment to explain what you do... Also, what if Iterator#hasNext has a bug\n\u003e which leads to a ClassCastException?\n\u003e \nThanks. Fixed.\n\n\u003e \u003e The reason is that once a drag operation starts the selection is overwritten.\n\u003e \n\u003e Sorry, I don\u0027t understand.\n\u003e \nOnce the drag starts the tree selection is reset to the item below the current position of the cursor. The original selection when the drag started is lost.\n\n\u003e \u003e Note-2: The TemplateTransfer uses TemplatePersistanceData. Since these objects\n\u003e \u003e are *referred* to by the TemplateStore these are transferred as java objects.\n\u003e \u003e The transfer can work only within the same instance of eclipse. IMO, this is\n\u003e \u003e OK.\n\u003e \n\u003e Why don\u0027t you use Template in TemplateTransfer?\nBecause they can\u0027t be uniquely identified. Two templates can exist in the store with the same settings. Ofcourse we can use Template object references, but since the tree maintains TemplatePersistanceData using them is simpler.\n\n\u003e Why do you call getSelectedTemplates() in EditorDropTarget? Use event.data?\nNope. setDragData() is called just before the drop(). event.data is available only in drop().\n\n\u003e Why do you set the selection in the view when dropping into editor?\nBecause the selection highlight is removed after the drop. Atleast in OSX. May be a bug in DnD?\n\n\u003e Why is editor drop target part of TemplatePage? Shouldn\u0027t this code better be\n\u003e in AbstractTextEditor along with setupEditorDropTarget?\nI did this factoring for using it with the GMF editor. Basically, an editor should provide only the type of transfers it supports to be dropped into the templates view and ways to convert the selection into a template.\n\u003e What is getTransfers and getTemplateDataFromDrop? Wouldn\u0027t it be enough if the\n\u003e view is a drop target for TextTransfers? Same for getTemplateDataFromClipboard?\n\u003e \nSee the above answer. GMF editors use CustomDataTransfer not text transfer. I think this is a better way.\n\n\u003e The undo first character bug is back. You don\u0027t need to insert the first\n\u003e character into the document, use CompilationUnitContext#forceEvaluation(true)\n\u003e instead.\n\u003e \nIt was never fixed ;-). Some where in the JDT template evaluation (when import statements are being added) a begin/end compound change is being called. Try inserting a template that requires import statements and this will happen in regular insert also. ie. the template will be removed in one undo and import statements require another undo. Anyhow, once forceEvaluation() is called - this should not be a problem. I will check this out.\n\n-- KD\n\n",
    "Created an attachment (id\u003d79074)\nPicture of Contribution Questionnaire\n\nIn order to go further with this we need your personal input to the contribution questionnaire. Please answer all the questions from the attached image.",
    "Let\u0027s put the Templates view into Platform Text to support the Platform Text templates - and just those i.e. don\u0027t try to be generic and be able to host the Palette view or similar stuff \u003d\u003d\u003e move all the o.e.ui.views changes and the view ID constant to o.e.ui.workbench.texteditor. This also fixes the issue that the TemplatesPage doesn\u0027t implement ITemplatesPage. Also, TemplatesPage and TextEditorTemplatesPage can probably be folded together.\n\nI still see various new APIs that aren\u0027t needed. Please change that. E.g. the whole TemplatesPageImages class.",
    "(In reply to comment #86)\n\u003e Let\u0027s put the Templates view into Platform Text to support the Platform Text\n\u003e templates - and just those i.e. don\u0027t try to be generic and be able to host the\n\u003e Palette view or similar stuff \u003d\u003d\u003e move all the o.e.ui.views changes and the\n\u003e view ID constant to o.e.ui.workbench.texteditor. This also fixes the issue that\n\u003e the TemplatesPage doesn\u0027t implement ITemplatesPage. Also, TemplatesPage and\n\u003e TextEditorTemplatesPage can probably be folded together.\n\u003e \nOK.\n\n\u003e I still see various new APIs that aren\u0027t needed. Please change that. E.g. the\n\u003e whole TemplatesPageImages class.\n\u003e \n\nI am confused here. Since texteditor plugin does not have any class that defines the image ids, where do I put them? Putting them into TemplatesPage does not seem right.\n\n-- KD\n\n",
    "(In reply to comment #85)\n\u003e In order to go further with this we need your personal input to the\n\u003e contribution questionnaire. Please answer all the questions from the attached\n\u003e image.\n\u003e \n\nAny online version? Or you just want me to post the answers to this thread?\n\n-- KD\n\n",
    "Having the class is OK but it should be moved into an *.internal.* package.",
    "You don\u0027t have access to the online version. Please post the data here.",
    "(In reply to comment #83)\n\u003e The undo first character bug is back. You don\u0027t need to insert the first\n\u003e character into the document, use CompilationUnitContext#forceEvaluation(true)\n\u003e instead.\n\u003e \nI tried it with CompilationUnitContext#forceEvaluation(true) - unfortunately, it is not giving the right results ;-). For example, if we select some text and doubleclick a template:\n\n1. If the template does not use selection using a variable, then the template should replace the text.\n2. If the template uses selection, then the template is inserted as it is.\n\nThe (1) is not possible with this. There are few other problems. I am leaving it as it is for now.\n\n-- KD",
    "Created an attachment (id\u003d79118)\nIcons to be used with TemplatesView\n\n",
    "Created an attachment (id\u003d79120)\nTemplatesView - implemented suggestions\n\n1. Removed o.e.views dependency.\n2. Merged TemplatesPage and TextEditorTemplatesPage into TemplatesPage.\n3. Still keeping ITemplatesPage - useful if some editor needs to implement their own version of TemplatesPage.\n4. Created an *.internal.* package and removed the unneeded API\n5. TemplatesPage is cleaned up. API looks cleaner ;-).\n6. Uses PixelConvertor to calculate the initial widths.\n\n-- KD\n\n",
    "(In reply to comment #90)\n\u003e You don\u0027t have access to the online version. Please post the data here.\n\nHere we go:\n\nDescription: TemplatesView is a view provides easy access to the text editor templates using TemplatesPage. This view provides options for creating, modifying and deleting templates. Snippets from an editor can be dropped onto the view to create new templates. Templates can be copied/moved between contexts. A TemplatesPage implementation for Java editor is included.\n\nCryptography: No\n\nAuthors(s): Self\n\n-- KD\n\n",
    "Created an attachment (id\u003d79124)\nTemplatesView - fixed a bug with Cut\u0026Paste\n\nImplemented multiple selection handling for Cut\u0026Paste. Somehow I missed this out when implementing multiple selection for DnD. Sorry for that.\n\n",
    "\u003eAuthors(s): Self\nI have to fill out the form and hence I am \"self\" ;-)\n\nI need your\n- first and last name (I guess it\u0027s Dakshinamurthy, Karra but need to be sure)\n- organization if written for that company and not at \"home\"\n- phone number if possible\n",
    "(In reply to comment #96)\n\u003e \u003eAuthors(s): Self\n\u003e I have to fill out the form and hence I am \"self\" ;-)\n\u003e \nOOPS ;-)\n\u003e I need your\n\u003e - first and last name (I guess it\u0027s Dakshinamurthy, Karra but need to be sure)\nFirst Name: Dakshinamurthy\nLast Name: Karra\n\u003e - organization if written for that company and not at \"home\"\nOrganization: Jalian Systems Private Ltd. (Home \u003d\u003d work)\n\u003e - phone number if possible\nPhone: +918023432215\n\u003e \n\nThanks.\n\n-- KD\n\n\n",
    "IP review is now under way: https://dev.eclipse.org/ipzilla/show_bug.cgi?id\u003d1793\nNote: this is only accessible for committers.",
    "Where did you get the icons? Did you draw them yourself?\n\n\nWhile the IP process is ongoing there are some improvements I\u0027d like to see:\n- move the view constant into the view (\u0027ID\u0027)\n- move the help constant from the view into IAbstractTextEditorHelpContextIds\n- move the stuff from templates.view to templates as we only have three types\n  \u003d\u003d\u003e this also removes the change to the TemplatesPreferencePage\n- we don\u0027t need a message class per class but per package and since we move the\n  types into the templates package we can even get rid of both of them \u003d\u003d\u003e simply\n  move the string defs into TextEditorTemplateMessages and its properties file\n- move the view contribution (plugin.xml stuff) to JDT UI\n",
    "(In reply to comment #99)\n\u003e Where did you get the icons? Did you draw them yourself?\n\u003e \nAll the icons are from eclipse.org projects. Though I don\u0027t know where any individual one has come from :(. I just made a icons directory and un-jarred all icons from the plugins. There should not be any IP/Copyright issues there.\n\n\u003e \n\u003e While the IP process is ongoing there are some improvements I\u0027d like to see:\n\u003e - move the view constant into the view (\u0027ID\u0027)\n\u003e - move the help constant from the view into IAbstractTextEditorHelpContextIds\n\u003e - move the stuff from templates.view to templates as we only have three types\n\u003e   \u003d\u003d\u003e this also removes the change to the TemplatesPreferencePage\n\u003e - we don\u0027t need a message class per class but per package and since we move the\n\u003e   types into the templates package we can even get rid of both of them \u003d\u003d\u003e\n\u003e simply\n\u003e   move the string defs into TextEditorTemplateMessages and its properties file\n\u003e - move the view contribution (plugin.xml stuff) to JDT UI\n\u003e \n\nI will get some time next week and will work on these.\n\nThanks.\n\n-- KD\n\n",
    "Created an attachment (id\u003d80754)\nTemplatesView - implemented suggestions\n\nImplemented the suggestions.\n\n\u003e - move the view constant into the view (\u0027ID\u0027)\nDone. And this ID is being used in JavaPerspectiveFactory.\n\n\u003e - move the help constant from the view into IAbstractTextEditorHelpContextIds\nDone.\n\n\u003e - move the stuff from templates.view to templates as we only have three types\n\u003e   \u003d\u003d\u003e this also removes the change to the TemplatesPreferencePage\nDone. Fixed the format also.\n\n\u003e - we don\u0027t need a message class per class but per package and since we move the\n\u003e   types into the templates package we can even get rid of both of them \u003d\u003d\u003e\n\u003e simply\n\u003e   move the string defs into TextEditorTemplateMessages and its properties file\nDone.\n\n\u003e - move the view contribution (plugin.xml stuff) to JDT UI\n\u003e \nNot done. Does not seem right as the view itself is part of texteditor package - why should we add the view contribution of JDT UI.\n\nI am on vacation from tomorrow and might not be able to access the net for the next one week.\n\n-- KD\n\n",
    "\u003eNot done. Does not seem right as the view itself is part of texteditor package\n\u003e- why should we add the view contribution of JDT UI.\nBecause we only want the view to be there if it is really needed. We don\u0027t want it to appear in an RCP that has no templates. If another plug-in, e.g. CDT also wants this view it can simply make the same contribution (with same ID) and there will only be one view even if JDT and CDT is installed.\n\n\u003eAll the icons are from eclipse.org projects.\nThat\u0027s not good enough as different projects can have different legal blurbs and hence the icons might be under different licenses. Anyway, don\u0027t bother further I will let all the new artwork redesign by our UI design team.",
    "David, do you see a problem (for WTP) with Platform Text adding this Templates view?",
    "I\u0027ve logged bug #207242 as a separate dependent bug with a number of comments on the patch contribution 2007-10-19.  ",
    "Dakshinamurthy, the IP work is progressing. They like you to answer a question in this bug. Here\u0027s the original post:\n\n--- Comment #10 from Sharon Corbett \u003csharon.corbett@eclipse.org\u003e  2007-10-25 10:30:39 ---\nHi Dani:  Can you please arrange to have the contributor make a statement on\nthe referenced bug confirming they authored the code and have the rights to\ndonate the code to Eclipse under the EPL for inclusiion in future Eclipse\nreleases.  Please let me know when that has been confirmed.  Thanks, Sharon\n--------------------------------",
    "(In reply to comment #105)\n\u003e Dakshinamurthy, the IP work is progressing. They like you to answer a question\n\u003e in this bug. Here\u0027s the original post:\n\u003e \n\u003e --- Comment #10 from Sharon Corbett \u003csharon.corbett@eclipse.org\u003e  2007-10-25\n\u003e 10:30:39 ---\n\u003e Hi Dani:  Can you please arrange to have the contributor make a statement on\n\u003e the referenced bug confirming they authored the code and have the rights to\n\u003e donate the code to Eclipse under the EPL for inclusiion in future Eclipse\n\u003e releases.  Please let me know when that has been confirmed.  Thanks, Sharon\n\u003e --------------------------------\n\u003e \n\nThis is to confirm that the code is developed by myself and I have the rights to donate the code to Eclipse under EPL.\n\n-- KD",
    "(In reply to comment #102)\n\u003e \u003eNot done. Does not seem right as the view itself is part of texteditor package\n\u003e \u003e- why should we add the view contribution of JDT UI.\n\u003e Because we only want the view to be there if it is really needed. We don\u0027t want\n\u003e it to appear in an RCP that has no templates. If another plug-in, e.g. CDT also\n\u003e wants this view it can simply make the same contribution (with same ID) and\n\u003e there will only be one view even if JDT and CDT is installed.\n\u003e \nDani:\n\nI am confused here :(. Is it not the perspectives that define what views are displayed in the workbench and shown in the menus?\n\n\u003e \u003eAll the icons are from eclipse.org projects.\n\u003e That\u0027s not good enough as different projects can have different legal blurbs\n\u003e and hence the icons might be under different licenses. Anyway, don\u0027t bother\n\u003e further I will let all the new artwork redesign by our UI design team.\n\u003e \n\nSorry for the trouble. I will keep track next time.\n\nThanks and Regards\nKD\n\n",
    "\u003eI am confused here :(. Is it not the perspectives that define what views are\n\u003edisplayed in the workbench and shown in the menus?\nYep, but there are other places where the view would show up (e.g. Window \u003e Show View \u003e Other...).",
    "(In reply to comment #108)\n\u003e \u003eI am confused here :(. Is it not the perspectives that define what views are\n\u003e \u003edisplayed in the workbench and shown in the menus?\n\u003e Yep, but there are other places where the view would show up (e.g. Window \u003e\n\u003e Show View \u003e Other...).\n\u003e \n\nIn most cases this is similar to the content outline view. Templates view depends on the editor to provide the TemplatesPage adapter. Even in JDT perspective, except for the Java editor all other editors shows the templates not available message. Hopefully having the view visible in the workbench might induce other editor developers to provide TemplatesPage using the template infrastructure that is available :).\n\nThat said, the final call is ofcourse yours. This is just a cut \u0026 paste of the view definition from one plugin.xml to another :)\n\n-- KD\n\n",
    "We won\u0027t have time to do this for M4. Will be done early M5."
  ],
  "commentCreationDates": [
    "2004-07-08T11:50:41+02:00",
    "2007-07-23T10:09:35+02:00",
    "2007-07-24T10:36:55+02:00",
    "2007-07-24T10:43:17+02:00",
    "2007-07-24T10:48:06+02:00",
    "2007-07-24T11:16:33+02:00",
    "2007-07-24T11:22:36+02:00",
    "2007-07-24T11:24:16+02:00",
    "2007-07-24T11:51:51+02:00",
    "2007-07-24T11:53:58+02:00",
    "2007-07-24T12:02:59+02:00",
    "2007-07-24T13:10:00+02:00",
    "2007-07-24T22:33:05+02:00",
    "2007-07-24T22:40:55+02:00",
    "2007-07-24T22:43:00+02:00",
    "2007-07-25T12:35:06+02:00",
    "2007-07-25T13:07:21+02:00",
    "2007-07-25T13:52:37+02:00",
    "2007-07-25T14:48:34+02:00",
    "2007-07-25T15:30:04+02:00",
    "2007-07-26T19:06:48+02:00",
    "2007-07-27T12:20:34+02:00",
    "2007-07-30T12:29:41+02:00",
    "2007-07-30T13:02:47+02:00",
    "2007-07-30T13:03:50+02:00",
    "2007-07-30T14:09:48+02:00",
    "2007-07-31T13:46:09+02:00",
    "2007-07-31T13:51:15+02:00",
    "2007-07-31T16:13:35+02:00",
    "2007-07-31T20:12:44+02:00",
    "2007-07-31T20:22:03+02:00",
    "2007-08-01T15:16:48+02:00",
    "2007-08-02T18:23:16+02:00",
    "2007-08-02T19:12:21+02:00",
    "2007-08-03T08:46:08+02:00",
    "2007-08-03T08:55:40+02:00",
    "2007-08-03T09:20:02+02:00",
    "2007-08-03T09:35:23+02:00",
    "2007-08-03T09:36:32+02:00",
    "2007-08-03T11:00:24+02:00",
    "2007-08-03T13:27:15+02:00",
    "2007-08-06T07:46:07+02:00",
    "2007-08-06T09:23:30+02:00",
    "2007-08-06T16:58:44+02:00",
    "2007-08-06T17:17:13+02:00",
    "2007-08-06T17:37:54+02:00",
    "2007-08-09T16:34:16+02:00",
    "2007-08-09T16:35:14+02:00",
    "2007-08-09T16:39:58+02:00",
    "2007-08-09T21:30:29+02:00",
    "2007-08-09T21:49:55+02:00",
    "2007-08-09T21:53:59+02:00",
    "2007-08-11T03:23:06+02:00",
    "2007-08-11T03:48:00+02:00",
    "2007-08-13T06:50:23+02:00",
    "2007-08-13T16:25:29+02:00",
    "2007-08-15T10:39:41+02:00",
    "2007-08-15T12:10:55+02:00",
    "2007-08-15T18:38:27+02:00",
    "2007-08-22T16:23:21+02:00",
    "2007-08-22T16:25:00+02:00",
    "2007-09-04T14:58:54+02:00",
    "2007-09-04T16:14:27+02:00",
    "2007-09-04T16:57:01+02:00",
    "2007-09-04T17:34:59+02:00",
    "2007-09-04T17:36:28+02:00",
    "2007-09-04T17:45:29+02:00",
    "2007-09-04T18:43:28+02:00",
    "2007-09-04T18:52:43+02:00",
    "2007-09-04T19:01:13+02:00",
    "2007-09-04T19:05:26+02:00",
    "2007-09-04T19:31:05+02:00",
    "2007-09-05T10:10:13+02:00",
    "2007-09-06T18:55:09+02:00",
    "2007-09-06T19:08:10+02:00",
    "2007-09-11T18:01:51+02:00",
    "2007-09-11T19:16:31+02:00",
    "2007-09-11T19:47:50+02:00",
    "2007-09-11T22:32:47+02:00",
    "2007-09-12T14:40:55+02:00",
    "2007-09-12T14:48:27+02:00",
    "2007-09-17T12:30:53+02:00",
    "2007-09-17T12:39:31+02:00",
    "2007-09-21T12:04:14+02:00",
    "2007-09-21T12:38:43+02:00",
    "2007-09-24T15:47:25+02:00",
    "2007-09-24T16:12:34+02:00",
    "2007-09-24T18:23:52+02:00",
    "2007-09-24T18:25:17+02:00",
    "2007-09-24T18:26:10+02:00",
    "2007-09-24T18:27:06+02:00",
    "2007-09-25T13:18:04+02:00",
    "2007-09-25T13:50:13+02:00",
    "2007-09-25T13:56:33+02:00",
    "2007-09-25T15:06:48+02:00",
    "2007-09-25T15:10:31+02:00",
    "2007-10-04T10:59:10+02:00",
    "2007-10-04T11:06:44+02:00",
    "2007-10-04T11:31:14+02:00",
    "2007-10-10T12:56:33+02:00",
    "2007-10-10T14:22:05+02:00",
    "2007-10-19T11:26:19+02:00",
    "2007-10-22T16:34:34+02:00",
    "2007-10-23T13:22:46+02:00",
    "2007-10-24T01:37:58+02:00",
    "2007-10-25T16:34:28+02:00",
    "2007-10-29T07:24:59+01:00",
    "2007-10-29T07:29:15+01:00",
    "2007-10-29T09:44:37+01:00",
    "2007-10-29T10:19:40+01:00",
    "2007-12-03T13:53:17+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.ui.texteditor.templates.TemplatesPage.setDisableItemColors",
          "source": "TemplatesPage.java:602"
        },
        {
          "method": "org.eclipse.ui.texteditor.templates.TemplatesPage.refresh",
          "source": "TemplatesPage.java:1226"
        },
        {
          "method": "org.eclipse.ui.texteditor.templates.TemplatesPage.access$6",
          "source": "TemplatesPage.java:1224"
        },
        {
          "method": "org.eclipse.ui.texteditor.templates.TemplatesPage$1.propertyChange",
          "source": "TemplatesPage.java:478"
        }
      ],
      "number": 0,
      "commentIndex": 39,
      "bugId": "69581",
      "date": "2007-08-03T11:00:24+02:00",
      "product": "Platform",
      "component": "Text",
      "severity": "enhancement"
    }
  ],
  "groupId": "69581",
  "bugId": "69581",
  "date": "2004-07-08T11:50:41+02:00",
  "product": "Platform",
  "component": "Text",
  "severity": "enhancement"
}