{
  "comments": [
    "I have the following bug (GenericSignatureFormatError) when using Aspect J with IBM JVM in debug mode.\nThe error doesn\u0027t appear when using Sun JVM in debug mode.\n\nI use the folowing version of IBM JVM :\njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition\n(build pwi32dev-20061002a (SR3)\n)\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Windows XP\nx86-32 j9vmwi3223-2006100\n1 (JIT enabled)\nJ9VM - 20060915_08260_lHdSMR\nJIT  - 20060908_1811_r8\nGC   - 20060906_AA)\nJCL  - 20061002\n\nThe bug appears when I configure an aspect J aspect\nand when I put a break point on a class executed in\nthe aspect (in the execution flow of the aspect).\nIn my sample, when I put a break point on a Dao which\nis executed by a service. I have added transactional\naspects on the service.\n\nIn this case, aspect J generated an\nGenericSignatureFormatError.\nThis exception is generated from class\norg.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider.\n\nI\u0027ve checked the object state used by\nJava15GenericSignatureInformationProvider, and found\nthe following weird variable - please note the value\nof the field signature :\nmember : [Class\u003dMethod]\n\tannotationDefault \u003d null\n\tannotations \u003d null\n\tclazz \u003d class\ncom.natixis.sphinx.persistence.jpa.support.JpaCrudDaoSupport\n\texceptionType \u003d [class\norg.springframework.dao.ConcurrencyFailureException,\nclass\norg.springframework.dao.DataIntegrityViolationException]\n\tgenericInfo \u003d null\n\tj9method \u003d com.ibm.oti.reflect.Method@3a2a3a2a\n\tmethodAccessor \u003d null\n\tmodifiers \u003d 1\n\tname \u003d update\n\toverride \u003d false\n\tparameterAnnotations \u003d null\n\tparameterTypes \u003d [class java.lang.Object]\n\treturnType \u003d class java.lang.Object\n\troot \u003d null\n\tsecurityCheckCache \u003d null\n\tsecurityCheckTargetClassCache \u003d null\n\tsignature \u003d xB?B\n\tslot \u003d 1108159024\n\nHas someone some tips on this one ?\n\nThank you\n\nHere\u0027s the stackTrace :\norg.springframework.beans.factory.BeanCreationException:\nError creating bean with name \u0027sampleManager\u0027 defined\nin class path resource [myartiContext.xml]: Cannot\nresolve reference to bean \u0027sampleDao\u0027 while setting\nbean property \u0027sampleDao\u0027; nested exception is\norg.springframework.beans.factory.BeanCreationException:\nError creating bean with name \u0027sampleDao\u0027 defined in\nclass path resource [myartiContext.xml]:\nInitialization of bean failed; nested exception is\njava.lang.reflect.GenericSignatureFormatError\nCaused by:\norg.springframework.beans.factory.BeanCreationException:\nError creating bean with name \u0027sampleDao\u0027 defined in\nclass path resource [myartiContext.xml]:\nInitialization of bean failed; nested exception is\njava.lang.reflect.GenericSignatureFormatError\nCaused by:\njava.lang.reflect.GenericSignatureFormatError\n\tat\nsun.reflect.generics.parser.SignatureParser.error(SignatureParser.java:121)\n\tat\nsun.reflect.generics.parser.SignatureParser.parseFormalParameters(SignatureP\narser.java:462)\n\tat\nsun.reflect.generics.parser.SignatureParser.parseMethodTypeSignature(Signatu\nreParser.java:454)\n\tat\nsun.reflect.generics.parser.SignatureParser.parseMethodSig(SignatureParser.j\nava:159)\n\tat\nsun.reflect.generics.repository.ConstructorRepository.parse(ConstructorRepos\nitory.java:55)\n\tat\nsun.reflect.generics.repository.ConstructorRepository.parse(ConstructorRepos\nitory.java:43)\n\tat\nsun.reflect.generics.repository.AbstractRepository.\u003cinit\u003e(AbstractRepository\n.java:74)\n\tat\nsun.reflect.generics.repository.GenericDeclRepository.\u003cinit\u003e(GenericDeclRepo\nsitory.java:48)\n\tat\nsun.reflect.generics.repository.ConstructorRepository.\u003cinit\u003e(ConstructorRepo\nsitory.java:51)\n\tat\nsun.reflect.generics.repository.MethodRepository.\u003cinit\u003e(MethodRepository.jav\na:46)\n\tat\nsun.reflect.generics.repository.MethodRepository.make(MethodRepository.java:\n59)\n\tat\njava.lang.reflect.Method.getGenericInfo(Method.java:119)\n\tat\njava.lang.reflect.Method.getGenericParameterTypes(Method.java:307)\n\tat\norg.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider.getGene\nricParameterTypes(Java15GenericSignatureInformationProvider.java:44)\n\tat\norg.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.getGenericParam\neterTypes(ReflectionBasedResolvedMemberImpl.java:120)\n\tat\norg.aspectj.weaver.ResolvedMemberImpl.matches(ResolvedMemberImpl.java:771)\n\tat\norg.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:386)\n\tat\norg.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(J\noinPointSignatureIterator.java:178)\n\tat\norg.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIter\nator.java:69)\n\tat\norg.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:2\n87)\n\tat\norg.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java\n:106)\n\tat\norg.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\n\tat\norg.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(Poin\ntcutExpressionImpl.java:235)\n\tat\norg.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(Po\nintcutExpressionImpl.java:101)\n\tat\norg.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecut\nion(PointcutExpressionImpl.java:92)\n\tat\norg.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(Asp\nectJExpressionPointcut.java:345)\n\tat\norg.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExp\nressionPointcut.java:231)\n\tat\norg.springframework.aop.support.AopUtils.canApply(AopUtils.java:195)\n\tat\norg.springframework.aop.support.AopUtils.canApply(AopUtils.java:236)\n\tat\norg.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.j\nava:270)\n\tat\norg.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.\nfindEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:83)\n\tat\norg.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.\ngetAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66)\n\tat\norg.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postPro\ncessAfterInitialization(AbstractAutoProxyCreator.java:296)\n\tat\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory\n.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFacto\nry.java:312)\n\tat\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory\n.initializeBean(AbstractAutowireCapableBeanFactory.java:1180)\n\tat\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory\n.createBean(AbstractAutowireCapableBeanFactory.java:425)\n\tat\norg.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(Ab\nstractBeanFactory.java:251)\n\tat\norg.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSi\nngleton(DefaultSingletonBeanRegistry.java:156)\n\tat\norg.springframework.beans.factory.support.AbstractBeanFactory.getBean(Abstra\nctBeanFactory.java:248)\n\tat\norg.springframework.beans.factory.support.AbstractBeanFactory.getBean(Abstra\nctBeanFactory.java:160)\n\tat\norg.springframework.beans.factory.support.BeanDefinitionValueResolver.resolv\neReference(BeanDefinitionValueResolver.java:261)\n\tat\norg.springframework.beans.factory.support.BeanDefinitionValueResolver.resolv\neValueIfNecessary(BeanDefinitionValueResolver.java:109)\n\tat\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory\n.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1099)\n\tat\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory\n.populateBean(AbstractAutowireCapableBeanFactory.java:861)\n\tat\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory\n.createBean(AbstractAutowireCapableBeanFactory.java:421)\n\tat\norg.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(Ab\nstractBeanFactory.java:251)\n\tat\norg.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSi\nngleton(DefaultSingletonBeanRegistry.java:156)\n\tat\norg.springframework.beans.factory.support.AbstractBeanFactory.getBean(Abstra\nctBeanFactory.java:248)\n\tat\norg.springframework.beans.factory.support.AbstractBeanFactory.getBean(Abstra\nctBeanFactory.java:160)\n\tat\norg.springframework.beans.factory.support.DefaultListableBeanFactory.preInst\nantiateSingletons(DefaultListableBeanFactory.java:287)\n\tat\norg.springframework.context.support.AbstractApplicationContext.refresh(Abstr\nactApplicationContext.java:352)\n\tat\norg.springframework.test.AbstractSingleSpringContextTests.createApplicationC\nontext(AbstractSingleSpringContextTests.java:199)\n\tat\norg.springframework.test.AbstractSingleSpringContextTests.loadContextLocatio\nns(AbstractSingleSpringContextTests.java:179)\n\tat\norg.springframework.test.AbstractSingleSpringContextTests.loadContext(Abstra\nctSingleSpringContextTests.java:158)\n\tat\norg.springframework.test.AbstractSpringContextTests.getContext(AbstractSprin\ngContextTests.java:105)\n\tat\norg.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSing\nleSpringContextTests.java:87)\n\tat\njunit.framework.TestCase.runBare(TestCase.java:125)\n\tat\norg.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.jav\na:69)\n\tat\njunit.framework.TestResult$1.protect(TestResult.java:106)\n\tat\njunit.framework.TestResult.runProtected(TestResult.java:124)\n\tat\njunit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat\njunit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat\norg.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3T\nestReference.java:128)\n\tat\norg.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:3\n8)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRu\nnner.java:460)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRu\nnner.java:673)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.\njava:386)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner\n.java:196)",
    "hmm, that signature field does look wierd.  I really need to see the top level signature it is trying to resolve.  When you say you have checked the object state for the failure, are you in a position to debug the AspectJ code?  If so you could put a breakpoint in the AJ code that leads to the failure ( Java15GenericSignatureInformationProvider.java:44 ) - and then checking what the field \u0027member\u0027 is set to?\n\nIf you can\u0027t debug it, I could give you a debug build that will dump out that information, would you be able to try it out for me if I create such a build?\n\nOne suggestion for something you could try is using a more recent version of the IBM VM? 20061002 seems quite old, is there something more up to date?  There are differences between VMs in terms of which base classes use generics and that could be a trigger for the problem.  ",
    "I\u0027m currently in measure of debugging aspect J code (just downloaded the source file from cvs repository).\nI\u0027m using rad gui to debug.\nI\u0027ve set a breakpoint in Java15GenericSignatureInformationProvider#getGenericParameterTypes and have the faulting member in the debugger.\nIt\u0027s really the same I\u0027ve sent you before, I don\u0027t know what information I can giver you which interests you, just tell me :\n- faulting instance field value ?\n- faulting source class code ?\n- heapdump ?\n- java core ?\n\nHere\u0027s for the faulting instance field value, and the faulting source code :\nmember.toString \u003d public java.lang.Object com.natixis.sphinx.persistence.jpa.support.JpaCrudDaoSupport.update(java.lang.Object) throws org.springframework.dao.ConcurrencyFailureException,org.springframework.dao.DataIntegrityViolationException\nclazz \u003d class com.natixis.sphinx.persistence.jpa.support.JpaCrudDaoSupport\nexceptionTypes \u003d [class org.springframework.dao.ConcurrencyFailureException, class org.springframework.dao.DataIntegrityViolationException]\nmodifiers \u003d 1\nname \u003d update\noverride \u003d false\nparameterTypes \u003d [class java.lang.Object]\nreturnType \u003d class java.lang.Object\nsignature \u003d ?A?Be?A?B?B???B????????G?i?????}?}?}?}?}??BE??B???Bc?c???c?I?????????c?$c?,c?4c?\u003cc?Hc?Pc?}?}?}?\\c?dc?}dA}dAlc?tc???|c?g??A?A?A??O?O?O?O?O?O?O?O???E?A??1?A1?A]?A]?A]?A?Ba?a?a??BE?E?E?E?E?E?E?E??B?A#???t???\n\nslot \u003d 1106509132\n\n\nI can also execute a heap dump (1.7Mo), or a java core (47Mo), but I don\u0027t know if it would be usefull, just tell me - I\u0027m really not using to debug at this low level.\nIf it helps you determining the problem I would be happy running you debug build.\n\nI\u0027m using version 1.5.2 of aspect j weaver.\n\nThanks very very much !",
    "Created an attachment (id\u003d81082)\nfault class\n\nThis is the class (in .class format) declaring the faulty update method.",
    "Ok,\n\nThis time I\u0027ve made a simple test case (without jpa ;)).\n\nI\u0027ve also changed IBM JVM - same result.\n\nHowto reproduce the bug with the test case ?\n\nImport this java project in rsa 7.0.0.0 (or eclipse with ibm jvm).\nPut a breakpoint in class tmp.pag.sample.DaoSupport line 36 (in update method).\nJust start unit test class AspectJTest in debug mode with IBM JVM.\n\nYou will see a java core or the following stacktrace :\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name \u0027sampleDao\u0027 defined in class path resource [applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.reflect.GenericSignatureFormatError\nCaused by: java.lang.reflect.GenericSignatureFormatError\n\tat sun.reflect.generics.parser.SignatureParser.error(SignatureParser.java:121)\n\tat sun.reflect.generics.parser.SignatureParser.parseFormalParameters(SignatureParser.java:462)\n\tat sun.reflect.generics.parser.SignatureParser.parseMethodTypeSignature(SignatureParser.java:454)\n\tat sun.reflect.generics.parser.SignatureParser.parseMethodSig(SignatureParser.java:159)\n\tat sun.reflect.generics.repository.ConstructorRepository.parse(ConstructorRepository.java:55)\n\tat sun.reflect.generics.repository.ConstructorRepository.parse(ConstructorRepository.java:43)\n\tat sun.reflect.generics.repository.AbstractRepository.\u003cinit\u003e(AbstractRepository.java:74)\n\tat sun.reflect.generics.repository.GenericDeclRepository.\u003cinit\u003e(GenericDeclRepository.java:48)\n\tat sun.reflect.generics.repository.ConstructorRepository.\u003cinit\u003e(ConstructorRepository.java:51)\n\tat sun.reflect.generics.repository.MethodRepository.\u003cinit\u003e(MethodRepository.java:46)\n\tat sun.reflect.generics.repository.MethodRepository.make(MethodRepository.java:59)\n\tat java.lang.reflect.Method.getGenericInfo(Method.java:119)\n\tat java.lang.reflect.Method.getGenericParameterTypes(Method.java:307)\n\tat org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider.getGenericParameterTypes(Java15GenericSignatureInformationProvider.java:44)\n\tat org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.getGenericParameterTypes(ReflectionBasedResolvedMemberImpl.java:120)\n\tat org.aspectj.weaver.ResolvedMemberImpl.matches(ResolvedMemberImpl.java:781)\n\tat org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:387)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:178)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:69)\n\tat org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:287)\n\tat org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\n\tat org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(PointcutExpressionImpl.java:235)\n\tat org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:101)\n\tat org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:92)\n\tat org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:345)\n\tat org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:231)\n\tat org.springframework.aop.support.AopUtils.canApply(AopUtils.java:195)\n\tat org.springframework.aop.support.AopUtils.canApply(AopUtils.java:236)\n\tat org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:270)\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:83)\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66)\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:296)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:312)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1180)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)\n\tat org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:199)\n\tat org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:179)\n\tat org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:158)\n\tat org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:105)\n\tat org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:87)\n\tat junit.framework.TestCase.runBare(TestCase.java:125)\n\tat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\nIBM JVM used : \njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build pwi32devifx-20070323 (if\nix 117674: SR4 + 116644 + 114941 + 116110 + 114881))\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Windows XP x86-32 j9vmwi3223ifx-2007\n0323 (JIT enabled)\nJ9VM - 20070322_12058_lHdSMR\nJIT  - 20070109_1805ifx3_r8\nGC   - WASIFIX_2007)\nJCL  - 20070131\n",
    "Created an attachment (id\u003d81103)\ntest case - java eclipse project\n\nThis test case uses Spring 2.0.6 and aspect J.",
    "Thanks for debugging that, I\u0027ll look into it now and get back to you.  Can I ask if there is a reason why you are on 1.5.2 of AJ - that is quite an old build and many many things have been resolved in 1.5.3 and the latest dev builds are even better.  Is there a chance you can try recreating with an up to date AspectJ?",
    "Hi Andy,\n\nSorry, I just forgot to tell you about it :\nthe last testcase I\u0027ve sent you uses the version 1.5.3 if aspectJ weaver (just check the jar inside the eclipe java project).",
    "i looked in the .class you attached but that is JpaDaoSupport - whilst the failure info points to JpaCrudDaoSupport ?\n\nI\u0027m on a Mac right now so can\u0027t test on an IBM JVM myself at the moment...\nNeither a heap dump or java core will help me I\u0027m afraid.",
    "just a note to say I imported the test project into 3.3 on the Mac and it ran fine under Java1.5\n",
    "Hello,\n\nThe bug only happens with IBM JVM.\nIt runs fine with Sun JVM.\n\nYou should just dump this .class file - don\u0027t think it will help you very much.\nI advice you only to take the eclipse project to reproduce the problem.\n...And IBM JVM (sorry).\n\nOpened this bug also on IBM labs : PMR#44184,661,706.\n",
    "Hi.\n\nI know it only seems to manifest on the IBM vm, I was just recording what I\u0027ve learned trying out your test project.\n\nI\u0027m not sure what you meant by \"You should just dump this .class file\" - I can\u0027t find it in the jars you included in that test project - there is no class \u0027com.natixis.sphinx.persistence.jpa.support.JpaCrudDaoSupport\u0027 - where should i get it from?  I\u0027m interested in seeing the signatures within it - the signatures in that file JpaDaoSupport that was attached in comment #3",
    "I\u0027m not sure what you meant by \"You should just dump this .class file\"\n\n\u003d\u003e The first attachment ( fault class   (1.82 KB, application/octet-stream) )\nonly contains a .class file.\nThe second attachment (test case - java eclipse project) contains a full test case.\nI was just telling to just take the second attachment since it\u0027s complete.\n\ncan\u0027t find it in the jars you included in that test project\n\u003d\u003e those jar files are contained inside the attachment  test case - java eclipse project   (4.53 MB, application/x-zip-compressed).\nI\u0027ve put the instructions for error reproduction in https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d207186#c4.\n\nThanks very much for your help, and sorry for my english\n",
    "Created an attachment (id\u003d81173)\nJpaCrudDaoSupport  source\n\nHere are the 2 source code files for JpaCrudDaoSupport (attachment 81082: fault class).",
    "Created an attachment (id\u003d81174)\nparent source code\n\n",
    "I\u0027ve just received feedback from IBM support. \nThis is apparently a defect in JVM IBM. I\u0027ll test the patch next week and let you know (sorry cannot do it before).",
    "We are encountering this same issue.  We are getting the same GenericSignatureFormatError when running in debug mode within Rational Application Developer (RADv7), built on Eclipse 3.2.x.  The problem seems to be isolated to placing a debug break point within a method that is returning a strongly typed java.util.List using Java 5 generics.  The problem only happens when running a Junits tests that use Spring v2.0.6, extending Spring\u0027s provided org.springframework.test.AbstractDependencyInjectionSpringContextTests, using aspectj weaver.  Note that we\u0027ve actually disabled all aspects (only had Spring provided proxy-based AOP for tx management, using aop xml namespace tags, but that\u0027s all been commented out).  I would agree it seems the issue is in fact an IBM JVM bug.\n\nVersions seem to be close with the originally posted bug as well (IBM JVM, on a Windows Platform):\njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build pwi32dev-20060511 (SR2))\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Windows 2000 x86-32 j9vmwi3223-20060\n504 (JIT enabled)\nJ9VM - 20060501_06428_lHdSMR\nJIT  - 20060428_1800_r8\nGC   - 20060501_AA)\nJCL  - 20060511a\n\nSo? do you have the patch yet?  Have you had a chance to test it?  If not, could you post it untested?  Since we are running a supported version of IBM RAD, our next steps would include opening a ticket with IBM, but I\u0027d like to try this patch first since it seems you\u0027ve already done the work with IBM support ;)",
    "I\u0027m really really sorry. I was really sure to have left some feedback here !\n\nThe defect is due to IBM JVM.\nWe\u0027ve tested the JVM patch from IBM. Corrects the defect, everything runs fine now.\n\nSince I\u0027m not at work, I can\u0027t give jvm version we used or the patch.\n\nI\u0027ll have more info on Monday.",
    "This defect is corrected with IBM JVM : 5.0.0 SR6.\n\nThis JVM will be included in a future fix pack of RAD.\n",
    "Here are more details about the correct Jvm version :\njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build pwi32devifx-20071025 (SR6b))\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Windows XP x86-32 j9vmwi3223-20071007 (JIT enabled)\nJ9VM - 20071004_14218_lHdSMR\nJIT  - 20070820_1846ifx1_r8\nGC   - 200708_10)\nJCL  - 20071025\n\nThank you for your very much appreciated help.\n\nI think that this ticket can be closed (at least for me).",
    "thanks to Adrian for seeing this through with IBM support :)"
  ],
  "commentCreationDates": [
    "2007-10-23T17:51:59+02:00",
    "2007-10-24T17:08:13+02:00",
    "2007-10-24T19:11:46+02:00",
    "2007-10-24T19:30:47+02:00",
    "2007-10-24T23:11:13+02:00",
    "2007-10-24T23:14:07+02:00",
    "2007-10-25T11:06:35+02:00",
    "2007-10-25T14:23:25+02:00",
    "2007-10-25T16:11:00+02:00",
    "2007-10-25T16:26:10+02:00",
    "2007-10-25T17:14:38+02:00",
    "2007-10-25T17:32:20+02:00",
    "2007-10-25T17:46:12+02:00",
    "2007-10-25T17:52:11+02:00",
    "2007-10-25T17:52:40+02:00",
    "2007-11-08T19:43:33+01:00",
    "2007-11-21T14:54:48+01:00",
    "2007-11-23T10:07:13+01:00",
    "2007-11-26T13:11:56+01:00",
    "2007-11-26T13:14:27+01:00",
    "2007-12-11T08:15:00+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.reflect.GenericSignatureFormatError",
      "elements": [
        {
          "method": "sun.reflect.generics.parser.SignatureParser.error",
          "source": "SignatureParser.java:121"
        },
        {
          "method": "sun.reflect.generics.parser.SignatureParser.parseFormalParameters",
          "source": "SignatureP arser.java:462"
        },
        {
          "method": "sun.reflect.generics.parser.SignatureParser.parseMethodTypeSignature",
          "source": "Signatu reParser.java:454"
        },
        {
          "method": "sun.reflect.generics.parser.SignatureParser.parseMethodSig",
          "source": "SignatureParser.j ava:159"
        },
        {
          "method": "sun.reflect.generics.repository.ConstructorRepository.parse",
          "source": "ConstructorRepos itory.java:55"
        },
        {
          "method": "sun.reflect.generics.repository.ConstructorRepository.parse",
          "source": "ConstructorRepos itory.java:43"
        },
        {
          "method": "sun.reflect.generics.repository.AbstractRepository.\u003cinit\u003e",
          "source": "AbstractRepository .java:74"
        },
        {
          "method": "sun.reflect.generics.repository.GenericDeclRepository.\u003cinit\u003e",
          "source": "GenericDeclRepo sitory.java:48"
        },
        {
          "method": "sun.reflect.generics.repository.ConstructorRepository.\u003cinit\u003e",
          "source": "ConstructorRepo sitory.java:51"
        },
        {
          "method": "sun.reflect.generics.repository.MethodRepository.\u003cinit\u003e",
          "source": "MethodRepository.jav a:46"
        },
        {
          "method": "sun.reflect.generics.repository.MethodRepository.make",
          "source": "MethodRepository.java: 59"
        },
        {
          "method": "java.lang.reflect.Method.getGenericInfo",
          "source": "Method.java:119"
        },
        {
          "method": "java.lang.reflect.Method.getGenericParameterTypes",
          "source": "Method.java:307"
        },
        {
          "method": "org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider.getGenericParameterTypes",
          "source": "Java15GenericSignatureInformationProvider.java:44"
        },
        {
          "method": "org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.getGenericParameterTypes",
          "source": "ReflectionBasedResolvedMemberImpl.java:120"
        },
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.matches",
          "source": "ResolvedMemberImpl.java:771"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.lookupResolvedMember",
          "source": "ResolvedType.java:386"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes",
          "source": "J oinPointSignatureIterator.java:178"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.hasNext",
          "source": "JoinPointSignatureIter ator.java:69"
        },
        {
          "method": "org.aspectj.weaver.patterns.SignaturePattern.matches",
          "source": "SignaturePattern.java:2 87"
        },
        {
          "method": "org.aspectj.weaver.patterns.KindedPointcut.matchInternal",
          "source": "KindedPointcut.java :106"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:146"
        },
        {
          "method": "org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch",
          "source": "Poin tcutExpressionImpl.java:235"
        },
        {
          "method": "org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution",
          "source": "Po intcutExpressionImpl.java:101"
        },
        {
          "method": "org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution",
          "source": "PointcutExpressionImpl.java:92"
        },
        {
          "method": "org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch",
          "source": "Asp ectJExpressionPointcut.java:345"
        },
        {
          "method": "org.springframework.aop.aspectj.AspectJExpressionPointcut.matches",
          "source": "AspectJExp ressionPointcut.java:231"
        },
        {
          "method": "org.springframework.aop.support.AopUtils.canApply",
          "source": "AopUtils.java:195"
        },
        {
          "method": "org.springframework.aop.support.AopUtils.canApply",
          "source": "AopUtils.java:236"
        },
        {
          "method": "org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply",
          "source": "AopUtils.j ava:270"
        },
        {
          "method": "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors",
          "source": "AbstractAdvisorAutoProxyCreator.java:83"
        },
        {
          "method": "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean",
          "source": "AbstractAdvisorAutoProxyCreator.java:66"
        },
        {
          "method": "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization",
          "source": "AbstractAutoProxyCreator.java:296"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization",
          "source": "AbstractAutowireCapableBeanFacto ry.java:312"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean",
          "source": "AbstractAutowireCapableBeanFactory.java:1180"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean",
          "source": "AbstractAutowireCapableBeanFactory.java:425"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject",
          "source": "Ab stractBeanFactory.java:251"
        },
        {
          "method": "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton",
          "source": "DefaultSingletonBeanRegistry.java:156"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory.getBean",
          "source": "Abstra ctBeanFactory.java:248"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory.getBean",
          "source": "Abstra ctBeanFactory.java:160"
        },
        {
          "method": "org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference",
          "source": "BeanDefinitionValueResolver.java:261"
        },
        {
          "method": "org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary",
          "source": "BeanDefinitionValueResolver.java:109"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues",
          "source": "AbstractAutowireCapableBeanFactory.java:1099"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean",
          "source": "AbstractAutowireCapableBeanFactory.java:861"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean",
          "source": "AbstractAutowireCapableBeanFactory.java:421"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject",
          "source": "Ab stractBeanFactory.java:251"
        },
        {
          "method": "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton",
          "source": "DefaultSingletonBeanRegistry.java:156"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory.getBean",
          "source": "Abstra ctBeanFactory.java:248"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory.getBean",
          "source": "Abstra ctBeanFactory.java:160"
        },
        {
          "method": "org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons",
          "source": "DefaultListableBeanFactory.java:287"
        },
        {
          "method": "org.springframework.context.support.AbstractApplicationContext.refresh",
          "source": "Abstr actApplicationContext.java:352"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext",
          "source": "AbstractSingleSpringContextTests.java:199"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations",
          "source": "AbstractSingleSpringContextTests.java:179"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.loadContext",
          "source": "Abstra ctSingleSpringContextTests.java:158"
        },
        {
          "method": "org.springframework.test.AbstractSpringContextTests.getContext",
          "source": "AbstractSprin gContextTests.java:105"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.setUp",
          "source": "AbstractSing leSpringContextTests.java:87"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:125"
        },
        {
          "method": "org.springframework.test.ConditionalTestCase.runBare",
          "source": "ConditionalTestCase.jav a:69"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3T estReference.java:128"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:3 8"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRu nner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRu nner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner. java:386"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner .java:196"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "207186",
      "date": "2007-10-23T17:51:59+02:00",
      "product": "AspectJ",
      "component": "Runtime",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.reflect.GenericSignatureFormatError",
      "elements": [
        {
          "method": "sun.reflect.generics.parser.SignatureParser.error",
          "source": "SignatureParser.java:121"
        },
        {
          "method": "sun.reflect.generics.parser.SignatureParser.parseFormalParameters",
          "source": "SignatureParser.java:462"
        },
        {
          "method": "sun.reflect.generics.parser.SignatureParser.parseMethodTypeSignature",
          "source": "SignatureParser.java:454"
        },
        {
          "method": "sun.reflect.generics.parser.SignatureParser.parseMethodSig",
          "source": "SignatureParser.java:159"
        },
        {
          "method": "sun.reflect.generics.repository.ConstructorRepository.parse",
          "source": "ConstructorRepository.java:55"
        },
        {
          "method": "sun.reflect.generics.repository.ConstructorRepository.parse",
          "source": "ConstructorRepository.java:43"
        },
        {
          "method": "sun.reflect.generics.repository.AbstractRepository.\u003cinit\u003e",
          "source": "AbstractRepository.java:74"
        },
        {
          "method": "sun.reflect.generics.repository.GenericDeclRepository.\u003cinit\u003e",
          "source": "GenericDeclRepository.java:48"
        },
        {
          "method": "sun.reflect.generics.repository.ConstructorRepository.\u003cinit\u003e",
          "source": "ConstructorRepository.java:51"
        },
        {
          "method": "sun.reflect.generics.repository.MethodRepository.\u003cinit\u003e",
          "source": "MethodRepository.java:46"
        },
        {
          "method": "sun.reflect.generics.repository.MethodRepository.make",
          "source": "MethodRepository.java:59"
        },
        {
          "method": "java.lang.reflect.Method.getGenericInfo",
          "source": "Method.java:119"
        },
        {
          "method": "java.lang.reflect.Method.getGenericParameterTypes",
          "source": "Method.java:307"
        },
        {
          "method": "org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider.getGenericParameterTypes",
          "source": "Java15GenericSignatureInformationProvider.java:44"
        },
        {
          "method": "org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.getGenericParameterTypes",
          "source": "ReflectionBasedResolvedMemberImpl.java:120"
        },
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.matches",
          "source": "ResolvedMemberImpl.java:781"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.lookupResolvedMember",
          "source": "ResolvedType.java:387"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes",
          "source": "JoinPointSignatureIterator.java:178"
        },
        {
          "method": "org.aspectj.weaver.JoinPointSignatureIterator.hasNext",
          "source": "JoinPointSignatureIterator.java:69"
        },
        {
          "method": "org.aspectj.weaver.patterns.SignaturePattern.matches",
          "source": "SignaturePattern.java:287"
        },
        {
          "method": "org.aspectj.weaver.patterns.KindedPointcut.matchInternal",
          "source": "KindedPointcut.java:106"
        },
        {
          "method": "org.aspectj.weaver.patterns.Pointcut.match",
          "source": "Pointcut.java:146"
        },
        {
          "method": "org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch",
          "source": "PointcutExpressionImpl.java:235"
        },
        {
          "method": "org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution",
          "source": "PointcutExpressionImpl.java:101"
        },
        {
          "method": "org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution",
          "source": "PointcutExpressionImpl.java:92"
        },
        {
          "method": "org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch",
          "source": "AspectJExpressionPointcut.java:345"
        },
        {
          "method": "org.springframework.aop.aspectj.AspectJExpressionPointcut.matches",
          "source": "AspectJExpressionPointcut.java:231"
        },
        {
          "method": "org.springframework.aop.support.AopUtils.canApply",
          "source": "AopUtils.java:195"
        },
        {
          "method": "org.springframework.aop.support.AopUtils.canApply",
          "source": "AopUtils.java:236"
        },
        {
          "method": "org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply",
          "source": "AopUtils.java:270"
        },
        {
          "method": "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors",
          "source": "AbstractAdvisorAutoProxyCreator.java:83"
        },
        {
          "method": "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean",
          "source": "AbstractAdvisorAutoProxyCreator.java:66"
        },
        {
          "method": "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization",
          "source": "AbstractAutoProxyCreator.java:296"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization",
          "source": "AbstractAutowireCapableBeanFactory.java:312"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean",
          "source": "AbstractAutowireCapableBeanFactory.java:1180"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean",
          "source": "AbstractAutowireCapableBeanFactory.java:425"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject",
          "source": "AbstractBeanFactory.java:251"
        },
        {
          "method": "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton",
          "source": "DefaultSingletonBeanRegistry.java:156"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory.getBean",
          "source": "AbstractBeanFactory.java:248"
        },
        {
          "method": "org.springframework.beans.factory.support.AbstractBeanFactory.getBean",
          "source": "AbstractBeanFactory.java:160"
        },
        {
          "method": "org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons",
          "source": "DefaultListableBeanFactory.java:287"
        },
        {
          "method": "org.springframework.context.support.AbstractApplicationContext.refresh",
          "source": "AbstractApplicationContext.java:352"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext",
          "source": "AbstractSingleSpringContextTests.java:199"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations",
          "source": "AbstractSingleSpringContextTests.java:179"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.loadContext",
          "source": "AbstractSingleSpringContextTests.java:158"
        },
        {
          "method": "org.springframework.test.AbstractSpringContextTests.getContext",
          "source": "AbstractSpringContextTests.java:105"
        },
        {
          "method": "org.springframework.test.AbstractSingleSpringContextTests.setUp",
          "source": "AbstractSingleSpringContextTests.java:87"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:125"
        },
        {
          "method": "org.springframework.test.ConditionalTestCase.runBare",
          "source": "ConditionalTestCase.java:69"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3TestReference.java:128"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:38"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 1,
      "commentIndex": 4,
      "bugId": "207186",
      "date": "2007-10-24T23:11:13+02:00",
      "product": "AspectJ",
      "component": "Runtime",
      "severity": "normal"
    }
  ],
  "groupId": "207186",
  "bugId": "207186",
  "date": "2007-10-23T17:51:59+02:00",
  "product": "AspectJ",
  "component": "Runtime",
  "severity": "normal"
}