{
  "comments": [
    "I have discovered a very special case while compiling a large project.\nWhen the stars are aligned just right, the byte code generated by Eclipse\nis invalid. This causes JVM to throw ClassFormatError. At the bottom of\nthis post, there is a listing of the code that creates the problem. \n\nI have verified that this problem exists in the latest build and in the\nlast stable build. \n\nTo Recreate the problem: \n\n1)  Turn on all debugging information within\nWorkbench-\u003ePreferences-\u003eJava-\u003eCompiler-\u003eClassFileGeneration.\n2)  Compile the following code within eclipse.\n3)  Run the following code within eclipse or stand alone.\n\nNote:  Same code compiled with JDK 1.3.1, 1.4.0 with -g options does not\ncreate ClassFormatError.\n\n\n\n\n----Test.java----\nimport java.util.Enumeration;\nimport java.util.Vector;\n\npublic class Test\n{\n  private void test(Vector v)\n  {\n    // value must NOT be initialized here.\n    String value;\n\n    // For loop with enumeration must be used.\n    for (Enumeration e \u003d v.elements(); e.hasMoreElements();)\n    {\n      try\n      {\n        //value must be INITIALIZED and USED here.\n        value \u003d \"x\";\n        //value must be used within this block         \n        System.out.println(value);\n      }\n      catch (RuntimeException re)\n      {\n        // Continue must be present here.\n        continue;\n      }\n    }\n  }\n\n  public static void main(String[] arguments)\n  {\n    System.out.println(\"done\");\n  }\n}\n\n-----END-----",
    "\"Jay Patel\" \u003cjpatel@getthere.com\u003e wrote in message\nnews:a8j7b8$hin$1@rogue.oti.com...\n\u003e I have verified that this problem exists in the latest build and in the\n\u003e last stable build.\nVerified on 20020402, so its not just you:\n\nException in thread \"main\" java.lang.ClassFormatError: Test (Invalid\nstart_pc/length in local var table)\n        at java.lang.ClassLoader.defineClass0(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:509)\n        at\njava.security.SecureClassLoader.defineClass(SecureClassLoader.java:123)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:246)\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:54)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:193)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:186)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:265)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:262)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:322)\n\n",
    "Original defect was reported on newsgroup.",
    "I am surprised our sanity check did not capture this one scenario...",
    "The sanity check only ensures that local variable attributes with endPC equals to -1 are not \ngenerated. In the above test case we had a range for which the startPC was greater than the endPC \n(startPC \u003d 25 and endPC \u003d 22). The reason of this was the optimization of the gotos. We looked first \nif the endPC was at old_position and if true, we check also that startPC was at old_position. The \nbug was that this two tests should be independant. Changing this in the gotos optimization fixed \nthe VerifyError, because instead of having (25, 22) we had (22, 22) and before generating local \nvariable attributes, we check that startPC is different from endPC. We might want to change this \ntest for startPC \u003e endPC. But if we do that we might hidden bugs like this one.\nI will run more tests \nto ensure I don\u0027t break anything else.",
    "Fixed and released in HEAD."
  ],
  "commentCreationDates": [
    "2002-04-05T12:17:10+02:00",
    "2002-04-05T12:18:20+02:00",
    "2002-04-05T12:22:57+02:00",
    "2002-04-05T16:49:47+02:00",
    "2002-04-08T17:24:55+02:00",
    "2002-04-09T15:11:51+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassFormatError",
      "message": "Test (Invalid start_pc/length in local var table)",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:509"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:123"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:246"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:54"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:193"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:186"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:306"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:265"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:262"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:322"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "12858",
      "date": "2002-04-05T12:18:20+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "12858",
  "bugId": "12858",
  "date": "2002-04-05T12:17:10+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}