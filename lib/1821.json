{
  "comments": [
    "1) create junit project and import source (as in smoke test)\n\t2) modify any source file but don\u0027t save it\n\t3) delete underlying JUnit project\n\t4) click into dirty editor\n\t5) when asked whether to save the contents say \"Yes\"\n\tObserve:\n\t\t\ta completely empty Save As dialog appears\n\t6) dismiss dialog with \"Cancel\"\n\tObserve:\n\t\t\toutliner is still there\n\t7) delete elements from outliner\n\tObserve:\n\t\t\tsometimes you get an error dialog sometimes the action is silently ignored\n\t8) perform \"Organize imports\" from context menu\n\tObserve:\n\t\t\tWalkback, which is not reported in log (see below)\n\t\t\tError alert with strange titel \"AddGetterSetterActionFailed\"\n\n\njava.lang.reflect.InvocationTargetException: Java Model Exception: Java Model St\natus [ does not exist.]\n        at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(Java\nElement.java:442)\n        at org.eclipse.jdt.internal.core.PackageFragmentRoot.getUnderlyingResour\nce(PackageFragmentRoot.java:255)\n        at org.eclipse.jdt.internal.core.PackageFragment.getUnderlyingResource(P\nackageFragment.java(Compiled Code))\n        at org.eclipse.jdt.internal.core.Openable.getUnderlyingResource(Openable\n.java:212)\n        at org.eclipse.jdt.internal.ui.util.DocumentManager.getUnderlyingResourc\ne(DocumentManager.java:48)\n        at org.eclipse.jdt.internal.ui.util.DocumentManager.\u003cinit\u003e(DocumentManag\ner.java:41)\n        at org.eclipse.jdt.internal.ui.codemanipulation.ImportsStructure.create(\nImportsStructure.java:238)\n        at org.eclipse.jdt.internal.ui.codemanipulation.OrganizeImportsOperation\n.execute(OrganizeImportsOperation.java:141)\n        at org.eclipse.ui.actions.WorkspaceModifyOperation$1.run(WorkspaceModify\nOperation.java:66)\n        at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1183\n)\n        at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOp\neration.java:78)\n        at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:266)\n        at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDi\nalog.java:354)\n        at org.eclipse.jdt.internal.ui.javaeditor.OrganizeImportsAction.run(Orga\nnizeImportsAction.java:64)\n        at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection\n(ActionContributionItem.java:423)\n        at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(Act\nionContributionItem.java(Compiled Code))\n        at org.eclipse.jface.action.ActionContributionItem$ActionListener.handle\nEvent(ActionContributionItem.java(Compiled Code))\n        at org.eclipse.jface.action.ActionContributionItem$ActionListener.handle\nEvent(ActionContributionItem.java(Compiled Code))\n        at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled C\node))\n        at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled C\node))\n        at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compil\ned Code))\n        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled\n Code))\n        at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compile\nd Code))\n        at org.eclipse.ui.internal.Workbench.run(Workbench.java:732)\n        at org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoa\nder.java:815)\n        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at org.eclipse.core.launcher.Main.basicRun(Main.java:69)\n        at org.eclipse.core.launcher.Main.run(Main.java:311)\n        at org.eclipse.core.launcher.UIMain.main(UIMain.java:43)\n\t\nNOTES:\nEG (6/7/2001 11:15:22 AM)\t\n\tdeleting a project should close all its editors. We had this behaviour\n\tin the tech preview. Without this change many strange followup errors\n\tcan occur. Suggest fix\n\nJW (6/7/01 5:33:18 PM)\n\tOk to fix.\n\nEG (6/7/2001 1:07:26 PM)\n\tsee also 1GEWU4O: ITPUI:WIN2000 - SEVERE - Changes lost while closing workbench\n\t1GEYMVK: ITPJUI:WINNT - strange SaveAs dialog when deleting project\n\nEG (6/7/2001 9:50:05 PM)\n\tThis can be fixed in the AbstractTextEditor, however this would require\n\tthat PDE and other editors have to copy the code.\n\tMoving to ITPUI\n\nKH (6/8/2001 5:27:53 AM)\n\tFixing it in the UI would solve the more likely scenario. However, if instead of deleting the project from within\n\teclipse the project was deleted externally (eg. use the file explorer). The exact same case arrises and there is\n\tnothing that the workbench could do to solve this problem. The editor is already partially handling this case. \n\tUntil Core provides notification of external callbacks a full fix would be for editors to handle this case. \n\n\t[... now we can have the discussion about every editor vs workbench editor framework handling it]\n\nEG (6/8/2001 12:00:12 AM)\n\t[and the discussion starts again...]\n\tRegarding workbench vs. editor responsibility. The workbench should\n\tnot show editors from a deleted project. This rule\n\thas to be established by the workbench and not\n\tthe individual editors. The problem of delegating establishing this\n\trules to the editor means:\n\t*\tthe API for implementing an Editor becomes more and more fad (serious)\n\t*\tcode duplication (not serious)\n\t*\tlikely inconsistent UI and strange errors situations that are\n\t\tfiled against the workbench instead of the editor implementors (serious)\n\nDS (6/8/01 10:42:45 AM)\n\tIn the workbench this problem may be handled in 2 places: in each individual action\n\tor in the workbench framework.  \n\n\t1. If we do it in the workbench framework we will fail.  The workbench does not know \n\twhat relationship exists between a given object and the editors which may be open on it.  \n\tWe understand IResources.  That\u0027s it.  Unfortunately, many plugins go well beyond this.  \n\n\t- Take the Package View, where you can open up classes in an external jar.  These are not IFiles.\n\tIf a project with external jars is closed how can we possibly infer any relationship between \n\tthe project and the editor?   \n\n\t- Take the Repository View, where you can open up IStorage items.  These are not\n\tIFiles.  If a repository is closed how can we infer any relationship between the repository\n\tand the editor?\n\n\t2. If we do it in each individual action we will encounter the same ambiguity as\n\tfound in the workbench framework.  it will also lead to code duplication within\n\teach action and inconsistent behavior between actions.  One action may forget\n\tto do the editor close check.  Another may implement a \"better, special\" algorithm.  \n\n\tI thoroughly believe the place to do this is the editor.  It contains the domain knowledge\n\trequired to interpret model specific events appropriately, and provides centralization to reduce\n\tcode duplication.  The behavior for each editor type will be consistent.  The behavior\n\tacross editor types may be slightly inconsistent, but there are two points which minimize my\n\tconcern in this area.  \n\n\t(a) The typical user may invoke hundreds of actions and only \n\tuse a handful of editors ( 1 to 5 ?  As a java developer I may only use 1 ).  A slight \n\tinconsistency among 1 to 5 familiar editors is much better than a slight inconsistency \n\tamong 100 rarely used actions.  \n\n\t(b) The editor framework gives us a great way to provide the default behavior for free.\n\n\nKH (6/8/2001 11:20:15 AM)\n\n \tThe Workbench\u0027s editor framework is \"thin\". As a post June activity it should be improved so that\n\teditor implementors do NOT have to handle this case. Maybe we could even get support from\n\tcore so we can do it right?!\n\nKH (6/8/2001 11:53:40 AM)\n \tThis must be fixed post June. \n\nEG (6/8/2001 7:12:19 AM)\n\tDiscussed with KUM and we came to the conclusion that the safest route is to make\n\tthis change in the editor (for now). It is important that this is revisited after June.\n\t\nKH (6/8/2001 1:19:52 PM)\n\tYes. \n\nKUM (6/9/01 1:21:43 PM)\n\tAdapted AbstractTextEditor so that the stale state cannot occur. Build \u003e 121.\n\nEG (6/9/2001 12:33:48 PM)\n\treviewed\n\nKH (6/12/2001 7:03:33 AM)\n\tMust address editor framework issues.",
    "PRODUCT VERSION:\n\tSmoke 120\n\n",
    "Consider additional improvements post 2.0",
    "reopened for investigation",
    "Main issues are solved."
  ],
  "commentCreationDates": [
    "2001-10-11T04:19:56+02:00",
    "2001-10-24T12:47:02+02:00",
    "2002-05-02T23:08:18+02:00",
    "2002-08-01T17:48:50+02:00",
    "2003-02-04T10:18:28+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "message": "Java Model Exception: Java Model St atus [ does not exist.]",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.core.JavaElement.newNotPresentException",
          "source": "Java Element.java:442"
        },
        {
          "method": "org.eclipse.jdt.internal.core.PackageFragmentRoot.getUnderlyingResource",
          "source": "PackageFragmentRoot.java:255"
        },
        {
          "method": "org.eclipse.jdt.internal.core.PackageFragment.getUnderlyingResource",
          "source": "P ackageFragment.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.jdt.internal.core.Openable.getUnderlyingResource",
          "source": "Openable .java:212"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.util.DocumentManager.getUnderlyingResource",
          "source": "DocumentManager.java:48"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.util.DocumentManager.\u003cinit\u003e",
          "source": "DocumentManag er.java:41"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.codemanipulation.ImportsStructure.create",
          "source": " ImportsStructure.java:238"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.codemanipulation.OrganizeImportsOperation.execute",
          "source": "OrganizeImportsOperation.java:141"
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation$1.run",
          "source": "WorkspaceModify Operation.java:66"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1183 "
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation.run",
          "source": "WorkspaceModifyOp eration.java:78"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext.run",
          "source": "ModalContext.java:266"
        },
        {
          "method": "org.eclipse.jface.dialogs.ProgressMonitorDialog.run",
          "source": "ProgressMonitorDi alog.java:354"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.javaeditor.OrganizeImportsAction.run",
          "source": "Orga nizeImportsAction.java:64"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:423"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent",
          "source": "Act ionContributionItem.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent",
          "source": "ActionContributionItem.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent",
          "source": "ActionContributionItem.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.notifyListeners",
          "source": "Widget.java(Compiled C ode)"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.notifyListeners",
          "source": "Widget.java(Compiled C ode)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java(Compil ed Code)"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java(Compiled  Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java(Compile d Code)"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:732"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoa der.java:815"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:285"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:69"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:311"
        },
        {
          "method": "org.eclipse.core.launcher.UIMain.main",
          "source": "UIMain.java:43"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "1821",
      "date": "2001-10-11T04:19:56+02:00",
      "product": "Platform",
      "component": "Text",
      "severity": "normal"
    }
  ],
  "groupId": "1821",
  "bugId": "1821",
  "date": "2001-10-11T04:19:56+02:00",
  "product": "Platform",
  "component": "Text",
  "severity": "normal"
}