{
  "comments": [
    "Adding a switch statement in the aspect code causes the weaving process to \nthrow java.lang.NullPointer. This error is reproducable on ajc1.1.0, the \nformal release version. ajc1.0, however, works fine. \n\nTo re-produce, use the following java program:\n\npublic class Test {\n\tpublic String method1(){\n\t\tSystem.out.println(\"method1\");\n\t\treturn \"method1\";\n\t}\n        \n        public static void  main(String [] args)\n\t{\n\t\tSystem.out.println(new Test().method1());\n\t}\n}\n\nAnd the following AspectJ code:\n\npublic privileged aspect TestAspect {\n\tString around(Test t):target(t)\u0026\u0026\n\tcall(public String method1())\n\t{\n\t\tint flag \u003d 1;\n\t\tswitch(flag)\n\t\t{\n\t\t\tcase 1: \n\t\t}\n\t\treturn null;\n\t}\n}\n\nHere is the output I got:\ntrouble in:\npublic class Test extends java.lang.Object:\n  public void \u003cinit\u003e():\n                    ALOAD_0     // Test this   (line 13)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void Test.\u003cinit\u003e())\n    |               RETURN\n    constructor-execution(void Test.\u003cinit\u003e())\n  end public void \u003cinit\u003e()\n\n  public String method1():\n    method-execution(java.lang.String Test.method1())\n    | field-get(java.io.PrintStream java.lang.System.out)\n    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;   \n(line 15)\n    | field-get(java.io.PrintStream java.lang.System.out)\n    |               LDC \"method1\"\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    | |             INVOKEVIRTUAL java.io.PrintStream.println \n(Ljava/lang/String;)V\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    |               LDC \"method1\"   (line 16)\n    |               ARETURN\n    method-execution(java.lang.String Test.method1())\n  end public String method1()\n\n  public static void main(String[]):\n    method-execution(void Test.main(java.lang.String[]))\n    | field-get(java.io.PrintStream java.lang.System.out)\n    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;   \n(line 23)\n    | field-get(java.io.PrintStream java.lang.System.out)\n    |               NEW Test\n    |               DUP\n    | constructor-call(void Test.\u003cinit\u003e())\n    | |             INVOKESPECIAL Test.\u003cinit\u003e ()V\n    | constructor-call(void Test.\u003cinit\u003e())\n    |               ASTORE_1\n    | method-call(java.lang.String Test.method1())\n    | |             ALOAD_1\n    | |             INVOKESTATIC Test1Aspect.aspectOf ()LTest1Aspect;\n    | |             ALOAD_1\n    | |             ACONST_NULL\n    | |             INVOKESTATIC Test.method1_aroundBody1$advice \n(LTest;LTest1Aspect;LTest;Lorg/aspectj/runtime/internal\n/AroundClosure;)Ljava/lang/String;\n    | method-call(java.lang.String Test.method1())\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    | |             INVOKEVIRTUAL java.io.PrintStream.println \n(Ljava/lang/String;)V\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    |               RETURN   (line 24)\n    method-execution(void Test.main(java.lang.String[]))\n  end public static void main(String[])\n\n  static final String method1_aroundBody0(Test):\n                    ALOAD_0\n                    INVOKEVIRTUAL Test.method1 ()Ljava/lang/String;   (line 23)\n                    ARETURN\n  end static final String method1_aroundBody0(Test)\n\n  static final String method1_aroundBody1$advice(Test, Test1Aspect, Test, \norg.aspectj.runtime.internal.AroundClosure):\n    advice-execution(java.lang.String Test1Aspect.ajc$around$Test1Aspect$e7\n(Test, org.aspectj.runtime.internal.AroundClo\nsure))\n    |               ICONST_1   (line 18)\n    |               ISTORE 4\n    |               ILOAD 4   (line 19)\n    |               TABLESWITCH\n    |                 1:        null\n    |                 default:  L0\n    |           L0: ACONST_NULL   (line 23)\n    |               ARETURN\n    advice-execution(java.lang.String Test1Aspect.ajc$around$Test1Aspect$e7\n(Test, org.aspectj.runtime.internal.AroundClo\nsure))\n  end static final String method1_aroundBody1$advice(Test, Test1Aspect, Test, \norg.aspectj.runtime.internal.AroundClosure\n)\nend public class Test\nABORT\nException thrown from AspectJ 1.1.0\n\nThis might be logged as a bug already -- find current bugs at\n  http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\nBugs for exceptions thrown have titles File:line from the top stack,\ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nat http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nnull\njava.lang.NullPointerException\n        at org.aspectj.weaver.bcel.LazyMethodGen.remap(LazyMethodGen.java:892)\n        at org.aspectj.weaver.bcel.LazyMethodGen.packBody\n(LazyMethodGen.java:800)\n        at org.aspectj.weaver.bcel.LazyMethodGen.pack(LazyMethodGen.java:706)\n        at org.aspectj.weaver.bcel.LazyMethodGen.getMethod\n(LazyMethodGen.java:284)\n        at org.aspectj.weaver.bcel.LazyClassGen.writeBack\n(LazyClassGen.java:164)\n        at org.aspectj.weaver.bcel.LazyClassGen.getJavaClass\n(LazyClassGen.java:169)\n        at org.aspectj.weaver.bcel.BcelWeaver.dump(BcelWeaver.java:417)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:364)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:335)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:272)\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile\ns(AjBuildManager.java:256)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:164)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:78)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:106)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n        at org.aspectj.tools.ajc.Main.run(Main.java:217)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:155)\n        at org.aspectj.tools.ajc.Main.main(Main.java:72)\n\n\n1 fail|abort",
    "Created an attachment (id\u003d5464)\nTest case\n",
    "Created an attachment (id\u003d5465)\nPatch for LazyMethodGen to fix this bug.\n\nThe above patch does the same kind of fix as in 39479 - when a bcel instruction\nis copied, it checks to see if it is a Select - if it is then it does a special\nkind of copy.  This works around a BCEL bug - see 39479 for more discussion.\n",
    "The general fix for bug #39479 fixes this bug as well, so its being marked as\na duplicate.  This bug report was very valuable in identifying the need for\na properly general solution to that bug.\n\n*** This bug has been marked as a duplicate of 39479 ***"
  ],
  "commentCreationDates": [
    "2003-07-15T16:29:17+02:00",
    "2003-07-15T16:33:30+02:00",
    "2003-07-15T18:33:32+02:00",
    "2003-07-17T01:28:04+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.remap",
          "source": "LazyMethodGen.java:892"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.packBody",
          "source": "LazyMethodGen.java:800"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.pack",
          "source": "LazyMethodGen.java:706"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.getMethod",
          "source": "LazyMethodGen.java:284"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.writeBack",
          "source": "LazyClassGen.java:164"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.getJavaClass",
          "source": "LazyClassGen.java:169"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.dump",
          "source": "BcelWeaver.java:417"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:364"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:335"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:272"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles",
          "source": "AjBuildManager.java:256"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:164"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:78"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:106"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:60"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:217"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:155"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:72"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "40109",
      "duplicateId": "39479",
      "date": "2003-07-15T16:29:17+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "39479",
  "bugId": "40109",
  "duplicateId": "39479",
  "date": "2003-07-15T16:29:17+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}