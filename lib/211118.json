{
  "comments": [
    "+++ This bug was initially created as a clone of Bug #211083 +++\n\nCreated an attachment (id\u003d83883)\nthe model triggering the exception and the metamodel\n\ntaken from the newsgroup eclipse.tools.emf \u003cfiher1$o7e$1@build.eclipse.org\u003e:\n\n\u003e\u003e\u003e\u003e I got this exception when trying to save a model using a generated EMF editor :\n\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\u003e\u003e\u003e\u003e \tat java.lang.String.charAt(Unknown Source)\n\u003e\u003e\u003e\u003e \tat org.eclipse.emf.ecore.xmi.impl.XMLHelperImpl.getURIFragment(XMLHelperImpl.java:718)\n\u003e\u003e\u003e\u003e   \n\u003e\u003e\u003e\u003e       \n\u003e\u003e\u003e This implies you resource\u0027s getURIFragment is returning something\n\u003e\u003e\u003e invalid, i.e., a null or empty string can be correct:\n\u003e\u003e\u003e\n\u003e\u003e\u003e       String result \u003d containingResource.getURIFragment(object);\n\u003e\u003e\u003e       if (result.charAt(0) !\u003d \u0027/\u0027)\n\u003e\u003e\u003e\n\u003e\u003e\u003e\u003e The current model is not valid, some id attribute values are missing and some other id values are duplicated.\n\u003e\u003e\u003e\u003e   \n\u003e\u003e\u003e I guess some ID attribute\u0027s value ends up being a string of length 0.  I\n\u003e\u003e\u003e suppose you could specialize this method of ResourceImpl to check for a\n\u003e\u003e\u003e null string:\n\u003e\u003e\u003e\n\u003e\u003e\u003e       public String getURIFragment(EObject eObject)\n\u003e\u003e\u003e       {\n\u003e\u003e\u003e         String id \u003d EcoreUtil.getID(eObject);\n\u003e\u003e\u003e         if (id !\u003d null)\n\u003e\u003e\u003e         {\n\u003e\u003e\u003e           return id;\n\u003e\u003e\u003e         }\n\u003e\u003e\u003e\n\u003e\u003e\u003e Perhaps we should change that in the base code.\n\u003e\u003e\u003e     \n\u003e\u003e\u003e\u003e I\u0027m using EMF 2.3.0 200709252135 running on Eclipse 3.4.0 200709210919 and JDK 6u3\n\u003e\u003e\u003e\u003e\n\u003e\u003e\u003e You could use\n\u003e\u003e\u003e Diagnostician.INSTANCE.validate() to ensure the objects in the resource\n\u003e\u003e\u003e are error free before you try to serialize.  Probably we should just use\n\u003e\u003e\u003e\n\u003e\u003e\u003e       if (result.startsWith(\"/\"))\n\u003e\u003e\u003e\n\u003e\u003e\u003e     \n\u003e\u003e Uhm, shouldn\u0027t this be\n\u003e\u003e\n\u003e\u003e if (!result.startsWith(\"/\"))\n\u003e\u003e     ^\n\u003e\u003e then?\n\u003e\u003e   \n\u003e Oops.  Clearly not tested...\n\u003e\u003e   \n\u003e\u003e\u003e in place of\n\u003e\u003e\u003e\n\u003e\u003e\u003e       if (result.charAt(0) !\u003d \u0027/\u0027)\n\u003e\u003e\u003e\n\u003e\u003e\u003e though that\u0027s a little less efficient.  Perhaps this is better though\n\u003e\u003e\u003e still slower than assuming there\u0027s a least one character in the fragment.\n\u003e\u003e\u003e\n\u003e\u003e\u003e     if (result.size() \u003e 0 \u0026\u0026 charAt(0) !\u003d \u0027/\u0027)\n\u003e\u003e\u003e",
    "The fix is committed to CVS for 2.4.",
    "Fixed in I200711272121."
  ],
  "commentCreationDates": [
    "2007-11-27T20:03:23+01:00",
    "2007-11-27T20:04:29+01:00",
    "2007-11-28T04:00:59+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: 0 \u003e\u003e\u003e\u003e",
      "elements": [
        {
          "method": "java.lang.String.charAt",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "211118",
      "date": "2007-11-27T20:03:23+01:00",
      "product": "EMF",
      "component": "XML/XMI",
      "severity": "normal"
    }
  ],
  "groupId": "211118",
  "bugId": "211118",
  "date": "2007-11-27T20:03:23+01:00",
  "product": "EMF",
  "component": "XML/XMI",
  "severity": "normal"
}