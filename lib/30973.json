{
  "comments": [
    "On a desktop machine (300PL 786 RAM) running IE 5.50.4807.2300 accessing an \nInfocenter the navigation opens correctly.\n\nOn a ThinkPad (T23 1Ghz RAM) running the same version of IE accessing the same \nInfocenter the navigation does not completely load. \n\nThis problem has been reported by several users, in every case the desktop \nmachine has displayed the navigation correctly, while the ThinkPad has not.",
    "Which build is the infocenter based on?\nAre there any errors displayed?\nCan you provide a screen shot of what does not load?\nI notice Thinkpad is probably a faster machine.  Does the problem occur on \nfaster desktops?\nThanks.",
    "I received the screen shots and tried to connect to the URL shown.  I observe \nlost of out of memory erros like below.\nThe faster the client machine, the more requests are sent to the server, and \nheavier the load, so this might explain why you see help loaded partially on \nfaster machines.  Does your server has enough memory?  If yes, try adding \noptions: \"-vmargs -Xmx256M\" when launching infocenter on the server.\n\nHTTP Status 500 - Internal Server Error\n\n--------------------------------------------------------------------------------\n\ntype Exception report\n\nmessage Internal Server Error\n\ndescription The server encountered an internal error (Internal Server Error) \nthat prevented it from fulfilling this request.\n\nexception \n\njavax.servlet.ServletException\n\tat org.apache.jasper.runtime.PageContextImpl.handlePageException\n(PageContextImpl.java:471)\n\tat org.eclipse.help.internal.webapp.jsp.advanced.tocView._jspService\n(tocView.java(Compiled Code))\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java\n(Compiled Code))\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java(Compiled \nCode))\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java(Compiled Code))\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java(Compiled Code))\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java\n(Compiled Code))\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.StandardContext.invoke(StandardContext.java\n(Compiled Code))\n\tat org.apache.catalina.core.StandardContext.invoke(StandardContext.java\n(Compiled Code))\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java(Compiled Code))\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java(Compiled Code))\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java\n(Compiled Code))\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java(Compiled Code))\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java\n(Compiled Code))\n\tat org.apache.catalina.connector.http.HttpProcessor.process\n(HttpProcessor.java(Compiled Code))\n\tat org.apache.catalina.connector.http.HttpProcessor.run\n(HttpProcessor.java(Compiled Code))\n\tat java.lang.Thread.run(Thread.java:498)\n\n\nroot cause \n\njava.lang.OutOfMemoryError\n\n\n\n--------------------------------------------------------------------------------\n",
    "I\u0027ve done some additional tests, the processor speed doesn\u0027t seem to matter. \nThe scenario was tested on  a fast desktop (Pentium IV, 2GHz) and a slow one (P-\nII, 400 MHz) and both work, but does not work on P-III, 900MHz ThinkPad.\n\nThe server running the Infocenter has 8GV of memory and 212.3GB of hard drive \nspace. I\u0027ll update the server startup script with the options -vmargs -Xmx256M",
    "-vmargs -Xmx256M doesn\u0027t seem to be a valid option. The infocenter is  using \nJava 1.3",
    "How are you launching the infocenter, what is the command?",
    "#!/usr/bin/ksh\n#\n# Script to start and stop Eclipse Infocenter\n#\nif [ $# -gt 1 -o $# -le 0 ]; then\n  echo \"You have an incorrect number of options.\"\n  echo \"Acceptable options are:\"\n  echo \"    start\"\n  echo \"    stop\" \n  exit 1\nfi\n\nif [ \"$1\" !\u003d \"start\" -a \"$1\" !\u003d \"stop\" ]; then\n  echo \"You have entered an incorrect option.\"\n  echo \"Acceptable options are:\"\n  echo \"     start\"\n  echo \"     stop\"\n  exit 1\nfi\n\n\nif [ \"$1\" \u003d \"start\" ]; then\n  echo $1ing eclipse infocenter\n  nohup java -Xmx256M -\nclasspath /usr/eclipse/eclipse/plugins/org.eclipse.help_2.1.0/help.jar \norg.eclipse.help.standalone.Infocenter -command start -\neclipsehome /usr/eclipse/eclipse -port 8081 \u0026\nfi\n\nif [ \"$1\" \u003d \"stop\" ]; then\n  echo $1ing eclipse infocenter\n  java -vmargs -Xmx256M -\nclasspath /usr/eclipse/eclipse/plugins/org.eclipse.help_2.1.0/help.jar \norg.eclipse.help.standalone.Infocenter -command shutdown -\neclipsehome /usr/eclipse/eclipse \nfi\n\nexit 0",
    "The option needs to be passed as a parameter to the Infocenter class so it will \nbe used when lunching Eclipse in a separate java process.\nFor example, instead of\n\njava -vmargs -Xmx256M -\nclasspath /usr/eclipse/eclipse/plugins/org.eclipse.help_2.1.0/help.jar \norg.eclipse.help.standalone.Infocenter -command shutdown -\neclipsehome /usr/eclipse/eclipse \n\nuse\n\njava -classpath /usr/eclipse/eclipse/plugins/org.eclipse.help_2.1.0/help.jar \norg.eclipse.help.standalone.Infocenter -command shutdown -\neclipsehome /usr/eclipse/eclipse -vmargs -Xmx256M ",
    "I\u0027ve changed the startup script, using the options that you provided. This has \nimproved overall performance, but has not changed the behavior of the TOC \nloading. ",
    "Your books seem to be very large.  How many topics (aprox.) do you have in each \nof them?\n\nAfter you added the memory option to the infocenter, can you clear the browser \ncache on the client machines and try looking at help again?\n\nIf you wait long enough (a minute), does the navigation eventually load, or \ndoes it stay incomplete?",
    "There are 3 top-level books which contain 5 doc plug-ins, the contents of the \nlast 3 items are all shown under the Reference heading. \n\nuser - 600 topics\nmessages - 1\ndatabase - 600 topics\ndeveloper - 900 topics\napi - 13,285 topics\n\nAfter clearing the cache on the client machine, the TOC still won\u0027t load on a \nT23 ThinkPad, regardless of how long I wait.\n\n",
    "I cannot reproduce your problem.  I use T23 Thinkpad with IE6.0sp1.  The \nloading of the first book is little slow.  The HTML for the book has 3.2MB, but \nit eventually loads.  I assume you only see this problem with the first book \ncorrect?\n\nThis looks to me like it is a performance problem with a large book that cannot \nbe easily solved rather than a straight forward bug.  I can visit you tomorrow \nand take a look on how it loads on your Thinkpad.\n\nCan you run Windows Update on one of the Thinkpads, and install the latest \npatches from Microsoft?  Does it make a difference?",
    "I have installed the latest patches from Microsoft, and it didn\u0027t make any \ndiffernce. Please drop by tomorrow.",
    "Help does not scale up to many thousands of topics. It is recommended to keep \nthe size of each book to about 2000 topics (the eclipse books contain just a \nfew hundrededs). The HTML generated for a book is roughly about 200 bytes per \ntopic, and, for practical purposes (download time, rendering, etc.) it is \nrecommended to keep html file size to under half a meg.\nIs it possible to break your large book into smaller books?",
    "The book that causes the problems is generated by the Eclipse Javadoc doclet. \nIt is not possible to divide the book into smaller chunks, doing so would \ninvolve many hours of manually correcting links. In addition since the help \nsystem works on slower processors, but not faster ones, breaking up the help \nwould not necessarily fix the problem anyways. ",
    "I am a little confused about the \"Eclipse javadoc doclet\" term. Is this doclet \nprovided by Eclipse or is something you use internally?\nPerhaps one could invoke the doclet multiple times, to scope the TOC generated \nto fewer packages. \n\nI think that breaking out a large TOC into smaller ones would certainly improve \nhelp on all the machines, regardless of processor speed or memory, and it would \ncertainly improve the infocenter scenario, as only one book at a time is \ndownloaded in a client browser.",
    "The Eclipse help doclet generates Javadoc appropriate for use in an Eclipse \ninfocenter. The doclet is supported by IBM UA group, and is supposed to be used \nby all ID teams creating Javadoc that will end up in an Eclipse-based help \nsystem. There are no options to create multiple plugins. \n\nPerformance is not the issue, the Infocenter loads correctly on older slower \nmachines. The problem occur on better machines with faster network connections. \nOn my ThinkPad the Infocenter navigation will not launch from work, but will \nlaunch from home, without significant performance problems.",
    "As suggested in your previous comment, I have broken the Javadoc down into many \nsmall plugins. The average plugin size is 480 files.  The TOC still fails to \nload on some machines. The same pattern is obsevered, that is on slower \nmachines and/or with slower network connections the TOC loads correctly. On \nfaster machines and/or faster network connections the TOC fails to load.",
    "Valerie,\n\nWhat dorian ment is to have the size of the top level book, visible in the \nbrowser decreased below 2000 topics.\nIf you had split your TOCs on the filesystem, but added links to link TOCs \ntogether, so they are still presented the same way the problem will not go \naway.  Keep the TOCs split, but designate most of them as primary and do not \nlink non primary such as to ever produce tree larger than 2000 topics.  The \nimportant is how large is a single top level book from a browser point of view.",
    "I\u0027ve been following this bug with a bit of interest because I\u0027m experiencing \nthe same problem. I\u0027m working on a documentation set that easily holds \u003e2000 \ntopics in a book (sometimes, it\u0027s hard to avoid this) and I serve it up via \nEclipse Infocenter. In addition, I\u0027ve tested the behaviour on several of my co-\nworkers\u0027 machines and here are my observations (only ever considering the view \nfrom IE):\n\n- I viewed the Infocenter from 6 desktop machines. Loading the infocenter was \nslow, but it did complete on all of the machines. The desktops were all \nsecondary machines for my coworkers and they hadn\u0027t been into keeping up-to-\ndate with the latest versions of IE. All were W2K running IE 5.5 with varying \nlevels of service packs, patches, etc.\n- I viewed the Infocenter from 6 Thinkpads. From 4 of these (all W2K), the \nInfocenter load effort hangs part-way through and never does recover. IE shows \nup \u0027Done\u0027 loading - but I know it\u0027s nowhere near done. These Thinkpads were all \nrunning IE 6 with varying levels of packs/patches. On the two other Thinkpads, \nI could get the Infocenter to display (again slowly, but it would complete). \nOne of these was W2K running IE 5.5 - and the other was XP running IE 6 with \nthe very very latest Windows Updates.\n\nAnother observation: If I open up the Contents frame to the very large (# of \ntopics) toc and then view the source of the generated HTML, I see that you\u0027re \ngenerating the HTML onto one line. So, in my case, I\u0027m seeing about 2MB of HTML \non one line. Well - to be honest, I can\u0027t tell if it\u0027s on one line or maybe \nsplit out on approximately 4 - can\u0027t tell because even my editor has a hard \ntime parsing this - in the HTML, my editor starts to randomly display line \nnumbers - but they only increment up to 4 times while up I\u0027m in the HTML. My \npoint is - surely this affects the ability of the Contents frame to load. \nWouldn\u0027t, say, a return after every \u003c/li\u003e be a little more efficient?\n\nAgain - these are my observations only - I really don\u0027t expect an answer to any \nof it. Am just providing this information in the off chance that it might help \nwith this bug.",
    "These are interesting observations. In particular, the one line long html may \nhave some impact on parsing, although this would certainly be a browser bug.\nIf you have time, try the following:\n\n- on the server running the infocenter, browse help\n- right click in the table of contents frame and View Source.\n- save the file as nav.html into the org.eclipse.help.webapp_2.1.0 plugin.\n- on a remote client (one of those thinkpads with problem loading the entire \nnav) open the browser and navigate to http://server:port/help/nav.html\n\nDoes the entire nav.html loads this way?\nExperiment with breaking the long line into smaller lines and try again.\n",
    "Fixed.\nImplemented feature 37685 to load large books dynamically in fragments.\nAlso, the topics are generated one per line.\nPlease verify the behavior with next 3.0 integration build."
  ],
  "commentCreationDates": [
    "2003-02-05T16:29:02+01:00",
    "2003-02-05T16:34:11+01:00",
    "2003-02-05T18:27:53+01:00",
    "2003-02-05T18:34:55+01:00",
    "2003-02-05T18:54:53+01:00",
    "2003-02-05T18:57:51+01:00",
    "2003-02-05T19:03:21+01:00",
    "2003-02-05T19:49:24+01:00",
    "2003-02-05T21:26:32+01:00",
    "2003-02-05T22:57:18+01:00",
    "2003-02-06T14:05:14+01:00",
    "2003-02-06T22:31:48+01:00",
    "2003-02-06T22:38:23+01:00",
    "2003-02-13T18:42:42+01:00",
    "2003-02-13T19:46:42+01:00",
    "2003-02-19T18:45:02+01:00",
    "2003-02-19T21:40:10+01:00",
    "2003-02-26T21:49:57+01:00",
    "2003-02-26T22:45:45+01:00",
    "2003-03-21T18:38:19+01:00",
    "2003-03-21T19:24:05+01:00",
    "2003-05-29T18:53:02+02:00"
  ],
  "traces": [
    {
      "exceptionType": "javax.servlet.ServletException",
      "elements": [
        {
          "method": "org.apache.jasper.runtime.PageContextImpl.handlePageException",
          "source": "PageContextImpl.java:471"
        },
        {
          "method": "org.eclipse.help.internal.webapp.jsp.advanced.tocView._jspService",
          "source": "tocView.java(Compiled Code)"
        },
        {
          "method": "org.apache.jasper.runtime.HttpJspBase.service",
          "source": "HttpJspBase.java (Compiled Code)"
        },
        {
          "method": "javax.servlet.http.HttpServlet.service",
          "source": "HttpServlet.java(Compiled  Code)"
        },
        {
          "method": "org.apache.catalina.core.ApplicationFilterChain.internalDoFilter",
          "source": "ApplicationFilterChain.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.ApplicationFilterChain.doFilter",
          "source": "ApplicationFilterChain.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardWrapperValve.invoke",
          "source": "StandardWrapperValve.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invokeNext",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invoke",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.ContainerBase.invoke",
          "source": "ContainerBase.java (Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardContextValve.invoke",
          "source": "StandardContextValve.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invokeNext",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invoke",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardContext.invoke",
          "source": "StandardContext.java (Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardContext.invoke",
          "source": "StandardContext.java (Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardHostValve.invoke",
          "source": "StandardHostValve.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invokeNext",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.valves.ErrorDispatcherValve.invoke",
          "source": "ErrorDispatcherValve.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.valves.ErrorReportValve.invoke",
          "source": "ErrorReportValve.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.valves.ErrorReportValve.invoke",
          "source": "ErrorReportValve.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invokeNext",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invoke",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.ContainerBase.invoke",
          "source": "ContainerBase.java (Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardEngineValve.invoke",
          "source": "StandardEngineValve.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invokeNext",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.StandardPipeline.invoke",
          "source": "StandardPipeline.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.core.ContainerBase.invoke",
          "source": "ContainerBase.java (Compiled Code)"
        },
        {
          "method": "org.apache.catalina.connector.http.HttpProcessor.process",
          "source": "HttpProcessor.java(Compiled Code)"
        },
        {
          "method": "org.apache.catalina.connector.http.HttpProcessor.run",
          "source": "HttpProcessor.java(Compiled Code)"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:498"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "30973",
      "date": "2003-02-05T18:27:53+01:00",
      "product": "Platform",
      "component": "User Assistance",
      "severity": "normal"
    }
  ],
  "groupId": "30973",
  "bugId": "30973",
  "date": "2003-02-05T16:29:02+01:00",
  "product": "Platform",
  "component": "User Assistance",
  "severity": "normal"
}