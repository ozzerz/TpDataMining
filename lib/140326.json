{
  "comments": [
    "3.2 RC3\n\n\npublic class Tests {\n\t@Test\n\tpublic void goodOne() {\n\t}\n\t@Test\n\tprotected void badOne() {\n\t}\n}\n\n\njava.lang.Exception: Method badOne should be public\n\tat org.junit.internal.runners.MethodValidator.validateTestMethods(MethodValidator.java:69)\n\tat org.junit.internal.runners.MethodValidator.validateInstanceMethods(MethodValidator.java:30)\n\tat org.junit.internal.runners.MethodValidator.validateAllMethods(MethodValidator.java:41)\n\tat org.junit.internal.runners.TestClassRunner.validate(TestClassRunner.java:33)\n\tat org.junit.internal.runners.TestClassRunner.\u003cinit\u003e(TestClassRunner.java:27)\n\tat org.junit.internal.runners.TestClassRunner.\u003cinit\u003e(TestClassRunner.java:20)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:494)\n\tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:27)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.\u003cinit\u003e(JUnit4TestReference.java:26)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.\u003cinit\u003e(JUnit4TestClassReference.java:24)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:34)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:24)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:442)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:670)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
    "Actually this is JUnit4 behavior which we could but don\u0027t want to hide/override."
  ],
  "commentCreationDates": [
    "2006-05-05T12:26:31+02:00",
    "2006-05-05T12:29:32+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "Method badOne should be public",
      "elements": [
        {
          "method": "org.junit.internal.runners.MethodValidator.validateTestMethods",
          "source": "MethodValidator.java:69"
        },
        {
          "method": "org.junit.internal.runners.MethodValidator.validateInstanceMethods",
          "source": "MethodValidator.java:30"
        },
        {
          "method": "org.junit.internal.runners.MethodValidator.validateAllMethods",
          "source": "MethodValidator.java:41"
        },
        {
          "method": "org.junit.internal.runners.TestClassRunner.validate",
          "source": "TestClassRunner.java:33"
        },
        {
          "method": "org.junit.internal.runners.TestClassRunner.\u003cinit\u003e",
          "source": "TestClassRunner.java:27"
        },
        {
          "method": "org.junit.internal.runners.TestClassRunner.\u003cinit\u003e",
          "source": "TestClassRunner.java:20"
        },
        {
          "method": "sun.reflect.NativeConstructorAccessorImpl.newInstance0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeConstructorAccessorImpl.newInstance",
          "source": "NativeConstructorAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingConstructorAccessorImpl.newInstance",
          "source": "DelegatingConstructorAccessorImpl.java:27"
        },
        {
          "method": "java.lang.reflect.Constructor.newInstance",
          "source": "Constructor.java:494"
        },
        {
          "method": "org.junit.internal.requests.ClassRequest.getRunner",
          "source": "ClassRequest.java:27"
        },
        {
          "method": "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.\u003cinit\u003e",
          "source": "JUnit4TestReference.java:26"
        },
        {
          "method": "org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.\u003cinit\u003e",
          "source": "JUnit4TestClassReference.java:24"
        },
        {
          "method": "org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest",
          "source": "JUnit4TestLoader.java:34"
        },
        {
          "method": "org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests",
          "source": "JUnit4TestLoader.java:24"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:442"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:670"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "140326",
      "date": "2006-05-05T12:26:31+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "140326",
  "bugId": "140326",
  "date": "2006-05-05T12:26:31+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}