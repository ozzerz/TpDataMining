{
  "comments": [
    "When I edit a html empty model using DOM API and IDocument API by turns, I got an ArrayIndexOutOfBoundsException.\nHere is a sample code to recreate the problem:\n\n\t\tIDOMModel model; // assumes 0-byte html empty file\n\t\tIDOMDocument doc \u003d model.getDocument();\n\t\tElement ele \u003d doc.createElement(HTML40Namespace.ElementName.P);\n\t\tdoc.appendChild(ele);\n\t\tmodel.getStructuredDocument().set(\"\");\n\t\tElement ele2 \u003d doc.createElement(HTML40Namespace.ElementName.P);\n\t\tdoc.appendChild(ele2);\n\nMy quick investication indicates html model goes wrong state after IDocument::set(String ) call. After the API call, IStructuredDocument API says the document is empty file, while DOM API says there is a Text node in the document. Then an exception is thrown at the next editing API call.\n\n\nHere is the stack trace:\n\njava.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0\n\tat org.eclipse.jface.text.GapTextStore.moveAndResizeGap(GapTextStore.java:109)\n\tat org.eclipse.jface.text.GapTextStore.adjustGap(GapTextStore.java:69)\n\tat org.eclipse.jface.text.GapTextStore.replace(GapTextStore.java:195)\n\tat org.eclipse.wst.sse.core.internal.text.StructuredDocumentTextStore.replace(StructuredDocumentTextStore.java:168)\n\tat org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.updateDocumentData(BasicStructuredDocument.java:2652)\n\tat org.eclipse.wst.sse.core.internal.text.StructuredDocumentReParser.reparse(StructuredDocumentReParser.java:1350)\n\tat org.eclipse.wst.sse.core.internal.text.StructuredDocumentReParser.reparse(StructuredDocumentReParser.java:1284)\n\tat org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.updateModel(BasicStructuredDocument.java:2674)\n\tat org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.internalReplaceText(BasicStructuredDocument.java:1899)\n\tat org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2367)\n\tat org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replaceText(JobSafeStructuredDocument.java:86)\n\tat org.eclipse.wst.xml.core.internal.document.XMLModelUpdater.replaceSource(XMLModelUpdater.java:1608)\n\tat org.eclipse.wst.xml.core.internal.document.XMLModelUpdater.replaceChild(XMLModelUpdater.java:1566)\n\tat org.eclipse.wst.xml.core.internal.document.DOMModelImpl.childReplaced(DOMModelImpl.java:187)\n\tat org.eclipse.wst.xml.core.internal.document.NodeContainer.notifyChildReplaced(NodeContainer.java:357)\n\tat org.eclipse.wst.xml.core.internal.document.NodeContainer.insertBefore(NodeContainer.java:298)\n\tat org.eclipse.wst.xml.core.internal.document.NodeContainer.appendChild(NodeContainer.java:129)\n\t[...]",
    "I\u0027m able to reproduce this (easily ... thanks for the good test cases!) \n and have looked at in some detail. \n\nThere\u0027s basically something deeply wrong with the \"new model\" logic. \n(that is, if whole document\u0027s contents are replaced, all is supposed to \nbe reinitialized afresh, immediately). \n\nAs far as I can tell, this has likely been broken for a while. \nGuess we seldom use \"set\" once we have a model. \nI suspect any fix would be too \"deep\" to make for Release 1 (that is, \nintroduce risk of regression). \n\nSo, I\u0027m wondering, for your immeidate needs, do you need to use \"set\"? \nOr, would it suffice to use \"replace\" ... replacing, natucally, all the \nexisting text in the structured document? \n\nAt this point, I\u0027m hoping this would only cause some inefficiencies, if \na large document\u0027s text was replaced instead of set. \nAs far as I can tell, other aspects of the document (content model, etc) \nwould be updated appropriately. \n\nLet me know if there\u0027s some specific thing you were trying to accomplish, or \nif this was just a matter of performance gains. \n\nThanks again for the good test case. \n",
    "There is no reason for me to keep using set().\nI can replace my codes to replace() from set() safely.\n\nBut a question comes up to my mind. \nWhy do you have separate implementations for replace() and set()?\nIt looks the implementation for set() would be enough for just calling replace() with entire range of the document, wouldn\u0027t it?\nIs it safe fix on your side?\n",
    "An excellent idea. \n\nI checked the spec of IDocument\u0027s set(String) method, which we want to \"parallel\" and its quite explicit \"This method is a convenience method for replace(0, getLength(), text).\"  I\u0027ve checked and there is currently nothing \"special\" we are currently doing with the \"new Document Event\" so there would be no implact. \n\nThere would be a slight API change ... well ... technically, its not an API yet, but an important provisional one. the return type of setText would now have to \nbe changed to StructuredDocumentEvent. \n\nThis still leaves open the future possibility of performance enhancements by doing something special on \u0027set\u0027 vs. \u0027replace\u0027. \n",
    "For the record, I also added (and changed) some JUnit tests to better test and capture any changes in the future. Some failed with \"old\" code, but work fine with new code). \n\n",
    "Fix will be in RC2 build. \n",
    "Verified with WTP 1.0 RC4 driver.",
    "This is part of a mass update to close out all stale WTP defects already verified by the reporter but awaiting closure by the assignee.  If you feel this defect was closed inappropriately, please reopen.\n\nThanks, John Lanuti"
  ],
  "commentCreationDates": [
    "2005-12-03T18:49:42+01:00",
    "2005-12-05T22:10:17+01:00",
    "2005-12-05T22:56:40+01:00",
    "2005-12-06T06:51:41+01:00",
    "2005-12-06T07:25:55+01:00",
    "2005-12-06T08:04:55+01:00",
    "2005-12-16T01:24:51+01:00",
    "2006-11-28T20:37:06+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "Array index out of range: 0",
      "elements": [
        {
          "method": "org.eclipse.jface.text.GapTextStore.moveAndResizeGap",
          "source": "GapTextStore.java:109"
        },
        {
          "method": "org.eclipse.jface.text.GapTextStore.adjustGap",
          "source": "GapTextStore.java:69"
        },
        {
          "method": "org.eclipse.jface.text.GapTextStore.replace",
          "source": "GapTextStore.java:195"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.StructuredDocumentTextStore.replace",
          "source": "StructuredDocumentTextStore.java:168"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.updateDocumentData",
          "source": "BasicStructuredDocument.java:2652"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.StructuredDocumentReParser.reparse",
          "source": "StructuredDocumentReParser.java:1350"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.StructuredDocumentReParser.reparse",
          "source": "StructuredDocumentReParser.java:1284"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.updateModel",
          "source": "BasicStructuredDocument.java:2674"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.internalReplaceText",
          "source": "BasicStructuredDocument.java:1899"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText",
          "source": "BasicStructuredDocument.java:2367"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replaceText",
          "source": "JobSafeStructuredDocument.java:86"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.document.XMLModelUpdater.replaceSource",
          "source": "XMLModelUpdater.java:1608"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.document.XMLModelUpdater.replaceChild",
          "source": "XMLModelUpdater.java:1566"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.document.DOMModelImpl.childReplaced",
          "source": "DOMModelImpl.java:187"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.document.NodeContainer.notifyChildReplaced",
          "source": "NodeContainer.java:357"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.document.NodeContainer.insertBefore",
          "source": "NodeContainer.java:298"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.document.NodeContainer.appendChild",
          "source": "NodeContainer.java:129"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "119176",
      "date": "2005-12-03T18:49:42+01:00",
      "product": "Web Tools",
      "component": "wst.html",
      "severity": "major"
    }
  ],
  "groupId": "119176",
  "bugId": "119176",
  "date": "2005-12-03T18:49:42+01:00",
  "product": "Web Tools",
  "component": "wst.html",
  "severity": "major"
}