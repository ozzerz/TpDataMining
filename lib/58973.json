{
  "comments": [
    "At runtime all user libraries should be resolved. Currently, they are only\nresolved at compile, not runtime. Therefore, they can\u0027t be used, for example,\nfor running JUnit tests.",
    "It should work normally as part of the standard container services we do \nprovide for compile \u0026 runtime.\n\nDo you have exact steps to reproduce ?",
    "I am sure it could be reproduced in more than one way but here is the one I know\nabout.\n1. Create a JUnit test - anything, even empty, al long as it requires the JUnit\njars.\n2. Create a userlib containing those jar.\n3. Configure your project to use that userlib.\n4. Compile and run the test.\n\nCompilation succeeds, but attempting to run the test results in \"NoClassDefFound\"\n(or some such, I can\u0027t remember).",
    "This sounds as a PDE problem more than a jdt-core one.\n\nHere are tests I\u0027ve done to get this conclusion.\n\nUsing your test case, I have:\n1) created a User Library \"junit\" and add junit.jar of JUnit plugin to it.\n2) created a Java project\n   add \"junit\" User Library in project Java Build Path\n   create a test class:\n\timport junit.framework.TestCase;\n\tpublic class MyTest1 extends TestCase {\n\t\tpublic void test001() {\n\t\t\tSystem.out.println(\"test 001\");\n\t\t}\n\t}\n   compiled it: OK\n   ran it: OK\n3) created a Java project\n   add \"junit\" User Library in project Java Build Path\n   create a test class:\n\timport junit.framework.TestCase;\n\tpublic class MyTest2 extends TestCase {\n\t\tpublic void test002() {\n\t\t\tSystem.out.println(\"test 002\");\n\t\t}\n\t}\n   compiled it: OK\n   ran it: FAILED\n\nSo, step 2 prove that jdt-core gives correct path when compiling _and_ running\ntest. Step 3, seems to show that when we have a plugin, classpath is not\ncorrectly resolved at runtime.\n\nSo, reassign to PDE component for analyse who will confirm this assumption or\nredirect to right component.",
    "Is this a plug-in project you\u0027re working with or a regular Java project?",
    "It is a regular Java project - no plug-ins involved. \n\nMaybe it is the JUnit plug-in problem. Anyway, I found a way to fix this issue\nwith a fragment that adds runtime resolution to the Userlib plug-in. Let me know\nif you would like a copy of the code.",
    "That\u0027s what I suspected.  This is not a bug.\nIf your project is not a plug-in project (i.e. a pure Java project, as in this \ncase), you can\u0027t run it as Plug-in Junit tests.  You have to run it as pure \nJUnit tests.\n\nIf you have a plug-in project and you launch test cases as JUnit plug-in \ntests, the plug-in classloading rules will apply.  So if you are referencing \njunit.jar, you have to declare the org.junit plug-in as a dependency in your \nplugin.xml.  This is the only way it will be found at runtime.  If you \nmanually tweak the classpath at development time, this would be a false \npositive and won\u0027t help because the runtime has its own classloading rules.\n\nAnother way to do it, if you prefer and is convenient for you, is to copy the \njar into your plugin and declare it as one of the libraries for that plug-in.\nI do not recommend this one.\n\nWhat you have done with the fragment is actually not recommended and is \nabusing the notion of a fragment which are meant to contain OS-specific code \nand NL-related properties files.\n\ncc Frederic as FYI in case he sees a similar report in the future.",
    "Look, I did not understand half of what you said but, once again, here is the\nprobmlem.\n\nI have a plain Java project with a bunch of JUnit tests in it. I create a JUnit\nuser library (not necessarily with jars included with Eclipse) and add it to the\nproject. Now, I would like to compile the project (no problem here) and run my\nJUnit test suite using \"Run as JUnit\". Tha way it stands now - this step fails. \nCall it what you wish - this is a real problem. Why would I want to mess with\nplug-in descriptors or anything else? As far as I\u0027m concerned, I\u0027ve done my job\n- created a library and added it to the project.\n\nWhat I\u0027ve done with the fragment (whatever original guidelines I violated) is I\nfixed that deficiency. Unfortunately, what you suggested is very kludgy - I like\nmy approach better. Now, as I said, JUnit may be the only area where this fix is  \nreally neeted but, nevertheless, it a very important one.",
    "If you\u0027re using the plain JUnit launcher, then it\u0027s not a PDE issue at all.  \nMoving back to JDT.",
    "Unfortunately, I still cannot reproduce your problem.\n\nHere\u0027s the test I did:\n1) start a brand new workspace\n2) create a regular Java project\n3) create a user library which points to \n   \u003ceclipse-install-dir\u003e\\plugins\\org.junit_3.8.1\\junit.jar file\n4) set this user library in Java Build Path of my project\n5) create MyClass subclass of junit.framework.TestCase\n6) add following method to this class:\n\tpublic void test000() {\n\t\tSystem.out.println(\"Test 000 OK\");\n\t}\n   save and compile (no error)\n7) in Java Explorer select the class and \u0027Run JUnit Test\u0027 using popup-menu\n8) Look at Junit view: test has been run and is green\n9) Look at console: \"Test OOO OK\" is displayed\n\nSo, at my point there\u0027s something in your workspace which makes JUnit fails\nwhile running...\n\nSo I need some more information...\nMay you: \n - let me know which build you\u0027re using?\n - go in your workspace directory and zip following directories:\n    .metadata/.plugins/org.eclipse.core.runtime\n    .metadata/.plugins/org.eclipse.debug.core\n   and attach zip file to this bug\n - be a little bit more precise on the NoClassFoundError you get while running?\n - do the same test than me and let me know if you get the same error at \n   runtime\n\nThanks in advance\n",
    "Created an attachment (id\u003d10363)\nAs you requested\n",
    "I am using Eclipse 3.0M8 build: 200403261517\n\nHere is the stack trace:\njava.lang.NoClassDefFoundError: junit/framework/TestListener\n\tat java.lang.ClassLoader.defineClass0(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:537)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:194)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:289)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)\nException in thread \"main\" ",
    "Still cannot reproduce using M8 build and do not see anything in launch configs\nnor in core.runtime prefs.\nMay you zip your entire workspace and if file is not too big attach it otherwise\nmail it to me? Thx\nWhich launch configs fail? I guess it was TestStringUtil as it was modified today...\n\n",
    "Sorry to insist but:\n1) you only sent me the metadata of your workspace, I need the entire workspace\n   (ie. including projects...). If it\u0027s really too big even zipped, then put \n   only in zip file only projects involved while running test which fails\n2) could you answer questions I asked you\n   a) in comment 9: if you make same test than me, do you still get the error?\n   b) in comment 12: with which launch configuration do you get the error in\n                     your workspace? TestStringUtil and/or other...?\n\nPlease do not hesitate to provide too much information than not enough...\nI cannot do anything for you if I can\u0027t reproduce your problem...",
    "Wait before sending all projects...\nI\u0027ve seen that your user library pointing to JUnit is defined as follow:\n/instance/org.eclipse.jdt.core/org.eclipse.jdt.core.userLibrary.JUnit\u003d\u003c?xml\nversion\\\u003d\"1.0\" encoding\\\u003d\"UTF-8\"?\u003e\\r\\n\u003cuserlibrary systemlibrary\\\u003d\"false\"\nversion\\\u003d\"1\"\u003e\\r\\n\u003carchive sourceattachment\\\u003d\"C\\:/Java/JUnit/src.jar\"\npath\\\u003d\"C\\:/Java/JUnit/junit.jar\"/\u003e\\r\\n\u003c/userlibrary\u003e\\r\\n\n\nI don\u0027t know where this junit.jar comes from, but I have a doubt that it\u0027s the\njunit.jar from eclipse plugin one...\n\nSo, it would be really interesting that you answer my comment 9 question.\nIf the error does not happen with this basic test, then you can make another\ntest: edit your user library \"JUnit\" and replace the path to junit.jar by\n\u003cinstall-eclipse-dir\u003e\\eclipse\\plugins\\org.junit_3.8.1\\junit.jar and let me know\nif you get the same error.\n",
    "jdt-debug team,\nAs this is a problem during runtime -perhaps a conflict between two incompatible\njunit.jar (see classpath entries in in org.eclipse.jdt.core\\prefs.ini I will\nattach to the bug)- may you investigate and let me know what you think of this\npeculiar issue?\nThanks in advance",
    "Created an attachment (id\u003d10397)\njdt-core preferences files\n\nAs you\u0027ll see, there are several user librairies JUnit pointing on different\njunit.jar files and also other junit.jar file (JBoss and WebApp) on some\nclasspath entries.\nPerhaps these jar are not all on the same version and junit.jar used while\nrunning test is not the expected one.\nYou\u0027ll be surely more efficient than me to discover what can happen on runtime\nand ask for accurate further information...\n",
    "Some revelations...\n\nApparently, if I have a Hibernate library in my classpath in front of JUnit\nlibrary it screws up running the tests. If JUnit is placed first tests succeed.\n\nGo figure...",
    "What\u0027s a \"Hibernate\" library?",
    "None the less, marking as \"works for me\", as the user libraries appear to be \nresolved properly at runtime."
  ],
  "commentCreationDates": [
    "2004-04-17T08:01:46+02:00",
    "2004-04-23T15:08:54+02:00",
    "2004-04-23T16:36:28+02:00",
    "2004-05-06T16:07:05+02:00",
    "2004-05-06T16:14:29+02:00",
    "2004-05-06T17:21:32+02:00",
    "2004-05-06T17:35:41+02:00",
    "2004-05-06T18:12:53+02:00",
    "2004-05-06T18:17:25+02:00",
    "2004-05-06T19:33:54+02:00",
    "2004-05-06T21:01:32+02:00",
    "2004-05-06T21:01:58+02:00",
    "2004-05-06T22:02:55+02:00",
    "2004-05-07T12:12:24+02:00",
    "2004-05-07T16:37:13+02:00",
    "2004-05-07T17:31:59+02:00",
    "2004-05-07T17:37:35+02:00",
    "2004-05-11T17:16:08+02:00",
    "2004-05-13T16:14:17+02:00",
    "2004-05-13T16:20:33+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "junit/framework/TestListener",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:537"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:123"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:251"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:55"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:194"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:187"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:289"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:274"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:235"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:302"
        }
      ],
      "number": 0,
      "commentIndex": 11,
      "bugId": "58973",
      "date": "2004-05-06T21:01:58+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "major"
    }
  ],
  "groupId": "58973",
  "bugId": "58973",
  "date": "2004-04-17T08:01:46+02:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "major"
}