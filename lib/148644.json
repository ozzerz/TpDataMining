{
  "comments": [
    "During a refactoring with AspectJ i encountered a runtime\nException when writing an around advice for \"new Integer\"\nwithin an Interface. \nWhen disabling the advice, there\u0027s no exception. Originally \nthe interface invoked some kind of pooling functionality that\nshould be invoked by the aspect after the refactoring. \nThe original direct invocation also did not cause an exception.\n\nI isolated the problem as follows:\n\n--------------\ninterface Constants\n--------------\npublic interface Constants {\n    int     ALL         \u003d 3;\n    Integer INTEGER_ALL \u003d new Integer(ALL);\n}\n\n--------------\nclass ConstantsTestClass\n--------------\npublic class ConstantsTestClass implements Constants {\n\n    public ConstantsTestClass()  {}\n    \n    public void printInt() {\n        System.out.println(ALL);\n    }\n}\n\n--------------\naspect ConstantsAspect\n--------------\npublic aspect ConstantsAspect {\n    Integer around(int val)\n\t: call (java.lang.Integer.new(int)) \n\t\u0026\u0026 !within(ConstantsAspect)\n\t\u0026\u0026 args (val) \n\t{\n\t    return new Integer(val);\n\t}\n}\n\n-----------\nclass Main\n-----------\npublic class Main {\n\n    public Main() {}\n\n    public static void main(String[] args) {\n        ConstantsTestClass tc \u003d new ConstantsTestClass();\n        tc.printInt();\n    }\n}\n\n------------\nresulting exception during runtime\n------------\nException in thread \"main\" java.lang.ClassFormatError: Constants (Illegal method modifiers: 0x1A)\n\tat java.lang.ClassLoader.defineClass0(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:539)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:194)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:289)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)\n\tat java.lang.ClassLoader.defineClass0(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:539)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:194)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:289)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)\n\tat Main.main(Main.java:20)",
    "thanks for the clear testcase - I\u0027ve recreated this on the HEAD version of AspectJ.",
    "and i\u0027ve recreated it all the way back to AspectJ1.2.1 - looks like a scenario causing us to stick method bodies into an interface...",
    "I actually ran into this over the weekend.  Puzzled me to no end until I search for a bug.  Any progress on this or a work-around?\n",
    "worst case we must be able to detect we are going to do something wrong and report an error (compiler limitation) at compile time rather than exploding at runtime."
  ],
  "commentCreationDates": [
    "2006-06-26T15:22:08+02:00",
    "2006-06-26T15:27:27+02:00",
    "2006-06-26T15:30:30+02:00",
    "2006-08-28T15:51:59+02:00",
    "2007-10-24T17:09:21+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassFormatError",
      "message": "Constants (Illegal method modifiers: 0x1A)",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:539"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:123"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:251"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:55"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:194"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:187"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:289"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:274"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:235"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:302"
        },
        {
          "method": "java.lang.ClassLoader.defineClass0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:539"
        },
        {
          "method": "java.security.SecureClassLoader.defineClass",
          "source": "SecureClassLoader.java:123"
        },
        {
          "method": "java.net.URLClassLoader.defineClass",
          "source": "URLClassLoader.java:251"
        },
        {
          "method": "java.net.URLClassLoader.access$100",
          "source": "URLClassLoader.java:55"
        },
        {
          "method": "java.net.URLClassLoader$1.run",
          "source": "URLClassLoader.java:194"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "java.net.URLClassLoader.findClass",
          "source": "URLClassLoader.java:187"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:289"
        },
        {
          "method": "sun.misc.Launcher$AppClassLoader.loadClass",
          "source": "Launcher.java:274"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:235"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "ClassLoader.java:302"
        },
        {
          "method": "Main.main",
          "source": "Main.java:20"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "148644",
      "date": "2006-06-26T15:22:08+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "148644",
  "bugId": "148644",
  "date": "2006-06-26T15:22:08+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}