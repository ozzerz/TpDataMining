{
  "comments": [
    "\u0027Refactor -\u003e rename\u0027 don\u0027t work when eclipse compiled from src with jdk 1.4 \ncompiler with any \u0027target\u0027 tag or with jdk 1.3 compiler with \u0027target\u003d\"1.3\"\u0027 tag.\n\n1) To reproduce this bug download zip-file with build scripts from eclipse \nsite, replace in all \u0027build.xml\u0027 files \u0027\u003cjavac\u0027 to \u0027\u003cjavac target\u003d\"1.3\"\u0027 and \ncompile eclipse. Any \u0027refactor -\u003e rename\u0027 within this build isn\u0027t perfomed.\n\n2) This bug could be explainde by different call dispatching produced by \ncompiler for the portion of code listed below.\n\n//-- eclipse source code -----------------------------------------------\npublic interface org.eclipse.jface.viewers.ISelection {...}\npublic interface org.eclipse.jface.viewers.IStructuredSelection extends\norg.eclipse.jface.viewers.ISelection {...}\n\npublic class org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {\n  ...\n  protected void run(IStructuredSelection selection) {\n    run((ISelection)selection); // line 127\n  }\n  protected void run(ISelection selection) {\n  }\n}\npublic class org.eclipse.jdt.ui.actions.RenameAction extends\norg.eclipse.jdt.ui.actions.SelectionDispatchAction ... {\n  ...\n  protected void run(IStructuredSelection selection) {\n    fRenameJavaElement.run(selection); // line 116\n  }\n}\npublic class\norg.eclipse.jdt.internal.ui.refactoring.actions.RenameJavaElementAction\nextends org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {\n  ...\n  protected void run(IStructuredSelection selection) {...}\n}\n//-- end of eclipse source code ----------------------------------------\n\nJdk 1.4.compiler possibly generates the following call in line 116 of \norg.eclipse.jdt.ui.actions.RenameAction.java file:\nRenameAction.run(IStructuredSelection selection) -\u003e SelectionDispatchAction.run\n(ISelection selection);\nand jdk 1.3 compiler generates the following call in line 116 of \norg.eclipse.jdt.ui.actions.RenameAction.java file:\nRenameAction.run(IStructuredSelection selection) -\u003e RenameJavaElementAction.run\n(IStructuredSelection selection);\n\n3) I wrote a simple test program which emulates this behaviour:\n//-- eclipse/a/Parent.java -------------------------------------\npackage eclipse.a;\n\npublic class Parent {\n  public Parent() {}\n\n  protected void doSmth(Object obj) {\n    System.err.println(\"Parent.doSmth(Object \u0027\" + obj + \"\u0027)\");\n  }\n\n  protected void doSmth(String str) {\n    System.err.println(\"Parent.doSmth(String \u0027\" + str + \"\u0027)\");\n    doSmth((Object)str);\n  }\n}\n//--------------------------------------------------------------\n//-- eclipse/a/DerivedA.java -----------------------------------\npackage eclipse.a;\n\nimport eclipse.b.DerivedB;\n\npublic class DerivedA extends Parent {\n  private final DerivedB derivedB;\n\n  public DerivedA(DerivedB derivedB) {\n    super();\n    this.derivedB \u003d derivedB;\n  }\n\n  protected void doSmth(String str) {\n    System.err.println(\"DerivedA.doSmth(String \u0027\" + str + \"\u0027)\");\n    derivedB.doSmth((String)str);\n  }\n\n  public static void main(String[] args) {\n    DerivedB b \u003d new DerivedB();\n    DerivedA a \u003d new DerivedA(b);\n    a.doSmth(\"TEST\");\n  }\n}\n//--------------------------------------------------------------\n//-- eclipse/b/DerivedB.java -----------------------------------\npackage eclipse.b;\n\nimport eclipse.a.Parent;\n\npublic class DerivedB extends Parent {\n\n  public DerivedB() {\n    super();\n  }\n\n  protected void doSmth(String str) {\n    System.err.println(\"DerivedB.doSmth(String \u0027\" + str + \"\u0027)\");\n  }\n\n}\n//--------------------------------------------------------------\n\nWe expect to see \n\u003eDerivedA.doSmth(String \u0027TEST\u0027)\n\u003eDerivedB.doSmth(String \u0027TEST\u0027)\nin console, but for the following compilers we got\n\u003eDerivedA.doSmth(String \u0027TEST\u0027)\n\u003eParent.doSmth(Object \u0027TEST\u0027)\nThese compilers are:\n - eclipse compiler with complience level set to 1.4 and any .class \ncompatibility;\n - javac compiler from sun j2sdk 1.3.1_07-b02 with any target;\n\n4) Possible workaround:\n--begin-------------------------------------------------\norg.eclipse.jdt.ui\\ui\\org\\eclipse\\jdt\\ui\\actions\\RenameAction.java.orig\tThu May \n15 08:42:35 2003\n+++ org.eclipse.jdt.ui\\ui\\org\\eclipse\\jdt\\ui\\actions\\RenameAction.java\tFri May \n16 12:16:17 2003\n@@ -113,7 +113,7 @@\n \t\n \tprotected void run(IStructuredSelection selection) {\n \t\t if (fRenameJavaElement.isEnabled())\n-\t\t\tfRenameJavaElement.run(selection);\n+\t\t\t((SelectionDispatchAction)fRenameJavaElement).run\n((IStructuredSelection)selection);\n \t\tif (fRenameResource !\u003d null \u0026\u0026 fRenameResource.isEnabled())\n \t\t\tfRenameResource.run(selection);\n \t}\n--end---------------------------------------------\n\n\nBest regards,\nStanislav Bernatsky.",
    "Philippe,\n\ncan you please shed some light on this. My understanding of virtual binding is \nthat a call fRenameAction.run(selection) where selection is of type \nIStructuredSelection and fRenameAction is of type RenameJavaElementAction is \nbound to RenameJavaElementAction.run(IStructuredSelection ...). But this \ndoesn\u0027t seem to be the case under 1.4.",
    "From 1.4 on, all the compiler does is to tag the method ref in generated \nbytecode with the receiver type instead of the declaring class of the bound \nmethod. This information used to be ignored by VMs prior to 1.4, and was \ncausing visibility issues at runtime (the invoked method wasn\u0027t legite since \nnot visible)\n\nNote that \nSun JDK 1.3.1_01 would still display:\n\u003eDerivedA.doSmth(String \u0027TEST\u0027)\n\u003eDerivedB.doSmth(String \u0027TEST\u0027)\n\nand Sun 1.4.0 and better do display\n\u003eDerivedA.doSmth(String \u0027TEST\u0027)\n\u003eParent.doSmth(String \u0027TEST\u0027)\n\nTechnically, the protected method from DerivedB isn\u0027t visible from DerivedA, \nonly the parent method is visible from it. This is now properly enforced at \nruntime as well. \n\nYou need to adapt your code to reflect this (make these methods public).\n\n",
    "Eclipse compiler is actually printing:\n\u003eDerivedA.doSmth(String \u0027TEST\u0027)\n\u003eParent.doSmth(Object \u0027TEST\u0027)\n\nWhy not the following answer?\n\u003eDerivedA.doSmth(String \u0027TEST\u0027)\n\u003eParent.doSmth(String \u0027TEST\u0027)\n\u003eParent.doSmth(Object \u0027TEST\u0027)\n\nJDK1.4.1 behaves like the Eclipse compiler in 1.4 compliance mode.\n\nIf you remove the doSmth method in DerivedB, then you get:\n\u003eDerivedA.doSmth(String \u0027TEST\u0027)\n\u003eParent.doSmth(String \u0027TEST\u0027)\n\u003eParent.doSmth(Object \u0027TEST\u0027)\n\nThis looks like a bug. If a method is not visible, how can it interfere with\nmethods in Parent?\n",
    "*** Bug 34886 has been marked as a duplicate of this bug. ***",
    "Add CC\u0027",
    "*** Bug 37901 has been marked as a duplicate of this bug. ***",
    "Fixed by making the methods in SelectionDispatchAction public.",
    "Moving to JDT/Core to clarify if they wnat to follow up on comment #3. Please \nclose as fixed otherwise.",
    "Could you please backport this fixes to the 2.1.x stream? It\u0027s greatly annoying \nif you have to make sure, that you are using a jdk1.3 for compiling...\n",
    "You simply need to specify the target option of the javac ant task to be 1.1. \nand it should work fine. By default ant sets the target value according to the \nVM on which it is running. The default value for the JDK1.4 is target 1.2. This \nhas a side-effect on the declaring class of the method invocations or field \nreferences.\nSo add the following argument in your javac ant task and it should work fine.\ntarget\u003d\"1.1\"\n",
    "We will not pack port this to 2.1 since it is only relevant if you compile \nEclipse from source. ",
    "Created an attachment (id\u003d5451)\nPatch for 2.1.1\n\nThis is a patch used by the debian packages. You need to apply it by hand in\nthe directory, which contains plugins. AFAIK it works...",
    "Moving to JDT UI to dispose",
    "mark as fixed in 3.0. no back porting planed.",
    "It\u0027s steel present in RC1.\nThe log exception.\n!SUBENTRY 1 org.eclipse.jdt.core 4 -1 ?l?Y?h???l?` 12, 2004 11:47:08.312\n!MESSAGE I/O exception.\n!STACK 0\njava.util.zip.ZipException: error in opening zip file\n\tat java.util.zip.ZipFile.open(Native Method)\n\tat java.util.zip.ZipFile.\u003cinit\u003e(Unknown Source)\n\tat java.util.zip.ZipFile.\u003cinit\u003e(Unknown Source)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.getZipFile\n(JavaModelManager.java:1145)\n\tat org.eclipse.jdt.internal.core.JarPackageFragmentRoot.getJar\n(JarPackageFragmentRoot.java:210)\n\tat org.eclipse.jdt.internal.core.JarPackageFragmentRoot.computeChildren\n(JarPackageFragmentRoot.java:76)\n\tat org.eclipse.jdt.internal.core.PackageFragmentRoot.buildStructure\n(PackageFragmentRoot.java:173)\n\tat org.eclipse.jdt.internal.core.Openable.generateInfos\n(Openable.java:183)\n\tat org.eclipse.jdt.internal.core.JavaElement.openWhenClosed\n(JavaElement.java:572)\n\tat org.eclipse.jdt.internal.core.JavaElement.getElementInfo\n(JavaElement.java:309)\n\tat org.eclipse.jdt.internal.core.JavaElement.getElementInfo\n(JavaElement.java:295)\n\tat org.eclipse.jdt.internal.core.JavaElement.getChildren\n(JavaElement.java:250)\n\tat \norg.eclipse.jdt.internal.core.search.matching.MatchLocator.locatePackageDeclarat\nions(MatchLocator.java:908)\n\tat \norg.eclipse.jdt.internal.core.search.matching.MatchLocator.locatePackageDeclarat\nions(MatchLocator.java:881)\n\tat \norg.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches\n(JavaSearchParticipant.java:99)\n\tat org.eclipse.jdt.core.search.SearchEngine.findMatches\n(SearchEngine.java:469)\n\tat org.eclipse.jdt.core.search.SearchEngine.search\n(SearchEngine.java:758)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.getNam\nesakePackages(RenamePackageProcessor.java:367)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.getRef\nerencesToTypesInNamesakes(RenamePackageProcessor.java:338)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.checkF\ninalConditions(RenamePackageProcessor.java:289)\n\tat \norg.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFin\nalConditions(ProcessorBasedRefactoring.java:134)\n\tat org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run\n(CheckConditionsOperation.java:84)\n\tat org.eclipse.ltk.core.refactoring.CreateChangeOperation.run\n(CreateChangeOperation.java:114)\n\tat org.eclipse.ltk.core.refactoring.PerformChangeOperation.run\n(PerformChangeOperation.java:182)\n\tat org.eclipse.core.internal.resources.Workspace.run\n(Workspace.java:1673)\n\tat org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run\n(WorkbenchRunnableAdapter.java:58)\n\tat org.eclipse.jface.operation.ModalContext$ModalContextThread.run\n(ModalContext.java:101)\n",
    "Feodor, the reproted stack trace isn\u0027t releated to this bug. The refactoring \ndidn\u0027t run since there is a problem with a zip file. Please report this as a \nnormal bug to compontent JDT and provide, if possible, steps to reproduce."
  ],
  "commentCreationDates": [
    "2003-05-20T09:41:48+02:00",
    "2003-05-20T10:08:06+02:00",
    "2003-05-20T11:12:44+02:00",
    "2003-05-20T22:31:07+02:00",
    "2003-05-21T14:45:37+02:00",
    "2003-05-21T21:04:55+02:00",
    "2003-05-25T18:23:11+02:00",
    "2003-05-27T11:10:49+02:00",
    "2003-05-27T11:11:37+02:00",
    "2003-07-08T17:21:13+02:00",
    "2003-07-08T17:32:59+02:00",
    "2003-07-08T17:34:57+02:00",
    "2003-07-14T17:55:06+02:00",
    "2004-03-04T14:55:02+01:00",
    "2004-03-05T09:13:53+01:00",
    "2004-06-12T06:51:46+02:00",
    "2004-06-12T16:18:43+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.util.zip.ZipException",
      "message": "error in opening zip file",
      "elements": [
        {
          "method": "java.util.zip.ZipFile.open",
          "source": "Native Method"
        },
        {
          "method": "java.util.zip.ZipFile.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "java.util.zip.ZipFile.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.getZipFile",
          "source": "JavaModelManager.java:1145"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JarPackageFragmentRoot.getJar",
          "source": "JarPackageFragmentRoot.java:210"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JarPackageFragmentRoot.computeChildren",
          "source": "JarPackageFragmentRoot.java:76"
        },
        {
          "method": "org.eclipse.jdt.internal.core.PackageFragmentRoot.buildStructure",
          "source": "PackageFragmentRoot.java:173"
        },
        {
          "method": "org.eclipse.jdt.internal.core.Openable.generateInfos",
          "source": "Openable.java:183"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaElement.openWhenClosed",
          "source": "JavaElement.java:572"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaElement.getElementInfo",
          "source": "JavaElement.java:309"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaElement.getElementInfo",
          "source": "JavaElement.java:295"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaElement.getChildren",
          "source": "JavaElement.java:250"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locatePackageDeclarations",
          "source": "MatchLocator.java:908"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locatePackageDeclarations",
          "source": "MatchLocator.java:881"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:99"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.findMatches",
          "source": "SearchEngine.java:469"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:758"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.getNamesakePackages",
          "source": "RenamePackageProcessor.java:367"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.getReferencesToTypesInNamesakes",
          "source": "RenamePackageProcessor.java:338"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.checkFinalConditions",
          "source": "RenamePackageProcessor.java:289"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFinalConditions",
          "source": "ProcessorBasedRefactoring.java:134"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run",
          "source": "CheckConditionsOperation.java:84"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.CreateChangeOperation.run",
          "source": "CreateChangeOperation.java:114"
        },
        {
          "method": "org.eclipse.ltk.core.refactoring.PerformChangeOperation.run",
          "source": "PerformChangeOperation.java:182"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1673"
        },
        {
          "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
          "source": "WorkbenchRunnableAdapter.java:58"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:101"
        }
      ],
      "number": 0,
      "commentIndex": 15,
      "bugId": "37846",
      "date": "2004-06-12T06:51:46+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "37846",
  "bugId": "37846",
  "date": "2003-05-20T09:41:48+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}