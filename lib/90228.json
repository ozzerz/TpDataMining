{
  "comments": [
    "Invoke the following test case with DirectedGraphLayout takes about 5 minutes \non a 2 gighz machine:\n\nprivate static Node createNode(String name) {\n\tNode node \u003d new Node(name);\n\tnode.setPadding(new Insets(30));\n\t\n\treturn node;\n}\n\nprivate static Edge createEdge(Node start, Node end) {\n\tEdge edge \u003d new Edge(start, end);\n\tedge.delta +\u003d 1.5;\n\treturn edge;\n}\n\n/**\n * connectNonConnectedSubgraphs\n * Since the GEF algorithm only handles fully connected graphs, we have to \nsimulate this\n * when there are nodes that aren\u0027t connected.  This routine will create \na \"ghost\" node that\n * serves as a parent for all nodes that don\u0027t have any incoming connections.\n * \n * @param nodes List of Nodes that are to be contained in the graph.\n * @param edges List of Edges that are to be contained in the graph.\n */\nprivate static void connectNonConnectedSubgraphs(List nodes, List edges) {\n\tNode ghostNode \u003d new Node();\n\tghostNode.width \u003d 1;\n\tghostNode.height \u003d 1;\n\tghostNode.setPadding( new Insets(0) );\n\n\tnodes.add(ghostNode);\n\n\tListIterator ni \u003d nodes.listIterator();\n\twhile (ni.hasNext()) {\n\t\tNode n \u003d (Node) ni.next();\n\n\t\tif (n \u003d\u003d ghostNode)\n\t\t\tcontinue;\n\n\t\t// if node has no incoming connectors then assume it is not-\nconnected to the main graph.\n\t\tif (n.incoming.isEmpty()) {\n\t\t\tEdge e \u003d new Edge(ghostNode, n);\n\t\t\te.weight \u003d 0;\n\t\t\tedges.add(e);\n\t\t}\n\t}\n}\n\npublic static DirectedGraph performanceIssueGraph() {\n\tNode s20, s19, s18, s17, s16, s15, s14, s13, s12, s11, s10, s9, s8, \ns7, s6, s5, s4, s3, s2, s1;\n\tNode h20, h19, h18, h17, h16, h15, h14, h13, h12, h11, h10, h9, h8, \nh7, h6, h5, h4, h3, h2, h1;\n\tNodeList nodes \u003d new NodeList();\n\tEdgeList edges \u003d new EdgeList();\n\n\tnodes.add(s20 \u003d createNode(\"S20.cpp\"));\n\tnodes.add(s19 \u003d createNode(\"S19.cpp\"));\n\tnodes.add(s18 \u003d createNode(\"S18.cpp\"));\n\tnodes.add(s17 \u003d createNode(\"S17.cpp\"));\n\tnodes.add(s16 \u003d createNode(\"S16.cpp\"));\n\tnodes.add(s15 \u003d createNode(\"S15.cpp\"));\n\tnodes.add(s14 \u003d createNode(\"S14.cpp\"));\n\tnodes.add(s13 \u003d createNode(\"S13.cpp\"));\n\tnodes.add(s12 \u003d createNode(\"S12.cpp\"));\n\tnodes.add(s11 \u003d createNode(\"S11.cpp\"));\n\tnodes.add(s10 \u003d createNode(\"S10.cpp\"));\n\tnodes.add(s9 \u003d createNode(\"S9.cpp\"));\n\tnodes.add(s8 \u003d createNode(\"S8.cpp\"));\n\tnodes.add(s7 \u003d createNode(\"S7.cpp\"));\n\tnodes.add(s6 \u003d createNode(\"S6.cpp\"));\n\tnodes.add(s5 \u003d createNode(\"S5.cpp\"));\n\tnodes.add(s4 \u003d createNode(\"S4.cpp\"));\n\tnodes.add(s3 \u003d createNode(\"S3.cpp\"));\n\tnodes.add(s2 \u003d createNode(\"S2.cpp\"));\n\tnodes.add(s1 \u003d createNode(\"S1.cpp\"));\n\tnodes.add(h20 \u003d createNode(\"H20.h\"));\n\tnodes.add(h19 \u003d createNode(\"H19.h\"));\n\tnodes.add(h18 \u003d createNode(\"H18.h\"));\n\tnodes.add(h17 \u003d createNode(\"H17.h\"));\n\tnodes.add(h16 \u003d createNode(\"H16.h\"));\n\tnodes.add(h15 \u003d createNode(\"H15.h\"));\n\tnodes.add(h14 \u003d createNode(\"H14.h\"));\n\tnodes.add(h13 \u003d createNode(\"H13.h\"));\n\tnodes.add(h12 \u003d createNode(\"H12.h\"));\n\tnodes.add(h11 \u003d createNode(\"H11.h\"));\n\tnodes.add(h10 \u003d createNode(\"H10.h\"));\n\tnodes.add(h9 \u003d createNode(\"H9.h\"));\n\tnodes.add(h8 \u003d createNode(\"H8.h\"));\n\tnodes.add(h7 \u003d createNode(\"H7.h\"));\n\tnodes.add(h6 \u003d createNode(\"H6.h\"));\n\tnodes.add(h5 \u003d createNode(\"H5.h\"));\n\tnodes.add(h4 \u003d createNode(\"H4.h\"));\n\tnodes.add(h3 \u003d createNode(\"H3.h\"));\n\tnodes.add(h2 \u003d createNode(\"H2.h\"));\n\tnodes.add(h1 \u003d createNode(\"H1.h\"));\n\n\tedges.add(createEdge(s20, h20));\n\tedges.add(createEdge(h20, h19));\n\tedges.add(createEdge(s19, h19));\n\tedges.add(createEdge(h19, h18));\n\tedges.add(createEdge(s18, h18));\n\tedges.add(createEdge(h18, h17));\n\tedges.add(createEdge(s17, h17));\n\tedges.add(createEdge(h17, h16));\n\tedges.add(createEdge(s16, h16));\n\tedges.add(createEdge(h16, h15));\n\tedges.add(createEdge(s15, h15));\n\tedges.add(createEdge(h15, h14));\n\tedges.add(createEdge(s14, h14));\n\tedges.add(createEdge(h14, h13));\n\tedges.add(createEdge(s13, h13));\n\tedges.add(createEdge(h13, h12));\n\tedges.add(createEdge(s12, h12));\n\tedges.add(createEdge(h12, h11));\n\tedges.add(createEdge(s11, h11));\n\tedges.add(createEdge(h11, h10));\n\tedges.add(createEdge(s10, h10));\n\tedges.add(createEdge(h10, h9));\n\tedges.add(createEdge(s9, h9));\n\tedges.add(createEdge(h9, h8));\n\tedges.add(createEdge(s8, h8));\n\tedges.add(createEdge(h8, h7));\n\tedges.add(createEdge(s7, h7));\n\tedges.add(createEdge(h7, h6));\n\tedges.add(createEdge(s6, h6));\n\tedges.add(createEdge(h6, h5));\n\tedges.add(createEdge(s5, h5));\n\tedges.add(createEdge(h5, h4));\n\tedges.add(createEdge(s4, h4));\n\tedges.add(createEdge(h4, h3));\n\tedges.add(createEdge(s3, h3));\n\tedges.add(createEdge(h3, h2));\n\tedges.add(createEdge(s2, h2));\n\tedges.add(createEdge(h2, h1));\n\tedges.add(createEdge(s1, h1));\n\t\n\tconnectNonConnectedSubgraphs(nodes, edges);\n\tDirectedGraph graph \u003d new DirectedGraph();\n\tgraph.nodes \u003d nodes;\n\tgraph.edges \u003d edges;\n\t\n\tnew DirectedGraphLayout()\n\t\t.visit(graph);\n\treturn graph;\n\n}",
    "You are definitely pushing the limits of the current implementation when you add\nthat many 0 weighted connections. Every single bendpoint in a zero-weighted edge\nbecomes a free floating group which is adjusted over and over inside our\nhorizontal placement implementation.\n\nThe workaround is to severely limit the amound of long, zero-weighted edges.  In\nthis test case, the number of zero-weighted edges is way more than needed to\nguarantee a connected graph.",
    "Created an attachment (id\u003d19544)\ntest plugin\n\nA project which adds an action to the menu bar which times layout of graphs of\nincreasing size until the user presses \u0027No\u0027.",
    "The sample code Steven provided creates 41 nodes and 59 edges.\nIf you generalized the pattern (as in the attached test plugin) to create N \npairs of \u0027s\u0027 and \u0027h\u0027 nodes we get 2N+1 nodes and 3N-1 edges. If you double N \nthe time required for layout increases by a factor of 16! This suggests that \nthe algorithm has cost O(N**4) which quickly becomes unusable.",
    "You have really long edges which correspond to tons of virtual nodes which get \ninserted.  And these nodes are floating around freely because of the zero \nweighting factor.  This is what is exposing the performance problem, and there \nare workarounds to aboid it.\n\nAnother workaround is to remove all of the bogus edges which were inserted \nprior to performing horizontal placement.  You would have to write a custom \nDirectedGraphLayout which know about the edges to be removed prior to \nhorizontal placement.\n\nThere are no plans to address this for 3.0.x",
    "Released to HEAD \u003e 0512\n\nThe test case below now runs in 75 milliseconds on my Thinkpad.\n\nOne optimizations made was to collapse all of the edges between two clusters\ninto a single structure which maintained all edges\u0027 info.  I also made\nInitialRankSolver faster.",
    "forgot to mark fixed.",
    "I\u0027m getting the following error with the fix to this bug:\n\njava.lang.ArrayIndexOutOfBoundsException: 20\n        at\norg.eclipse.draw2d.internal.graph.NodeCluster.addRightNeighbor(NodeCluster.java:45)\n        at\norg.eclipse.draw2d.internal.graph.HorizontalPlacement.findAllClusters(HorizontalPlacement.java:315)\n        at\norg.eclipse.draw2d.internal.graph.HorizontalPlacement.balanceClusters(HorizontalPlacement.java:195)\n        at\norg.eclipse.draw2d.internal.graph.HorizontalPlacement.visit(HorizontalPlacement.java:387)\n        at\norg.eclipse.draw2d.internal.graph.CompoundHorizontalPlacement.visit(CompoundHorizontalPlacement.java:163)",
    "opened bug 100072.",
    "Layout still seems to have cost O(N**4) in HEAD.\nI wouldn\u0027t call that \u0027resolved\u0027. :-)",
    "(In reply to comment #9)\n\u003e Layout still seems to have cost O(N**4) in HEAD.\n\u003e I wouldn\u0027t call that \u0027resolved\u0027. :-)\n\nPlease compare to O(N**N)",
    "Are you saying the best known algorithms have cost O(N**4)?\nCan you cite a reference to educate me (my graph theory is a little rusty).",
    "Maybe you could educate us? Are you still having performance problems? If so, \nreopen the bug.",
    "Reopened for further investigation...",
    "Changing to RESOLVE WONTFIX based on the above comments.\nReporter to re-open with more information if enhancement is still required."
  ],
  "commentCreationDates": [
    "2005-04-04T23:19:16+02:00",
    "2005-04-05T17:30:50+02:00",
    "2005-04-05T18:39:48+02:00",
    "2005-04-05T18:40:56+02:00",
    "2005-04-05T20:27:22+02:00",
    "2005-05-12T21:17:02+02:00",
    "2005-05-18T15:41:25+02:00",
    "2005-06-14T20:26:16+02:00",
    "2005-06-14T22:28:21+02:00",
    "2005-10-20T22:05:50+02:00",
    "2005-10-20T22:21:59+02:00",
    "2005-10-21T16:13:10+02:00",
    "2005-10-21T16:24:11+02:00",
    "2006-02-09T15:10:33+01:00",
    "2006-08-11T19:36:58+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "20",
      "elements": [
        {
          "method": "org.eclipse.draw2d.internal.graph.NodeCluster.addRightNeighbor",
          "source": "NodeCluster.java:45"
        },
        {
          "method": "org.eclipse.draw2d.internal.graph.HorizontalPlacement.findAllClusters",
          "source": "HorizontalPlacement.java:315"
        },
        {
          "method": "org.eclipse.draw2d.internal.graph.HorizontalPlacement.balanceClusters",
          "source": "HorizontalPlacement.java:195"
        },
        {
          "method": "org.eclipse.draw2d.internal.graph.HorizontalPlacement.visit",
          "source": "HorizontalPlacement.java:387"
        },
        {
          "method": "org.eclipse.draw2d.internal.graph.CompoundHorizontalPlacement.visit",
          "source": "CompoundHorizontalPlacement.java:163"
        }
      ],
      "number": 0,
      "commentIndex": 7,
      "bugId": "90228",
      "date": "2005-06-14T20:26:16+02:00",
      "product": "GEF",
      "component": "draw2d",
      "severity": "normal"
    }
  ],
  "groupId": "90228",
  "bugId": "90228",
  "date": "2005-04-04T23:19:16+02:00",
  "product": "GEF",
  "component": "draw2d",
  "severity": "normal"
}