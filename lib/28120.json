{
  "comments": [
    "Trying to\n-debug\n-the sunw.hotjava.Main (hotjava 3.0)\n-with a jdk 1.3.1 vm (the oldest to support debugging)\n-over jdk 1.1.8 bootstrap classes (for hotjava requirements)\n-with oldjavaw as the launcher program. (for old security model)\n\nPut your jdk 1.1.8 container in the user classes, with any applet project to be\ntested.\n\nPut the 1.1.8 classes.zip in the bootstrap classes. (that might look redundant\nbut is required somehow...) (this JVM boot and cross-compile is really not\ntested enought! Please provide guidelines)\n\nIt all worked properly in older eclipse 2.0 this summer. Now it doesn\u0027t.\n\n----\u003e\u003e\u003e Looks like \"oldjavaw\" is ignored, and falls back to javaw:\n\n\n\n\norg.eclipse.core.runtime.CoreException: Error occurred during initialization of VM\njava/lang/NoClassDefFoundError: java/security/ProtectionDomain\n\tat org.eclipse.jdt.launching.AbstractVMRunner.abort(AbstractVMRunner.java:35)\n\tat\norg.eclipse.jdt.internal.launching.StandardVMDebugger.checkErrorMessage(StandardVMDebugger.java:278)\n\tat\norg.eclipse.jdt.internal.launching.StandardVMDebugger.run(StandardVMDebugger.java:216)\n\tat\norg.eclipse.jdt.internal.launching.JavaLocalApplicationLaunchConfigurationDelegate.launch(JavaLocalApplicationLaunchConfigurationDelegate.java:97)\n\tat\norg.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:144)\n\tat\norg.eclipse.debug.internal.ui.launchConfigurations.LaunchConfigurationDialog$11.run(LaunchConfigurationDialog.java:2283)\n\tat\norg.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:95)",
    "I was able to run/debug successfully by putting the 1.1.8 classes zip on the \nuser classes and bootstrap classes *after* the 1.3.1 rt.jar. If I put the \nclasses.zip first, it fails.",
    "The first thing to note is that we do not support debugging on 1.1.8 (never \nhave). The 1.1.8 runtime does not support debugging (so this may introduce all \nsorts of problems when you use the 1.1.8 class libraries).\n\nYou will need to provide us with a detailed description of your launch \nconfiguration (i.e. JRE \u0026 classpath), and an example applet that demonstrates \nthe problem.",
    "Please read carefully as I already mentioned the setup.\nBesides, I\u0027m telling you that it worked for a long time with 2.0.1.\n\n-Use jdk 1.3.1 for the JRE container.\n-Use \"oldjavaw\" for the executable.\n\n-download and unzip HotJava 3.0 (install, but only to get the jars)\nThis will be the application to be debuged.\n\n-There are no VM nor program arguments.\n-use sunw.hotjava.Main as the main class.\n\n-as the bootstrap classpath, use only the jdk 1.1.8 classes.zip.\n-as the user classpath, use\n   hotjava\u0027s lax.jar\n   hotjava\u0027s browser.jar\n   (optionnal project for applet code you would normally like to debug)\n   the jre 1.1.8 container\n\nI know it sound redundant around JREs sometimes, but it is just because hotjava\nlookup some of sun\u0027s classes in jdk 1.1 (after all its their own browser!)\n\nYou can run hotjava alone if you want to check it works.\nUse eclipse 2.0.1 and it works.\nThe only error you will get is some scripting engine that cannot be loaded, but\nyou can get rid of that by going into advanced preference and disabling javascript.\n\nI\u0027m telling you, Eclipse should not care about anything else than using a jre\n1.3, while bootstrapping other core classes (since you offer the option!)\n\nThis is just like basic cross-compiling, only at runtime.\nAnd that is usefull for developping on other platform with limited core classes set.",
    "Please, what is the progress on that bug?\nreminder: the following command line work perfectly fine on a command prompt.\n\u003c/pre\u003e\u003cb\u003e\nc:\\java\\jdk1.3.1\\bin\\oldjava -classpath\nc:\\java\\jdk1.3.1\\jre\\lib\\rt.jar;c:\\java\\jdk1.1.8\\lib\\classes.zip;C:\\java\\hotjava\\Browser.jar;C:\\java\\hotjava\\lax.jar;\nsunw.hotjava.Main\n\u003c/b\u003e\n\u003cpre\u003e\nSo I expect eclipse to be able to produce the same call.",
    "I took a look at the Sun HotJava 3.0 webpage, and they state right at the top\nthat the product has \"begun the Sun End of Life (EOL) process\" and that it\nwill not be supported after April 10, 2003.\n\nThere is little (read \"nearly none\") motivation for us to try to fix a problem\nthat only occurs when running extremely obsolete classes with a product that\neven Sun says they\u0027re not supporting anymore.\n\nThis bug just isn\u0027t a priority to any of the debug committers.\n\nIf it is a priority for *you*, you\u0027re welcome to debug the problem yourself.\nIf you make any progress, keep us updated in this bug report.",
    "What command line does Eclipse produce? (found on the process properties in the \ndebug view)? Is the working directory the same as when you launch from the \ncommand line?",
    "guy #5: calm down. Slack the coffee.\nFirst, unfocus on hotjava, focus on having a proper bootstrap of the JVM.\n\nguy #6: As described in the original description, it ignores oldjava[w]\nmaybe because it doesn\u0027t use the bin but the jre/bin and there is none there.\njdk 1.4 doesn\u0027t have an oldjava (!!?) Whatever, I use jdk 1.3 for that profile.\nworking dirs are the same.\n\nSee the 2 eclipse command lines:\n\n(eclipse 2.0.1, works fine)\nC:\\java\\jdk1.3.1\\bin\\oldjavaw -Xbootclasspath: -classpath\nC:\\java\\jdk1.3.1\\jre\\lib\\rt.jar;C:\\java\\jdk1.1.8\\lib\\classes.zip;C:\\java\\hotjava\\lax.jar;C:\\java\\hotjava\\Browser.jar;C:\\users\\danny\\eclipse_prj\\Outsight_in_resin\\output\n-Xdebug -Xnoagent -Djava.compiler\u003dNONE\n-Xrunjdwp:transport\u003ddt_socket,suspend\u003dy,address\u003dlocalhost:7129 sunw.hotjava.Main\n\n(eclipse 2.1m4, doesn\u0027t work, because not oldjavaw)\nC:\\java\\jdk1.3.1\\jre\\bin\\java.exe -Xbootclasspath: -classpath\nC:\\java\\jdk1.3.1\\jre\\lib\\rt.jar;C:\\java\\jdk1.1.8\\lib\\classes.zip;C:\\java\\hotjava\\lax.jar;C:\\java\\hotjava\\Browser.jar;C:\\users\\danny\\eclipse_prj\\Outsight_in_resin\\output\n-Xdebug -Xnoagent -Djava.compiler\u003dNONE\n-Xrunjdwp:transport\u003ddt_socket,suspend\u003dy,address\u003dlocalhost:12434 sunw.hotjava.Main\n",
    "As a workaround, I found that if I specify the executeable as \"..\\..\\oldjavaw\", \nI can get oldjavaw to run. However, there are two bugs here\n\n(1) The way we resolve the executbale name (should just be able to specify \noldjavaw)\n(2) The JRE tab does not save the changed executeable name (the next time I \nopen the tab, it is back to \"use default\").",
    "Fixed. The StandardVMType was reverting to java/javaw if it could not find the \nspecified executable. It now throws an exception if the specified executable \ncannot be found (the user sees an error message, so they are aware of the \nproblem, and not mislead).\n\nAs well, the upate problem in the JRE tab is fixed. The attribute was \nincorrectly being null\u0027ed out during initialization.",
    "Please verify (NOTE: you do not need to use hot java to verify - just try to \nrun oldjavaw, on jdk1.3.1 with classes.zip from a 1.1.8 VM).",
    "Verified Darin\u0027s changes.  The test case with \u0027oldjavaw\u0027 \u0026 1.1.8 will still not \nwork.  This is different issue however.  By definition, \u0027oldjava\u0027 ignores the \nbootpath.  When using \u0027oldjava\u0027, ALL classes, both user classes and runtime \nclasses must be specified via -classpath (or -cp).  The \u0027ProtectionDomain\u0027 class \ndid not exist in 1.1.8.  Thus, you need something in the User classpath that \ncontains \u0027ProtectionDomain\u0027.  However, when you do this, you run into conflicts \nbetween the 1.1.8 classes and the newer classlib.  If this worked exactly as \ndescribed in 2.0.1, I think it must have been exploiting a bug that has now been \nfixed.\n",
    "by using the ../../bin/oldjava[w] trick, it works fine even in 2.1\n\nI don\u0027t think it has anything to do with eclipse, outside the invalid jvm call.\nThe boot path, for that protection domain stuff, of oldjava is precised in\nearlier comments, above. We use 1.3 rt.jar to shut up the error. Works fine."
  ],
  "commentCreationDates": [
    "2002-12-11T17:59:19+01:00",
    "2002-12-11T18:37:09+01:00",
    "2002-12-17T18:40:43+01:00",
    "2002-12-18T01:43:19+01:00",
    "2003-01-16T01:25:27+01:00",
    "2003-01-16T01:59:10+01:00",
    "2003-01-16T13:20:07+01:00",
    "2003-01-17T03:48:57+01:00",
    "2003-01-17T15:01:13+01:00",
    "2003-01-24T02:40:39+01:00",
    "2003-01-24T02:41:20+01:00",
    "2003-01-24T20:52:06+01:00",
    "2003-01-25T00:17:16+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "java/security/ProtectionDomain",
      "elements": [
        {
          "method": "org.eclipse.jdt.launching.AbstractVMRunner.abort",
          "source": "AbstractVMRunner.java:35"
        },
        {
          "method": "org.eclipse.jdt.internal.launching.StandardVMDebugger.checkErrorMessage",
          "source": "StandardVMDebugger.java:278"
        },
        {
          "method": "org.eclipse.jdt.internal.launching.StandardVMDebugger.run",
          "source": "StandardVMDebugger.java:216"
        },
        {
          "method": "org.eclipse.jdt.internal.launching.JavaLocalApplicationLaunchConfigurationDelegate.launch",
          "source": "JavaLocalApplicationLaunchConfigurationDelegate.java:97"
        },
        {
          "method": "org.eclipse.debug.internal.core.LaunchConfiguration.launch",
          "source": "LaunchConfiguration.java:144"
        },
        {
          "method": "org.eclipse.debug.internal.ui.launchConfigurations.LaunchConfigurationDialog$11.run",
          "source": "LaunchConfigurationDialog.java:2283"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:95"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "28120",
      "date": "2002-12-11T17:59:19+01:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "28120",
  "bugId": "28120",
  "date": "2002-12-11T17:59:19+01:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "normal"
}