{
  "comments": [
    "AbstractRepositoryTask repositoryUrl and task id should not be derived from handleIdentifier. Current API is very confusing and does not give enough flexibility. For example in web provider I have repositoryUrl, task id and task prefix. In some cases (e.g. SourceForge) task prefix is defined per query.\n\nPlease refactor API to keep separate repositoryUrl, taskUrl (same as current handle identifier) and task id.",
    "Eugene: do you always have a well-defined ID for WebTask\u0027s?",
    "(In reply to comment #1)\n\u003e Eugene: do you always have a well-defined ID for WebTask\u0027s?\n\nWhat do you mean? \n\nFor SourceForge unique issue id is serverUrl + projectId + categoryId + taskId. For most others it is just serverUrl + id.",
    "Yes, that\u0027s what I was wondering.  We seem to have two kinds of IDs, always scoped by repository.  One is a repository-wide ID, the other is a hierarchically categorized ID as with SourceForge.",
    "This change that will be quite involved, and needs to be made consistently, and along with clean-up related to bug 161734.  High priority to investigate this post 1.0.",
    "Created an attachment (id\u003d56310)\nRemove ITaskListElement.setHandleIdentifier()\n\nThis patch is somewhat related: it removes ITaskListElement.setHandleIdentifier() which is not used anywhere and makes AbstractQueryHit.getUrl() abstract.",
    "Created an attachment (id\u003d56311)\nmylar/context/zip\n\n",
    "Looks good Steffen.  But I\u0027ll hold off on a closer review and applying until we make 1.0.x a branch, probably next week.",
    "There is also an ancient issue about AbstractRepositoryTask.getHandle(repositoryUrl, taskId) method currently does not work for JIRA, where taskId has a \u0027-\u0027. Hance open repository task don\u0027t work for JIRA. See bug 169974.\n\njava.lang.RuntimeException: invalid handle for task, can not contain: -, was: MNGECLIPSE-2\nat org.eclipse.mylar.tasks.core.AbstractRepositoryTask.getHandle(AbstractRepositoryTask.java:138)\nat org.eclipse.mylar.tasks.ui.TasksUiUtil.openRepositoryTask(TasksUiUtil.java:120)\nat org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.openRemoteTask(OpenRepositoryTask.java:86)\nat org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.run(OpenRepositoryTask.java:49)\nat org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:253)\nat org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:229)\nat org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:545)\nat org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:490)\nat org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:402)\nat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\nat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:928)\nat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3465)\nat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3079)\nat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1945)\nat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1909)\nat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:425)\nat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\nat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod(EclipseAppContainer.java:522)\nat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:147)\nat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:104)\nat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:74)\nat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)\nat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:170)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.eclipse.core.launcher.Main.invokeFramework(Main.java:339)\nat org.eclipse.core.launcher.Main.basicRun(Main.java:283)\nat org.eclipse.core.launcher.Main.run(Main.java:984)\nat org.eclipse.core.launcher.Main.main(Main.java:959)\n\n",
    "Starting on this now..",
    "All changes but externalization format committed.  Working on format now.",
    "Nearly done.  Just need to get rid of HANDLE attribute in XML, all set to do that for repository tasks, but need to handle the local task case.  Also need to get rid of setters with @Deprecated on them.",
    "Final round of refactoring completed.  I still need to update the porting guide and send a message to mylar-dev.\n\nRob: take a look at the 3 failing tests, try to fix, report back, and then lets\u0027 try to get bootstrapped so that we can do a dev build.",
    "Global refactoring bit us again. My guess is you refactored description -\u003e summary at some point. ;)  Bugzilla tests pass. Only change of note is at line 446 of DelegatingTaskExternalizer (see where I commented out the thrown exception). ",
    "API changes done.  Still need to finish updating porting guide and send message to mylar-dev about changes (after 2.0M1 goes out)",
    "(In reply to comment #14)\n\u003e API changes done.  Still need to finish updating porting guide and send message\n\u003e to mylar-dev about changes (after 2.0M1 goes out)\n\nI can\u0027t agree that it is done. See my comment at https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d166174#c57\n",
    "Forgot to reopen. So, you basically moved method from one class to another one, but the cause of the issue hasn\u0027t been fixed.\nFor example, in my comment 57 in bug 166174, we already have task data retrieved, so the task for that data should be somewhere around and we should be getting handle from the task and not constructing it making assumptions.",
    "Eugene: anything that still needs to be addressed here?",
    "Not sure. But last time I tried to open JIRA task from the search results in Search view it failed.",
    " (In reply to comment #18)\n\u003e Not sure. But last time I tried to open JIRA task from the search results in\n\u003e Search view it failed.\n\nI tested against developer.atlassian.com and it worked.  Please open a new bug with steps to reproduce if it is not working for you.",
    "I just remembered that I need to check whether the Tasks API is robust to connectors using \"-\" in a handle, since the changes now permit that.",
    "It fails for JIRA tasks that are not in the task list: Mylar attempts to open the task by id which the JIRA connector can not map to a key. ",
    " (In reply to comment #21)\n\u003e It fails for JIRA tasks that are not in the task list: Mylar attempts to open\n\u003e the task by id which the JIRA connector can not map to a key.\n\nHmm. But it does work for open corresponding jira task from Sync view.",
    "(In reply to comment #22)\n\u003e  (In reply to comment #21)\n\u003e \u003e It fails for JIRA tasks that are not in the task list: Mylar attempts to open\n\u003e \u003e the task by id which the JIRA connector can not map to a key.\n\u003e \n\u003e Hmm. But it does work for open corresponding jira task from Sync view.\n\nIn that case the key is derived from the commit message and the id is not used.\n \n\n",
    " (In reply to comment #23)\n\u003e In that case the key is derived from the commit message and the id is not used.\n\nNot sure about that, because id is shown instead of key in the editor...",
    "I have added an API call to map ids to keys which is used when a task is not in the task list: bug 185189 . I still see the id in the task editor but that should be fixable.",
    "I the fail to open from synch view still happening?  (comment#22)",
    "Open corresponding task generally works (see bug 185274 comment 6 though). I think we can close this report and deal with the remaining UI related problems on bug 185274.",
    "I think we\u0027re nearly done here but still need to review.",
    "Steffen, Eugene: We still have the situation where a connector can construct an invalid handle by putting a \"-\" in it, since we parse on the RepositoryTaskHandleUtil parsers on the relative position of the dash.  Does JIRA have any reason not to put back the following code in RepositoryTaskHandleUtil?  If we don\u0027t do it connectors will be able to break the normal function of the framework by violating this invariant.\n\n//\t\t} else if (taskId.contains(HANDLE_DELIM)) {\n//\t\t\tthrow new RuntimeException(\"invalid handle for task, can not contain: \" + HANDLE_DELIM + \", was: \"\n//\t\t\t\t\t+ taskId);",
    "(In reply to comment #29)\nI thought you have removed all the parsing for dashes...",
    "No, as i have repeatedly said we have not removed the parsing of dashes because that is the only way to determine the handles of previously created elements since we have used \"-\" as the delimiter and since URLs can have dashes in them.  To be specific RepositoryTaskHandleUtil.getRepositoryUrl(..) and RepositoryTaskHandleUtil.getTaskId(..) both rely on there only being one dash and this is a constraint that will definitely be in place for Mylyn 2.0.  So if a connector absolutely needs to have a dash in a key it will need to encode that \"-\".\n\nWe have two options now: either put the exception back or try to encode the \"-\" for the connector.  \n\nIs JIRA still creating IDs with keys in place of the ID??",
    "I\u0027m going to take one last look to see if we can get rid of this constraint for 2.0...",
    "It is going to take too long to get rid of this done for 2.0 in a backwards compatible way.  I put back throwing the RuntimeException when a handle with a \"-\" is constructed.  We can look at this again for 3.0",
    "Created an attachment (id\u003d72251)\ncheck handle\n\nMik, please review and apply. This fixes opening of remote tasks for JIRA.",
    "Created an attachment (id\u003d72252)\nmylyn/context/zip\n\n",
    "Mik, that was realy bad idea, because \"-\" could be part of the URL, like in one templates for the web connector - http://code.google.com/p/eclipse-outliner/issues/detail?id\u003d4\n\nI think nothing stops someone to deploy bugzilla, jira or any other connector under some folder with \"-\" too.",
    "Hit into issue with remote tasks and hyperlinks detectors in JIRA too. Mik, we can\u0027t release 2.0 with such issues, so it is not an enhancement, but very critical issue. I am really surprised that you are pushing it back.",
    "BTW, since we now have key in the AbstractTask class it would make sense to use search by key, so it would be possible to find matching tasks for jira without server round trips. That would need to change implementation of TasksUiUtil.openRepositoryTask() to search task in the task list by key instead of id.",
    "We could do a lookup by id first, then by url and then fallback to the key. \n\nBTW, the naming of the lookup methods in the task list is not descriptive, they should be renamed to getTaskByUrl(), getTaskByHandle() etc.",
    "Created an attachment (id\u003d72292)\nadded lookup by key\n\n",
    "Created an attachment (id\u003d72293)\nmylyn/context/zip\n\n",
    "Reviewing patches now.  Note that as mentioned previously there is no problems with URLs that have dashes because the current lookup was relying on the dash separating the URL from the ID (i.e. the last dash in the String) so that\u0027s why we ended up with the constraint of not having dashes in the ID.",
    "Awesome, good fix, thanks for getting this in Steffen!  The only change I made is to use your new isValidTaskId(taskId)) method in RepositoryTaskHandleUtil.getHandle(..)\n\nAre these changes sufficient for JIRA for 2.0?",
    "It seem work once patch from bug 192038 is in.",
    "Good to hear.  Post 2.0 we should consider removing the \"-\" in key restriction.  However, once we do that we should come up with some kind of mechanism for encouraging connectors to not use the more volatile human readable key instead of an internal ID (an integer on most connector implementations that I have seen)."
  ],
  "commentCreationDates": [
    "2006-07-05T07:58:39+02:00",
    "2006-11-04T03:14:09+01:00",
    "2006-11-04T03:20:08+01:00",
    "2006-11-06T19:39:16+01:00",
    "2006-12-07T20:39:42+01:00",
    "2007-01-02T23:54:04+01:00",
    "2007-01-02T23:54:10+01:00",
    "2007-01-04T04:57:39+01:00",
    "2007-01-09T19:39:39+01:00",
    "2007-02-10T00:11:30+01:00",
    "2007-02-10T04:05:02+01:00",
    "2007-02-10T04:44:18+01:00",
    "2007-02-13T23:17:38+01:00",
    "2007-02-14T01:29:26+01:00",
    "2007-02-16T21:03:07+01:00",
    "2007-02-16T21:09:38+01:00",
    "2007-02-16T21:29:05+01:00",
    "2007-03-30T02:48:39+02:00",
    "2007-03-30T05:22:11+02:00",
    "2007-04-16T21:10:14+02:00",
    "2007-04-16T21:11:53+02:00",
    "2007-04-16T21:20:26+02:00",
    "2007-04-16T21:55:00+02:00",
    "2007-04-16T22:34:29+02:00",
    "2007-04-16T23:33:04+02:00",
    "2007-05-02T23:25:00+02:00",
    "2007-05-03T22:58:08+02:00",
    "2007-05-06T05:05:17+02:00",
    "2007-05-11T17:59:39+02:00",
    "2007-06-19T09:30:39+02:00",
    "2007-06-19T17:17:48+02:00",
    "2007-06-19T18:30:35+02:00",
    "2007-06-19T20:38:20+02:00",
    "2007-06-23T05:08:34+02:00",
    "2007-06-23T21:24:01+02:00",
    "2007-06-23T21:24:03+02:00",
    "2007-06-24T02:57:01+02:00",
    "2007-06-24T17:38:02+02:00",
    "2007-06-24T18:00:42+02:00",
    "2007-06-24T20:36:13+02:00",
    "2007-06-24T20:59:26+02:00",
    "2007-06-24T20:59:28+02:00",
    "2007-06-24T21:59:58+02:00",
    "2007-06-24T22:19:26+02:00",
    "2007-06-24T23:35:47+02:00",
    "2007-06-24T23:44:59+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "invalid handle for task, can not contain: -, was: MNGECLIPSE-2",
      "elements": [
        {
          "method": "org.eclipse.mylar.tasks.core.AbstractRepositoryTask.getHandle",
          "source": "AbstractRepositoryTask.java:138"
        },
        {
          "method": "org.eclipse.mylar.tasks.ui.TasksUiUtil.openRepositoryTask",
          "source": "TasksUiUtil.java:120"
        },
        {
          "method": "org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.openRemoteTask",
          "source": "OpenRepositoryTask.java:86"
        },
        {
          "method": "org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.run",
          "source": "OpenRepositoryTask.java:49"
        },
        {
          "method": "org.eclipse.ui.internal.PluginAction.runWithEvent",
          "source": "PluginAction.java:253"
        },
        {
          "method": "org.eclipse.ui.internal.WWinPluginAction.runWithEvent",
          "source": "WWinPluginAction.java:229"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:545"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$2",
          "source": "ActionContributionItem.java:490"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$5.handleEvent",
          "source": "ActionContributionItem.java:402"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:928"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3465"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3079"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1945"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1909"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:425"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod",
          "source": "EclipseAppContainer.java:522"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppHandle.run",
          "source": "EclipseAppHandle.java:147"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:104"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:74"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:354"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:170"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:339"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:283"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:984"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:959"
        }
      ],
      "number": 0,
      "commentIndex": 8,
      "bugId": "149624",
      "date": "2007-01-09T19:39:39+01:00",
      "product": "Mylyn",
      "component": "Core",
      "severity": "enhancement"
    }
  ],
  "groupId": "149624",
  "bugId": "149624",
  "date": "2006-07-05T07:58:39+02:00",
  "product": "Mylyn",
  "component": "Core",
  "severity": "enhancement"
}