{
  "comments": [
    "Tested in version: 3.1M5\n\nI get an error with the message:\nAn internal error occurred during: \"Requesting Java AST from selection\".\n\nThere does not seem to be a way to get more information.\n\nThis error keeps showing up anytime I make any action (including moving around) \ninside the java source editor. Unfortunately I have to dump a rather large \nsource file in here; it seems that removing just about anything else from this \ndump causes the error to no longer happen.\n\nTo \u0027activate\u0027 the bug, remove the // before the linke \u0027private transient\u0027.\n\n-----------source file to reproduce the bug:\npackage org.eden.swt;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.ZipFile;\n\npublic class Skin\n{\n\tprivate String fSkinLocation;\n\tprivate boolean fSkinLocationIsZip;\n\t//private transient   //remove the first doubleslash on this line and the \nerror happends.\n\t\n\tprivate Skin()\n\t{\n\t\t//intentionally left blank\n\t}\n\t\n\tpublic static Skin makeSkin(String pSkinLocation)\n\t  throws IOException\n\t{\n\t\tSkin lNew \u003d new Skin();\n\t\tFile lFile;\n\t\t\n\t\tlNew.fSkinLocation \u003d pSkinLocation;\n\t\tlFile \u003d new File(lNew.fSkinLocation);\n\t\t\n\t\tif ( !lFile.exists() ) {\n\t\t\tthrow new FileNotFoundException(\n\t\t\t  \"Skin \u0027\" + pSkinLocation + \"\u0027 not found.\");\n\t\t}\n\t\t\n\t\tlNew.fSkinLocationIsZip \u003d !lFile.isDirectory();\n\t\t\n\t\treturn lNew;\n\t}\n\t\n\tpublic static void setTempDirectory(String pTemp)\n\t{\n\t\tsTempDirectory \u003d pTemp;\n\t}\n\t\n\tprivate InputStream getResource(String pResourceName)\n\t  throws IOException\n\t{\n\t\tif ( fSkinLocationIsZip ) {\n\t\t\treturn getResourceFromZip(pResourceName);\n\t\t} else {\n\t\t\treturn getResourceFromDir(pResourceName);\n\t\t}\n\t}\n\t\n\tprivate InputStream getResourceFromZip(String pResourceName)\n\t  throws IOException\n\t{\n\t\tZipFile lZipFile;\n\t\t\n\t\tlZipFile \u003d new ZipFile(fSkinLocation);\n\t}\n}\n-----------------\n\nin case it\u0027s neccessary: properties of the project:\n\nBuilders: Just the usual java builder, nothing else.\n\nbuild path: SWT (the jar from org.eclipse.swt.win32_3.1.0, java 1.5.1 system \nlibrary.\n\njava compiler: JDK compliance levels: 5.0 default settings. If need be I can \nlist the entire java compiler settings (all 50+ of em). Assuming for now that \nisn\u0027t it.",
    "Created an attachment (id\u003d18757)\nThe test case (also found in the first comment).\n",
    "Created an attachment (id\u003d18758)\nMy eclipse settings (project uses \u0027default\u0027 settings).\n\nThese are the settings of my eclipse. The project uses all \u0027default\u0027 settings.\nAs the settings, especially \u0027Java, Compiler\u0027 have marked effects on at least\nthe outlook of the editor (what\u0027s a warning, what\u0027s an error, etcetera), this\nmay be useful for trying to reproduce the bug.\n",
    "AccTransient is the same value than AccVarArgs. A method cannot be transient. We\nshould not preserve the AccTransient modifier.\nThe illegal modifier for method is properly handled, but the code blows up when\nwe try to generate the method.\n\njava.lang.ArrayIndexOutOfBoundsException: -1\n\tat\norg.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:59)\n\tat\norg.eclipse.jdt.internal.compiler.ast.AllocationExpression.generateCode(AllocationExpression.java:115)\n\tat\norg.eclipse.jdt.internal.compiler.ast.LocalDeclaration.generateCode(LocalDeclaration.java:106)\n\tat\norg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:218)\n\tat\norg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:165)\n\tat\norg.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:562)\n\tat\norg.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:616)\n\tat\norg.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:182)\n\tat org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:516)\n\tat org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:335)\n\tat org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:2388)\n\tat org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1112)\n\tat org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1009)\n\tat org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1001)\n\tat org.eclipse.jdt.core.tools.compiler.Compile.main(Compile.java:19)",
    "Created an attachment (id\u003d18761)\nTest case ready to compile\n",
    "Added Varargs test027 to detect for collision case.",
    "Verified in 20050330-0500"
  ],
  "commentCreationDates": [
    "2005-03-14T05:38:39+01:00",
    "2005-03-14T05:42:58+01:00",
    "2005-03-14T05:46:08+01:00",
    "2005-03-14T14:16:02+01:00",
    "2005-03-14T14:16:49+01:00",
    "2005-03-14T19:56:35+01:00",
    "2005-03-31T01:05:34+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "-1",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments",
          "source": "Statement.java:59"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.AllocationExpression.generateCode",
          "source": "AllocationExpression.java:115"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.generateCode",
          "source": "LocalDeclaration.java:106"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode",
          "source": "AbstractMethodDeclaration.java:218"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode",
          "source": "AbstractMethodDeclaration.java:165"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode",
          "source": "TypeDeclaration.java:562"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode",
          "source": "TypeDeclaration.java:616"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode",
          "source": "CompilationUnitDeclaration.java:182"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:516"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:335"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.batch.Main.performCompilation",
          "source": "Main.java:2388"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.batch.Main.compile",
          "source": "Main.java:1112"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.batch.Main.compile",
          "source": "Main.java:1009"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.batch.Main.compile",
          "source": "Main.java:1001"
        },
        {
          "method": "org.eclipse.jdt.core.tools.compiler.Compile.main",
          "source": "Compile.java:19"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "87900",
      "date": "2005-03-14T14:16:02+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "87900",
  "bugId": "87900",
  "date": "2005-03-14T05:38:39+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}