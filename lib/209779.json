{
  "comments": [
    "Consider the followoing example:\n----\nimport java.util.ArrayList;\nimport java.util.List;\n  \npublic class ForEachTest {\n  public static void main(String[] args) {\n    final List\u003cString\u003e stringList \u003d new ArrayList\u003cString\u003e();\n    stringList.add(\"test1\");\n    stringList.add(\"test2\");\n    ((List) stringList).add(new Integer(1000));\n\n    for (Object obj : stringList) { // line 11\n      System.out.println(obj);\n    }\n  }\n}\n----------\nThe latest Eclipse 3.3.1.1 compiler compiles it and the program runs fine with output:\ntest1\ntest2\n1000\n\nWith javac (for example version 1.6.0_01-b06 under Windows) the program compiles but the program fails with output:\ntest1\ntest2\nException in thread \"main\" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String\nat ForEachTest.main(ForEachTest.java:11)\n\nThe javac makes a cast on the next iterator in the bytecode whereas the eclipse compiler ommits the cast. The Java language spec doesn\u0027t say anything about it, but it\u0027s irritating.",
    "Feels like we are doing the right thing. We would issue the ClassCastException if code was performing:\n\n    for (String str : stringList) { // line 11\n      System.out.println(str);\n    }\n\nBut since the code is manipulating the list as objects, we do not insert cast to String checks.\n\nInterestingly, if you write instead:\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class X {\n  public static void main(String[] args) {\n    final List\u003cString\u003e stringList \u003d new ArrayList\u003cString\u003e();\n    stringList.add(\"test1\");\n    stringList.add(\"test2\");\n    ((List) stringList).add(new Integer(1000));\n\n    Object o \u003d stringList.get(2);\n  }\n}\n\nNo ClassCastException is generated any longer, from javac output.\nStrictly speaking, I don\u0027t see why any would be different from the other.\nBy using an Object variable in the foreach loop, the #println(Object) is selected, and thus no String cast should be required.\n\n",
    "You\u0027re right there should be no difference between both codes since the return type of both the next iterator and the get method is String in our example.\n\nBut by decompiling the output of the javac one sees the cast:\nfor(Iterator iterator \u003d arraylist.iterator(); iterator.hasNext(); System.out.println(s))\n            s \u003d (String)iterator.next();\n\n--\n\nObject obj \u003d arraylist.get(2);\n-------------\n\nThat\u0027s not very consistant from the javac. I don\u0027t know if it\u0027s y bug from Eclipse compiler or from the java compiler but I wanted to report the mismatch between both.",
    "Yes, the inserted cast is visible in bytecode.\nKnowing the mismatch is good, I am investigating whether there would be a secret entry in the spec which would explain the difference.\nSo far, I am leaning towards a javac bug... but this is still premature.",
    "Added GenericTypeTest#test1219",
    "Got confirmation from spec master that our behavior is the proper one.\nThis is a javac bug which you should report to them.\n\nClosing as INVALID since our behavior is valid.\n",
    "In his Post on dev.java.net (http://forums.java.net/jive/thread.jspa?messageID\u003d246154#246154) Nishanth Sastry tells us that the behavior of the javac is correct and eclipse should throw an Exception. We will look at it and maybe write another comment here.",
    "Verified for 3.4M4 using build I20071210-1800."
  ],
  "commentCreationDates": [
    "2007-11-14T12:19:59+01:00",
    "2007-11-14T17:49:10+01:00",
    "2007-11-15T07:15:01+01:00",
    "2007-11-15T09:40:22+01:00",
    "2007-11-15T10:58:37+01:00",
    "2007-11-20T11:25:36+01:00",
    "2007-11-20T12:23:00+01:00",
    "2007-12-11T16:39:28+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassCastException",
      "message": "java.lang.Integer cannot be cast to java.lang.String",
      "elements": [
        {
          "method": "ForEachTest.main",
          "source": "ForEachTest.java:11"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "209779",
      "date": "2007-11-14T12:19:59+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "209779",
  "bugId": "209779",
  "date": "2007-11-14T12:19:59+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}