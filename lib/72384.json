{
  "comments": [
    "Hi,\n\nI found a possible bug in XSDSchemaImpl.java. It can be reproduced with the\nattached java-file. When calling\nschema.getElement() you get the following error: \n\norg.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change\nan object in a way which is incorrect with regard to namespaces.\n\tat org.apache.xerces.dom.CoreDocumentImpl.checkNamespaceWF(Unknown Source)\n\tat org.apache.xerces.dom.AttrNSImpl.setName(Unknown Source)\n\tat org.apache.xerces.dom.AttrNSImpl.\u003cinit\u003e(Unknown Source)\n\tat org.apache.xerces.dom.CoreDocumentImpl.createAttributeNS(Unknown Source)\n\tat org.apache.xerces.dom.ElementImpl.setAttributeNS(Unknown Source)\n\tat\norg.eclipse.xsd.impl.XSDConcreteComponentImpl.createElement(XSDConcreteComponentImpl.java:283)\n\tat org.eclipse.xsd.impl.XSDSchemaImpl.createElement(XSDSchemaImpl.java:1439)\n\tat\norg.eclipse.xsd.impl.XSDConcreteComponentImpl.updateElement(XSDConcreteComponentImpl.java:334)\n\tat test.TestPrefix.main(TestPrefix.java:24)\n\t\n\t\nI discovered this problem because I couldn\u0027t say from the documentation of\nXSDSchema.getQNamePrefixToNamespaceMap() whether the prefix of the default\nnamespace is represented by a null-pointer or an empty string. So I looked into\nthe source code and saw the following lines in XSDSchemaImpl.java:\n\n  protected Map qNamePrefixToNamespaceMap \u003d \n    new HashMap()\n    {\n      public Object put(Object key, Object value)\n      {\n        if (value \u003d\u003d null)\n        {\n          value \u003d \"\";\n        }\n        Object result \u003d super.put(key, value);\n        if (!isReconciling)\n        {\n          Element theElement \u003d getElement();\n          if (theElement !\u003d null)\n          {\n              String xmlnsAttribute \u003d \"xmlns\";\n              if (key !\u003d null)\n              {\n                xmlnsAttribute +\u003d \":\" + key;\n              }\n              theElement.setAttributeNS(XSDConstants.XMLNS_URI_2000,\nxmlnsAttribute, (String)value);\n          }\n        }\n        return result;\n      }\n\n\t  [...]\n\t};\n  \nHere I saw that the default namespace is represented by a null-pointer. But I\nalso saw that an empty string would be accepted, too. But this would lead to an\nerror in producing the DOM-elements.\n\nI think it would be better to reject directly an empty string as a prefix when\nit is added to the list of namespaces. From my point of view an alternative\nwould be to discover this problem when calling schema.validate(). Furthermore\nthe documentation of XSDSchema.getQNamePrefixToNamespaceMap() should contain a\nhint whether an empty string or a null-pointer represents the default namespace.\n\nSo a possible fix would be:\n\n  protected Map qNamePrefixToNamespaceMap \u003d \n    new HashMap()\n    {\n      public Object put(Object key, Object value)\n      {\n        if (value \u003d\u003d null)\n        {\n          value \u003d \"\";\n        }\n-------------------------------        \n        if (key \u003d\u003d \"\") {\n          // either\n          key \u003d null;\n          // or\n          // throw new IllegalArgumentException();\n        }\n-------------------------------\n        Object result \u003d super.put(key, value);\n        if (!isReconciling)\n        {\n          Element theElement \u003d getElement();\n          if (theElement !\u003d null)\n          {\n              String xmlnsAttribute \u003d \"xmlns\";\n              if (key !\u003d null)\n              {\n                xmlnsAttribute +\u003d \":\" + key;\n              }\n              theElement.setAttributeNS(XSDConstants.XMLNS_URI_2000,\nxmlnsAttribute, (String)value);\n          }\n        }\n        return result;\n      }\n\n\t  [...]\n\t};",
    "Created an attachment (id\u003d14107)\nTest example reproducing the bug\n",
    "Sorry, I was for a moment inattentive when writing the fix ;-) Here my new\nsuggestion:\n\n  protected Map qNamePrefixToNamespaceMap \u003d \n    new HashMap()\n    {\n      public Object put(Object key, Object value)\n      {\n        if (value \u003d\u003d null)\n        {\n          value \u003d \"\";\n        }\n-------------------------------        \n        if (\"\".equals(key)) {\n          // either\n          key \u003d null;\n          // or\n          // throw new IllegalArgumentException();\n        }\n-------------------------------\n        Object result \u003d super.put(key, value);\n        if (!isReconciling)\n        {\n          Element theElement \u003d getElement();\n          if (theElement !\u003d null)\n          {\n              String xmlnsAttribute \u003d \"xmlns\";\n              if (key !\u003d null)\n              {\n                xmlnsAttribute +\u003d \":\" + key;\n              }\n              theElement.setAttributeNS(XSDConstants.XMLNS_URI_2000,\nxmlnsAttribute, (String)value);\n          }\n        }\n        return result;\n      }\n\n\t  [...]\n\n\t};\n\t\nWhen replacing an empty string with a null-pointer from my point of view it\nwould be neccessary to do this simmetricaly in the get- and remove-method. So I\nthink throwing the IllegalArgumentException or detecting this problem while\nvalidating a schema would be the better way.",
    "I added a comment to the Javadoc and throw an exception as suggested.",
    "The fix is available in the M200408260844 build."
  ],
  "commentCreationDates": [
    "2004-08-21T15:19:21+02:00",
    "2004-08-21T15:20:29+02:00",
    "2004-08-21T15:36:47+02:00",
    "2004-08-24T17:59:04+02:00",
    "2004-08-26T16:00:30+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.w3c.dom.DOMException",
      "message": "NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.",
      "elements": [
        {
          "method": "org.apache.xerces.dom.CoreDocumentImpl.checkNamespaceWF",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.dom.AttrNSImpl.setName",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.dom.AttrNSImpl.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.dom.CoreDocumentImpl.createAttributeNS",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.dom.ElementImpl.setAttributeNS",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.xsd.impl.XSDConcreteComponentImpl.createElement",
          "source": "XSDConcreteComponentImpl.java:283"
        },
        {
          "method": "org.eclipse.xsd.impl.XSDSchemaImpl.createElement",
          "source": "XSDSchemaImpl.java:1439"
        },
        {
          "method": "org.eclipse.xsd.impl.XSDConcreteComponentImpl.updateElement",
          "source": "XSDConcreteComponentImpl.java:334"
        },
        {
          "method": "test.TestPrefix.main",
          "source": "TestPrefix.java:24"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "72384",
      "date": "2004-08-21T15:19:21+02:00",
      "product": "MDT",
      "component": "XSD",
      "severity": "normal"
    }
  ],
  "groupId": "72384",
  "bugId": "72384",
  "date": "2004-08-21T15:19:21+02:00",
  "product": "MDT",
  "component": "XSD",
  "severity": "normal"
}