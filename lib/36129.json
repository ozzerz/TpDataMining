{
  "comments": [
    "Using aspectj 1.1rc1 on Windows 2000.\n\n\n\n\nI have a simple Java class hello.HelloWorld ...\n\n\n\n\npackage hello;\n\n\n\n\npublic class HelloWorld\n\n\n{\n\n\n    public void sayHello()\n\n\n    {\n\n\n        System.out.println(\"Hello World !\");\n\n\n    }\n\n\n\n\n    public static void main(String[] args)\n\n\n    {\n\n\n        HelloWorld hw \u003d new HelloWorld();\n\n\n        hw.sayHello();\n\n\n    }\n\n\n}\n\n\n\n\nand a simple aspect hello.Mute ...\n\n\n\n\npackage hello;\n\n\n\n\npublic aspect Mute\n\n\n{\n\n\n    pointcut greeting() : call(void *.sayHello());\n\n\n\n\n    void around() : greeting()\n\n\n    {\n\n\n        System.out.println(\"speechless!\");\n\n\n    }\n\n\n}\n\n\n\n\nI compile class hello.HelloWorld and put it in a jar file HelloWorld.jar. In the \njar\u0027s manifest.mf file I add the line \"Main-Class: hello.HelloWorld\" so that on \nthe command line I can run ...\n\n\n\n\n\u003e java -jar HelloWorld.jar\n\n\n\n\nand get \"Hello World!\" as the output.\n\n\n\n\nI weave the hello.Mute aspect into the HelloWorld.jar with the following...\n\n\n\n\n\u003e ajc -injars HelloWorld.jar hello\\Mute.java -outjar ModifiedHelloWorld.jar\n\n\n\n\nBecause ModifiedHelloWorld.jar has no meta information I do a \"jar uvfm\" to make \nhello.HelloWorld the main class in the jar. On the command line I run ...\n\n\n\n\n\u003e java -jar ModifiedHelloWorld.jar\n\n\n\n\nand the output is ...\n\n\n\n\nException in thread \"main\" java.lang.NoClassDefFoundError: org/aspectj/lang/NoAs\n\n\npectBoundException\n\n\n        at hello.HelloWorld.main(HelloWorld.java:13)\n\n\n\n\n* Note that the value of my CLASSPATH variable is c:\\aspectj1.1\\lib\\aspectjrt.\njar;c:\\apache-ant-1.5.2\\lib\\ant.jar;.\n\n\n\n\nTo work around this I can do a ...\n\n\n\n\n\u003e java -cp %CLASSPATH%;ModifiedHelloWorld.jar hello.HelloWorld\n\n\n\n\nand the output is \"speechless!\" as originally expected.",
    "This is the correct compiler behavior.  Whenever running code produced by ajc \nyou need to have the small aspectjrt.jar available on your classpath.  In this \ncase you would probably want to add the contents of this jar file to your self-\ncontained jar.  We could probably make this a simpler process, but that will \nhave to wait for a future release.\n\nI\u0027m reassigning this as a docs bug for consideration over there.\n\n",
    "Marking this as a P4 enhancement request; The requiement for aspectjrt.jar\nis pretty clearly documented but could be highlighted in a few-page \nintroductory \"how do you package up AspectJ programs\" pamphlet if we\never get the time to do one.\n\n-erik\n",
    "I don\u0027t have time to write a packaging two-pager for 1.2, so I\u0027m removing\nthis from the 1.2 milestone.\n",
    "we may want to resolve/wontfix this, since there\u0027s now a good deal of ancillary\n\"how to pick up AspectJ\" papers and the like out there",
    "I\u0027m closing this out. No-one else that I know of has struggled with this issue in the last 2 years, and that\u0027s \nsince aspectj 1.1rc1 !"
  ],
  "commentCreationDates": [
    "2003-04-07T15:38:16+02:00",
    "2003-04-10T20:50:22+02:00",
    "2003-11-17T23:16:03+01:00",
    "2004-01-29T16:08:02+01:00",
    "2005-07-21T02:50:45+02:00",
    "2005-08-17T19:53:18+02:00"
  ],
  "traces": [
    {
      "exceptionType": "pectBoundException",
      "elements": [
        {
          "method": "hello.HelloWorld.main",
          "source": "HelloWorld.java:13"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "36129",
      "date": "2003-04-07T15:38:16+02:00",
      "product": "AspectJ",
      "component": "Docs",
      "severity": "enhancement"
    }
  ],
  "groupId": "36129",
  "bugId": "36129",
  "date": "2003-04-07T15:38:16+02:00",
  "product": "AspectJ",
  "component": "Docs",
  "severity": "enhancement"
}