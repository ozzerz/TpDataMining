{
  "comments": [
    "The compiler crashes when I don\u0027t use -noweave to create aspect\nlibraries. Works fine with -noweave. \n\nNote, however, that iajc does not accept \"noweave\" attribute nor \n\"Xnoweave\" (filing this part as a separate bug).\n\nF:\\aspectj\\bugs\\1.1\\rc1\\noweave\u003eajc -outjar tracing.jar TraceAspect.java\nF:\\aspectj\\bugs\\1.1\\rc1\\noweave\u003eajc -outjar test.jar Test.java\nF:\\aspectj\\bugs\\1.1\\rc1\\noweave\u003eajc -injars test.jar;tracing.jar\ntrouble in:\npublic class TraceAspect extends java.lang.Object:\n  private java.util.logging.Logger _logger\n  public static final TraceAspect ajc$perSingletonInstance\n  static void \u003cclinit\u003e():\n                    INVOKESTATIC TraceAspect.ajc$postClinit ()V   (line 4)\n                    RETURN\n  end static void \u003cclinit\u003e()\n\n  public void \u003cinit\u003e():\n                    ALOAD_0     // TraceAspect this   (line 4)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n                    ALOAD_0     // TraceAspect this   (line 5)\n                    LDC \"trace\"\n                    INVOKESTATIC java.util.logging.Logger.getLogger (Ljava/lang/\nString;)Ljava/util/logging/Logger;\n                    PUTFIELD TraceAspect._logger Ljava/util/logging/Logger;\n                    RETURN   (line 4)\n  end public void \u003cinit\u003e()\n\n  public void ajc$before$TraceAspect$ef(org.aspectj.lang.JoinPoint$StaticPart)\n  AdviceAttribute(before, traceMethods(), 4, 239)\n:\n                    ALOAD_1     // org.aspectj.lang.JoinPoint$StaticPart thisJoi\nnPointStaticPart   (line 11)\n                    INVOKEINTERFACE org.aspectj.lang.JoinPoint$StaticPart.getSig\nnature ()Lorg/aspectj/lang/Signature;\n                    ASTORE_2\n                    ALOAD_0     // TraceAspect this   (line 12)\n                    GETFIELD TraceAspect._logger Ljava/util/logging/Logger;\n                    GETSTATIC java.util.logging.Level.INFO Ljava/util/logging/Le\nvel;\n                    ALOAD_2     // org.aspectj.lang.Signature sig\n                    INVOKEINTERFACE org.aspectj.lang.Signature.getDeclaringType\n()Ljava/lang/Class;\n                    INVOKEVIRTUAL java.lang.Class.getName ()Ljava/lang/String;\n                    ALOAD_2     // org.aspectj.lang.Signature sig   (line 13)\n                    INVOKEINTERFACE org.aspectj.lang.Signature.getName ()Ljava/l\nang/String;\n                    LDC \"Entering\"\n                    INVOKEVIRTUAL java.util.logging.Logger.logp (Ljava/util/logg\ning/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V   (line 12)\n                    RETURN   (line 14)\n  end public void ajc$before$TraceAspect$ef(org.aspectj.lang.JoinPoint$StaticPar\nt)\n\n  public static TraceAspect aspectOf()    org.aspectj.weaver.AjAttribute$AjSynth\netic@bdb503\n:\n                    GETSTATIC TraceAspect.ajc$perSingletonInstance LTraceAspect;\n\n                    DUP\n                    IFNULL L0\n                    ARETURN\n                L0: NEW org.aspectj.lang.NoAspectBoundException\n                    DUP\n                    INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.\u003cinit\u003e\n ()V\n                    ATHROW\n  end public static TraceAspect aspectOf()\n\n  public static boolean hasAspect()    org.aspectj.weaver.AjAttribute$AjSyntheti\nc@119dc16\n:\n                    GETSTATIC TraceAspect.ajc$perSingletonInstance LTraceAspect;\n\n                    IFNULL L0\n                    ICONST_1\n                    IRETURN\n                L0: ICONST_0\n                    IRETURN\n  end public static boolean hasAspect()\n\n  private static void ajc$postClinit()    org.aspectj.weaver.AjAttribute$AjSynth\netic@c05d3b\n:\n                    NEW TraceAspect\n                    DUP\n                    INVOKESPECIAL TraceAspect.\u003cinit\u003e ()V\n                    PUTSTATIC TraceAspect.ajc$perSingletonInstance LTraceAspect;\n\n                    RETURN\n  end private static void ajc$postClinit()\nend public class TraceAspect\nABORT\nException thrown from AspectJ 1.1rc1\n\nThis might be logged as a bug already -- find current bugs at\n  http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\nBugs for exceptions thrown have titles File:line from the top stack,\ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nat http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nalready woven: public class TraceAspect\nalready woven: public class TraceAspect\njava.lang.RuntimeException: already woven: public class TraceAspect\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:23\n9)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:76\n)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:321)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:302)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:254)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerat\neClassFiles(AjBuildManager.java:394)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu\nildManager.java:149)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:55)\n        at org.aspectj.tools.ajc.Main.run(Main.java:216)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:155)\n        at org.aspectj.tools.ajc.Main.main(Main.java:72)\n\n\n1 fail|abort\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Now with -noweave \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nF:\\aspectj\\bugs\\1.1\\rc1\\noweave\u003eajc -outjar tracing.jar -noweave TraceAspect.java\nF:\\aspectj\\bugs\\1.1\\rc1\\noweave\u003eajc -outjar test.jar Test.java\nF:\\aspectj\\bugs\\1.1\\rc1\\noweave\u003eajc -injars test.jar;tracing.jar\nF:\\aspectj\\bugs\\1.1\\rc1\\noweave\u003ejava Test\nApr 10, 2003 12:52:26 AM Test main\nINFO: Entering\n\n\n\u003d\u003d\u003d TraceAspect.java \u003d\u003d\u003d\nimport java.util.logging.*;\nimport org.aspectj.lang.*;\n\npublic aspect TraceAspect {\n    private Logger _logger \u003d Logger.getLogger(\"trace\");\n\n    pointcut traceMethods()\n        : execution(* *.*(..)) \u0026\u0026 !within(TraceAspect);\n\n    before() : traceMethods() {\n        Signature sig \u003d thisJoinPointStaticPart.getSignature();\n        _logger.logp(Level.INFO, sig.getDeclaringType().getName(),\n                     sig.getName(), \"Entering\");\n    }\n}\n\n\n\u003d\u003d\u003d Test.java \u003d\u003d\u003d\npublic class Test {\n    public static void main(String[] args) {\n    }\n}",
    "This is correct compiler behavior, but absolutely horrible error handling.  \nThis is being listed as a P3 bug but will hopefully be fixed for 1.1 anyway.\n\nYou should only be able to pass files compiled with -noweave as an input to -\ninjars.  This test is only enforced for code that contains aspects or was \nactually woven into.\n\nThe expected model is to provide aspect libraries using the -aspectpath \noption.  This way you can ensure that the aspect library code will not be \nmodified by any weaving process and the same binary library can be used for \nweaving with multiple targets.  I\u0027d recommend a process such as:\n\najc -outjar tracing.jar TraceAspect.java\najc -aspectpath tracing.jar Test.java\n\n\n",
    "fixed in tree, and test in new/options11\n\nThis now produces a nice error message instead of an exception."
  ],
  "commentCreationDates": [
    "2003-04-10T10:08:55+02:00",
    "2003-04-10T20:08:56+02:00",
    "2003-04-28T00:56:50+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "already woven: public class TraceAspect",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:23 9"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:76 "
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:321"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:302"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:254"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles",
          "source": "AjBuildManager.java:394"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBu ildManager.java:149"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:55"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:216"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:155"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:72"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "36329",
      "date": "2003-04-10T10:08:55+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "36329",
  "bugId": "36329",
  "date": "2003-04-10T10:08:55+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}