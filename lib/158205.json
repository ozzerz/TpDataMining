{
  "comments": [
    "We are using an updated version of Alex Vasseur\u0027s LTW agent for AspectJ (based on AspectWerkz) to do load-time weaving on a 1.4 VM. The agent is loaded from the bootstrap loader. However, a user has reported this NPE (see http://www.glassbox.com/forum/forum/viewthread?thread\u003d67).\n\nAspectWerkz - INFO - Pre-processor org.aspectj.ext.ltw13.ClassPreProcessorAdapter loaded and initialized\n[AppClassLoader@7b7072] warning parse definitions failed -- (NullPointerException) null\nnull\njava.lang.NullPointerException\nat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.parseDefinitions(ClassLoaderWeavingAdaptor.java:180)\nat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:127)\n...\n\nIn this case, the code is assuming that ClassLoader.getSystemClassLoader() is already set, but when the weaver is loaded through the bootstrap loader that appears to not be a good assumption. I propose to avoid this problem by testing for the system loader like this, so as to enable 3rd party agents that might run  before the system loader is set:\n\n            if (loader!\u003dnull \u0026\u0026 loader.equals(ClassLoader.getSystemClassLoader())) {\n\nI will be providing our user a patched version of AspectJ to test with this change to see if it does fix the problem.",
    "Created an attachment (id\u003d50659)\nProposed fix: patch to loadtime module\n\n",
    "Ron,\n\nThanks for the patch. I\u0027d actually like to get rid of the undocumented \"feature\" (\"-Daj5.def\u003d...\") altogether that is only there for testing. It means we don\u0027t test LTW in a representative way which has meant on at least one occasion (Bug 120473 \"Don\u0027t Create Separate Weaving Adaptors for Reflection Loaders\") we have been unable to reproduce problems. Unfortunately both you (http://rbodkin.blogs.com/ron_bodkins_blog/2005/10/websphere_loadt.html) and Alex (http://blogs.codehaus.org/people/avasseur/archives/001140_aspectj_5_load_time_weaving_with_java_13_using_aspectwerkz.html) have referenced it in your blogs even though there is no mention of it in the AspectJ LTW documentation. I trust you do not rely upon it.\n\nI\u0027d also like to add a test to the suite for these JDK 1.4 agents.",
    "I now have a testcase that not only verifies this fix but will also give us an environment to test custom 1.3/1.4 LTW agents in the future. It involves prepending a replacement java.net.URLClassLoader to the bootclasspath which intercepts class defining and calls Aj, appending AspectJ to the bootclasspath, and finally specifying a custom SecurityManger using -Djava.security.manager. This will be loaded and woven _before_ the class loader hierarchy initialization is complete and when ClassLoader.getSystemClassLoader() will return null.",
    "Fix available in aspectj-DEVELOPMENT-20061003103716.jar",
    "iplog"
  ],
  "commentCreationDates": [
    "2006-09-21T21:25:13+02:00",
    "2006-09-21T21:26:22+02:00",
    "2006-09-22T15:15:40+02:00",
    "2006-09-29T16:56:25+02:00",
    "2006-10-03T13:43:28+02:00",
    "2006-11-09T13:38:35+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.parseDefinitions",
          "source": "ClassLoaderWeavingAdaptor.java:180"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize",
          "source": "ClassLoaderWeavingAdaptor.java:127"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "158205",
      "date": "2006-09-21T21:25:13+02:00",
      "product": "AspectJ",
      "component": "LTWeaving",
      "severity": "normal"
    }
  ],
  "groupId": "158205",
  "bugId": "158205",
  "date": "2006-09-21T21:25:13+02:00",
  "product": "AspectJ",
  "component": "LTWeaving",
  "severity": "normal"
}