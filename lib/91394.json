{
  "comments": [
    "build I20050413-0910\n\nLooking through the console output for this build, I saw several occurrences of\nthe following.  If these are deliberately thrown, could you please tag them as\nsuch?  I\u0027m finding the console output to be a rich source of hidden problems\n\u003cg\u003e, and it would be good to be able to easily distinguish the intentional from\nthe not-so-intentional stack dumps.\n\n   [java] !ENTRY org.eclipse.core.filebuffers 4 2 2005-04-13 14:44:50.682\n     [java] !MESSAGE Problems occurred when invoking code from plug-in:\n\"org.eclipse.core.filebuffers\".\n     [java] !STACK 0\n     [java] java.lang.ArithmeticException: / by zero\n     [java] \tat\norg.eclipse.core.filebuffers.tests.FileBufferFunctions$1.bufferCreated(FileBufferFunctions.java:1083)\n     [java] \tat\norg.eclipse.core.internal.filebuffers.TextFileBufferManager$11.run(TextFileBufferManager.java:450)\n     [java] \tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1021)\n     [java] \tat org.eclipse.core.runtime.Platform.run(Platform.java:757)\n     [java] \tat\norg.eclipse.core.internal.filebuffers.TextFileBufferManager.fireBufferCreated(TextFileBufferManager.java:448)\n     [java] \tat\norg.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:98)\n     [java] \tat\norg.eclipse.core.filebuffers.tests.FileBufferFunctions.test19(FileBufferFunctions.java:1094)\n     [java] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n     [java] \tat\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n     [java] \tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n     [java] \tat java.lang.reflect.Method.invoke(Method.java:324)\n     [java] \tat junit.framework.TestCase.runTest(TestCase.java:154)\n     [java] \tat junit.framework.TestCase.runBare(TestCase.java:127)",
    "I\u0027ll trade it for bug 77528 ;-)",
    "Actually, I had already changed that one to display as:\njava.lang.RuntimeException: The workbench should handle hostile pulldown\ndelegates (this is an expected exception from the UI test suite).\n",
    "Yes, but the stack still polutes the .log ;-)\n\nI replaced \"1/0\" by throwing a custom runtime error which does not write a stack\ntrace and explains why it\u0027s in the .log:\n\n!ENTRY org.eclipse.core.filebuffers 4 0 2005-04-14 16:02:12.315\n!MESSAGE TextFileBufferManager failed to notify an ITextFileBufferListener\n!STACK 0\n!FORCED BY TEST: this entry is intentional\n\n",
    "Clever ;-).  Can you paste the code for this exception?\n",
    "class ForcedException extends RuntimeException {\n\tprivate static final long serialVersionUID\u003d 1L;\n\n\tpublic void printStackTrace(PrintStream s) {\n\t\ts.println(\"!FORCED BY TEST: this entry is intentional\");\n\t}\n\t\t\t\n\tpublic void printStackTrace(PrintWriter s) {\n\t\ts.println(\"!FORCED BY TEST: this entry is intentional\");\n\t}\n}\n"
  ],
  "commentCreationDates": [
    "2005-04-14T13:05:03+02:00",
    "2005-04-14T14:21:24+02:00",
    "2005-04-14T15:56:39+02:00",
    "2005-04-14T16:03:20+02:00",
    "2005-04-14T16:10:00+02:00",
    "2005-04-14T16:26:11+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArithmeticException",
      "message": "/ by zero      [java]",
      "elements": [
        {
          "method": "org.eclipse.core.filebuffers.tests.FileBufferFunctions$1.bufferCreated",
          "source": "FileBufferFunctions.java:1083"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "91394",
      "date": "2005-04-14T13:05:03+02:00",
      "product": "Platform",
      "component": "Text",
      "severity": "normal"
    }
  ],
  "groupId": "91394",
  "bugId": "91394",
  "date": "2005-04-14T13:05:03+02:00",
  "product": "Platform",
  "component": "Text",
  "severity": "normal"
}