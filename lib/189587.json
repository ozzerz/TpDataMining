{
  "comments": [
    "Build ID: 3.3M7\n\nSteps To Reproduce:\n1. Open diagram, leave open\n2. Open domain model in tree editor, change diagram root semantic element there, save\n3. Reactivate diagram, Message Box \"Do you want to reload\" --\u003e Yes\n4. Repeat a few times, occasionally you get an IllegalStateException\n5. If diagram is closed then, diagram file becomes broken, as all links to the domain elements are missing their file prefix, e.g., file.dom#id becomes id\n\nThis is especially bad if you have an OpenDiagramBehaviour which modifies the domain file from different diagrams. In this use case the problem appears very frequently.\n\nMore information:\nI debugged the code a bit and it seems to come from an attempt to reload the domain model file. However, in TransactionChangeRecorder the method READ returns false but I guess it should not as unloading and reloading should be considered as read according to the methods description.\n\nThe exception is Caused by: java.lang.IllegalStateException: Cannot modify resource set without a write transaction\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.assertWriting(TransactionChangeRecorder.java:322)\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.appendNotification(TransactionChangeRecorder.java:284)\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.processResourceNotification(TransactionChangeRecorder.java:254)\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.notifyChanged(TransactionChangeRecorder.java:220)\n\tat org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:247)\n\tat org.eclipse.emf.common.notify.impl.NotifyingListImpl.dispatchNotification(NotifyingListImpl.java:267)\n\tat org.eclipse.emf.common.notify.impl.NotifyingListImpl.clear(NotifyingListImpl.java:1094)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.doUnload(ResourceImpl.java:1472)\n\tat org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doUnload(XMLResourceImpl.java:505)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.unload(ResourceImpl.java:1494)\n\tat de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider.handleElementChanged(PalladioComponentModelDocumentProvider.java:661)\n\tat de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider$ResourceSetInfo$SynchronizerDelegate$1.run(PalladioComponentModelDocumentProvider.java:934)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)\n\t... 49 more",
    "The ModelSynchronizer class does not exist in the GMF Runtime.\n\nGoogle does not get me any Eclipse hits either, so you need to reopen on the correct component.",
    "Sorry for being imprecise. As you can see from the last lines in the exception I mean de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider$ResourceSetInfo$SynchronizerDelegate\nwhich is part of the generated GMF code in the ???DocumentProvider class. It is responsible for updating the diagram on external changes to the domain model file",
    "Excaption was caused by the following call: changedResource.unload();\n\nI agree that unloading and reloading should be considered as read-only transaction (am I right BTW?). \n\nRedirecting the problem to emf.transaction component. ",
    "That is correct, unloading a resource and loading it are compatible with a read-only context.  Modifications to the resource contents list (including clearing it, as in doUnload) do not require a read-write transaction when a resource is either in the process of loading or unloading, as determined by the ResourceSetManager.\n\nIt appears that this utility has gotten confused about the state of the resource.  While the unload is still in progress, the ResourceSetManager seems to think that unload has already completed or that the resource is still loaded, because the resource is neither in the loading nor the unloading state (otherwise, the ReadFilter would have accepted the event).\n\nSo, it looks like there is some concurrency happening, here, that is not guarded by read-only transactions (which are recommended for load/unload/save/etc. operations).\n\nSteffen, can you confirm that all of the unloading and re-loading of this resource is performed in read-only transactions?  It doesn\u0027t appear from the stack trace that the PalladioComponentModelDocumentProvider is using a transaction, here, so probably the UI is causing the resource to load while the document provider is still trying to unload it.",
    "I\u0027m sorry, I\u0027m not sure about this. This is the code as generated by GMF M7. I didn\u0027t change it and I still don\u0027t understand enough to provide more insights. Alex should be able to give more detais on generated ???DocumentProvider and its behaviour.\n\nOther than this, can I help trying to figure things out. Maybe some breakpoints, etc. I can add to see whats going on?",
    "Well, I don\u0027t see any implementation of the TransactionalEditingDFomain::runExclusive() method in the stack trace in the original bug description, nor do I see any invocation of a privileged runnable.  So, I suppose that the unload and reload are not happening in a transaction to prevent concurrency.\n\nI think I recall something in another bug about deadlocks in this synchronizer stuff, in which GMF *was* using transactions in this code and running into deadlocks as a result:  bug 174787.  Looks like the \"workaround\" that I suggested of not using a transaction is causing a different problem, now ... we have a rock and a hard place.\n\nDebugging is difficult, of course, because as soon as you set a breakpoint, the race condition is unattainable.  Try changing your document provider\u0027s synchronizer delegate to do the unload/reload sequence in a runExclusive() runnable on the TransactionalEditingDomain.  Perhaps your application will not be susceptible to the multi-resource-save problem described in bug 174787.",
    "(In reply to comment #6)\n\u003e  So, I suppose that the unload and reload are not happening in a transaction to\n\u003e prevent concurrency.\nTo my understanding it\u0027s true with the current state of code generator. BTW, Steffen can you please try to get a full stacktrace for this problem?\n\n\u003e I think I recall something in another bug about deadlocks in this synchronizer\n\u003e stuff, in which GMF *was* using transactions in this code and running into\n\u003e deadlocks as a result:  bug #174787.  Looks like the \"workaround\" that I\nProblem described in Bug #174787 was visible during the save operation called in Editor, so it was necessary to use write transaction there. Currently the workaround described in Bug #174787 used by code generator, so all the (Eclipse) resource change notification should be fired outside of the write transaction.\n\n\u003e Debugging is difficult, of course, because as soon as you set a breakpoint, the\nUnless we set a breakpoints into the both places in a code causing concurrent access to the same resource set and ensure debugger is stopping on both breakpoints in a different threads.\n\n\u003e synchronizer delegate to do the unload/reload sequence in a runExclusive()\n\u003e runnable on the TransactionalEditingDomain.\nShould we modify GMF code generator to use runExclusive() in this situation? Currently I\u0027m executing resource unload/load operation in a UI thread to prevent the rest of the application code (UI) from accessing these objects concurrently. Do you think it\u0027s better to use runExclusive() and execute unload/load inside the \"resource change listener thread\"?",
    "(In reply to comment #7)\n\u003e Problem described in Bug #174787 was visible during the save operation called\n\u003e in Editor, so it was necessary to use write transaction there. Currently the\n\u003e workaround described in Bug #174787 used by code generator, so all the\n\u003e (Eclipse) resource change notification should be fired outside of the write\n\u003e transaction.\n\nWas it a problem of write transaction only?  Would a read-only transaction (runExclusive) not cause the same deadlock?\n\n\n\u003e \u003e Debugging is difficult, of course, because as soon as you set a breakpoint, the\n\u003e Unless we set a breakpoints into the both places in a code causing concurrent\n\u003e access to the same resource set and ensure debugger is stopping on both\n\u003e breakpoints in a different threads.\n\nAnd then step each thread one statement at a time, alternately, to *force* the race condition?  Perhaps, but this assumes that the cause can be found by inspecting the code to put breakpoints in the right place, so debugging would then only confirm what is already guessed?  Let\u0027s see what Steffen finds.  :-)\n\n\n\u003e Should we modify GMF code generator to use runExclusive() in this situation?\n\u003e Currently I\u0027m executing resource unload/load operation in a UI thread to\n\u003e prevent the rest of the application code (UI) from accessing these objects\n\u003e concurrently. Do you think it\u0027s better to use runExclusive() and execute\n\u003e unload/load inside the \"resource change listener thread\"?\n\nAh, right.  At the bottom of the stack is the display thread running async messages.  That seems to preclude the possibility of a concurrent access to these resources, as GMF mostly uses the display thread already.  Unless, of course, there is some other background thread at play ... I don\u0027t know of any that a GMF application would employ.\n\nWould runExclusive() not get GMF back into the same deadlock scenario, again?\n\nI will need more information from Steffen\u0027s debugging to understand what is happening, or some reproduceable scenario that I can debug in code that is available to me, because now it appears that we don\u0027t have a concurrency problem because everything is happening on the UI thread.  I don\u0027t see, either, how it could be that there would be recursive running of async runnables, either (which is usually caused by starting transactions on the UI thread, which is already established not be happening in the synchronizer delegate).",
    "I hadn\u0027t had time to do any debugging yet - but I\u0027m still after it. Would it help to use our code? We have a update site up and running containing the source builds of our editors...",
    "Current GMF RC3 code behaves a little bit different. If you execute my reproducing steps, the dialog box asking \"Reload...?\" is not appearing. However, it the reload is done nevertheless. But as soon as you repeat the steps once, diagram model gets out of sync and diagram file becomes corrupted if saved. This should not happen :-( \nHowever, if I modify diagram first (but dont save), then modify model and save it, then return to diagram, dialog box comes up, asking whether to reload. When answering yes, the exception is there again. This time I copied the complete stack trace, hope this helps you to see something:\n\njava.lang.IllegalStateException: Cannot modify resource set without a write transaction\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.assertWriting(TransactionChangeRecorder.java:322)\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.appendNotification(TransactionChangeRecorder.java:284)\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.processResourceNotification(TransactionChangeRecorder.java:254)\n\tat org.eclipse.emf.transaction.impl.TransactionChangeRecorder.notifyChanged(TransactionChangeRecorder.java:220)\n\tat org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:247)\n\tat org.eclipse.emf.common.notify.impl.NotifyingListImpl.dispatchNotification(NotifyingListImpl.java:267)\n\tat org.eclipse.emf.common.notify.impl.NotifyingListImpl.clear(NotifyingListImpl.java:1096)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.doUnload(ResourceImpl.java:1472)\n\tat org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doUnload(XMLResourceImpl.java:505)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.unload(ResourceImpl.java:1494)\n\tat de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider.handleElementChanged(PalladioComponentModelDocumentProvider.java:733)\n\tat de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider.doSynchronize(PalladioComponentModelDocumentProvider.java:580)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider$1SynchronizeOperation.execute(AbstractDocumentProvider.java:983)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider$DocumentProviderOperation.run(AbstractDocumentProvider.java:66)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider.executeOperation(AbstractDocumentProvider.java:530)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider.synchronize(AbstractDocumentProvider.java:991)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor.handleEditorInputChanged(DiagramDocumentEditor.java:568)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor.sanityCheckState(DiagramDocumentEditor.java:692)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor.safelySanityCheckState(DiagramDocumentEditor.java:674)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor$ActivationListener.handleActivation(DiagramDocumentEditor.java:1135)\n\tat org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor$ActivationListener.partActivated(DiagramDocumentEditor.java:1094)\n\tat org.eclipse.ui.internal.PartListenerList$1.run(PartListenerList.java:72)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:857)\n\tat org.eclipse.ui.internal.PartListenerList.fireEvent(PartListenerList.java:57)\n\tat org.eclipse.ui.internal.PartListenerList.firePartActivated(PartListenerList.java:70)\n\tat org.eclipse.ui.internal.PartService.firePartActivated(PartService.java:73)\n\tat org.eclipse.ui.internal.PartService.setActivePart(PartService.java:171)\n\tat org.eclipse.ui.internal.WWinPartService.updateActivePart(WWinPartService.java:124)\n\tat org.eclipse.ui.internal.WWinPartService.access$0(WWinPartService.java:115)\n\tat org.eclipse.ui.internal.WWinPartService$1.partDeactivated(WWinPartService.java:48)\n\tat org.eclipse.ui.internal.PartListenerList2$4.run(PartListenerList2.java:113)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:857)\n\tat org.eclipse.ui.internal.PartListenerList2.fireEvent(PartListenerList2.java:53)\n\tat org.eclipse.ui.internal.PartListenerList2.firePartDeactivated(PartListenerList2.java:111)\n\tat org.eclipse.ui.internal.PartService.firePartDeactivated(PartService.java:116)\n\tat org.eclipse.ui.internal.PartService.setActivePart(PartService.java:165)\n\tat org.eclipse.ui.internal.WorkbenchPagePartList.fireActivePartChanged(WorkbenchPagePartList.java:56)\n\tat org.eclipse.ui.internal.PartList.setActivePart(PartList.java:126)\n\tat org.eclipse.ui.internal.WorkbenchPage.setActivePart(WorkbenchPage.java:3384)\n\tat org.eclipse.ui.internal.WorkbenchPage.requestActivation(WorkbenchPage.java:2928)\n\tat org.eclipse.ui.internal.PartPane.requestActivation(PartPane.java:265)\n\tat org.eclipse.ui.internal.EditorPane.requestActivation(EditorPane.java:98)\n\tat org.eclipse.ui.internal.PartPane.setFocus(PartPane.java:311)\n\tat org.eclipse.ui.internal.EditorPane.setFocus(EditorPane.java:127)\n\tat org.eclipse.ui.internal.PartStack.presentationSelectionChanged(PartStack.java:846)\n\tat org.eclipse.ui.internal.PartStack.access$1(PartStack.java:829)\n\tat org.eclipse.ui.internal.PartStack$1.selectPart(PartStack.java:139)\n\tat org.eclipse.ui.internal.presentations.util.TabbedStackPresentation$1.handleEvent(TabbedStackPresentation.java:131)\n\tat org.eclipse.ui.internal.presentations.util.AbstractTabFolder.fireEvent(AbstractTabFolder.java:267)\n\tat org.eclipse.ui.internal.presentations.util.AbstractTabFolder.fireEvent(AbstractTabFolder.java:276)\n\tat org.eclipse.ui.internal.presentations.defaultpresentation.DefaultTabFolder.access$1(DefaultTabFolder.java:1)\n\tat org.eclipse.ui.internal.presentations.defaultpresentation.DefaultTabFolder$2.handleEvent(DefaultTabFolder.java:84)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:938)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:962)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:947)\n\tat org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:706)\n\tat org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3227)\n\tat org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:2005)\n\tat org.eclipse.swt.custom.CTabFolder$1.handleEvent(CTabFolder.java:316)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:938)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3682)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3293)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2389)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2353)\n\tat org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2219)\n\tat org.eclipse.ui.internal.Workbench$4.run(Workbench.java:466)\n\tat org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:289)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:461)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n\tat org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:106)\n\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:153)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:504)\n\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:443)\n\tat org.eclipse.equinox.launcher.Main.run(Main.java:1169)\n\tat org.eclipse.equinox.launcher.Main.main(Main.java:1144)\n",
    "(In reply to comment #8)\n\u003e Was it a problem of write transaction only?  Would a read-only transaction\n\u003e (runExclusive) not cause the same deadlock?\nDo not completely understand you. Let\u0027s move discussion concerning bug #174787 into bug #174787 entry. :-)\n\n\u003e race condition?  Perhaps, but this assumes that the cause can be found by\n\u003e inspecting the code to put breakpoints in the right place, so debugging would\n\u003e then only confirm what is already guessed?  Let\u0027s see what Steffen finds.  :-)\nThis was exact proposal. ;-) Sure, not so friendly for Steffen.. \n\n\u003e these resources, as GMF mostly uses the display thread already.  Unless, of\n\u003e course, there is some other background thread at play ... I don\u0027t know of any\nAgree!\n\n\u003e Would runExclusive() not get GMF back into the same deadlock scenario, again?\nI do not think so - we have a workaround for this deadlock in current source base, so it should work in this situation, but we should check it.\n\nBTW, second stack trace is a little bit different, but the reason could be similar - resource.unload called in the UI thread there as well.",
    "I\u0027m having no luck reproducing this problem using the Ecore Diagram editor from the GMF SDK 2.0 final version and EMF Transaction 1.1.1 (latest maintenance build).  I am making changes to an Ecore model in the tree editor while my the diagram is open, and it has no trouble refreshing either with or without prompting (according to the dirty state) and I see no problems in the log.\n\nAre you still seeing this problem?  What about trying the latest maintenance builds?  I\u0027ll need a reproducible scenario that I can debug to proceed any further.",
    "I havn\u0027t had time to follow up on this bug as the PhD project for which we needed the stable editors has been finished meanwhile. However, when I have a few moments off I can try if it still happens with the maintance release as it was easy to reproduce with our editors.",
    "Hi, Steffen,\n\nHave you had a chance to resume investigation of this problem?  If not, would you be able to share your editor with me (confidentially, of course)?  Otherwise, I think I\u0027ll have to resolve this bug as works-for-me.\n\nThanks",
    "Yes, sure. The editors are publicly available at our project\u0027s web site available at http://sdqweb.ipd.uka.de/wiki/Palladio_Component_Model. You\u0027ll find an update site and install instructions there. Once installed, the bug happens with the Repository and SEFF Editors available from the standard GMF / EMF Menus, Wizards and Context Menu Entries. Pls, contact me if you need help...",
    "Thanks, Steffen!  I\u0027ll raise the priority to remind myself to try debugging it as soon as I get a chance.  You mention \"Repository.\"  Are there any unusual dependencies that I will need, such as JCR?",
    "No, Repository is a top level concept in our meta-model to store components in - which we are modelling. All dependencies are listed on the installation website but they are not difficult to obtain. Only openArchitectureWare is not in Eclipse Europa but as it is only needed for the transformations and not the editors, the editor feature should be installable without it. There are also example repository model instances provided on the website.",
    "After debugging the Palladio Repository Diagram Editor, this looks like a bug in in the editor.\n\nWhat is happening is this:\n\n1. Make change to Repository element in the EMF tree editor and save.\n2. Repository diagram editor\u0027s workspace synchronizer detects\n   the file change.\n3. PCM document provider\u0027s handleElementChanged() method unloads the\n   repository resource.\n4. XMIResourceImpl sets its state to unloaded but does not yet\n   notify.\n5. XMIResourceImpl clears its contents.\n    -\u003e editing domain detects this and records resource\u0027s state\n       as \"unloading\"\n6. XMIResourceImpl, as a next-to-last step, clears the adapters\n   of all unloaded objects.\n7. One of these adapters being removed is the SignatureEditPart.\n   In responding to being removed from an object, it resolves a\n   proxy, which loads the resource *that we are currently unloading*.\n     -\u003e editing domain detects this and records resource\u0027s state\n       as \"loaded\"\n8. The last step of unloading an XMIResourceImpl is to fire the\n   notification of state change to \"unloaded.\"\n     -\u003e editing domain detects this and records resource\u0027s state\n       as \"unloaded\"\n9. Now, we have a resource that the domain thinks is unloaded but\n   actually is, so stuff goes haywire.\n\nThis is a bug in the diagram editor (it should have been deactivated before the resource is unloaded, or at least its edit parts should not cause re-load while loading).  However, I think the TransactionalEditingDomain should be more robust and double-check when it gets the resource-unloaded Notification that the resource is not actually loaded again.\n\nYour thoughts, Steffen, Alex?",
    "I\u0027m afraid that I broke the editor then. I switch from the generated getLabelText to a \"generated not\" implementation:\n\n[...]\nString text \u003d \"\";\nif (resolveSemanticElement() instanceof Signature) {\n   Signature sig \u003d (Signature) resolveSemanticElement();\n   text \u003d new SignaturePrinter().doSwitch(sig);\n[...]\n\nI had to do so, as the generated getLabelText() was unable to format the signature similar to a UML Class diagram as this requires navigation over several associated objects. The resolveSemanticElement() call most likely loads the resource again then and breaks things. Additionally, I also altered the handle notification method to update the label on changes on the semantic element or its children. So, most likely, I\u0027m getting the unload notification, on which I trigger the label update, and by this I\u0027m loading the resource again. Thanks for debugging, I would never have found some interaction like this as cause for the problem. \n\nHowever, I also agree, that the editing domain should double-check to increase robustness and not cause strange execptions like the one I got here.\n\nFor the label fix, I might wait for a GMF feature request I\u0027m voting for, which asks for labels which display data from associated elements as well.\n",
    "Created an attachment (id\u003d84442)\nPatch for ResourceSetManager\n\nHi, Steffen,\n\nI have attached a patch for the R1_1_maintenance branch of EMF Transaction component that, as far as I can tell, resolves the problem in your editor.\nIf you can just try it out and let me know whether it works for you, I\u0027d appreciate that very much.  I\u0027ll be ready to commit it as soon as I hear from you.\n\nThanks!",
    "Hi Christian,\n\nI tried to trigger the Exception after applying the patch to the CVS Branch  \"root_R1_1_maintenance\". After 10 times of altering the model in the EMF Editor and checking in the GMF Editor, I could not get any exception. Then I tried the main use case which originally triggered the issue. Opening a GMF Repository editor and opening GMF SEFF editors by double clicking on SEFFs in the Repository (the labels inside component figures). In this use case, all editors work on the same model file. And it worked. I had several editors open, all kept responding and no exception came up (Test duration ~5 Minutes). \n\nI would conclude that this patch fixed the issue.",
    "Committed the patch to R1_1_maintenance (1.1.2 release) and HEAD (1.2 release) branches.\n\nI also added a JUnit test mimicking the editor\u0027s scenario, in which an Adapter triggers proxy resolution that re-loads a resource during unload.  The test then checks that a second attempt to unload succeeds.\n\nIn the HEAD branch only, the ResourceSetManager logs a warning when it detects that a resource was re-loaded during unload.",
    "Fixed in the EMF TRANSACTION 1.1.2 M200712061336 build.\nFixed in the EMF TRANSACTION 1.2.0 I200712061318 build."
  ],
  "commentCreationDates": [
    "2007-05-29T07:33:07+02:00",
    "2007-06-19T21:20:57+02:00",
    "2007-06-19T21:44:44+02:00",
    "2007-06-25T13:06:58+02:00",
    "2007-06-25T20:05:45+02:00",
    "2007-06-25T23:18:50+02:00",
    "2007-06-25T23:40:31+02:00",
    "2007-06-26T11:28:37+02:00",
    "2007-06-26T15:30:20+02:00",
    "2007-06-26T18:29:32+02:00",
    "2007-06-26T22:40:38+02:00",
    "2007-06-27T12:39:43+02:00",
    "2007-09-20T17:44:56+02:00",
    "2007-09-26T11:24:01+02:00",
    "2007-12-02T06:48:10+01:00",
    "2007-12-02T08:37:11+01:00",
    "2007-12-03T12:49:22+01:00",
    "2007-12-03T16:19:24+01:00",
    "2007-12-04T18:01:13+01:00",
    "2007-12-04T18:22:35+01:00",
    "2007-12-04T18:33:36+01:00",
    "2007-12-04T20:50:45+01:00",
    "2007-12-04T23:09:19+01:00",
    "2007-12-06T18:58:29+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Cannot modify resource set without a write transaction",
      "elements": [
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.assertWriting",
          "source": "TransactionChangeRecorder.java:322"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.appendNotification",
          "source": "TransactionChangeRecorder.java:284"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.processResourceNotification",
          "source": "TransactionChangeRecorder.java:254"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.notifyChanged",
          "source": "TransactionChangeRecorder.java:220"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify",
          "source": "BasicNotifierImpl.java:247"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.NotifyingListImpl.dispatchNotification",
          "source": "NotifyingListImpl.java:267"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.NotifyingListImpl.clear",
          "source": "NotifyingListImpl.java:1094"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.doUnload",
          "source": "ResourceImpl.java:1472"
        },
        {
          "method": "org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doUnload",
          "source": "XMLResourceImpl.java:505"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.unload",
          "source": "ResourceImpl.java:1494"
        },
        {
          "method": "de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider.handleElementChanged",
          "source": "PalladioComponentModelDocumentProvider.java:661"
        },
        {
          "method": "de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider$ResourceSetInfo$SynchronizerDelegate$1.run",
          "source": "PalladioComponentModelDocumentProvider.java:934"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:123"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "189587",
      "date": "2007-05-29T07:33:07+02:00",
      "product": "EMF",
      "component": "Transaction",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Cannot modify resource set without a write transaction",
      "elements": [
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.assertWriting",
          "source": "TransactionChangeRecorder.java:322"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.appendNotification",
          "source": "TransactionChangeRecorder.java:284"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.processResourceNotification",
          "source": "TransactionChangeRecorder.java:254"
        },
        {
          "method": "org.eclipse.emf.transaction.impl.TransactionChangeRecorder.notifyChanged",
          "source": "TransactionChangeRecorder.java:220"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify",
          "source": "BasicNotifierImpl.java:247"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.NotifyingListImpl.dispatchNotification",
          "source": "NotifyingListImpl.java:267"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.NotifyingListImpl.clear",
          "source": "NotifyingListImpl.java:1096"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.doUnload",
          "source": "ResourceImpl.java:1472"
        },
        {
          "method": "org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doUnload",
          "source": "XMLResourceImpl.java:505"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.unload",
          "source": "ResourceImpl.java:1494"
        },
        {
          "method": "de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider.handleElementChanged",
          "source": "PalladioComponentModelDocumentProvider.java:733"
        },
        {
          "method": "de.uka.ipd.sdq.pcm.gmf.repository.part.PalladioComponentModelDocumentProvider.doSynchronize",
          "source": "PalladioComponentModelDocumentProvider.java:580"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider$1SynchronizeOperation.execute",
          "source": "AbstractDocumentProvider.java:983"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider$DocumentProviderOperation.run",
          "source": "AbstractDocumentProvider.java:66"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider.executeOperation",
          "source": "AbstractDocumentProvider.java:530"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider.synchronize",
          "source": "AbstractDocumentProvider.java:991"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor.handleEditorInputChanged",
          "source": "DiagramDocumentEditor.java:568"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor.sanityCheckState",
          "source": "DiagramDocumentEditor.java:692"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor.safelySanityCheckState",
          "source": "DiagramDocumentEditor.java:674"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor$ActivationListener.handleActivation",
          "source": "DiagramDocumentEditor.java:1135"
        },
        {
          "method": "org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor$ActivationListener.partActivated",
          "source": "DiagramDocumentEditor.java:1094"
        },
        {
          "method": "org.eclipse.ui.internal.PartListenerList$1.run",
          "source": "PartListenerList.java:72"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:857"
        },
        {
          "method": "org.eclipse.ui.internal.PartListenerList.fireEvent",
          "source": "PartListenerList.java:57"
        },
        {
          "method": "org.eclipse.ui.internal.PartListenerList.firePartActivated",
          "source": "PartListenerList.java:70"
        },
        {
          "method": "org.eclipse.ui.internal.PartService.firePartActivated",
          "source": "PartService.java:73"
        },
        {
          "method": "org.eclipse.ui.internal.PartService.setActivePart",
          "source": "PartService.java:171"
        },
        {
          "method": "org.eclipse.ui.internal.WWinPartService.updateActivePart",
          "source": "WWinPartService.java:124"
        },
        {
          "method": "org.eclipse.ui.internal.WWinPartService.access$0",
          "source": "WWinPartService.java:115"
        },
        {
          "method": "org.eclipse.ui.internal.WWinPartService$1.partDeactivated",
          "source": "WWinPartService.java:48"
        },
        {
          "method": "org.eclipse.ui.internal.PartListenerList2$4.run",
          "source": "PartListenerList2.java:113"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:857"
        },
        {
          "method": "org.eclipse.ui.internal.PartListenerList2.fireEvent",
          "source": "PartListenerList2.java:53"
        },
        {
          "method": "org.eclipse.ui.internal.PartListenerList2.firePartDeactivated",
          "source": "PartListenerList2.java:111"
        },
        {
          "method": "org.eclipse.ui.internal.PartService.firePartDeactivated",
          "source": "PartService.java:116"
        },
        {
          "method": "org.eclipse.ui.internal.PartService.setActivePart",
          "source": "PartService.java:165"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPagePartList.fireActivePartChanged",
          "source": "WorkbenchPagePartList.java:56"
        },
        {
          "method": "org.eclipse.ui.internal.PartList.setActivePart",
          "source": "PartList.java:126"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.setActivePart",
          "source": "WorkbenchPage.java:3384"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.requestActivation",
          "source": "WorkbenchPage.java:2928"
        },
        {
          "method": "org.eclipse.ui.internal.PartPane.requestActivation",
          "source": "PartPane.java:265"
        },
        {
          "method": "org.eclipse.ui.internal.EditorPane.requestActivation",
          "source": "EditorPane.java:98"
        },
        {
          "method": "org.eclipse.ui.internal.PartPane.setFocus",
          "source": "PartPane.java:311"
        },
        {
          "method": "org.eclipse.ui.internal.EditorPane.setFocus",
          "source": "EditorPane.java:127"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack.presentationSelectionChanged",
          "source": "PartStack.java:846"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack.access$1",
          "source": "PartStack.java:829"
        },
        {
          "method": "org.eclipse.ui.internal.PartStack$1.selectPart",
          "source": "PartStack.java:139"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.TabbedStackPresentation$1.handleEvent",
          "source": "TabbedStackPresentation.java:131"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.AbstractTabFolder.fireEvent",
          "source": "AbstractTabFolder.java:267"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.util.AbstractTabFolder.fireEvent",
          "source": "AbstractTabFolder.java:276"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.defaultpresentation.DefaultTabFolder.access$1",
          "source": "DefaultTabFolder.java:1"
        },
        {
          "method": "org.eclipse.ui.internal.presentations.defaultpresentation.DefaultTabFolder$2.handleEvent",
          "source": "DefaultTabFolder.java:84"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:938"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:962"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:947"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.notifyListeners",
          "source": "Widget.java:706"
        },
        {
          "method": "org.eclipse.swt.custom.CTabFolder.setSelection",
          "source": "CTabFolder.java:3227"
        },
        {
          "method": "org.eclipse.swt.custom.CTabFolder.onMouse",
          "source": "CTabFolder.java:2005"
        },
        {
          "method": "org.eclipse.swt.custom.CTabFolder$1.handleEvent",
          "source": "CTabFolder.java:316"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:938"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3682"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3293"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:2389"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:2353"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.access$4",
          "source": "Workbench.java:2219"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench$4.run",
          "source": "Workbench.java:466"
        },
        {
          "method": "org.eclipse.core.databinding.observable.Realm.runWithDefault",
          "source": "Realm.java:289"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:461"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.application.IDEApplication.start",
          "source": "IDEApplication.java:106"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppHandle.run",
          "source": "EclipseAppHandle.java:153"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:106"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:76"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:363"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:176"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.invokeFramework",
          "source": "Main.java:504"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.basicRun",
          "source": "Main.java:443"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.run",
          "source": "Main.java:1169"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.main",
          "source": "Main.java:1144"
        }
      ],
      "number": 1,
      "commentIndex": 10,
      "bugId": "189587",
      "date": "2007-06-26T22:40:38+02:00",
      "product": "EMF",
      "component": "Transaction",
      "severity": "normal"
    }
  ],
  "groupId": "189587",
  "bugId": "189587",
  "date": "2007-05-29T07:33:07+02:00",
  "product": "EMF",
  "component": "Transaction",
  "severity": "normal"
}