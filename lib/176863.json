{
  "comments": [
    "Build ID: 20070304\n\nSteps To Reproduce:\nAdd the attached file to a C/C++ project and await indexing.\n\nMore information:\nException in thread \"org.eclipse.cdt.internal.ui.text.CReconciler\" java.lang.StackOverflowError\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics$LookupData.typesOnly(CPPSemantics.java:197)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics$LookupData.\u003cinit\u003e(CPPSemantics.java:173)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.createLookupData(CPPSemantics.java:767)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveBinding(CPPSemantics.java:615)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.resolveBinding(CPPVisitor.java:945)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.getExpressionType(CPPVisitor.java:1667)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.getExpressionType(CPPVisitor.java:1818)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.createType(CPPVisitor.java:1513)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPTemplates.createTypeArray(CPPTemplates.java:918)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPTemplates.selectTemplateFunctions(CPPTemplates.java:945)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities(CPPSemantics.java:2056)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities(CPPSemantics.java:1850)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBindingInAST(CPPScope.java:138)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBinding(CPPScope.java:97)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.lookup(CPPSemantics.java:1019)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.getPossibleFunctions(CPPSemantics.java:2659)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.getTargetType(CPPSemantics.java:2574)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveTargetedFunction(CPPSemantics.java:2478)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveFunction(CPPSemantics.java:2261)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities(CPPSemantics.java:2078)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities(CPPSemantics.java:1850)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBindingInAST(CPPScope.java:138)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBinding(CPPScope.java:97)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPClassScope.getBinding(CPPClassScope.java:241)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.lookup(CPPSemantics.java:1019)\n\tat org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveBinding(CPPSemantics.java:619)\n\n... /// snip /// ...",
    "Created an attachment (id\u003d60489)\nreproducible C++ file\n\n",
    "I have a look.",
    "The code contains an ambigous template instanciation. With the fix a problem binding is generated.",
    "Markus, thanks.  I haven\u0027t yet seen the commits for this (the CVS page on CDT is usually several hours behind).  Would it be possible to attach patches to bugs we report (or corrections for the patches we provide)?  It would make it easier for us to merge things into our M5 base in a more timely and reliable manner.\n\n",
    "So, the stack overflow is gone with yesterday\u0027s commits for this bug, but the for_each and void_mem_func methods in the example (and in the original source) end up with problem bindings, indicating the template resolution still failed.  Is that a known defect in CDT\u0027s current template resolution support?  I know it\u0027s a complex example...\n\n",
    "(In reply to comment #5)\n\u003e So, the stack overflow is gone with yesterday\u0027s commits for this bug, but the\n\u003e for_each and void_mem_func methods in the example (and in the original source)\n\u003e end up with problem bindings, indicating the template resolution still failed. \n\u003e Is that a known defect in CDT\u0027s current template resolution support?  I know\n\u003e it\u0027s a complex example...\n\nBesides the fact that templates are not part of the index, the problem binding \nin this case will not go away, because the code does not compile. The binding is ambigous.\n",
    "Created an attachment (id\u003d60691)\ncompilable source\n\nYes of course, you\u0027re right.  I made some errors transcribing the original code.  But the fixed version does indeed compile in C++ (the language is very complex and the ambiguity is resolved by looking at the types allowed by the union of the template arguments and all the substitution points).  \n\nSo under CDT I can get \u0027for_each\u0027 to resolve now, but not \u0027void_mem_func\u0027.  \n\nAgain, I\u0027m not implying this is a new bug caused by your fix -- I\u0027m just not clear how extensive or correct CDT\u0027s template resolution is supposed to be (the stack trace seems to show some attempt to handle them).  If you\u0027re saying that the lack of template info in the index is responsible, then that\u0027s fine.\n\n",
    "(In reply to comment #7)\n\u003e Created an attachment (id\u003d60691) [details]\n\u003e compilable source\n\u003e Yes of course, you\u0027re right.  I made some errors transcribing the original\n\u003e code.  But the fixed version does indeed compile in C++ (the language is very\n\u003e complex and the ambiguity is resolved by looking at the types allowed by the\n\u003e union of the template arguments and all the substitution points).  \n\u003e So under CDT I can get \u0027for_each\u0027 to resolve now, but not \u0027void_mem_func\u0027.  \n\u003e Again, I\u0027m not implying this is a new bug caused by your fix -- I\u0027m just not\n\u003e clear how extensive or correct CDT\u0027s template resolution is supposed to be (the\n\u003e stack trace seems to show some attempt to handle them).  If you\u0027re saying that\n\u003e the lack of template info in the index is responsible, then that\u0027s fine.\n\nThe source still does not compile (using g++) and I can see why, what compiler\nare you using?\n",
    "I\u0027m using Nokia\u0027s x86 compiler (using the Codewarrior 3.2 frontend).  Hmm, seems like gcc 3.3 and MSVC 7.0 complain, as you described.  Seems like CW doesn\u0027t notice the problem unless I pull test() out to the top level.  \n\nAgain, I adapted the source from the original internal source for this report, so I probably messed it up somewhere.  Anyway, the stack overflow while parsing is gone, so I\u0027m happy.  If our customers complain about the template resolution specifically, I\u0027ll raise a separate bug.  Thanks!\n"
  ],
  "commentCreationDates": [
    "2007-03-09T20:15:16+01:00",
    "2007-03-09T20:16:01+01:00",
    "2007-03-12T13:04:35+01:00",
    "2007-03-12T14:47:53+01:00",
    "2007-03-12T15:14:00+01:00",
    "2007-03-13T13:52:03+01:00",
    "2007-03-13T17:34:36+01:00",
    "2007-03-13T17:58:45+01:00",
    "2007-03-13T18:31:39+01:00",
    "2007-03-13T19:37:33+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StackOverflowError",
      "elements": [
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics$LookupData.typesOnly",
          "source": "CPPSemantics.java:197"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics$LookupData.\u003cinit\u003e",
          "source": "CPPSemantics.java:173"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.createLookupData",
          "source": "CPPSemantics.java:767"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveBinding",
          "source": "CPPSemantics.java:615"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.resolveBinding",
          "source": "CPPVisitor.java:945"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.getExpressionType",
          "source": "CPPVisitor.java:1667"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.getExpressionType",
          "source": "CPPVisitor.java:1818"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPVisitor.createType",
          "source": "CPPVisitor.java:1513"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPTemplates.createTypeArray",
          "source": "CPPTemplates.java:918"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPTemplates.selectTemplateFunctions",
          "source": "CPPTemplates.java:945"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities",
          "source": "CPPSemantics.java:2056"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities",
          "source": "CPPSemantics.java:1850"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBindingInAST",
          "source": "CPPScope.java:138"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBinding",
          "source": "CPPScope.java:97"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.lookup",
          "source": "CPPSemantics.java:1019"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.getPossibleFunctions",
          "source": "CPPSemantics.java:2659"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.getTargetType",
          "source": "CPPSemantics.java:2574"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveTargetedFunction",
          "source": "CPPSemantics.java:2478"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveFunction",
          "source": "CPPSemantics.java:2261"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities",
          "source": "CPPSemantics.java:2078"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveAmbiguities",
          "source": "CPPSemantics.java:1850"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBindingInAST",
          "source": "CPPScope.java:138"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPScope.getBinding",
          "source": "CPPScope.java:97"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPClassScope.getBinding",
          "source": "CPPClassScope.java:241"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.lookup",
          "source": "CPPSemantics.java:1019"
        },
        {
          "method": "org.eclipse.cdt.internal.core.dom.parser.cpp.CPPSemantics.resolveBinding",
          "source": "CPPSemantics.java:619"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "176863",
      "date": "2007-03-09T20:15:16+01:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "normal"
    }
  ],
  "groupId": "176863",
  "bugId": "176863",
  "date": "2007-03-09T20:15:16+01:00",
  "product": "CDT",
  "component": "cdt-core",
  "severity": "normal"
}