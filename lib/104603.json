{
  "comments": [
    "This problem may only occur when Aspect/J tries to do a weaveAroundInline() on \nan instruction list that includes a Select.  Our usage of Aspect/J only rarely \ncauses it to use weaveAroundInline(), so I don\u0027t have any other cases for \ncomparison.\n\nIn ShadowRange:extractInstructionsInto(), my instruction list includes a \nSelect.  Each of the targets of the Select has a list of targetters that \nincludes what appears to be a Select from some other instantiation of the \ninstruction list, in addition to the local Select.  The updateTarget() call on \nthe bogus Select targetter causes the ClassGenException (stack trace attached \nbelow).\n\nMy clumsy band-aid (also attached below) is to clean the bad state from the \nSelect targets at the top of extractInstructionsInto().  However, I presume \nthat the real fix needs to be done at the point the bad state was introduced \ninto the instruction list.\n\nI noticed that a possibly similar problem was reported awhile back, but \napparently not in a reliably reproducible way.  From browsing through the top \nof the CVS tree, it appears that the weaver/bcel directory hasn\u0027t changed \ndrastically since 1.2, so I assume that this problem may still be lurking \nthere.\n\nHere\u0027s the stack trace:\n\nAspectJInstrumenter:weaveClass,org.apache.bcel.generic.ClassGenException: Not\ntargeting   36: aload_0[42](1)\nAspectJInstrumenter:weaveClass,\tat\norg.apache.bcel.generic.Select.updateTarget(Select.java:213)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.ShadowRange.extractInstructionsInto\n(ShadowRange.java:138)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelShadow.extractMethod(BcelShadow.java:2002)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:1436)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:151)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.Shadow.implementMungers(Shadow.java:353)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.Shadow.implement(Shadow.java:325)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1161)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:367)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:80)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:689)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:615)\nAspectJInstrumenter:weaveClass,\tat\norg.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563)\nAspectJInstrumenter:weaveClass,\tat\ncom.acsera.javaagent.AspectJWeavingAdaptor.getWovenBytes\n(AspectJWeavingAdaptor.java:244)\nAspectJInstrumenter:weaveClass,\tat\ncom.acsera.javaagent.AspectJWeavingAdaptor.weaveClass\n(AspectJWeavingAdaptor.java:210)\n\nAnd here\u0027s the patch:\n\nvoid extractInstructionsInto(LazyMethodGen freshMethod, IntMap remap, boolean \naddReturn) {\n\t// XXX Darren\n\t\t// Find all the Select instructions in this list, and all of \ntheir targets.\n\t\t// Run through the targets and remove any Select targeters \nthat aren\u0027t from this list.\n\n\t\tjava.util.Set selectSet \u003d new java.util.HashSet();\n\t\tjava.util.Set targetSet \u003d new java.util.HashSet();\n\t\tfor ( InstructionHandle ih \u003d start.getNext(); ih !\u003d end; ih \u003d \nih.getNext() ) {\n\t\t\tInstruction ii \u003d ih.getInstruction();\n\t\t\tif ( ii instanceof Select ) {\n\t\t\t\tSelect si \u003d (Select) ii;\n\t\t\t\tselectSet.add( si );\n\t\t\t\ttargetSet.add( si.getTarget() );\n\t\t\t\tInstructionHandle[] targets \u003d si.getTargets();\n\t\t\t\tfor ( int k \u003d 0; k \u003c targets.length; k++ ) {\n\t\t\t\t\ttargetSet.add( targets[ k ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tjava.util.Iterator it \u003d targetSet.iterator();\n\t\twhile ( it.hasNext() ) {\n\t\t\tInstructionHandle ih \u003d (InstructionHandle) it.next();\n\t\t\tInstructionTargeter[] its \u003d ih.getTargeters();\n\t\t\tif ( its \u003d\u003d null ) {\n\t\t\t\tcontinue;\t// XXX internal consistency \nerror?\n\t\t\t}\n\t\t\tfor ( int k \u003d 0; k \u003c its.length; k++ ) {\n\t\t\t\tif ( its[k] instanceof Select ) {\n\t\t\t\t\tSelect si \u003d (Select) its[k];\n\t\t\t\t\tif ( ! selectSet.contains( si ) ) {\n\t\t\t\t\t\t// XXX System.out.println\n( \"ShadowRange:extractInstructionsInto: bogus Select \" + si.toString() + \" \" + \nsi.hashCode() );\n\t\t\t\t\t\tih.removeTargeter( si );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// XXX Darren",
    "for M4 investigation",
    "Is there any way you can supply a program that exhibits the incorrect behaviour\nwhen weaving?  I\u0027m trying to hack some up myself but can\u0027t get it to fail.  I\ndid change some Select related stuff recently in BCEL for another bug - I\u0027ve no\nidea if it will affect this situation though.  I\u0027d like to have a test program\nbefore making a change like this.\n\nIf you can\u0027t supply the program, can you  at least tell me the pointcut/advice\ndeclaration involved? so I can continue trying to recreate.  thanks.",
    "We\u0027d like to fix this for 1.5.0 - but don\u0027t want to make a change without being able to reproduce first.\n\nDo you have a test program that reproduces this we you could append please? \nThanks.",
    "Hmmm - as I re-read this bug this morning, I remember something in my murky past\nwhere I fixed something possibly related.  Given that this was raised against\n1.2, take a look at bug 104720 - that was a problem in bcel to do with\nextracting instructions containing a select.  The problem there did manifest at\nruntime, rather than compile time as discussed in this bug, but it looks a\nsimilar problem to do with the targets getting messed up.\n\n\"Exception in thread \"main\" java.lang.VerifyError: (class: Test, method:\"\n\"newTest_aroundBody2 signature: (I)LTest;) Illegal default target in switch\"\n\nCan you possibly retry the failing scenario with a build of AspectJ 5?\n",
    "not seen on 1.5 ... delaying for investigation in 1.5.1",
    "bug not seen in the last few months - presumed fixed. please reopen if you see it again."
  ],
  "commentCreationDates": [
    "2005-07-21T02:14:31+02:00",
    "2005-08-26T17:39:21+02:00",
    "2005-09-15T11:26:26+02:00",
    "2005-10-28T12:54:39+02:00",
    "2005-11-09T08:58:10+01:00",
    "2005-11-14T16:28:02+01:00",
    "2006-05-25T11:23:15+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.apache.bcel.generic.ClassGenException",
      "message": "Not targeting   36: aload_0[42](1) AspectJInstrumenter:weaveClass,",
      "elements": [
        {
          "method": "org.apache.bcel.generic.Select.updateTarget",
          "source": "Select.java:213"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "104603",
      "date": "2005-07-21T02:14:31+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "104603",
  "bugId": "104603",
  "date": "2005-07-21T02:14:31+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}