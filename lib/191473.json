{
  "comments": [
    "Received an error during initialization of Java tooling on RC1. This happened two startups in a row, but not after that. The error is in wst.common but it appears to be initializing the Web libraries classpath container, so I am opening the bug here to start.\n\n!ENTRY org.eclipse.core.jobs 4 2 2007-06-07 09:30:52.156\n!MESSAGE An internal error occurred during: \"Initializing Java Tooling\".\n!STACK 0\njava.lang.NullPointerException\n\tat org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry$EditModelInfo.initializeResources(EditModelRegistry.java:318)\n\tat org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry$EditModelInfo.getEditModelResources(EditModelRegistry.java:278)\n\tat org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.getLocalEditModelResources(EditModelRegistry.java:204)\n\tat org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.getAllEditModelResources(EditModelRegistry.java:191)\n\tat org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.getEditModelResources(EditModelRegistry.java:126)\n\tat org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.initializeKnownResourceUris(EditModel.java:501)\n\tat org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.\u003cinit\u003e(EditModel.java:129)\n\tat org.eclipse.wst.common.componentcore.internal.ModuleStructuralModel.\u003cinit\u003e(ModuleStructuralModel.java:87)\n\tat org.eclipse.wst.common.componentcore.internal.impl.ModuleStructuralModelFactory.createEditModelForRead(ModuleStructuralModelFactory.java:33)\n\tat org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.createEditModelForRead(EditModelRegistry.java:102)\n\tat org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.createEditModelForRead(EMFWorkbenchContext.java:198)\n\tat org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.getEditModelForRead(EMFWorkbenchContext.java:132)\n\tat org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead(EditModelNature.java:49)\n\tat org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead(EditModelNature.java:39)\n\tat org.eclipse.wst.common.componentcore.ModuleCoreNature.getModuleStructuralModelForRead(ModuleCoreNature.java:239)\n\tat org.eclipse.wst.common.componentcore.ModuleCoreNature.cacheModuleStructuralModel(ModuleCoreNature.java:555)\n\tat org.eclipse.wst.common.componentcore.ModuleCoreNature.primaryContributeToContext(ModuleCoreNature.java:497)\n\tat org.eclipse.jem.internal.util.emf.workbench.EMFWorkbenchContextFactory.initializeEMFContextFromContributors(EMFWorkbenchContextFactory.java:127)\n\tat org.eclipse.jem.internal.util.emf.workbench.EMFWorkbenchContextFactory.createEMFContext(EMFWorkbenchContextFactory.java:110)\n\tat org.eclipse.wst.common.internal.emfworkbench.edit.EMFWorkbenchEditContextFactory.createEMFContext(EMFWorkbenchEditContextFactory.java:81)\n\tat org.eclipse.jem.util.emf.workbench.WorkbenchResourceHelperBase.createEMFContext(WorkbenchResourceHelperBase.java:249)\n\tat org.eclipse.jem.util.emf.workbench.nature.EMFNature.createEmfContext(EMFNature.java:105)\n\tat org.eclipse.jem.util.emf.workbench.nature.EMFNature.getEmfContextBase(EMFNature.java:229)\n\tat org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEmfContext(EditModelNature.java:61)\n\tat org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead(EditModelNature.java:48)\n\tat org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead(EditModelNature.java:39)\n\tat org.eclipse.wst.common.componentcore.ModuleCoreNature.getModuleStructuralModelForRead(ModuleCoreNature.java:239)\n\tat org.eclipse.wst.common.componentcore.internal.StructureEdit.\u003cinit\u003e(StructureEdit.java:320)\n\tat org.eclipse.wst.common.componentcore.internal.StructureEdit.getStructureEditForRead(StructureEdit.java:119)\n\tat org.eclipse.wst.common.componentcore.internal.resources.VirtualComponent.getReferences(VirtualComponent.java:262)\n\tat org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getNonManifestReferences(J2EEModuleVirtualComponent.java:109)\n\tat org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getReferences(J2EEModuleVirtualComponent.java:83)\n\tat org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getReferences(J2EEModuleVirtualComponent.java:79)\n\tat org.eclipse.jst.common.jdt.internal.classpath.FlexibleProjectContainer.computeClasspathEntries(FlexibleProjectContainer.java:184)\n\tat org.eclipse.jst.common.jdt.internal.classpath.FlexibleProjectContainer.\u003cinit\u003e(FlexibleProjectContainer.java:122)\n\tat org.eclipse.jst.j2ee.internal.web.classpath.WebAppLibrariesContainer.\u003cinit\u003e(WebAppLibrariesContainer.java:48)\n\tat org.eclipse.jst.j2ee.internal.web.classpath.WebAppLibrariesContainerInitializer.initialize(WebAppLibrariesContainerInitializer.java:34)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer(JavaModelManager.java:2192)\n\tat org.eclipse.jdt.internal.core.JavaModelManager$9.run(JavaModelManager.java:2122)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1797)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.initializeAllContainers(JavaModelManager.java:2138)\n\tat org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer(JavaModelManager.java:1532)\n\tat org.eclipse.jdt.core.JavaCore.getClasspathContainer(JavaCore.java:1571)\n\tat org.eclipse.jdt.internal.core.JavaProject.resolveClasspath(JavaProject.java:2558)\n\tat org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:1848)\n\tat org.eclipse.jdt.core.JavaCore.initializeAfterLoad(JavaCore.java:3254)\n\tat org.eclipse.jdt.internal.ui.InitializeAfterLoadJob$RealJob.run(InitializeAfterLoadJob.java:35)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)",
    "This points to a thread safety issue.  This code hasn\u0027t changed in a long time.  If you look at line 318, it is:\nIConfigurationElement[] resExtensions \u003d configurationElement.getChildren(EDIT_MODEL_RESOURCE_EXTENSION);\nThe only way to get a NPE on that line is if configurationElement is null.  But, just above it, it checks if (configurationElement !\u003d null), then it gets the EDIT_MODEL_RESOURCE_ELEMENT children from configurationElement, so configurationElement cannot be null there.  So something is setting configurationElement to null (most likely on another thread) at some time during the iteration of the following loop:\nfor (int j \u003d 0; j \u003c resources.length; j++) {\neditModelResources.add(new EditModelResource(resources[j]));\n}\nThere is a simple way to reduce/eliminate this window- move the two gets and the call to discardConfigurationElementIfNecessar() up together.",
    "Created an attachment (id\u003d70728)\nMinimize/remove the window for reentrance\n\nThe code itself hasn\u0027t changed, all I did was move the getChildren() and the discardConfigurationElementIfNecessary() together so that we can release the configurationElement as quickly as possible.  This will prevent reentrance (and prevent the configurationElement from becoming null inadvertently.)",
    "PMC info:\nIf Java Initialization fails, the workbench is in a bad state.  So we need to minimize/keep this from happening.  There is no work-around (other than bringing the workbench down and hoping it doesn\u0027t happen next time).\nThis fix has been tested by hand and by running the entire AllTestsSuite JUnit test bucket.\nThe solution is to move all of the accesses to the configurationElement to the top of the check.  This minimizes the chance of another thread changing the value of configurationElement to null.  All of the same code still remains and it follows the same code path, thus no new errors should be introduced.\nThe risk is minimal.  (Nothing different should happen execution-wise.)\nChuck Bridgham has reviewed this fix.",
    "Deferring to maintenance release",
    "*** Bug 195780 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2007-06-07T15:35:48+02:00",
    "2007-06-08T20:19:48+02:00",
    "2007-06-08T20:22:04+02:00",
    "2007-06-08T20:53:34+02:00",
    "2007-06-08T22:18:46+02:00",
    "2007-07-09T21:35:00+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry$EditModelInfo.initializeResources",
          "source": "EditModelRegistry.java:318"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry$EditModelInfo.getEditModelResources",
          "source": "EditModelRegistry.java:278"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.getLocalEditModelResources",
          "source": "EditModelRegistry.java:204"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.getAllEditModelResources",
          "source": "EditModelRegistry.java:191"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.getEditModelResources",
          "source": "EditModelRegistry.java:126"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.initializeKnownResourceUris",
          "source": "EditModel.java:501"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.\u003cinit\u003e",
          "source": "EditModel.java:129"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ModuleStructuralModel.\u003cinit\u003e",
          "source": "ModuleStructuralModel.java:87"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.impl.ModuleStructuralModelFactory.createEditModelForRead",
          "source": "ModuleStructuralModelFactory.java:33"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.createEditModelForRead",
          "source": "EditModelRegistry.java:102"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.createEditModelForRead",
          "source": "EMFWorkbenchContext.java:198"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.getEditModelForRead",
          "source": "EMFWorkbenchContext.java:132"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead",
          "source": "EditModelNature.java:49"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead",
          "source": "EditModelNature.java:39"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ModuleCoreNature.getModuleStructuralModelForRead",
          "source": "ModuleCoreNature.java:239"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ModuleCoreNature.cacheModuleStructuralModel",
          "source": "ModuleCoreNature.java:555"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ModuleCoreNature.primaryContributeToContext",
          "source": "ModuleCoreNature.java:497"
        },
        {
          "method": "org.eclipse.jem.internal.util.emf.workbench.EMFWorkbenchContextFactory.initializeEMFContextFromContributors",
          "source": "EMFWorkbenchContextFactory.java:127"
        },
        {
          "method": "org.eclipse.jem.internal.util.emf.workbench.EMFWorkbenchContextFactory.createEMFContext",
          "source": "EMFWorkbenchContextFactory.java:110"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EMFWorkbenchEditContextFactory.createEMFContext",
          "source": "EMFWorkbenchEditContextFactory.java:81"
        },
        {
          "method": "org.eclipse.jem.util.emf.workbench.WorkbenchResourceHelperBase.createEMFContext",
          "source": "WorkbenchResourceHelperBase.java:249"
        },
        {
          "method": "org.eclipse.jem.util.emf.workbench.nature.EMFNature.createEmfContext",
          "source": "EMFNature.java:105"
        },
        {
          "method": "org.eclipse.jem.util.emf.workbench.nature.EMFNature.getEmfContextBase",
          "source": "EMFNature.java:229"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEmfContext",
          "source": "EditModelNature.java:61"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead",
          "source": "EditModelNature.java:48"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead",
          "source": "EditModelNature.java:39"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ModuleCoreNature.getModuleStructuralModelForRead",
          "source": "ModuleCoreNature.java:239"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.StructureEdit.\u003cinit\u003e",
          "source": "StructureEdit.java:320"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.StructureEdit.getStructureEditForRead",
          "source": "StructureEdit.java:119"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.resources.VirtualComponent.getReferences",
          "source": "VirtualComponent.java:262"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getNonManifestReferences",
          "source": "J2EEModuleVirtualComponent.java:109"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getReferences",
          "source": "J2EEModuleVirtualComponent.java:83"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.J2EEModuleVirtualComponent.getReferences",
          "source": "J2EEModuleVirtualComponent.java:79"
        },
        {
          "method": "org.eclipse.jst.common.jdt.internal.classpath.FlexibleProjectContainer.computeClasspathEntries",
          "source": "FlexibleProjectContainer.java:184"
        },
        {
          "method": "org.eclipse.jst.common.jdt.internal.classpath.FlexibleProjectContainer.\u003cinit\u003e",
          "source": "FlexibleProjectContainer.java:122"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.web.classpath.WebAppLibrariesContainer.\u003cinit\u003e",
          "source": "WebAppLibrariesContainer.java:48"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.web.classpath.WebAppLibrariesContainerInitializer.initialize",
          "source": "WebAppLibrariesContainerInitializer.java:34"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.initializeContainer",
          "source": "JavaModelManager.java:2192"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager$9.run",
          "source": "JavaModelManager.java:2122"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1797"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.initializeAllContainers",
          "source": "JavaModelManager.java:2138"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.getClasspathContainer",
          "source": "JavaModelManager.java:1532"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.getClasspathContainer",
          "source": "JavaCore.java:1571"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.resolveClasspath",
          "source": "JavaProject.java:2558"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath",
          "source": "JavaProject.java:1848"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.initializeAfterLoad",
          "source": "JavaCore.java:3254"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.InitializeAfterLoadJob$RealJob.run",
          "source": "InitializeAfterLoadJob.java:35"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:55"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "191473",
      "date": "2007-06-07T15:35:48+02:00",
      "product": "Web Tools",
      "component": "jst.j2ee",
      "severity": "major"
    }
  ],
  "groupId": "191473",
  "bugId": "191473",
  "date": "2007-06-07T15:35:48+02:00",
  "product": "Web Tools",
  "component": "jst.j2ee",
  "severity": "major"
}