{
  "comments": [
    "Sam wrote:\n\n\u003e I\u0027m trying something and it works from .aj but not from .java.  When\n\u003e I try it with annotation based stuff I get a nasty exception:\n\u003e\n\u003e       [iajc] trouble in:\n\u003e       [iajc] public class gsc.repository.IdentifierTest extends\n\u003e junit.framework.TestCase:\n\u003e       [iajc]   private static final org.aspectj.lang.JoinPoint\n\u003e $StaticPart ajc$tjp_0\n\u003e       [iajc]   public void \u003cinit\u003e():\n\u003e       [iajc]                     ALOAD_0\n\u003e       [iajc]                     INVOKESPECIAL\n\u003e junit.framework.TestCase.\u003cinit\u003e ()V\n\u003e       [iajc]     constructor-execution(void\n\u003e gsc.repository.IdentifierTest.\u003cinit\u003e())\n\u003e       [iajc]     |               RETURN\n\u003e       [iajc]     constructor-execution(void\n\u003e gsc.repository.IdentifierTest.\u003cinit\u003e())\n\u003e       [iajc]   end public void \u003cinit\u003e()\n\u003e\n\u003e       [iajc]   public void testIdentifierExactMatch() throws\n\u003e java.security.NoSuchAlgorithmException, java.io.IOException:\n\u003e       [iajc]     method-execution(void\n\u003e gsc.repository.IdentifierTest.testIdentifierExactMatch())\n\u003e       [iajc]     |               NEW java.io.File\n\u003e       [iajc]     |               DUP\n\u003e       [iajc]     |               LDC \"test-repository/ant-test/jars/\n\u003e ant-1.6.2.jar\"\n\u003e       [iajc]     |               INVOKESPECIAL java.io.File.\u003cinit\u003e\n\u003e (Ljava/lang/String;)V\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.Identifier.interrogate (Ljava/io/File;)Ljava/util/List;\n\u003e       [iajc]     |               ASTORE_1\n\u003e       [iajc]     |               ALOAD_1\n\u003e       [iajc]     |               ICONST_0\n\u003e       [iajc]     |               INVOKEINTERFACE java.util.List.get\n\u003e (I)Ljava/lang/Object;\n\u003e       [iajc]     |               CHECKCAST gsc.repository.ejb.Jar\n\u003e       [iajc]     |               ASTORE_2\n\u003e       [iajc]     |               ALOAD_2\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"1.6.2\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               RETURN\n\u003e       [iajc]     method-execution(void\n\u003e gsc.repository.IdentifierTest.testIdentifierExactMatch())\n\u003e       [iajc]   end public void testIdentifierExactMatch() throws\n\u003e java.security.NoSuchAlgorithmException, java.io.IOException\n\u003e\n\u003e       [iajc]   public void testIdentifierExactSameClasses() throws\n\u003e java.security.NoSuchAlgorithmException, java.io.IOException:\n\u003e       [iajc]     method-execution(void\n\u003e gsc.repository.IdentifierTest.testIdentifierExactSameClasses())\n\u003e       [iajc]     |               NEW java.io.File\n\u003e       [iajc]     |               DUP\n\u003e       [iajc]     |               LDC \"test-jars/ant-1.6.2-test.jar\"\n\u003e       [iajc]     |               INVOKESPECIAL java.io.File.\u003cinit\u003e\n\u003e (Ljava/lang/String;)V\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.Identifier.interrogate (Ljava/io/File;)Ljava/util/List;\n\u003e       [iajc]     |               ASTORE_1\n\u003e       [iajc]     |               ALOAD_1\n\u003e       [iajc]     |               ICONST_0\n\u003e       [iajc]     |               INVOKEINTERFACE java.util.List.get\n\u003e (I)Ljava/lang/Object;\n\u003e       [iajc]     |               CHECKCAST gsc.repository.ejb.Jar\n\u003e       [iajc]     |               ASTORE_2\n\u003e       [iajc]     |               ALOAD_2\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"1.6.2\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               RETURN\n\u003e       [iajc]     method-execution(void\n\u003e gsc.repository.IdentifierTest.testIdentifierExactSameClasses())\n\u003e       [iajc]   end public void testIdentifierExactSameClasses()\n\u003e throws java.security.NoSuchAlgorithmException, java.io.IOException\n\u003e\n\u003e       [iajc]   public void testIdentifierMixedUp() throws\n\u003e java.security.NoSuchAlgorithmException, java.io.IOException:\n\u003e       [iajc]     method-execution(void\n\u003e gsc.repository.IdentifierTest.testIdentifierMixedUp())\n\u003e       [iajc]     |               NEW java.io.File\n\u003e       [iajc]     |               DUP\n\u003e       [iajc]     |               LDC \"test-jars/groovy-1.0-beta-4-and-\n\u003e commons-logging-1.0.2.jar\"\n\u003e       [iajc]     |               INVOKESPECIAL java.io.File.\u003cinit\u003e\n\u003e (Ljava/lang/String;)V\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.Identifier.interrogate (Ljava/io/File;)Ljava/util/List;\n\u003e       [iajc]     |               ASTORE_1\n\u003e       [iajc]     |               ALOAD_1\n\u003e       [iajc]     |               INVOKEINTERFACE java.util.List.size ()I\n\u003e       [iajc]     |               ICONST_2\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (II)V\n\u003e       [iajc]     |               ICONST_2\n\u003e       [iajc]     |               ISTORE_2\n\u003e       [iajc]     |               ALOAD_1\n\u003e       [iajc]     |               INVOKEINTERFACE\n\u003e java.util.List.iterator ()Ljava/util/Iterator;\n\u003e       [iajc]     |               ASTORE_3\n\u003e       [iajc]     |           L0: ALOAD_3\n\u003e       [iajc]     |               INVOKEINTERFACE\n\u003e java.util.Iterator.hasNext ()Z\n\u003e       [iajc]     |               IFEQ L3\n\u003e       [iajc]     |               ALOAD_3\n\u003e       [iajc]     |               INVOKEINTERFACE\n\u003e java.util.Iterator.next ()Ljava/lang/Object;\n\u003e       [iajc]     |               CHECKCAST gsc.repository.ejb.Jar\n\u003e       [iajc]     |               ASTORE 4\n\u003e       [iajc]     |               ALOAD 4\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getGroupid ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"groovy\"\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e java.lang.String.equals (Ljava/lang/Object;)Z\n\u003e       [iajc]     |               IFEQ L1\n\u003e       [iajc]     |               ALOAD 4\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getGroupid ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"groovy\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               ALOAD 4\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getArtifactid ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"groovy\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               ALOAD 4\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"1.0-beta-4\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               IINC 2 -1\n\u003e       [iajc]     |               GOTO L2\n\u003e       [iajc]     |           L1: ALOAD 4\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getGroupid ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"commons-logging\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               ALOAD 4\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getArtifactid ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"commons-logging\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               ALOAD 4\n\u003e       [iajc]     |               INVOKEVIRTUAL\n\u003e gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String;\n\u003e       [iajc]     |               LDC \"1.0.2\"\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n\u003e lang/String;)V\n\u003e       [iajc]     |               IINC 2 -1\n\u003e       [iajc]     |           L2: GOTO L0\n\u003e       [iajc]     |           L3: ILOAD_2\n\u003e       [iajc]     |               ICONST_0\n\u003e       [iajc]     |               INVOKESTATIC\n\u003e gsc.repository.IdentifierTest.assertEquals (II)V\n\u003e       [iajc]     |               RETURN\n\u003e       [iajc]     method-execution(void\n\u003e gsc.repository.IdentifierTest.testIdentifierMixedUp())\n\u003e       [iajc]   end public void testIdentifierMixedUp() throws\n\u003e java.security.NoSuchAlgorithmException, java.io.IOException\n\u003e\n\u003e       [iajc] end public class gsc.repository.IdentifierTest\n\u003e\n\u003e       [iajc]\n\u003e       [iajc] Exception thrown from AspectJ 1.5.0M5\n\u003e\n\u003e       [iajc] This might be logged as a bug already -- find current\n\u003e bugs at\n\u003e       [iajc]   http://bugs.eclipse.org/bugs/buglist.cgi?\n\u003e product\u003dAspectJ\u0026component\u003dCompiler\n\u003e\n\u003e       [iajc] Bugs for exceptions thrown have titles File:line from\n\u003e the top stack,\n\u003e       [iajc] e.g., \"SomeFile.java:243\"\n\u003e\n\u003e       [iajc] If you don\u0027t find the exception below in a bug, please\n\u003e add a new bug\n\u003e       [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?\n\u003e product\u003dAspectJ\n\u003e       [iajc] To make the bug a priority, please include a test program\n\u003e       [iajc] that can reproduce this exception.\n\u003e       [iajc] Incorrectly attempting counter operation on stacked cflow\n\u003e\n\u003e       [iajc] when implementing on shadow method-execution(void\n\u003e gsc.repository.IdentifierTest.testIdentifierExactMatch())\n\u003e       [iajc] when weaving type gsc.repository.IdentifierTest\n\u003e       [iajc] when weaving classes\n\u003e       [iajc] when weaving\n\u003e       [iajc] when batch building with classpath: /Users/sam/Library/\n\u003e Java/Extensions/jsk-policy.jar:/System/Library/Java/Extensions/\n\u003e CoreAudio.jar:/System/Library/Java/Extensions/dns_sd.jar:/System/\n\u003e Library/Java/Extensions/j3daudio.jar:/System/Library/Java/Extensions/\n\u003e j3dcore.jar:/System/Library/Java/Extensions/j3dutils.jar:/System/\n\u003e Library/Java/Extensions/jai_codec.jar:/System/Library/Java/Extensions/\n\u003e jai_core.jar:/System/Library/Java/Extensions/mlibwrapper_jai.jar:/\n\u003e System/Library/Java/Extensions/MRJToolkit.jar:/System/Library/Java/\n\u003e Extensions/QTJava.zip:/System/Library/Java/Extensions/QTJSupport.jar:/\n\u003e System/Library/Java/Extensions/vecmath.jar:/System/Library/Frameworks/\n\u003e JavaVM.framework/Versions/1.5.0/Home/lib/ext/apple_provider.jar:/\n\u003e System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/lib/\n\u003e ext/dnsns.jar:/System/Library/Frameworks/JavaVM.framework/Versions/\n\u003e 1.5.0/Home/lib/ext/localedata.jar:/System/Library/Frameworks/\n\u003e JavaVM.framework/Versions/1.5.0/Home/lib/ext/sunjce_provider.jar:/\n\u003e Users/sam/gs/squire/jardb/.aspectj-lib/aspectjrt-1.5.0_M5.jar:/Users/\n\u003e sam/gs/squire/jardb/.aspectj-lib/aspectjtools-1.5.0_M5.jar:/Users/sam/\n\u003e gs/squire/jardb/target/classes:/Users/sam/gs/squire/jardb/target/test-\n\u003e classes:/Users/sam/gs/squire/jardb/.lib/antlr-2.7.5.jar:/Users/sam/gs/\n\u003e squire/jardb/.lib/asm-1.5.3.jar:/Users/sam/gs/squire/jardb/.lib/\n\u003e cglib-2.1_2.jar:/Users/sam/gs/squire/jardb/.lib/commons-\n\u003e collections-2.1.1.jar:/Users/sam/gs/squire/jardb/.lib/commons-\n\u003e logging-1.0.4.jar:/Users/sam/gs/squire/jardb/.lib/dom4j-1.6.jar:/\n\u003e Users/sam/gs/squire/jardb/.lib/ehcache-1.1.jar:/Users/sam/gs/squire/\n\u003e jardb/.lib/ejb3-persistence-pr.jar:/Users/sam/gs/squire/jardb/.lib/\n\u003e emma-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/\n\u003e emma_ant-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/\n\u003e hibernate-3.1alpha1.jar:/Users/sam/gs/squire/jardb/.lib/hibernate-\n\u003e annotations-3.1beta3.jar:/Users/sam/gs/squire/jardb/.lib/hibernate-\n\u003e entitymanager-3.1beta1.jar:/Users/sam/gs/squire/jardb/.lib/\n\u003e jta-1.0.jar:/Users/sam/gs/squire/jardb/.lib/junit-3.8.1.jar:/Users/\n\u003e sam/gs/squire/jardb/.lib/postgresql-7.4.1-jdbc3.jar:/Users/sam/gs/\n\u003e squire/jardb/.lib/svn-javahl-1.2.0.jar:/Users/sam/gs/squire/jardb/lib/\n\u003e testng-4.2-jdk15.jar:/Users/sam/gs/squire/jardb/target/aspects.jar:\n\u003e       [iajc] Incorrectly attempting counter operation on stacked cflow\n\u003e       [iajc] java.lang.RuntimeException: Incorrectly attempting\n\u003e counter operation on stacked cflow\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelShadow.weaveCflowEntry\n\u003e (BcelShadow.java:1890)\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelAdvice.implementOn\n\u003e (BcelAdvice.java:231)\n\u003e       [iajc]     at org.aspectj.weaver.Shadow.implementMungers\n\u003e (Shadow.java:514)\n\u003e       [iajc]     at org.aspectj.weaver.Shadow.implement(Shadow.java:391)\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelClassWeaver.implement\n\u003e (BcelClassWeaver.java:2142)\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n\u003e (BcelClassWeaver.java:467)\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n\u003e (BcelClassWeaver.java:102)\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weave\n\u003e (BcelWeaver.java:1534)\n\u003e       [iajc]     at\n\u003e org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:\n\u003e 1485)\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify\n\u003e (BcelWeaver.java:1266)\n\u003e       [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weave\n\u003e (BcelWeaver.java:1088)\n\u003e       [iajc]     at\n\u003e org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave\n\u003e (AjCompilerAdapter.java:300)\n\u003e       [iajc]     at\n\u003e org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling\n\u003e (AjCompilerAdapter.java:178)\n\u003e       [iajc]     at\n\u003e org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning\n\u003e $org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0\n\u003e (CompilerAdapter.aj:70)\n\u003e       [iajc]     at\n\u003e org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile\n\u003e (Compiler.java:367)\n\u003e       [iajc]     at\n\u003e org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n\u003e (AjBuildManager.java:809)\n\u003e       [iajc]     at\n\u003e org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n\u003e (AjBuildManager.java:230)\n\u003e       [iajc]     at\n\u003e org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n\u003e (AjBuildManager.java:156)\n\u003e       [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand\n\u003e (AjdtCommand.java:112)\n\u003e       [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand\n\u003e (AjdtCommand.java:60)\n\u003e       [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:326)\n\u003e       [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:240)\n\u003e       [iajc]     at\n\u003e org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:\n\u003e 1210)\n\u003e       [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute\n\u003e (AjcTask.java:1001)\n\u003e       [iajc]     at org.apache.tools.ant.UnknownElement.execute\n\u003e (UnknownElement.java:275)\n\u003e       [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n\u003e       [iajc]     at org.apache.tools.ant.taskdefs.Sequential.execute\n\u003e (Sequential.java:64)\n\u003e       [iajc]     at org.apache.tools.ant.UnknownElement.execute\n\u003e (UnknownElement.java:275)\n\u003e       [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n\u003e       [iajc]     at\n\u003e org.apache.tools.ant.taskdefs.MacroInstance.execute\n\u003e (MacroInstance.java:378)\n\u003e       [iajc]     at org.apache.tools.ant.UnknownElement.execute\n\u003e (UnknownElement.java:275)\n\u003e       [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n\u003e       [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)\n\u003e       [iajc]     at org.apache.tools.ant.Target.performTasks\n\u003e (Target.java:369)\n\u003e       [iajc]     at org.apache.tools.ant.Project.executeSortedTargets\n\u003e (Project.java:1216)\n\u003e       [iajc]     at org.apache.tools.ant.Project.executeTarget\n\u003e (Project.java:1185)\n\u003e       [iajc]     at\n\u003e org.apache.tools.ant.helper.DefaultExecutor.executeTargets\n\u003e (DefaultExecutor.java:40)\n\u003e       [iajc]     at org.apache.tools.ant.Project.executeTargets\n\u003e (Project.java:1068)\n\u003e       [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:668)\n\u003e       [iajc]     at org.apache.tools.ant.Main.startAnt(Main.java:187)\n\u003e       [iajc]     at org.apache.tools.ant.launch.Launcher.run\n\u003e (Launcher.java:246)\n\u003e       [iajc]     at org.apache.tools.ant.launch.Launcher.main\n\u003e (Launcher.java:67)\n\u003e\n\u003e\n\u003e package gsc.aspects.testing;\n\u003e\n\u003e import junit.framework.*;\n\u003e import java.io.*;\n\u003e import java.util.*;\n\u003e\n\u003e import org.aspectj.lang.annotation.Pointcut;\n\u003e import org.aspectj.lang.annotation.Before;\n\u003e import org.aspectj.lang.annotation.Aspect;\n\u003e import org.aspectj.lang.annotation.After;\n\u003e import org.aspectj.lang.JoinPoint;\n\u003e\n\u003e @Aspect\n\u003e public class TestMethodMapperAnnotations {\n\u003e\n\u003e      @Pointcut(\"this(testCase) \u0026\u0026 this(TestCase) \u0026\u0026 execution(void\n\u003e test*())\")\n\u003e      public void inTestClass(TestCase testCase) {\n\u003e      }\n\u003e\n\u003e      private Map\u003cString, Map\u003cString, Integer\u003e\u003e coverage;\n\u003e\n\u003e      @Before(\"cflowbelow(inTestClass(testCase)) \u0026\u0026 execution(* *(..))\")\n\u003e      public void beforeMethodExecution(JoinPoint thisJoinPoint,\n\u003e TestCase testCase) {\n\u003e          String testname \u003d testCase.getClass().getName();\n\u003e          String methodSignature \u003d thisJoinPoint.getStaticPart\n\u003e ().getSignature().toString();\n\u003e          Map\u003cString, Integer\u003e tests \u003d coverage.get(methodSignature);\n\u003e          if (tests \u003d\u003d null) {\n\u003e              tests \u003d new HashMap\u003cString, Integer\u003e();\n\u003e              coverage.put(methodSignature, tests);\n\u003e          }\n\u003e          Integer count \u003d tests.get(testname);\n\u003e          if (count \u003d\u003d null) {\n\u003e              count \u003d 1;\n\u003e          } else {\n\u003e              count++;\n\u003e          }\n\u003e          tests.put(testname, count);\n\u003e      }\n\u003e\n\u003e      @Before(\"inTestClass(testCase)\")\n\u003e      public void beforeExecutingTestMethod(TestCase testCase) {\n\u003e          try {\n\u003e              File file \u003d new File(\"results.ser\");\n\u003e              if (file.exists()) {\n\u003e                  ObjectInputStream ois \u003d new ObjectInputStream(new\n\u003e FileInputStream(file));\n\u003e                  coverage \u003d (Map\u003cString, Map\u003cString, Integer\u003e\u003e)\n\u003e ois.readObject();\n\u003e                  ois.close();\n\u003e              } else {\n\u003e                  coverage \u003d new HashMap\u003cString, Map\u003cString, Integer\u003e\u003e();\n\u003e              }\n\u003e          } catch (Exception e) {\n\u003e              e.printStackTrace();\n\u003e          }\n\u003e      }\n\u003e\n\u003e      @After(\"inTestClass(testCase)\")\n\u003e      public void afterExecutingTestMethod(TestCase testCase) {\n\u003e          try {\n\u003e              File file \u003d new File(\"results.ser\");\n\u003e              ObjectOutputStream oos \u003d new ObjectOutputStream(new\n\u003e FileOutputStream(file));\n\u003e              oos.writeObject(coverage);\n\u003e              oos.close();\n\u003e          } catch (Exception e) {\n\u003e              e.printStackTrace();\n\u003e          }\n\u003e      }\n\u003e\n\u003e }\n\u003e\n\u003e vs.\n\u003e\n\u003e package gsc.aspects.testing;\n\u003e\n\u003e import junit.framework.*;\n\u003e import java.io.*;\n\u003e import java.util.*;\n\u003e\n\u003e public aspect TestMethodMapper {\n\u003e\n\u003e      pointcut inTestClass(TestCase testCase) : this(testCase) \u0026\u0026 this\n\u003e (TestCase) \u0026\u0026 execution(void test*());\n\u003e      private Map\u003cString, Map\u003cString, Integer\u003e\u003e coverage;\n\u003e\n\u003e      before(TestCase testCase) : cflowbelow(inTestClass(testCase)) \u0026\u0026\n\u003e execution(* *(..)) {\n\u003e         String testname \u003d testCase.getClass().getName();\n\u003e         String methodSignature \u003d thisJoinPointStaticPart.getSignature\n\u003e ().toString();\n\u003e         Map\u003cString, Integer\u003e tests \u003d coverage.get(methodSignature);\n\u003e         if (tests \u003d\u003d null) {\n\u003e             tests \u003d new HashMap\u003cString, Integer\u003e();\n\u003e             coverage.put(methodSignature, tests);\n\u003e         }\n\u003e         Integer count \u003d tests.get(testname);\n\u003e         if (count \u003d\u003d null) {\n\u003e             count \u003d 1;\n\u003e         } else {\n\u003e              count++;\n\u003e         }\n\u003e         tests.put(testname, count);\n\u003e      }\n\u003e\n\u003e      before(TestCase testCase) : inTestClass(testCase) {\n\u003e         try {\n\u003e             File file \u003d new File(\"results.ser\");\n\u003e             if (file.exists()) {\n\u003e                 ObjectInputStream ois \u003d new ObjectInputStream(new FileInputStream\n\u003e (file));\n\u003e                 coverage \u003d (Map\u003cString, Map\u003cString, Integer\u003e\u003e) ois.readObject();\n\u003e                 ois.close();\n\u003e             } else {\n\u003e                 coverage \u003d new HashMap\u003cString, Map\u003cString, Integer\u003e\u003e();\n\u003e             }\n\u003e         } catch (Exception e) {\n\u003e             e.printStackTrace();\n\u003e         }\n\u003e      }\n\u003e\n\u003e      after(TestCase testCase) : inTestClass(testCase) {\n\u003e         try {\n\u003e             File file \u003d new File(\"results.ser\");\n\u003e             ObjectOutputStream oos \u003d new ObjectOutputStream(new\n\u003e FileOutputStream(file));\n\u003e             oos.writeObject(coverage);\n\u003e             oos.close();\n\u003e         } catch (Exception e) {\n\u003e             e.printStackTrace();\n\u003e         }\n\u003e      }\n\u003e\n\u003e }\n\u003e\n\u003e\n\u003e",
    "spotted issue in exposed stated\ncommiting fix\n\nnote: Sam, pointcut is not what you want in your sample:\n\n        @Pointcut(\"this(testCase) \u0026\u0026 this(TestCase) \u0026\u0026 execution(void test*())\")\n                                          ^^^^^^^^^^^\n// need FQN in @AJ, and actually don\u0027t need it since you use a binding with another this(testCase)\n\n        public void inTestClass(TestCase testCase) {\n",
    "fix available"
  ],
  "commentCreationDates": [
    "2005-12-12T10:17:15+01:00",
    "2005-12-12T10:18:57+01:00",
    "2005-12-12T10:47:51+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "Incorrectly attempting \u003e counter operation on stacked cflow \u003e       [iajc]",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.weaveCflowEntry\u003e",
          "source": "BcelShadow.java:1890"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "120351",
      "date": "2005-12-12T10:17:15+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "120351",
  "bugId": "120351",
  "date": "2005-12-12T10:17:15+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}