{
  "comments": [
    "When launching Eclipse with the J2EE perspective open, an intermittent NPE is\nthrown for dynamic web projects.  To repro, I create a new Dynamic Web Project\n(through the New J2EE Web Project Wizard), create a JSP file and a Servlet\nsource file in WebContent and JavaSource, respectively, close Eclipse, then\nrestart. Although the result is not consistent, the exception thrown is:\n\njava.lang.NullPointerException\n\tat\norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processResourcesIfInterrested(ArtifactEditModel.java:249)\n\tat\norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processLoadedResources(ArtifactEditModel.java:221)\n\tat\norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e(ArtifactEditModel.java:127)\n\tat\norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e(ArtifactEditModel.java:91)\n\tat\norg.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModel.\u003cinit\u003e(JavaArtifactEditModel.java:40)\n\tat\norg.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModelFactory.createEditModelForRead(JavaArtifactEditModelFactory.java:39)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.createEditModelForRead(EditModelRegistry.java:95)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.createEditModelForRead(EMFWorkbenchContext.java:168)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.getEditModelForRead(EMFWorkbenchContext.java:121)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead(EditModelNature.java:49)\n\tat\norg.eclipse.wst.common.componentcore.ModuleCoreNature.getArtifactEditModelForRead(ModuleCoreNature.java:310)\n\tat org.eclipse.wst.common.componentcore.ArtifactEdit.\u003cinit\u003e(ArtifactEdit.java:247)\n\tat\norg.eclipse.jst.j2ee.componentcore.EnterpriseArtifactEdit.\u003cinit\u003e(EnterpriseArtifactEdit.java:97)\n\tat\norg.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.\u003cinit\u003e(WebArtifactEdit.java:278)\n\tat\norg.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.getWebArtifactEditForRead(WebArtifactEdit.java:194)\n\n\n\n\nOn debugging, the problem in the call stack above, the processLoadedResources\nmethod on ArtifactEditModel makes a call to getResourceSet(). When startup\nbehaves as expected (no exception), the resource set returned is:\n\nloadedResources\u003d ResourceSetImpl$ResourcesEList  (id\u003d122)\n\tdata\u003d null\n\tmodCount\u003d 0\n\tsize\u003d 0\n\tthis$0\u003d ProjectResourceSetEditImpl  (id\u003d135)\n\nWhen the exception is thrown at startup, the resource set returned is:\n\nloadedResources\u003d ResourceSetImpl$ResourcesEList  (id\u003d122)\n\tdata\u003d Resource[4]  (id\u003d135)\n\t\t[0]\u003d WTPModulesResource  (id\u003d157)\n\t\t\tcontents\u003d TranslatorResourceImpl$2  (id\u003d254)\n\t\t\tdefaultLoadOptions\u003d null\n\t\t\tdefaultSaveOptions\u003d HashMap\u003cK,V\u003e  (id\u003d257)\n\t\t\tdomHandler\u003d null\n\t\t\teAdapters\u003d BasicNotifierImpl$EAdapterList  (id\u003d260)\n\t\t\teditReferenceCount\u003d 0\n\t\t\teFlags\u003d 1\n\t\t\tencoding\u003d \"UTF-8\"\n\t\t\teObjectToExtensionMap\u003d null\n\t\t\teObjectToIDMap\u003d HashMap\u003cK,V\u003e  (id\u003d262)\n\t\t\terrors\u003d ResourceImpl$4  (id\u003d263)\n\t\t\tforceRefresh\u003d false\n\t\t\tformat\u003d 1\n\t\t\tidToEObjectMap\u003d HashMap\u003cK,V\u003e  (id\u003d265)\n\t\t\tintrinsicIDToEObjectMap\u003d null\n\t\t\tisLoaded\u003d false\n\t\t\tisModified\u003d false\n\t\t\tisNew\u003d true\n\t\t\tmodificationTrackingAdapter\u003d null\n\t\t\toriginalPackageURIs\u003d HashMap\u003cK,V\u003e  (id\u003d266)\n\t\t\tpreserveIDs\u003d false\n\t\t\tpublicId (XMLResourceImpl)\u003d null\n\t\t\tpublicId (TranslatorResourceImpl)\u003d null\n\t\t\treadReferenceCount\u003d 1\n\t\t\trenderer\u003d EMF2DOMRenderer  (id\u003d267)\n\t\t\tresourceSet\u003d ProjectResourceSetEditImpl  (id\u003d136)\n\t\t\tsystemId (XMLResourceImpl)\u003d null\n\t\t\tsystemId (TranslatorResourceImpl)\u003d null\n\t\t\turi\u003d URI  (id\u003d271)\n\t\t\tuseZip\u003d false\n\t\t\tversionID\u003d 0\n\t\t\twarnings\u003d ResourceImpl$5  (id\u003d273)\n\t\t\txmlVersion\u003d null\n\t\t[1]\u003d null\n\t\t[2]\u003d null\n\t\t[3]\u003d null\n\tmodCount\u003d 2\n\tsize\u003d 2\n\tthis$0\u003d ProjectResourceSetEditImpl  (id\u003d136)\n\nWhen can the resource set return null (elements, 1-3) resources to load? Is the\nfix a simple null check in the line \"aResourceURI \u003d resourceToProcess.getURI();\"\nof processResourcesIfInterested?\n\nThe problem was recreated with the 6/017 IBuild. I have not tried to recreate\nwith M5 yet",
    "I am also seeing the reported NPE perhaps one in ten times that I start \neclipse. \n\nEven more concerning, I am seeing several related exceptions thrown when\nI call VirtualFolder.getUnderlyingFolder() method. We use this method often \nwithin our\nplugins to obtain the web content directory for the project. The NPE\u0027s appear \nto be related in that they \nall result from thread conflicts while accessing the edit model. Here are some \nexample\nstack traces from NPE\u0027s I have observed:\n\n(1)\n\njava.lang.IllegalStateException: Edit Model already disposed\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getEmfContex\nt(EditModel.java:906)\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getResourceS\net(EditModel.java:649)\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getResource\n(EditModel.java:666)\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryRe\nsource(EditModel.java:1492)\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryRo\notObject(EditModel.java:1473)\nat \norg.eclipse.wst.common.componentcore.internal.ModuleStructuralModel.getPrimaryR\nootObject(ModuleStructuralModel.java:64)\nat \norg.eclipse.wst.common.componentcore.internal.StructureEdit.getComponentModelRo\not(StructureEdit.java:454)\nat \norg.eclipse.wst.common.componentcore.internal.StructureEdit.findComponentByName\n(StructureEdit.java:713)\nat \norg.eclipse.wst.common.componentcore.internal.resources.VirtualResource.getProj\nectRelativePath(VirtualResource.java:111)\nat \norg.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderl\nyingFolder(VirtualFolder.java:86)\n\n(2)\n\norg.eclipse.wst.common.internal.emfworkbench.edit.ClientAccessRegistryException\n:\n!ClientAccessRegistry_ERROR_1! : \norg.eclipse.wst.common.componentcore.internal.StructureEdit@1beea90\nThis exception was generated to indicate an invalid usage of reference counts. \nPlease examine the stack trace.\nClient Access Exception of type INVALID_ACCESS_KEY \nat \norg.eclipse.wst.common.internal.emfworkbench.edit.ClientAccessRegistry.complain\n(ClientAccessRegistry.java:87)\nat \norg.eclipse.wst.common.internal.emfworkbench.edit.ClientAccessRegistry.release\n(ClientAccessRegistry.java:54)\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.releaseAcces\ns(EditModel.java:950)\nat org.eclipse.wst.common.componentcore.internal.StructureEdit.dispose\n(StructureEdit.java:426)\nat \norg.eclipse.wst.common.componentcore.internal.resources.VirtualResource.getProj\nectRelativePath(VirtualResource.java:128)\nat \norg.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderl\nyingFolder(VirtualFolder.java:86)\n\n(3)\n\norg.eclipse.wst.common.internal.emfworkbench.edit.ClientAccessRegistryException\nThis exception was generated to indicate an invalid usage of reference counts. \nPlease examine the stack trace.\nClient Access Exception of type DANGLING_REFERENCE \nat \norg.eclipse.wst.common.internal.emfworkbench.edit.ClientAccessRegistry.complain\n(ClientAccessRegistry.java:86)\nat \norg.eclipse.wst.common.internal.emfworkbench.edit.ClientAccessRegistry.complain\n(ClientAccessRegistry.java:81)\nat \norg.eclipse.wst.common.internal.emfworkbench.edit.ClientAccessRegistry.access\n(ClientAccessRegistry.java:42)\nat org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.access\n(EditModel.java:926)\nat \norg.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.getEditModelFo\nrRead(EMFWorkbenchContext.java:124)\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEdi\ntModelForRead(EditModelNature.java:49)\nat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEdi\ntModelForRead(EditModelNature.java:39)\nat \norg.eclipse.wst.common.componentcore.ModuleCoreNature.getModuleStructuralModelF\norRead(ModuleCoreNature.java:226)\nat org.eclipse.wst.common.componentcore.internal.StructureEdit.\u003cinit\u003e\n(StructureEdit.java:359)\nat \norg.eclipse.wst.common.componentcore.internal.StructureEdit.getStructureEditFor\nRead(StructureEdit.java:114)\nat \norg.eclipse.wst.common.componentcore.internal.resources.VirtualResource.getProj\nectRelativePath(VirtualResource.java:110)\nat \norg.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderl\nyingFolder(VirtualFolder.java:86)\n\nWORKAROUNDS:\n\nWe have implemented (far less than optimal) workarounds to these intermittent \nNPE\u0027s by:\n\n1. Synchronizing access to getUnderlyingFolder() within our own plugins (this \ndoesn\u0027t help\nmuch since contention is with external eclipse threads not our own)\n2. Obtaining a write lock (as opposed to a read lock) on the StructureEdit \nmodel before\ncalling getUnderlyingFolder() (This appears to be a more restrictive lock)\n3. Caching the resulting web content folder when we do succeed to avoid \nfurther errors. (This\ncode will not work if the user is allowed to change this directory on the fly -\n and I assume they can)\n4. Retry attempt loop. When the first attempt of getUnderlyingFolder() fails, \nsubsequent attempts\ntypically succeed if we dispose of the edit model and reacquire it. (Again \nsince the edit model does not \nappear to be syncronized properly, timing affects the outcome)\n\nHere is sample code to wokaround the getUnderlyingFolder() NPE\u0027s:\n\n\nimport java.util.HashMap;\n\nimport org.eclipse.core.resources.IContainer;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.wst.common.componentcore.ComponentCore;\nimport org.eclipse.wst.common.componentcore.internal.StructureEdit;\nimport org.eclipse.wst.common.componentcore.resources.IVirtualComponent;\nimport org.eclipse.wst.common.componentcore.resources.IVirtualFolder;\n\n\n\n/** Various utility method to help with projects.\n */\npublic class ProjectHelper\n{\n\t// TODO : Caching of web content dir is only a temp solution due help \nalleviate\n\t// collisions on struct edit model. It should be removed when wtp bug \nis fixed\n\t/**\n\t * Web content directory cache - don\u0027t use a weak map here, once we \nfind a valid dir\n\t * we don\u0027t want to lose it to the gc and risk further exceptions\n\t */\n\tprotected static HashMap\u003cString,IContainer\u003e webContentDirCache \u003d new \nHashMap\u003cString,IContainer\u003e();\n\t\n\t// TODO : This avoids unecessary contention on the structure edit model\n\t// at least within our own plugins. It should be removed when wtp bug \nis fixed\n\t/**\n\t * A static lock for the the web content directory method\n\t */\n\tprotected static Object webContentDirLock \u003d new Object();\n\t\n\t// TODO : A retry loop is set up as a temporary workaround for \nintermittent\n\t// wtp exceptions. It should be removed when wtp bug is fixed.\n\t/**\n\t * Retry attempts\n\t */\n\tpublic static int MAX_ATTEMPTS \u003d 5;\n\t\n    /**\n     * Get the configured web content directory for the specified webapp\n     * project.\n     * This does not check that the project is actually a WTP webapp project.\n     * @return the underlying folder, or null if unavailable.\n     */\n    public static final IContainer getWebContentDir(IProject project)\n    {\n    \t// Convert project to a unique non-mutable key for cache lookup\n    \tString projKey \u003d project.getLocation().toString();\n\n    \t// TODO : This lock avoids unecessary contention on the structure edit \nmodel\n    \t// at least within our own plugins and is also required to sync access \nto the cache.\n    \t// It should be removed when wtp bug is fixed\n    \tsynchronized(webContentDirLock)\n    \t{\n\t        IContainer cont \u003d null;\n\n\t        if (webContentDirCache.containsKey(projKey))\n\t        {\n\t        \tcont \u003d webContentDirCache.get(projKey);\n\t        }\n\t        else\n\t        {\n\t\t      System.out.println(\"project key not cached; key \u003d \" + \nprojKey);\n\t    \t\tStructureEdit moduleCore \u003d null;\n\t    \t\t\n\t    \t\t// TODO : Retry loop is a temporary workaround to \nintermittent wtp\n\t    \t\t// exceptions thrown by f.getUnderlyingFolder(). Tests \nhave shown that \n\t    \t\t// subsequent retries often succeed if we reobtain the \nlock on the structure\n\t    \t\t// edit model\n\t    \t\tboolean found \u003d false;\n\t    \t\tfor (int i \u003d 0; (!found \u0026\u0026 (i \u003c MAX_ATTEMPTS)); i++)\n\t    \t\t{\n\t\t    \t\ttry\n\t\t    \t\t{\n\t\t    \t\t\t// TODO : Try getting the structure \nedit lock sooner (and for write)\n\t\t    \t\t\t// to see if it helps alleviate \ncontention on this resource. If not\n\t\t    \t\t\t// then this may be removed.\n\t\t    \t\t\ttry\n\t\t    \t\t\t{\n\t\t    \t\t\t\tmoduleCore \u003d \nStructureEdit.getStructureEditForWrite(project);\n\t\t    \t\t\t}\n\t\t    \t\t\tcatch (Exception e)\n\t\t    \t\t\t{\n\t\t    \t\t\t\t// If can\u0027t get the lock just \ncontinue -- f.getUnderlyingFolder()\n\t\t    \t\t\t\t// will still try to at least \nget a read lock\n\t\t    \t\t\t}\n\t\t\t    \t\t\n\t\t\t\t        //TODO :  check that the given project \nis a WTP project; if not, return null\n\t\t\t\t        IVirtualComponent c \u003d\n\t\t\t\t            ComponentCore.createComponent\n(project, project.getName());\n\t\t\t\t        if (c !\u003d null)\n\t\t\t\t        {\n\t\t\t\t\t        IVirtualFolder f \u003d c.getFolder\n(\"/\");\n\t\t\t\t\t        \n\t\t\t\t\t        try\n\t\t\t\t\t        {\n\t\t\t\t\t            cont \u003d f !\u003d null ? \nf.getUnderlyingFolder() : null;\n\t\t\t\t\t            webContentDirCache.put\n(projKey,cont);\n\t\t\t\t\t            found \u003d true;\n\t\t\t\t\t        }\n\t\t\t\t\t        catch(NullPointerException e)\n\t\t\t\t\t        {\n\t\t\t\t\t\t        // null is a valid \ncache value representing a nonexistent\n\t\t\t\t\t\t        // web content folder\n\t\t\t\t\t            webContentDirCache.put\n(projKey,null);\n\t\t\t\t\t            found \u003d true;\n\t\t\t\t\t        }\n\t\t\t\t\t        catch \n(IllegalArgumentException e)\n\t\t\t\t\t        {\n\t\t\t\t\t        \t// TODO : Do to some \nsynchronization problem the virtual folder occassionally cannot be found\n\t\t\t\t\t        \t// in the module core. \nThis causes an IllegalArgumentException to be thrown\n\t\t\t\t\t        \t// by the \nf.getUnderlyingFolder() method when the f.getProjectRelativePath()\n\t\t\t\t\t        \t// returns no segments\n\t\t\t\t\t        \t// Until this wtp bug \nis fixed, reobtain a new lock and retry\n\t\t\t\t\t\t        System.out.println\n(\"Error - web content directory could not be determined, exception \u003d \" + \ne.getMessage());\n\t\t\t\t\t\t        if ((i + 1 ) \u003c \nMAX_ATTEMPTS)\n\t\t\t\t\t\t        {\n\t\t\t\t\t\t\t        \nSystem.out.println(\"Retrying operation ...\");\n\t\t\t\t\t\t        }\n\t\t\t\t\t        }\n\t\t\t\t        }\n\t\t    \t\t}\n\t\t    \t\tfinally\n\t\t    \t\t{\n\t\t    \t\t\tif (moduleCore !\u003d null)\n\t\t    \t\t\t{\n\t\t    \t\t\t\tmoduleCore.dispose();\n\t\t    \t\t\t}\n\t\t\t\t\t}\n\t    \t\t} // End of retry loop\n\t    \t\t\n\t    \t\tif (!found)\n\t    \t\t{\n\t\t\t        System.out.println(\"Error - web content \ndirectory could not be determined ...\");\n\t\t\t        // Nothing more to do, just return null and \ndon\u0027t cache so that the next call \n\t\t\t        // retries\n\t    \t\t}\n\t    \t}\n\t        return cont;\n        }\n    }\n}\n",
    "We have put quite a number of fixes since 06/17 in this area can please verify\nthis with lastest integration build. In last nights  build there has been a fix\nfor disposing read artifact edits automatically even though they are not\ndisposed in a   finally block only write artifact edits need to be explicitly\ndisposed in a finally block. If you still notice this issue please reopen this\ndefect",
    "I was able to repro using the M5 final release. I will try to repro using an \nIBuild from later than the 11th.  Here is the stack from the M5 final repro \ncase:\n\njava.lang.NullPointerException\n\tat \norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processResources\nIfInterrested(ArtifactEditModel.java:250)\n\tat \norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processLoadedRes\nources(ArtifactEditModel.java:222)\n\tat \norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e\n(ArtifactEditModel.java:129)\n\tat \norg.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e\n(ArtifactEditModel.java:93)\n\tat \norg.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModel.\u003cinit\u003e\n(JavaArtifactEditModel.java:40)\n\tat \norg.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModelFactory.cre\nateEditModelForRead(JavaArtifactEditModelFactory.java:39)\n\tat \norg.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.createEditMo\ndelForRead(EditModelRegistry.java:95)\n\tat \norg.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.createEditModel\nForRead(EMFWorkbenchContext.java:168)\n\tat \norg.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.getEditModelFor\nRead(EMFWorkbenchContext.java:121)\n\tat \norg.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEdit\nModelForRead(EditModelNature.java:49)\n\tat \norg.eclipse.wst.common.componentcore.ModuleCoreNature.getArtifactEditModelForRea\nd(ModuleCoreNature.java:312)\n\tat org.eclipse.wst.common.componentcore.ArtifactEdit.\u003cinit\u003e\n(ArtifactEdit.java:249)\n\tat org.eclipse.jst.j2ee.componentcore.EnterpriseArtifactEdit.\u003cinit\u003e\n(EnterpriseArtifactEdit.java:97)\n\tat org.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.\u003cinit\u003e\n(WebArtifactEdit.java:278)\n\tat \norg.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.getWebArtifactEditFo\nrRead(WebArtifactEdit.java:194)",
    "New with the M5 load: When I\u0027m abloe to repro the problem, I always get this\nerror in the logs at startup:\n\n*** ERROR ***: Wed Jul 13 10:27:34 MDT 2005    java.lang.NullPointerException\n    \tat\norg.eclipse.emf.ecore.resource.impl.ResourceSetImpl.getResource(ResourceSetImpl.java:316)\n    \tat\norg.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.getResource(ProjectResourceSetImpl.java:262)\n    \tat\norg.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.getResource(ResourceSetWorkbenchEditSynchronizer.java:257)\n    \tat\norg.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.processResource(ResourceSetWorkbenchEditSynchronizer.java:215)\n    \tat\norg.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.changedResource(ResourceSetWorkbenchEditSynchronizer.java:253)\n    \tat\norg.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.visit(ResourceSetWorkbenchEditSynchronizer.java:181)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:68)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:77)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:77)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:77)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:77)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:77)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:77)\n    \tat org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:49)\n    \tat\norg.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.acceptDelta(ResourceSetWorkbenchEditSynchronizer.java:128)\n    \tat\norg.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.resourceChanged(ResourceSetWorkbenchEditSynchronizer.java:81)\n    \tat\norg.eclipse.core.internal.events.NotificationManager$2.run(NotificationManager.java:276)\n    \tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1044)\n    \tat org.eclipse.core.runtime.Platform.run(Platform.java:783)\n    \tat\norg.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:270)\n    \tat\norg.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:144)\n    \tat\norg.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:180)\n    \tat\norg.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:914)\n    \tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1728)\n    \tat\norg.eclipse.core.internal.events.NotificationManager$NotifyJob.run(NotificationManager.java:38)\n    \tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)",
    "I\u0027m still able to repro this with the 0.7 release. The getResources() call in\nResourceSetImpl is returning an Iterator where the last element is null (causing\nthe null pointer on resource.getURI())  \n\nWhat are the conditions that can cause a resource to be returned as null here?\nSince this only occurs at startup (when another plugin may be accessing the\nWebArtifactEdit) could this be a timing issue where the ResourceSet is not yet\nfully initialized before calls are being made to it? Is there an equivalent to\nisInitialized() that can be made?",
    "The following exception is also in the log:\n\norg.eclipse.wst.common.internal.emf.resource.IDTranslator$NoResourceException\n\tat\norg.eclipse.wst.common.internal.emf.resource.IDTranslator.setMOFValue(IDTranslator.java:47)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOFFeature(EMF2DOMAdapterImpl.java:1362)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOFFeature(EMF2DOMAdapterImpl.java:1718)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOF(EMF2DOMAdapterImpl.java:892)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOF(EMF2DOMAdapterImpl.java:872)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOFMultiFeature(EMF2DOMAdapterImpl.java:422)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOFRootFeature(EMF2DOMAdapterImpl.java:913)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOF(EMF2DOMAdapterImpl.java:888)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOF(EMF2DOMAdapterImpl.java:872)\n\tat\norg.eclipse.wst.common.internal.emf.resource.EMF2DOMRenderer.doLoad(EMF2DOMRenderer.java:62)\n\tat\norg.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.basicDoLoad(TranslatorResourceImpl.java:141)\n\tat\norg.eclipse.wst.common.internal.emf.resource.CompatibilityXMIResourceImpl.doLoad(CompatibilityXMIResourceImpl.java:173)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.load(ResourceImpl.java:977)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.load(ResourceImpl.java:832)\n\tat\norg.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.load(TranslatorResourceImpl.java:382)\n\tat\norg.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoad(ResourceSetImpl.java:249)\n\tat\norg.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.demandLoad(ProjectResourceSetImpl.java:83)\n\tat\norg.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoadHelper(ResourceSetImpl.java:264)\n\tat\norg.eclipse.emf.ecore.resource.impl.ResourceSetImpl.getResource(ResourceSetImpl.java:305)\n\tat\norg.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.getResource(ProjectResourceSetImpl.java:262)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.WorkbenchResourceHelper.getOrCreateResource(WorkbenchResourceHelper.java:299)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getResource(EditModel.java:677)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryResource(EditModel.java:1507)\n\tat\norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryRootObject(EditModel.java:1488)\n\tat\norg.eclipse.wst.common.componentcore.internal.ModuleStructuralModel.getPrimaryRootObject(ModuleStructuralModel.java:75)\n\tat\norg.eclipse.wst.common.componentcore.internal.StructureEdit.getComponentModelRoot(StructureEdit.java:491)\n\tat\norg.eclipse.wst.common.componentcore.internal.StructureEdit.findComponentByName(StructureEdit.java:750)\n\tat\norg.eclipse.wst.common.componentcore.internal.resources.VirtualResource.getProjectRelativePath(VirtualResource.java:110)\n\tat\norg.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderlyingFolder(VirtualFolder.java:85)\n\tat\norg.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderlyingFolders(VirtualFolder.java:89)\n\tat\norg.eclipse.jst.common.jdt.internal.classpath.FlexibleProjectContainer.\u003cinit\u003e(FlexibleProjectContainer.java:157)\n\tat\norg.eclipse.jst.j2ee.internal.web.classpath.WebAppContainer.\u003cinit\u003e(WebAppContainer.java:48)",
    "Dropped a fix for the first exception....    Please open seperate bugs if other\nproblem exist....",
    "I have not been able to repro this since the fix",
    "Closing."
  ],
  "commentCreationDates": [
    "2005-07-01T20:07:08+02:00",
    "2005-07-07T18:05:26+02:00",
    "2005-07-12T17:50:59+02:00",
    "2005-07-13T17:07:49+02:00",
    "2005-07-13T18:34:40+02:00",
    "2005-08-23T16:46:33+02:00",
    "2005-08-23T16:55:41+02:00",
    "2005-09-06T17:30:08+02:00",
    "2006-06-19T16:41:50+02:00",
    "2006-09-26T16:09:43+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processResourcesIfInterrested",
          "source": "ArtifactEditModel.java:249"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processLoadedResources",
          "source": "ArtifactEditModel.java:221"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e",
          "source": "ArtifactEditModel.java:127"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e",
          "source": "ArtifactEditModel.java:91"
        },
        {
          "method": "org.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModel.\u003cinit\u003e",
          "source": "JavaArtifactEditModel.java:40"
        },
        {
          "method": "org.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModelFactory.createEditModelForRead",
          "source": "JavaArtifactEditModelFactory.java:39"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.createEditModelForRead",
          "source": "EditModelRegistry.java:95"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.createEditModelForRead",
          "source": "EMFWorkbenchContext.java:168"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.getEditModelForRead",
          "source": "EMFWorkbenchContext.java:121"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead",
          "source": "EditModelNature.java:49"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ModuleCoreNature.getArtifactEditModelForRead",
          "source": "ModuleCoreNature.java:310"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ArtifactEdit.\u003cinit\u003e",
          "source": "ArtifactEdit.java:247"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.EnterpriseArtifactEdit.\u003cinit\u003e",
          "source": "EnterpriseArtifactEdit.java:97"
        },
        {
          "method": "org.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.\u003cinit\u003e",
          "source": "WebArtifactEdit.java:278"
        },
        {
          "method": "org.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.getWebArtifactEditForRead",
          "source": "WebArtifactEdit.java:194"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "102513",
      "date": "2005-07-01T20:07:08+02:00",
      "product": "Web Tools",
      "component": "wst.common",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Edit Model already disposed",
      "elements": [
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getEmfContext",
          "source": "EditModel.java:906"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getResourceSet",
          "source": "EditModel.java:649"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getResource",
          "source": "EditModel.java:666"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryResource",
          "source": "EditModel.java:1492"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryRootObject",
          "source": "EditModel.java:1473"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ModuleStructuralModel.getPrimaryRootObject",
          "source": "ModuleStructuralModel.java:64"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.StructureEdit.getComponentModelRoot",
          "source": "StructureEdit.java:454"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.StructureEdit.findComponentByName",
          "source": "StructureEdit.java:713"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.resources.VirtualResource.getProjectRelativePath",
          "source": "VirtualResource.java:111"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderlyingFolder",
          "source": "VirtualFolder.java:86"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "102513",
      "date": "2005-07-07T18:05:26+02:00",
      "product": "Web Tools",
      "component": "wst.common",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processResourcesIfInterrested",
          "source": "ArtifactEditModel.java:250"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.processLoadedResources",
          "source": "ArtifactEditModel.java:222"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e",
          "source": "ArtifactEditModel.java:129"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ArtifactEditModel.\u003cinit\u003e",
          "source": "ArtifactEditModel.java:93"
        },
        {
          "method": "org.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModel.\u003cinit\u003e",
          "source": "JavaArtifactEditModel.java:40"
        },
        {
          "method": "org.eclipse.jst.common.jdt.internal.integration.JavaArtifactEditModelFactory.createEditModelForRead",
          "source": "JavaArtifactEditModelFactory.java:39"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.edit.EditModelRegistry.createEditModelForRead",
          "source": "EditModelRegistry.java:95"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.createEditModelForRead",
          "source": "EMFWorkbenchContext.java:168"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.EMFWorkbenchContext.getEditModelForRead",
          "source": "EMFWorkbenchContext.java:121"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModelNature.getEditModelForRead",
          "source": "EditModelNature.java:49"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ModuleCoreNature.getArtifactEditModelForRead",
          "source": "ModuleCoreNature.java:312"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.ArtifactEdit.\u003cinit\u003e",
          "source": "ArtifactEdit.java:249"
        },
        {
          "method": "org.eclipse.jst.j2ee.componentcore.EnterpriseArtifactEdit.\u003cinit\u003e",
          "source": "EnterpriseArtifactEdit.java:97"
        },
        {
          "method": "org.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.\u003cinit\u003e",
          "source": "WebArtifactEdit.java:278"
        },
        {
          "method": "org.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.getWebArtifactEditForRead",
          "source": "WebArtifactEdit.java:194"
        }
      ],
      "number": 2,
      "commentIndex": 3,
      "bugId": "102513",
      "date": "2005-07-13T17:07:49+02:00",
      "product": "Web Tools",
      "component": "wst.common",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.getResource",
          "source": "ResourceSetImpl.java:316"
        },
        {
          "method": "org.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.getResource",
          "source": "ProjectResourceSetImpl.java:262"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.getResource",
          "source": "ResourceSetWorkbenchEditSynchronizer.java:257"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.processResource",
          "source": "ResourceSetWorkbenchEditSynchronizer.java:215"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.changedResource",
          "source": "ResourceSetWorkbenchEditSynchronizer.java:253"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.visit",
          "source": "ResourceSetWorkbenchEditSynchronizer.java:181"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:68"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:77"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:77"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:77"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:77"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:77"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:77"
        },
        {
          "method": "org.eclipse.core.internal.events.ResourceDelta.accept",
          "source": "ResourceDelta.java:49"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.acceptDelta",
          "source": "ResourceSetWorkbenchEditSynchronizer.java:128"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.ResourceSetWorkbenchEditSynchronizer.resourceChanged",
          "source": "ResourceSetWorkbenchEditSynchronizer.java:81"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager$2.run",
          "source": "NotificationManager.java:276"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1044"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:783"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager.notify",
          "source": "NotificationManager.java:270"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager.broadcastChanges",
          "source": "NotificationManager.java:144"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.broadcastPostChange",
          "source": "Workspace.java:180"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.endOperation",
          "source": "Workspace.java:914"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1728"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager$NotifyJob.run",
          "source": "NotificationManager.java:38"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 3,
      "commentIndex": 4,
      "bugId": "102513",
      "date": "2005-07-13T18:34:40+02:00",
      "product": "Web Tools",
      "component": "wst.common",
      "severity": "major"
    },
    {
      "exceptionType": "org.eclipse.wst.common.internal.emf.resource.IDTranslator$NoResourceException",
      "elements": [
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.IDTranslator.setMOFValue",
          "source": "IDTranslator.java:47"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOFFeature",
          "source": "EMF2DOMAdapterImpl.java:1362"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOFFeature",
          "source": "EMF2DOMAdapterImpl.java:1718"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOF",
          "source": "EMF2DOMAdapterImpl.java:892"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOF",
          "source": "EMF2DOMAdapterImpl.java:872"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOFMultiFeature",
          "source": "EMF2DOMAdapterImpl.java:422"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOFRootFeature",
          "source": "EMF2DOMAdapterImpl.java:913"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.primUpdateMOF",
          "source": "EMF2DOMAdapterImpl.java:888"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMAdapterImpl.updateMOF",
          "source": "EMF2DOMAdapterImpl.java:872"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMRenderer.doLoad",
          "source": "EMF2DOMRenderer.java:62"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.basicDoLoad",
          "source": "TranslatorResourceImpl.java:141"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.CompatibilityXMIResourceImpl.doLoad",
          "source": "CompatibilityXMIResourceImpl.java:173"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.load",
          "source": "ResourceImpl.java:977"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.load",
          "source": "ResourceImpl.java:832"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.load",
          "source": "TranslatorResourceImpl.java:382"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoad",
          "source": "ResourceSetImpl.java:249"
        },
        {
          "method": "org.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.demandLoad",
          "source": "ProjectResourceSetImpl.java:83"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoadHelper",
          "source": "ResourceSetImpl.java:264"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.getResource",
          "source": "ResourceSetImpl.java:305"
        },
        {
          "method": "org.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.getResource",
          "source": "ProjectResourceSetImpl.java:262"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.WorkbenchResourceHelper.getOrCreateResource",
          "source": "WorkbenchResourceHelper.java:299"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getResource",
          "source": "EditModel.java:677"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryResource",
          "source": "EditModel.java:1507"
        },
        {
          "method": "org.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getPrimaryRootObject",
          "source": "EditModel.java:1488"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.ModuleStructuralModel.getPrimaryRootObject",
          "source": "ModuleStructuralModel.java:75"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.StructureEdit.getComponentModelRoot",
          "source": "StructureEdit.java:491"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.StructureEdit.findComponentByName",
          "source": "StructureEdit.java:750"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.resources.VirtualResource.getProjectRelativePath",
          "source": "VirtualResource.java:110"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderlyingFolder",
          "source": "VirtualFolder.java:85"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.resources.VirtualFolder.getUnderlyingFolders",
          "source": "VirtualFolder.java:89"
        },
        {
          "method": "org.eclipse.jst.common.jdt.internal.classpath.FlexibleProjectContainer.\u003cinit\u003e",
          "source": "FlexibleProjectContainer.java:157"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.web.classpath.WebAppContainer.\u003cinit\u003e",
          "source": "WebAppContainer.java:48"
        }
      ],
      "number": 4,
      "commentIndex": 6,
      "bugId": "102513",
      "date": "2005-08-23T16:55:41+02:00",
      "product": "Web Tools",
      "component": "wst.common",
      "severity": "major"
    }
  ],
  "groupId": "102513",
  "bugId": "102513",
  "date": "2005-07-01T20:07:08+02:00",
  "product": "Web Tools",
  "component": "wst.common",
  "severity": "major"
}