{
  "comments": [
    "AJDT uses the WeavingURLClassLoader to enable load-time weaving in Eclipse.  \nIf the projects that the user is attempting to load-time weave refer to a 1.4 \nversion of the JRE the following exception occurs:\n\nwarning Register definition failed -- (SAXException) System property \norg.xml.sax.driver not specified\nSystem property org.xml.sax.driver not specified\norg.xml.sax.SAXException: System property org.xml.sax.driver not specified\n\tat org.xml.sax.helpers.XMLReaderFactory.createXMLReader(Unknown Source)\n\tat org.aspectj.weaver.loadtime.definition.DocumentParser.parse\n(DocumentParser.java:80)\n\tat \norg.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions\n(ClassLoaderWeavingAdaptor.java:148)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize\n(ClassLoaderWeavingAdaptor.java:109)\n\tat org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass\n(WeavingURLClassLoader.java:106)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.defineClass\n(ExtensibleURLClassLoader.java:80)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.findClass\n(ExtensibleURLClassLoader.java:46)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)",
    "Try -Dorg.xml.sax.parser\u003dorg.apache.xerces.parsers.SAXParser",
    "Unfortunately the SAXParser class isn\u0027t there in the 1.4 library and I \ncouldn\u0027t find a suitable replacement.  I wondered whether it might be possible \nto change the use of the SAXParser to use a DocumentBuilder instead.  E.g. to \nread an XML file into an org.w3c.dom.Document do the following:\n\nInputStream fileContents \u003d .....\nDocumentBuilder builder \u003d DocumentBuilderFactory.newInstance\n().newDocumentBuilder();\nbuilder.setErrorHandler(new AOPXMLErrorHandler());\nDocument document \u003d builder.parse(fileContents);\t\n\n\nAOPXMLErrorHandler might look like this:\n\n\t/**\n\t * Error handler class for AOP XML parsing exceptions\n\t */\n\tprivate static class AOPXMLErrorHandler extends DefaultHandler {\n\t\t\n\t\t/**\n\t\t * Throws a more detailed exception when an error occurs \nparsing a file.\n\t\t * @param exception - the Exception input\n\t\t * @throws SAXException - more detained Exception\n\t\t * @see org.xml.sax.ErrorHandler#error\n(org.xml.sax.SAXParseException)\n\t\t */\n\t\tpublic void error(SAXParseException exception) throws \nSAXException {\n\t\t\tthrow new AOPXMLException(\n\t\t\t\t\"A problem occurred parsing aop.xml file \" //\n$NON-NLS-1$\n\t\t\t\t\t+ exception.getSystemId().substring(\n\t\t\t\t\t\texception.getSystemId().indexOf\n(\"file:///\") + 8) //$NON-NLS-1$\n\t\t\t\t\t+ \"[\" //$NON-NLS-1$\n\t\t\t\t\t+ exception.getLineNumber()\n\t\t\t\t\t+ \",\" //$NON-NLS-1$\n\t\t\t\t\t+ exception.getColumnNumber()\n\t\t\t\t\t+ \"]\"  //$NON-NLS-1$\n\t\t\t\t\t+ System.getProperty\n(\"line.separator\") //$NON-NLS-1$\n\t\t\t\t\t+ exception.getMessage().substring(\n\t\t\t\t\t\texception.getMessage().indexOf\n(\u0027:\u0027) + 2));\n\t\t}\n\t\t\n\t\t\n\t\t/**\n\t\t * Throws a more detailed exception when a warning occurs while\n\t\t * parsing a file\n\t\t * @param exception - inout\n\t\t * @throws SAXException - more detailed output\n\t\t * @see org.xml.sax.ErrorHandler#warning\n(org.xml.sax.SAXParseException)\n\t\t */\n\t\tpublic void warning(SAXParseException exception) throws \nSAXException {\n\t\t\terror(exception);\n\t\t}\n\n\t\t\n\t\t/**\n\t\t * Throws a more detailed exception when a fatal error occurs \nwhile\n\t\t * parsing a file \n\t\t * @param exception - input\n\t\t * @throws SAXException - more detailed output\n\t\t * @see org.xml.sax.ErrorHandler#fatalError\n(org.xml.sax.SAXParseException)\n\t\t */\n\t\tpublic void fatalError(SAXParseException exception) throws \nSAXException\t{\n\t\t\terror(exception);\n\t\t}\n\t\t\t\t\n\t}\n\n\nThese snippets are taken from org.eclipse.ajdt.internal.launching.LTWUtils in \nthe AJDT UI plug-in.",
    "can\u0027 t we package Xerces from Apache website ?\n\nI am not sure about the DOM API you suggest but I think you \u0027ll have the same\nissue ie using DOM will require a DOM implementation as well (and even more\nprobably a SAX one as well as lower layer)\n\n\n",
    "Andy to discuss with Sian.",
    "Ok, had a discussion on this.  I really don\u0027t want to get into shipping a copy\nof xerces.jar.  The DocumentBuilder stuff Sian describes in her comment is in my\n1.4 vm and my 1.5 vm.  Alex, is there a real problem with using this seemingly\ncommon interface? (I\u0027m not an XML parsing expert by any means...)\n\nI don\u0027t mind asking command line compiler users to have an XML parser around\n(although even that seems unfriendly if there is support in the base JDK) but we\ncan\u0027t expect AJDT users to conjure one up.  Eclipse used to ship xerces but\ndecided to get out of that game in the 3.0 timeframe.",
    "can someone try with\n            XMLReader xmlReader \u003d\njavax.xml.parsers.SAXParserFactory.newInstance().newSAXParser().getXMLReader();\n// XMLReaderFactory.createXMLReader();\n\nin DocumentParser:81\n\nI don\u0027t want to use DOM (unless we want to have yet more memory for LTW)",
    "I tried:\n\n XMLReader xmlReader \u003d\njavax.xml.parsers.SAXParserFactory.newInstance().newSAXParser().getXMLReader();\n\nand it works fine (as far as I can tell).\n\nShall I change it Alex?",
    "sure go ahead\nthis looks like this one will use the bundled factory or something",
    "change committed. will wait for Sian to confirm its ok with Eclipse 3.0 before\nclosing.",
    "Sian confirmed the fix is OK for Eclipse 3.0 users.  Closing this bug."
  ],
  "commentCreationDates": [
    "2005-10-18T11:49:50+02:00",
    "2005-10-20T00:10:05+02:00",
    "2005-10-25T11:44:03+02:00",
    "2005-10-25T11:53:38+02:00",
    "2005-10-28T15:49:38+02:00",
    "2005-11-03T13:52:58+01:00",
    "2005-11-03T15:26:46+01:00",
    "2005-11-07T13:14:58+01:00",
    "2005-11-07T14:50:32+01:00",
    "2005-11-07T15:06:12+01:00",
    "2005-11-08T11:00:13+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.xml.sax.SAXException",
      "message": "System property org.xml.sax.driver not specified",
      "elements": [
        {
          "method": "org.xml.sax.helpers.XMLReaderFactory.createXMLReader",
          "source": "Unknown Source"
        },
        {
          "method": "org.aspectj.weaver.loadtime.definition.DocumentParser.parse",
          "source": "DocumentParser.java:80"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions",
          "source": "ClassLoaderWeavingAdaptor.java:148"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize",
          "source": "ClassLoaderWeavingAdaptor.java:109"
        },
        {
          "method": "org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass",
          "source": "WeavingURLClassLoader.java:106"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.defineClass",
          "source": "ExtensibleURLClassLoader.java:80"
        },
        {
          "method": "org.aspectj.weaver.ExtensibleURLClassLoader.findClass",
          "source": "ExtensibleURLClassLoader.java:46"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.ClassLoader.loadClassInternal",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "112914",
      "date": "2005-10-18T11:49:50+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "112914",
  "bugId": "112914",
  "date": "2005-10-18T11:49:50+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}