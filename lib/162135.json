{
  "comments": [
    "I\u0027m getting the below exception whenever the @Around is uncommented:\n\npackage com.foliofn.infra.logging;\n\nimport java.lang.reflect.Field;\n\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.NDC;\nimport org.apache.log4j.spi.LoggingEvent;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\n\n@Aspect\npublic class ExceptionMessageNdcAdderC {\n\n    static final String SEPERATOR \u003d \" - \";\n\n    private Logger log \u003d Logger.getLogger(getClass());\n\n    @Pointcut(\"call(Throwable+.new(String, ..)) \u0026\u0026 this(caller) \u0026\u0026 args(exceptionMessage) \u0026\u0026 if()\")\n    public static boolean exceptionInitializer(Object caller, String exceptionMessage) {\n        return isNdcEmpty();\n    }\n    \n    // Comment out just the next line and the error does not occur.\n    @Around(\"exceptionInitializer(caller, exceptionMessage)\")\n    public Object annotateException(ProceedingJoinPoint jp, Object caller, String exceptionMessage) {\n//        return jp.proceed(new Object[]{caller, ndcAnnotateMessage(exceptionMessage)});\n        return null;\n    }\n    \n    private static boolean isNdcEmpty() {\n        return NDC.getDepth() \u003d\u003d 0;\n    }\n    \n    private String ndcAnnotateMessage(String message) {\n        return  formatNdcAnnotatedMessage(getNcdValue(), message);\n    }\n    \n    private String getNcdValue() {\n        LoggingEvent logEvent \u003d new LoggingEvent(\"anything\", log, Level.INFO, \"anything\", null);\n        return logEvent.getNDC();\n    }\n    \n    static String formatNdcAnnotatedMessage(String ndcValue, String message) {\n        return ndcValue + SEPERATOR + message;\n    }\n    \n}\n\n\n------\norg.aspectj.weaver.BCException\nat org.aspectj.weaver.bcel.BcelRenderer.visit(BcelRenderer.java:237)\nat org.aspectj.weaver.ast.Literal.accept(Literal.java:29)\nat org.aspectj.weaver.bcel.BcelRenderer.recur(BcelRenderer.java:153)\nat org.aspectj.weaver.bcel.BcelRenderer.renderTest(BcelRenderer.java:119)\nat org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions(BcelAdvice.java:587)\nat org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:3050)\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:270)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:684)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:471)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2825)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:502)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:321)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:192)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class com.foliofn.infra.logging.ExceptionThrowingClassForTest extends java.lang.Object:\n  public org.apache.log4j.Logger log\n  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 [Synthetic]\n  public void \u003cinit\u003e():\n                    ALOAD_0     // Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest; this   (line 5)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.\u003cinit\u003e())\n    |               ALOAD_0     // Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest; this   (line 7)\n    |               ALOAD_0     // Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest; this\n    |               INVOKEVIRTUAL java.lang.Object.getClass ()Ljava/lang/Class;\n    |               INVOKESTATIC org.apache.log4j.Logger.getLogger (Ljava/lang/Class;)Lorg/apache/log4j/Logger;\n    |               PUTFIELD com.foliofn.infra.logging.ExceptionThrowingClassForTest.log Lorg/apache/log4j/Logger;\n    |               RETURN   (line 5)\n    constructor-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.\u003cinit\u003e())\n  end public void \u003cinit\u003e()\n\n  public void throwRuntimeException(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 9:194\n:\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwRuntimeException(java.lang.String))\n    |               ALOAD_1     // Ljava/lang/String; message   (line 10)\n    |               ASTORE_2\n    |               GETSTATIC com.foliofn.infra.logging.ExceptionThrowingClassForTest.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart;\n    |               ALOAD_0\n    |               ACONST_NULL\n    |               ALOAD_2\n    |               INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;\n    |               ASTORE_3\n    |               ATHROW\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwRuntimeException(java.lang.String))\n  end public void throwRuntimeException(String)\n\n  public void throwRuntimeException(String, Throwable)    org.aspectj.weaver.MethodDeclarationLineNumber: 13:306\n:\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwRuntimeException(java.lang.String, java.lang.Throwable))\n    |               NEW java.lang.RuntimeException   (line 14)\n    |               DUP\n    |               ALOAD_1     // Ljava/lang/String; message\n    |               ALOAD_2     // Ljava/lang/Throwable; nested\n    | constructor-call(void java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable))\n    | |             INVOKESPECIAL java.lang.RuntimeException.\u003cinit\u003e (Ljava/lang/String;Ljava/lang/Throwable;)V\n    | constructor-call(void java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable))\n    |               ATHROW\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwRuntimeException(java.lang.String, java.lang.Throwable))\n  end public void throwRuntimeException(String, Throwable)\n\n  public void throwException(String) throws java.lang.Exception    org.aspectj.weaver.MethodDeclarationLineNumber: 17:444\n:\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwException(java.lang.String))\n    |               NEW java.lang.Exception   (line 18)\n    |               DUP\n    |               ALOAD_1     // Ljava/lang/String; message\n    | constructor-call(void java.lang.Exception.\u003cinit\u003e(java.lang.String))\n    | |             INVOKESPECIAL java.lang.Exception.\u003cinit\u003e (Ljava/lang/String;)V\n    | constructor-call(void java.lang.Exception.\u003cinit\u003e(java.lang.String))\n    |               ATHROW\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwException(java.lang.String))\n  end public void throwException(String) throws java.lang.Exception\n\n  public void throwExceptionExtension(Object) throws java.lang.RuntimeException    org.aspectj.weaver.MethodDeclarationLineNumber: 21:559\n:\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwExceptionExtension(java.lang.Object))\n    |               NEW com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension   (line 22)\n    |               DUP\n    |               ALOAD_0     // Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest; this\n    |               ALOAD_1     // Ljava/lang/Object; someObject\n    | constructor-call(void com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension.\u003cinit\u003e(com.foliofn.infra.logging.ExceptionThrowingClassForTest, java.lang.Object))\n    | |             INVOKESPECIAL com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension.\u003cinit\u003e (Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest;Ljava/lang/Object;)V\n    | constructor-call(void com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension.\u003cinit\u003e(com.foliofn.infra.logging.ExceptionThrowingClassForTest, java.lang.Object))\n    |               ATHROW\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwExceptionExtension(java.lang.Object))\n  end public void throwExceptionExtension(Object) throws java.lang.RuntimeException\n\n  public void throwExceptionExtension(Object, Throwable) throws java.lang.RuntimeException    org.aspectj.weaver.MethodDeclarationLineNumber: 25:705\n:\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwExceptionExtension(java.lang.Object, java.lang.Throwable))\n    |               NEW com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension   (line 26)\n    |               DUP\n    |               ALOAD_0     // Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest; this\n    |               ALOAD_1     // Ljava/lang/Object; someObject\n    |               ALOAD_2     // Ljava/lang/Throwable; t\n    | constructor-call(void com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension.\u003cinit\u003e(com.foliofn.infra.logging.ExceptionThrowingClassForTest, java.lang.Object, java.lang.Throwable))\n    | |             INVOKESPECIAL com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension.\u003cinit\u003e (Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest;Ljava/lang/Object;Ljava/lang/Throwable;)V\n    | constructor-call(void com.foliofn.infra.logging.ExceptionThrowingClassForTest$ExceptionExtension.\u003cinit\u003e(com.foliofn.infra.logging.ExceptionThrowingClassForTest, java.lang.Object, java.lang.Throwable))\n    |               ATHROW\n    method-execution(void com.foliofn.infra.logging.ExceptionThrowingClassForTest.throwExceptionExtension(java.lang.Object, java.lang.Throwable))\n  end public void throwExceptionExtension(Object, Throwable) throws java.lang.RuntimeException\n\n  static final RuntimeException init$_aroundBody0(com.foliofn.infra.logging.ExceptionThrowingClassForTest, String, org.aspectj.lang.JoinPoint):\n                    NEW java.lang.RuntimeException\n                    DUP\n                    ALOAD_1\n                    INVOKESPECIAL java.lang.RuntimeException.\u003cinit\u003e (Ljava/lang/String;)V   (line 10)\n                    ARETURN\n  end static final RuntimeException init$_aroundBody0(com.foliofn.infra.logging.ExceptionThrowingClassForTest, String, org.aspectj.lang.JoinPoint)\nend public class com.foliofn.infra.logging.ExceptionThrowingClassForTest\n\npublic class com.foliofn.infra.logging.ExceptionThrowingClassForTest$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:\n  public void \u003cinit\u003e(Object[]):\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.\u003cinit\u003e ([Ljava/lang/Object;)V\n                    RETURN\n  end public void \u003cinit\u003e(Object[])\n\n  public Object run(Object[]):\n                    ALOAD_0\n                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;\n                    ASTORE_2\n                    ALOAD_2\n                    BIPUSH 0\n                    AALOAD\n                    CHECKCAST com.foliofn.infra.logging.ExceptionThrowingClassForTest\n                    ALOAD_2\n                    BIPUSH 1\n                    AALOAD\n                    CHECKCAST java.lang.String\n                    ALOAD_2\n                    BIPUSH 2\n                    AALOAD\n                    CHECKCAST org.aspectj.lang.JoinPoint\n                    INVOKESTATIC com.foliofn.infra.logging.ExceptionThrowingClassForTest.init$_aroundBody0 (Lcom/foliofn/infra/logging/ExceptionThrowingClassForTest;Ljava/lang/String;Lorg/aspectj/lang/JoinPoint;)Ljava/lang/RuntimeException;\n                    ARETURN\n  end public Object run(Object[])\nend public class com.foliofn.infra.logging.ExceptionThrowingClassForTest$AjcClosure1\n\nwhen implementing on shadow constructor-call(void java.lang.RuntimeException.\u003cinit\u003e(java.lang.String))\nwhen weaving type com.foliofn.infra.logging.ExceptionThrowingClassForTest\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[Q:\\eclipse.workspaces\\folio2\\.metadata\\.plugins\\org.eclipse.ajdt.core\\fn_infra.aj.generated.lst] #Files\u003d18",
    "Actually, the error appears to be releated to the if() in the exceptionInitializer pointcut. If I remove the \"\u0026\u0026 if()\" and change the signature the error is eliminated (with the full @Around adviced uncommented)",
    "thanks for the small testcase -  I have recreated this.  I\u0027d probably use code style aspects if I were you, the if() support in annotation style is a bit buggy.",
    "Thanks for recreating! Too bad about @Aspect if()\u0027s. We are using only @Aspect syntax. Is there a category/search criteria for @Aspect specific bugs so I can be on the lookout for gotchas?\n",
    "tests for this have been committed (they are currently commented out in Ajc153tests)"
  ],
  "commentCreationDates": [
    "2006-10-24T21:23:31+02:00",
    "2006-10-24T21:26:24+02:00",
    "2006-10-25T11:23:49+02:00",
    "2006-10-25T13:18:39+02:00",
    "2006-10-30T10:23:54+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.aspectj.weaver.BCException",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelRenderer.visit",
          "source": "BcelRenderer.java:237"
        },
        {
          "method": "org.aspectj.weaver.ast.Literal.accept",
          "source": "Literal.java:29"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelRenderer.recur",
          "source": "BcelRenderer.java:153"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelRenderer.renderTest",
          "source": "BcelRenderer.java:119"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions",
          "source": "BcelAdvice.java:587"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure",
          "source": "BcelShadow.java:3050"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.implementOn",
          "source": "BcelAdvice.java:270"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implementMungers",
          "source": "Shadow.java:684"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Shadow.java:471"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "BcelClassWeaver.java:2825"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:502"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:115"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1574"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1525"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1305"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1127"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:321"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:192"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:887"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:244"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:199"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:170"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "162135",
      "date": "2006-10-24T21:23:31+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "162135",
  "bugId": "162135",
  "date": "2006-10-24T21:23:31+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}