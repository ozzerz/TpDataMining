{
  "comments": [
    "I am using the ACORD Industry standard XML schema. Takes too long to open\nand load the file. CPU utilisation is 100%, most taken by the Javaw.exe and runs\nout of memory..\n\n\nfollowing is the log \n\n!ENTRY org.eclipse.ui 4 4 Feb 01, 2006 12:56:04.151\n!MESSAGE Unhandled event loop exception\n\n!ENTRY org.eclipse.ui 4 0 Feb 01, 2006 12:56:10.180\n!MESSAGE java.lang.OutOfMemoryError\n\n!ENTRY System Bundle 0 0 Feb 01, 2006 12:57:12.760\n!MESSAGE FrameworkEvent.ERROR\n!STACK 0\njava.lang.OutOfMemoryError\n\tat org.eclipse.osgi.internal.resolver.StateHelperImpl.buildReferences(StateHelperImpl.java:205)\n\tat org.eclipse.osgi.internal.resolver.StateHelperImpl.buildReferences(StateHelperImpl.java:189)\n\tat org.eclipse.osgi.internal.resolver.StateHelperImpl.sortBundles(StateHelperImpl.java:176)\n\tat org.eclipse.core.runtime.adaptor.BundleStopper.stopBundles(BundleStopper.java:59)\n\tat org.eclipse.core.runtime.adaptor.EclipseAdaptor.frameworkStopping(EclipseAdaptor.java:551)\n\tat org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:457)\n\tat org.eclipse.osgi.framework.internal.core.SystemBundle$1.run(SystemBundle.java:182)\n\tat java.lang.Thread.run(Thread.java:816)\n\n\nWe understand ACORD schema xsd file is arge, but this should not happen.",
    "Suman,\n\nYou\u0027ve provided no information at all that I could use the reproduce a problem, not even a URL for a schema.  \n\nIn any event, no matter how fast or how small I make things, you can always find a sample that\u0027s too big and you can always want it to be faster.  As such, this isn\u0027t a bugzilla that has a clear end point, but rather one that could keep me busy forever.  \n\nSince there is no resource to do performance tuning of XSD, if that\u0027s important for your project, your project will need to commit resource toward that.  I\u0027ll return this defect until those commitments are forthcoming.\n\nNote that your stack trace doesn\u0027t even point at the XSD model.",
    "Created an attachment (id\u003d35087)\nACORD Messaging standard  XSD file\n\nEd -- I did attach the ACORD schema file.  Attaching again for your reference. All you have to do is open the file using XML schema editor in the RAD tooling. \n\nFolks in Hursley have been running into this problem off and on. Stack trace in out-of-memory cases at times is not useful. ",
    "The schema took pretty long to load but it opened fine with the sample editor provided by the XSD project.  I\u0027m using EMF/XSD 2.2 with just the platform installed.",
    "\nThere are 3 problems we noticed with the XSD model  \n\na) Large memory foot print \nb) Takes long (approx 1 minutes) to load ACORD schema.   On a bare bone machine (with no other process running) it takes about 32-26 seconds to load as noticed by Ed in the meeting.  \n\nc) Updates to schema objects are slow  -- Schema model keeps the associated DOM tree in synch with changes to  XSDModel object  through notifications. We noticed a  lot of time is spent in this area.  \n \nNote :  We have done some optimization in our code to turn off notifications  before making several updates to schema and turn them on after updates are complete  and re-synch model objects with DOM tree but it is still slow.\n",
    "Ed, \nI did gross measurement  for memory foot print and  the time it takes to load ACORD schema.   Only message broker and lotus notes were running on the system.  The schema was loaded using the following code.  There was only one project in the workspace which contained the ACORD xsd file and none of the editors were open.\n\npublic void testXSDLoad(IFile xsdFile) {\n\t\ttry {\n\n\t\t long befTime \u003d System.currentTimeMillis(); \n\t\t    \n\t\tSystem.out.println(\"Time bef Load : \" +  befTime);\n\t\tXSDSchema xsdSchema \u003d CoreModelResourceHelper.loadXSDFile(resourceSet, xsdFile);\n\t\tSystem.out.println(\"Main Schema : \" + xsdSchema  + \"Schema Location : \" + xsdSchema.getSchemaLocation());\n\t\t\t\n\t\t long aftTime \u003d System.currentTimeMillis(); \n\t\t\t\n\t\tSystem.out.println(\"Time aft load: \" +  System.currentTimeMillis()  + \" elapsed Time : \" + (aftTime - befTime) );\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t\nAverage load time was :  29 - 32 sec\n\nTime bef Load : 1144445383474\nMain Schema : org.eclipse.xsd.impl.XSDSchemaImpl@34e234e2 (element: [xsd:schema: null]) (document: [#document: null], schemaLocation: platform:/resource/SimpleTest/sourceFiles/sourceFiles/acord-pc-v1_7_0-ns-nodoc-codes.xsd, targetNamespace: http://www.ACORD.org/standards/PC_Surety/ACORD1.7.0/xml/, attributeFormDefault: unqualified, elementFormDefault: unqualified, finalDefault: [], blockDefault: [], version: 1.7.0)Schema Location : platform:/resource/SimpleTest/sourceFiles/sourceFiles/acord-pc-v1_7_0-ns-nodoc-codes.xsd\nTime aft load: 1144445412626 elapsed Time : 29152\n\nSubsequent loads of schema were faster in the range of 18-20 seconds\n\nMachine : T40 (1.6 GHz) thinkpad with 2G of RAM\n\nACORD schema Size : 1.5 M\nNet Memory usage :    1,822, 236K - 1,707,288K \u003d 114,948K \u003d 115M approx\n\nNote : 115 M would include the memory used by the XSD plugin code also. \n\nI will create a separate defect for the large memory foot print to load ACORD schema and will send you screen shots of the task manager showing memory usage \nbefore and after loading ACORD schema. \n\n\n\n",
    "Suman,\n\nThe initial load will count loading the schema for schemas, which is very big.  I get the sense you\u0027ve included this in your measurement.  I also get the sense you are measuring this in your own context so you are not directly measuring just the XSD model.\n\nI\u0027ll again remind you that since our small team can\u0027t contain the feature work to make XSD smaller and faster, I will be looking to the community to donate their time and resource toward helping with this problem. \n\nWithout a benchmark for comparison, the measurements below seem very reasonable to me given a schema with 30,000 lines."
  ],
  "commentCreationDates": [
    "2006-02-21T17:20:27+01:00",
    "2006-02-21T18:31:53+01:00",
    "2006-02-21T18:44:21+01:00",
    "2006-02-21T19:24:08+01:00",
    "2006-04-06T18:04:37+02:00",
    "2006-04-25T22:40:19+02:00",
    "2006-04-25T23:13:46+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.OutOfMemoryError",
      "elements": [
        {
          "method": "org.eclipse.osgi.internal.resolver.StateHelperImpl.buildReferences",
          "source": "StateHelperImpl.java:205"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateHelperImpl.buildReferences",
          "source": "StateHelperImpl.java:189"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateHelperImpl.sortBundles",
          "source": "StateHelperImpl.java:176"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.BundleStopper.stopBundles",
          "source": "BundleStopper.java:59"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseAdaptor.frameworkStopping",
          "source": "EclipseAdaptor.java:551"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.shutdown",
          "source": "Framework.java:457"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.SystemBundle$1.run",
          "source": "SystemBundle.java:182"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:816"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "128849",
      "date": "2006-02-21T17:20:27+01:00",
      "product": "MDT",
      "component": "XSD",
      "severity": "normal"
    }
  ],
  "groupId": "128849",
  "bugId": "128849",
  "date": "2006-02-21T17:20:27+01:00",
  "product": "MDT",
  "component": "XSD",
  "severity": "normal"
}