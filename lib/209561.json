{
  "comments": [
    "The basic structure of the adapt methods are:\n\n1  public static EProperty adaptProperty(EStructuralFeature eStructuralFeature)\n2  {\n3    List adapters \u003d eStructuralFeature.eAdapters();\n4    Object result \u003d EcoreUtil.getAdapter(adapters, EProperty.class);\n5    if (result !\u003d null)\n6    {\n7      return (EProperty)result;\n8    }\n9    else\n10    {\n11     EProperty eProperty \u003d SDOFactory.eINSTANCE.createEProperty();\n12      adapters.add(eProperty);\n13      return eProperty;\n14    }\n15  }\n\nIf multiple threads access these at the same time with the same parameters, then the following exception occurs:\n\nException in thread \"Thread-33\" java.lang.NullPointerException\n\tat org.eclipse.emf.ecore.util.EcoreUtil.getAdapter(EcoreUtil.java:150)\n\nThis is because one thread is in the else block of line 12 which is resizing the list while another is doing the line 4 getAdapter code which will find a null.\n\nSo code such as \"dataObj.getType().getProperty(\"XPath\")\" being run simultaneously in multiple threads can trigger a NPE.\n\n\n\nThe attached PI has a recreate.  Just execute RunMe.java.  You may need to adjust the threadCount variable to a higher number depending on your machine speed to ensure a collision.\n\nA proposed solution would be to synchronize the adapt methods on their input parameter to prevent simultaneous adapting of the same object:\n\n  public static EProperty adaptProperty(EStructuralFeature eStructuralFeature)\n  {\n    synchronized (eStructuralFeature) {\n      List adapters \u003d eStructuralFeature.eAdapters();\n      Object result \u003d EcoreUtil.getAdapter(adapters, EProperty.class);\n      if (result !\u003d null)\n      {\n        return (EProperty)result;\n      }\n      else\n      {\n        EProperty eProperty \u003d SDOFactory.eINSTANCE.createEProperty();\n        adapters.add(eProperty);\n        return eProperty;\n      }\n    }\n  }",
    "Created an attachment (id\u003d82709)\nPI for recreate\n\n",
    "It\u0027s not thread safe indeed but I won\u0027t add a synchronize to a static method and I won\u0027t make changes that will impact performance for all existing clients.  It\u0027s been this way for many years, so clients with multi-threading needs will need to take action to deal with synchronization in their use cases.  One good way to accomplish that is to pre-cache the adapters on the Ecore metadata *before* starting to use the SDO metadata across multiple threads. This will before much better than a synchronizing the addition of adapters.  For example, visiting all EClassifiers of an EPackage and the EStructuralFeatures of each EClass, and calling adaptType and adaptProperty on each is a good way for generated metadata.",
    "Thanks for the suggestion of how to handle this case."
  ],
  "commentCreationDates": [
    "2007-11-12T21:56:42+01:00",
    "2007-11-12T22:02:17+01:00",
    "2007-11-12T22:04:31+01:00",
    "2007-11-12T22:40:07+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.emf.ecore.util.EcoreUtil.getAdapter",
          "source": "EcoreUtil.java:150"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "209561",
      "date": "2007-11-12T21:56:42+01:00",
      "product": "EMF",
      "component": "XML/XMI",
      "severity": "normal"
    }
  ],
  "groupId": "209561",
  "bugId": "209561",
  "date": "2007-11-12T21:56:42+01:00",
  "product": "EMF",
  "component": "XML/XMI",
  "severity": "normal"
}