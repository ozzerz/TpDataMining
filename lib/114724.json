{
  "comments": [
    "AbstractReconciler$Listener.inputDocumentAboutToBeChanged has an unsynchronized\ncall to DirtyRegionQueue.purgeQueue which is not thread safe. The\nBackgroundThread has synchronized access, but if the Listener happens to invoke\npurgeQueue while the background thread is in removeNextDirtyRegion you\u0027ll get\nthis exception:\n\n     [java] java.lang.ArrayIndexOutOfBoundsException: -1\n     [java] \tat java.util.ArrayList.remove(Unknown Source)\n     [java] \tat\norg.eclipse.jface.text.reconciler.DirtyRegionQueue.removeNextDirtyRegion(DirtyRegionQueue.java:101)\n     [java] \tat\norg.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:196)",
    "quite true... thanks.",
    "FYI I was able to fix this by wrapping the fDirtyRegionQueue.purgeQueue() call \naround line 271 of AbstractReconciler.java like this:\n\nsynchronized (fDirtyRegionQueue) { \n   fDirtyRegionQueue.purgeQueue();\n}\n",
    "Please verify using the next N- or I-build whether our fix fixes your problem.",
    "Verified using I20051213-0010"
  ],
  "commentCreationDates": [
    "2005-11-02T07:00:13+01:00",
    "2005-11-02T08:42:58+01:00",
    "2005-11-02T18:43:07+01:00",
    "2005-11-09T13:50:39+01:00",
    "2005-12-13T10:58:29+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "-1      [java]",
      "elements": [
        {
          "method": "java.util.ArrayList.remove",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "114724",
      "date": "2005-11-02T07:00:13+01:00",
      "product": "Platform",
      "component": "Text",
      "severity": "major"
    }
  ],
  "groupId": "114724",
  "bugId": "114724",
  "date": "2005-11-02T07:00:13+01:00",
  "product": "Platform",
  "component": "Text",
  "severity": "major"
}