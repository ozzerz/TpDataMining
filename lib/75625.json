{
  "comments": [
    "I\u0027d like to have a UI factory which can be attached to property types. With the\nfactory, it should be possible to create something like preferences pages to\nedit the attributes of an EObject with only a few lines of code.\n\nThe tabular property editor should be the default but I should also be able to\noveride it with a custom editor which can create the UI elements using the\nfactory above.\n\nExample:\n\n// Editor for the EClass\nEmfEditor editor \u003d EmfUIFactory.createEditor (MyEmfPackage.eINSTANCE.getFoo());\nComposite parent;\n// An UI element to edit the EAttribute name of Foo\n*.emf.ui.Text editor \u003d (...Text)EmfUIFactory.createEditor (editor,\nMyEmfPackage.eINSTANCE.getFoo_Name());\n// Get a nice label for the attribute (\"Name:\")\nswt.Label label \u003d editor.addLabel (parent);\n// Gets the real editor control (swt.Text in this case)\nswt.Control control \u003d editor.addUI (parent);\n\n// String of the label\nString title \u003d editor.getTitel();\n// Content of the editor control (type of the EAttribute)\nObject value \u003d editor.getValue();\n\n// Add a model to the editor\nFoo foo \u003d ... get a foo from somewhere ...\neditor.setModel (foo);\n\nThe UI element should work as expected (updates to the model should update the\nUI element).",
    "This sounds like a variation of the properties view and hence something that can\nbe done without requiring anything that\u0027s not already present in the framework.\n We won\u0027t have time to contain something like this in the 2.1 development cycle,\nso unless you prototype this yourself and contribute the proposed design to the\ncommunity, this will have to wait until after 2.1.  We\u0027ll reconsider the request\nafter 2.1 is completed (around the middle of next year).",
    "How about basing the whole properties editor on the new databinding API?",
    "Aaron,\n\nWe\u0027ll consider it if someone contributes toward the solution.   Our 3.0 development cycle will be focused on Java 5.0 support so we likely won\u0027t have time to spend on the new binding APIs.",
    "Created an attachment (id\u003d62331)\nfirst cut at plug-in adding EMF support to data binding\n\nPeople seem to be interested in using EMF models with the new data binding framework.  This is a first cut at EMF support for data binding, not well tested and incomplete, but might serve as a start for someone who would like to contribute this to Eclipse.",
    "Created an attachment (id\u003d63144)\nupdated plug-in, adds EMFObservableMap\n\nThis version adds an observable map (this is important if you want to use ObservableMapLabelProvider), and based on feedback from Ed, the SET notification for lists is now handled (completely untested!), and lists can be created based on an EStructuralFeature instead of just an EReference.",
    "Just to be clear, I won\u0027t have the time to finish this work.  I did this in my \"spare time\" to get others started.",
    "Created an attachment (id\u003d63347)\nPatches to experiment with data binding in the Ecore editor\n\nI was playing with the new support.  So I defined a properties view-like thing that could be used to display the same type of thing as a properties view but using more like a generated form.  I hooked this into the Ecore editor to be able to play with it.\n\nGetting this to work well will take a lot more work than we have time for in this release cycle, but I\u0027ll keep experimenting as time permits.  \n\nThe EMFObservables do work, but we really need to be using commands to update the model so that undo is supported rather than using eSet directly.  We also will have issues with the fact that we need to know the multiplicity from the feature not just the type of that feature so that we know if the value will be a list of that type or just a single value of that type.  Perhaps the feature should be considered the type of the observable...",
    "(In reply to comment #7)\n\u003e The EMFObservables do work, but we really need to be using commands to update\n\u003e the model so that undo is supported rather than using eSet directly.\n\nOn the data binding side we\u0027ve been saying that undo can be accomplished at the binding level.  If done there it would be technology independent.  Would that work or would you still need this at the observable level?\n\n",
    "I could certainly imagine someone using something like that directly, but I think we need it at the observables level in a generated EMF editor because it has a command stack that keeps track of dirtiness and the item providers act as factories for creating the command so that you can specialize the behavior of what happens when you modify something.  And with the transaction framework, you need to ensure that changes happen as part of a transaction... ",
    "(In reply to comment #9)\nI\u0027m working on an EMFUIFactory that is able to create UI elements that modify features of EObject using a TransactionalEditingDomain. It\u0027s already able to modify  attributes , single reference(with an IContentProposalProvider) and multiple references. \ni\u0027m quite new to EMF and definitly in short of time. So is there someone more comfortable with EMF that have the time to help me or at least check my code ?",
    "We can try to help review the code if you attach it, but only if by attaching it you are intending to contribute it to EPL.  I.e., we may copy anything from it into  EMF and redistribute it under the EPL license.  So if that\u0027s okay, create an attachment, make note that you are contributing it, and then we\u0027ll have a look.",
    "Created an attachment (id\u003d70678)\nupdated plug-in, adds EditingDomain support for values\n\nHere is the next clue... :-)\n\nI only added EditingDomain support to observable values - similar changes need to be done to lists and maps.\n\nWith this updated plug-in and Ed\u0027s patch (slightly modified to pass in the editing domain), the editor will now become dirty when you make changes, and you can undo.",
    "(In reply to comment #8)\n\u003e On the data binding side we\u0027ve been saying that undo can be accomplished at the\n\u003e binding level.\n\nThis is a possibility, but until we understand more of this, I would recommend handling undo at the model level.  Even more so if the model level supports a notion of undo like EMF does.",
    "Created an attachment (id\u003d70833)\nupdated plug-in, adds EditingDomain support for lists\n\nI just finished to add list support to emf binding.\nBoris, i have not inserted any fireListChange because the adapter already handles it. (i think, is it correct?)\n\nEd, i don\u0027t know how to retrive the result from a RemoveCommand (look at org.eclipse.emf.ecore.databinding.internal.EMFObservableList) .Have you any suggestion ?\n\n--\ngiulio",
    "Guilio, thanks for taking this further!  Good to see others contributing too.\n\nThe implementation looks good to me, and the attached adapter should be firing the correct events. I\u0027m not sure about clear() - have you checked that passing the same list twice to the RemoveCommand will actually clear that list?\n\nReturning correct results from the mutators would be good though. I hope Ed can help with that.",
    "(In reply to comment #15)\n\u003e Guilio, thanks for taking this further!  Good to see others contributing too.\n\u003e \n\u003e The implementation looks good to me, and the attached adapter should be firing\n\u003e the correct events. I\u0027m not sure about clear() - have you checked that passing\n\u003e the same list twice to the RemoveCommand will actually clear that list?\n\u003e \n\u003e Returning correct results from the mutators would be good though. I hope Ed can\n\u003e help with that.\n\u003e \n\nThank you boris, i\u0027m proud to help the eclipse community, even if i have to learn more and more about the framework. \n\nI hope in 2 days to send a first \"release\" of my EMFUIFactory... All in all this bug is about it.\n\nI hope in your review for the code and the design.\n\nHope u can understand my english!",
    "Created an attachment (id\u003d73835)\nupdated plug-in, add support for EMF move command\n\nAdd support to EMFObservableList for Move command",
    "The work on EMFUiFactory is going on in my spare time.\nI had to modify ObservableListContentProvider at line 50 to use insert method instead of the add one on AbstractListViewer too.\n\nif (viewer instanceof AbstractListViewer) {\n  ((AbstractListViewer) viewer).insert(entry.getElement(), entry.getPosition());\n}\n\nI have also some problem about the notification of events from the EMF model. I\u0027ll contact Ed on the newsgroup.\n\n\n\n",
    "I\u0027ve downloaded the latest plug-in and I\u0027m having pretty good success except when moving an item on a list.  When I move an item in a list, the list viewer is not properly refreshed.  One of the items affected by the move ends up at the bottom of the list.  Calling viewer.refresh() fixes the display, but I have a case where calling refresh is not possible.",
    "look at comment #18\n",
    "Ah, now I understand comment #18.  My code is working with the fix.",
    "I filed bug 198603 for the required modification in ObservableListContentProvider.",
    "Is the code from the latest patch above checked in to CVS yet?",
    "No, we\u0027ve not yet split HEAD for 2.4 development.  It\u0027s still being used for 2.3.1.",
    "I just published an svn repository containg a first \"release\" of the api i developed for creating form based editor for emf models. u\u0027ll find it at https://labs.vobelisk.com/svn-public\n\nThe api is contained in org.eclipse.emf.ui.forms and under org.eclipse.emf.explamples.library.formeditor u\u0027ll find a small editor able to modifiy .extlibrary file. (some property of Library object only)\n\nThe code is not well documented at the moment and the example incomplete . \n\nThe most interesting code for this bug is contained in LibraryPage.java that actually represents the only code you have to write down to develop your editor.\n\ni hope to have more time in next weeks to work on it and to complete the example editor. And that someone can get a try to it.\n\n\n--\nGiulio\n\n",
    "Giulio,\n\nI\u0027ve not had a chance to look at this, but I wanted to express my appreciation for sharing this work!  Do you intend this to be treated as an EPL contribution?",
    "(In reply to comment #26)\n\u003e Giulio,\n\u003e \n\u003e I\u0027ve not had a chance to look at this, but I wanted to express my appreciation\n\u003e for sharing this work!  Do you intend this to be treated as an EPL\n\u003e contribution?\n\u003e \n\nfor sure!",
    "i just committed on svn the last updates to EMF form factory bundle that i\u0027m developing. I made several code cleanup, in EmfFormEditor especially.\nI updated the example editor for the Library to make a contentContribution to the Project Explorer view. This could provide a usefull example to who wants to bridge CNF and EMF.\n\nA small consideration, i saw from the svn server logs that some (about 15) people checked out the project i published. but i did not receive any comment except from Ed but he did not see at the code. I think that or my code is orrible, or this work is usefull only for me and my co-workers :)\n\nanyway.. soon with the help of another italian guy, Lorenzo Bettini, we could expand this work providing out-of-the-box validation to the EmfForms.\n\n\n\n",
    "(In reply to comment #28)\n\n\u003e A small consideration, i saw from the svn server logs that some (about 15)\n\u003e people checked out the project i published. but i did not receive any comment\n\u003e except from Ed but he did not see at the code. I think that or my code is\n\u003e orrible, or this work is usefull only for me and my co-workers :)\n\u003e \n\nSorry for not giving feedback but I really really appreciate what your are doing here but I had no time to test things.",
    "Giulio,\nyesterday I was playing with the plugins from svn and I really like the Library example - it works(!) and looks like forms :)\n\nI think, that we would get more valuable feedback after turning the library example into some JET templates, so everyone could try them with their own models+requirements. Does anyone already have any ideas how the default generated forms editor should look like?\n\nI guess, the EAttributes with basic types should be represented as Text fields,\nEAttributes to EDataTypes as combo boxes,\nEReference as combo boxes (or maybe selection dialogs?),\nELists as swt Lists.\nWhat about EPackages and EClasses in editor? As tabs, or maybe Forms sections?\n\n",
    "(In reply to comment #30)\n\nIdeally, you would want a model that describes your UI elements and how they relate to your data model.  A raw version of such a model can be generated from your data model using defaults like the ones you gave, but a UI generated from a raw model is almost always unusable.\n\nSome example questions:\nHow do you know in which order to present editable attributes?\nHow do you decide between combos and lists, or dialogs for picking from a list?\nWhich parts need to be grouped together, and should they appear in a SWT Group, or a tab?)\nWhich parts of your model should be presented in a tree, with which roots, and following which associations?\nIf you are displaying a table, which attributes appear in its columns?",
    "(In reply to comment #31)\n\u003e How do you know in which order to present editable attributes?\n\u003e How do you decide between combos and lists, or dialogs for picking from a list?\n\u003e Which parts need to be grouped together, and should they appear in a SWT Group,\n\u003e or a tab?)\n\u003e Which parts of your model should be presented in a tree, with which roots, and\n\u003e following which associations?\n\u003e If you are displaying a table, which attributes appear in its columns?\n\u003e \n\nThese are good questions - very the same like the ones asked on emf newsgroup regarding the currently generated editor.\nTrying to answer them and embed these answers in model, we could build very strong Model2GUI tool. However this scares me a bit, specially because I don\u0027t see any better way than mappings or new annotations and unless there was some comfortable visual editor, developers would have to dig some nasty doc\u0027s first.\n\nBut given the constraints I guess it\u0027s easier to provide just templates and a single implementation being an example of integration between emf and databinding. Incidentally some people could use it - similarly like it\u0027s with current sample emf editor.\n\nbtw, I wonder how much of EMF editors are grown on the sample one, and how much written from scratch, specially in RCP.\n\n",
    "I agree with Boris. I think that form based ui needs to be more customizable than the default emf editor. A model that maps the datamodel to the ui (like GMF does) can be the way. If someone wants to start the development of such tool, i\u0027m here.\n",
    "(In reply to comment #32)\n\u003e btw, I wonder how much of EMF editors are grown on the sample one, and how much\n\u003e written from scratch, specially in RCP.\n\nDon\u0027t underestimate how much people will rely on the guidance they get from examples.\n\nFor example, take a look at the list of top-level toolbars and even menus in an early version of Europa with all projects installed: bug 175047 comment 7. I bet that many of these started with the \"Hello World\" example plug-in. Another one that I blame on an example plug-in can be seen at https://bugs.eclipse.org/bugs/attachment.cgi?id\u003d57088. I bet that most of these started with the \"Plug-in with an incremental project builder\" example.\n\nThe lesson I take from this is that if an example does not hold up to the standards we expect from production code, it should be made very obvious to the developers who start with that example. For example, you could choose ugly colors - some of the SWT snippets are like that, and I am quite sure this is intentional.\n\nIn the context of a generated example editor for an EMF model, I would suggest taking a simplistic approach because heuristics, no matter how \"smart\", will always get it wrong. I believe it is best to make this obvious in the generated default UI. For example, the layout should be so ugly that developers are forced to think about which layout makes sense in their situation, such as only using one column that gets really long even if you could break it into two columns automatically. As another example, a new section could be created for each attribute, forcing developers to think about which attributes should be grouped together.\n\nIt will be a disservice to end-users if the generated editor looks \"good enough\" to a typical developer because chances are very high that it will not be good enough for real end users but the developer won\u0027t notice.\n\nIt is a different story if you use a model for the UI that maps the data model to UI elements, and if that model is easy to edit. (Ideally, in a visual editor.)",
    "I agree with the sentiments of Comment 34.\nI am on my second EMF-based project, at two different clients. There are a lot of common issues that the two have faced, but the overwhelmingly obvious one is that the requirements specify \"oddities\" in the forms-based editors that no generated example would ever have gotten right. So I am not a big fan of having any kind of \"default\" generated editor - I\u0027d think a few good snippets would serve better as examples.\n",
    "Most of the things we design for EMF we ensure are supported for dynamic models as well as statically generated ones and of course for dynamic ones we have to rely on some mechanism that\u0027s fully automated.  I could imagine, as Boris points out some type of forms model to declaratively describe the desired form and trying to do a good job guessing at a default version of a forms model (based on syntactic knowledge of the Ecore model) as a starting point which clients can then tailor based on their deeper semantic understanding of their own model.",
    "A year or two ago, I experimented with an EMF meta-model that described the fields of a form like (not using eclipse.ui.forms) editor.  From the meta-model, I was able to create a model of the editor, and then an engine would dynamically build the editor at run-time.  We have a very scaled down version of this idea in production and it has proven very useful.  Does this sound related / interesting?",
    "Hi,\n\nI\u0027m thinking backwards.\n\nI just came accross the need to use EMF objects in my RCP app and decided to try databinding (first time I try to use it). When I hit the EMFObservable wall, my first reaction was:\n\n1. Suppose you have:\n      public interface MyEClass extends EObject { ... }\n\n2. Run \"Generate Model\" and you get:\n      public class MyEClassImpl extends EObjectImpl { ... }\n\n3. Wrap it into a bean:\n      public class MyEClassBean extends MyEClassImpl { ... }\n\nIn step (3) I override getters/setters to fire property change events. Then I thought \"there must be an EMF generator for this\" and started searching in the net for such a plugin...arriving here.\n\nI just thought I\u0027d put the idea on the table. Can someone more knowledgeable comment on the pros/cons of the approaches? If the idea is any good, I might take it up on myself to write such a generator.\n",
    "(In reply to comment #38)\n\u003e Hi,\n\u003e \n\u003e I\u0027m thinking backwards.\n\u003e \n\u003e I just came accross the need to use EMF objects in my RCP app and decided to\n\u003e try databinding (first time I try to use it). When I hit the EMFObservable\n\u003e wall, my first reaction was:\n\u003e \n\u003e 1. Suppose you have:\n\u003e       public interface MyEClass extends EObject { ... }\n\u003e \n\u003e 2. Run \"Generate Model\" and you get:\n\u003e       public class MyEClassImpl extends EObjectImpl { ... }\n\u003e \n\u003e 3. Wrap it into a bean:\n\u003e       public class MyEClassBean extends MyEClassImpl { ... }\n\u003e \n\u003e In step (3) I override getters/setters to fire property change events. Then I\n\u003e thought \"there must be an EMF generator for this\" and started searching in the\n\u003e net for such a plugin...arriving here.\n\u003e \n\u003e I just thought I\u0027d put the idea on the table. Can someone more knowledgeable\n\u003e comment on the pros/cons of the approaches? If the idea is any good, I might\n\u003e take it up on myself to write such a generator.\n\nIf you use the latest patch above, you don\u0027t need the bean wrapper that fires property change events. Every EObject impl already implements Notifier and fires events, so the latest EMFObservables (in the patch) works very well, including using the EMF.edit CommandStack to give you undo/redo and dirty state management \"for free.\"\n\n",
    "(In reply to comment #17)\n\u003e Created an attachment (id\u003d73835) [details]\n\u003e updated plug-in, add support for EMF move command\n\u003e \n\u003e Add support to EMFObservableList for Move command\n\u003e \n\nI\u0027ve just encountered something in the patch EMFObservableValue that I think could use some adjustment. EMFObservableValue.getValueType() is returning the feature\u0027s EType. This causes the default conversion mechanism in UpdateStrategy to fail. UpdateSrtategy.createConverter() defaults to a DefaultConverter (no conversion) if either of the observables\u0027 getValueType() is not a Class (see lines 98-99 of UpdateStrategy).\nWouldn\u0027t is make more sense for EMFObservableValue.getValueType() to return the Java class that is represented by the feature it is observing?",
    "(In reply to comment #40)\n\u003e lines 98-99 of UpdateStrategy).\n\u003e Wouldn\u0027t is make more sense for EMFObservableValue.getValueType() to return the\n\u003e Java class that is represented by the feature it is observing?\n\u003e \n\n[Sorry, I was too quick on the trigger finger there]\nAre there any \"non-obvious\" ramifications of doing that instead of returning the EType? I\u0027ve alrady changed my local copy and it seems to allow the default conversions to function - I just want to know if there is any other functionality of Data Binding that uses getValueType() that I should test.\n",
    "Since I would generally expect and want all this to work even for a model for which no code is generated, relying on there being existing a Java class doesn\u0027t seem like a good thing.  It\u0027s been a while since I looked at this, but I remember being a bit frustrated that I could find out the type of an IObservableValue, but not what feature is being observed; that made me start to think that maybe the feature itself should be returned as the type, which of course seems odd but provides more information than you\u0027d have otherwise, i.e., you know the multiplicity as well as the type.  \n\nSorry that we don\u0027t have time to look at this closely just yet.  :-(",
    "(In reply to comment #42)\n\u003e Since I would generally expect and want all this to work even for a model for\n\u003e which no code is generated, relying on there being existing a Java class\n\u003e doesn\u0027t seem like a good thing.  It\u0027s been a while since I looked at this, but\n\u003e I remember being a bit frustrated that I could find out the type of an\n\u003e IObservableValue, but not what feature is being observed; that made me start to\n\u003e think that maybe the feature itself should be returned as the type, which of\n\u003e course seems odd but provides more information than you\u0027d have otherwise, i.e.,\n\u003e you know the multiplicity as well as the type.  \n\nBut doing so effectively disables the important feature of automatic conversion between observable values. I don\u0027t think many applications will be happy about having to specify explicit converters for data-bound fields that should/could provide it transparently.\nIf EMFObservableValue wanted to expose the EStructuralFeature it could provide another method to do so [public EStructuralFeature getObservedFeature()].\nAs it is currently, neither one of us is happy - it returns an EType, neither a Class nor an EStructuralFeature.\n\n\n\u003e Sorry that we don\u0027t have time to look at this closely just yet.  :-(\n\nHerein lies the danger of not having this code in CVS - forking potential.",
    "IObservableValue.getType() is spec\u0027d to return instanceof of Object, not Class, for exactly the reason given by Ed - you might not always have a Java class, or there may be cases where the value type is more accurately described by something else.\n\nI would suggest creating a subclass of UpdateValueStrategy that can look up default converters based on EMF-specific type information, see UpdateStrategy.createConverter().\n\nIf users want to be able to pass null to a bind() call, a subclass of DataBindingContext should do the trick - see DataBindingContext.createModelToTargetUpdateValueStrategy() etc.",
    "(In reply to comment #44)\n\u003e IObservableValue.getType() is spec\u0027d to return instanceof of Object, not Class,\n\u003e for exactly the reason given by Ed - you might not always have a Java class, or\n\u003e there may be cases where the value type is more accurately described by\n\u003e something else.\n\u003e \n\u003e I would suggest creating a subclass of UpdateValueStrategy that can look up\n\u003e default converters based on EMF-specific type information, see\n\u003e UpdateStrategy.createConverter().\n\u003e \n\u003e If users want to be able to pass null to a bind() call, a subclass of\n\u003e DataBindingContext should do the trick - see\n\u003e DataBindingContext.createModelToTargetUpdateValueStrategy() etc.\n\u003e \n\nI thought of the subclassing options, but I find it a bit onerous to insist that if an app is using EMFObservables that it also be forced to use a specialized UpdateStrategy and DataBindingContext just to get the simple auto conversions that are supposed to be \"free.\" In fact, having to override DataBindingContext can be problematic in app \"frameworks\" where the context is passed in to specific composite classes. IOW, the class setting up the bindings for specific fields may not have the luxury of creating its own DataBindingContext. Even subclassing UpdateStrategy is not as simple as it should be because of the use of private methods (for example, getConverterMap() should be protected so a subclass can add its own converters).\nDon\u0027t get me wrong, I completely understand the suggestions; I just think part of the goal/beauty of Data Binding is that you can provide your own observables and use the rest as-is.\n\nAn alternative that I thought of would work, but would require a change to UpdateStrategy: expose a method to register arbitrary converters to its converterMap. That way, EMFObservables could add some EType-specific converters and still return Etype to its EMFObservableValue.getValueType(). Unfortuantely, that can\u0027t work without a change to UpdateStrategy, which obviously must wait until a new Eclipse release :-(\n",
    "Sorry for the notice, but this bug is about building an EMF form  :) not just emf databinding.\n\nProbably should be better to open a separate bug for this.",
    "Yes, I agree with Boris comments.  I\u0027d definitely like the EMF binding integration to use EMF\u0027s metadata.  Keep in mind that for EDataTypes, we\u0027d expect the EcoreUtil.createFromString/convertToString methods to be used.  One might have a data type represented as an int, but for which you want hex or binary numerals as the way users serialize and interact with them, which is supported by virtue of specializing the factory.  There\u0027s also Diagnostician.validate which can be used to validate that a value is a correct value of the data type, e.g., a string that must be an XML Schema NCName can automatically be validated.  All these things are possible via a single reflective specialization based on using EMF\u0027s metadata...",
    "(In reply to comment #45)\n\u003e Even subclassing UpdateStrategy is not as simple as it\n\u003e should be because of the use of private methods (for example, getConverterMap()\n\u003e should be protected so a subclass can add its own converters).\n\nYou are confusing the private implementation (converterMap) with the API (createConverter). I don\u0027t see why a subclass cannot use its own implementation to look up converters, delegating to the super implementation if it cannot find anything.  In fact, if I understand Ed correctly, EMF already has generic capabilities for conversion and validation which could not adequately be handled by putting specific converters into a map that is keyed by specific value types.\n\n\u003e Don\u0027t get me wrong, I completely understand the suggestions; I just think part\n\u003e of the goal/beauty of Data Binding is that you can provide your own observables\n\u003e and use the rest as-is.\n\nThe data binding framework is extensible in many directions, and as a result of that, unfortunately, sometimes not as easy to use as something which does not have that extensibility.  I am always interested in suggestions for how to make it easier for clients while keeping the extensibility.  (Even though it may seem otherwise as I am arguing against your suggestions. Please keep them coming!)",
    "(In reply to comment #48)\n\u003e (In reply to comment #45)\n\u003e \u003e Even subclassing UpdateStrategy is not as simple as it\n\u003e \u003e should be because of the use of private methods (for example, getConverterMap()\n\u003e \u003e should be protected so a subclass can add its own converters).\n\u003e \n\u003e You are confusing the private implementation (converterMap) with the API\n\u003e (createConverter). I don\u0027t see why a subclass cannot use its own implementation\n\u003e to look up converters, delegating to the super implementation if it cannot find\n\u003e anything.  In fact, if I understand Ed correctly, EMF already has generic\n\u003e capabilities for conversion and validation which could not adequately be\n\u003e handled by putting specific converters into a map that is keyed by specific\n\u003e value types.\n\nAs I\u0027m sure you know, inheritance and sublcassing is not the only mechanism available to implement extension. I was suggesting that UpdateStrategy could directly support extension by allowing other code to register converters with it. That would, IIUC, alleviate the need to also subclass DataBindingContext because it would not be necessarily to subclass UpdateStrategy.\nFor example, this is the approach that Jakarta BeanUtils library does, allow custom converters to be registered instead of requiring subclassing to use them. See http://commons.apache.org/beanutils/commons-beanutils-1.7.0/docs/api/org/apache/commons/beanutils/package-summary.html#conversion.defining\n\nTo me, this is a case where that kind of extension would be a little cleaner and more convenient for EMF\u0027s purposes. It would allow client developers to use just 1 specialized class (EMFObservables) instead of 3 (EMFObservables, EMFUpdateStrategy, and EMFDataBindingContext).\n\n\u003e The data binding framework is extensible in many directions, and as a result of\n\u003e that, unfortunately, sometimes not as easy to use as something which does not\n\u003e have that extensibility.  I am always interested in suggestions for how to make\n\u003e it easier for clients while keeping the extensibility.  (Even though it may\n\u003e seem otherwise as I am arguing against your suggestions. Please keep them\n\u003e coming!)\n\nAnd even though it seems that I am complaining, I am very satisfied so far with both Data Binding and the EMF implementation that is part of this bug. I feel the decision above is an opportunity to clean up part of Data Binding - hopefully I\u0027ve been articulate and coherent and you will agree :-)\n\n",
    "Eric, let\u0027s take the dicussion about extensibility of UpdateStrategy out of this bug.  I have filed bug 203492 and am interested to hear concrete suggestions from you there.",
    "(In reply to comment #5)\n\u003e Created an attachment (id\u003d63144) [details]\n\u003e updated plug-in, adds EMFObservableMap\n\u003e \n\u003e This version adds an observable map (this is important if you want to use\n\u003e ObservableMapLabelProvider), and based on feedback from Ed, the SET\n\u003e notification for lists is now handled (completely untested!), and lists can be\n\u003e created based on an EStructuralFeature instead of just an EReference.\n\u003e \n\nIn using this patch, I\u0027ve come across a variant need that I wonder if anyone else sees value in.\nFor some cases, it is necessary (for example, in a label provider) to access a feature of a child object of some \"root\" EObject. The patch as currently implemented contains various interface implementations that take a EStructuralFeature and produce results based on that. What I\u0027m thinking of is a chain of EStructuralFeatures that would be used to specify nested properties; let\u0027s call it FeatureChain. A FeatureChain is essentially a list of EStructuralFeatures along with a method to resolve all the way down to the last element. With this, we could have, for example, an EMFObservableValue whose doGet() follows the whole FeatureChain instead of just getting the value of a single feature. I think many of the EMF\u003c-\u003eDataBinding implementation classes could take advantage of FeatureChain.\nAny thoughts?",
    "I suppose it could be even fancier and could involve combining the values  from many features.  For example, the signature of a EOperation depends on the names of all the types.  In such cases, one would need to attach adapters to all objects involved in reaching the correct values so a change to any object or even changes to the objects being traversed to reach the final values will update the label.",
    "(In reply to comment #51)\n\u003e In using this patch, I\u0027ve come across a variant need that I wonder if anyone\n\u003e else sees value in.\n\nYes: See bug 196785 [DataBinding] Support for nested attributes in tables.\n\n(In reply to comment #52)\nIf the values being combined are from the same features for every element in the table, the recommended way to use the ObservableMapLabelProvider would be to initialize it listing all of those features as if the table had many more columns and then overriding getText() to return the combined value. This will ensure that all the required listeners (aka adapters) are attached.\n\nIf you need to combine different features depending on which element you are looking at, I would suggest implementing a \"smart\" IObservableMap that attaches listeners automatically.  If anyone is interested, I have written a subclass of EObjectImpl which together with an additional template when generating (getGenFeature.pre.insert.javajetinc) gives you automatic dependency tracking for any EObject generated in this manner. I.e., when using ComputedValue and similar classes, you can just call getters on EMF objects and the resulting dependencies will be tracked for you automatically.",
    "FYI, on the JDB side we\u0027ve released some conformance tests[1] for asserting the behavior of JDB abstractions.  It would be nice to get some feedback on these and to also help you all out with testing of EMF observables.  If you have any questions let myself or Boris know.\n\n[1] http://fire-change-event.blogspot.com/2007/09/jface-data-binding-conformance-tests.html",
    "Good day,\n\nFirst, thanks for your splendid efforts, I shall be following this topic with interest.\n\nI just downloaded the library.formeditor example from SVN HEAD but LibraryPage seems to reference some missing files:\n\norg.eclipse.emf.ui.forms.parts.MasterBlock;\norg.eclipse.emf.ui.forms.viewers.contributions.CreateChildContributionItem;\n\nAlso, BookDetail needs to pass a TransactionalEditingDomain to AttributeEditorPart.setEditingDomain(...).\n\nI had a couple of comments about implementation:\n\n1. EMFObservableList calls XxxCommand constructors directly; I believe the recommended approach is to call the static factory methods Command XxxCommand.create(EditingDomain, ...), because this allows the EMF.Edit generated item providers to construct custom XxxCommand implementations (which can include various side-effects and referential integrity adjustments). EMFObservableMap is almost there by calling EditingDomain.createCommand(XxxCommand.class, ...) but in my experience the static XxxCommand.create(EditingDomain, ...) methods are easier to use because it\u0027s clearer what the parameters should be. CommandParameter can be hard to understand. \n\n2. EMFObservableMap is still calling eSet() - I presume this is an oversight?\nBTW I\u0027d be happy to contribute/collaborate as I have a hobby application to develop that could really benefit from this technology.\n\nCheers,\n\nAdrian Price",
    "Adrian,\n\nMarcelo and Dave will be working on the EMF 2.3 appendix for the second edition of the EMF book for the next few months (probably until January) so we don\u0027t have a lot spare cycles to help out much.  I\u0027m hoping to find some time in the next few weeks for a full review of what\u0027s all being contributed, so your contributions will be more than welcome!  (You\u0027re comments sound to be dead on.)",
    "hi adrian,\n\n  the code on svn is quite out of date. i\u0027m working (only in spare time, unfortunately) to fix and improve differents things.\nif u would like to see at wich point i\u0027m, i\u0027ll try today to commit a working version of the packages. \n\nand for the comments, i think are boths correct. i\u0027ll fix asap.\n\n",
    "(In reply to comment #57)\n\u003e if u would like to see at wich point i\u0027m, i\u0027ll try today to commit a working\n\u003e version of the packages. \n\nHi Giulio,\n\nThanks for the quick response. Yes, I would be interested to take a look at your latest version, if you\u0027re able to do an svn commit some time.\n\nBTW I have two use cases, both involving views:\n1.) Tabbed property sheets for GEF and GMF editors.\n2.) A view hosting an EMF-based code reviewing application that I eventually intend to contribute to the Eclipse Foundation.\n\nThanks,\n\nAdrian.",
    "I\u0027ve just marked this bugzilla as an EMF 2.4 \"Plan Item\".  We are planning to work at full gears on this topic by the beginning of next year.\n\nIt has been fantastic to see all the contributions and the number of good solutions proposed.  Thank you!  Please keep up with the good work ;-)",
    "Created an attachment (id\u003d82033)\nPatches to produce a crude form for the Ecore Editor\n\nThis patch for EMF 2.4 depends on the zip I will attach in a moment.",
    "Created an attachment (id\u003d82034)\nSplits out EMF.Edit dependent part\n\nI\u0027ve split the EMF.Edit dependent part into a separate plugin and renamed both plugins.  I\u0027ve made the feature be the type so that we don\u0027t lose information about the multiplicity and I\u0027ve added support for an update strategy that uses EFactory\u0027s createFromString and convertToString for the data type.",
    "I\u0027m experimenting with the patch sent by Ed that provides org.eclipse.emf.databinding.edit. EMFEditObservableList does not offer any move method. Using such list as input for a listViewer cause a problem when i have to sort or move objects. I have to split the move cmd in an add and a remove, making undo difficult to understand for a user. So if i have a ListViewer working on an EMF feature and a button to move up or down items in this list, i can only :\n. not provide Undo\n. not use databinding\n\ncan i add a move method on EMFObservableList and EMFEditObservableList ?\n",
    "Good point.  It should implement EList.  I\u0027ll add it and attach and update in a few minutes.",
    "(In reply to comment #63)\n\u003e Good point.  It should implement EList.  I\u0027ll add it and attach and update in a\n\u003e few minutes.\n\u003e \n\nyou missed a break; at line 126 in EMFObservableList.\n: )",
    "Created an attachment (id\u003d82108)\nSupport EList API and add break for move notification.\n\nThanks for finding the problems!  This should address them both (but they are untested still).",
    "Probably shoud be comfortable to have IObservableList declaring a move(int oldposition, int newposition) method. this could permit to have actions working on all observable in the same way.",
    "These are the two EList methods:\n\n  /**\n   * Moves the object to the new position, if is in the list.\n   * @param newPosition the position of the object after the move.\n   * @param object the object to move.\n   */\n  void move(int newPosition, E object);\n\n  /**\n   * Moves the object from the old position to the new position.\n   * @param newPosition the position of the object after the move.\n   * @param oldPosition the position of the object before the move.\n   * @return the moved object.\n   */\n  E move(int newPosition, int oldPosition);\n\nA default implementation of these could delegate to add/remove.  The data binding framework doesn\u0027t have much support for move.  In EMF, it\u0027s fundamentally important because of bidirectional references where doing a remove and an add affects the opposite twice (and if the opposite is many-valued, would cause reordering) whereas a move can work on just one end without affecting the opposite...",
    "About move support. The problem in comment #18 is still in place with eclipse 3.3.1. some commiter can patch ObservableContentProvider on cvs?",
    "That problem from #18 is fixed in 3.4M3 which I can verify by looking at the source code.",
    "In the new zip that i\u0027m downloading i made a small modification in EMFObservableList. i changed the way ListDiff is created when a notification of MOVE arrives.\n\nRemoving and adding the old element instead of the new one permit us to do not loose selection when the list is used as input of a Jface ListViewer, with an ObservableContentProvider.\n\ncase Notification.MOVE: {\n\t\t\t    Integer oldpos \u003d (Integer) notification.getOldValue();\n\t\t\t    Integer newpos \u003d notification.getPosition();\n\t\t\t    Object object \u003d get(oldpos);\n\t\t\t    ListDiffEntry[] listDiffEntries \u003d new ListDiffEntry[2];\n\t\t\t    listDiffEntries[0] \u003d Diffs.createListDiffEntry(newpos, false, object);\n\t\t\t    listDiffEntries[1] \u003d Diffs.createListDiffEntry(oldpos, true, object);\n\t\t\t    diff \u003d Diffs.createListDiff(listDiffEntries);\n\t\t\t    break;\n\t\t\t}",
    "(In reply to comment #66)\n\u003e Probably shoud be comfortable to have IObservableList declaring a move(int\n\u003e oldposition, int newposition) method. this could permit to have actions working\n\u003e on all observable in the same way.\n\nI could see us (data binding framework) adding move method(s) to the abstract implementations of IObservableList. Not sure if we want to require this for every IObservableList.\n\nWe could also add API to ListDiffEntry so that two matching add and remove entries can be linked and marked as a move operation. Whoever creates diffs could put this additional information in the ListDiffEntries. Clients can then ignore this if they don\u0027t care, or make intelligent use of the information about moves.\n\nDo you want to file a bug in Eclipse Platform UI, asking for better support for moves in observable lists?",
    "filled Bug 208858",
    "Sorry for the spam, but I thought I should mention the data binding conference call next week on Wednesday at 12:00 noon EST:\nhttp://wiki.eclipse.org/JFace_Data_Binding/Conference_Call_Agenda_2007_11",
    "(In reply to comment #60)\n\u003e Created an attachment (id\u003d82033) [details]\n\u003e Patches to produce a crude form for the Ecore Editor\n...\n\nHi Ed,\n\nJust FYI, I was trying out the PropertySheetForm: it works fine with ExtLibrary\nbut I ran into a CCE with my own model:\n\njava.lang.ClassCastException:\norg.eclipse.emf.edit.provider.FeatureMapEntryWrapperItemProvider cannot be cast\nto org.eclipse.emf.ecore.EObject\nat\norg.eclipse.emf.edit.ui.view.PropertySheetForm.selectionChanged(PropertySheetForm.java:251)\nat\norg.eclipse.ui.views.properties.PropertySheet.selectionChanged(PropertySheet.java:214)\nat\norg.eclipse.ui.internal.AbstractSelectionService.fireSelection(AbstractSelectionService.java:156)\nat\norg.eclipse.ui.internal.AbstractSelectionService$1.selectionChanged(AbstractSelectionService.java:62)\nat\norg.eclipse.emf.ecore.presentation.EcoreEditor.setSelection(EcoreEditor.java:1705)\nat\norg.eclipse.emf.ecore.presentation.EcoreEditor$6.selectionChanged(EcoreEditor.java:956)\nat org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:162)\n\nMy fix (PropertySheetForm.java:251) was:\n                EObject eObject \u003d (EObject)(object instanceof\nIWrapperItemProvider ? ((IWrapperItemProvider)object).getValue() : object);\n\nDoes that look okay?\n\nCheers,\n\nAdrian.",
    "Adrian,\n\nProbably this is a bit better:\n\n  EObject eObject \u003d (EObject)AdapterFactoryEditingDomain.unwrap(object);\n\nWe\u0027ll still need to think about other possible cases such as when there is no EObject at all...",
    "Created an attachment (id\u003d82663)\nThis zip includes the feature definitions.\n\n",
    "(In reply to comment #24)\n\u003e No, we\u0027ve not yet split HEAD for 2.4 development.  It\u0027s still being used for\n\u003e 2.3.1.\n\u003e \n\nI\u0027ll ask again, now that the ZIP has morphed a couple of times and 2.4 has milestone and integration builds out: can we get this stuff in CVS?\n",
    "Ed, is it intenional that you are using 1.5 classes?\n\nEMFObservableList#toString()\nEMFObservableValue#toString()\nEMFUpdateValueStrategy#createConverter()\n\nThe rest of the databinding-plugin compile fine with GWT",
    "Given that is is targeted for EMF 2.4, there\u0027s little point from that perspective in avoiding Java 5.0 things; I didn\u0027t see 5.0 specific classes in the things you mentioned.  Do you just mean 5.0 syntax.  In any case, we can work on a GWT version that avoids 5.0 dependencies as well...",
    "StringBuilder gibt\u0027s erst seit Java 5",
    "It\u0027s really not my day :-(\n\nStringBuilder is only available since Java 5",
    "Ah, StringBuilder, the more efficient (non-synchronized) version of StringBuffer.  It will be trivial to replace it with StringBuffer in a version that wants to avoid any Java 5.0 dependencies.  I\u0027ll help with producing GWT compatible things, don\u0027t worry...",
    "Created an attachment (id\u003d83069)\nFixes, renames, and realm improvements\n\nDave Steinberg reviewed the previous zip and pointed out a few problems that have been fixed.  He also suggested renaming that made sense.  I can imagine needing a ResourceObservingList and ResourceSetObservingList, so EMFObservingList seemed better as EObjectObservingList.  Since we\u0027d like to have unique names for the ones that use the EditingDomain to apply changes, we added the prefix EditingDomain to those; kind of long but descriptive.  Generally factory methods are used to create them so I suppose their names don\u0027t matter so much.  We also looked at BeansObservables and noticed all the additional support for Realms there, so I added constructors for those and change the factory methods to pass them along.\n\nI also added comments to each class making it very clear that these are all provisional things and are subject to arbitrary change based on improved understanding of there use cases.  If no one has additional suggestions for this basic stuff, I\u0027ll commit it shortly (in time for next week\u0027s build).  I\u0027ll open a new bugzilla for that and leave this open to drive additional design issues related to data binding and forms support.",
    "(In reply to comment #83)\n\u003e I also added comments to each class making it very clear that these are all\n\u003e provisional things and are subject to arbitrary change based on improved\n\u003e understanding of there use cases.  If no one has additional suggestions for\n\u003e this basic stuff, I\u0027ll commit it shortly (in time for next week\u0027s build).  I\u0027ll\n\u003e open a new bugzilla for that and leave this open to drive additional design\n\u003e issues related to data binding and forms support.\n\u003e \n\nI don\u0027t know if this needs to be explicitly stated or not, but I\u0027d like to request (strongly) that nothing be done that would make this package incompatible with EMF 2.3.\nIf you post here the other Bugzilla number once you create it, I\u0027ll be happy to take that discussion over there.\n",
    "I don\u0027t think there\u0027s anything in here that\u0027s specific to changes already made in the 2.4 stream.  I don\u0027t expect there will be anything like that.  You can confirm that easily already, right?",
    "(In reply to comment #85)\n\u003e I don\u0027t think there\u0027s anything in here that\u0027s specific to changes already made\n\u003e in the 2.4 stream.  I don\u0027t expect there will be anything like that.  You can\n\u003e confirm that easily already, right?\n\u003e \n\nYes, of course; I\u0027m already using the ZIP a couple of versions back in EMF2.3/Europa. I just wanted to state that as a requirement up front to head off any attempt to depend on 2.4, intentional or accidental. ;-)\n",
    "At line 118 of EObjectObservableValue this\n\npublic Object getValueType()\n{\n    return eStructuralFeature;\n}\n\n\nshould be \n\n\npublic Object getValueType()\n{\n    return eStructuralFeature.getEType();\n}",
    "That\u0027s intentional though it\u0027s still not entirely clear what\u0027s best in this regard. Without the feature, we won\u0027t have all the metadata we might need.  For example, we won\u0027t know the multiplicity of the feature just from the type and hence won\u0027t know if the value will be a list or a single value.  Information such as EStructuralFeature.isUnique might also be important for how the value is manipulated.",
    "Without this modification in this case :\n\nIObservableValue master \u003d ...;\n\nIObservableValue observeDetailValue \u003d EMFObservables.observeDetailValue(\n                          master, XXXPackage.Literals.TEXT_FEATURE);\n\nwhere master is and observable value that track the current selection in a list viewer, the binding does not works properly and this is the error.\n\nCannot change value type in a nested observable value, from org.eclipse.emf.ecore.impl.EAttributeImpl@107d91 (name: text) (ordered: true, unique: true, lowerBound: 0, upperBound: 1) (changeable: true, volatile: false, transient: false, defaultValueLiteral: , unsettable: false, derived: false) (iD: false) to org.eclipse.emf.ecore.impl.EDataTypeImpl@314cac (name: EString) (instanceClassName: java.lang.String) (serializable: true)\n\ni\u0027m not enough comfortable with databinding internals to provide a different fix :)",
    "It\u0027s hard to comment about what\u0027s wrong without some context.  Are you using EMFUpdate(Value/List)Strategy?",
    "(In reply to comment #90)\n\u003e It\u0027s hard to comment about what\u0027s wrong without some context.  Are you using\n\u003e EMFUpdate(Value/List)Strategy?\n\nI can probably help, but it would be good to have something concrete to look at. Giulio, could you attach a small example plug-in with which I can reproduce the problem?",
    "Created an attachment (id\u003d85268)\nProblem with master detail in emf databinding\n\nBoris, if u install the attached plugin and open the \"Sample view\" u\u0027ll get the error. sorry but i\u0027m not able to provide a fix different from my previos post.",
    "When I change your example to compile against the code actually committed to CVS for EMF 2.4 by passing in the Realm as the first argument:\n\n\tIObservableValue source \u003d EMFObservables.observeDetailValue(Realm.getDefault(), master, ExamplePackage.Literals.PERSON__NAME);\n\nI don\u0027t have any problems with exceptions just opening the view..."
  ],
  "commentCreationDates": [
    "2004-10-05T11:45:00+02:00",
    "2004-10-05T12:50:29+02:00",
    "2006-09-18T17:48:40+02:00",
    "2006-09-18T20:12:02+02:00",
    "2007-03-29T05:54:51+02:00",
    "2007-04-06T06:13:13+02:00",
    "2007-04-06T06:15:00+02:00",
    "2007-04-10T14:13:43+02:00",
    "2007-04-28T18:01:02+02:00",
    "2007-04-28T19:55:34+02:00",
    "2007-06-06T15:40:24+02:00",
    "2007-06-06T15:52:30+02:00",
    "2007-06-08T15:30:13+02:00",
    "2007-06-08T15:33:15+02:00",
    "2007-06-11T14:49:52+02:00",
    "2007-06-11T21:03:12+02:00",
    "2007-06-12T00:16:01+02:00",
    "2007-07-16T11:40:48+02:00",
    "2007-07-16T11:51:24+02:00",
    "2007-08-01T19:44:53+02:00",
    "2007-08-01T22:19:15+02:00",
    "2007-08-01T23:37:16+02:00",
    "2007-08-02T03:46:58+02:00",
    "2007-08-27T21:00:55+02:00",
    "2007-08-27T21:30:57+02:00",
    "2007-08-29T14:46:05+02:00",
    "2007-08-29T14:55:45+02:00",
    "2007-08-29T14:59:21+02:00",
    "2007-09-08T01:39:11+02:00",
    "2007-09-08T01:47:56+02:00",
    "2007-09-11T20:54:15+02:00",
    "2007-09-11T22:58:22+02:00",
    "2007-09-12T00:04:04+02:00",
    "2007-09-12T11:41:15+02:00",
    "2007-09-12T15:02:28+02:00",
    "2007-09-12T15:22:32+02:00",
    "2007-09-12T15:29:29+02:00",
    "2007-09-12T15:30:34+02:00",
    "2007-09-13T16:26:14+02:00",
    "2007-09-13T17:10:32+02:00",
    "2007-09-13T20:55:29+02:00",
    "2007-09-13T21:04:43+02:00",
    "2007-09-13T21:05:46+02:00",
    "2007-09-13T22:06:15+02:00",
    "2007-09-13T22:31:38+02:00",
    "2007-09-13T22:51:36+02:00",
    "2007-09-14T09:53:10+02:00",
    "2007-09-14T12:31:01+02:00",
    "2007-09-14T15:59:09+02:00",
    "2007-09-14T22:12:52+02:00",
    "2007-09-14T23:04:50+02:00",
    "2007-09-19T21:43:10+02:00",
    "2007-09-19T21:57:30+02:00",
    "2007-09-20T03:19:25+02:00",
    "2007-10-01T01:46:16+02:00",
    "2007-10-13T22:46:22+02:00",
    "2007-10-14T00:23:39+02:00",
    "2007-10-15T10:18:51+02:00",
    "2007-10-15T15:33:31+02:00",
    "2007-10-23T16:35:12+02:00",
    "2007-11-03T17:34:25+01:00",
    "2007-11-03T17:40:03+01:00",
    "2007-11-05T15:12:20+01:00",
    "2007-11-05T16:27:02+01:00",
    "2007-11-05T16:35:20+01:00",
    "2007-11-05T17:09:05+01:00",
    "2007-11-05T18:50:36+01:00",
    "2007-11-05T19:05:21+01:00",
    "2007-11-05T21:04:58+01:00",
    "2007-11-05T21:12:59+01:00",
    "2007-11-05T22:54:47+01:00",
    "2007-11-06T04:18:27+01:00",
    "2007-11-06T08:55:21+01:00",
    "2007-11-08T17:08:22+01:00",
    "2007-11-08T20:37:08+01:00",
    "2007-11-09T13:05:39+01:00",
    "2007-11-12T15:08:46+01:00",
    "2007-11-12T15:36:05+01:00",
    "2007-11-14T22:01:29+01:00",
    "2007-11-14T23:06:39+01:00",
    "2007-11-14T23:10:19+01:00",
    "2007-11-14T23:12:47+01:00",
    "2007-11-14T23:42:25+01:00",
    "2007-11-16T14:24:53+01:00",
    "2007-11-16T15:00:43+01:00",
    "2007-11-16T15:21:02+01:00",
    "2007-11-16T15:31:04+01:00",
    "2007-12-13T19:03:27+01:00",
    "2007-12-13T19:13:55+01:00",
    "2007-12-13T21:02:10+01:00",
    "2007-12-13T21:17:03+01:00",
    "2007-12-13T22:06:01+01:00",
    "2007-12-14T13:32:27+01:00",
    "2007-12-15T19:29:34+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassCastException",
      "message": "org.eclipse.emf.edit.provider.FeatureMapEntryWrapperItemProvider cannot be cast to org.eclipse.emf.ecore.EObject",
      "elements": [
        {
          "method": "org.eclipse.emf.edit.ui.view.PropertySheetForm.selectionChanged",
          "source": "PropertySheetForm.java:251"
        },
        {
          "method": "org.eclipse.ui.views.properties.PropertySheet.selectionChanged",
          "source": "PropertySheet.java:214"
        },
        {
          "method": "org.eclipse.ui.internal.AbstractSelectionService.fireSelection",
          "source": "AbstractSelectionService.java:156"
        },
        {
          "method": "org.eclipse.ui.internal.AbstractSelectionService$1.selectionChanged",
          "source": "AbstractSelectionService.java:62"
        },
        {
          "method": "org.eclipse.emf.ecore.presentation.EcoreEditor.setSelection",
          "source": "EcoreEditor.java:1705"
        },
        {
          "method": "org.eclipse.emf.ecore.presentation.EcoreEditor$6.selectionChanged",
          "source": "EcoreEditor.java:956"
        },
        {
          "method": "org.eclipse.jface.viewers.Viewer$2.run",
          "source": "Viewer.java:162"
        }
      ],
      "number": 0,
      "commentIndex": 74,
      "bugId": "75625",
      "date": "2007-11-08T20:37:08+01:00",
      "product": "EMF",
      "component": "Edit",
      "severity": "enhancement"
    }
  ],
  "groupId": "75625",
  "bugId": "75625",
  "date": "2004-10-05T11:45:00+02:00",
  "product": "EMF",
  "component": "Edit",
  "severity": "enhancement"
}