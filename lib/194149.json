{
  "comments": [
    "Build ID: V20070118 (Eclipse 3.2.2)\n\nSteps To Reproduce:\n1. My environment has 737 plugins - and it appears having too many plugins can create a timing window for such deadlock to occur. \n2. If I reduce the number of plugins, the problem seem to go away\n3. Below is the deadlock info, exception stack from java coredump\n\n\nMore information:\n1LKDEADLOCK    Deadlock detected !!!\nNULL           ---------------------\nNULL           \n2LKDEADLOCKTHR  Thread \"Start Level Event Dispatcher\" (0xA74E4C00)\n3LKDEADLOCKWTR    is waiting for:\n4LKDEADLOCKMON      sys_mon_t:0xA7094688 infl_mon_t: 0xA70946C8:\n4LKDEADLOCKOBJ      org/eclipse/osgi/framework/internal/core/PackageAdminImpl@A81A2698/A81A26A4: \n3LKDEADLOCKOWN    which is owned by:\n2LKDEADLOCKTHR  Thread \"Refresh Packages\" (0xA74E5000)\n3LKDEADLOCKWTR    which is waiting for:\n4LKDEADLOCKMON      sys_mon_t:0xA70946E0 infl_mon_t: 0xA7094720:\n4LKDEADLOCKOBJ      java/lang/Object@A81ABB60/A81ABB6C: \n3LKDEADLOCKOWN    which is owned by:\n2LKDEADLOCKTHR  Thread \"Start Level Event Dispatcher\" (0xA74E4C00)\nNULL           \n\nAnd the thread stacks look like the following:\n\n3XMTHREADINFO      \"Start Level Event Dispatcher\" (TID:0xA74E4C00, sys_thread_t:0xA74D9E8C, state:B, native ID:0x000067DA) prio\u003d5\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/PackageAdminImpl.resolveBundles(PackageAdminImpl.java:149)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/BundleHost.startWorker(BundleHost.java:293)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/AbstractBundle.resume(AbstractBundle.java:329)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/Framework.resumeBundle(Framework.java:1037)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/StartLevelManager.resumeBundles(StartLevelManager.java:573)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/StartLevelManager.incFWSL(StartLevelManager.java:495)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/StartLevelManager.doSetStartLevel(StartLevelManager.java:275)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/StartLevelManager.dispatchEvent(StartLevelManager.java:455)\n4XESTACKTRACE          at org/eclipse/osgi/framework/eventmgr/EventManager.dispatchEvent(EventManager.java:189)\n4XESTACKTRACE          at org/eclipse/osgi/framework/eventmgr/EventManager$EventThread.run(EventManager.java:291)\n3XMTHREADINFO      \"Refresh Packages\" (TID:0xA74E5000, sys_thread_t:0xA74DA110, state:B, native ID:0x000067E2) prio\u003d5\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/StartLevelManager.doSetStartLevel(StartLevelManager.java:266)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/StartLevelManager.shutdown(StartLevelManager.java:256)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/SystemBundle.suspend(SystemBundle.java:190)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/Framework.shutdown(Framework.java:537)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/PackageAdminImpl.restartFramework(PackageAdminImpl.java:429)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/PackageAdminImpl.processDelta(PackageAdminImpl.java:346)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/PackageAdminImpl.doResolveBundles(PackageAdminImpl.java:194)\n4XESTACKTRACE          at org/eclipse/osgi/framework/internal/core/PackageAdminImpl$1.run(PackageAdminImpl.java:140)\n4XESTACKTRACE          at java/lang/Thread.run(Thread.java:803)",
    "I\u0027m pretty sure this is a dup of bug 190868.  I\u0027m guessing you have lots of cyclic dependencies.  The resolver is recursing and is less than optimal in this case.  Are you sure it is deadlocked?  Do you have a timeout set too low for deadlock detection?",
    "This is not a dup of bug 190868.  It looks like refresh packages operation decided that the framework needed to be restarted.  This is probably because you have a framework extension (a bundle that provides enhancements to the framework like shared classes support) and that bundle got included in the refresh operation.  This can happen if you are using multiple configurations and one of the configurations is configured to use the framework extension and one is not.  This is set by the osgi.framework.extensions configuration property.\n\nDuring the restart it looks like the \"Start Level Event Dispatcher\" thread is continuing and attempting to resolve another bundle while the \"Refresh Packages\" thread is attempting the shutdown the framework.  This situation is causing the deadlock.",
    "The cause of this deadlock is because there are multiple versions of a framework extension bundle (system.bundle fragment).  Here is the sequence of events that occur from a clean cache.\n\n1)  EclipseStarter installs the highest version of of all the framework extensions which are configured with the configuration property osgi.framework.extensions.\n2)  EclipseStarter resolves the initial framework extensions\n3)  EclipseStarter sets the fremework startlevel to 6.\n4)  The bundle org.eclipse.update.configurator then proceeds to install the rest of the bundles.  It ends up installing the other (lower) versions of the framework extensions that did not get installed by EclipseStarter.\n5)  Then update.configurator refreshes all the bundles it installed (including the other framework extensions).  This causes the existing (newest) version of the framework extension to be refreshed.\n6)  When a resolved framework extension bundle is refresh the framework must restart.  This is where the deadlock occurs.  The thread \"Start Level Event Dispatcher\" is allowed to continue while the \"Refresh Packages\" thread is attempting to force the framework to restart.  These two thread endup getting into a deadly embrace.\n\nA potential fix is to return quickly or throw a runtime exception from PackageAdminImpl.resolveBundles if the property osgi.forceRestart\u003dtrue (which gets set when forcing a restart from package admin).",
    "Created an attachment (id\u003d73542)\n3.3.x and 3.4 patch\n\nThis patch releases the PackageAdmin lock before attempting to shutdown the framework.  This avoids the deadlock between StartLevelImpl and PackageAdmin.",
    "Created an attachment (id\u003d73544)\n3.2.x patch\n\nPatch for 3.2.x",
    "Patch released to HEAD (3.4).  Leaving bug open for 3.3.1 consideration.",
    "More information on the scenario.  I was only able to reproduce this bug if I had a bundle on the osgi.bundles list that could not be resolved AND another version of a system bundle fragment was being installed by update.configurator.\n\nWere you using org.eclipse.update.configurator in your configuration or some other bundle to provision your Framework?",
    "Simon, please review patch for 3.3.1 release.",
    "Fix released to 3.3.1.",
    "The 3.2.x patch when applied (to org.eclipse.osgi_3.2.2.R32x_v20070118.jar)\nin our headless mode app. Throws this exception when duplicate plugins\njars are present. \n\n\n!MESSAGE An unexpected runtime error has occurred.\n!STACK 0\njava.lang.IllegalStateException: The state indicates the bundle is resolved\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureMessage(AbstractBundle.java:1347)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:294)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:329)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1046)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:573)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:495)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:275)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:455)\n\tat org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:189)\n\tat org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:291)\n",
    "What do you mean by duplicate plugin jars present?  Present where? Do you mean multiple versions of the same bundle or true duplicates where the content is identical?",
    "I meant multiple versions of the same plugin and not the identical ones.",
    "When this exception occurs we are in the process of shutting down the framework to restart.  The framework is shutting down because during the refreshPackages call we think the system.bundle needs refreshed.  This means we must restart the framework.\n\nThe reason the system.bundle is being refreshed is because there are two singleton versions of a system.bundle fragment which export new packages.  During the resolution process we update the list of exported packages from the system.bundle with exports from the two singleton fragments.  When it becomes time to select a singleton fragment we must detach the fragment which is not selected.  This marks the system.bundle as refreshed.\n\nThe error message does not really effect anything because we are shutting down and restarting the platform.  Upon restart everything is ok.  When bug 201489 is fixed then this issue (this error message) will be avoided because we will prevent multiple versions of the same fragment from attempting to attach to the system.bundle host.",
    "Hi Tom, Is there a outlook on when we can get a patch for 201489 ?\nAlthough the exception is benign, given it appears in our system logs, and \nis visible to customers, I would like to pull in the bug fix along with 194149.",
    "Actually our app call EclipseStarter.startup() followed by\nEclipseStarter.run(Object) method directly what I see after EclipseStarter.startup() is the jvm process is dying.  If it is not dying\nand EclipseStarter.run() exits with the exit code then we can\nrestart the framework. But right now the process is dying so we cannot\nworkaround this problem in our code.\n",
    "(In reply to comment #14)\nThat bug is marked for 3.4 M2.  I plan to look at it next week.\n\n",
    "(In reply to comment #15)\nYou are correct.  A program which uses EclipseStarter to launch eclipse will not be able to restart the framework because we call System.exit in 3.2 in this scenario.  In 3.3 we no longer call system.exit when this occurs. \n\n"
  ],
  "commentCreationDates": [
    "2007-06-25T01:03:56+02:00",
    "2007-06-25T01:13:27+02:00",
    "2007-06-25T01:34:28+02:00",
    "2007-06-25T02:59:29+02:00",
    "2007-07-11T16:29:03+02:00",
    "2007-07-11T16:33:06+02:00",
    "2007-07-11T16:34:54+02:00",
    "2007-07-11T16:38:09+02:00",
    "2007-07-18T20:56:04+02:00",
    "2007-07-18T21:41:56+02:00",
    "2007-08-27T19:45:24+02:00",
    "2007-08-27T22:18:45+02:00",
    "2007-08-27T23:04:24+02:00",
    "2007-08-30T18:49:51+02:00",
    "2007-08-31T16:27:00+02:00",
    "2007-08-31T21:27:06+02:00",
    "2007-09-01T15:55:10+02:00",
    "2007-09-01T15:56:44+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "The state indicates the bundle is resolved",
      "elements": [
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureMessage",
          "source": "AbstractBundle.java:1347"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:294"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.resume",
          "source": "AbstractBundle.java:329"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.resumeBundle",
          "source": "Framework.java:1046"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles",
          "source": "StartLevelManager.java:573"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL",
          "source": "StartLevelManager.java:495"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel",
          "source": "StartLevelManager.java:275"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent",
          "source": "StartLevelManager.java:455"
        },
        {
          "method": "org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent",
          "source": "EventManager.java:189"
        },
        {
          "method": "org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run",
          "source": "EventManager.java:291"
        }
      ],
      "number": 0,
      "commentIndex": 10,
      "bugId": "194149",
      "date": "2007-08-27T19:45:24+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "critical"
    }
  ],
  "groupId": "194149",
  "bugId": "194149",
  "date": "2007-06-25T01:03:56+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "critical"
}