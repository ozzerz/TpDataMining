{
  "comments": [
    "Here is a stack trace I am getting when I try to use AspectJ 1.5.0 final release\u0027s load-time weaving with JRockIt 1.4.2_08 using -Xmanagement:class\u003dorg.aspectj.weaver.loadtime.JRockitAgent to load Weblogic Server 8.1 SP2. I debugged the code in Eclipse and discovered that the weaver was being initialized while loading IMessage$Kind, so the JRockIt VM simply hasn\u0027t run staticinitialization yet, making IMessage.INFO null.\n\nI was able to fix this stack trace by hoisting the check for loading AspectJ code up BEFORE initializing a weaving adaptor i.e., changing line 55 of Aj.java to be\n        if (loader \u003d\u003d null || className \u003d\u003d null || className.startsWith(\"org/aspectj/\")) {\n\nI then commented out line 251 of WeavingAdaptor to avoid a duplicate check:\n\tprivate boolean shouldWeaveName (String name) {\n\t\treturn !((/*(name.startsWith(\"org.apache.bcel.\")||//FIXME AV why ? bcel is wrapped in org.aspectj.\n                name.startsWith(\"org.aspectj.\")||*/ // now checked earlier, to avoid circularity issues in initialization \n                name.startsWith(\"java.\")\n                || name.startsWith(\"javax.\"))\n                //|| name.startsWith(\"$Proxy\")//JDK proxies//FIXME AV is that 1.3 proxy ? fe. ataspect.$Proxy0 is a java5 proxy...\n                || name.startsWith(\"sun.reflect.\"));//JDK reflect\n\t}\n\nNote that this bug does NOT occur when using a JRockIt 1.5.0 VM, even with the -Xmanagement command line argument.\n\nStack Trace:\njava.lang.IllegalArgumentException: null kind\n\tat org.aspectj.bridge.Message.\u003cinit\u003e(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)\n\tat org.aspectj.bridge.Message.\u003cinit\u003e(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)\n\tat org.aspectj.bridge.Message.\u003cinit\u003e(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)\n\tat org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.\u003cinit\u003e()V(WeavingAdaptor.java:80)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.\u003cinit\u003e(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)\n\tat org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)\n\tat org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)\n\tat jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)\n\tat jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source)\n\tat jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown Source)\n\tat java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194)\n\tat jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown Source)\n\tat jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown Source)\n\tat java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source)\n\tat jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source)\n\tat jrockit.vm.RNI.trampoline()V(Unknown Source)\n\tat org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:???)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\njava.lang.IllegalArgumentException: null kind\n\tat org.aspectj.bridge.Message.\u003cinit\u003e(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)\n\tat org.aspectj.bridge.Message.\u003cinit\u003e(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)\n\tat org.aspectj.bridge.Message.\u003cinit\u003e(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)\n\tat org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.\u003cinit\u003e()V(WeavingAdaptor.java:80)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.\u003cinit\u003e(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)\n\tat org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)\n\tat org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)\n\tat jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)\n\tat jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source)\n\tat jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown Source)\n\tat java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194)\n\tat jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown Source)\n\tat jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown Source)\n\tat java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source)\n\tat jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source)\n\tat jrockit.vm.RNI.trampoline()V(Unknown Source)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:???)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)",
    "By the way, this error occurs with *no* aop.xml file even defined. Just enabling the AspectJ JRockIt agent and starting Weblogic causes it...",
    "Ok this appears to be symptomatic of a deeper problem. The older BEA VM\u0027s are choking because the classloader agent is part of the classpath and we are weaving everything on the system classpath. The Java 5 agents are on the bootstrap classpath and so are never woven and I think that Java is it may also be  My first fix allows not weaving, but I needed to add some additional logic to prevent trying to weave before the ClassLoaderWeavingAdaptor has been fully initialized.\n\nWith the attached patch, I can start up and weave classes into Weblogic running on a JRockIt 1.4.2_08 VM.",
    "Created an attachment (id\u003d32450)\nPatch to loadtime module to fix problems weaving on older JRockIt VM\n\n",
    "Created an attachment (id\u003d32451)\nPatch to weaver module to fix problems weaving on older JRockIt VM\n\n",
    "The problem here is that we are trying to weave the contents of aspectjweaver.jar which should be avoided altogether. The classloader used is entirely at the discretion of the user rather than being dependent on the JVM e.g. the aj5.bat launcher uses ?javaagent and aspectjweaver.jar is loaded from CLASSPATH. I suspect the difference between Sun and JRockit lies with how/when the agent is initialized: either a startup or on first reference. We must avoid weaving _any_ AspectJ classes because of potiential ClassCircularityErrors but clearly the existing mechanism in WeavingAdaptor.shouldWeave() comes too late. There are several approaches:\n1.\tUse a classloader that performs no weaving i.e. the bootstrap loader but modifying bootclasspath is either frowned upon or prohibited.\n2.\tUse CodeSource (obtained from ProtectionDomain) passed on a modified preProcess() method  to identify those classes loaded from the same URL as Aj. Unfortunately the com.bea.jvm.ClassPreProcessor does not supply this information.\n3.\tPerform no weaving on the classloader used to define Aj/JRockitAgent/ClassPreProcessorAgentAdapter. This would require a change to aj5.\n4.\tSimply exclude classes whose names begin ?org.aspectj.? but much earlier. This only works if we rename any classes we ship.\n\nPatch 32450 uses option #4. Why did you find it necessary to add the addional logic?\n",
    "I think you\u0027re right here Matthew: it\u0027s enough to just exclude weaving into org/aspectj types earlier in the cycle. However, Patch 32451 has most of the logic to actually exclude weaving earlier in the process whereas 32450 just comments out the test when it\u0027s too late. I probably started off with the logic to handle weaving while being initialized and then fell back on adding the earlier check in Aj.\n\nI tested using -Xmanagement on JRockIt 1.4.2 with just the logic to exclude AspectJ classes in Aj instead of the WeavingAdaptor, i.e., without the logic to detect \"am I initializing\" and it worked for a version of GlassboxInspector on Tomcat 4.1.x.\n\nLet\u0027s leave bug 140709 to track any possible need of handling self-weaving while initializing and apply the rest of these patches so that the JRockIt agent works properly.",
    "Reference to BEA JRockit JMAPI: http://edocs.bea.com/jrockit/docs142/jmapi/javadoc/Management%20API/index.html",
    "I am convinced that JVMTI has built-in recursion detection, something that JRockit JMAPI seems to lacks. If I trace calls to ClassPreProcessorAgentAdapter.transform() when using the agent to weave HelloWorld the first class I see (from CLASSPATH) is HelloWorld. Some AspectJ classes are loaded before HelloWorld e.g. org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor but those that are the cause of this bug e.g. org.aspectj.bridge.IMessage$Kind are loaded later but never passed to the agent. Subsequently classes like org.aspectj.runtime.reflect.Factory _are_ passed to the agent but filtered by the existing mechanism. \n\n[Opened C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n[Opened C:\\jdk1.5.0_05\\jre\\lib\\jsse.jar]\n[Opened C:\\jdk1.5.0_05\\jre\\lib\\jce.jar]\n[Opened C:\\jdk1.5.0_05\\jre\\lib\\charsets.jar]\n[Loaded java.lang.Object from C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n...\n[Loaded org.aspectj.weaver.loadtime.Agent from file:/C:/workspaces/org.aspectj-Ron_LTW/loadtime5/bin/]\n[Loaded java.lang.UnsupportedOperationException from C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n[Loaded sun.reflect.NativeMethodAccessorImpl from C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n[Loaded sun.reflect.DelegatingMethodAccessorImpl from C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n[Loaded org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter from file:/C:/workspaces/org.aspectj-Ron_LTW/loadtime5/bin/]\n[Loaded org.aspectj.weaver.loadtime.ClassPreProcessor from file:/C:/workspaces/org.aspectj-Ron_LTW/loadtime/bin/]\n[Loaded java.lang.ExceptionInInitializerError from C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n[Loaded org.aspectj.bridge.context.CompilationAndWeavingContext from file:/C:/workspaces/org.aspectj-Ron_LTW/bridge/bin/]\n...\n? ClassPreProcessorAgentAdapter.transform() loader\u003dsun.misc.Launcher$AppClassLoader@92e78c, className\u003dhello/HelloWorld\n...\n[Loaded org.aspectj.bridge.IMessage from file:/C:/workspaces/org.aspectj-Ron_LTW/bridge/bin/]\n[Loaded org.aspectj.bridge.IMessageHandler from file:/C:/workspaces/org.aspectj-Ron_LTW/bridge/bin/]\n[Loaded org.aspectj.weaver.tools.GeneratedClassHandler from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.ReferenceTypeDelegate from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.AbstractReferenceTypeDelegate from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.bcel.BcelObjectType from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.AnnotatedElement from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.TypeVariableDeclaringElement from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.UnresolvedType from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.ResolvedType from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.ReferenceType from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.loadtime.IWeavingContext from file:/C:/workspaces/org.aspectj-Ron_LTW/loadtime/bin/]\n[Loaded org.aspectj.weaver.ICrossReferenceHandler from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.reflect.IReflectionWorld from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.weaver.ltw.LTWWorld from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded java.lang.reflect.InvocationTargetException from C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n[Loaded org.aspectj.bridge.MessageWriter from file:/C:/workspaces/org.aspectj-Ron_LTW/bridge/bin/]\n[Loaded org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler from file:/C:/workspaces/org.aspectj-Ron_LTW/weaver/bin/]\n[Loaded org.aspectj.bridge.AbortException from file:/C:/workspaces/org.aspectj-Ron_LTW/bridge/bin/]\n[Loaded java.io.PrintWriter from C:\\jdk1.5.0_05\\jre\\lib\\rt.jar]\n[Loaded org.aspectj.bridge.IMessage$Kind from file:/C:/workspaces/org.aspectj-Ron_LTW/bridge/bin/]\n[Loaded org.aspectj.bridge.IMessage$1 from file:/C:/workspaces/org.aspectj-Ron_LTW/bridge/bin/]\n...\n? ClassPreProcessorAgentAdapter.transform() loader\u003dsun.misc.Launcher$AppClassLoader@92e78c, className\u003dorg/aspectj/runtime/reflect/Factory\n...\n\nI think the solution is to add recursion protection to JRockitAgent, something that I have already done for WeavingURLClassLoader which is used both in the harness and AJDT LTW support (for both JDK 1.4 and 1.5).",
    "That sounds like a good approach to me. Thanks!",
    "An article on writing a JRockit ClassPreProcessor with a nice sample implementation : http://dev2dev.bea.com/pub/a/2004/01/class_preprocessing.html",
    "1. Re-implemented JRockitAgent using recursion protection\n2. Removed ?loadtime? dependency on managementapi-jrockit81.jar and implemented to the necessary JRockit classes to aid testing\n3. Added JRockitAgentTest with from-scratch class loader to test recursion protection\n4. Relaxed \"catch (Throwble)\" to \"catch (Exception)\" in Aj.preProcess() to protect agent users against weaver problems but allow reporting of unrecoverable errors.\n\nMy only concern with the recursion protection relates to around closure generation. When these are defined dependencies that have not yet been loaded may be passed to the weaver. This causes recursion in the agent/adaptor (although not in the weaver itself) which with the new agent may result in certain closures not being woven.\n\nAwaiting JRockit testing.\n\n",
    "That sounds great. Should I sync to head and build a copy to test it?",
    "1. Re-implemented JRockitAgent using recursion protection\n2. Removed ?loadtime? dependency on managementapi-jrockit81.jar and implemented to the necessary JRockit classes to aid testing\n3. Added JRockitAgentTest with from-scratch class loader to test recursion protection\n4. Relaxed \"catch (Throwble)\" to \"catch (Exception)\" in Aj.preProcess() to protect agent users against weaver problems but allow reporting of unrecoverable errors.\n\nMy only concern with the recursion protection relates to around closure generation. When these are defined dependencies that have not yet been loaded may be passed to the weaver. This causes recursion in the agent/adaptor (although not in the weaver itself) which with the new agent may result in certain closures not being woven.\n\nAwaiting JRockit testing.",
    "Ron: \n\nGood news: I just installed it in Tomcat running against JRockit 1.4.2 and it was able to start up and weave aspects as required. I will do more testing, but the first smoke test worked well (and fails with 1.5.1a or recent dev builds).",
    "Great\nAre we sure the thread local stack approach in there has no side effect when classloading gets into this recursive behavior ? Seems like if there is recursion, we won\u0027t weave the class at all since we \u0027ll return bytecode from this thread local stack - which is fine if we assume the weaver only is the root cause of the recursion. \nNoone came across this in AspectWerkz - so I guess that \u0027s because we had a slightly different weaver initialisation behavior\n\nAlex",
    "The only reason for recursion is class loading while weaving using the class loader that actually defines the weaver. This can happen at any point, not just during initialization. It cannot and should not happen while resolving types necessary to weave a class: until now these have been loaded using getResourceAsStream() and with LTWWorld Class.forName is used only for bootstrap classes and these are exluded from weaving in Aj.preProcess(). I do not believe that the weaver is re-entrant.\n\nOne issue previously noted concerns generated closures and will only be potential a problem for non-inlined around advice applied to classes loaded by the same loader used by the weaver. My advice is don?t weave classes on the same classpath as AspectJ!",
    "Awaiting build.",
    "Fix available"
  ],
  "commentCreationDates": [
    "2006-01-04T01:19:46+01:00",
    "2006-01-04T02:48:34+01:00",
    "2006-01-04T07:48:41+01:00",
    "2006-01-04T07:53:39+01:00",
    "2006-01-04T07:59:08+01:00",
    "2006-06-05T17:42:32+02:00",
    "2006-06-06T07:04:43+02:00",
    "2006-06-06T10:10:55+02:00",
    "2006-06-06T15:34:53+02:00",
    "2006-06-06T16:25:20+02:00",
    "2006-06-07T12:22:19+02:00",
    "2006-06-07T16:07:45+02:00",
    "2006-06-07T16:15:07+02:00",
    "2006-06-07T16:19:02+02:00",
    "2006-06-09T12:48:58+02:00",
    "2006-06-09T12:49:30+02:00",
    "2006-06-09T14:22:06+02:00",
    "2006-06-09T14:23:25+02:00",
    "2006-06-12T16:18:08+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "null kind",
      "elements": [
        {
          "method": "org.aspectj.bridge.Message.\u003cinit\u003e",
          "source": "Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "122580",
      "date": "2006-01-04T01:19:46+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "null kind",
      "elements": [
        {
          "method": "org.aspectj.bridge.Message.\u003cinit\u003e",
          "source": "Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "122580",
      "date": "2006-01-04T01:19:46+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "122580",
  "bugId": "122580",
  "date": "2006-01-04T01:19:46+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}