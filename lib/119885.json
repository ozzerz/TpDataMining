{
  "comments": [
    "Support changing the location of an existing project. Changing a location of a project only works for non-existing projects. This would be useful for people providing wrapper file systems that add a feature layer on top of an existing one. Since the underlying location is the same as the original one, #move() cannot be used. Right now the only way to achieve that is by deleting a project (preserving contents) and recreating it with the new (managed) location, which is clumsy.",
    "Should target for M5 because this may require API.",
    "Fix released.  A project location can now be changed using the move method in conjunction with IResource.REPLACE:\n\nIProject p1 \u003d ...;\nIProjectDescription description \u003d p1.getDescription();\ndescription.setLocationURI(\u003cnew location\u003e);\np1.move(description, IResource.REPLACE, monitor);\n\nSee javadoc of IResource#move(IProjectDescription,int,IProgressMonitor) for details.",
    "Added IProjectTest#testReplaceLocation",
    "John, only now I had a chance of adopting this. The change from local to my custom file system works fine, but I am having problems doing the inverse operation:\n\norg.eclipse.core.internal.resources.ResourceException: Invalid project description.\n\tat org.eclipse.core.internal.resources.Project.checkDescription(Project.java:168)\n\tat org.eclipse.core.internal.resources.Project.move(Project.java:790)\n\tat ...\n\n\nThe error message of the most inner status object is:\n\nD:\\dev\\junit-workspace\\ManagedStoreTests_project1 overlaps the location of another project: ManagedStoreTests_project1\n\nIt seems this validation is only performed when the location in the project description has a local scheme. This comes from LocationValidator.validateProjectLocationURI:\n\n// test if the given location is the default location for any potential project\nIPath parentPath \u003d locationPath.removeLastSegments(1);\nif (FileUtil.isPrefixOf(parentPath, defaultDefaultLocation) \u0026\u0026 FileUtil.isPrefixOf(defaultDefaultLocation, parentPath)) {\n    message \u003d NLS.bind(Messages.resources_overlapProject, toString(location), locationPath.lastSegment());\n    return new ResourceStatus(IResourceStatus.INVALID_VALUE, null, message);\n}\n\nAm I missing something or is this a bug? Let me know if you need further information.",
    "Talked to John about this, turns out it is a user error (when putting the project back on the local file system, if it has a workspace based location, null should be used to indicate that)."
  ],
  "commentCreationDates": [
    "2005-12-08T16:18:56+01:00",
    "2006-01-19T18:42:28+01:00",
    "2006-01-19T21:43:14+01:00",
    "2006-01-19T21:49:46+01:00",
    "2006-02-23T15:45:37+01:00",
    "2006-02-23T16:05:19+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Invalid project description.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.resources.Project.checkDescription",
          "source": "Project.java:168"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.move",
          "source": "Project.java:790"
        }
      ],
      "number": 0,
      "commentIndex": 4,
      "bugId": "119885",
      "date": "2006-02-23T15:45:37+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "enhancement"
    }
  ],
  "groupId": "119885",
  "bugId": "119885",
  "date": "2005-12-08T16:18:56+01:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "enhancement"
}