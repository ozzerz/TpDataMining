{
  "comments": [
    "Using around advice in an aop.xml-specified concreate aspect is causing a NullPointerException.  Specifying -XnoInline in the weaver options works around the problem.\n\nHere is an example that shows what I\u0027m doing:\n\npackage com.foo.aspects;\n\nimport com.foo.test.Request;\nimport com.foo.test.Response;\n\npublic abstract aspect AbstractServletLogger {\n\n    public abstract pointcut loggedGetOperations2 ();\n   \n    void around () : loggedGetOperations2 () {\n        Object [] args \u003d thisJoinPoint.getArgs();\n       \n        Request request \u003d (Request)args[0];\n        Response response \u003d (Response)args[1];\n       \n        System.out.println(\"[AbstractServletLoggerTrace, request]: \" + request.getRequest ());\n        System.out.println(\"[AbstractServletLoggerTrace, response]: \" + response.getResponse());\n       \n        proceed ();\n    }\n}\n\n\nHere is the aop.xml:\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003caspectj\u003e\n    \u003caspects\u003e\n        \u003cconcrete-aspect name\u003d\" com.foo.aspects.ServletLoggerInstance\"\n            extends\u003d\"com.foo.aspects.AbstractServletLogger\"\u003e\n            \u003cpointcut name\u003d\"loggedGetOperations2\"\n                expression\u003d\"execution (void com.foo.test.TraceTest.doGet(com.foo.test.Request, com.foo.test.Response))\" /\u003e\n        \u003c/concrete-aspect\u003e\n    \u003c/aspects\u003e\n    \u003cweaver options\u003d\"-verbose -debug\"\u003e\n        \u003cdump within\u003d\" com.foo.test.*\"/\u003e\n    \u003c/weaver\u003e\n\u003c/aspectj\u003e\n\nHere is the main set of code which I\u0027m instrumenting:\n\npackage com.foo.test;\n\npublic class TraceTest {\n   \n    public void doGet (Request request, Response response) {\n        System.out.println (\"Request: \" + request.getRequest() + \", Response: \" + response.getResponse());\n    }\n\n    public static void main(String[] args) {\n       \n        Request request \u003d new Request (\"This is the request\");\n        Response response \u003d new Response (\"This is the response\");\n        TraceTest t \u003d new TraceTest ();\n        t.doGet(request, response);\n    }\n\n}\n\n// Simulates the HttpServletRequest class\npackage com.foo.test;\n\npublic class Request {\n   \n    private String request;\n   \n    public Request (String request) {\n        this.request \u003d request;\n    }\n   \n    public String getRequest () {\n        return this.request;\n    }\n\n}\n\n// Simulates the HttpServletResponse class\npackage com.foo.test;\n\npublic class Response {\n\n    private String response;\n   \n    public Response (String response) {\n        this.response \u003d response;\n    }\n   \n    public String getResponse () {\n        return this.response;\n    }\n\n}\n\nAnd here is what I\u0027m getting:\n\n[AppClassLoader@92e78c] info AspectJ Weaver Version 1.5.3 built on Wednesday Nov 22, 2006 at 11:18:15 GMT\n[AppClassLoader@92e78c ] info register classloader sun.misc.Launcher$AppClassLoader@92e78c\n[AppClassLoader@92e78c] info using configuration /C:/dev/workspace/AOPTest/bin/META-INF/aop.xml\n[AppClassLoader@92e78c] info define aspect com.foo.aspects.ServletLoggerInstance\n[AppClassLoader@92e78c] debug weaving \u0027com.foo.aspects.ServletLoggerInstance\u0027\n[AppClassLoader@92e78c] debug generating class \u0027com.foo.aspects.ServletLoggerInstance\u0027\n[AppClassLoader@92e78c] debug weaving \u0027 com.foo.test.TraceTest\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.Factory\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.SourceLocation\u0027\n[AppClassLoader@92e78c ] debug cannot weave \u0027org.aspectj.runtime.reflect.MethodSignatureImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.MethodSignature\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027 org.aspectj.runtime.reflect.CodeSignatureImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.MemberSignatureImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.SignatureImpl \u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.ConstructorSignatureImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.ConstructorSignature\u0027\n[ AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.UnlockSignatureImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.UnlockSignature\u0027\n[AppClassLoader@92e78c ] debug cannot weave \u0027org.aspectj.runtime.reflect.LockSignatureImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.LockSignature\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027 org.aspectj.runtime.reflect.AdviceSignatureImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.AdviceSignature\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.CatchClauseSignatureImpl \u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.CatchClauseSignature\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.FieldSignatureImpl\u0027\n[AbstractServletLoggerTrace, request]: This is the request\n[AbstractServletLoggerTrace, response]: This is the response\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.FieldSignature\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.InitializerSignatureImpl \u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.lang.reflect.InitializerSignature\u0027\n[AppClassLoader@92e78c] debug weaving \u0027com.foo.test.Request\u0027\n[AppClassLoader@92e78c] debug weaving \u0027 com.foo.test.Response\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.SignatureImpl$Cache\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl \u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.SourceLocationImpl\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.reflect.JoinPointImpl\u0027\n[AppClassLoader@92e78c ] debug cannot weave \u0027org.aspectj.lang.NoAspectBoundException\u0027\n[AppClassLoader@92e78c] debug cannot weave \u0027org.aspectj.runtime.internal.AroundClosure\u0027\nException in thread \"main\" java.lang.NullPointerException\n    at com.foo.aspects.AbstractServletLogger.ajc$around$com_foo_aspects_AbstractServletLogger$1$c8fd8333proceed(AbstractServletLogger.aj:1)\n    at com.foo.test.TraceTest.doGet_aroundBody1$advice(TraceTest.java:119)\n    at com.foo.test.TraceTest.doGet(TraceTest.java:1)\n    at com.foo.test.TraceTest.main(TraceTest.java:21)\n\nWhen I do the same thing but put the pointcut in the aspect (and change it from an abstract aspect to a concrete aspect in the code), it works fine, e.g. here is an example of the concrete aspect code:\n\npackage com.foo.aspects;\n\nimport com.foo.test.Request;\nimport com.foo.test.Response;\n\npublic aspect ServletLogger {\n\n    public pointcut loggedGetOperations2 () : execution (void com.foo.test.TraceTest.doGet(Request, Response));\n  \n    void around () : loggedGetOperations2 () {\n        Object [] args \u003d thisJoinPoint.getArgs();\n       \n        Request request \u003d (Request)args[0];\n        Response response \u003d (Response)args[1];\n       \n        System.out.println(\"[Trace, request]: \" + request.getRequest ());\n        System.out.println(\"[Trace, response]: \" + response.getResponse ());\n\n        proceed ();\n    }\n}\n\nDecompiling the TraceTest class using JAD from the LTW example (using the dump element) shows me this:\n\n    private static final void doGet_aroundBody1$advice(AbstractServletLogger this, AroundClosure ajc_aroundClosure, JoinPoint thisJoinPoint, Object args[], Request request, Response response, JoinPoint joinpoint)\n    {\n        Object aobj[] \u003d joinpoint.getArgs();\n        Request request1 \u003d (Request)aobj[0];\n        Response response1 \u003d (Response)aobj[1];\n        System.out.println(\"[Trace, request]: \" + request1.getRequest());\n        System.out.println(\"[Trace, response]: \" + response1.getResponse());\n        AbstractServletLogger.ajc$around$com_foo_aspects_AbstractServletLogger$1$c8fd8333proceed(response);\n    }\n\nI would think that the last line should have a proceed with a Request and a Response arguement.",
    "take a look for 1.5.4"
  ],
  "commentCreationDates": [
    "2007-02-09T20:58:08+01:00",
    "2007-10-26T12:27:03+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "com.foo.aspects.AbstractServletLogger.ajc$around$com_foo_aspects_AbstractServletLogger$1$c8fd8333proceed",
          "source": "AbstractServletLogger.aj:1"
        },
        {
          "method": "com.foo.test.TraceTest.doGet_aroundBody1$advice",
          "source": "TraceTest.java:119"
        },
        {
          "method": "com.foo.test.TraceTest.doGet",
          "source": "TraceTest.java:1"
        },
        {
          "method": "com.foo.test.TraceTest.main",
          "source": "TraceTest.java:21"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "173694",
      "date": "2007-02-09T20:58:08+01:00",
      "product": "AspectJ",
      "component": "LTWeaving",
      "severity": "normal"
    }
  ],
  "groupId": "173694",
  "bugId": "173694",
  "date": "2007-02-09T20:58:08+01:00",
  "product": "AspectJ",
  "component": "LTWeaving",
  "severity": "normal"
}