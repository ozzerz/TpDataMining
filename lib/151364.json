{
  "comments": [
    "I\u0027m not sure if this is a bug in my annotation processor, but I\u0027m getting the following exception when I enable my processor for a project:\n\njava.lang.NullPointerException\n\tat org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.storedAnnotations(SourceTypeBinding.java:1409)\n\tat org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.storeAnnotationHolder(ReferenceBinding.java:1172)\n\tat org.eclipse.jdt.internal.compiler.lookup.MethodBinding.\u003cinit\u003e(MethodBinding.java:61)\n\tat org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.getUpdatedMethodBinding(SourceTypeBinding.java:1069)\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.manageSyntheticAccessIfNecessary(MessageSend.java:226)\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:63)\n\tat org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode(ReturnStatement.java:39)\n\tat org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:84)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:673)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:256)\n\tat org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:106)\n\tat org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:597)\n\tat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:687)\n\tat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:464)\n\tat org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:707)\n\tat org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:773)\n\tat org.eclipse.jdt.apt.core.internal.env.BuildEnv.createASTs(BuildEnv.java:381)\n\tat org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newBuildEnv(AbstractCompilationEnv.java:104)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:223)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.run(APTDispatchRunnable.java:170)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1737)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringBuild(APTDispatchRunnable.java:86)\n\tat org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.processAnnotations(AptCompilationParticipant.java:157)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.processAnnotations(AbstractImageBuilder.java:508)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:274)\n\tat org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:56)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:249)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:169)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:603)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:167)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:230)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:233)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:252)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:285)\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:145)\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:208)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\n\nGiven that I don\u0027t see any of my methods in this trace, I suspect it\u0027s a problem in APT or the core compiler.",
    "Looks like a problem with the core compiler. Is it possible to attach the source code that you\u0027re trying to compile in this case? That is, the user\u0027s code, not the processor itself. Thanks!",
    "I cannot attach the source code as it is proprietary. In addition, it won\u0027t be easily to distill an example that tickles the bug.",
    "So, it would be really helpful for us if you could you reproduce with a small test case based on your proprietary code...\nCan you also provide the eclipse build ID you\u0027re using?\nThanks",
    "*** Bug 152789 has been marked as a duplicate of this bug. ***",
    "After some quicks tests, I believe it will be very difficult to produce a \"small\" test case, because if this exception only occurs for me if I have several of my projects open. If I close all but two projects, the exception goes away.",
    "Oh, and the build ID for me is:\n\nVersion: 3.2.0\nBuild id: M20060629-1905",
    "Thanks for the feedback.\n\n2 things here:\n1) Would it be possible to give a try to our 3.2.1 preview posted at:\n   http://www.eclipse.org/jdt/core/r3.2/index.php#UPDATES\n\n2) If problems still happens, then the fact that the exception goes away when \n   you remove some projects from your workspace means that offending unit is\n   in one of the removed projects. Would it be possible to find this project\n   by trying to remove projects one by one? Then, perhaps it will be easier\n   to create a standalone test case from this single project?",
    "(In reply to comment #7)\n\u003e 1) Would it be possible to give a try to our 3.2.1 preview posted at:\n\u003e    http://www.eclipse.org/jdt/core/r3.2/index.php#UPDATES\n\nI don\u0027t know how to apply the updates. Do I just drop the JAR in my plugins folder?\n\n\u003e 2) If problems still happens, then the fact that the exception goes away when \n\u003e    you remove some projects from your workspace means that offending unit is\n\u003e    in one of the removed projects. Would it be possible to find this project\n\u003e    by trying to remove projects one by one? Then, perhaps it will be easier\n\u003e    to create a standalone test case from this single project?\n\nYeah, I\u0027m working on that today. I\u0027ve narrowed it down to 3 projects, let\u0027s call them A, B and C.\n\nC depends on B which depends on A.\n\nWhen I refactor a class in B, and project C is closed, the bug is gone. But if project C is open, the bug occurs. So now i\u0027m trying to delete irrelevant classes from project A, and hopefully completely get rid of it, so narrow it down to projects B and C.",
    "(In reply to comment #8)\n\u003e I don\u0027t know how to apply the updates. Do I just drop the JAR in my plugins\n\u003e folder?\n\u003e \nYes, that\u0027s it\n",
    "(In reply to comment #9)\n\u003e (In reply to comment #8)\n\u003e \u003e I don\u0027t know how to apply the updates. Do I just drop the JAR in my plugins\n\u003e \u003e folder?\n\u003e \u003e \n\u003e Yes, that\u0027s it\n\u003e \n\nBug seems to still be present.",
    "I have the same bug in:\n\nVersion: 3.3.0\nBuild id: I20060810-1230\n\nThe project that makes this exception is a project that depend two projects, one which also depends on the other.\n\nThat is, project A, B, C.\nC depends on B and A\nB depends on A\n\nI will see if I can narrow it down (I also have proprietary code... sorry).",
    "(In reply to comment #8)\n\u003e (In reply to comment #7)\n\u003e \u003e 2) If problems still happens, then the fact that the exception goes away\n\u003e \u003e    when \n\u003e \u003e    you remove some projects from your workspace means that offending unit is\n\u003e \u003e    in one of the removed projects. Would it be possible to find this project\n\u003e \u003e    by trying to remove projects one by one? Then, perhaps it will be easier\n\u003e \u003e    to create a standalone test case from this single project?\n\u003e \n\u003e Yeah, I\u0027m working on that today. I\u0027ve narrowed it down to 3 projects, let\u0027s\n\u003e call them A, B and C.\n\nI\u0027ve managed to reproduce the bug in a single project, basically by creating a new project, and copying all the files from A, B and C into that new project. However, we\u0027ve found a workaround to the issue by commenting out some (seemingly unrelated) code while performing the refactoring, so unfortunately I won\u0027t be able to devote any further time in isolating the bug.\n\nHowever, as shown above, it does not appear to require cross-project depedencies.",
    "If you have not already guessed it. It is the \"this.scope\" that is null.\n\nDoing an ugly hack made to the \"SourceTypeBinding\" class:\n\n[code]\nif(this.scope \u003d\u003d null)\n   return null;\n[/code]\n\navoids the null pointer exception. But then fails on this exception:\n\njava.lang.NoClassDefFoundError: org/eclipse/jdt/apt/core/env/EclipseAnnotationProcessorEnvironment\nat net.gamalocus.tools.apt.ModelSetterAnnotationProcessor.\u003cinit\u003e(ModelSetterAnnotationProcessor.java:31)\nat net.gamalocus.tools.apt.ModelSetterAnnotationProcessorFactory.getProcessorFor(ModelSetterAnnotationProcessorFactory.java:29)\nat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.dispatchToFileBasedProcessor(APTDispatchRunnable.java:538)\nat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.access$0(APTDispatchRunnable.java:522)\nat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable$1.run(APTDispatchRunnable.java:149)\nat org.eclipse.jdt.apt.core.internal.env.ReconcileEnv$CallbackRequestor.acceptBinding(ReconcileEnv.java:152)\nat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:793)\nat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:466)\nat org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:707)\nat org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:820)\nat org.eclipse.jdt.apt.core.internal.env.ReconcileEnv.openPipeline(ReconcileEnv.java:145)\nat org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newReconcileEnv(AbstractCompilationEnv.java:70)\nat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.reconcile(APTDispatchRunnable.java:164)\nat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringReconcile(APTDispatchRunnable.java:103)\nat org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.reconcile(AptCompilationParticipant.java:185)\nat org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation$1.run(ReconcileWorkingCopyOperation.java:216)\nat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\nat org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.notifyParticipants(ReconcileWorkingCopyOperation.java:203)\nat org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:74)\nat org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:720)\nat org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:779)\nat org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1132)\nat org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:97)\nat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\nat org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:82)\nat org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:172)\nat org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:114)\nat org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:120)\nat org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:103)\nat org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:331)\nat org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:170)\n",
    "Not the really strange thing is, when undoing this hack, I still get the same error (NoClassDefFoundError), just before the NullPointerException.\n\nOliver Wong, could you please let us know the nature of the code you uncommented to get rid of the error ? Did it refer to the code that generated the error, or did it include some interesting annotations. I have a big project and would like to find a fix for this, but some pointer on what could be the \"sinner\" would be great.",
    "Ok, messing a little about. I tried the following:\n\n1) Copied all my sources into a new project (also using the same AnnotatorProcessor).\n   - (Got the error there as well)\n2) Removed a lot of source files, and source content\n   - (Got the error there as well)\n3) Remove some more (some interfaces implemented in a base- and sub-class)\n   - (Now the error disappeared)\n4) Re-added the interfaces and set the classes as implementing them again.\n   - (The error did not return)\n\nSo, now I will give it an other shot at creating a \"small\" testcase, and make tar files before removing anything. I think it is wierd that I can remove something and the error goes away, and then re-adding it does not bring back the error.",
    "Now I have a \"working\" test scenario. It is a two project setup (they cannot be merged without the error going away).\n\nTESTAnnoA: the stripped down project depending on the other. It is the class BaseArmy that uses the @ModelSetter annotation (that the annotation processor) looks for.\nhttp://emanuelgreisen.dk/stuff/TestAnno_0020.tgz (95KB)\n\njme: The Java Monkey Engine (dirived work thereof, www.jmonkeyengine.com). This is the project that is refered to from \"TESTAnnoA\".\nhttp://emanuelgreisen.dk/stuff/TestJME.tgz (approx 5MB)\n\nRemoving the dependency from TESTAnnoA to jme will make the error go away, but will yield errors due to missing classDefs (Vector2f).\n\nThe AnnotatorProcess is a plugin, it can be found here (very simple, just writes a \"complicated\" setter method).\nhttp://emanuelgreisen.dk/stuff/TestAnnotator.tgz (6.7KB)\n\nI am sure that cutting down \"jme\" untill the error goes away, is most likely a good idea for narrowing it down even further.\n\nAn other way to remove the error is to call the \"Organize Imports\" on the \"src\" folder of the \"TESTAnnoA\" project. This simply fixes it all... I know it\u0027s not a solution, but it works for this test-case.",
    "Calling \"Organize Imports\" on the original project did NOT make the error go away. Damn.",
    "Found a work-around, (A hack).\n\nchanged the method where the NullPointerException occurs to:\n\n[code]\nSimpleLookupTable storedAnnotations(boolean forceInitialize) {\n\tif (forceInitialize \u0026\u0026 this.storedAnnotations \u003d\u003d null) {\n\t\t// OAKHACK\n\t\tif(this.scope \u003d\u003d null)\n\t\t{\n\t\t\tSystem.out.println(\"Scope was null, this.fileName:\"+this.fileName);\n\t\t\treturn null;\n\t\t}\n\t\t// KCAHKAO\n\t\tthis.scope.referenceCompilationUnit().compilationResult.hasAnnotations \u003d true;\n\t\tif (!this.scope.environment().globalOptions.storeAnnotations)\n\t\t\treturn null; // not supported during this compile\n\t\tthis.storedAnnotations \u003d new SimpleLookupTable(3);\n\t}\n\treturn this.storedAnnotations;\n}\n[/code]\n\nAnd copied the class-file generated into my org.eclipse.jdt.core_3.3.0.v_708.jar file, and then the NullPointerException was removed, and I get the expected AnnotationProcessing results. I know this is not a fix, but it works for us.\n\nUnfortunatly the fileName makes no sense, so I don\u0027t even know where in my code the scope was null..., maybe you can advise me about what I could print to know this ?",
    "(In reply to comment #14)\n\u003e\n\u003e Oliver Wong, could you please let us know the nature of the code you\n\u003e uncommented to get rid of the error ? Did it refer to the code that generated\n\u003e the error, or did it include some interesting annotations. I have a big project\n\u003e and would like to find a fix for this, but some pointer on what could be the\n\u003e \"sinner\" would be great.\n\nWell, it looks like you\u0027ve figured out your own fix, but just in case, the code we commented out was, as far as we could tell, completely unrelated to the code we were trying to perform the refactoring on.\n\nE.g. we performed the \"Extract Interface\" refactoring on class A, and some other class B, in a completely different package that has no reference to class A at all, was the sinner. When we commented out the methods of class B, the refactoring went through without error. So our workaround was to comment those methods, perform the refactoring, then uncomment those methods.",
    "How can this.scope ever be null?! It\u0027s initialized in the constructor of SourceTypeBinding and it not assigned to in any other place in that class. Surely, one just needs to invesitage the other classes that modify this field. In general though, it looks like dangerous design not to have this variable be final or at least private.",
    "*** Bug 154517 has been marked as a duplicate of this bug. ***",
    "To see where else it was set, I tried changing \u0027scope\u0027 to be final.  It is set to null in org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration, in cleanUp(TypeDeclaration type) and in cleanUp().",
    "I believe this is caused by the fix to bug 114935.  In the APT branch of 3.1 JDT core, in CompilationUnitResolver.resolve() around line 674, I see the following code, which appears to have never made it back into the mainstream branches.  Note the comment by jgarms:\n\n  for (; i \u003c this.totalUnits; i++) {\n    if (this.requestedSources.size() \u003d\u003d 0 \u0026\u0026 this.requestedKeys.size() \u003d\u003d 0) {\n      // no need to keep resolving if no more ASTs and no more binding keys are needed\n      // see https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d114935\n      // cleanup remaining units\n\t\t\t\t\t\n      // jgarms: eagerly cleaning up the compilation units\n      // causes NPEs later for CompilationParticipants,\n      // as the scope is null.\n      // For now turn off this cleanup.\n\t\t\t\t\t\n      for (; i \u003c this.totalUnits; i++) {\n  [...]\n\nThis doesn\u0027t explain why the bug happens, nor how it can be fixed without hurting performance, but it certainly does suggest that the eager clean-up in this method (which sets scope to null) is the source of the trouble.\n",
    "I had originally believed that the fix in 3.1.2 should not be necessary in 3.2.1. Walter, have you tried porting that change to 3.2? Does the problem go away?",
    "I\u0027ve not repro\u0027ed the bug myself; I\u0027m responding to Doug, Oliver, and Emanuel\u0027s comments.  Emanuel says he verified against 3.3 I20060810-1230; Oliver says he verified against the 3.2.1 preview on 8/4/06; and Doug (in bug 133744) has verified against 3.2.1 M20060810.\n\nI\u0027ll see whether I can get Emanuel\u0027s repro case (comment #16) to fail for me, and if so, whether removing the eager cleanup fixes it.  The challenge for the JDT core team will be to figure out how to fix this without regressing bug 114935.",
    "Emanuel, I\u0027m not able to build your sample project; there are a lot of referenced packages missing, such as net.gamalocus.common, net.gamalocus.cotwl2.net, etc.\n\nDo you want to try patching JDT yourself?  Simply go into CompilationUnitResolver.resolve(), around line 680, and comment out the call to cleanUp().\n\n(Oliver and/or Doug, you could try that too, and report back...)",
    "(In reply to comment #26)\n\u003e \n\u003e Do you want to try patching JDT yourself?  Simply go into\n\u003e CompilationUnitResolver.resolve(), around line 680, and comment out the call\n\u003e to cleanUp().\n\nSorry, the only way I had of triggering the bug was to perform the refactoring described in Bug 152789 (this is the bug I originally filed, and it was marked a duplicate of this bug). Since then, I\u0027ve found a workaround and we\u0027ve worked extensively on our codebase since then, so it won\u0027t be easy to revert back and retry the refactoring.",
    "Walter, what project refers to net.gamalocus.common and net.gamalocus.cotwl2.net ? I should think that I have cleaned both \"TestAnno\" and \"Cotwl2Annotator\" up. And jme should not depend on any of my code.\n\nI have already made a hack in eclipse that works for us, and Annotator-processing on a large project takes forever. So we run apt when ever we need to run it (to generate new source-files), not on every build.\n\nIt would be a nice feature if something like that could be integrated into eclipse. A set of annotator-processor-plugins, that you could run on demand. Maybe even supply a few common one with eclipse...",
    "net.gamalocus.cotwl2.data.game.BaseTroop.java is an example of a file that won\u0027t compile because of missing imports.\n\nBeing able to \"fire\" annotation processors manually is an interesting idea.  You can sort of hack your way into that at present by turning them on or off in the project\u0027s factory path preferences; but that\u0027s hardly a graceful approach.\n\nAnother approach, usable for jar-based processors but not for plug-ins, is to set the processor to \"batch mode\" in the Factory Path Advanced Options dialog.  That will make the processor only fire on a clean build.  Still not really what you want, though.\n\nIf you\u0027d like to enter an enhancement request for this feature, go right ahead.",
    "Damn, I have no idea how I was able to not get all these errors when making the test-case. And it\u0027s wierd because I thought I cleaned out all the source-code (but it contains quite a lot).\n\nI will see if I could get the time to make an other test-case some day. Right now, we fixed it by testing for null on \"scope\" and finally made the annotator run on the command-line from apt.\n\nAbout running the annotator by enable/disable will not work, because desable will clean the .annotator_source folder...\n\nWhere do I submit a feature-request ?",
    "(In reply to comment #30)\n\u003e\n\u003e Where do I submit a feature-request ?\n\nAt https://bugs.eclipse.org/bugs/ the first two options are \"Report a new bug\" and \"Enter an enhancedment/feature request\".",
    "I patched the JDT in version M20060823-1200 to remove the cleanup call on line 680 of CompilationUnitResolver but still get the NPE. Just for curiosity\u0027s sake, I checked the box that made my processor run in batch mode to see if that would help - it didn\u0027t. BTW, what exactly does that mean? It would be nice to see the JDT-APT project page updated to explain this and other features of the project in general.",
    "(In reply to comment #32)\n\u003e I patched the JDT in version M20060823-1200 to remove the cleanup call on line\n\u003e 680 of CompilationUnitResolver but still get the NPE. \n\nAre you certain that the patch took effect, ie, that you were running the patched code?  Eg, if you put a breakpoint in your patched code, does it get hit, and does it indeed avoid the call to cleanUp()?\n\n\n\u003e BTW, what exactly does [batch mode] mean? It would be nice to\n\u003e see the JDT-APT project page updated to explain this and other features of the\n\u003e project in general.\n\nPlease feel free to enter an enhancement request.  \n\nBatch mode is aimed at processors that assume they are running under Sun apt in command-line mode and thus assume that getSpecifiedTypeDeclarations() will return all types on the command line, that their processor will only get called a certain number of times (once per round), and so forth.  For instance, we\u0027ve seen processors that count the number of times that process() is called and do things differently depending on which round it is.  Obviously in the context of an IDE that breaks.  So in batch mode, we only call process() during a full build, and we try to emulate the apt command-line sequence of operations as closely as possible.\n",
    "I have just verified that indeed the patched code was being executed by setting breakpoints at various modified locations in the source, as well as observing the output of System.err.println() statements. What confuses me now is that the inner loop that was doing the eager cleanup is never run! That is, the following condition never appears to be true when compiling my code:\n\n(this.requestedSources.size() \u003d\u003d 0 \u0026\u0026 this.requestedKeys.size() \u003d\u003d 0)\n\nI\u0027m not sure if this is helpful, but below is the output from a couple of stack trace dumps I inserted in the JDT for the point at which the \u0027scope\u0027 field is set to null for the type that later causes the NPE when it\u0027s scope field is dereferenced. I wanted to see if I could learn something about the order in which scopes are defined and used during compilation. At this point, all I can derive is that scopes are being cleaned up too eagerly within some compilation phase. Of course, this was already implied by the proposed fix.\n\njava.lang.Throwable: nulling scope of: PrivilegedRegister\n\tat org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.cleanUp(CompilationUnitDeclaration.java:157)\n\tat org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.cleanUp(CompilationUnitDeclaration.java:124)\n\tat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:776)\n\tat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:464)\n\tat org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:707)\n\tat org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:820)\n\tat org.eclipse.jdt.apt.core.internal.env.BuildEnv.createASTs(BuildEnv.java:381)\n\tat org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newBuildEnv(AbstractCompilationEnv.java:84)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:223)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.run(APTDispatchRunnable.java:170)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1737)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringBuild(APTDispatchRunnable.java:86)\n\tat org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.processAnnotations(AptCompilationParticipant.java:157)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.processAnnotations(AbstractImageBuilder.java:508)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:274)\n\tat org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:59)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:249)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:169)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:603)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:167)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:230)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:233)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:252)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:285)\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:145)\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:208)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\n\nscope is null for: com.sun.max.asm.sparc.PrivilegedRegister\njava.lang.Throwable: scope is null for: com.sun.max.asm.sparc.PrivilegedRegister\n\tat org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.storedAnnotations(SourceTypeBinding.java:1437)\n\tat org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.storeAnnotationHolder(ReferenceBinding.java:1173)\n\tat org.eclipse.jdt.internal.compiler.lookup.MethodBinding.\u003cinit\u003e(MethodBinding.java:61)\n\tat org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.getUpdatedMethodBinding(SourceTypeBinding.java:1074)\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.manageSyntheticAccessIfNecessary(MessageSend.java:226)\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:63)\n\tat org.eclipse.jdt.internal.compiler.ast.BinaryExpression.analyseCode(BinaryExpression.java:41)\n\tat org.eclipse.jdt.internal.compiler.ast.BinaryExpression.analyseCode(BinaryExpression.java:41)\n\tat org.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseAssignment(SingleNameReference.java:66)\n\tat org.eclipse.jdt.internal.compiler.ast.CompoundAssignment.analyseCode(CompoundAssignment.java:45)\n\tat org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:84)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:676)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:256)\n\tat org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:106)\n\tat org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:597)\n\tat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:687)\n\tat org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:464)\n\tat org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:707)\n\tat org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:820)\n\tat org.eclipse.jdt.apt.core.internal.env.BuildEnv.createASTs(BuildEnv.java:381)\n\tat org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newBuildEnv(AbstractCompilationEnv.java:84)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:223)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.run(APTDispatchRunnable.java:170)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1737)\n\tat org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringBuild(APTDispatchRunnable.java:86)\n\tat org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.processAnnotations(AptCompilationParticipant.java:157)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.processAnnotations(AbstractImageBuilder.java:508)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:274)\n\tat org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:59)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:249)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:169)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:603)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:167)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:230)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:233)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:252)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:285)\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:145)\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:208)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)",
    "I encountered this very same problem and have just, rather unsatisfyingly, worked around it. I have a ~250kloc project with: no dependancies on any other project, many custom annotations (for run-time bytecode manipulation, not for compile-time annotation processing), and around a hundred errors. I got the NPE in question during the clean build that occurs as soon as you add (here, the first) annotation factory to the build preferences, regardless of whether the annotation processor was called upon. The problem remained, for around four weeks of development (I tried turning annotation processing back on every couple of days as I tired of forgetting to run apt from the command line).\n\nThis morning I had some time to play with this --- I\u0027d like to feel good about annotation processing before the next big project push --- so I compile a version of jdt.core from HEAD that checks for (this.scope\u003d\u003dnull) before the offending line. This gets me an error free build clean, and a successful annotation processor run, although the annotation needing processing is, by this point, only deployed on a handful of classes. My unit tests all run, but I cannot say anything about the general impact of my \"patch\".  By turning DEBUG on in the compiler it appears that I got a null scope on an static inner class that declared no methods or fields or annotations, simply \"static public class Bar extends Foo {}\". The both the outer and inner classes had no annotations in their superclass structures either.\n\nHowever, moving back to the stock, unedited jdt.core now also works on the project (both clean builds and \"automatic\" builds). So, while I\u0027ve worked around the problem, I no longer have a project that causes the problem to offer to the debugging effort. \n\nI\u0027ll, um, let you know if it returns.\n\nWith I20060912-0800 (on Mac OSX 9A241e, with Eclipse on 1.5.0_06)\n",
    "\n\n*** This bug has been marked as a duplicate of 156352 ***"
  ],
  "commentCreationDates": [
    "2006-07-21T05:08:51+02:00",
    "2006-07-21T18:45:19+02:00",
    "2006-07-24T22:46:34+02:00",
    "2006-07-26T12:00:42+02:00",
    "2006-08-03T22:37:20+02:00",
    "2006-08-04T00:23:24+02:00",
    "2006-08-04T00:24:03+02:00",
    "2006-08-04T07:37:27+02:00",
    "2006-08-04T17:20:33+02:00",
    "2006-08-04T17:46:41+02:00",
    "2006-08-04T17:58:31+02:00",
    "2006-08-15T22:33:54+02:00",
    "2006-08-15T22:45:17+02:00",
    "2006-08-16T07:48:01+02:00",
    "2006-08-16T09:00:21+02:00",
    "2006-08-16T10:33:18+02:00",
    "2006-08-16T11:47:58+02:00",
    "2006-08-16T12:39:05+02:00",
    "2006-08-16T12:55:43+02:00",
    "2006-08-16T16:05:47+02:00",
    "2006-08-18T02:46:06+02:00",
    "2006-08-21T16:42:15+02:00",
    "2006-08-22T08:32:25+02:00",
    "2006-08-23T17:30:20+02:00",
    "2006-08-23T18:58:38+02:00",
    "2006-08-23T19:37:12+02:00",
    "2006-08-23T20:13:39+02:00",
    "2006-08-23T20:21:23+02:00",
    "2006-08-24T08:40:41+02:00",
    "2006-08-24T09:19:11+02:00",
    "2006-08-24T10:10:16+02:00",
    "2006-08-24T16:06:58+02:00",
    "2006-08-25T07:08:06+02:00",
    "2006-08-25T17:43:48+02:00",
    "2006-08-25T21:40:46+02:00",
    "2006-10-16T22:02:22+02:00",
    "2006-11-16T04:23:34+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.storedAnnotations",
          "source": "SourceTypeBinding.java:1409"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.storeAnnotationHolder",
          "source": "ReferenceBinding.java:1172"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.MethodBinding.\u003cinit\u003e",
          "source": "MethodBinding.java:61"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.getUpdatedMethodBinding",
          "source": "SourceTypeBinding.java:1069"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.MessageSend.manageSyntheticAccessIfNecessary",
          "source": "MessageSend.java:226"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode",
          "source": "MessageSend.java:63"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode",
          "source": "ReturnStatement.java:39"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode",
          "source": "MethodDeclaration.java:84"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode",
          "source": "TypeDeclaration.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode",
          "source": "TypeDeclaration.java:256"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode",
          "source": "CompilationUnitDeclaration.java:106"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:597"
        },
        {
          "method": "org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve",
          "source": "CompilationUnitResolver.java:687"
        },
        {
          "method": "org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve",
          "source": "CompilationUnitResolver.java:464"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTParser.createASTs",
          "source": "ASTParser.java:707"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs",
          "source": "BaseProcessorEnv.java:773"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.env.BuildEnv.createASTs",
          "source": "BuildEnv.java:381"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newBuildEnv",
          "source": "AbstractCompilationEnv.java:104"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build",
          "source": "APTDispatchRunnable.java:223"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.run",
          "source": "APTDispatchRunnable.java:170"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1737"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringBuild",
          "source": "APTDispatchRunnable.java:86"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.processAnnotations",
          "source": "AptCompilationParticipant.java:157"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.processAnnotations",
          "source": "AbstractImageBuilder.java:508"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:274"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build",
          "source": "BatchImageBuilder.java:56"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll",
          "source": "JavaBuilder.java:249"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.build",
          "source": "JavaBuilder.java:169"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$2.run",
          "source": "BuildManager.java:603"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:167"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:201"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$1.run",
          "source": "BuildManager.java:230"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:233"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuildLoop",
          "source": "BuildManager.java:252"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.build",
          "source": "BuildManager.java:285"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.doBuild",
          "source": "AutoBuildJob.java:145"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.run",
          "source": "AutoBuildJob.java:208"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "151364",
      "duplicateId": "156352",
      "date": "2006-07-21T05:08:51+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "minor"
    },
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "org/eclipse/jdt/apt/core/env/EclipseAnnotationProcessorEnvironment",
      "elements": [
        {
          "method": "net.gamalocus.tools.apt.ModelSetterAnnotationProcessor.\u003cinit\u003e",
          "source": "ModelSetterAnnotationProcessor.java:31"
        },
        {
          "method": "net.gamalocus.tools.apt.ModelSetterAnnotationProcessorFactory.getProcessorFor",
          "source": "ModelSetterAnnotationProcessorFactory.java:29"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.dispatchToFileBasedProcessor",
          "source": "APTDispatchRunnable.java:538"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.access$0",
          "source": "APTDispatchRunnable.java:522"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable$1.run",
          "source": "APTDispatchRunnable.java:149"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.env.ReconcileEnv$CallbackRequestor.acceptBinding",
          "source": "ReconcileEnv.java:152"
        },
        {
          "method": "org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve",
          "source": "CompilationUnitResolver.java:793"
        },
        {
          "method": "org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve",
          "source": "CompilationUnitResolver.java:466"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTParser.createASTs",
          "source": "ASTParser.java:707"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs",
          "source": "BaseProcessorEnv.java:820"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.env.ReconcileEnv.openPipeline",
          "source": "ReconcileEnv.java:145"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newReconcileEnv",
          "source": "AbstractCompilationEnv.java:70"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.reconcile",
          "source": "APTDispatchRunnable.java:164"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringReconcile",
          "source": "APTDispatchRunnable.java:103"
        },
        {
          "method": "org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.reconcile",
          "source": "AptCompilationParticipant.java:185"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation$1.run",
          "source": "ReconcileWorkingCopyOperation.java:216"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.notifyParticipants",
          "source": "ReconcileWorkingCopyOperation.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation",
          "source": "ReconcileWorkingCopyOperation.java:74"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.run",
          "source": "JavaModelOperation.java:720"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.runOperation",
          "source": "JavaModelOperation.java:779"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.reconcile",
          "source": "CompilationUnit.java:1132"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run",
          "source": "JavaReconcilingStrategy.java:97"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile",
          "source": "JavaReconcilingStrategy.java:82"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile",
          "source": "JavaReconcilingStrategy.java:172"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile",
          "source": "CompositeReconcilingStrategy.java:114"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile",
          "source": "JavaCompositeReconcilingStrategy.java:120"
        },
        {
          "method": "org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess",
          "source": "MonoReconciler.java:103"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess",
          "source": "JavaReconciler.java:331"
        },
        {
          "method": "org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run",
          "source": "AbstractReconciler.java:170"
        }
      ],
      "number": 1,
      "commentIndex": 13,
      "bugId": "151364",
      "duplicateId": "156352",
      "date": "2006-08-16T07:48:01+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "minor"
    }
  ],
  "groupId": "156352",
  "bugId": "151364",
  "duplicateId": "156352",
  "date": "2006-07-21T05:08:51+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "minor"
}