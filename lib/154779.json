{
  "comments": [
    "Now that undo for marker operations is implemented from the UI views such as task list and bookmark view, we should also add undo support when performing operations from the text ruler.",
    "Created an attachment (id\u003d48425)\norg.eclipse.ui.editors.patch\n\nThis patch changes the AddMarkerAction and MarkerRulerAction to use the new API for undoable marker operations.  Note that this API is currently experimental and may evolve in 3.3.  However, it would be nice to get these changes in so that we can start promoting the use of marker operation undo.",
    "Note:  A separate issue not addressed in these patches is whether the undo history for an editor should show the marker operations performed in the editor\u0027s ruler.  ie, if you delete a task or bookmark from the ruler, should you see \"Undo Delete Task\" in the undo menu for the editor?  Currently you will only see it in the Package Explorer and Task List.\n\nNote that showing these operations in the undo history for the editor would take additional code.  Currently the document undo manager responds only to changes in the document.  To accomplish this, we would have to add code in the text editor classes that watch for operation history changes to the workspace and add the editor\u0027s undo context to those that affect the editor\u0027s underlying input.  I can provide patches that do this, but did not pursue until I know whether this is a desirable feature from a platform text point of view.",
    "See bug #7691 (particularly comments 13 \u0026 14) for explanation of the new feature.",
    "I assume that this patch has similar problems as bug 156864.\n\nSusan, does this affect this patch?\n\nI prefer to put this on hold until bug 156865 is resolved.",
    "yes, it\u0027s best to wait for bug #156865 to get fixed.  I should have an interim solution for M2.  ",
    "thanks!",
    "Susan,\n\nthanks for the patch. I see several problems with it:\n\n0. it does not work - at least not for me: I installed your patch and ran\n   against I20060912-0800). Each time I use Edit \u003e Add Bookmark... or\n   Edit \u003e Add Task... while the editor has focus I get an IllegalAccessError\n   (see full stack trace at the bottom). Did you test the code at all? ;-)\n\n1. the label you use in AddMarkerAction will look bad even after\n   removing the accelerator: it then says e.g. \"Undo Bookmark\" or \n   \"Redo Bookmark\" instead of \"Undo Add Bookmark\" or \"Redo Add Task\". Maybe\n   we could use the tool tip instead.\n\n3. potential NPE (if a client calls setText(null) on the action:\n   Action.getText() can return \u0027null\u0027 but the CreateMarkersOperation (or \n   AbstractWorkspaceOperation to be more precise) will fail on that.\n\n4. why do you log the same error twice in AddMarkerAction? Is that really\n   needed? I\u0027d prefer to log it just once.\n\n5. why did you remove the code that informs the user? Does executing the \n   operation now do this?\n\n\n--- full stack trace when executing Edit Add Task/Bookmark ---\n\n!ENTRY org.eclipse.ui 4 4 2006-09-13 11:38:46.305\n!MESSAGE Unhandled event loop exception\n\n!ENTRY org.eclipse.ui 4 0 2006-09-13 11:38:46.315\n!MESSAGE tried to access method org.eclipse.ui.texteditor.TextEditorAction.getTextEditor()Lorg/eclipse/ui/texteditor/ITextEditor; from class org.eclipse.ui.texteditor.AddMarkerAction$1\n!STACK 0\njava.lang.IllegalAccessError: tried to access method org.eclipse.ui.texteditor.TextEditorAction.getTextEditor()Lorg/eclipse/ui/texteditor/ITextEditor; from class org.eclipse.ui.texteditor.AddMarkerAction$1\n\tat org.eclipse.ui.texteditor.AddMarkerAction$1.getAdapter(AddMarkerAction.java:136)\n\tat org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.getShell(AdvancedValidationUserApprover.java:390)\n\tat org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.computeOperationStatus(AdvancedValidationUserApprover.java:231)\n\tat org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.access$1(AdvancedValidationUserApprover.java:225)\n\tat org.eclipse.ui.internal.operations.AdvancedValidationUserApprover$1.run(AdvancedValidationUserApprover.java:201)\n\tat org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:152)\n\tat org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:28)\n\tat org.eclipse.swt.widgets.Display.syncExec(Display.java:3805)\n\tat org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.proceedWithOperation(AdvancedValidationUserApprover.java:197)\n\tat org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.proceedExecuting(AdvancedValidationUserApprover.java:167)\n\tat org.eclipse.core.commands.operations.DefaultOperationHistory.getExecuteApproval(DefaultOperationHistory.java:840)\n\tat org.eclipse.core.commands.operations.DefaultOperationHistory.execute(DefaultOperationHistory.java:477)\n\tat org.eclipse.ui.texteditor.AddMarkerAction.run(AddMarkerAction.java:133)\n\tat org.eclipse.jface.action.Action.runWithEvent(Action.java:499)\n\tat org.eclipse.ui.actions.RetargetAction.runWithEvent(RetargetAction.java:229)\n\tat org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:539)\n\tat org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:488)\n\tat org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:400)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:928)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3390)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3009)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1914)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1878)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:104)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:74)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:348)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:165)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:341)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:285)\n\tat org.eclipse.core.launcher.Main.run(Main.java:987)\n\tat org.eclipse.core.launcher.Main.main(Main.java:962)\n",
    "Note that testing \"getTextEditor() !\u003d null\" is not needed since getTextEditor() can\u0027t be \u0027null\u0027 at that point.",
    "Hi, Dani.  Oops.....There have been substantial changes in the advanced validation user approver since these patches were first made, and I did not make another pass over this code.  I will attach new patches.\n\nAt the time of the patches, everything worked, no exceptions or log entries, the labels showed \"Undo Add Bookmark\", etc...I need to see what else may have affected this in the meantime.\n\nThe NPE risk (#3) will be fixed, I did not consider that.\n\n#4/#5 - The strategy for workspace operations is that the operation itself now handles the workspace runnable, error handling, etc.  So this code is removed from the actions.  Logging is up to each action.  While converting all the actions, my decision process was that if the action had defined context-specific error messages, I continued to log those.  The operation error messages are somewhat generic (\"Could not add bookmark\") whereas some of the actions might have a wording that is more specific.  I did not want to lose information, so I\u0027ve left it up to the client whether to log the original error message (and you can remove the logging if you see no value).\n\nNew patches shortly...",
    "Hmmm...I\u0027m not sure what\u0027s going on here.  My local files for the action changes haven\u0027t changed since posting the patches, and everything is working properly.  I tried these scenarios:\n\n- add bookmark, remove bookmark, add task, remove task from text editor ruler while in resource perspective.  All actions have proper labels and are undoable/redoable from both the navigator and the task or bookmarks view.\n- add bookmark, remove bookmark, add task, remove task from java editor ruler while in resource perspective.  Everything fine.\n- same scenarios from text and java editors while in java perspective, undoing and redoing from the package explorer and appropriate marker view.\n\nThe log is clean, the undo/redo works as expected, the labels are good.\n\nI am running I20060906-1200, but I have the latest org.eclipse.ide, org.eclipse.ui.workbench, org.eclipse.ui.workbench.texteditor, org.eclipse.ui.editors, org.eclipse.jface.text, (among others) etc. from HEAD.  I noticed a change made just after I20060912 to AdvancedValidationUserApprover, but using either revision of the class works properly.  So I can\u0027t account for what you are seeing.\n\nI am still going to repost the patches to address point #3 in comment #7.  It avoids the NPE, but to be honest, I don\u0027t like what I did (a hardwired string).  If the client sets the action text to null, there will be problems elsewhere.  And if the resource bundle/label key are missing, then I don\u0027t like defaulting the string to some other string from the same bundle, hence the hardwired string.  Unless you are proposing that I change the operations to handle a null string?\n\nFinally, I left the getTextEditor() null check (comment #8) in on the same premise (what if the client uses setEditor(ITextEditor) to set it to null before calling run()). I don\u0027t see that the check is harmful.\n\nMeanwhile, I am downloading I20060912, but I still recommend you run the latest from HEAD.  ",
    "Created an attachment (id\u003d50080)\norg.eclipse.ui.editors.patch\n\npatch that addresses null action text.  Please note the TODO: tag, as I\u0027m not sure how you would expect to handle this.",
    "Dani, I tried the scenarios on I20050912-0800 with only the editor patches.  The scenarios have problems, but not those described, and of course the fix for #156865 was not in the integration build.  So I\u0027m assuming you must have loaded some projects from HEAD in order to get the required fix.  It\u0027s possible that you loaded the latest org.eclipse.ui.ide without the corresponding org.eclipse.ui.workbench??  This could have caused some mismatch.\n\nAt any rate, if you try the patches along with the latest workbench and ide from HEAD, all is well.  Let me know if you still have problems.",
    "Susan, I don\u0027t wanna be picky here but please note that - as written in comment 7 - your patch affects the behavior for\n  [MAIN MENU] \u003e Edit \u003e Add [Task | Bookmak]...\n\nThat\u0027s where exceptions will be thrown and where the labels are messed up.\n\nYou are right that once I had all the latest from HEAD the exception does not occur BUT only because your code no longer requests the adapter now. As soon as any operations code will do, it will fail. Simply look at the code in AddMarkerAction.run(): it accesses a protected method getTextEditor() outside its class hierarchy and hence this code is doomed to fail should it ever be executed. The question is: will it be executed ever? If so, it has to change. If not, why do we need to provide the adapter at all.\n\nRegarding the label: I did not change them and hence they could never have been correct for the \n  [MAIN MENU] \u003e Edit \u003e Add Bookmaker...\nscenario ;-)\n\n",
    "Dani, you are not being picky, just specific.\n\nI realize now that we were on different scenarios.  I assumed that you were referring to the scenario described in this bug title (undo support to the actions that add bookmarks and tasks from the editor ruler.)  When I saw your annotation in this bug, I jumped straight into the editor ruler scenario, without realizing that you had clearly described the problem as still being in Edit...Add Bookmark, etc.  And now I realize neither are you describing the Edit..Add Bookmark scenario from bug #156865, but instead the scenario where the editor is still open and the Edit... menu is used.  \n\nNow, not to be picky ;-) but the issues 0 and 1 from comment #7 only occur when you choose Add Bookmark.  Choosing Add Task does not exercise the problematic code, because it overrides the run() method to open a dialog.  That is probably why you didn\u0027t see the IllegalAccessError again, but it is still there for Add Bookmark, as is the problematic label.  And you are also right, I must not have tested the \"add bookmark with editor open\" code path.  I must have tried only tasks, which do not have the problem.\n\nThe latest patches address these problems.  I\u0027ve just successfully added tasks and bookmarks from the editor ruler, from the editor\u0027s Edit... menu, and from the Navigator\u0027s Edit... menu when the editor is closed.  In all cases, the labels are good, undo/redo work, etc.\n\nSorry for the miscommunication.",
    "Created an attachment (id\u003d50183)\norg.eclipse.ui.editors.patch\n\nNote there are three TODO:s in this patch concerning the extra logging and the possible null tooltip text.  \n\nAlso note that the protected method getTextEditor() is called from the IAdaptable created in MarkerRulerAction, but it does not cause an IllegalAccessError.  I stepped through the code to ensure that it is called.  I do not understand why and will open a separate core bug on this issue cc\u0027ing you.",
    "Dani, you likely remember this from the original bug, but the reason for the inconsistencies in the IllegalAccessError is documented in bug #152568.  My workaround (using a final variable) is different than that adopted in platform text elsewhere (using a dummy method that calls the protected method) so you may choose to handle it differently.   I assume you\u0027ll address this when you incorporate the patches.",
    "reopening to resolve",
    "I released the code along the lines of the patch. I liked to use a final local var  better than adding another method but directly assigned the shell to it."
  ],
  "commentCreationDates": [
    "2006-08-23T01:12:14+02:00",
    "2006-08-23T01:15:48+02:00",
    "2006-08-23T01:21:00+02:00",
    "2006-08-23T01:40:48+02:00",
    "2006-09-11T14:59:21+02:00",
    "2006-09-11T22:27:16+02:00",
    "2006-09-12T09:45:02+02:00",
    "2006-09-13T11:43:12+02:00",
    "2006-09-13T11:57:05+02:00",
    "2006-09-13T19:23:43+02:00",
    "2006-09-13T20:52:20+02:00",
    "2006-09-13T20:56:25+02:00",
    "2006-09-13T23:21:33+02:00",
    "2006-09-14T09:30:33+02:00",
    "2006-09-14T20:04:15+02:00",
    "2006-09-14T20:35:34+02:00",
    "2006-09-14T23:53:40+02:00",
    "2006-09-15T12:39:38+02:00",
    "2006-09-15T13:16:01+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalAccessError",
      "message": "tried to access method org.eclipse.ui.texteditor.TextEditorAction.getTextEditor()Lorg/eclipse/ui/texteditor/ITextEditor; from class org.eclipse.ui.texteditor.AddMarkerAction$1",
      "elements": [
        {
          "method": "org.eclipse.ui.texteditor.AddMarkerAction$1.getAdapter",
          "source": "AddMarkerAction.java:136"
        },
        {
          "method": "org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.getShell",
          "source": "AdvancedValidationUserApprover.java:390"
        },
        {
          "method": "org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.computeOperationStatus",
          "source": "AdvancedValidationUserApprover.java:231"
        },
        {
          "method": "org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.access$1",
          "source": "AdvancedValidationUserApprover.java:225"
        },
        {
          "method": "org.eclipse.ui.internal.operations.AdvancedValidationUserApprover$1.run",
          "source": "AdvancedValidationUserApprover.java:201"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.syncExec",
          "source": "Synchronizer.java:152"
        },
        {
          "method": "org.eclipse.ui.internal.UISynchronizer.syncExec",
          "source": "UISynchronizer.java:28"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.syncExec",
          "source": "Display.java:3805"
        },
        {
          "method": "org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.proceedWithOperation",
          "source": "AdvancedValidationUserApprover.java:197"
        },
        {
          "method": "org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.proceedExecuting",
          "source": "AdvancedValidationUserApprover.java:167"
        },
        {
          "method": "org.eclipse.core.commands.operations.DefaultOperationHistory.getExecuteApproval",
          "source": "DefaultOperationHistory.java:840"
        },
        {
          "method": "org.eclipse.core.commands.operations.DefaultOperationHistory.execute",
          "source": "DefaultOperationHistory.java:477"
        },
        {
          "method": "org.eclipse.ui.texteditor.AddMarkerAction.run",
          "source": "AddMarkerAction.java:133"
        },
        {
          "method": "org.eclipse.jface.action.Action.runWithEvent",
          "source": "Action.java:499"
        },
        {
          "method": "org.eclipse.ui.actions.RetargetAction.runWithEvent",
          "source": "RetargetAction.java:229"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:539"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$2",
          "source": "ActionContributionItem.java:488"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$5.handleEvent",
          "source": "ActionContributionItem.java:400"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:928"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3390"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3009"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1914"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1878"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:419"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:78"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:104"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:74"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:348"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:165"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:341"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:285"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:987"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:962"
        }
      ],
      "number": 0,
      "commentIndex": 7,
      "bugId": "154779",
      "date": "2006-09-13T11:43:12+02:00",
      "product": "Platform",
      "component": "Text",
      "severity": "enhancement"
    }
  ],
  "groupId": "154779",
  "bugId": "154779",
  "date": "2006-08-23T01:12:14+02:00",
  "product": "Platform",
  "component": "Text",
  "severity": "enhancement"
}