{
  "comments": [
    "With AJDT (AspectJ dev tools) installed users are reporting exceptions like this:\nCaused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1\nat java.lang.String.substring(String.java:1768)\nat\norg.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension(Util.java:839)\nat\norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName(PossibleMatch.java:101)\nat\norg.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e(PossibleMatch.java:41)\nat\norg.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1097)\nat\norg.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:94)\nat\norg.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:208)\nat\norg.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:424)\nat org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:532)\nat\norg.eclipse.jdt.internal.corext.refactoring.RefactoringSearchEngine.findAffectedCompilationUnits(RefactoringSearchEngine.java:72)\nat\norg.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.checkConflictingTypes(RenameTypeProcessor.java:593)\n\nSee AJDT bug 98547 for more details of the scenarios in which this occurs. Note\nthat the problem can happen in regular Java projects, but of course only with\nAJDT in the picture.\n\nThis happens because AJDT defines subtypes of CompilationUnit for aspects\ncontained in .aj files.\n\nUtil.getNameWithoutJavaLikeExtension (in the \"model\" source folder)\ncurrently looks like this:\n\n\t/**\n\t * Returns the substring of the given file name, ending at the start of a Java\nlike extension.\n\t */\n\tpublic static String getNameWithoutJavaLikeExtension(String fileName) {\n\t\tint index \u003d indexOfJavaLikeExtension(fileName);\n\t\treturn fileName.substring(0, index);\n\t}\n\nSo it is getting called with a name like \"MyAspect.aj\", and the\nindexOfJavaLikeExtension() method is then returning -1, resulting in the out of\nbounds exception on the next line.\n\nThe fix is therefore to simply make the method more robust, such as:\n\n\t/**\n\t * Returns the substring of the given file name, ending at the start of a\n\t * Java like extension. The entire file name is returned if it doesn\u0027t end\n\t * with a Java like extension.\n\t */\n\tpublic static String getNameWithoutJavaLikeExtension(String fileName) {\n\t\tint index \u003d indexOfJavaLikeExtension(fileName);\n\t\tif (index \u003d\u003d -1) {\n\t\t\treturn fileName;\n\t\t}\n\t\treturn fileName.substring(0, index);\n\t}",
    "Applied proposed fix and added regression test\nCompilationUnitTest#testNameWithoutJavaLikeExtension()",
    "Hi Jerome,\nThanks for the quick fix.\nIs there any possibility of also getting the fix into 3.1.1? This is a big deal\nfor us as it can mean that with AJDT installed, Java searches can stop working\ncompletely, requiring a workbench restart.",
    "Philippe, can I backport this to 3.1.1 ?",
    "*** Bug 108089 has been marked as a duplicate of this bug. ***",
    "*** Bug 108252 has been marked as a duplicate of this bug. ***",
    "Philippe,\nThis problem has resulted in about 10 separate bug reports now, and it will most\nlikely result in many more if the fix isn\u0027t available until 3.2.  When it hits\nit can result in a complete loss of major functionality - any action involving a\nJava search. The fix only has an effect when the exception is about to be\nthrown, so it is very low risk. Please can this be backported to the maintenance\nstream?",
    "(back from vacation)\n\n+1 for 3.1.1, looks like a nasty issue with a good fix.",
    "Backported fix and regression test to R3_1_maintenance branch.",
    "Verified in I20050920-0010 for 3.2M2",
    "Verified for 3.1.1 using M20050923-1430."
  ],
  "commentCreationDates": [
    "2005-08-23T17:13:42+02:00",
    "2005-08-24T11:59:41+02:00",
    "2005-08-24T12:06:40+02:00",
    "2005-08-24T12:12:04+02:00",
    "2005-08-26T15:28:58+02:00",
    "2005-08-29T12:23:21+02:00",
    "2005-08-29T13:17:02+02:00",
    "2005-09-01T12:19:16+02:00",
    "2005-09-01T15:11:31+02:00",
    "2005-09-21T15:46:38+02:00",
    "2005-09-26T16:55:12+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: -1",
      "elements": [
        {
          "method": "java.lang.String.substring",
          "source": "String.java:1768"
        },
        {
          "method": "org.eclipse.jdt.internal.core.util.Util.getNameWithoutJavaLikeExtension",
          "source": "Util.java:839"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.getQualifiedName",
          "source": "PossibleMatch.java:101"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.PossibleMatch.\u003cinit\u003e",
          "source": "PossibleMatch.java:41"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1097"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:94"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches",
          "source": "BasicSearchEngine.java:208"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.search",
          "source": "BasicSearchEngine.java:424"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:532"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.RefactoringSearchEngine.findAffectedCompilationUnits",
          "source": "RefactoringSearchEngine.java:72"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameTypeProcessor.checkConflictingTypes",
          "source": "RenameTypeProcessor.java:593"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "107735",
      "date": "2005-08-23T17:13:42+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "major"
    }
  ],
  "groupId": "107735",
  "bugId": "107735",
  "date": "2005-08-23T17:13:42+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "major"
}