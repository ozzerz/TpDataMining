{
  "comments": [
    "In WTP, DTD/Schema content model is not working.\n\nMy testcases were using an XML file that references a DTD/Schema in the\nsame folder.  There are no content assist proposals or validation based\non content model.\n\nIt looks like the content model never gets loaded, since I never saw it\nin the progress view.",
    "Which build, Phil? Was it one of the new ones with a new EMF?",
    "it was the emf-sdo-xsd-SDK-I200412091159.zip EMF \nwith the wtp-I20041216.zip build.\n\nActually it seems like only the DTD based content model is not working.\nThe XSD was just slow to load (or I was impatient) but it works.\n\nI tried DTD with both catalog entry and PUBLIC id, and in the same folder\nas the XML with SYSTEM id.",
    "I forgot to mention.\nOS was linux GTK (SLES 9.0)\n",
    "I tried with 12/17 build, with 12/16 emf (as was built with it), \nand xsd- and dtd-based content assist seemed to work fine. \n\nIf you see again with that configuration (especially on linux!) \nplease re-open. ",
    "Re-tested w/ an I-build from 12/21 (local build) and it still seems to be a\nproblem.  Nitin is also seeing this problem on his Redhat machine.\n\nThis looks like a linux only bug.",
    "Ella, can you have a look?",
    "I\u0027ve tested on WTP 20041221 build on Linux RH and DTD content model seams to \nwork fine.\n\nI\u0027ve tested with Invoice.dtd content model on both - the empty file (only with \nDOCTYPE) and the file with elements, source only and XML editor with design \npage.  I tested without catalog and also with catalog both Public and System \nIds.\n\nPhilip, probably I didn\u0027t do exactly what you did, could you please describe \nthe steps that you run through.  \n",
    "wtp-sdk-I20041222.zip\n\teclipse-SDK-3.1M4-linux-gtk.zip\n\temf-sdo-xsd-SDK-I200412160800.zip\n\tGEF-SDK-I20041216.zip\n\tJEM-runtime-1.0.2.zip\n\tjava version \"1.4.2_05\"\n\tJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_05-b04)\n\tJava HotSpot(TM) Client VM (build 1.4.2_05-b04, mixed mode)\n\nI unzipped the above files and start with a fresh workspace.  I then turned off\ninferred grammar support on the XML Source preference page.  Then I created the\n\"Editing and Validating XML files\" project.  When editing the\nInvoice/Invoice.xml file, Content Assist doesn\u0027t offer any tags.  Removing the\n\"BillTo\" attributes doesn\u0027t still show them in the Property Sheet, either (which\nit should since the content model would cause them to be shown if they\u0027re not in\nthe document).  Altering the DOCTYPE declaration to be a SYSTEM type pointing to\n\"Invoice.dtd\" doesn\u0027t change the result.\n\nWhile Phil is using SLES9, I\u0027m actually seeing this on Fedora Core 3...but it\nshouldn\u0027t make a difference, I think.",
    "I just saw the same issue (I Downloaded HEAD source however; did not use M2).\n\nCode completion does not work with the schema at all (Tried to use the\nXMLCatalog,  hardcode the location in the xml itself etc). Nothing seems to\nwork. I don\u0027t have a DTD to test with.\n\nValidation works however (\"Validate XML\"). I get a bunch of errors which\nobviously must have come from the schema, so the validation found it.. \n\nIf anyone can point out a little where (in code) the content assistant tries to\nget the schema for the code completions, I\u0027d be happy to help debug.\n",
    "I\u0027m using SuSE Linux 9.1 by the way, JDK 1.4.2_03 32bit (on amd64 machine)\n\n",
    "The local DTD doesn\u0027t work on Mac OS X (10.3) either.\nUsing a non local DTD in an XML file works, e.g.\n\n\u003c!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e\n\nHowever the schema in the \"PublicationCatalogue\" works.\n\nTested with 3.1M6 and wtp-prereqs-sdk-1.0M3.zip.\nThe same configuration works seemless on Windows XP.\n\nMaybe it\u0027s the resolution of the local DTD.",
    "Moving the DTD to a local web server solves the problem.\n(But this isn\u0027t really a long term solution.)",
    "I\u0027ve just downloaded wtp-eclipse-emf-gef-jem-sdk-1.0M4.zip and I\u0027m seeing\nexactly the same problem - trying to work with a local copy of the docbook DTD,\neither via a system identifier or a catalog entry, within the workspace it or\noutside it, doesn\u0027t work; but referencing the dtd on the web works fine.",
    "We\u0027ve got to get these non-windows users covered. \nLet\u0027s tests this this week to see if we narrow down what \nworks on what doesn\u0027t and why not. \n\nLet\u0027s cover the two cases of 1. in xmlcatalg and also case of 2)\njust in the file system \"next to\" the file. \n\nWith any luck, some of Ella\u0027s recent work will have fixed \nthis already. \n\n",
    "I\u0027m upping the priority and severity of this one.  I\u0027m guessing there\u0027s a fairly\nsimple fix for this.  It would be nice to have this fixed for WTP 0.7!",
    "It might be related to this stack:\n\nThread [Worker-7] (Suspended)\n\tCMDocumentManagerImpl.lookupOrCreateResolvedURI(String, String) line: 106\n\tCMDocumentManagerImpl.addCMDocumentReference(String, String, String) line: 186\n\tCMDocumentLoader.handleGrammar(String, String, String) line: 105\n\tCMDocumentLoader.loadCMDocuments() line: 66\n\tDOMObserver.invokeCMDocumentLoad() line: 177\n\tDOMObserver$TimerJob.run(IProgressMonitor) line: 139\n\tWorker.run() line: 76\n\n\nCMDocumentManagerImpl.lookupOrCreateResolvedURI(String, String) is only\nreturning a resolved result on Windows.  Referencing \"WEB-INF/something.dtd\"\nworks there but not on Linux.",
    "I found a silently ignored IllegalArgumentException that happens only on Linux.\n I isolated it in a non-flexible non-web project.\n\nIAE with systemURI \u003d WEB-INF/other.dtd and baseURI \u003d\n/home/nitin/eclipse.wtp/runtime-workspace/P/module001/WebContent/other.xml\njava.lang.IllegalArgumentException: resolve against non-hierarchical or relative\nbase\n\tat org.eclipse.wst.common.uriresolver.internal.URI.resolve(URI.java:1199)\n\tat org.eclipse.wst.common.uriresolver.internal.URI.resolve(URI.java:1172)\n\tat\norg.eclipse.wst.common.uriresolver.internal.ExtensibleURIResolver.normalize(ExtensibleURIResolver.java:107)\n\tat\norg.eclipse.wst.common.uriresolver.internal.ExtensibleURIResolver.resolve(ExtensibleURIResolver.java:75)\n\tat\norg.eclipse.wst.xml.core.internal.modelquery.XMLCatalogIdResolver.resolve(XMLCatalogIdResolver.java:61)\n\tat\norg.eclipse.wst.xml.core.internal.modelquery.XMLModelQueryAssociationProvider.resolveGrammarURI(XMLModelQueryAssociationProvider.java:35)\n\tat\norg.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.XMLAssociationProvider.resolveGrammarURI(XMLAssociationProvider.java:160)\n\tat\norg.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentManagerImpl.lookupOrCreateResolvedURI(CMDocumentManagerImpl.java:113)\n\tat\norg.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentManagerImpl.addCMDocumentReference(CMDocumentManagerImpl.java:186)\n\tat\norg.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentLoader.handleGrammar(CMDocumentLoader.java:105)\n\tat\norg.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentLoader.loadCMDocuments(CMDocumentLoader.java:66)\n\tat\norg.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.InferredGrammarBuildingCMDocumentLoader.loadCMDocuments(InferredGrammarBuildingCMDocumentLoader.java:56)\n\tat\norg.eclipse.wst.xml.ui.internal.DOMObserver.invokeCMDocumentLoad(DOMObserver.java:177)\n\tat org.eclipse.wst.xml.ui.internal.DOMObserver$TimerJob.run(DOMObserver.java:139)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)\n",
    "Reassigning to myself, since I believe I have a working set of changes.  In\naddition to the IllegalArgumentException, I found that the\norg.eclipse.wst.dtd.core.internal.saxparser.DTDParser wasn\u0027t setting a base\nreference for its in-memory XML document.  This caused the underlying SAX parser\nto fault.\n\nCraig, when we switched from Xerces to JAXP I recommended dropping our\nimplementation of URI (the EMF-derived one) to using the class in JAXP.  Was\nthere a reason we didn\u0027t?  The java.net.URI class doesn\u0027t show this problem and\nmy changes to the ExtensibleURIResolver.normalize method simply fall back to\nusing it in case of an IllegalArgumentException from its own class.",
    "Changes to ExtensibleURIResolver.normalize and DTDParser.parse committed to\nHEAD.  I\u0027m releasing them for tonight\u0027s scheduled integration build.",
    "Hmmm... I\u0027m glad this fixes the problem but (I\u0027m sure you\u0027ll agree) a cleaner\nlong term solution needs to be found.  In the past we\u0027ve noted the Java URL\nclass has some bugs, that\u0027s we use the EMF derived URI class.  I\u0027ll try to\nprovide more concrete details on this.  I agree we should clearly document why\nwe\u0027re using one implementation over the other. \n\nThe EMF-derviced URI class assumes that the \u0027base\u0027 will be a fully qualified URI\n(including a protocol) hence the exception.  Is there some reason why we can\u0027t\nfully qualify our base URI\u0027s? ",
    "Craig, the base URI given in Linux *is* a fully qualified file path, just not a\nfile URL.  If we require that it be a file: URL, it should be clearer.",
    "Yes I agree the documentation needs to be clearer here.  But the current\nassumption here is that the baseURI needs to be protocol qualified before we can\ncompute the relative references.  Otherwise how will the eventual URI end up as\nsomething that is protocol qualified?  At the end of the resolution process I\nthink we need to have protocol qualified URI\u0027s.",
    "Isn\u0027t a protocol-defined URI a URL, then?  Who says the result also has to be\nprotocol qualified?",
    "Marking as verified as I know this issue is fixed (or correctly categorized).\nIf, as originator, you disagree or still see, please re-open, or open a new bug. \n\nThanks very much for reporting and helping make WTP better. \n",
    "Closing"
  ],
  "commentCreationDates": [
    "2004-12-17T16:03:49+01:00",
    "2004-12-17T16:13:43+01:00",
    "2004-12-17T16:49:50+01:00",
    "2004-12-17T19:52:24+01:00",
    "2004-12-18T04:59:04+01:00",
    "2004-12-21T20:17:19+01:00",
    "2004-12-21T21:47:14+01:00",
    "2004-12-22T16:42:24+01:00",
    "2004-12-22T19:20:15+01:00",
    "2005-01-29T01:05:33+01:00",
    "2005-01-29T01:28:18+01:00",
    "2005-04-26T12:15:51+02:00",
    "2005-04-27T07:42:52+02:00",
    "2005-05-16T16:13:46+02:00",
    "2005-06-28T03:37:26+02:00",
    "2005-06-29T21:29:19+02:00",
    "2005-06-30T00:19:14+02:00",
    "2005-06-30T01:23:59+02:00",
    "2005-06-30T02:11:36+02:00",
    "2005-06-30T02:19:50+02:00",
    "2005-06-30T20:11:17+02:00",
    "2005-06-30T20:20:08+02:00",
    "2005-06-30T20:54:15+02:00",
    "2005-06-30T21:21:37+02:00",
    "2005-07-25T17:43:40+02:00",
    "2005-08-26T11:56:54+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "resolve against non-hierarchical or relative base",
      "elements": [
        {
          "method": "org.eclipse.wst.common.uriresolver.internal.URI.resolve",
          "source": "URI.java:1199"
        },
        {
          "method": "org.eclipse.wst.common.uriresolver.internal.URI.resolve",
          "source": "URI.java:1172"
        },
        {
          "method": "org.eclipse.wst.common.uriresolver.internal.ExtensibleURIResolver.normalize",
          "source": "ExtensibleURIResolver.java:107"
        },
        {
          "method": "org.eclipse.wst.common.uriresolver.internal.ExtensibleURIResolver.resolve",
          "source": "ExtensibleURIResolver.java:75"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.modelquery.XMLCatalogIdResolver.resolve",
          "source": "XMLCatalogIdResolver.java:61"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.modelquery.XMLModelQueryAssociationProvider.resolveGrammarURI",
          "source": "XMLModelQueryAssociationProvider.java:35"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.XMLAssociationProvider.resolveGrammarURI",
          "source": "XMLAssociationProvider.java:160"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentManagerImpl.lookupOrCreateResolvedURI",
          "source": "CMDocumentManagerImpl.java:113"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentManagerImpl.addCMDocumentReference",
          "source": "CMDocumentManagerImpl.java:186"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentLoader.handleGrammar",
          "source": "CMDocumentLoader.java:105"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.CMDocumentLoader.loadCMDocuments",
          "source": "CMDocumentLoader.java:66"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.contentmodel.modelqueryimpl.InferredGrammarBuildingCMDocumentLoader.loadCMDocuments",
          "source": "InferredGrammarBuildingCMDocumentLoader.java:56"
        },
        {
          "method": "org.eclipse.wst.xml.ui.internal.DOMObserver.invokeCMDocumentLoad",
          "source": "DOMObserver.java:177"
        },
        {
          "method": "org.eclipse.wst.xml.ui.internal.DOMObserver$TimerJob.run",
          "source": "DOMObserver.java:139"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 0,
      "commentIndex": 17,
      "bugId": "81528",
      "date": "2005-06-30T01:23:59+02:00",
      "product": "Web Tools",
      "component": "wst.xml",
      "severity": "major"
    }
  ],
  "groupId": "81528",
  "bugId": "81528",
  "date": "2004-12-17T16:03:49+01:00",
  "product": "Web Tools",
  "component": "wst.xml",
  "severity": "major"
}