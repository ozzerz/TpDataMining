{
  "comments": [
    "Support for multi-threaded processes.  This work will require a lot of new code in the various services which currently assume only one thread.\n\nEffort Estimate: 12, 10",
    "Created an attachment (id\u003d73200)\nFirst draft Functionality\n\nHi Pawel \nThis is an initial patch for the service. Its incomplete and tries to achieve the following though not everything is achieved yet. Doesnt let you step-in properly at the moment\n\n1. Fetch thread ids using -thread-list-ids command. \n\n2. Created ContainerLayoutNode.java and updated LaunchViewModelProvider.java to show the hierarchy launch-\u003e process -\u003e threads -\u003e Stack Frames in the debug view\nI know you had to create the node but I had some time and I wanted to see it in action, so did it myself but its incomplete. You are welcome to change it in any way u like. \n\n3. -thread-select \nImplemented in AbstractMIControl.java\nAlso, getFrames() method in MIStack and DsfMIStackListFrames has been changed to accept IExecutionDMC as a parameter which will be needed to select the thread ID. \nBut there is a problem in finding the right IExecutionDMC while stepping etc because DMContexts.getAncestorOfType returns ServiceDMCs(IConatinerDMContext) as its the first ExecutionDMC found.\n\n4. GDBThreadDMC and GDBThreadData is added to GDBProcesses.java \ngetModelData() has been changed appropriately. \ngetThreadData() mehtod is still incomplete. Probably we will have to use CLI command \"info threads\" to fetch the information in this method. \ngetProcessData() - Do we have a command to fetch this information in case of GDB or the present implementation is good enuff. \n\nMIRunControl.java\nPlease check the initialization of container DMC. \nAlso, What would the execution DMC be ? \nIm still confused regarding ExecutionDMC like for the following method\n    public void eventDispatched(DsfMIGDBExitEvent e) {\n        if (fTerminated) return;\n          getSession().dispatchEvent(new ExitedEvent(fServiceDmc, e, fExecutionDmc), getProperties());\n   }\nIf fServiceDmc is the container DMC(ServiceDMC defined in MIRunControl class) then what would fExecutionDMC be ? Isnt ExecutionDMC a ContainerDMC for us.\nOr its something different and if its diff then what would it be ? \n  \nAlso, I have inserted some TODO: VK: in all the classes where I have done some minor changes. It will give u an idea about the changes made. Some of the TODOs are questions for you.\n\nClasses Changed: \nINativeProcesses.java-  I have changed this interface. May be its not needed but I didnt know other way to achieve it.\nDsfMICommand - A constructor is added. Not a major change\nMIStack.java - getFrames changed so that it can use IExecutionDMC \nAbstractMIControl.java - For thread-select\nDsfMIStackListFrames.java - To take executionDMC as parameter in constructor\nLaunchViewModelProvider.java - To add the container node in hierarchy\nThreadLayoutNode.java - updateElementsInthreads changed to fetch thread ids from back end\nMIRunControl.java - IContainerContext concept is added and back end implementation of -thread-list-ids command\nGDBProcesses.java - getModelData() changed to fetch data according to the executionContext. getThreads() method added but still incomplete.\nNew Classes Added:\nDsfCLIInfoThreads.java\nDsfMIThreadListIds.java\nDsfMIThreadSelect.java\nDsfCLIThreadsInfo.java\nDsfMIThreadListIdsInfo.java\nContainerLayoutNode.java\n\nVeenu",
    "Thank you for the patch, it looks like a very promising start.  This is a pretty large work item and it\u0027ll definitely take some time.\n\nI spent a couple of hours looking through the changes and I didn\u0027t see any major issues...  it looks to be on the right track :-)  I made some changes in the INativeProcesses interface to clarify it a bit and make it more extensible I\u0027ll attach it for you to look at).\n\nAs far as your questions:\n\nContainerDMC should have its own class (i.e. ServiceDMC should probably be renamed to something like MIContainerDMC).  \nThe purpose of the container DMC is to have a context that represents the threads as a collection.  Some run control operations such as resume, suspend, and even step, may be executed on all the threads at the same time, and the container context provides a way to do that.  It is also useful in generating events (next comment).  In the default MI implementation, where the debugger is attached to a single process, the container represents the process and I think it makes sense to have this be an explicit object that is separate from the service DMC. \nAs far as events go.  The events about thread list changes (thread added, thread exited) are generated against the container.  This allows the view clients to update information about threads more efficiently.  However, in our model, the container is also an execution context, so if a container exits, I needed another container to generate the event on.  That\u0027s why I used the service DMC as the container.  I don\u0027t think it\u0027s a good solution and we need to think of something better.  Perhaps we could discuss this on Tuesday.\n\nI\u0027m out of time today, but I have one more note: the change in AbstractDMContext should not be necessary.  If getServiceFilter() returns null, it\u0027s a bug.\n \n",
    "Created an attachment (id\u003d73230)\nINativeProcess interface with suggested changes.\n\n",
    "Hi Veenu,\nI\u0027ve spent a few hours looking at this patch today.  The error in the getFrames() was coming from the fact that the events were being generated on the container context, but were being treated by the threads and stack frame layout nodes, like they were on an execution context.\n\nI started rewriting the event handling so that it includes awarness of container events.  I think the changes are complete, but I didn\u0027t have time to debug it so when I started running I got some exceptions and the debug view didn\u0027t update on step.\n\nI also tried to deal with the service context being a container problem.  I ended up moving the exited event for the process out of the run control service and into the GdbProcesses service, and I got around this problem that way.  Now the GdbProcesses (INativeProcesses) will handle the process lifecycle events, and the run control service will only deal with life cycle events of threads.\n\nI\u0027ll attach the patch with my changes.",
    "Created an attachment (id\u003d73496)\nPatch with the modified run control container events.\n\n",
    "Hi Pawel,\nThanx for the patch. I just applied it and tested it a bit. \nStill I see the problem that we saw tomorrow. When getFrames() is called on a stack frame selection, There are 3 container segments. \n\n\nAnother question - Since you have tackled the problem of ServiceContext, Can I get rid of ServiceDMC in MIRunControl and use the geenric ServiceDMContext instead ? \n\nAlso, while going through the changes I saw that you have defined\n     public static class ContainerSuspendedEvent extends ....\n        implements IRunControl.ISuspendedDMEvent\nWhy is it implementing ISuspendedEvent and not IContainerSuspendedEvent ? \n\n\nThanx \nVeenu\n\n\n\n\n\n\n",
    "Yes, you should get rid of the custom ServiceDMC.\n\nI also saw the bad call to getFrames() as well as an exception (trace below), both of which happen during event processing.  I started looking at it, but I ran out of time, and unfortunately I won\u0027t be able to look at it probably until Friday.\n\nUncaught exception in session executor thread: java.lang.IllegalStateException: RequestMonitor: RequestMonitor: Status OK: org.eclipse.core.runtime code\u003d0 OK null, done() method called more than once\n\tat org.eclipse.dd.dsf.concurrent.RequestMonitor.done(RequestMonitor.java:142)\n\tat org.eclipse.dd.dsf.ui.viewmodel.AbstractVMLayoutNode$2$1.handleCompleted(AbstractVMLayoutNode.java:218)\n\tat org.eclipse.dd.dsf.concurrent.RequestMonitor$1.run(RequestMonitor.java:148)\n\tat org.eclipse.dd.dsf.concurrent.DefaultDsfExecutor$TracingWrapperRunnable.run(DefaultDsfExecutor.java:219)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:123)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:65)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:168)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)\n\tat java.lang.Thread.run(Thread.java:595)\n\n\nYou are correct, the ContainerSuspendedEvent should implement IContainerSuspendedDMEvent, it was my omission.  This may also help with the event processing.\n\nP.S. To see exceptions that happen in the dispatch thread, enable tracing in the java VM with the -ea option.",
    "Hi Pawel,\nI tried a bit to locate the problem but not much progress. I think this needs to be sorted out before I can proceed further as I think now all the problems are related to having correct execution context. \nI also looked into problem of parsing output from command \"info threads\". This command is special as it has information spread out in 4 lines\n \u0026\"info threads\\n\"\n ~\"* 1 Thread 1075198176 (LWP 11068)  main (argc\u003d1, argv\u003d0xbfffd824)\\n\"\n ~\"    at ../thread.c:18\\n\"\n ^done\nAll these lines are OOBs which are processed as events except the last one which is a ResultRecord. \nLooking at DsfMIOutput it gives the impression that output shall either contain a result record or an OOB. It cant be both as single line can either be a RR or an OOB. (If this impression is not right then probably the implementation of processMIOutput needs to be re-looked at.)\nThus in cases where output is spanning multiple lines I guess we need to find another way of processing the output stream or change in GDB ? \nAny ideas ?\n\n/ Veenu\n\n",
    "Created an attachment (id\u003d73783)\nPatch for correctly processing accumulated OOB records.\n\nI looked into the problem of OOB records, and I discovered that I did not port this functionality from CDI-MI implementation correctly.  The CDI-MI implementation contains some duplicate logic in this area which confused me at the time.  I\u0027m attaching the patch that fixes the processing of accumulated OOB records.",
    "Created an attachment (id\u003d73787)\nPatch containing fixed event handling for ThreadLayoutNode\n\nI did some debugging of the event code, and made a couple of changes:\n1) I fixed how the DM Contexts relate to each other: MIContainerDMC has the service DMC as a parent, MIExecutionDMC has the container DMC as a parent.  The MIEexutionDMC does not need to have the service DMC, because it refers to it through the container DMC already.\n2) The ThreadsLayoutNode needs to do some special handling of the container events.  The main problem is that the IConatinerDMContext extends IExecutionDMContext and this is confusing the view model event handling logic, which is implemented in the base class AbstractDMVMLayoutNode.  I fixed the problem in ThreadsLayoutNode, but it shows the weakness in the current design where container DMC extends the exec DMC.  Also the changes made stepping really slow which needs to be investigated also.",
    "Created an attachment (id\u003d74251)\nHandling of multiple threads\n\nThis patch implements \n* container layout node\n* Retrieve list of threads and information of threads from back end\n* Multiple threads in view\n* Selection of thread\n* Stack frames corresponding to the selected thread\n",
    "(From update of attachment 74251)\nHi Veenu,\nI committed your last patch.  The only change I made was remove the check for null IDMContext.getServiceFilter().  If there is a null service filter, it is a bug.\n\nThe new issue that I saw, was the fact that the CLI console output prints a \"info threads\" with every step.  This message should be suppressed.",
    "Created an attachment (id\u003d74565)\nEvent Handling in MIRunControl\n\nHi Pawel,\nThis patch does the following\n* Suppressed \"info threads\"\n* Reason for state is displayed on thread label. \n* Handles DsfMIThreadCreatedEvent - At the moment its clearing the cache. Later when Cache is more smarter then we can probably remove few affected commands from the cache instead of clearing whole cache\n* DsfMIThreadExitEvent - I have implemented the skeleton in MIRunControl for it.\nFiring the event is yet to be done \nActually I could not figure out how does one know if a thread has exited. Couldn\u0027t find anything in GDB manual and  looked into CDT where it keeps track of new and old threads and fire exit events based on that. And this is done on every suspend.\n\nOr another idea I had was to track OOB event \n~\"[Switching to Thread 1079401392 (LWP 10630)]\\n\"\nA switch will surely take place on thread exit. So we can compare the old and new list only on switch and not on every suspend. \n\nDo you have a better strategy for this ? \nVeenu",
    "Created an attachment (id\u003d74634)\nAdditional edits for event handling in MIRunControl\n\nHi Veenu,\nI\u0027ve reviewed the patch, and I have some notes plus a new version of the patch.  Although I didn\u0027t have time to test the patch too much.\n\n1) DsfMIThreadCreatedEvent\nThe generating of DsfMIThreadCreatedEvent should be done inside GDBEventProcessor, since the implementation involves parsing GDB specific console stream output.  This is also where you could put in generating of the exited event.  Unfortunately, I don\u0027t have any better suggestions for detecting when a thread is exited.  So until GDB itself is changed to add support for these events, we\u0027ll have to live with hacks.\n\n2) For filtering the \"threads info\" echo from the CLI console, I added a generic mechanism.  When I first implemented CLIProcess I thought I took care of this problem, but it turned out that I missed the log output.  The generic mechanism mimics in a way what CDI-MI implementation does.\n\n3) It\u0027s nice to see the state change reason from the event, but I wonder why you have the setting of state change reason in handling of the CommandResumedEvent.\n\n4) I wonder why get rid of the cache reset call in public void eventDispatched(ContainerSuspendedEvent e)?  This seems to be causing some update issues for me.\n\n5) I think I got a little carried away with the event changes, but I wanted to save you time guessing and once I started making the changes it was hard to find a stopping point....\nI added tracking of the triggering context along with fStateChangeReason, so that we could report a correct state change reason to each thread.  I also added the triggering context to the resumed event, because I think it makes sense there also.  The thread-id for the resumed event comes from the context that was used to issue the command.\n\n",
    "Hi Pawel,\nThanx for the comments and changes. I welcome you going over board with the changes :)\nAbout ur comments\n1) Agreed. \n2) Ya I thought that there should be a better way of doing this. I saw the way u have done. Its perfect.\n3) StateChangeReason in ContainerResumedEvent shd have been commented. It wasn\u0027t intended to be there.\n4) About clearing cache during each suspend - MY thinking ... Clearing cache during every suspend is an overhead especially when one STEPS. May be we can discuss this in our next meeting. For the time being I can keep it as I too have seen some update problems.\n5) Thanx a lot. I don\u0027t mind it.\n\nVeenu\n ",
    "Created an attachment (id\u003d74701)\nThread exit event handling\n\nHi Pawel, \nThere is an event generated by GDB when thread exits. I was wrong there. So there is no need of hacks :)\n* Have implemented Exit event for threads - only clearing cache when thread exits\n* Removed all the un-wanted code from MIEventProcessor and CLIprocess\n* Also there was a NumberFormat bug. I have corrected it in DsfCLIThreadsInfo.\n\nI have tested your and my changes and it\u0027s running fine now. If you feel confident enuf then you can commit the patch.\n\nVeenu\n\n",
    "(From update of attachment 74701)\nLooks good to me :-)\nI applied the patch as is.",
    "(In reply to comment #14)\n\u003e 3) It\u0027s nice to see the state change reason from the event, but I wonder why\n\u003e you have the setting of state change reason in handling of the\n\u003e CommandResumedEvent.\n\nThat\u0027s funny, this is actually opposite of what I was trying to say.  I DO think it makes sense to report state change reason for why a thread/process is running.  What do you think?",
    "(In reply to comment #18)\nOkie. I read CommandResumedEvent as ContainerResumedEvent. \n\nYes it makes sense to me too. I had put it in the beginning, then removed it coz i couldn\u0027t see any reason in CDT. \nAnyways, I have un-commented in ContainerResumedEVent but I am unable to locate the \"CommandResumedEvent\". \n\nVeenu\n\n",
    "That was one poorly written note.  CommandResumeEvent was a typo it was supposed to be ContainerResumedEvent.\n",
    "Created an attachment (id\u003d76222)\nContainerLayoutNode.java changed\n\nHi Pawel,\nProblem that I saw  - when there are multiple threads say thread with ids 1,2,3,4 and any thread except the last one exits say 3, elements are updated for the container but labels are not updated. Though thread 3 has exited but the debug view will show 2,3 \u0026 4. Hence, no of elements are updated but the label\u0027s are not updated.\n\nupdateLabelsInSessionThread is called only once. It should be called for all the threads in a container which according to me means buildDeltaForDMEvent(..) in case of ContainerLayoutNode should mark Container as changed (ie CONTENT) for ContainerSuspendEvent and ContainerResumeEvent.\nI have overridden the method and it seems to work fine. Please review the method and let me know if it\u0027s the right way or not. May be I haven\u0027t understood the concept completely.\n\nI also saw error \"mi_cmd_var_create\" from GDB in case of varibale creation. Don\u0027t know whether we can do something about it ? \nAlso, When program is running the debug buttons like step-in, step-over etc are not disabled. \n\nVeenu\nVeenu\n",
    "Created an attachment (id\u003d76229)\nRunUntil and Execution Context awareness\n\nHi Pawel,\nThis patch contains the following.\n-\u003e Frame Context and Execution Context awareness in various command classes and Services. Have also modified the hierarchy in ExpressionService.java. Please check.\n-\u003e MIRunControl : runUntil implemented for Junit for the time being. We can discuss it\u0027s extensibility later.\n-\u003e MICommandCache - Modified to cache commands corresponding to multiple execution contexts. Those commands that do not have an execution context id will be stored against id \u003d -1.\n\nNote:\nDsfMIExecRun is used from LaunchSequence.java where we don\u0027t have an execution dmc. For the time being I haven\u0027t removed the constructor DsfMIExecRun(String[]) \n\nChanges in ContainerLayoutNode.java are not included. I will send another patch after your feedback.\n\nVeenu\n",
    "(In reply to comment #22)\n\nHi Veenu, thank you for the quick patch.  Before I apply it, I have a couple of questions:\n\n- The variable commands -var-create -var-update, etc, all take IFrameDMContext as an argument.  This may be too restrictive as some expressions may not require a stack frame or even thread context for evaluation, (i.e. arithmetic expressions, functions, and global variables).  From the user\u0027s point of view, this means that the expressions in the expressions view should attempt to evaluate even if the user has the thread or container selected in debug view.  Thus I would expect three types of constructors in these commands:\n 1. one that takes the MIContainerDMC,\n 2. one that takes the MIThreadDMC\n 3. one that takes MIFrameDMC.\nI would use the MI* types rather than the pure interfaces of these DMC, because at this level we can assume that the services are MI-implementation based, and the AbstractMIControl requires these types in order to generate the proper -thread-select and -stack-frame-select.\n\n- The methods in the ExpressionService need to handle the error condition where the required DMC is not found in the parameter context.  In those cases, the service should create an error status with code IDsfService.INVALID_HANDLE and return it to the client.\n\n- The MIRunControl.getExecutionContexts() has a bug in that if the RequestMonitor.setData is never called then an error should be set with setStatus().  In this case, an error status with IDsfService.INVALID_HANDLE would be appropriate.\n\n- I assume that the commented out code eventDispatched() handlers for Started/Exited events will get cleaned up.\n\n- I was hoping that MICommandCache could remain generic and be moved to the org.eclipse.dd.dsf.debug.service.command package.  This way it could be a powerful building block for non-MI based debugger back ends.  To this end I would like to see if it is possible to avoid references to the MI-specific stuff.  What I thought would make sense is to key the separate caches (in fCachedResults) using the DMC\u0027s themselves.  DMC\u0027s are light weight immutable handles and are appropriate to use as keys.  \nThe tricky part comes when figuring out which caches should be cleared.  For this, I think we could use the hierarchical nature of DMCs, so that a method for resetting a cache for a given context would look like this:\n\n/**\n * Clears the cache entries for given context.  Clears the whole cache if \n * context parameter is null.\n */\n    private Map\u003cIDMContext\u003c?\u003e, HashMap\u003cCommandInfo, ICommandResult\u003e\u003e fCachedContexts \u003d new HashMap\u003cIDMContext\u003c?\u003e, HashMap\u003cCommandInfo, ICommandResult\u003e\u003e();\n\npublic void CommandCache.reset(IDMContext\u003c?\u003e dmc) {\n    if (dmc \u003d\u003d null) {\n        fCachedContexts.clear();\n    }\n\n    for (Iterator\u003cIDMContext\u003c?\u003e\u003e itr \u003d fCachedContexts.keySet().iterator(); dmcKeyItr.hasNext();) {\n        IDMContext\u003c?\u003e keyDmc \u003d itr.next();\n        if (keyDmc !\u003d null \u0026\u0026 DMContexts.isAncestorOf(keyDmc, contextToReset) {\n           itr.remove();\n        }\n    }\n}\n\n\nI\u0027m also not sure if it would make sense to require that all MI commands have an IDMContext parameter (it could default to MIContainerDMC).  That way the above code wouldn\u0027t have to guard against the null values.\n",
    "Created an attachment (id\u003d76248)\nUpdated ContainerLayoutNode.java\n\n(In reply to comment #21)\nThe ContainerLayoutNode event processing can be quite a bit simpler than the event processing in ThreadLayoutNode.  ThreadLayoutNode has to account for the fact that IContainerDMContexts extends IExecutionDMContext which confuses the standard DM event processing in AbstractDMVMLayoutNode.buildDeltaForDMEvent().  \n\nContainerLayoutNode also does not need to process the IResumedDMEvent/ISuspendedDMEvent, which indicate state change of individual threads.  So what is left are two types of events to be handled:\n\n1) IContainerSuspendedDMEvent/IContainerResumedDMEvent - Issue an IModelDelta.STATE for these.  Even though the icon or label of the container node may not change in Debug view, if the user has this node selected, the run control actions should update their state.\n\n2) IExitedDMEvnet/IStartedDMEvent - These indicate that a thread was added/removed, so IModelDelta.CONTAIENR event is sent to repaint the whole sub-tree under the container.\n\nI\u0027m attaching the updated ContainerLayoutNode.  Please test it in your environment.  Also if possible, please attach the source for the multi-thread testing program that you use? \n",
    "(In reply to comment #21)\n\u003e I also saw error \"mi_cmd_var_create\" from GDB in case of varibale creation.\n\u003e Don\u0027t know whether we can do something about it ? \nThis is probably related to bugs in ExpressionService.  I think we can let Marc sort this out when he gets up to speed on this service.\n\n\u003e Also, When program is running the debug buttons like step-in, step-over etc are\n\u003e not disabled. \nWhen stepping, the step buttons are intentionally left enabled so that the user could queue-up several step commands.  But when running to a breakpoint, all the run control commands should be updated.  It is possible though that the breakpoint is hit so fast that by the time the commands are being refreshed, the program is stopped already.  How are you testing this?\n\n",
    "Created an attachment (id\u003d76307)\nSource program for multi threaded gdb application\n\n(In reply to comment #24)\n\n\u003e The ContainerLayoutNode event processing can be quite a bit simpler \nYou are right. I understand your point here. \n\n\u003e 1) IContainerSuspendedDMEvent/IContainerResumedDMEvent - Issue an\n\u003e IModelDelta.STATE for these.  Even though the icon or label of the container\n\u003e node may not change in Debug view, if the user has this node selected, the run\n\u003e control actions should update their state.\n\u003e \n\u003e 2) IExitedDMEvnet/IStartedDMEvent - These indicate that a thread was\n\u003e added/removed, so IModelDelta.CONTAIENR event is sent to repaint the whole\n\u003e sub-tree under the container.\n\nTheoretically it should be like this but practically it doesn\u0027t work.\nThe problem with GDB is that though the exit event is fired but commands  -thread-list-ids and \"info threads\"  keep returning the thread that just exited,     for quite some time. There is a gap between the fired event and the values returned by these commands. \nOnly way GDB indicates is via an exit event and in \"info threads\" command\nlike (Note Exiting against the thread)\n ~\"* 2 Thread 1078250416 (LWP 6058) (Exiting)  0x4003ed9a in start_thread ()\\n\"\n~\"   from /lib/tls/libpthread.so.0\\n\"\nbut -thread-list-ids won\u0027t reflect this.\nOur problem is that elements are painted according to -thread-list-ids and labels are painted using \"info threads\". \nAnd it\u0027s info threads and not -thread-list-ids which has the exit information.\n\nSo either we use IModelDelta.CONTAINER event on IContainerSuspendEvent or some other kinda hack ?? \n\n\u003e Also if possible, please attach the source for the multi-thread\n\u003e testing program that you use? \nSource file attached. \n\n",
    "(In reply to comment #26)\n\nThis is pretty horrible on GDB\u0027s part :-(  I know that CDI/MI issues an \"info threads\" on every step command and it is a major drag on its performance when debugging applications with large # of threads.  \nGiven this I\u0027m not sure what the best solution is, however I think it would be better to keep whatever hack is needed inside of the service.  For example you could issue a -thread-list-ids inside the service following every suspended event, and issue an exited/started event when you see a change in the returned data.  As an optimization, we could offer the user an option in the UI of having a manual refresh mode, where the automatic -thread-list-ids would not be generated.  These hacks should be implemented in GDBRunControl though, because they are GDB-specific.\n\nGenerating a ModelDelta.CONTAINER on every suspend would make it impossible to optimize stepping performance.  Also the ContainerLayoutNode is meant to be shared with other debugger implementations, although you do have the option to override that in gdb.ui plugin.  \n\n",
    "A similar issue has been reported from a Solaris 8 user (has not yet been reproduced on Solaris 9 or 10), running CDT 3.1.2:\n\n\"In the Debug view, all the threads are listed in Debug window, source\ncode can be viewed in the Code window. While debugging, if the control\njumps from one thread to another, neither the Debug window, nor the Code\nwindow will focus on the newly activated thread. The user needs to\nmanually search the thread list in the Debug window, and select the\nthread, to redeem focus. The bug appears sporadically. \n\nThe \u0027Debug\u0027 window does not scale well for systems with many (\u003e50)\nprocesses. The threads are ordered by a unique identifier rather than\nname, or process entry point, and it is not possible to hide subsets of\nprocesses. Also, the limited window size is occupied by the word\n\u0027Thread\u0027 for every target thread.\"\n\nThe above happens once of out three times, which is surprising since, according to this bug, it shouldn\u0027t be working at all.\n\nThe first question would be; \"Is Bug# 160038 related to CDT 4.0 or all versions of CDT\"?\n\nThe second question, since a few of you have made several changes, \"Can someone provide a combine patch and some hints were to continue the debugging?\" - we would like to help out on this one.",
    "Created an attachment (id\u003d76645)\nThread exit event handling for GDB\n\nHi Pawel,\nHere is a new patch according to your feedback above.\nAlso it solves the thread exit event handling problem in GDB.\nAsterisk marked in GDB info threads command is according to the -thread-select. So it shdn\u0027t be a problem for us. \nDsfMIThreadExitEvent is called only once. Im keeping track of the exited threads.\n\nFor all -var-... commands, Is it necessary to have a DMC ? Shouldn\u0027t it be possible to use these var commands without DMC ? \nI have left few commands. Will update it later as we use those.\n\nVeenu",
    "Hi Veenu,\nThank you for your patch, but could you update your view and re-post it?  I applied Mark\u0027s patches first and there were some conflict.  The patch-apply dialog doesn\u0027t offer any help for merging while the CVS update one does.\n\nThe patch looks good.  I have a few comments:\n- I like the way you added the assert :-)  Although it would be nice if the comamnd constructors didn\u0027t have so much duplication of string literals.  Modifying one of those in the future could be rather error prone. \n- There are a lot of commented out statements that need to be cleaned up.\n- Why reset the cache after StartedDMEvent and ExitedDMEvent?  I guess it makes sense to clean up the cache for the thread that exited, but I can\u0027t think of a reason for the other cases.\n- In MIRunControl.resume() and step(), there are tests such as:\n    if (!(context instanceof MIExecutionDMC)) ...\nInstead the test should be:\n    if (DMContexts.getAncestorOfType(context, MIExecutionDMC.class) \u003d\u003d null) ...\nThis way the client (such as UI) can pass a context which has the execution context as a parent, such as a frame, and the command will still work.\n- In makeExecutionDMCs() when GDB doesn\u0027t report any thread IDs, a single thread is created with ID\u003d0.  Is value 0 used to indicate \"no thread ID\", and if that\u0027s the case does AbstractMIControl ignore it and not issue a -thread-select?  If so, it would be good to define it as a documented constant in the MIRunControl class.\n- I don\u0027t quite understand how the -var-create/-var-evaluate-expression/-var-delete work with respect to -thread-select and -stack-frame-select.  Is one variable created and then shared between all different threads?  Or does one need to create a separate variable for each context?  If it\u0027s the former, which I think is the case, then the expression service will probably just use the container context in all -var-create calls.  It will only need to perform a -thread-select for the evaluation part.  This will be pretty complicated, but that\u0027s the expression service\u0027s problem.  In any case, the changes you made in ExpressionService, effectively restrict it to work only in context of a stack frame, which is not correct because global variables and etc. could be evaluated in context of a container.  But the proper solution is definitely more complicated and outside of scope of your changes.  We will need to work with Mark to make sure we get it right.\n- In GDBRunControl you do not need a fRunCtrl service reference.  Since GDBRunControl extends MIRunControl, you can just call super().  This way in GDBRunControl.getExecutionContexts() you could instead call super.getExecutionContexts() and simply remove the exited thread DMCs from the returned array, which would require less duplication of code from MIRunControl. \n\n\nI guess that was more than a view comments, but I hope it helps :-)",
    "(In reply to comment #30)\n\u003e - Why reset the cache after StartedDMEvent and ExitedDMEvent?  I guess it \u003e makes sense to clean up the cache for the thread that exited, but I can\u0027t think \u003e of a reason for the other cases.\nFor thread exit, its okie to only clean the cache for the thread that exited. But for creation we don\u0027t have a straight way today. We can discuss this.\n\n\u003e - I don\u0027t quite understand how the\n\u003e -var-create/-var-evaluate-expression/-var-delete work with respect to\n\u003e -thread-select and -stack-frame-select.  Is one variable created and then\n\u003e shared between all different threads?  Or does one need to create a separate\n\u003e variable for each context?  \nI dont know either. I think we can update the class and Commands when Marc starts.\n \n\u003e - In GDBRunControl you do not need a fRunCtrl service reference.  Since\n\u003e GDBRunControl extends MIRunControl, you can just call super().  This way in\n\u003e GDBRunControl.getExecutionContexts() you could instead call\n\u003e super.getExecutionContexts() and simply remove the exited thread DMCs from the\n\u003e returned array, which would require less duplication of code from IRunControl. \nYou are right. Doesn\u0027t make sense. to duplicate the code. \nWhile doing this I stumbled into another GDB related problem. \n-thread-list-ids : Lists thread number assigned by GDB\ninfo threads: displays \n1. the thread number assigned by GDB\n2. the target system\u0027s thread identifier (systag)\n3. the current stack frame summary for that thread \n\nThread created and Exited event:\n~\"[New Thread 1084554160 (LWP 6924)]\\n\"\n~\"[Thread 1078250416 (LWP 6852) exited]\\n\"\nThese events don\u0027t report thread number assigned by GDB on a Linux system\n\nSo we will have mismatch in context creation. For getExecutionContext() we are using GDB assigned thread ID as we don\u0027t have info about system\u0027s thread id and for events we don\u0027t have the info about GDB assigned thread id so we are using system thread id.\n\nThis will also be a problem when clearing cache corresponding to a context for  ThreadExited events.\n\nVeenu",
    "Created an attachment (id\u003d76769)\nUpdate on previous one\n\nHi Pawel,\nHere is the patch after an updated view.\n\nHave also updated the patch with your feedback point no 2,4 \u0026 5\n1,3,6 \u0026 7 are open points and we can discuss it in our next meeting.\n\nVeenu",
    "Thank you Veenu for the patch.\n\nI applied it with a minor change in MIRunControl.  For further discussion on thread started/exited events, I would like to use bug 200615.",
    "(In reply to comment #31)\n\u003e \u003e - I don\u0027t quite understand how the\n\u003e \u003e -var-create/-var-evaluate-expression/-var-delete work with respect to\n\u003e \u003e -thread-select and -stack-frame-select.  Is one variable created and then\n\u003e \u003e shared between all different threads?  Or does one need to create a separate\n\u003e \u003e variable for each context?  \n\u003e I dont know either. I think we can update the class and Commands when Marc\n\u003e starts.\nI created bug 200968 for this issue, and assigned it to Marc.\n",
    "Created an attachment (id\u003d76923)\nRelationship between contexts\n\nHi Pawel,\nThere has been some confusion about DMCs hierarchy and association so we should discuss this in our next meeting on Tuesday.\nHere is a small diagram which according to us shows the hierarchy and can also show an association between different DMCs. \n\nWhat I\u0027m trying to depict here is the\n1. Ancestors of different contexts like Container-\u003eExecution-\u003eFrame-\u003eVariable.\n2. Contexts that can be used to evaluate data for a given context.  Ex. Expression DMC can accept either of frameDMC, executionDMC and ContainerDMC to evaluate expression but not MemoryDMC for instance. May be it can also accept RegisterDMC ? \n\nProbably we can also depict association between contexts like Expression and Variable...\nI think the idea is to have a diagram for this whole context relationship. \nWill also be helpful in clearing the MICommands package and for further work in respective services.\n\nVeenu",
    "Created an attachment (id\u003d76933)\nDMCs diagram using DIA\n\nHi Veenu,\nI think starting a diagram collection to document relationship between DMCs is an excellent idea, and a good start to building documentation for DSF.  But I wonder if we could use DIA (see http://www.gnome.org/projects/dia/).  It\u0027s kind of a quirky program, but it\u0027s very powerful and it\u0027s free and it runs on linux and windows.  I attached the equivalent diagram of execution DMCs as an example.\n\nThe relationship between run control, memory, modules, and symbols contexts is kind of a challenging topic.  It also goes along with figuring out how to properly implement the INativeProcesses service.  Perhaps we could try to discuss it as part of the coding camp... if you are able to attend."
  ],
  "commentCreationDates": [
    "2006-10-06T17:15:57+02:00",
    "2007-07-06T16:23:36+02:00",
    "2007-07-07T02:05:20+02:00",
    "2007-07-07T02:08:17+02:00",
    "2007-07-11T01:53:59+02:00",
    "2007-07-11T01:55:08+02:00",
    "2007-07-11T17:55:35+02:00",
    "2007-07-11T18:08:24+02:00",
    "2007-07-13T18:14:47+02:00",
    "2007-07-14T01:04:12+02:00",
    "2007-07-14T05:16:13+02:00",
    "2007-07-20T13:17:25+02:00",
    "2007-07-21T00:42:51+02:00",
    "2007-07-25T16:15:25+02:00",
    "2007-07-26T00:18:40+02:00",
    "2007-07-26T13:53:17+02:00",
    "2007-07-26T17:23:19+02:00",
    "2007-07-27T20:24:37+02:00",
    "2007-07-27T20:27:32+02:00",
    "2007-07-31T13:49:27+02:00",
    "2007-08-09T19:19:12+02:00",
    "2007-08-16T15:45:39+02:00",
    "2007-08-16T17:41:18+02:00",
    "2007-08-16T20:14:21+02:00",
    "2007-08-16T20:31:48+02:00",
    "2007-08-16T20:37:01+02:00",
    "2007-08-17T16:42:27+02:00",
    "2007-08-17T18:51:44+02:00",
    "2007-08-20T15:01:33+02:00",
    "2007-08-22T14:41:22+02:00",
    "2007-08-22T19:36:02+02:00",
    "2007-08-23T15:25:09+02:00",
    "2007-08-23T16:13:19+02:00",
    "2007-08-23T18:39:28+02:00",
    "2007-08-23T19:04:17+02:00",
    "2007-08-24T18:26:10+02:00",
    "2007-08-24T19:33:54+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "RequestMonitor: RequestMonitor: Status OK: org.eclipse.core.runtime code\u003d0 OK null, done() method called more than once",
      "elements": [
        {
          "method": "org.eclipse.dd.dsf.concurrent.RequestMonitor.done",
          "source": "RequestMonitor.java:142"
        },
        {
          "method": "org.eclipse.dd.dsf.ui.viewmodel.AbstractVMLayoutNode$2$1.handleCompleted",
          "source": "AbstractVMLayoutNode.java:218"
        },
        {
          "method": "org.eclipse.dd.dsf.concurrent.RequestMonitor$1.run",
          "source": "RequestMonitor.java:148"
        },
        {
          "method": "org.eclipse.dd.dsf.concurrent.DefaultDsfExecutor$TracingWrapperRunnable.run",
          "source": "DefaultDsfExecutor.java:219"
        },
        {
          "method": "java.util.concurrent.Executors$RunnableAdapter.call",
          "source": "Executors.java:417"
        },
        {
          "method": "java.util.concurrent.FutureTask$Sync.innerRun",
          "source": "FutureTask.java:269"
        },
        {
          "method": "java.util.concurrent.FutureTask.run",
          "source": "FutureTask.java:123"
        },
        {
          "method": "java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301",
          "source": "ScheduledThreadPoolExecutor.java:65"
        },
        {
          "method": "java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run",
          "source": "ScheduledThreadPoolExecutor.java:168"
        },
        {
          "method": "java.util.concurrent.ThreadPoolExecutor$Worker.runTask",
          "source": "ThreadPoolExecutor.java:650"
        },
        {
          "method": "java.util.concurrent.ThreadPoolExecutor$Worker.run",
          "source": "ThreadPoolExecutor.java:675"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:595"
        }
      ],
      "number": 0,
      "commentIndex": 7,
      "bugId": "160038",
      "date": "2007-07-11T18:08:24+02:00",
      "product": "DD",
      "component": "MI",
      "severity": "enhancement"
    }
  ],
  "groupId": "160038",
  "bugId": "160038",
  "date": "2006-10-06T17:15:57+02:00",
  "product": "DD",
  "component": "MI",
  "severity": "enhancement"
}