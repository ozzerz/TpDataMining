{
  "comments": [
    "Eclipse Project Referencing does not appear to work correctly or behave uniformly.\n\nOverview Description: \n---------------------\nOne of the features of Eclipse is that a project is capable of referencing\nresources that have been created and already \n\nreside in other Eclipse projects. Generally this seems to work correctly with\nthe following exception; using FileReader \n\nto read in text located on a folder in a different project.\n\nDetailed Description:\n---------------------\nIn the process of preparing some applications involving QuickTime for Java, it\nwas decided to place all the media \n\nelements into one Eclipse project and reference them from other Eclipse projects\nthat contain the code to play the \n\nmedia content. The MediaContentProject has been populated by importing media\nfiles and text files in a hierarchical \n\nfashion. The structure in something like the following:\n\nMediaContentProject\n|\n[mediadata]\n| |\n| +--file1.jpg\n| +--file2.jpg\n|\n+-[mediadata.subfolder1]\n    |\n    +--movie1.mov\n    +--file3.jpg\n    +--text1.txt\n\nThe project references and build path for a separate Eclipse project\n(QTJavaProject04) identifies the \n\nMediaContentProject as a prject that can be referenced (this is set within the\nProject Properties of QTJavaProject04). \n\nWith one exception, all code for playing movies in QTJavaProject04 utilizing\nmedia components from \nMediaContentProject work fine. The only referenced content that does not work is\nthe text file. It appears that \n\nFileReader has a problem reading in the text file contained in the referenced\nproject MediaContentProject. If we do a \n\nlittle refactoring and move data.subfolder1 from MediaContentProject to\nQTJavaProject04, the problem disappears \n\naltogether.\n\nSteps to Reproduce:\n-------------------\nI\u0027ll be happy to send you the complete source files, but I do not think you will\nneed it, as I have isolated the \n\nessential parts:\n\nStep 1:\n-------\na. Create a project called \u0027MediaContentProject\u0027.\nb. Create a folder within this project called \u0027mediadata\u0027.\nc. Create a subfolder within this \u0027mediadata\u0027 folder called \u0027zebra\u0027.\nThe resulting folder in the project should appear as \u0027mediadata.zebra\u0027.\nd. Import an ascii text file called \u0027Zebra.txt\u0027 with the following contents such as\nthe following enclosed text content:\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d START OF TEXT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nA close relative of the horse, the zebra still found in the wild in parts of Eastern\nAfrica. The digestive system of the zebra is designed to extract energy and \nnutrients from course, low-quality forage by permitting the passage of large\nquantities of foliage and plant matter through a long hindgut. The intestine of\nthe zebra is eleven to seventeen times the body length. This allows the zebra to\nlive \nin areas of scrub brush, and grassy plains. \n\nAdults stand 55 to 57 inches at the shoulder and may weigh 880 pounds or more. \nThe broad black stripes are closely spaced and extend all the way to the broad \nhooves leaving the belly white. The mane is long and erect, and the ears are large \nand rounded.\n\nPregnant zebra give birth to several foals after a 13 month gestation period. The \nfoals can walk only hours after birth and become independant from their mothers\nafter a few months of age.\n\nUnder increased pressure from human encroachment on their habitat, the zebra is \nlisted as an endangered species.\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d END OF TEXT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nStep 2:\n-------\nCreate a second project called \u0027QTJavaPRoject04\u0027.\na. In the property settings for the project, select \u0027MediaContentProject\u0027 in the\nPreferences section.\nSince there is no code in \u0027MediaContentProject\u0027, it\u0027s not even necessary to\ninclude \u0027MediaContentProject\u0027\nin the build order for \u0027QTJavaPRoject04\u0027 (as the results remain unchanged).\nb. Create a folder within this project (\u0027QTJavaPRoject04\u0027) called \u0027data\u0027.\nc. Create a subfolder within this \u0027data\u0027 folder called \u0027subfolder1\u0027.\nThe resulting folder in the project should appear as \u0027data.subfolder1\u0027.\nd. Import the same ascii text file (\u0027Zebra.txt\u0027) into \u0027data.subfolder1\u0027.\n\nStep 3:\n-------\na. Create a Java class in the default folder of \u0027QTJavaPRoject04\u0027 with the\nfollowing code:\n\n/* START\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n*/\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.FileReader;\nimport java.util.Vector;\n\npublic class ProblemReproductionClass {\n\tpublic static void main(String[] args) {\n\t\tProblemReproductionClass myObject \u003d new ProblemReproductionClass();\n\t\tmyObject.doIt();\n\t}\n\tpublic void doIt() {\n\t\ttry {\n\t\t\tSystem.out.println(\n\t\t\t\t\"--------------------------\\nRead the contents of a file from a hard wired \n\npath:\\n--------------------------\");\n\t\t\t// change myPath and Zebra.txt to anything that matches a proper directory\nand file on your \n\nhard disk.\n\t\t\tString myPath \u003d\n\t\t\t\t\n\n\"C:\\\\lor\\\\installers\\\\eclipse\\\\eclipse_SDK_M320021117\\\\eclipse\\\\workspace\\\\QT4JavaProject01\\\\data\\\\zebra\\\\\";\n\t\t\tString filePath \u003d myPath.concat(\"Zebra.txt\");\n\t\t\treadTextFileFrom(filePath);\n\t\t} catch (FileNotFoundException fnfe) {\n\t\t\tfnfe.printStackTrace();\n\t\t}\n\n\t\ttry {\n\t\t\tSystem.out.println(\n\t\t\t\t\"Read the contents of a file from a folder defined within your local \n\nproject:\\n--------------------------\");\n\t\t\t// in your local project, create a folder called \u0027data\u0027 and a subfolder\ncalled \u0027subfolder1\u0027.\n\t\t\t// import a file into \u0027data.subfolder1\u0027, such as \u0027Zebra.txt\u0027.\n\t\t\tString filePath \u003d \"data/subfolder1/Zebra.txt\";\n\t\t\treadTextFileFrom(filePath);\n\t\t} catch (FileNotFoundException fnfe) {\n\t\t\tfnfe.printStackTrace();\n\t\t}\n\n\t\ttry {\n\t\t\tSystem.out.println(\n\t\t\t\t\"Read the contents of a file from a folder defined within SEPERATE \n\nproject:\\n--------------------------\");\n\t\t\t// assuming your local project reference another project, such as\n\u0027MediaContentProject\u0027,\n\t\t\t// copy the local \u0027data.subfolder1\u0027 and paste it into \u0027MediaContentProject\u0027\nand then \n\t\t\t// rename it to something like \u0027mediadata.zebra\u0027.\n\t\t\t// import a file into \u0027data.subfolder1\u0027, such as \u0027Zebra.txt\u0027.\n\t\t\tString filePath \u003d \"mediadata/zebra/Zebra.txt\";\n\t\t\treadTextFileFrom(filePath);\n\t\t} catch (FileNotFoundException fnfe) {\n\t\t\tfnfe.printStackTrace();\n\n\t\t}\n\t}\n\n\t//--------------------------------------------------------\n\tpublic static void readTextFileFrom(String filePath)\n\t\tthrows FileNotFoundException {\n\n\t\tif (filePath !\u003d null) {\n\t\t\ttry {\n\t\t\t\tBufferedReader reader \u003d\n\t\t\t\t\tnew BufferedReader(new FileReader(filePath));\n\t\t\t\tVector lines \u003d new Vector();\n\n\t\t\t\tString aLine \u003d reader.readLine();\n\t\t\t\twhile (aLine !\u003d null) {\n\t\t\t\t\tSystem.out.println(aLine.toString());\n\t\t\t\t\tlines.addElement(aLine);\n\t\t\t\t\taLine \u003d reader.readLine();\n\t\t\t\t}\n\n\t\t\t\tString[] lineArray \u003d new String[lines.size()];\n\t\t\t\tlines.copyInto(lineArray);\n\t\t\t\t//return lineArray;\n\t\t\t\tSystem.out.println(\"--------------------------\");\n\t\t\t\treturn;\n\t\t\t} catch (IOException exc) {\n\t\t\t\texc.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\t//return new String[0];\n\t\treturn;\n\t}\n\n\t//--------------------------------------------------------\n\n\tpublic static String[] readTextFile(String filePath)\n\t\tthrows FileNotFoundException {\n\t\tSystem.out.println(\"running constructor with string: \" + filePath);\n\n\t\tif (filePath !\u003d null) {\n\t\t\ttry {\n\t\t\t\tBufferedReader reader \u003d\n\t\t\t\t\tnew BufferedReader(new FileReader(filePath));\n\t\t\t\tVector lines \u003d new Vector();\n\n\t\t\t\tString aLine \u003d reader.readLine();\n\t\t\t\twhile (aLine !\u003d null) {\n\t\t\t\t\tlines.addElement(aLine);\n\t\t\t\t\taLine \u003d reader.readLine();\n\t\t\t\t}\n\n\t\t\t\tString[] lineArray \u003d new String[lines.size()];\n\t\t\t\tlines.copyInto(lineArray);\n\t\t\t\treturn lineArray;\n\t\t\t} catch (IOException exc) {\n\t\t\t\texc.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn new String[0];\n\t}\n}\n/* END  \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n*/\n\nb. run this class and you should have three identical outputs to the console.\n\nThe first one is a hard wired path on the hard disk.\nThe second one is the file reading from a local project folder.\nThe third one is the file reading from a separately referenced folder.\n\nTHE THIRD RESULT FAILS.\nIT IS IMPORTANT TO NOTE THAT ECLIPSE HAS NO PROBLEM PERFORMING THE EQUIVALENT OF\nTHIS WHEN WORKING\nWITH OTHER MEDIA ELEMENTS SUCH AS MOVIES AND SOUND FILES.\n\nActual Results:\n---------------\nShown below is the output.\n\n--------------------------\nRead the contents of a file from a hard wired path:\n--------------------------\nA close relative of the horse, the zebra still found in the wild in parts of Eastern\nAfrica. The digestive system of the zebra is designed to extract energy and \nnutrients from course, low-quality forage by permitting the passage of large\nquantities of foliage and plant matter through a long hindgut. The intestine of\nthe zebra is eleven to seventeen times the body length. This allows the zebra to\nlive \nin areas of scrub brush, and grassy plains. \n\nAdults stand 55 to 57 inches at the shoulder and may weigh 880 pounds or more. \nThe broad black stripes are closely spaced and extend all the way to the broad \nhooves leaving the belly white. The mane is long and erect, and the ears are large \nand rounded.\n\nPregnant zebra give birth to several foals after a 13 month gestation period. The \nfoals can walk only hours after birth and become independant from their mothers\nafter a few months of age.\n\nUnder increased pressure from human encroachment on their habitat, the zebra is \nlisted as an endangered species.\n--------------------------\nRead the contents of a file from a folder defined within your local project:\n--------------------------\nA close relative of the horse, the zebra still found in the wild in parts of Eastern\nAfrica. The digestive system of the zebra is designed to extract energy and \nnutrients from course, low-quality forage by permitting the passage of large\nquantities of foliage and plant matter through a long hindgut. The intestine of\nthe zebra is eleven to seventeen times the body length. This allows the zebra to\nlive \nin areas of scrub brush, and grassy plains. \n\nAdults stand 55 to 57 inches at the shoulder and may weigh 880 pounds or more. \nThe broad black stripes are closely spaced and extend all the way to the broad \nhooves leaving the belly white. The mane is long and erect, and the ears are large \nand rounded.\n\nPregnant zebra give birth to several foals after a 13 month gestation period. The \nfoals can walk only hours after birth and become independant from their mothers\nafter a few months of age.\n\nUnder increased pressure from human encroachment on their habitat, the zebra is \nlisted as an endangered species.\n--------------------------\nRead the contents of a file from a folder defined within SEPERATE project:\n--------------------------\njava.io.FileNotFoundException: mediadata\\zebra\\Zebra.txt (The system cannot find\nthe path specified)\n\tat java.io.FileInputStream.open(Native Method)\n\tat java.io.FileInputStream.\u003cinit\u003e(Unknown Source)\n\tat java.io.FileInputStream.\u003cinit\u003e(Unknown Source)\n\tat java.io.FileReader.\u003cinit\u003e(Unknown Source)\n\tat ProblemReproductionClass.readTextFileFrom(ProblemReproductionClass.java:58)\n\tat ProblemReproductionClass.doIt(ProblemReproductionClass.java:44)\n\tat ProblemReproductionClass.main(ProblemReproductionClass.java:10)\n\n\nExpected Results:\n-----------------\nTHE THIRD RESULT FAILS.\nIT IS IMPORTANT TO NOTE THAT ECLIPSE HAS NO PROBLEM PERFORMING THE EQUIVALENT OF\nTHIS WHEN WORKING\nWITH OTHER MEDIA ELEMENTS SUCH AS MOVIES AND SOUND FILES.\n\n\nBuild Date \u0026 Platform:\n----------------------\nDate tested: November 22nd, 2002\nPlatform: Eclipse 2.1 Current Stable Build M3 Fri, 15 Nov 2002 -- 14:36 (-0700)\nTested on both Windows 2000 and Mac OS X (both machines were based on above\nreferenced builds)\nIdentical results were reproduced on both machines.\n\nAdditional Information:\n-----------------------\nThere are no problems performing the equivalent of this with referencing other\nmedia types.\n\nThe following code snippet shows how it successfully referenced with other media\ntypes. \nLook at the highlighted comments:\n\n\n\tpublic AnimalPane()\n\t{\n\t\tQDRect size \u003d new QDRect( Zoo5.WIDTH, Zoo5.HEIGHT );\n\t\ttry\n\t\t{\n\t\t\t/////////THE REFERENCE TO THE SOUND FILE IS WELL BEHAVED //////////\n\t\t\tloadSound(\"mediadata/zebra/Zebra.au\");\n\n\t\t\tQDGraphics gw \u003d new QDGraphics(size);\n\t\t\tcompositor \u003d new Compositor( gw, QDColor.white, 30, 1 );\n\t\t\t\t\t\n\t\t\tQTFile imageFile \u003d new QTFile( QTFactory.findAbsolutePath(\n\"data/zebra/ZebraBackground.jpg\" ));\n\t\t\tGraphicsImporterDrawer drawer \u003d new GraphicsImporterDrawer( imageFile );\n\t\t\tImagePresenter presenter \u003d ImagePresenter.fromGraphicsImporterDrawer(drawer);\n\t\t\tpresenter.setLocation( 110, 110 );\n\t\t\tcompositor.addMember( presenter, 3 );\n\t\t\t///////////READING THE TEXT FILE IS **NOT** WELL BEHAVED ////////////////\n\t\t\taddText( \"mediadata/zebra/Zebra.txt\", 2, 15, 160, 415, 220 );\n\t\t\t///////////THE MOVIE IS WELL BEHAVED ////////////////\n\t\t\taddMovie( \"mediadata/zebra/Zebra.mov\", 1, 0, 0 );\n\t\t\t\n\t\t\tplaySound();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\tcatch ( QTException e )\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
    "Moving to JDT core for comment.",
    "Rather feels like a runtime issue. Maybe the actual JRE is rather to blame ?",
    "Hi Philippe,\n\nI am the person who reported the Eclipse bug number 27007. I am slightly unclear\nof what you meant by suggesting that the issue is in the JRE. If the bug is\ndependent on the specific JRE, it would seem that different responses would be\nobtained from Eclipse running on different operating systems. The bug appears\nidentically on both Macintosh and Windows 2000 platforms.\n\nPerhaps, I\u0027ve misunderstood what you meant in your comment. Please clarify.\n\nThanks,\n\nLoren",
    "The problem has to do with the working directory. The working directory for a \nprogram defaults to the associated project\u0027s folder. When you read a file with \na \"relative path\", as done in this example, you read relative to the working \ndirectory. Your paths are relative to different projects.\n\nWhen I set the working directory to be the workspace, and change the paths to \nincldue the project names, all works as expected.\n\nNote: to set the working directory to the workspace, go to the \"arguments\" tab \nof the launch cofig, and de-select \"Use default working directory\". Then select \nthe \"Workspace\" radio button, and set the contents of the text field to empty. \nThis denotes the workspace root folder as the working directory.",
    "The same problem occurrs if I run the program from the command line (as is), \nand I can solve the problem in the same way from the command line (running from \nthe workspace root directory, specifying file paths with project \nqualification). ",
    "Marking as \"works for me\". I do not believe there is a bug here."
  ],
  "commentCreationDates": [
    "2002-11-22T20:33:17+01:00",
    "2002-11-25T14:58:06+01:00",
    "2002-12-09T16:40:47+01:00",
    "2002-12-10T15:14:34+01:00",
    "2002-12-10T15:42:57+01:00",
    "2002-12-10T15:50:15+01:00",
    "2003-01-06T17:21:13+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.FileNotFoundException",
      "message": "mediadata\\zebra\\Zebra.txt (The system cannot find the path specified)",
      "elements": [
        {
          "method": "java.io.FileInputStream.open",
          "source": "Native Method"
        },
        {
          "method": "java.io.FileInputStream.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.FileInputStream.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.FileReader.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "ProblemReproductionClass.readTextFileFrom",
          "source": "ProblemReproductionClass.java:58"
        },
        {
          "method": "ProblemReproductionClass.doIt",
          "source": "ProblemReproductionClass.java:44"
        },
        {
          "method": "ProblemReproductionClass.main",
          "source": "ProblemReproductionClass.java:10"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "27007",
      "date": "2002-11-22T20:33:17+01:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "major"
    }
  ],
  "groupId": "27007",
  "bugId": "27007",
  "date": "2002-11-22T20:33:17+01:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "major"
}