{
  "comments": [
    "I was investigating an AJDT problem and discovered this.  Here is a simple \nprogram that blows up the compiler:\n\npublic aspect A {\n  declare warning: within(*): \"I\u0027m a decw\";\n  private HW.new(String s) { }\n}\nclass HW { }\n\nThe failure that occurs when compiling is:\n\nC:\\Eclipse\\toym8\\eclipse\\workspace\\TJP Example\u003eajc A.java\ntrouble in:\nABORT\n\nException thrown from AspectJ 1.2rc1\n\nThis might be logged as a bug already -- find current bugs at\n  http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\nBugs for exceptions thrown have titles File:line from the top stack,\ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nat http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nnegative line: -1\nnegative line: -1\njava.lang.IllegalArgumentException: negative line: -1\n        at org.aspectj.bridge.SourceLocation.validLine(SourceLocation.java:39)\n        at org.aspectj.bridge.SourceLocation.\u003cinit\u003e(SourceLocation.java:92)\n        at org.aspectj.bridge.SourceLocation.\u003cinit\u003e(SourceLocation.java:81)\n        at org.aspectj.bridge.SourceLocation.\u003cinit\u003e(SourceLocation.java:66)\n        at \norg.aspectj.ajdt.internal.core.builder.EclipseSourceContext.makeSourceLocation\n(EclipseSourceContext.java:44)\n        at org.aspectj.weaver.bcel.BcelShadow.getSourceLocation\n(BcelShadow.java:2220)\n        at org.aspectj.weaver.Checker.match(Checker.java:49)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:1115)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit\n(BcelClassWeaver.java:885)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:787)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:343)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:80)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump\n(BcelWeaver.java:689)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify\n(BcelWeaver.java:615)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave\n(AjCompilerAdapter.java:239)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling\n(AjCompilerAdapter.java:114)\n        at org.eclipse.jdt.internal.compiler.Compiler.compile\n(Compiler.java:376)\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:600)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:160)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:94)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)\n        at org.aspectj.tools.ajc.Main.run(Main.java:280)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:217)\n        at org.aspectj.tools.ajc.Main.main(Main.java:79)\n\nWithout having looked at the code yet ... I believe the problem is that *one* \nof the shadows exposed due to the ITD statement has no valid line number.  I\u0027m \nnot sure exactly which shadow it is.\n\nFirst thing we need to do is prioritize this bug though?  What do we think?  \nFix for 1.2 final?",
    "True of initialization and pre-initialization, but not of ITD\nconstructor-execution or method-execution\n----\naspect A {  \n    HW.new(String s) {}  \n    declare warning : initialization(HW.new(String)) : \"\";\n}\nclass HW {}\n----\n\nI can write advice on one of these join points, and the program runs correctly.\nSaying !within({aspecttype}) does not work to avoid the bug, but it does work to\nsay initialization((!HW).new(String)).  So the documented bug would be\n\n  Compiler exception when declaring a warning or error on \n  initialization or preinitialization when the constructor\n  is declared in an aspect on another type. To avoid this \n  error, exclude the join point using the target type pattern:\n\n     initialization((!Target).new(..)\n\nIf this is a regression from 1.1.1, then it\u0027s worth investigating.\nOtherwise, since it hasn\u0027t come up before it\u0027s a low-traffic case.\n\nAs a side note (and different bug?), no warning issue for field-set join point\nduring during ITD initialization:\n\n----\n  private int HW.i \u003d 1;  // expected warning not issued\n  declare warning : set(int HW.i): \"\";\n----",
    "Thanks for investigating Wes.  I had to adapt your small program slightly to \nshow the NPE.  It is the initialization join point as you discovered, but \nHW.new(String) isn\u0027t the signature of the new ctor so I didn\u0027t get an NPE or \nmy decw come out? For a while I could only get it to fail if I made \nit \"initialization(HW.new(..))\".  Then through debugging I saw that the ctor \nthat is actually added looks like this \"HW.new(String,A)\".  So this program \nshows the fault ... but looks bizarre!\n\naspect A {  \n    HW.new(String s) {}  \n    declare warning : initialization(HW.new(String,A)) : \"\";\n}\nclass HW {}\n\nIt seems to be broken in AspectJ 1.1 as well, so we haven\u0027t regressed - so I\u0027m \nnot sure whether we should fix it or not...\n\nHere is a patch for BcelShadow.java that fixes the IllegalArgumentException.\nThere is a place in that code where, if we haven\u0027t a clue about the line \nnumber for the shadow within a type we decide to use the line number for the \nactual type declaration (ie.  class XXX {).  At the moment it says defer to \nusing the type declaration line number if the only line number we can come up \nwith is 0.  I have augmented that test to check if only line number we can \ncome up with is -1.  This is just an update to describe how far I have gotten, \nperhaps a better version of the fix might be to come up with the line number \nwhere the ITD was declared (even though it was in a different type) - but I\u0027m \nnot sure if it is possible to navigate back from the shadow we are matching on \nto the originating ITD statement (that sounds like a bunch of engineering!)\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nIndex: BcelShadow.java\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nRCS \nfile: /home/technology/org.aspectj/modules/weaver/src/org/aspectj/weaver/bcel/B\ncelShadow.java,v\nretrieving revision 1.32\ndiff -u -r1.32 BcelShadow.java\n--- BcelShadow.java\t7 Apr 2004 12:58:47 -0000\t1.32\n+++ BcelShadow.java\t23 Apr 2004 16:45:32 -0000\n@@ -2212,7 +2212,7 @@\n     \n \tpublic ISourceLocation getSourceLocation() {\n \t\tint sourceLine \u003d getSourceLine();\n-\t\tif (sourceLine \u003d\u003d 0) {\n+\t\tif (sourceLine \u003d\u003d 0 || sourceLine \u003d\u003d -1) {\n //\t\t\tThread.currentThread().dumpStack();\n //\t\t\tSystem.err.println(this + \": \" + range);\n \t\t\treturn getEnclosingClass().getType().getSourceLocation\n();\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nOn your other scenario (the set(int HW.i)) - I think that may warrant a new \nbug - but I suspect it will get marked as a compiler limitation.",
    "I have checked in the fix I added as a patch previously - this is to prevent \nthe nasty exception but there is a bigger issue here that needs looking into \nlater.  initialization(HW.new(String,A)) shouldn\u0027t match - the fact that the \nITD of a ctor has led to the creation of a ctor taking a 2nd parameter (aspect \ninstance) should not be something the user is aware of.  Ideally they should \nbe able to write initialization(HW.new(String)) and that would match - but I \nthink a change like that is rather fundamental.\n\n",
    "Immediate issue dealt with - underlying issue to be looked at as enhancement.",
    "The constructor we add should be marked aj-synthetic and not match jps? Marked\nfor consideration in AJ5 M3.",
    "not generics - moving to M4",
    "finally fixed for both KindedPointcut and ArgsPointcut - the synthetic arguments\nare no longer taken into account when matching."
  ],
  "commentCreationDates": [
    "2004-04-21T10:22:14+02:00",
    "2004-04-22T19:03:41+02:00",
    "2004-04-23T18:58:24+02:00",
    "2004-04-26T12:11:13+02:00",
    "2004-05-13T11:15:00+02:00",
    "2005-03-22T13:54:49+01:00",
    "2005-06-21T12:01:11+02:00",
    "2005-09-01T14:40:50+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "negative line: -1",
      "elements": [
        {
          "method": "org.aspectj.bridge.SourceLocation.validLine",
          "source": "SourceLocation.java:39"
        },
        {
          "method": "org.aspectj.bridge.SourceLocation.\u003cinit\u003e",
          "source": "SourceLocation.java:92"
        },
        {
          "method": "org.aspectj.bridge.SourceLocation.\u003cinit\u003e",
          "source": "SourceLocation.java:81"
        },
        {
          "method": "org.aspectj.bridge.SourceLocation.\u003cinit\u003e",
          "source": "SourceLocation.java:66"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.EclipseSourceContext.makeSourceLocation",
          "source": "EclipseSourceContext.java:44"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.getSourceLocation",
          "source": "BcelShadow.java:2220"
        },
        {
          "method": "org.aspectj.weaver.Checker.match",
          "source": "Checker.java:49"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:1115"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.matchInit",
          "source": "BcelClassWeaver.java:885"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:787"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:343"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:80"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:724"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:689"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:615"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:563"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:239"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:114"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:376"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:600"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:160"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:94"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:102"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:53"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:280"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:217"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:79"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "59397",
      "date": "2004-04-21T10:22:14+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "enhancement"
    }
  ],
  "groupId": "59397",
  "bugId": "59397",
  "date": "2004-04-21T10:22:14+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "enhancement"
}