{
  "comments": [
    "When executing an Eclipse 3.3 launch configuration pointing to a strictly compliant OSGi/Minimum-1.1 JRE, the following error occurs.\n\njava.lang.NoSuchMethodError: java/lang/System.load(Ljava/lang/String;)V\n\tat org.eclipse.equinox.launcher.JNIBridge.loadLibrary(JNIBridge.java:49)\n\tat org.eclipse.equinox.launcher.JNIBridge.takeDownSplash(JNIBridge.java:114)\n\tat org.eclipse.equinox.launcher.Main.takeDownSplash(Main.java:1795)\n\tat org.eclipse.equinox.launcher.Main.run(Main.java:1195)\n\tat org.eclipse.equinox.launcher.Main.main(Main.java:1144)\n\nSteps to reproduce:\n(1) Create a new launch configuration containing nothing more than the org.eclipse.osgi bundle.\n(2) Point the launch configuration to a stricly compliant OSGi/Minimum-1.1 JRE.\n(3) Run the launch configuration.\n\nIf necessary, I can provide a strictly compliant JRE internally.",
    "Should use Runtime.getRuntime().load(String) instead.",
    "Created an attachment (id\u003d74047)\npatch\n\nThere were a couple of System.setProperty methods also that need to be changed to System.getProperties().put\n",
    "Consider for 3.3.1",
    "would be great to explore options for ensuring we stay within the bounds of the EE we have chosen (and indeed choosing the correct EE bounds)",
    "Andrew, please review patch for 3.3.1 and release to both HEAD and 3.3.1 if you find the patch is good.\n\n(In reply to comment #4)\n\u003e would be great to explore options for ensuring we stay within the bounds of the\n\u003e EE we have chosen (and indeed choosing the correct EE bounds)\n\nYes, I know we discussed this on the equinox mailing list a while back but I don\u0027t remember if we came up with anything we could implement.  The basic issue is we have many cases where we cannot simply compile against the minimum EE we specify because we would like to use some methods in bigger EEs if they are available (i.e. java.nio etc.)\n\nCurrently only the org.eclipse.osgi project has a proper subset of jars it uses to compile against the smallest set of classes possible.  But this approach does not scale well to other projects.\n\n",
    "released to 3.1.1 and HEAD"
  ],
  "commentCreationDates": [
    "2007-07-18T01:24:56+02:00",
    "2007-07-18T05:17:42+02:00",
    "2007-07-18T15:40:26+02:00",
    "2007-07-18T15:41:01+02:00",
    "2007-07-18T17:57:31+02:00",
    "2007-07-18T20:52:53+02:00",
    "2007-07-18T22:49:00+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoSuchMethodError",
      "message": "java/lang/System.load(Ljava/lang/String;)V",
      "elements": [
        {
          "method": "org.eclipse.equinox.launcher.JNIBridge.loadLibrary",
          "source": "JNIBridge.java:49"
        },
        {
          "method": "org.eclipse.equinox.launcher.JNIBridge.takeDownSplash",
          "source": "JNIBridge.java:114"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.takeDownSplash",
          "source": "Main.java:1795"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.run",
          "source": "Main.java:1195"
        },
        {
          "method": "org.eclipse.equinox.launcher.Main.main",
          "source": "Main.java:1144"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "196889",
      "date": "2007-07-18T01:24:56+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    }
  ],
  "groupId": "196889",
  "bugId": "196889",
  "date": "2007-07-18T01:24:56+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "normal"
}