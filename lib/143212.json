{
  "comments": [
    "From bug 142473 - someone found these exceptions in their log.\n\n!ENTRY org.eclipse.jdt.ui 4 2 2006-05-23 11:07:11.376\n!MESSAGE Problems occurred when invoking code from plug-in:\n\"org.eclipse.jdt.ui\".\n!STACK 0\njava.lang.IllegalArgumentException\n        at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2599)\n        at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:891)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2353)\n        at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:511)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:179)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2637)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1236)\n        at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:187)\n        at\norg.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:229)\n        at\norg.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:505)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:993)\n        at\norg.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:131)\n        at\norg.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:71)\n        at\norg.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:720)\n        at\norg.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:779)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1123)\n        at\norg.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:97)\n        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n        at\norg.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:82)\n        at\norg.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:145)\n        at\norg.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)\n        at\norg.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:94)\n        at\norg.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:75)\n        at\norg.eclipse.jdt.internal.ui.text.JavaReconciler.process(JavaReconciler.java:342)\n        at\norg.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:204)\n\n!ENTRY org.eclipse.jdt.ui 4 0 2006-05-23 11:07:11.376\n!MESSAGE Error in JDT Core during reconcile\n!STACK 0\njava.lang.IllegalArgumentException\n        at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2599)\n        at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:891)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2353)\n        at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:511)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:179)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2637)\n        at\norg.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1236)\n        at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:187)\n        at\norg.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:229)\n        at\norg.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:505)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:993)\n        at\norg.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:131)\n        at\norg.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:71)\n        at\norg.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:720)\n        at\norg.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:779)\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1123)\n        at\norg.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:97)\n        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n        at\norg.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:82)\n        at\norg.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:145)\n        at\norg.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)\n        at\norg.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:94)\n        at\norg.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:75)\n        at\norg.eclipse.jdt.internal.ui.text.JavaReconciler.process(JavaReconciler.java:342)\n        at\norg.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:204)",
    "Misja,\n\nWould it be possible to get a test case?\nIs the code syntactically correct when the error occurs?",
    "I found a test case to reproduce the same exception\n\npublic class X {\n  void bar() {\n    #\n    assert 0 \u003d\u003d 1 : a[0; // ] is missing\n  }\n}\n\nBut these following test cases don\u0027t cause the exception\n\npublic class X {\n  void bar() {\n    #\n    assert 0 \u003d\u003d 1 : a[0];\n  }\n}\n\npublic class X {\n  void bar() {\n    #\n    assert 0 \u003d\u003d 1 : a[0 ; // ] is missing and there is space after \u00270\u0027\n  }\n}",
    "The problem is inside statements recovery.\n\nWith \u0027assert 0 \u003d\u003d 1 : a[0;\u0027 statement recovery add a fake token \u0027]\u0027 just after \u00270\u0027.\nThe position of this fake token is the position of the end of the previous real token + 1. It is also the location of the real token \u0027;\u0027.\nWhen the ASTConverter convert the assert statement, it try to retreive the location of the \u0027;\u0027 by starting just after the end of the expression. In this case it is also just after the \u0027;\u0027, that\u0027s why the \u0027;\u0027 isn\u0027t found and the end of the assert statement is wrongly considered as -1.\n\nInstead of set the position of the fake token just after the end of the previous real token there, in some case like this one we could set the position of the fake token at the same location of the end of the previous real token. Indeed the \u0027]\u0027 belongs to the expression and not to the next or enclosing node.\n\nHowever do such change for 3.2 would be to risky because this could change slightly the general behavior of the statement recovery and add some new unknown instabilities.\nThats why if we don\u0027t want to throw the exception in 3.2 it would be better to only add a workaround in the ASTConverter.\n\nI am going to write a patch with a workaround. I will attach it to this bug when it will be ready.\n\n",
    "The same bug occurs with the following test case but our internal behavior is not exactly the same.\n\npublic class X {\n  void bar() {\n    #\n    assert 0 \u003d\u003d 1 : foo(; // ) is missing\n  }\n}\n\nThe end of the ast node \u0027foo(\u0027 is the \u0027currentPosition-1\u0027 of the fake token ).\nThe end of the ast node \u0027a[0\u0027 is the \u0027startPosition\u0027 of the fake token ].\nInserted fake tokens \u0027currentPosition\u0027 and \u0027startPosition\u0027 are equals.",
    "Another test case with some differences\n\npublic class X {\n  void bar() {\n    #\n    assert 0 \u003d\u003d 1 : (\"aa\"; // ) is missing\n  }\n}",
    "Created an attachment (id\u003d42377)\nProposed fix\n\n",
    "Created an attachment (id\u003d42378)\nRegression test\n\n",
    "This fix is not only a workaround.\n\nThe exception can occurs for two reasons:\n1) The end position of the last expression of the assert statement contains the \u0027;\u0027.This end position is used to start the search of the ending semicolon so the semicolon is never found.\neg: \u0027assert 0 \u003d\u003d 0 : a[0;\u0027\n2) The last token of the last expression of the assert statement ends with a fake ) or ] or }. As semicolon is take into account only if the parenthesis count is 0, then the semicolon is never found.\neg: \u0027assert 0 \u003d\u003d 0 : foo(;\u0027\n\nThe case 2) is fixed by the proposed patch. This patch remove the parenthesis count and use the end of the last DOM expression node instead of the end of the last compiler expression node. That\u0027s because the DOM position are corrected and are always correct so we don\u0027t need to count parenthesis.\nThe case 1) would require to change the end position of the last expresion as explain in comment 3. This change would be to risky, and the patch add a workaround instead. The workaround is to use directly the end of the last expression when we fail to retreive the semicolon location.",
    "Olivier - the proposed patch isn\u0027t exactly the patch you send me.\nIn the proposed fix \u0027retrieveSemiColonPosition()\u0027 initialize the scanner to \u0027int end \u003d start + length\u0027 as it is in the current code instead of \u0027int end \u003d start + length - 1\u0027.\nIf we do not use this location the start position if the sanner is inside the string literal with the following test case: assert 0 \u003d\u003d 1 : (\"aa\";.\n",
    "This problem isn\u0027t highly critical as it concerns only assert statements. Therefore it\u0027s probably too late to add this fix for 3.2 but this is a good candidate for 3.2.1.",
    "Inlike i thought the problem with array access isn\u0027t a problem of recovery. The problem is caused by a bug in the Parser (see bug 147877). The diagnosis of case 2) is still correct.",
    "Fix released and tests added\n  ASTConverterRecoveryTest#test0015() -\u003e test0017()\n\nReleased for 3.3 M1.",
    "Verified for 3.3 M1 using build I20060804-0010."
  ],
  "commentCreationDates": [
    "2006-05-23T15:56:17+02:00",
    "2006-05-23T16:02:40+02:00",
    "2006-05-23T17:09:46+02:00",
    "2006-05-23T21:08:29+02:00",
    "2006-05-23T21:55:01+02:00",
    "2006-05-23T23:30:34+02:00",
    "2006-05-24T10:32:50+02:00",
    "2006-05-24T10:33:11+02:00",
    "2006-05-24T10:50:22+02:00",
    "2006-05-24T10:57:04+02:00",
    "2006-05-24T11:36:52+02:00",
    "2006-06-21T13:48:38+02:00",
    "2006-06-22T10:35:36+02:00",
    "2006-08-04T17:16:25+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "elements": [
        {
          "method": "org.eclipse.jdt.core.dom.ASTNode.setSourceRange",
          "source": "ASTNode.java:2599"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:891"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:2353"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:511"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations",
          "source": "ASTConverter.java:179"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:2637"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:1236"
        },
        {
          "method": "org.eclipse.jdt.core.dom.AST.convertCompilationUnit",
          "source": "AST.java:270"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.buildStructure",
          "source": "CompilationUnit.java:187"
        },
        {
          "method": "org.eclipse.jdt.internal.core.Openable.generateInfos",
          "source": "Openable.java:229"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaElement.openWhenClosed",
          "source": "JavaElement.java:505"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent",
          "source": "CompilationUnit.java:993"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent",
          "source": "ReconcileWorkingCopyOperation.java:131"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation",
          "source": "ReconcileWorkingCopyOperation.java:71"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.run",
          "source": "JavaModelOperation.java:720"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.runOperation",
          "source": "JavaModelOperation.java:779"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.reconcile",
          "source": "CompilationUnit.java:1123"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run",
          "source": "JavaReconcilingStrategy.java:97"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile",
          "source": "JavaReconcilingStrategy.java:82"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile",
          "source": "JavaReconcilingStrategy.java:145"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile",
          "source": "CompositeReconcilingStrategy.java:86"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile",
          "source": "JavaCompositeReconcilingStrategy.java:94"
        },
        {
          "method": "org.eclipse.jface.text.reconciler.MonoReconciler.process",
          "source": "MonoReconciler.java:75"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.JavaReconciler.process",
          "source": "JavaReconciler.java:342"
        },
        {
          "method": "org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run",
          "source": "AbstractReconciler.java:204"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "143212",
      "date": "2006-05-23T15:56:17+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "elements": [
        {
          "method": "org.eclipse.jdt.core.dom.ASTNode.setSourceRange",
          "source": "ASTNode.java:2599"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:891"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:2353"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:511"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations",
          "source": "ASTConverter.java:179"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:2637"
        },
        {
          "method": "org.eclipse.jdt.core.dom.ASTConverter.convert",
          "source": "ASTConverter.java:1236"
        },
        {
          "method": "org.eclipse.jdt.core.dom.AST.convertCompilationUnit",
          "source": "AST.java:270"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.buildStructure",
          "source": "CompilationUnit.java:187"
        },
        {
          "method": "org.eclipse.jdt.internal.core.Openable.generateInfos",
          "source": "Openable.java:229"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaElement.openWhenClosed",
          "source": "JavaElement.java:505"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent",
          "source": "CompilationUnit.java:993"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent",
          "source": "ReconcileWorkingCopyOperation.java:131"
        },
        {
          "method": "org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation",
          "source": "ReconcileWorkingCopyOperation.java:71"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.run",
          "source": "JavaModelOperation.java:720"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelOperation.runOperation",
          "source": "JavaModelOperation.java:779"
        },
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.reconcile",
          "source": "CompilationUnit.java:1123"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run",
          "source": "JavaReconcilingStrategy.java:97"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile",
          "source": "JavaReconcilingStrategy.java:82"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile",
          "source": "JavaReconcilingStrategy.java:145"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile",
          "source": "CompositeReconcilingStrategy.java:86"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile",
          "source": "JavaCompositeReconcilingStrategy.java:94"
        },
        {
          "method": "org.eclipse.jface.text.reconciler.MonoReconciler.process",
          "source": "MonoReconciler.java:75"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.text.JavaReconciler.process",
          "source": "JavaReconciler.java:342"
        },
        {
          "method": "org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run",
          "source": "AbstractReconciler.java:204"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "143212",
      "date": "2006-05-23T15:56:17+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "143212",
  "bugId": "143212",
  "date": "2006-05-23T15:56:17+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}