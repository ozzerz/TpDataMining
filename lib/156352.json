{
  "comments": [
    "The attached snippet fails with a NPE when it tries to access the annotations of a super class.\n\njava.lang.NullPointerException\n\tat org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.getAnnotationTagBits(SourceTypeBinding.java:677)\n\tat org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.retrieveAnnotationHolder(SourceTypeBinding.java:1417)\n\tat org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.retrieveAnnotations(ReferenceBinding.java:1082)\n\tat org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.getAnnotations(ReferenceBinding.java:595)\n\tat org.eclipse.jdt.core.dom.TypeBinding.getAnnotations(TypeBinding.java:92)\n\tat org.eclipse.jdt.junit.tests.JUnit4TestFinderTest.testNPE(JUnit4TestFinderTest.java:323)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n...",
    "Created an attachment (id\u003d49480)\ntest case\n\n",
    "The annotations from the superclass are not resolved before the scopes are nullified.\nThe call getAnnotations() is trying to resolve them, but there is no more scopes to do it. The call createBindings(...) doesn\u0027t resolve the superclass of the given bindings.\ncreateAST(...) on the compilation unit that contaisn Test3 correctly initializes the annotations of the superclass and I could print:\np.Test3 has 0 annotation(s).\np.Test2 has 2 annotation(s).\njava.lang.Object has 0 annotation(s).\n\nSo the problem comes from the createBindings(...) call.",
    "Created an attachment (id\u003d49503)\nNew test case\n\nThis test case is using one call to createBindings(...) and one call to createAST(...).",
    "Created an attachment (id\u003d49504)\nsimplified test case\n\nSimplified: no JUnit container references needed and compliance correctly set to 1.5",
    "Is it possible up the priority of this bug? The workaround only works for types in compilation units, but not in a classfile with no source.",
    "This is a direct consequence of fix for bug 114935.\nIf commenting out line 677 to 686 in org.eclipse.jdt.core.dom.CompilationUnitResolver, the test case doesn\u0027t fail anymore.\nIn this case the superclass source unit is requested in order to connect the superclass, but since it is not part of the requestedSource, the superclass source unit added in the unitToProcess list is not resolved and therefore it is not possible to get the annotation bindings once the units have been cleaned up.\n\nWe should investigate two fixes:\n1) prevent the call from failing if annotations are not resolved \u003d\u003e add a null check\n2) resolve units required to connect the superclass.\n\nI added regression tests in org.eclipse.jdt.core.tests.dom.ASTConverter15Test#test0230/0231. 0230 is disabled since it fails.",
    "When we use createAST(...), the scopes of the requested types are not cleaned up and then the call to get the annotations work fine.\nWhen we use createBindings(...), all scopes are cleaned up and therefore it is not possible to do any further resolution. This has been done to fix bug 114935.\n\nJ?r?me, since you fixed bug 114935, you might have an idea how to fix this one as well. We might want to be able to resolve bindings inside the hierarchy. Otherwise we end up with incomplete bindings.",
    "It looks like we want to force the resolution of annotations of types and methods that are in the queue before the cleanup. \n\nThat sounds like a lot of work. Martin, since you didn\u0027t request the resolution of the super type, would returning an empty list in this case  be good enough ?",
    "In our use case we indeed need the super types and all their member\u0027s annotations.\nBut even if we didn\u0027t, it would seem like a bug to get incomplete bindings. It shouldn\u0027t make a difference how a binding was requested (createAST or createBinding), it should always look the same.",
    "(In reply to comment #8)\n\u003e It looks like we want to force the resolution of annotations of types and\n\u003e methods that are in the queue before the cleanup. \nWe don\u0027t need to resolve if not requested.\n \n\u003e That sounds like a lot of work. Martin, since you didn\u0027t request the resolution\n\u003e of the super type, would returning an empty list in this case  be good enough ?\nI don\u0027t think an empty list would help.\n\nWe need a consistent story between createBindings(...) and createAST(...). createAST(...) doesn\u0027t clean up units in the queue. We could do the same thing for createBindings(...).\nHowever this breaks the regression test added for bug 114935. So we might want to revisit it.\n\nI don\u0027t see why in org.eclipse.jdt.core.tests.dom.BatchASTCreationTests#test070, Y should not be resolved. If the user explicitly requests bindings for Y, I expect them to be available. If not, this would need to be described in the createBindings(...) API as well as createAST(...) that is doing too much work right now.\n\nJ?r?me, any comment?",
    "(In reply to comment #10)\n\u003e (In reply to comment #8)\n\u003e \u003e That sounds like a lot of work. Martin, since you didn\u0027t request the resolution\n\u003e \u003e of the super type, would returning an empty list in this case  be good enough ?\n\u003e I don\u0027t think an empty list would help.\nWe already return an empty list for fields and members if their declaring type has not been resolved.\n \n\u003e We need a consistent story between createBindings(...) and createAST(...).\n\u003e createAST(...) doesn\u0027t clean up units in the queue. We could do the same thing\n\u003e for createBindings(...).\nIf we eagerly created all bindings, this would be a performance regression (see bug bug 114935).\n\n\u003e However this breaks the regression test added for bug 114935. So we might want\n\u003e to revisit it.\nThis test ensures that we don\u0027t have a performance regression.\n\n\u003e I don\u0027t see why in\n\u003e org.eclipse.jdt.core.tests.dom.BatchASTCreationTests#test070, Y should not be\n\u003e resolved. If the user explicitly requests bindings for Y, I expect them to be\n\u003e available. If not, this would need to be described in the createBindings(...)\n\u003e API as well as createAST(...) that is doing too much work right now.\nRight. In the case of BatchASTCreationTests#test070, the user doesn\u0027t ask Y to be resolved.\n \n\n",
    "We definitely need consistency between the two APIs. So if we continue to clean up the queued units as we do in createBindings(...) we should also clean up queued units in createAST(...).\nMartin, any comment? Would this break existing code on your side?",
    "We expect all bindings to be complete. Changing this will definitly break us.\n\nOr we have to introduce new flags on createBinding to give you hints how much should be resolved.\n\nIt\u0027s not obvious to me how bug 114935 and ASTParser.createBindings are related. For the ASTRequestor it makes perfectly sense to stop reporting ASTs anymore when all user requested ASTs and bindings have been processed, but ASTParser.createBindings is a simple function, no ASTRequestor involved. ",
    "(In reply to comment #13)\n\u003e We expect all bindings to be complete. Changing this will definitly break us.\nAs said before, you are already broken for fields and methods.\n\n\u003e Or we have to introduce new flags on createBinding to give you hints how much\n\u003e should be resolved.\nThis problem should be resolved when we reify the AST queue. In this case, the lookup environment will be kept in memory and things will be lazily resolved.\n\n\u003e It\u0027s not obvious to me how bug 114935 and ASTParser.createBindings are related.\n\u003e For the ASTRequestor it makes perfectly sense to stop reporting ASTs anymore\n\u003e when all user requested ASTs and bindings have been processed, but\n\u003e ASTParser.createBindings is a simple function, no ASTRequestor involved. \nThe problem in bug 114935 was not to stop reporting ASTs, but to stop resolving ASTs that were not requested (same as stop resolving binding keys that were not requested).\n\n\n",
    "Can you elaborate which fields and methods we\u0027re not getting? We need a clear understanding of this, so we know why refactorings or other stuff fails.\n",
    "(In reply to comment #15)\n\u003e Can you elaborate which fields and methods we\u0027re not getting? We need a clear\n\u003e understanding of this, so we know why refactorings or other stuff fails.\nLet\u0027s say you have class A with field \u0027foo\u0027 and class B that extends A. If you call createBindings on B only, then you navigate to A binding (using getSuperClass() on B binding), then ask A binding for its fields using getDeclaredFields(), this will return an empty list since A was not resolved.",
    "I verified that in the AST view and you\u0027re right. But I\u0027m afraid this is a bug, we\u0027re really expecting bindings to be complete and to look the same, regardless if achieved from createAST or createBinding. \n\nPerformance is of course an issue, but correctness is more important. If thing are left away, it needs to be decided/controled by the user of the API.\n\nWhat do you mean by \u0027not requested\u0027. Assuming I want to know all fields from a type\u0027s superclasses, do you think I should pass in the fields as IFields to createBinding? How would we get all these IFields? Building a supertype hierarchy? That really wouldn\u0027t make sense.\n",
    "I think the performance improvement of bug 114935 should be made explicit by allowing the API client to tell whether bindings should be completely resolved after the last accept*(..) callback. This could either be an additional parameter for ASTParser#createASTs(..), or another callback method in ASTRequestor, e.g.\n    public boolean stopResolvingBindings() { return false; }\n\nASTParser#createBindings(..) has to return complete bindings.",
    "(In reply to comment #17)\n\u003e What do you mean by \u0027not requested\u0027. \nI meant that it is not part of the set of ICompilationUnits and IClassFiles that are the parents of the IJavaElements passed to createBindings(...).\n\n\u003e Assuming I want to know all fields from a\n\u003e type\u0027s superclasses, do you think I should pass in the fields as IFields to\n\u003e createBinding? \nYou would need to only pass in the type\u0027s superclasses.\n\n\u003e How would we get all these IFields? Building a supertype\n\u003e hierarchy? That really wouldn\u0027t make sense.\nAgreed that would be very inefficient.\n\n",
    "(In reply to comment #18)\n\u003e I think the performance improvement of bug 114935 should be made explicit by\n\u003e allowing the API client to tell whether bindings should be completely resolved\n\u003e after the last accept*(..) callback. This could either be an additional\n\u003e parameter for ASTParser#createASTs(..), or another callback method in\n\u003e ASTRequestor, e.g.\n\u003e     public boolean stopResolvingBindings() { return false; }\n\u003e \n\u003e ASTParser#createBindings(..) has to return complete bindings.\n\u003e \nThis proposal makes sense to me.\nSo we have 2 issues here:\n- fixing the NPE (this bug)\n- adding a new API to control whether we should stop resolving after the last accept(...) has been done (please open a separate bug for that)\n",
    "Ok, in this case we might need two new APIs depending how we do it. One for createBindings(...) and one for createAST(...).\nDo we agree that right now createAST(...) is doing too much work? It should also clean up all units in the queue. In order to get all the bindings complete, the new API should be used. This might break existing users.",
    "(In reply to comment #21)\n\u003e Ok, in this case we might need two new APIs depending how we do it. One for\n\u003e createBindings(...) and one for createAST(...).\nI think you meant one for createASTs(...) and one for createAST(). Markus said that createBindings(...) should always return complete bindings, so we should fix that when we get a separate bug for it.\n\n\u003e Do we agree that right now createAST(...) is doing too much work? It should\n\u003e also clean up all units in the queue. In order to get all the bindings\n\u003e complete, the new API should be used. This might break existing users.\nI agree that it is doing too much. However nobody complained about it yet. So when we get a complaint that createAST(...) is too slow, then we can add a new API that would cleanup the remaining CUs in the queue. Thus we would not break existing clients. So I would not change anything for createAST(...) for now.\n\n",
    "createAST() is doing the right thing, createBindings() should do the same (complete bindings). I agree with Jerome, we don;t need to add API at this time.\n\nThe new API would be for clients of \u0027createASTs\u0027 (like in bug 114935) so they can tell the queue that after the last callback to their ASTRequestor they are done and won\u0027t access bindings outside the queue (or is this already part of the contract of the ASTRequestor?)",
    "(In reply to comment #23)\n\u003e createAST() is doing the right thing, createBindings() should do the same\n\u003e (complete bindings). I agree with Jerome, we don;t need to add API at this\n\u003e time.\ncreateAST() doesn\u0027t resolve the bindings before they are requested. It simply keeps all the scopes around for the units in the queue. This allows lazy resolution to work. So in order to fix this, we would simply remove the cleaning of the units in the queue for createBindings() and we should get a consistent behavior. But this should be in a different bug report. This one is about the NPE.\n\nI open bug 164660 for the new API creation. Feel free to add your proposal there.",
    "*** Bug 151364 has been marked as a duplicate of this bug. ***",
    "NPE is fixed in HEAD.\nReleased for 3.3M4.\nPlease use bug 164660 in order to fix the problem with incomplete bindings (annotations are not resolved for the super class).\nRegression tests are now reenabled.",
    "Verified for 3.3 M4 using build I20061212-0010.\n"
  ],
  "commentCreationDates": [
    "2006-09-06T15:01:50+02:00",
    "2006-09-06T15:39:58+02:00",
    "2006-09-06T17:37:07+02:00",
    "2006-09-06T17:39:53+02:00",
    "2006-09-06T17:42:53+02:00",
    "2006-09-08T15:07:30+02:00",
    "2006-11-13T20:34:00+01:00",
    "2006-11-13T20:57:52+01:00",
    "2006-11-14T12:50:22+01:00",
    "2006-11-14T13:44:42+01:00",
    "2006-11-14T16:26:31+01:00",
    "2006-11-14T16:59:07+01:00",
    "2006-11-14T17:10:35+01:00",
    "2006-11-14T17:25:57+01:00",
    "2006-11-14T17:44:00+01:00",
    "2006-11-14T17:54:09+01:00",
    "2006-11-15T10:21:21+01:00",
    "2006-11-15T11:39:20+01:00",
    "2006-11-15T13:20:56+01:00",
    "2006-11-15T14:14:00+01:00",
    "2006-11-15T14:17:28+01:00",
    "2006-11-15T14:59:36+01:00",
    "2006-11-15T15:09:06+01:00",
    "2006-11-15T15:20:51+01:00",
    "2006-11-15T16:29:10+01:00",
    "2006-11-16T04:23:34+01:00",
    "2006-11-16T16:19:53+01:00",
    "2006-12-12T18:15:17+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.getAnnotationTagBits",
          "source": "SourceTypeBinding.java:677"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.retrieveAnnotationHolder",
          "source": "SourceTypeBinding.java:1417"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.retrieveAnnotations",
          "source": "ReferenceBinding.java:1082"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.getAnnotations",
          "source": "ReferenceBinding.java:595"
        },
        {
          "method": "org.eclipse.jdt.core.dom.TypeBinding.getAnnotations",
          "source": "TypeBinding.java:92"
        },
        {
          "method": "org.eclipse.jdt.junit.tests.JUnit4TestFinderTest.testNPE",
          "source": "JUnit4TestFinderTest.java:323"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "156352",
      "date": "2006-09-06T15:01:50+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "156352",
  "bugId": "156352",
  "date": "2006-09-06T15:01:50+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}