{
  "comments": [
    "A major focus of the Eclipse 3.2 release is scalability, and major strides have been made in various areas (UI, workspace, JDT, platform, equinox). I am working on a product that ships around 1,800 plugins, so I think we are a nice test case for scalability of equinox :-)\n\nWhat I think I discovered is that while building the extension registry, each contribution is validated by taking its timestamp. For this, from the contribution either \"plugin.xml\" or \"fragment.xml\" is retrieved. When the bundle has been jarred up (which a growing number of bundles are), this means we have to open the jar (create instance of java.util.ZipFile), to get the entry out, and then the only thing we do with it is test its timestamp.\n\nThis is fine for Eclipse. For larger products, this becomes noticeable. When something as large as RAD starts up, Eclipse may take 2-10 seconds *before* the fabulous progress bar shows progress in the splash screen. Once the progress bar starts animating, startup of RAD seems to progress almost as fast as Eclipse (all jars are in the OS disk cache by now, of course).\nWhen self-hosting, a product like RAD can take up to 20 seconds before progress starts showing.\n\nIs the exhaustive timestamp checking by design? Are there alternatives? Is there something I am doing wrong? This is all on 3.2M6\n\nWhat I recommend the equinox team does is to build a fake product with 10,000 empty plugins (org.eclipse.equinox.scalability.test1, 2, etc), and one with 100,000 plugins, to see if you can replicate this problem, and then see if we can find better ways to determine whether the binary registry is out of date?\n\nI saw the behavior both when self-hosting _and_ when running from the command line (to rule out PDE artifact behavior).\n\nBelow, you find a stack dump where plugin.xml is loaded during initialization.\n\njava.lang.Exception: Loading plugin.xml\n\tat com.ibm.cds.jxes.JxeZipFile.getEntry(JxeZipFile.java:85)\n\tat org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getZipEntry(ZipBundleFile.java:102)\n\tat org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getEntry(ZipBundleFile.java:229)\n\tat org.eclipse.osgi.baseadaptor.BaseData.getEntry(BaseData.java:97)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getEntry(AbstractBundle.java:1281)\n\tat org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.getContributionsTimestamp(Unknown Source)\n\tat org.eclipse.core.internal.registry.ExtensionRegistry.computeTimeStamp(Unknown Source)\n\tat org.eclipse.core.internal.registry.ExtensionRegistry.\u003cinit\u003e(Unknown Source)\n\tat org.eclipse.core.runtime.RegistryFactory.createRegistry(Unknown Source)\n\tat org.eclipse.core.internal.registry.osgi.Activator.startRegistry(Unknown Source)\n\tat org.eclipse.core.internal.registry.osgi.Activator.start(Unknown Source)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:994)\n\tat java.security.AccessController.doPrivileged(AccessController.java:204)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:988)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:969)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:317)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:256)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseLazyStarter.preFindLocalClass(EclipseLazyStarter.java:86)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:402)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:188)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass(BundleLoader.java:338)\n\tat org.eclipse.osgi.framework.internal.core.SingleSourcePackage.loadClass(SingleSourcePackage.java:37)\n\tat org.eclipse.osgi.framework.internal.core.MultiSourcePackage.loadClass(MultiSourcePackage.java:32)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:387)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:351)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:560)\n\tat java.lang.ClassLoader.defineClassImpl(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:211)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass(DefaultClassLoader.java:160)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:491)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:461)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:420)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:403)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:188)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass(BundleLoader.java:338)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:390)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:351)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:560)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass(BundleLoader.java:276)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:227)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.loadBundleActivator(AbstractBundle.java:134)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:965)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:317)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:329)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1037)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:573)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:495)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:275)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:455)\n\tat org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:189)\n\tat org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:291)",
    "Interesting. Oleg, can you dig into this?  \n\nChris, can you confirm that this is NOT first start?\n\nThe time stamp checking really ought to be of the JAR itself in the case of JAR\u0027d plugins.",
    "When you do normal command line startup do you set the following :\n\nosgi.checkConfiguration\u003dtrue\n\nBy default this property is not set and the code from the stacktrace should not be run at all.  This property will also get set if you use the -dev option from command line.",
    "I triple-quadruple checked. It seems like all of a sudden the entries are no longer read from the command line. Duh. So it wasn\u0027t those entries after all.\n\nWhat follows now is a desperate struggle to demonstrate I am still onto something...\n\nWhat I see is that it takes about 2.5 seconds (at 100% CPU) before the progress bar is starting to show in the splash screen. This seems long to me. Overall, with a warm hard disk, command-line startup is around 8-9 seconds to go into empty Java perspective.",
    "Hi Chris,\nI just checked again and it works just like Thomas described in the comment #2. \n\nFor the startup time: let\u0027s assume that the time before you see the progress bar is the headless startup time. (This is not quite correct, but is a reasonable simplification.)\n\nThe headless startup time consist from two variables: \"base\" startup time (about 0.8 sec on the WinXP 2Gb 2GHz) and the \"variable\" time.\n\nThe \"base\" startup time goes into classloading, activation of the runtime and OSGi, and some housekeeping. \n\nThe \"variable\" startup time depends on the number of plugns in the target and seems to be about 1ms per bundle.\n\nSo, the headless startup time for 1800 plugins would be about:\n\"base\" + \"variable\" \u003d 0.8sec + 0.001sec/plugin * 1800plugins \u003d 2.6 sec \n\nWhich is close to what you see.\n\nI am closing the bug as \"invalid\" as the timestamp are only checked in \"dev\" mode, if the \"osgi.checkConfiguration\" property is set, or during the fist startup. \n\nThat said, I would be very interested in suggestions on reducing the startup time.\n"
  ],
  "commentCreationDates": [
    "2006-04-21T15:28:17+02:00",
    "2006-04-21T16:27:26+02:00",
    "2006-04-21T16:31:10+02:00",
    "2006-04-21T16:45:58+02:00",
    "2006-04-21T18:08:09+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "Loading plugin.xml",
      "elements": [
        {
          "method": "com.ibm.cds.jxes.JxeZipFile.getEntry",
          "source": "JxeZipFile.java:85"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getZipEntry",
          "source": "ZipBundleFile.java:102"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getEntry",
          "source": "ZipBundleFile.java:229"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.BaseData.getEntry",
          "source": "BaseData.java:97"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.getEntry",
          "source": "AbstractBundle.java:1281"
        },
        {
          "method": "org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.getContributionsTimestamp",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.registry.ExtensionRegistry.computeTimeStamp",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.registry.ExtensionRegistry.\u003cinit\u003e",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.runtime.RegistryFactory.createRegistry",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.registry.osgi.Activator.startRegistry",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.internal.registry.osgi.Activator.start",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run",
          "source": "BundleContextImpl.java:994"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "AccessController.java:204"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
          "source": "BundleContextImpl.java:988"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
          "source": "BundleContextImpl.java:969"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:317"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
          "source": "AbstractBundle.java:256"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseLazyStarter.preFindLocalClass",
          "source": "EclipseLazyStarter.java:86"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass",
          "source": "ClasspathManager.java:402"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass",
          "source": "DefaultClassLoader.java:188"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass",
          "source": "BundleLoader.java:338"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.SingleSourcePackage.loadClass",
          "source": "SingleSourcePackage.java:37"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.MultiSourcePackage.loadClass",
          "source": "MultiSourcePackage.java:32"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:387"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:351"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass",
          "source": "DefaultClassLoader.java:83"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:560"
        },
        {
          "method": "java.lang.ClassLoader.defineClassImpl",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:211"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass",
          "source": "DefaultClassLoader.java:160"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass",
          "source": "ClasspathManager.java:491"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl",
          "source": "ClasspathManager.java:461"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl",
          "source": "ClasspathManager.java:420"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass",
          "source": "ClasspathManager.java:403"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass",
          "source": "DefaultClassLoader.java:188"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass",
          "source": "BundleLoader.java:338"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:390"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:351"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass",
          "source": "DefaultClassLoader.java:83"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:560"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass",
          "source": "BundleLoader.java:276"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.loadClass",
          "source": "BundleHost.java:227"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.loadBundleActivator",
          "source": "AbstractBundle.java:134"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
          "source": "BundleContextImpl.java:965"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:317"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.resume",
          "source": "AbstractBundle.java:329"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.resumeBundle",
          "source": "Framework.java:1037"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles",
          "source": "StartLevelManager.java:573"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL",
          "source": "StartLevelManager.java:495"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel",
          "source": "StartLevelManager.java:275"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent",
          "source": "StartLevelManager.java:455"
        },
        {
          "method": "org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent",
          "source": "EventManager.java:189"
        },
        {
          "method": "org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run",
          "source": "EventManager.java:291"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "137932",
      "date": "2006-04-21T15:28:17+02:00",
      "product": "Equinox",
      "component": "Bundles",
      "severity": "normal"
    }
  ],
  "groupId": "137932",
  "bugId": "137932",
  "date": "2006-04-21T15:28:17+02:00",
  "product": "Equinox",
  "component": "Bundles",
  "severity": "normal"
}