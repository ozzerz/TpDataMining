{
  "comments": [
    "When I use the PerfmonAgent the diagrams are not updated.\n(I\u0027m using 3.2A)\n\nTo debug this I simply used my own RAC Client and invoced the PerfmonAgent.\nAnd by looking into the exceptions thrown I know understand what the problem \nis. I also know a work-around. \n\nSome of the metrics values sent from the PerformAgent contains some double \nvalues with decimals. The problem is the \u0027Decimal symbol? in the java client \nside implementation is assumed to be a point character (e.g. . ), but this \ncharacter varies from country to country (ex: in Sweden the decimal symbol is a \ncomma). What makes it even worse is the fact that it is user definable in the \nlocal Windows client installation. So this must be handled in a more \nintelligent way.\n\nSo to fix the problem I simply opened the Control Panel-\u003eRegional Settings and \nselected the Numbers tab. I then changed the Decimal symbol from comma to point.\nRestarted Eclipse and my RAServer. Now I see my metrics values in the diagram!\n\nI really think that this should be fixed in the implementation because it will \ngive the users problems in tools like Excel if they forget to change the \ndecimal character back to the national default character.\n\n\nException stacktrace:\n\n\n\u003cContiguousObservation memberDescriptor\u003d\"4C1380\" time\u003d\"1110382099265\" \nvalue\u003d\"126748,000000\" /\u003e\nThread[xmlParserThread,6,main] - java.lang.NumberFormatException: For input \nstring: \"126748,000000\"\n\tat java.lang.NumberFormatException.forInputString\n(NumberFormatException.java:48)\n\tat java.lang.FloatingDecimal.readJavaFormatString\n(FloatingDecimal.java:1207)\n\tat java.lang.Double.valueOf(Double.java:202)\n\tat \norg.eclipse.hyades.loaders.statistical.XMLContiguousObservationLoader.addAttribu\nte(XMLContiguousObservationLoader.java)\n\tat org.eclipse.hyades.loaders.util.XMLLoader.attributeValueCharacters\n(XMLLoader.java)\n\tat org.eclipse.hyades.loaders.util.SAXFragmentHandler.startElement\n(SAXFragmentHandler.java)\n\tat org.apache.crimson.parser.Parser2.maybeElement(Parser2.java:1674)\n\tat org.apache.crimson.parser.Parser2.content(Parser2.java:1963)\n\tat org.apache.crimson.parser.Parser2.maybeElement(Parser2.java:1691)\n\tat org.apache.crimson.parser.Parser2.parseInternal(Parser2.java:667)\n\tat org.apache.crimson.parser.Parser2.parse(Parser2.java:337)\n\tat org.apache.crimson.parser.XMLReaderImpl.parse(XMLReaderImpl.java:448)\n\tat javax.xml.parsers.SAXParser.parse(SAXParser.java:345)\n\tat org.eclipse.hyades.loaders.util.SAXFragmentHandler.parse\n(SAXFragmentHandler.java)\n\tat org.eclipse.hyades.loaders.util.SAXFragmentHandler$1.run\n(SAXFragmentHandler.java",
    "Excellent bug report Lars!\n\nCurrently the agents do not detect what numerical formatting to use for double\nvalues when they construct statistical observations. They always send back\nnumerical data with a decimal delimeter of a \u0027.\u0027. I think this implementation\nshould stay this way, as the number formatting on the workbench should be\nindependent of the regional settings of the machines that the agents are running on.\n\nIdeally, the loaders should accomodate the standard \u0027.\u0027 decimal placing as well\nas any regional variations.\n\nMarius, I am assigning this to you as I believe it is a fix that should be\nimplemented in the statistical loaders.",
    "I\u0027m not sure if I can fix this problem in the loader, I don\u0027t have the locale\ninformation there.\n\nI think we should follow the same approach as in the profiling trace case, so\nthe agent should always convert the values to use \".\", because currently only\nthe agent knows the locale of the system where it actually runs.\n\nThis approach will solve also the case when you save the performance trace in a\nfile and import it later in the workbench.\n\nPlease let me know what you think.",
    "Marius, you are 100% correct. I got a bit confused with this. We need to ensure \nthat the delimeter used is consistent in both the agents and loaders, \nirrespective of what locales the client or server are using. Do you always \nassume a . decimal separator in the loaders with no 1000\u0027s separators? I guess \nI am asking if ####.#### will always be parsable by the loaders regardless of \nlocale?",
    "I always use the coresponding type from the model, in this case\nSDContiguousObservation.getValue() being a list of Doubles I use\nDouble.valueOf(value) to convert the \"value\" attribute.\n\nPlease see\nhttp://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#230798\nfor  more info about the argument structure Double.valueOf() method.\n\nI will reasign it back to you then.\n\nPlease let me know if you need more info.",
    "Now that we have a \"3.3\" Version in bugzilla, updating bugzillas targeted to 3.3\nor a 3.3 iteration so that their Version matches their Target. \"future\",\n\"unspecified\", \"4.0\", and \"4.1\" Versions will not be updated.",
    "Checked fix into 3.3 stream. The agent now complies with the Double standard\nspecified in the doc Marius linked. Thanks for your help Marius."
  ],
  "commentCreationDates": [
    "2005-03-10T11:48:40+01:00",
    "2005-03-10T15:27:46+01:00",
    "2005-03-11T16:05:51+01:00",
    "2005-03-11T16:59:11+01:00",
    "2005-03-11T20:45:17+01:00",
    "2005-03-15T23:17:16+01:00",
    "2005-03-17T12:58:12+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NumberFormatException",
      "message": "For input  string: \"126748,000000\"",
      "elements": [
        {
          "method": "java.lang.NumberFormatException.forInputString",
          "source": "NumberFormatException.java:48"
        },
        {
          "method": "java.lang.FloatingDecimal.readJavaFormatString",
          "source": "FloatingDecimal.java:1207"
        },
        {
          "method": "java.lang.Double.valueOf",
          "source": "Double.java:202"
        },
        {
          "method": "org.eclipse.hyades.loaders.statistical.XMLContiguousObservationLoader.addAttribute",
          "source": "XMLContiguousObservationLoader.java"
        },
        {
          "method": "org.eclipse.hyades.loaders.util.XMLLoader.attributeValueCharacters",
          "source": "XMLLoader.java"
        },
        {
          "method": "org.eclipse.hyades.loaders.util.SAXFragmentHandler.startElement",
          "source": "SAXFragmentHandler.java"
        },
        {
          "method": "org.apache.crimson.parser.Parser2.maybeElement",
          "source": "Parser2.java:1674"
        },
        {
          "method": "org.apache.crimson.parser.Parser2.content",
          "source": "Parser2.java:1963"
        },
        {
          "method": "org.apache.crimson.parser.Parser2.maybeElement",
          "source": "Parser2.java:1691"
        },
        {
          "method": "org.apache.crimson.parser.Parser2.parseInternal",
          "source": "Parser2.java:667"
        },
        {
          "method": "org.apache.crimson.parser.Parser2.parse",
          "source": "Parser2.java:337"
        },
        {
          "method": "org.apache.crimson.parser.XMLReaderImpl.parse",
          "source": "XMLReaderImpl.java:448"
        },
        {
          "method": "javax.xml.parsers.SAXParser.parse",
          "source": "SAXParser.java:345"
        },
        {
          "method": "org.eclipse.hyades.loaders.util.SAXFragmentHandler.parse",
          "source": "SAXFragmentHandler.java"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "87630",
      "date": "2005-03-10T11:48:40+01:00",
      "product": "Hyades",
      "component": "DataCollection\u0026Control",
      "severity": "blocker"
    }
  ],
  "groupId": "87630",
  "bugId": "87630",
  "date": "2005-03-10T11:48:40+01:00",
  "product": "Hyades",
  "component": "DataCollection\u0026Control",
  "severity": "blocker"
}