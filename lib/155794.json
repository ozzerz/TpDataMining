{
  "comments": [
    "Hi,\n\nI have found a bug in loading an XML Schema as a resource and then serializing it. I am trying to send the Document across the network and get the following problem, see the exception.\n\nThe document is loaded and returned in the following fashion, you may notice that the XSD file is contained in the jar. This is loaded successfully.\n\n    ResourceSet resourceSet \u003d new ResourceSetImpl();\n    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"xsd\", new XSDResourceFactoryImpl());\n    URL url \u003d getClass().getClassLoader().getResource(\"xml-schema/XmlSchemaName.xsd\");\n    URI uri \u003d URI.createURI(url.toString());\n    XSDResourceImpl xsdResource \u003d (XSDResourceImpl)resourceSet.createResource(uri);\n    xsdResource.load(null);\n    XSDSchema xsdSchema \u003d xsdResource.getSchema();\n    Document xsdDocument \u003d xsdSchema.getDocument();\n    return xsdDocument;\n\n        ...\n\tat project.XmlExport.export(Lcom/tracegroup/isys/opentwins/base/app/dto/Dto;)V(XmlExport.java:46)\n\tat project.XmlExport.\u003cinit\u003e()V(XmlExport.java:27)\n\tat project.XmlExport.main([Ljava/lang/String;)V(XmlExport.java:86)\nCaused by: java.io.NotSerializableException: org.eclipse.xsd.impl.XSDSchemaImpl$5\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.writeArray(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteObject(Unknown Source)\n\tat java.util.Vector.writeObject(Vector.java:1017)\n\tat java.lang.LangAccessImpl.writeObject(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeWriteObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject(Unknown Source)\n\tat java.util.Hashtable.writeObject(Unknown Source)\n\tat java.lang.LangAccessImpl.writeObject(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeWriteObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.writeArray(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\nCaused by:\njava.io.NotSerializableException: org.eclipse.xsd.impl.XSDSchemaImpl$5\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.writeArray(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteObject(Unknown Source)\n\tat java.util.Vector.writeObject(Vector.java:1017)\n\tat java.lang.LangAccessImpl.writeObject(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeWriteObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject(Unknown Source)\n\tat java.util.Hashtable.writeObject(Unknown Source)\n\tat java.lang.LangAccessImpl.writeObject(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeWriteObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.writeArray(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\tat java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)\n\tat java.io.ObjectOutputStream.writeSerialData(Unknown Source)\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)\n\tat java.io.ObjectOutputStream.writeObject0(Unknown Source)\n\nThanks,\nStuart",
    "Stuart,\n\nI\u0027m not sure what the cause is, but I suspect it\u0027s the fact that there is an event listener attached:\n\n  public void setElement(Element element)\n  {\n    Element oldElement \u003d getElement();\n    if (oldElement instanceof EventTarget)\n    {\n      EventTarget oldEventTarget \u003d ((EventTarget)oldElement);\n      oldEventTarget.removeEventListener(\"DOMNodeInserted\", getEventListener(), true);\n      oldEventTarget.removeEventListener(\"DOMNodeRemoved\", getEventListener(), true);\n      oldEventTarget.removeEventListener(\"DOMAttrModified\", getEventListener(), true);\n    }\n    super.setElement(element);\n    if (element instanceof EventTarget)\n    {\n      EventTarget eventTarget \u003d ((EventTarget)element);\n      eventTarget.addEventListener(\"DOMNodeInserted\", getEventListener(), true);\n      eventTarget.addEventListener(\"DOMNodeRemoved\", getEventListener(), true);\n      eventTarget.addEventListener(\"DOMAttrModified\", getEventListener(), true);\n    }\n    if (element !\u003d null)\n    {\n      document \u003d element.getOwnerDocument();\n    }\n  }\n\n  protected EventListener getEventListener()\n  {\n    if (eventListener \u003d\u003d null)\n    {\n      eventListener \u003d \n        new EventListener()\n        {\n          public void handleEvent(Event event) \n          {\n\nI don\u0027t think the DOM should be trying to serialize the event listener and it\u0027s not possible to make the listener serializeable.  You\u0027d likely be far better off wrapping to the DOM in an Externalizeable that serializes it as a string and parses that string during deserialization, or just passing that string itself around.  Another alternative would be to clone the DOM and use that clone; I don\u0027t think the clone will have listeners attached.\n\nI think I\u0027ll need to return this as WONTFIX because I think it\u0027s an \"I can\u0027t fix\".  Or do you have a suggestion on how to fix before I resolve it that way?",
    "Hi Ed,\n\nThanks for the response.\n\nI\u0027m a bit confused by your suggestions. I understand wrapping org.w3c.dom.Document and have written that code out, but Externalizable requires me to implement readExternally and writeExternally. I would think that in order to make the XSD document into a String I would need it to be serializable? Also, I wonder how performant this might be?\n\nThe other method that you suggested with regard to cloning the object, I cannot find a clone method on any of the related classes and therefore do not see this as a possibility.\n\nHow easy would it be to remove the event listeners from the schema document and would this be dangerous?\n\nThanks,\nStuart",
    "Could we make the event listener and other non serialized attributes on the class transient?",
    "(In reply to comment #3)\n\u003e Could we make the event listener and other non serialized attributes on the\n\u003e class transient?\n\ni.e. in XSDSchemaImpl.java change the following line\n\nprotected transient EventListener eventListener;\n\nThis should mean that the EventListener is ignored during serialization. I think this is the most perfect solution, of course - we might find other class attributes which would need to be made transient along the way too, but we could find those with trial and error.",
    "You can use Node.cloneNode(true):\n  http://java.sun.com/j2se/1.4.2/docs/api/org/w3c/dom/Node.html#cloneNode(boolean)\n\nThis type of approach should work as well:\n\n  class DocumentExternalizeable implements Externalizable\n  {\n    protected Document document;\n    \n    public DocumentExternalizeable()\n    {\n    }\n\n    public DocumentExternalizeable(Document document)\n    {\n      this.document \u003d document;\n    }\n\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException\n    {\n      String string \u003d in.readUTF();\n      DocumentBuilderFactory documentBuilderFactory \u003d DocumentBuilderFactory.newInstance();\n      documentBuilderFactory.setNamespaceAware(true);\n      DocumentBuilder documentBuilder;\n      try\n      {\n        documentBuilder \u003d documentBuilderFactory.newDocumentBuilder();\n        document \u003d  documentBuilder.parse(new InputSource(new StringReader(string)));\n      }\n      catch (ParserConfigurationException e)\n      {\n        e.printStackTrace();\n      }\n      catch (SAXException e)\n      {\n        e.printStackTrace();\n      }\n    }\n\n    public void writeExternal(ObjectOutput out) throws IOException\n    {\n      StringWriter stringWriter \u003d new StringWriter();\n      TransformerFactory transformerFactory \u003d TransformerFactory.newInstance();\n      Transformer transformer;\n      try\n      {\n        transformer \u003d transformerFactory.newTransformer();\n        transformer.transform(new DOMSource(document), new StreamResult(stringWriter));\n      }\n      catch (TransformerConfigurationException e)\n      {\n        e.printStackTrace();\n      }\n      catch (TransformerException e)\n      {\n        e.printStackTrace();\n      }\n      out.writeUTF(stringWriter.getBuffer().toString());\n    }\n  }\n\nIt will probably perform better as well, and does not suffer from the problem that I think your current approach has which is that the source and target JVMs need to have exactly the same JAXP implementation.\n\nThe event listener is there because it allows you to change the DOM and automatically have the model respond to that change to update the model.  There\u0027s no public way for you to remove it..\n\nIt\u0027s the fact (I assume) that the event listener is non-transient in the DOM implementation itself that is the problem and that\u0027s not something I can control, and it also seems to me to be questionable...",
    "I\u0027m still having trouble with this bug/issue. I had to change the writeExternal method to deal with the xml string in smaller chunks as I was getting a UTFDataFormatException and now this works ok, then I got another issue due to the readExternal not reading the same number of bytes as the writeExternal method.\n\nHaving got past this I now have an issue whereby the xml that I am reading is corrupted. I seem to be getting lots of square characters in my xml string which therefore get rejected when trying to load the xml schema on the client side.\n\n-- exception --\n\norg.xml.sax.SAXParseException: Content is not allowed in prolog.\n\tat weblogic.apache.xerces.parsers.DOMParser.parse(Lorg/xml/sax/InputSource;)V(DOMParser.java:271)\n\tat weblogic.apache.xerces.jaxp.DocumentBuilderImpl.parse(Lorg/xml/sax/InputSource;)Lorg/w3c/dom/Document;(DocumentBuilderImpl.java:201)\n\tat weblogic.xml.jaxp.RegistryDocumentBuilder.parse(Lorg/xml/sax/InputSource;)Lorg/w3c/dom/Document;(RegistryDocumentBuilder.java:149)\n\tat com.tracegroup.isys.opentwins.base.app.w3c.dom.ExternalizableDocument.stringToOriginalDocument(Ljava/lang/String;)V(ExternalizableDocument.java:194)\n\tat com.tracegroup.isys.opentwins.base.app.w3c.dom.ExternalizableDocument.readExternal(Ljava/io/ObjectInput;)V(ExternalizableDocument.java:218)\n\tat java.io.ObjectInputStream.readExternalData(Ljava/io/Externalizable;Ljava/io/ObjectStreamClass;)V(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Z)Ljava/lang/Object;(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Z)Ljava/lang/Object;(Unknown Source)\n\tat java.io.ObjectInputStream.readArray(Z)Ljava/lang/Object;(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Z)Ljava/lang/Object;(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Z)Ljava/lang/Object;(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Z)Ljava/lang/Object;(Unknown Source)\n\tat java.io.ObjectInputStream.readObject()Ljava/lang/Object;(Unknown Source)\n\tat weblogic.common.internal.ChunkedObjectInputStream.readObject()Ljava/lang/Object;(ChunkedObjectInputStream.java:120)\n\tat weblogic.rjvm.MsgAbbrevInputStream.readObject(Ljava/lang/Class;)Ljava/lang/Object;(MsgAbbrevInputStream.java:121)\n\tat weblogic.rmi.internal.ObjectIO.readObject(Lweblogic/rmi/spi/MsgInput;Ljava/lang/Class;S)Ljava/lang/Object;(ObjectIO.java:56)\n\tat weblogic.rjvm.ResponseImpl.unmarshalReturn()Ljava/lang/Object;(ResponseImpl.java:164)\n\tat weblogic.rmi.internal.BasicRemoteRef.invoke(Ljava/rmi/Remote;Lweblogic/rmi/extensions/server/RuntimeMethodDescriptor;[Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;(BasicRemoteRef.java:165)\n\tat com.tracegroup.isys.opentwins.components.RiskApp.RiskAppDtoSf_u695io_EOImpl_815_WLStub._dto_export(Lcom/tracegroup/isys/opentwins/base/app/exporter/OpenTwinsExportParametersInterface;Lcom/tracegroup/isys/opentwins/base/app/infra/OpenTwinsInvocationContext;)Lcom/tracegroup/isys/opentwins/base/app/returnable/Returnable;(Unknown Source)\n\tat com.tracegroup.isys.opentwins.base.app.bd.AbstractDtoBusinessDelegate._internal__dto_export(Lcom/tracegroup/isys/opentwins/base/app/exporter/OpenTwinsExportParametersInterface;)Lcom/tracegroup/isys/opentwins/base/app/returnable/Returnable;(AbstractDtoBusinessDelegate.java:5509)\n\tat com.tracegroup.isys.opentwins.base.app.bd.AbstractDtoBusinessDelegate._dto_export(Lcom/tracegroup/isys/opentwins/base/app/exporter/OpenTwinsExportParametersInterface;)Lcom/tracegroup/isys/opentwins/base/app/returnable/Returnable;(AbstractDtoBusinessDelegate.java:5448)\n\tat opentwins.XmlExport.export(Lcom/tracegroup/isys/opentwins/base/app/dto/Dto;)V(XmlExport.java:42)\n\tat opentwins.XmlExport.\u003cinit\u003e()V(XmlExport.java:27)\n\tat opentwins.XmlExport.main([Ljava/lang/String;)V(XmlExport.java:68)\n\n-- current code --\n\n  private static final int READ_WRITE_BUFFER \u003d 2048;\n  \n  private final void stringToOriginalDocument(String string) throws IOException\n  {\n    DocumentBuilderFactory documentBuilderFactory \u003d DocumentBuilderFactory.newInstance();\n    documentBuilderFactory.setNamespaceAware(true);\n    DocumentBuilder documentBuilder;\n    try\n    {\n      documentBuilder \u003d documentBuilderFactory.newDocumentBuilder();\n      Document document \u003d documentBuilder.parse(new InputSource(new StringReader(string)));\n      setOriginalDocument(document);\n    }\n    catch (ParserConfigurationException e)\n    {\n      throw new RuntimeException(e);\n    }\n    catch (SAXException e)\n    {\n      throw new RuntimeException(e);\n    }\n  }\n  \n  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException\n  {\n    StringBuffer sb \u003d new StringBuffer();\n    \n    byte[] readBuffer \u003d new byte[READ_WRITE_BUFFER];\n    while( in.read(readBuffer) !\u003d -1 )\n    {\n      sb.append(new String(readBuffer));\n    }\n    String string \u003d sb.toString();\n    \n    stringToOriginalDocument(string);\n  }\n\n  private final String documentToString()\n  {\n    StringWriter stringWriter \u003d new StringWriter();\n    TransformerFactory transformerFactory \u003d TransformerFactory.newInstance();\n    Transformer transformer;\n    try\n    {\n      transformer \u003d transformerFactory.newTransformer();\n      transformer.transform(new DOMSource(getOriginalDocument()), new StreamResult(stringWriter));\n    }\n    catch (TransformerConfigurationException e)\n    {\n      throw new RuntimeException(e);\n    }\n    catch (TransformerException e)\n    {\n      throw new RuntimeException(e);\n    }\n    \n    return stringWriter.getBuffer().toString();\n  }\n  \n  public void writeExternal(ObjectOutput out) throws IOException\n  {\n    String str \u003d documentToString();\n    \n    for(int offsetStart \u003d 0; offsetStart \u003c str.length(); offsetStart \u003d offsetStart + READ_WRITE_BUFFER)\n    {\n      int offsetEnd \u003d offsetStart + READ_WRITE_BUFFER;\n      \n      if(offsetEnd \u003c str.length())\n      {\n        offsetEnd \u003d offsetStart + READ_WRITE_BUFFER;\n      }\n      else\n      {\n        offsetEnd \u003d str.length();\n      }\n\n      out.writeUTF(str.substring(offsetStart, offsetEnd));\n    }\n  }\n\n",
    "Hmm, I\u0027m not sure why it didn\u0027t work in the way that I had previously tried it, but I seem to have got it working now. I tried using the cloneNode operation in a different context by using the wrapper class. \n\nInstead of simply returning an instance of the result of the cloneNode operation directly \n\ni.e. return xsdDocument.cloneNode(true);\n\nI used my ExternalizableDocument wrapper class which implements org.w3c.dom.Document (by simply calling to originalDocument.method(x,y)) and Externalizable.\n\n  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException\n  {\n    setOriginalDocument((Document)in.readObject());\n  }\n\n  public void writeExternal(ObjectOutput out) throws IOException\n  {\n    out.writeObject(getOriginalDocument().cloneNode(true));\n  }\n\nThis method seems ok for me, although as you mentioned before the JAXP implementation version does become a dependency which is not desirable. It does save me from hassles with utf and in/output streams though.",
    "So is this an acceptable workaround for you?  It might be possible for me to implement the listener to write replace itself with a dummy listener that does nothing...",
    "I think it is acceptable, not perfect, but it works. I do think that your idea of adding the dummy listeners is a good idea and I would like to see it done. I think the more out of the box functionality that you can provide the better as the solution that I have come to is, unfortunately, not obvious.\n\nThanks,\nStuart",
    "Created an attachment (id\u003d49296)\nDefine a dummy event handler that\u0027s the write replacement for the inner class handler.\n\nThis appears to work nicely.",
    "I\u0027ve committed the attached patch to CVS.",
    "Fixed in M200609071016."
  ],
  "commentCreationDates": [
    "2006-08-31T12:28:12+02:00",
    "2006-08-31T13:56:45+02:00",
    "2006-08-31T15:39:59+02:00",
    "2006-08-31T15:59:50+02:00",
    "2006-08-31T16:10:06+02:00",
    "2006-08-31T16:17:47+02:00",
    "2006-09-01T12:36:28+02:00",
    "2006-09-01T13:55:12+02:00",
    "2006-09-01T14:29:16+02:00",
    "2006-09-01T14:43:36+02:00",
    "2006-09-02T17:19:34+02:00",
    "2006-09-02T17:22:26+02:00",
    "2006-09-07T17:06:11+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.NotSerializableException",
      "message": "org.eclipse.xsd.impl.XSDSchemaImpl$5",
      "elements": [
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.defaultWriteFields",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeSerialData",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeArray",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.defaultWriteFields",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.defaultWriteObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.util.Vector.writeObject",
          "source": "Vector.java:1017"
        },
        {
          "method": "java.lang.LangAccessImpl.writeObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectStreamClass.invokeWriteObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeSerialData",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.util.Hashtable.writeObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.LangAccessImpl.writeObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectStreamClass.invokeWriteObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeSerialData",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.defaultWriteFields",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeSerialData",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeArray",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.defaultWriteFields",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeSerialData",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
          "source": "Unknown Source"
        },
        {
          "method": "java.io.ObjectOutputStream.writeObject0",
          "source": "Unknown Source"
        }
      ],
      "causedBy": {
        "exceptionType": "java.io.NotSerializableException",
        "message": "org.eclipse.xsd.impl.XSDSchemaImpl$5",
        "elements": [
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.defaultWriteFields",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeSerialData",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeArray",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.defaultWriteFields",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.defaultWriteObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.util.Vector.writeObject",
            "source": "Vector.java:1017"
          },
          {
            "method": "java.lang.LangAccessImpl.writeObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectStreamClass.invokeWriteObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeSerialData",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.util.Hashtable.writeObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.lang.LangAccessImpl.writeObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectStreamClass.invokeWriteObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeSerialData",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.defaultWriteFields",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeSerialData",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeArray",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.defaultWriteFields",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeSerialData",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeOrdinaryObject",
            "source": "Unknown Source"
          },
          {
            "method": "java.io.ObjectOutputStream.writeObject0",
            "source": "Unknown Source"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 0,
      "bugId": "155794",
      "date": "2006-08-31T12:28:12+02:00",
      "product": "MDT",
      "component": "Releng",
      "severity": "major"
    },
    {
      "exceptionType": "org.xml.sax.SAXParseException",
      "message": "Content is not allowed in prolog.",
      "elements": [
        {
          "method": "weblogic.apache.xerces.parsers.DOMParser.parse",
          "source": "Lorg/xml/sax/InputSource;"
        }
      ],
      "number": 1,
      "commentIndex": 6,
      "bugId": "155794",
      "date": "2006-09-01T12:36:28+02:00",
      "product": "MDT",
      "component": "Releng",
      "severity": "major"
    }
  ],
  "groupId": "155794",
  "bugId": "155794",
  "date": "2006-08-31T12:28:12+02:00",
  "product": "MDT",
  "component": "Releng",
  "severity": "major"
}