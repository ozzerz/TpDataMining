{
  "comments": [
    "Actually I have no idea what I did to triggered these error logs. But I make a \nreport anyway in case it can be fixed by looking into the logs.\n\n****************** first one ****************************\nError 2005-07-11 14:42:06.812 An error occurred while automatically activating \nbundle org.eclipse.cdt.managedbuilder.core (18).\norg.osgi.framework.BundleException: Exception in \norg.eclipse.cdt.managedbuilder.core.ManagedBuilderCorePlugin.start() of bundle \norg.eclipse.cdt.managedbuilder.core.\nat org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator\n(BundleContextImpl.java:1013)\nat org.eclipse.osgi.framework.internal.core.BundleContextImpl.start\n(BundleContextImpl.java:969)\nat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker\n(BundleHost.java:321)\nat org.eclipse.osgi.framework.internal.core.AbstractBundle.start\n(AbstractBundle.java:266)\nat org.eclipse.core.runtime.adaptor.EclipseClassLoader.findLocalClass\n(EclipseClassLoader.java:116)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass\n(BundleLoader.java:337)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass\n(BundleLoader.java:389)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass\n(BundleLoader.java:350)\nat org.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.loadClass\n(AbstractClassLoader.java:78)\nat java.lang.ClassLoader.loadClass(Unknown Source)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass\n(BundleLoader.java:275)\nat org.eclipse.osgi.framework.internal.core.BundleHost.loadClass\n(BundleHost.java:227)\nat org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass\n(AbstractBundle.java:1259)\nat \norg.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtensi\non(ConfigurationElement.java:152)\nat \norg.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtensi\non(ConfigurationElement.java:142)\nat \norg.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtensi\non(ConfigurationElement.java:129)\nat \norg.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableE\nxtension(ConfigurationElementHandle.java:48)\nat org.eclipse.cdt.internal.core.COwnerConfiguration.createOwner\n(COwnerConfiguration.java:52)\nat org.eclipse.cdt.internal.core.COwner.update(COwner.java:47)\nat org.eclipse.cdt.internal.core.CDescriptor.get(CDescriptor.java:216)\nat org.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexer\n(IndexManager.java:344)\nat \norg.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexerForProject\n(IndexManager.java:301)\nat org.eclipse.cdt.internal.core.browser.cache.IndexerJob2.\u003cinit\u003e\n(IndexerJob2.java:40)\nat org.eclipse.cdt.internal.core.browser.cache.IndexerTypesJob2.\u003cinit\u003e\n(IndexerTypesJob2.java:36)\nat org.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.update\n(TypeCacherJob.java:147)\nat \norg.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.runWithDelegatedProgr\ness(TypeCacherJob.java:103)\nat org.eclipse.cdt.internal.core.browser.cache.BasicJob.run(BasicJob.java:72)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)\nCaused by: java.lang.IllegalArgumentException: Attempted to beginRule: R/, \ndoes not match outer scope rule: \norg.eclipse.cdt.internal.core.browser.cache.TypeCache@1927275\nat org.eclipse.core.internal.runtime.Assert.isLegal(Assert.java:58)\nat org.eclipse.core.internal.jobs.ThreadJob.illegalPush(ThreadJob.java:117)\nat org.eclipse.core.internal.jobs.ThreadJob.push(ThreadJob.java:211)\nat org.eclipse.core.internal.jobs.ImplicitJobs.begin(ImplicitJobs.java:81)\nat org.eclipse.core.internal.jobs.JobManager.beginRule(JobManager.java:190)\nat org.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:96)\nat org.eclipse.core.internal.resources.Workspace.prepareOperation\n(Workspace.java:1674)\nat org.eclipse.core.internal.resources.SaveManager.addParticipant\n(SaveManager.java:111)\nat org.eclipse.core.internal.resources.Workspace.addSaveParticipant\n(Workspace.java:159)\nat org.eclipse.cdt.managedbuilder.core.ManagedBuilderCorePlugin.start\n(ManagedBuilderCorePlugin.java:86)\nat org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run\n(BundleContextImpl.java:994)\nat java.security.AccessController.doPrivileged(Native Method)\nat org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator\n(BundleContextImpl.java:988)\n... 27 more\nRoot exception:\njava.lang.IllegalArgumentException: Attempted to beginRule: R/, does not match \nouter scope rule: org.eclipse.cdt.internal.core.browser.cache.TypeCache@1927275\nat org.eclipse.core.internal.runtime.Assert.isLegal(Assert.java:58)\nat org.eclipse.core.internal.jobs.ThreadJob.illegalPush(ThreadJob.java:117)\nat org.eclipse.core.internal.jobs.ThreadJob.push(ThreadJob.java:211)\nat org.eclipse.core.internal.jobs.ImplicitJobs.begin(ImplicitJobs.java:81)\nat org.eclipse.core.internal.jobs.JobManager.beginRule(JobManager.java:190)\nat org.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:96)\nat org.eclipse.core.internal.resources.Workspace.prepareOperation\n(Workspace.java:1674)\nat org.eclipse.core.internal.resources.SaveManager.addParticipant\n(SaveManager.java:111)\nat org.eclipse.core.internal.resources.Workspace.addSaveParticipant\n(Workspace.java:159)\nat org.eclipse.cdt.managedbuilder.core.ManagedBuilderCorePlugin.start\n(ManagedBuilderCorePlugin.java:86)\nat org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run\n(BundleContextImpl.java:994)\nat java.security.AccessController.doPrivileged(Native Method)\nat org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator\n(BundleContextImpl.java:988)\nat org.eclipse.osgi.framework.internal.core.BundleContextImpl.start\n(BundleContextImpl.java:969)\nat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker\n(BundleHost.java:321)\nat org.eclipse.osgi.framework.internal.core.AbstractBundle.start\n(AbstractBundle.java:266)\nat org.eclipse.core.runtime.adaptor.EclipseClassLoader.findLocalClass\n(EclipseClassLoader.java:116)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass\n(BundleLoader.java:337)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass\n(BundleLoader.java:389)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass\n(BundleLoader.java:350)\nat org.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.loadClass\n(AbstractClassLoader.java:78)\nat java.lang.ClassLoader.loadClass(Unknown Source)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass\n(BundleLoader.java:275)\nat org.eclipse.osgi.framework.internal.core.BundleHost.loadClass\n(BundleHost.java:227)\nat org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass\n(AbstractBundle.java:1259)\nat \norg.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtensi\non(ConfigurationElement.java:152)\nat \norg.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtensi\non(ConfigurationElement.java:142)\nat \norg.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtensi\non(ConfigurationElement.java:129)\nat \norg.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableE\nxtension(ConfigurationElementHandle.java:48)\nat org.eclipse.cdt.internal.core.COwnerConfiguration.createOwner\n(COwnerConfiguration.java:52)\nat org.eclipse.cdt.internal.core.COwner.update(COwner.java:47)\nat org.eclipse.cdt.internal.core.CDescriptor.get(CDescriptor.java:216)\nat org.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexer\n(IndexManager.java:344)\nat \norg.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexerForProject\n(IndexManager.java:301)\nat org.eclipse.cdt.internal.core.browser.cache.IndexerJob2.\u003cinit\u003e\n(IndexerJob2.java:40)\nat org.eclipse.cdt.internal.core.browser.cache.IndexerTypesJob2.\u003cinit\u003e\n(IndexerTypesJob2.java:36)\nat org.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.update\n(TypeCacherJob.java:147)\nat \norg.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.runWithDelegatedProgr\ness(TypeCacherJob.java:103)\nat org.eclipse.cdt.internal.core.browser.cache.BasicJob.run(BasicJob.java:72)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)\n\n \n\n*************************** 2nd log **********************************\nError 2005-07-11 14:42:06.953 Problems occurred when invoking code from plug-\nin: \"org.eclipse.core.resources\".\njava.lang.NoClassDefFoundError: \norg/eclipse/cdt/managedbuilder/internal/core/ResourceChangeHandler$ResourceConf\nigurationChecker\nat \norg.eclipse.cdt.managedbuilder.internal.core.ResourceChangeHandler.resourceChan\nged(ResourceChangeHandler.java:304)\nat org.eclipse.core.internal.events.NotificationManager$2.run\n(NotificationManager.java:276)\nat org.eclipse.core.internal.runtime.InternalPlatform.run\n(InternalPlatform.java:1044)\nat org.eclipse.core.runtime.Platform.run(Platform.java:783)\nat org.eclipse.core.internal.events.NotificationManager.notify\n(NotificationManager.java:270)\nat org.eclipse.core.internal.events.NotificationManager.broadcastChanges\n(NotificationManager.java:144)\nat org.eclipse.core.internal.resources.Workspace.broadcastPostChange\n(Workspace.java:180)\nat org.eclipse.core.internal.resources.Workspace.endOperation\n(Workspace.java:914)\nat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1728)\nat org.eclipse.cdt.internal.core.CDescriptor.save(CDescriptor.java:320)\nat org.eclipse.cdt.internal.core.CDescriptorManager$CDescriptorUpdater.run\n(CDescriptorManager.java:74)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)",
    "Looks to me like the type cache is causing the managed builder to get loaded.\nThe managed builder then tries to register itself as a save participant. The\ntype cacher has a lock somewhere and the save participant registration fails due\nto the conflict. Good luck...\n\nJames was this on startup with a project in your workspace?",
    "Did you have the class browser open?\nI\u0027m not sure why the type cache is updating (apparently) immediately on startup.",
    "One potential root of this problem is that, to get the indexer for a project out\nof the CDescriptor, you have to load the \"owner\" which for this project was the\nmanaged builder. These concepts should be unrelated and actually points back at\na long time greivance I\u0027ve had against this owner concept. No one thing should\nbe owning projects, that\u0027s why we have multiple natures on a project.",
    "Guys, good hint! I was testing Class Browser and Class Wizard, which had to \nupdate type cache. ",
    "(In reply to comment #3)\n\u003e One potential root of this problem is that, to get the indexer for a project out\n\u003e of the CDescriptor, you have to load the \"owner\" which for this project was the\n\u003e managed builder. These concepts should be unrelated and actually points back at\n\u003e a long time greivance I\u0027ve had against this owner concept. No one thing should\n\u003e be owning projects, that\u0027s why we have multiple natures on a project.\n\nNature and cdtproject \"owners\" does not serve the same purpose.  Nature\nwas an Eclipse concept that used to tie builder to project ... nowadays\nnature of project goes beyond that.\n\nOwner maybe a misnommer, but it provides the possibility to \"restore defaults\"\nor bring back the file to a sane state.\n\nAnyway, it is something that I would like to ponder with the managed build\nfolks in a conf call at one point.",
    "Actually, I just ran accross the managed builder\u0027s use of ProjectScope to store\nper project preferences. Maybe the indexer settings should go here.",
    "Either way, the indexer is going to load the builder to get at the scanner info.\nThis will be a problem no matter what we do with the setting property. What bad\nhappens if we don\u0027t fix this.",
    "I propose to move adding resource change listener and save participant from the \nManagedBuilderCorePlugin.start() to the separate job that will be scheduled \nfrom the ManagedBuilderCorePlugin.start() with the root rule.\nDoes anyone have any objections or comments regarding this?\n",
    "Sounds like the right thing to do. +1.",
    "(In reply to comment #8)\n\u003e I propose to move adding resource change listener and save participant from \nthe \n\u003e ManagedBuilderCorePlugin.start() to the separate job that will be scheduled \n\u003e from the ManagedBuilderCorePlugin.start() with the root rule.\n\u003e Does anyone have any objections or comments regarding this?\n\nMy only concern with this is whether it is possible for anything to happen \nbefore the job runs that will mess things up.  For example, what if a project \nwas saved before the job ran?  Could this mess up the \"save participant\" logic?\n",
    "On a related topic, the MBS has run into a number of \"synchronization\" problems \nwith other threads kicking off when a CDT project is opened but before \nthe .cdtbuild file is read.  I\u0027m beginning to wonder if we need some mechanism \nto get the .cdtbuild file read before these other threads get going.  Maybe \nthere is already a mechanism we could use - I haven\u0027t looked into it.  \nCurrently, the .cdtbuild isn\u0027t read until someone needs information from it.  \nMost of the time, it seems to be one of these other threads that needs the info \nfirst (indexer, browser, builder, ...)  What do others think?\n",
    "(In reply to comment #11)\n\u003e On a related topic, the MBS has run into a number of \"synchronization\" problems \n\u003e with other threads kicking off when a CDT project is opened but before \n\u003e the .cdtbuild file is read.  I\u0027m beginning to wonder if we need some mechanism \n\u003e to get the .cdtbuild file read before these other threads get going.  Maybe \n\u003e there is already a mechanism we could use - I haven\u0027t looked into it.  \n\u003e Currently, the .cdtbuild isn\u0027t read until someone needs information from it.  \n\u003e Most of the time, it seems to be one of these other threads that needs the info \n\u003e first (indexer, browser, builder, ...)  What do others think?\n\u003e \n\n\nI think there is a certain number of things that \".cdtbuild\"\ndoes not provide if you compare it on the CDescriptor framework\nmanages the \".cdtproject\" or how Java manages the \".classpath\".\n\n- serialize, i.e. request are serialize meaning if you\n  do  a setXX() and followed by a getXX() the right information\n  is return even if the info was not flush to the file system yet.\n- sanity i.e. if the user delete the .cdtproject or the .classpath\n  the file will be recreated\n- round-trip, changing the .cdtproject will propagate the information\n  back to upper layer\n\nThat said the CDescriptor and the Classpath framework have there own\nflows, for example in the case of the CDescriptor:\n - not sure the API is clear\n - it was done/started in the Eclipse-2.1 days\n   and lot of things change, including the new Prefenrence/Project scope\n   of Elcipse-3.1\netc ..\n\nmy 0.002 cents ... canadian",
    "(In reply to comment #10)\n\u003e (In reply to comment #8)\n\u003e \u003e I propose to move adding resource change listener and save participant from \n\u003e the \n\u003e \u003e ManagedBuilderCorePlugin.start() to the separate job that will be scheduled \n\u003e \u003e from the ManagedBuilderCorePlugin.start() with the root rule.\n\u003e \u003e Does anyone have any objections or comments regarding this?\n\u003e My only concern with this is whether it is possible for anything to happen \n\u003e before the job runs that will mess things up.  For example, what if a project \n\u003e was saved before the job ran?  Could this mess up the \"save participant\" \nlogic?\n\nI dont think that it is obligatiry to call addSaveParticipant from the plugin \nstart method in order to obtain the correct resource delta.\nHere is the javadoc comment snippet for the addSaveParticipant:\n\n* Registers the given plug-in\u0027s workspace save participant, and returns an\n* object describing the workspace state at the time of the last save in\n* which the plug-in participated.\n\nI suppose that in any case the call to the \nISavedState.processResourceChangeEvents will notify the resource change \nlistener with the resource delta representing the difference of the current \nworkspace state and the state saved with the last save in which mbs core plug-\nin participated. So if the project was saved before the job ran, the resource \ndelta representing the project change will be included in the resulting \nrespurce delta passed to the resource change listener by \nISavedState.processResourceChangeEvents()\n",
    "(In reply to comment #13)\n\u003e (In reply to comment #10)\n\u003e \u003e (In reply to comment #8)\n\u003e \u003e \u003e I propose to move adding resource change listener and save participant \nfrom \n\u003e \u003e the \n\u003e \u003e \u003e ManagedBuilderCorePlugin.start() to the separate job that will be \nscheduled \n\u003e \u003e \u003e from the ManagedBuilderCorePlugin.start() with the root rule.\n\u003e \u003e \u003e Does anyone have any objections or comments regarding this?\n\u003e \u003e My only concern with this is whether it is possible for anything to happen \n\u003e \u003e before the job runs that will mess things up.  For example, what if a \nproject \n\u003e \u003e was saved before the job ran?  Could this mess up the \"save participant\" \n\u003e logic?\n\u003e I dont think that it is obligatiry to call addSaveParticipant from the plugin \n\u003e start method in order to obtain the correct resource delta.\n\u003e Here is the javadoc comment snippet for the addSaveParticipant:\n\u003e * Registers the given plug-in\u0027s workspace save participant, and returns an\n\u003e * object describing the workspace state at the time of the last save in\n\u003e * which the plug-in participated.\n\u003e I suppose that in any case the call to the \n\u003e ISavedState.processResourceChangeEvents will notify the resource change \n\u003e listener with the resource delta representing the difference of the current \n\u003e workspace state and the state saved with the last save in which mbs core plug-\n\u003e in participated. So if the project was saved before the job ran, the resource \n\u003e delta representing the project change will be included in the resulting \n\u003e respurce delta passed to the resource change listener by \n\u003e ISavedState.processResourceChangeEvents()\n\nI thought more deeply regarding this problem and I have to agree with Leo. It \nlooks like there might be some potential issues related to running the resource \nchange handling mechanism initialization in a separate thread, because the \ncalls to the ManagedBuildManager.getBuildInfo() might return an invalid build \ninformation before the job that performs save participant initialization is \ncompleted (e.g. suppose the build info had a resource configuration associated \nwith the /project/foo.cpp file and the foo.cpp file was renamed \nto /project/bar.cpp before the managed plug-in activation, so the calls like \nconfiguration.getResourceConfiguration(\"/project/bar.cpp\") will return null \nuntil save participant is not initialized). More than that, this might result \nin race conditions problems, since the build information could be changed \nconcurrently from different threads.\nSo may be the better solution is to try whether the save participant could be \ninitialized from the plugin.start thread (e.g. by running jobManager.beginRule\n(workspaceRoot)), and if so, perform save participant and resource change \nlistener initialization from the start method, and otherwise, schedule a job.\nWhat do others think?\n",
    "Hi Milhail,\n\n\u003e So may be the better solution is to try whether the save participant could be \ninitialized from the plugin.start thread (e.g. by running jobManager.beginRule\n(workspaceRoot)), and if so, perform save participant and resource change \nlistener initialization from the start method, and otherwise, schedule a job.\nWhat do others think?\n\nI agree that this is the best we can do for 3.0.  I think we need to consider \ngetting .cdtbuild files loaded earlier for 3.1.\n\nMikhail, please attach a proposed patch so that Chris R. and I can review it.  \nFor others, the MBS team has decided to review each change after RC2, since the \nfinal RC typically has a very short testing cycle.\n",
    "\u003eI thought more deeply regarding this problem and I have to agree with Leo. It \n\u003elooks like there might be some potential issues related to running the \n\u003eresource \n\u003echange handling mechanism initialization in a separate thread, because the \n\u003ecalls to the ManagedBuildManager.getBuildInfo() might return an invalid build \n\u003einformation before the job that performs save participant initialization is \ncompleted\n\n\nAs an FYI, we\u0027ve seen this type of issue as well at TI with our \"Active \nProject\" functionality, both when the project is created is loaded and when \nthe workspace is loaded with an existing project.  It\u0027s really hard to \nsynchronize properly right now with CDT project content in both cases.\n\nI think Mikhail\u0027s proposal is good for 3.0 and we shoud go ahead with that.  \nWe should revisit the idea of reviewing in depth and updating the way we \ncreate and load projects post-3.0",
    "Created an attachment (id\u003d24669)\nPatch proposed for the 3.0\n\nLeo, Chris,\n\nHere is a patch for review",
    "Mikhail,\n\nYour patch looks good to me.  I have one \"enhancement\" to be considered.  \nShould we raise the priority of the job that we create as high as possible in \norder to try to limit the period before the job runs?  The code would look like:\n\n\t\t\trcJob.setRule(root);\n\t\t\trcJob.setPriority(INTERACTIVE);\n\t\t\trcJob.schedule();\n\nDoes anyone know why this would not be a good idea?\n",
    "Feedback:\n\n- typo in \nManagedBuilderCorePlugin.resourceChangeHanlingInitializationJob, \"Handling\" is \nmissing its \"d\"\n\n-other than that, looks good\n\n- Raising the priority of the job doesn\u0027t truly solve the problem, but it will \nhelp in a couple of cases.  It can\u0027t hurt, so why not do it?",
    "Leo, Chris,\n\nI have incorporated your feedback and checked in the changes.\n\nSince the synchronization problem remains unresolved for the 3.0, should we re-\ntarget the bug for the future, or close it and open a new PR?\n\n",
    "I suggest retargeting to Future.\n",
    "ok, changing milestone to Future..",
    "(In reply to comment #8)\n\u003e I propose to move adding resource change listener and save participant from the \n\u003e ManagedBuilderCorePlugin.start() to the separate job that will be scheduled \n\u003e from the ManagedBuilderCorePlugin.start() with the root rule.\n\u003e Does anyone have any objections or comments regarding this?\n\u003e \n\nSorry Mikail for the late anwser, busy here 8-(\n\nI think, to make a job that will register and participate to the ISaveParticipant\nis the way to fix this(at least part of the problem).  Actually there is a PR\nOn this detailling the same case, please have a look at PR\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d59937\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d59852\n\nAnd the way the JDT folks solve this is to batch the registration\nand the listener in a Job 8-)\n\nNow, I think there are more to it here, I see in the log trace\nNoClassFoundException\nScheduling ruling exception\netc ...\n\nSo that the manager builder is not loaded may just be a side effect to it all.\nAlso It may not be related to the use of the CDescriptor framework(.cdtprject)\nat one point or another the managed builder would have been instanciated\nwheter via the builder(by changing a file), by scannerInfoProvider to\nget macro/include information etc ...",
    "(In reply to comment #18)\n\u003e Mikhail,\n\u003e \n\u003e Your patch looks good to me.  I have one \"enhancement\" to be considered.  \n\u003e Should we raise the priority of the job that we create as high as possible in \n\u003e order to try to limit the period before the job runs?  The code would look like:\n\u003e \n\u003e \t\t\trcJob.setRule(root);\n\u003e \t\t\trcJob.setPriority(INTERACTIVE);\n\u003e \t\t\trcJob.schedule();\n\u003e \n\u003e Does anyone know why this would not be a good idea?\n\u003e \n\nI would add:\n   rcJob.setSystem(true);\n\nYou probably do not want the User to hit cancel on this Job\nin the Progress View.\n\nI would advocate for no null, i.e. not setting anything\n\u003e \t\t\trcJob.setRule(root);\nroot is looking the workspace, is it necessary ?\n\n\nPriority, don\u0027t you want this in the background and not disturb\nthe user ?  the ISaveParticipants are called every so often by the\nplatform, if you make the priority high can a user/ui task be preempt ?\n\n",
    "(In reply to comment #24)\n\u003e I would add:\n\u003e    rcJob.setSystem(true);\n\u003e You probably do not want the User to hit cancel on this Job\n\u003e in the Progress View.\n\nThat sounds like a good idea.\n\n\u003e I would advocate for no null, i.e. not setting anything\n\u003e \u003e \t\t\trcJob.setRule(root);\n\u003e root is looking the workspace, is it necessary ?\n\nI think it is necessary because we will add the save participant and then \nprocess the delta which could result in changes to multiple projects.\n\n\u003e Priority, don\u0027t you want this in the background and not disturb\n\u003e the user ?  the ISaveParticipants are called every so often by the\n\u003e platform, if you make the priority high can a user/ui task be preempt ?\n\nThis is only done once at plugin startup, so I don\u0027t think your concern \napplies.  Let us know if I\u0027m wrong.\n\nThanks,\nLeo",
    "(In reply to comment #25)\n\u003e \u003e Priority, don\u0027t you want this in the background and not disturb\n\u003e \u003e the user ?  the ISaveParticipants are called every so often by the\n\u003e \u003e platform, if you make the priority high can a user/ui task be preempt ?\n\u003e \n\u003e This is only done once at plugin startup, so I don\u0027t think your concern \n\u003e applies.  Let us know if I\u0027m wrong.\n\u003e\n\n\nI think you have to consider this possibility, this is an excerpt from\nthe Documentation:\n\n  Workspace save participation\n  Workspace save processing is triggered when the workbench is shut down by the     \n  user and at other times periodically by the platform.  Plug-ins can\n  participate   in the workspace save process so that critical plug-in data is\n  saved to disk   whenever the rest of the workspace\u0027s persistent data is saved. \n\n  The workspace save process can also be used to track changes that occur  \n  between activations of your plug-in.\n\n\nAlthough, it may not be an issue for the managedbuilder\n\n",
    "If there are no objections, I will commit the change proposed by Alain (set the\njob to system) :\n    rcJob.setSystem(true);\n\nAs for the job scheduling rule, I agree with Leo, we need the root rule because\nwe process the resource delta returned by addSaveParticipant(), that might\nrequire making changes to the managed build settings of the several projects.\nAlso I suppose that it is better to perform addSaveParticipant(),\naddResourceChangeListener() and lastState.processResourceChangeEvents(); as a\nsingle atom operation because we don?t want some resource changes to occur after\nsave participant is registered and before resource delta is processed and\nresource change listener is registered.\n",
    "\u003eIf there are no objections, I will commit the change proposed by Alain (set the\n\u003ejob to system) :\n\u003e    rcJob.setSystem(true);\n\nI agree.\n\nLeo",
    "I have checked in the fix that sets job to system",
    "Future means you commit to fix it in the Future. Inboxes can\u0027t make committments. Moving to \u0027--\u0027."
  ],
  "commentCreationDates": [
    "2005-07-11T21:08:01+02:00",
    "2005-07-11T21:29:07+02:00",
    "2005-07-11T21:29:49+02:00",
    "2005-07-11T21:40:08+02:00",
    "2005-07-11T21:49:39+02:00",
    "2005-07-11T22:25:05+02:00",
    "2005-07-11T22:58:15+02:00",
    "2005-07-12T15:42:31+02:00",
    "2005-07-12T17:21:38+02:00",
    "2005-07-12T17:25:02+02:00",
    "2005-07-12T18:13:19+02:00",
    "2005-07-12T18:36:02+02:00",
    "2005-07-12T19:07:42+02:00",
    "2005-07-13T11:33:23+02:00",
    "2005-07-13T14:24:20+02:00",
    "2005-07-13T15:38:06+02:00",
    "2005-07-13T16:33:42+02:00",
    "2005-07-13T17:36:08+02:00",
    "2005-07-13T19:12:51+02:00",
    "2005-07-13T20:20:34+02:00",
    "2005-07-14T11:30:20+02:00",
    "2005-07-14T14:25:33+02:00",
    "2005-07-14T15:28:12+02:00",
    "2005-07-15T21:35:05+02:00",
    "2005-07-15T21:41:41+02:00",
    "2005-07-17T04:58:47+02:00",
    "2005-07-19T04:06:03+02:00",
    "2005-07-20T13:19:31+02:00",
    "2005-07-20T14:55:32+02:00",
    "2005-07-21T20:03:53+02:00",
    "2007-08-21T17:00:08+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.osgi.framework.BundleException",
      "message": "Exception in  org.eclipse.cdt.managedbuilder.core.ManagedBuilderCorePlugin.start() of bundle  org.eclipse.cdt.managedbuilder.core.",
      "elements": [
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
          "source": "BundleContextImpl.java:1013"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
          "source": "BundleContextImpl.java:969"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:321"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
          "source": "AbstractBundle.java:266"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseClassLoader.findLocalClass",
          "source": "EclipseClassLoader.java:116"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass",
          "source": "BundleLoader.java:337"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:389"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:350"
        },
        {
          "method": "org.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.loadClass",
          "source": "AbstractClassLoader.java:78"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass",
          "source": "BundleLoader.java:275"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.loadClass",
          "source": "BundleHost.java:227"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass",
          "source": "AbstractBundle.java:1259"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension",
          "source": "ConfigurationElement.java:152"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension",
          "source": "ConfigurationElement.java:142"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension",
          "source": "ConfigurationElement.java:129"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension",
          "source": "ConfigurationElementHandle.java:48"
        },
        {
          "method": "org.eclipse.cdt.internal.core.COwnerConfiguration.createOwner",
          "source": "COwnerConfiguration.java:52"
        },
        {
          "method": "org.eclipse.cdt.internal.core.COwner.update",
          "source": "COwner.java:47"
        },
        {
          "method": "org.eclipse.cdt.internal.core.CDescriptor.get",
          "source": "CDescriptor.java:216"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexer",
          "source": "IndexManager.java:344"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexerForProject",
          "source": "IndexManager.java:301"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.IndexerJob2.\u003cinit\u003e",
          "source": "IndexerJob2.java:40"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.IndexerTypesJob2.\u003cinit\u003e",
          "source": "IndexerTypesJob2.java:36"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.update",
          "source": "TypeCacherJob.java:147"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.runWithDelegatedProgress",
          "source": "TypeCacherJob.java:103"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.BasicJob.run",
          "source": "BasicJob.java:72"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.IllegalArgumentException",
        "message": "Attempted to beginRule: R/,  does not match outer scope rule:  org.eclipse.cdt.internal.core.browser.cache.TypeCache@1927275",
        "elements": [
          {
            "method": "org.eclipse.core.internal.runtime.Assert.isLegal",
            "source": "Assert.java:58"
          },
          {
            "method": "org.eclipse.core.internal.jobs.ThreadJob.illegalPush",
            "source": "ThreadJob.java:117"
          },
          {
            "method": "org.eclipse.core.internal.jobs.ThreadJob.push",
            "source": "ThreadJob.java:211"
          },
          {
            "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
            "source": "ImplicitJobs.java:81"
          },
          {
            "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
            "source": "JobManager.java:190"
          },
          {
            "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
            "source": "WorkManager.java:96"
          },
          {
            "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
            "source": "Workspace.java:1674"
          },
          {
            "method": "org.eclipse.core.internal.resources.SaveManager.addParticipant",
            "source": "SaveManager.java:111"
          },
          {
            "method": "org.eclipse.core.internal.resources.Workspace.addSaveParticipant",
            "source": "Workspace.java:159"
          },
          {
            "method": "org.eclipse.cdt.managedbuilder.core.ManagedBuilderCorePlugin.start",
            "source": "ManagedBuilderCorePlugin.java:86"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run",
            "source": "BundleContextImpl.java:994"
          },
          {
            "method": "java.security.AccessController.doPrivileged",
            "source": "Native Method"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
            "source": "BundleContextImpl.java:988"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 0,
      "bugId": "103372",
      "date": "2005-07-11T21:08:01+02:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Attempted to beginRule: R/, does not match  outer scope rule: org.eclipse.cdt.internal.core.browser.cache.TypeCache@1927275",
      "elements": [
        {
          "method": "org.eclipse.core.internal.runtime.Assert.isLegal",
          "source": "Assert.java:58"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.illegalPush",
          "source": "ThreadJob.java:117"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.push",
          "source": "ThreadJob.java:211"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:81"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:190"
        },
        {
          "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
          "source": "WorkManager.java:96"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
          "source": "Workspace.java:1674"
        },
        {
          "method": "org.eclipse.core.internal.resources.SaveManager.addParticipant",
          "source": "SaveManager.java:111"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.addSaveParticipant",
          "source": "Workspace.java:159"
        },
        {
          "method": "org.eclipse.cdt.managedbuilder.core.ManagedBuilderCorePlugin.start",
          "source": "ManagedBuilderCorePlugin.java:86"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run",
          "source": "BundleContextImpl.java:994"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
          "source": "BundleContextImpl.java:988"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
          "source": "BundleContextImpl.java:969"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:321"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
          "source": "AbstractBundle.java:266"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseClassLoader.findLocalClass",
          "source": "EclipseClassLoader.java:116"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass",
          "source": "BundleLoader.java:337"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:389"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:350"
        },
        {
          "method": "org.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.loadClass",
          "source": "AbstractClassLoader.java:78"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass",
          "source": "BundleLoader.java:275"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.loadClass",
          "source": "BundleHost.java:227"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass",
          "source": "AbstractBundle.java:1259"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension",
          "source": "ConfigurationElement.java:152"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension",
          "source": "ConfigurationElement.java:142"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension",
          "source": "ConfigurationElement.java:129"
        },
        {
          "method": "org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension",
          "source": "ConfigurationElementHandle.java:48"
        },
        {
          "method": "org.eclipse.cdt.internal.core.COwnerConfiguration.createOwner",
          "source": "COwnerConfiguration.java:52"
        },
        {
          "method": "org.eclipse.cdt.internal.core.COwner.update",
          "source": "COwner.java:47"
        },
        {
          "method": "org.eclipse.cdt.internal.core.CDescriptor.get",
          "source": "CDescriptor.java:216"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexer",
          "source": "IndexManager.java:344"
        },
        {
          "method": "org.eclipse.cdt.internal.core.search.indexing.IndexManager.getIndexerForProject",
          "source": "IndexManager.java:301"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.IndexerJob2.\u003cinit\u003e",
          "source": "IndexerJob2.java:40"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.IndexerTypesJob2.\u003cinit\u003e",
          "source": "IndexerTypesJob2.java:36"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.update",
          "source": "TypeCacherJob.java:147"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.TypeCacherJob.runWithDelegatedProgress",
          "source": "TypeCacherJob.java:103"
        },
        {
          "method": "org.eclipse.cdt.internal.core.browser.cache.BasicJob.run",
          "source": "BasicJob.java:72"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "103372",
      "date": "2005-07-11T21:08:01+02:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "org/eclipse/cdt/managedbuilder/internal/core/ResourceChangeHandler$ResourceConf igurationChecker",
      "elements": [
        {
          "method": "org.eclipse.cdt.managedbuilder.internal.core.ResourceChangeHandler.resourceChanged",
          "source": "ResourceChangeHandler.java:304"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager$2.run",
          "source": "NotificationManager.java:276"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1044"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:783"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager.notify",
          "source": "NotificationManager.java:270"
        },
        {
          "method": "org.eclipse.core.internal.events.NotificationManager.broadcastChanges",
          "source": "NotificationManager.java:144"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.broadcastPostChange",
          "source": "Workspace.java:180"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.endOperation",
          "source": "Workspace.java:914"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1728"
        },
        {
          "method": "org.eclipse.cdt.internal.core.CDescriptor.save",
          "source": "CDescriptor.java:320"
        },
        {
          "method": "org.eclipse.cdt.internal.core.CDescriptorManager$CDescriptorUpdater.run",
          "source": "CDescriptorManager.java:74"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 2,
      "commentIndex": 0,
      "bugId": "103372",
      "date": "2005-07-11T21:08:01+02:00",
      "product": "CDT",
      "component": "cdt-core",
      "severity": "normal"
    }
  ],
  "groupId": "103372",
  "bugId": "103372",
  "date": "2005-07-11T21:08:01+02:00",
  "product": "CDT",
  "component": "cdt-core",
  "severity": "normal"
}