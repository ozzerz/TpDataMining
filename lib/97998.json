{
  "comments": [
    "If Eclipse detects that a file is locked during a build, it writes something\nsimilar to the following to the log. This is a normal condition, not a bug in\nEclipse. As such, reporting it to the user in a problem marker is sufficient. It\nshould not be logged.\n\n!MESSAGE Could not delete: /org.eclipse.ui.ide/bin/org.\n!STACK 1\norg.eclipse.core.internal.resources.ResourceException: Problems encountered\nwhile deleting resources.\n\tat\norg.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:182)\n\tat\norg.eclipse.core.internal.resources.ResourceTree.standardDeleteFolder(ResourceTree.java:614)\n\tat\norg.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1553)\n\tat org.eclipse.core.internal.resources.Resource.delete(Resource.java:664)\n\tat\norg.eclipse.jdt.internal.core.builder.BatchImageBuilder.cleanOutputFolders(BatchImageBuilder.java:126)\n\tat\norg.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:36)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:216)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:148)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:593)\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1038)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:775)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:168)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:202)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:231)\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1038)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:775)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:234)\n\tat\norg.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:253)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:282)\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:139)\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:200)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:67)",
    "I agree that the error showing up in the log is somewhat unfortunate. At the moment being, though, the error message in the interface is far from being perfect as far as helping the user to fix his error in concerned (merely tells that a class file was not written - not even saying which), while the log neatly tells which file failed and why.\nI will then retitle this bug as \u0027[builder] improve the error handling in case the build encounters a locked file within the the output folder\u0027 and I would attempt to improve the error message before cleansing the log.",
    "Reconsidering...\n\nIn fact, the error log only tells us who fails to delete, not what could not be deleted. Will investigate doing better here.\n\nReproducing the case needs some talent under Windows/NTFS, because marking a directory as read only does not prevent anyone from deleting its subparts (nor from creating subparts in it either). One way of doing the trick is to create a read-only directory and to install a non-empty, non-readable subdirectory in it. The attempt to delete the first directory then fails.\nUnder Linux, simply create a non-empty, read-only directory.\n\n",
    "(Another way to reproduce the bug under Windows is to edit a text file in the to be deleted directory. This does not cope that well with our automated tests though.)",
    "(In reply to comment #2)\n...\n\u003e In fact, the error log only tells us who fails to delete, not what could not be\n\u003e deleted.\nWrong, the log tells us what could not be deleted, /org.eclipse.ui.ide/bin/org in this instance. Hence the log is precise enough.",
    "Taking a closer look at why we log this, it appears to me that we (JDT build) tend to log all filesystem related errors that have reasonable chances to happen because of conditions that are out of the control of Eclipse. While there exist means for the user to create the condition that generates the error above from within Eclipse (at least under Linux: proceed to the Resource perspective and change a non-empty output folder to read-only), those means are somewhat convoluted (need to get out of the Java perspective for the scenario I spell out above), and there is no easy quick-fix implemented. It is more probable that the problems arise from the use of external tools. I would contend that this apparent weakness comes from the fact that Eclipse does not take definite ownership of the underlying filesystem areas, and cannot control the exclusive access to it via itself.\nAll in all, we would then maintain the log.\n\nThere may remain an issue with the message itself.",
    "There is one case for which we get an imprecise message: doing a clean without an immediate build when the output folder is read-only. In cases where a build really happens (not clean only), the message includes the name of the precise resource that could not be deleted.\nThe behavior in case of a build is that the first file that cannot get deleted is reported (the choice is somewhat arbitrary). This has a drawback: the cause may be attached to another entry in the file system, aka the parent directory. But this has an advantage over only telling the user that something could not be deleted in the project, in that it gives a pointer to a precise file that got affected.\nAccordingly, I\u0027ll attempt to get the same behavior (message with file picked up randomly amongst files that could not be deleted) for the clean only scenario.",
    "We have two places where we call getLocalizedMessage upon a CoreException instead of an ImageBuilderInternalException. The latter takes care of fetching the first child in case of a multi-status, which the former does not do.\nExperimenting a patch that delegates the elaboration of the error message to a dedicated method instead of calling CoreException#getLocalizedMessage straight away.",
    "Created an attachment (id\u003d70327)\nExperimental fix plus test case\n\n",
    "Tests pass.\nKent, would you please tell me what you think, especially re. where we should put the exception formatting code?",
    "Created an attachment (id\u003d72726)\nWhat about this instead ?\n\nMy preference would be to put it in the JavaBuilder \u0026 remove getLocalizedMessage() from ImageBuilderInternalException.\n\nIts only sent from the JavaBuilder when we\u0027re building markers so it would make more sense to include it there.\n\nWe could replace the 3 references to Messages.build_inconsistentProject with a single call to a helper method that took the exception.",
    "Looks good. Will combine patches and release when tests complete.",
    "Created an attachment (id\u003d73518)\nFix + test case\n\nThis patch combines Kent\u0027s for the code with mine for the test, further tuned to pass ErrorsTests under Linux (the added test won\u0027t cope with Windozes as is - JDK 6 has APIs that would allow this, but we cannot use it). Other tests currently running.",
    "Released for 3.4 M1.",
    "Verified for 3.4M1 using build I20070802-0800."
  ],
  "commentCreationDates": [
    "2005-06-01T22:57:42+02:00",
    "2006-11-27T12:34:24+01:00",
    "2007-05-30T06:50:47+02:00",
    "2007-05-30T06:52:06+02:00",
    "2007-06-06T10:41:16+02:00",
    "2007-06-06T11:06:46+02:00",
    "2007-06-06T11:36:14+02:00",
    "2007-06-06T15:59:12+02:00",
    "2007-06-06T16:13:09+02:00",
    "2007-06-11T11:44:15+02:00",
    "2007-06-28T20:58:10+02:00",
    "2007-07-11T10:24:51+02:00",
    "2007-07-11T10:52:05+02:00",
    "2007-07-11T11:13:24+02:00",
    "2007-08-03T17:47:12+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Problems encountered while deleting resources.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.localstore.FileSystemResourceManager.delete",
          "source": "FileSystemResourceManager.java:182"
        },
        {
          "method": "org.eclipse.core.internal.resources.ResourceTree.standardDeleteFolder",
          "source": "ResourceTree.java:614"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.unprotectedDelete",
          "source": "Resource.java:1553"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.delete",
          "source": "Resource.java:664"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.BatchImageBuilder.cleanOutputFolders",
          "source": "BatchImageBuilder.java:126"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build",
          "source": "BatchImageBuilder.java:36"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll",
          "source": "JavaBuilder.java:216"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.build",
          "source": "JavaBuilder.java:148"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$2.run",
          "source": "BuildManager.java:593"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1038"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:775"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:168"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:202"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$1.run",
          "source": "BuildManager.java:231"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:1038"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:775"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:234"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuildLoop",
          "source": "BuildManager.java:253"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.build",
          "source": "BuildManager.java:282"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.doBuild",
          "source": "AutoBuildJob.java:139"
        },
        {
          "method": "org.eclipse.core.internal.events.AutoBuildJob.run",
          "source": "AutoBuildJob.java:200"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:67"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "97998",
      "date": "2005-06-01T22:57:42+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "trivial"
    }
  ],
  "groupId": "97998",
  "bugId": "97998",
  "date": "2005-06-01T22:57:42+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "trivial"
}