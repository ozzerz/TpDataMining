{
  "comments": [
    "We need to determine if this needs fixing for final 1.2 - I think it does ...\n\nHere is a simple pair of files:\nA.java:\n  package P1;\n  import P2.B;\n  public class A {\n    public A() {}\n  }\n\nB.java:\npackage P2;\npublic interface B {}\n\nCompile them:\najc -d bin A.java B.java\n(Don\u0027t use outjar, it affects the result).\n\nNow here is an aspect, Aspect.java:\nimport P1.*;\naspect Aspect {\n  private A.new(B b) {\n  }\n}\n\nCompile that via binary weaving:\n\najc -inpath bin Aspect.java\n\nand you get:\n\njava.lang.NullPointerException\n        at \norg.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor\n(SourceTypeBinding.java:837)\n        at \norg.aspectj.ajdt.internal.compiler.ast.InterTypeConstructorDeclaration.build\n(InterTypeConstructorDeclaration.\njava:190)\n        at \norg.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerCl\nause(AspectDeclaration.java:76\n3)\n        at \norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAnd\nPerClause(AjLookupEnvironment.\njava:214)\n        at \norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindi\nngs(AjLookupEnvironment.java:95)\n        at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile \nCompiler.java:324)\n        at org.eclipse.jdt.internal.compiler.Compiler.compile\n(Compiler.java:341)\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:600)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:160)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:94)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)\n        at org.aspectj.tools.ajc.Main.run(Main.java:280)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:217)\n        at org.aspectj.tools.ajc.Main.main(Main.java:79)\n\nThere is actually a problem in the code, the type \u0027B\u0027 referred to in the ctor \nITD is not imported into the Aspect.  Add a line \u0027import P2.*;\u0027 to Aspect.java \nand the binary weave will go through fine.  So what is going wrong?\n\n\u003d\u003d\u003d the fix is as follows:\n\nIn InterTypeConstructorDeclaration, we have this piece of code:\n\npublic EclipseTypeMunger build(ClassScope classScope) {\n  EclipseFactory world \u003d EclipseFactory.fromScopeLookupEnvironment(classScope);\n  binding \u003d classScope.referenceContext.binding.resolveTypesFor(binding);\n  resolveOnType(classScope);\n  if (ignoreFurtherInvestigation) return null;\n  ...\n\nThe resolveTypesFor() call is being made *even though* \nignoreFurtherInvestigation is false.  If we compare this with the code in the \nother flavor of method ITD (InterTypeMethodDeclaration):\n\npublic EclipseTypeMunger build(ClassScope classScope) {\n  EclipseFactory world \u003d EclipseFactory.fromScopeLookupEnvironment(classScope);\n  resolveOnType(classScope);\n  if (ignoreFurtherInvestigation) return null;\t\t\n  binding \u003d classScope.referenceContext.binding.resolveTypesFor(binding);\n  ...\n\nWe can see in this second case we check the ignoreFurtherXXX flag before \nattempting to resolve types.  If we fix the build() for the Constructor \nvariant of build() to look the same:\n\npublic EclipseTypeMunger build(ClassScope classScope) {\n  EclipseFactory world \u003d EclipseFactory.fromScopeLookupEnvironment(classScope);\n  resolveOnType(classScope);\n  if (ignoreFurtherInvestigation) return null;\t\t\n  binding \u003d classScope.referenceContext.binding.resolveTypesFor(binding);\n  ...\n\nThen the test above no longer NPEs and we get the message:\n\nC:\\mmo\\Aspect.java:4 error B cannot be resolved (or is not a valid type) for \nthe argument b of the method A_new2b\nprivate A.new(B b) {\n          \n1 error, 1 warning\n\n\nThis change passes all the tests in junitModules.xml\n\t\t\n\u003d\u003d\u003d",
    "Whilst integrating the testcase I found an even smaller version:\n\naspect CtorITD {\n  private A.new(B b) {}\n}\n\nJust compile that on its own.  NPEs in the same way !\n\nI\u0027ve added the testcase and the fix."
  ],
  "commentCreationDates": [
    "2004-04-21T16:53:17+02:00",
    "2004-04-23T15:27:58+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor",
          "source": "SourceTypeBinding.java:837"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.ast.InterTypeConstructorDeclaration.build",
          "source": "InterTypeConstructorDeclaration. java:190"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause",
          "source": "AspectDeclaration.java:76 3"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause",
          "source": "AjLookupEnvironment. java:214"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings",
          "source": "AjLookupEnvironment.java:95"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "59440",
      "date": "2004-04-21T16:53:17+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "59440",
  "bugId": "59440",
  "date": "2004-04-21T16:53:17+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}