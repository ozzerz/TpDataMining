{
  "comments": [
    "Add an API to query the status of Caps Lock, Num Lock and Scroll Lock without first recieving a keyEvent\n\nI am testing some eclipse plugins, and would like to query the platform\nto see if the Num Lock key is enabled.\n\nis there an api for this, already? \n\nBelow is a newsgroup posting that suggests there is not:\nhttp://dev.eclipse.org/newslists/news.eclipse.platform.swt/msg13059.html\n\ndo you know of a way to determine the enabled state by some other means?\n\nthanks,\nscott",
    "This is possible with AWT: http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Toolkit.html#getLockingKeyState(int)\n\nProbably doesn\u0027t help as workaround, but might be useful for development.",
    "it didn\u0027t seem to work, while running the test from within eclipse. \ni might be calling it incorrectly, though. \n\nthanks, for the suggestion. i would think that should work.\n\nbut i tracked down my issue. somebody commented out half of some code, \nwhich ended up swithing the mapping of VK_DECIMAL only for the up key\nevent. \n\ncommented-out code \u003d bad\ncommented     code \u003d good \n\n\u003ccode\u003e\n   \tSwingUtilities.invokeLater( new Runnable() {\n\n\t\t\tpublic void run() {\t\tSystem.err.println(\"isNumLockEnabled\u003d\"+java.awt.Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_NUM_LOCK));\n\t\t\t}\n\n    \t});\n\u003c/code\u003e\n\n\u003coutput\u003e\nException in thread \"AWT-EventQueue-0\" java.lang.UnsupportedOperationException: Toolkit.getLockingKeyState\n\tat java.awt.Toolkit.getLockingKeyState(Toolkit.java:1303)\n\tat abbot.swt.eclipse.tests.tester.SwtKeyEventTest$1.run(SwtKeyEventTest.java:58)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:461)\n\tat java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:242)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:163)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:157)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:149)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:110)\n\u003c/output\u003e\n\n\n    /**\n     * Returns whether the given locking key on the keyboard is currently in\n     * its \"on\" state.\n     * Valid key codes are\n     * {@link java.awt.event.KeyEvent#VK_CAPS_LOCK VK_CAPS_LOCK},\n     * {@link java.awt.event.KeyEvent#VK_NUM_LOCK VK_NUM_LOCK},\n     * {@link java.awt.event.KeyEvent#VK_SCROLL_LOCK VK_SCROLL_LOCK}, and\n     * {@link java.awt.event.KeyEvent#VK_KANA_LOCK VK_KANA_LOCK}.\n     *\n     * @exception java.lang.IllegalArgumentException if \u003ccode\u003ekeyCode\u003c/code\u003e\n     * is not one of the valid key codes\n     * @exception java.lang.UnsupportedOperationException if the host system doesn\u0027t\n     * allow getting the state of this key programmatically, or if the keyboard\n     * doesn\u0027t have this key\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see       java.awt.GraphicsEnvironment#isHeadless\n     * @since 1.3\n     */\n    public boolean getLockingKeyState(int keyCode)\n        throws UnsupportedOperationException {\n        if (! (keyCode \u003d\u003d KeyEvent.VK_CAPS_LOCK || keyCode \u003d\u003d KeyEvent.VK_NUM_LOCK ||\n               keyCode \u003d\u003d KeyEvent.VK_SCROLL_LOCK || keyCode \u003d\u003d KeyEvent.VK_KANA_LOCK)) {\n            throw new IllegalArgumentException(\"invalid key for Toolkit.getLockingKeyState\");\n        }\n        throw new UnsupportedOperationException(\"Toolkit.getLockingKeyState\");\n    }\n"
  ],
  "commentCreationDates": [
    "2006-03-17T19:19:02+01:00",
    "2006-03-17T19:39:05+01:00",
    "2006-03-17T22:00:39+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.UnsupportedOperationException",
      "message": "Toolkit.getLockingKeyState",
      "elements": [
        {
          "method": "java.awt.Toolkit.getLockingKeyState",
          "source": "Toolkit.java:1303"
        },
        {
          "method": "abbot.swt.eclipse.tests.tester.SwtKeyEventTest$1.run",
          "source": "SwtKeyEventTest.java:58"
        },
        {
          "method": "java.awt.event.InvocationEvent.dispatch",
          "source": "InvocationEvent.java:209"
        },
        {
          "method": "java.awt.EventQueue.dispatchEvent",
          "source": "EventQueue.java:461"
        },
        {
          "method": "java.awt.EventDispatchThread.pumpOneEventForHierarchy",
          "source": "EventDispatchThread.java:242"
        },
        {
          "method": "java.awt.EventDispatchThread.pumpEventsForHierarchy",
          "source": "EventDispatchThread.java:163"
        },
        {
          "method": "java.awt.EventDispatchThread.pumpEvents",
          "source": "EventDispatchThread.java:157"
        },
        {
          "method": "java.awt.EventDispatchThread.pumpEvents",
          "source": "EventDispatchThread.java:149"
        },
        {
          "method": "java.awt.EventDispatchThread.run",
          "source": "EventDispatchThread.java:110"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "132381",
      "date": "2006-03-17T22:00:39+01:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "enhancement"
    }
  ],
  "groupId": "132381",
  "bugId": "132381",
  "date": "2006-03-17T19:19:02+01:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "enhancement"
}