{
  "comments": [
    "** Note:\n\nThe problem described below occurs on Z/OS using the CORONA code base.\nHowever, the code is the same in WTP, and the problem is believed to\nstill occur.  The following is presented as a probable bug in the WTP\ncode base.\n\nIn the CORONA code base, the impacted class is:\n    com.ibm.wtp.internal.emf.xml.util.DOMUtilities\nIn WTP, the impacted class is:\n    org.eclipse.wst.common.internal.emf.utilities.DOMUtilities;\n\n** Problem Statement:\n\nOn Z/OS, calls to com.ibm.wtp.emf.xml.TranslatorResourceImpl.doSave\n(TranslatorResourceImpl.java:157) fail with a SAXParseException:\n\n    About to call commonarchive API EARFile.saveNoReopen()...\n    SaveFailureException caught!\n    com.ibm.etools.j2ee.commonarchivecore.exception.Sav\n    eFailureException: WEB-INF/web.xml\n    stack trace is:\n    com.ibm.etools.j2ee.commonarchivecore.exception.SaveFailureException:\n    WEB-INF/web.xml\n    !Stack_trace_of_nested_exce!\n    Wrapped exception\n    org.xml.sax.SAXParseException: Content is not allowed in prolog.\n        at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)\n        at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)\n        at javax.xml.parsers.DocumentBuilder.parse(Unknown Source)\n        at\ncom.ibm.wtp.internal.emf.xml.util.DOMUtilities.createNewDocument(DOMUtilities.java:497)\n        at\ncom.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.createDocument(EMF2DOMRenderer.java:144)\n        at\ncom.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.createDOMTree(EMF2DOMRenderer.java:116)\n        at\ncom.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.createDOMTreeIfNecessary(EMF2DOMRenderer.java:133)\n        at\n    com.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.doSave(EMF2DOMRenderer.java:83)\n        at\ncom.ibm.wtp.emf.xml.TranslatorResourceImpl.doSave(TranslatorResourceImpl.java:157)\n        at\n    org.eclipse.emf.ecore.resource.impl.ResourceImpl.save(ResourceImpl.java:802)\n\n** Analysis:\n\nThe exception occurs on Z/OS, apparently because of code page/character\nencoding problems.  That is, \u0027createHeaderInputStream\u0027 creates a print\nwriter which uses the system default encoding, but \u0027writeHeader\u0027 marks the\nnew body of the in-memory generated document as using UTF-8.  On Z/OS, the\nsystem default encoding [System.getProperty(\"file.encoding\")] returns \"Cp1047\".\n\n** Recommended Code Change:\n\nThe code change below -- to create the print writer using an output stream\nwriter, and forcing the character encoding to \"UTF-8\" -- resolved the problem.\nSee below for additional notes, as there problem is also fixed by changing\nthe encoding which is set in the header text.\n\n    com.ibm.wtp.internal.emf.xml.util.DOMUtilities\n    org.eclipse.wst.common.internal.emf.utilities.DOMUtilities\n\nInitial code:\n\n    private static InputStream createHeaderInputStream(String doctype, String publicId, String systemId, boolean includeDummy) {\n        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n        PrintWriter writer \u003d new PrintWriter(outputStream);\n        writeHeader(writer, doctype, publicId, systemId);\n        if (includeDummy)\n            addDummyEntity(writer);\n        writer.flush();\n        writer.close();\n        return new java.io.ByteArrayInputStream(outputStream.toByteArray());\n    }\n\nUpdated code:\n\n    private static InputStream createHeaderInputStream(String doctype, String publicId, String systemId, boolean includeDummy) {\n        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n\n        // The prior code (which is still in the catch block), uses\n        // the system default encoding [System.getProperty(\"file.encoding\")];\n        // on Z/OS this is Cp1047.  The combination of \"UTF-8\" in the header\n        // and \"Cp1047\" in the writer create an unusable input stream.\n        \n        PrintWriter writer; \n        \n        try {\n            OutputStreamWriter outputWriter \u003d new OutputStreamWriter(outputStream, \"UTF-8\");\n            // throws UnsupportedEncodingException\n            \n            writer \u003d new PrintWriter(outputWriter);\n\n        } catch ( UnsupportedEncodingException e ) {\n            writer \u003d new PrintWriter(outputStream); // Should never get here (earlier code)\n        }\n        \n        writeHeader(writer, doctype, publicId, systemId);\n        if (includeDummy)\n            addDummyEntity(writer);\n        writer.flush();\n        writer.close();\n\n        byte[] bytes \u003d outputStream.toByteArray();\n        return new ByteArrayInputStream(bytes);\n    }\n\nAlternatively, or in addition, \u0027writeHeader\u0027 could be modified to accept a\nencoding, which would be suitably passed in from \u0027createHeaderInputStream\u0027:\n\n    protected static void writeHeader(PrintWriter writer, String doctype, String publicId, String systemId, String encoding) {\n        writer.write(\"\u003c?xml version\u003d\\\"\"); //$NON-NLS-1$\n        writer.write(\"1.0\"); //$NON-NLS-1$\n        writer.write(\"\\\" encoding\u003d\\\"\"); //$NON-NLS-1$\n        writer.write(encoding); //$NON-NLS-1$\n        writer.write(\"\\\"?\u003e\"); //$NON-NLS-1$\n        writer.println();\n    ...",
    "Created an attachment (id\u003d51271)\npatch\n\nThis is the same fix suggested above by Thomas.  Ran all JUnit sucessfully with the patch applied.",
    "Approve.",
    "approve",
    "code checked in both 1.5.3 and 2.0 streams.",
    "verified fix in code.",
    "verified by Hari",
    "closing"
  ],
  "commentCreationDates": [
    "2006-09-26T19:44:47+02:00",
    "2006-10-02T19:33:02+02:00",
    "2006-11-06T18:41:29+01:00",
    "2006-11-09T14:55:47+01:00",
    "2006-11-10T20:29:11+01:00",
    "2007-02-07T17:56:00+01:00",
    "2007-02-07T18:06:18+01:00",
    "2007-02-07T18:06:33+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.xml.sax.SAXParseException",
      "message": "Content is not allowed in prolog.",
      "elements": [
        {
          "method": "org.apache.xerces.parsers.DOMParser.parse",
          "source": "Unknown Source"
        },
        {
          "method": "org.apache.xerces.jaxp.DocumentBuilderImpl.parse",
          "source": "Unknown Source"
        },
        {
          "method": "javax.xml.parsers.DocumentBuilder.parse",
          "source": "Unknown Source"
        },
        {
          "method": "com.ibm.wtp.internal.emf.xml.util.DOMUtilities.createNewDocument",
          "source": "DOMUtilities.java:497"
        },
        {
          "method": "com.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.createDocument",
          "source": "EMF2DOMRenderer.java:144"
        },
        {
          "method": "com.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.createDOMTree",
          "source": "EMF2DOMRenderer.java:116"
        },
        {
          "method": "com.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.createDOMTreeIfNecessary",
          "source": "EMF2DOMRenderer.java:133"
        },
        {
          "method": "com.ibm.wtp.internal.emf.xml.EMF2DOMRenderer.doSave",
          "source": "EMF2DOMRenderer.java:83"
        },
        {
          "method": "com.ibm.wtp.emf.xml.TranslatorResourceImpl.doSave",
          "source": "TranslatorResourceImpl.java:157"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.save",
          "source": "ResourceImpl.java:802"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "158813",
      "date": "2006-09-26T19:44:47+02:00",
      "product": "Web Tools",
      "component": "wst.common",
      "severity": "normal"
    }
  ],
  "groupId": "158813",
  "bugId": "158813",
  "date": "2006-09-26T19:44:47+02:00",
  "product": "Web Tools",
  "component": "wst.common",
  "severity": "normal"
}