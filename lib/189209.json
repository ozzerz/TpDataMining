{
  "comments": [
    "I am trying to close or resolve issues in a repository that has customized workflow. When I submit an error dialog that show a JIRA system error is displayed:\n\n\nSystem Error\n\nA system error has occurred.\n\nIf this problem persists - please notify your JIRA administrator of this problem.\n\nIf you are an administrator, please try submitting this problem via the Support Request Page\n\nElse, please create a support issue on our support system at http://support.atlassian.com with the following information:\n\n   1. a description of your problem\n   2. cut \u0026 paste the error and system information found below\n   3. attach the application server log file ( /spare/jira/atlassian-jira.log ) \n\nCause:\njava.lang.IllegalArgumentException: No workflow action with id \u00275\u0027 available for issue CORE-204\n\nStack Trace: [hide]\n\njava.lang.IllegalArgumentException: No workflow action with id \u00275\u0027 available for issue CORE-204\n\tat com.atlassian.jira.workflow.WorkflowTransitionUtilImpl.getActionDescriptor(WorkflowTransitionUtilImpl.java:135)\n\tat com.atlassian.jira.workflow.WorkflowTransitionUtilImpl.getFieldScreenRenderer(WorkflowTransitionUtilImpl.java:212)\n\tat com.atlassian.jira.web.action.issue.CommentAssignIssue.getFieldScreenRenderer(CommentAssignIssue.java:98)\n\tat com.atlassian.jira.web.action.issue.CommentAssignIssue.doValidation(CommentAssignIssue.java:152)\n[...]",
    "I have created a project with a customized workflow on the test server. Resolving issues displays the following message:\n\nWorkflow Action Invalid\n\nIt seems that you have tried to perform a workflow operation (Resolve Issue) that is not valid for the current state of this issue (Open). The likely cause is that somebody has changed the issue recently, please look at the issue history for details.\n\nPlease refresh the issue and try again.",
    "Steffen, so what do you think we should do about this? We can probably call IssueService.getAvailableActions() [1], but I am not sure where should we do that, because available actions are shown at the time editor is created and we don\u0027t have lazy way of retrieving them.\n\n[1] http://tinyurl.com/2557lq",
    "For Trac I get the actions when downloading task data. This is not going to map well to the API changes where we retrieve all task information when synchronizing queries though.\n\nWe should also invoke JiraSoapService.getFieldsForEdit() and only make these editable. ",
    " (In reply to comment #3)\n\u003e For Trac I get the actions when downloading task data. This is not going to map\n\u003e well to the API changes where we retrieve all task information when\n\u003e synchronizing queries though.\n\nRight. At this point retrieving those things when downloading task data is not an option, because it will require too many roundtrips to the server. So, I am thinking to do it when editor will be opening, but it should be somehow background/lazy task, so user can browse trough issue while that data is loaded and can be cached locally (I am not yet not sure where exactly to store this stuff)",
    "That needs to go into the task data. It\u0027d be great if we could get this lazily when the editor is opened but how we can gracefully update the editor when the information becomes available?",
    "(In reply to comment #5)\n\u003e but how we can gracefully update the editor when the\n\u003e information becomes available?\n\nThat is why I added Mik and Rob to CC list. Technically there should be no issues, but it will require some refactoring in the task editor.\n\nAnother thing is how to know when that data is already downloaded or when it need to be refreshed (i.e. both editable fields and available actions can be changed after issue is updated/status changed). Though they could be also changed if project configuration modified on the server side. So, I wonder if we need to trigger that refresh when manual refresh is called from the editor (but probably not when issues refreshed from the task list view).",
    "Created an attachment (id\u003d68849)\nwork in progress\n\nRob, Steffen, can you please review this patch? It mostly affecting jira stuff, but I had to make small changes in AbstractRepositoryTaskEditor to make it easier to deal with for this use case.\n\nI\u0027ve used hidden marker in taskData to indicate that taskData need to be updated from repository. Then I run background job to fetch stuff from repository and only after that job completed, sections Attributes and Actions will be populated. The work is not done yet and I need those canges to be applied to AbstractRepositoryTaskEditor before I can finish this. But I can already see some custrom attributes for jira tasks.",
    "Created an attachment (id\u003d68850)\nmylar/context/zip\n\n",
    "I applied the patch as not to hold up progress, but did not review.  Bootsrapping onto it now.\n\nRob: please take a look at the changes to AbstractRepositoryTaskEditor in the patch.",
    "Just noticed that the patch caused compile errors, had to back it out.  \n\nSeverity and Description\tPath\tResource\tLocation\tCreation Time\tId\nThe return type is incompatible with AbstractRepositoryTaskEditor.createAttributeLayout(Composite)\tcom.tasktop.email.ui/src/com/tasktop/email/ui/editor\tAbstractNewEmailTaskEditor.java\tline 140\t1180257028175\t866048\n",
    "(In reply to comment #10)\nHuh?!  \n\ncom/tasktop/email/ui/editor/AbstractNewEmailTaskEditor  \n\nThat one I definitely won\u0027t be able to fix for you.\n",
    "My mistake, not seeing straight after a 24 hour flight.  Patch applied.",
    "Thanks Mik. Though we may need to mention this in the porting guide, in case someone overwritten that protected method like in that editor of yours...",
    "Yes, please add that note to the porting guide, I meant to mention that before committing bug forgot.  All changes to public signatures of non-internal classes should be adding to the porting guide by the contributor of the change.",
    "I like the approach of displaying the editor right away and updating it as more information becomes available. This could be useful for Trac as well and we there might be some potential for generalization in the API.\n\nI don\u0027t think it is right to get information from the repository and update the attributes in JiraTaskEditor.createFormContent(). This should all be part of ITaskDataHandler.getTaskData() and done by the background synchronization that is triggered when the editor is opened. Rob, we need to update the QueryHitCollector API to accept TaskData, so we can have \"light-weight\" synchronization for queries and do the full synchronization when needed.",
    "(In reply to comment #15)\n\u003e I don\u0027t think it is right to get information from the repository and update the\n\u003e attributes in JiraTaskEditor.createFormContent(). This should all be part of\n\u003e ITaskDataHandler.getTaskData() and done by the background synchronization that\n\u003e is triggered when the editor is opened.\n\nTo make that work we\u0027ll need significant fixes on the editor, so it won\u0027t require  user to push \"refresh\" button to pickup those changes after synchronization.\n",
    "Created an attachment (id\u003d68896)\nAbstractRepositoryTaskEditor cleanup\n\nMik, Rob, can you please apply this patch. I think it does make sense to create layout outside of the attributes section method.",
    "Steffen, I\u0027ve committed quite massive change for Jira task editor. Mainly for the Attributes section, so it can show custom fields, and can render field types (dropdown, multiselect, textfield and textarea). Can you please try it if you\u0027ll have chance. This stuff took me quite while to straighten, so I haven\u0027t got to the editor actions yet.\n\nThere is an issue I am not sure how to address with current task data API. I need to store some field after fetching missing data from server, but I can\u0027t see any API for that. See job inside createFormContent() method. Maybe like you said we can move that stuff into the task data handler, but it probably require some refactoring in the sync manager, that isn\u0027t quite clear to me right now. Rob, Mik, any thoughts?",
    "I agree with Steffen, this shouldn\u0027t be done in the editor but rather as part of the task synchronization. Updates to task data (upon save) should result in notification which in turn will lead to the editor refreshing. Is there no way we can revert back to the option of getting the necessary data when it is normally retrieved (synch) albeit at the expense of more trips?",
    " (In reply to comment #19)\n\u003e I agree with Steffen, this shouldn\u0027t be done in the editor but rather as part of\n\u003e the task synchronization. \n\nMy current problem with that approach is that I need to check if missing data already fetched or not before opening editor. If data is missing I need to kick special type of synchronization. That separate synchronization should be also kicked when main task data changed (i.e. issues status got changed).\n\n\u003e Updates to task data (upon save) should result in\n\u003e notification which in turn will lead to the editor refreshing. \n\nIn my understanding editor will ask user to push \"refresh\" button and I don\u0027t think it makes sense, because he\u0027ll have to push it for every new editor. Can I make editor refresh without that request?\n\n\u003e Is there no way we can revert back to the option of getting the necessary data when it is\n\u003e normally retrieved (synch) albeit at the expense of more trips?\n\nI am not sure what you mean. Currently it only done in JIRA editor and it pospone rendering of Attributes and Actions sections until those special attributes are fetched from the server. So user still can read summary and task description.\n\nAdding that fetch into a regular sync will slow down synchronization a lot, because we\u0027ll have to to N+1 trips to jira server instead of one (or N*3 if we are doing separate round trips now).",
    " (In reply to comment #20)\n\u003e \u003e Updates to task data (upon save) should result in\n\u003e \u003e notification which in turn will lead to the editor refreshing.\n\u003e \n\u003e In my understanding editor will ask user to push \"refresh\" button and I don\u0027t\n\u003e think it makes sense, because he\u0027ll have to push it for every new editor. Can I\n\u003e make editor refresh without that request?\n\nPerhaps we could add an additional parameter to check so that this manual refresh can be bypassed. Ie. if(updateInProgress) refresh editor now vs. prompt user\n\n\u003e \n\u003e \u003e Is there no way we can revert back to the option of getting the necessary data\n\u003e when it is\n\u003e \u003e normally retrieved (synch) albeit at the expense of more trips?\n\u003e \n\u003e I am not sure what you mean. Currently it only done in JIRA editor and it\n\u003e pospone rendering of Attributes and Actions sections until those special\n\u003e attributes are fetched from the server. So user still can read summary and task\n\u003e description.\n\u003e \n\u003e Adding that fetch into a regular sync will slow down synchronization a lot,\n\u003e because we\u0027ll have to to N+1 trips to jira server instead of one (or N*3 if we\n\u003e are doing separate round trips now).\nOkay so performance is an blocker to doing this up front.  Have you tired saving via RepositorySynchronizationManger.saveIncoming() and calling refresh on the editor?\n\n",
    "(In reply to comment #21)\n\u003e Perhaps we could add an additional parameter to check so that this manual\n\u003e refresh can be bypassed. Ie. if(updateInProgress) refresh editor now vs. prompt\n\u003e user\n\nAdditional parameter where?\n\n\u003e Okay so performance is an blocker to doing this up front.  Have you tired saving\n\u003e via RepositorySynchronizationManger.saveIncoming() and calling refresh on the\n\u003e editor?\n\nI\u0027ve tried TasksUiPlugin.getSynchronizationManager().saveOutgoing(repositoryTask, changedAttributes)\nsaveIncoming() will probably create incoming marker and will mark attributes as changed. I need to save metadata field I\u0027ve added into those attributes, but I don\u0027t need to flip incoming marker for those fields that only had matadata changed.\n\n",
    " (In reply to comment #22)\n\u003e I\u0027ve tried\n\u003e TasksUiPlugin.getSynchronizationManager().saveOutgoing(repositoryTask,\n\u003e changedAttributes)\n\u003e saveIncoming() will probably create incoming marker and will mark attributes as\n\u003e changed. I need to save metadata field I\u0027ve added into those attributes, but I\n\u003e don\u0027t need to flip incoming marker for those fields that only had matadata\n\u003e changed.\nI think perhaps what you want is TasksUiPlugin.getDefault().getTaskDataManager().setNewTaskData(taskHandle, taskDateYou\u0027veUpdated).\nFollowed by a manual call to refresh the editor.",
    "(In reply to comment #23)\n\u003e I think perhaps what you want is\n\u003e TasksUiPlugin.getDefault().getTaskDataManager().setNewTaskData(taskHandle,\n\u003e taskDateYou\u0027veUpdated).\n\u003e Followed by a manual call to refresh the editor.\n\nThat may work, except the warning:\n\nDiscouraged access: The method setNewTaskData(String, RepositoryTaskData) from the type TaskDataManager is not accessible due to restriction on required project org.eclipse.mylar.tasks.core",
    "Yes, this is currently internal. If getting and updating becomes the norm for TaskData outside of the standard synchronization jobs perhaps this api should be public.",
    "As an experiment I moved those additional calls to jira right into JiraTaskDataHandler.getTaskData() method.\n\nBTW, Steffen, we currently have to do an extra call to convert id to key. When synchronizing queries the following code always fall to server.getIssueById(taskId), which will call server.getIssueByKey() internally. Maybe we should populate Issue instance from the object returned by soap call?\n\nint id \u003d Integer.parseInt(taskId);\nITask task \u003d TasksUiPlugin.getTaskListManager().getTaskList().getTask(repositoryUrl, \"\" + id);\nif (task instanceof JiraTask) {\n  JiraTask jiraTask \u003d (JiraTask) task;\n  return server.getIssueByKey(jiraTask.getTaskKey());\n} else {\n  return server.getIssueById(taskId);\n}\n",
    "When the query hit to task refactoring is complete the lookup should succeed in most cases but if we can assure backwards compatibility I am all for migrating to the SOAP API  (just don\u0027t delete \"old code\").",
    "(In reply to comment #27)\n\u003e When the query hit to task refactoring is complete the lookup should succeed in\n\u003e most cases but if we can assure backwards compatibility I am all for migrating\n\u003e to the SOAP API  (just don\u0027t delete \"old code\").\n\nI am not suggesting to completely migrate to SOAP, because RSS feed allows to fetch multiple issues in one server round trip (I hope you\u0027ll made that refactoring to load taskdata). But for this case we have issue data from SAOP and can populate issue without re-requesting same issue trough RSS. \n\nThis is screwed mainly because we have used JIRA ids instead of keys everywhere.",
    "Good point (although there is a call in JiraSoapService to retrieve multiple issues with a single call). I also suspect that RSS is faster than SOAP. I remember Jason mentioning that XML-RPC calls are significantly faster than SOAP. \n\nBTW, currently we do a login and logout for each web session. Do you think it could speed things up to re-authenticate only when a session times out?",
    "Eugene: fyi, as part of the AbstractQueryHit removal I\u0027ve added RepositorySychronizationManager.saveOffline(AbstractRepositoryTask task, RepositoryTaskData taskData). Still not committed yet as I have a large number of unit tests to refactor.",
    "Steffen, I\u0027ve committed quite massive refactoring for JIRA\u0027s data handler and editor. It should now work for any custom workflow actions (except those that require mandatory custom attributes). Please take a look when you\u0027ll have chance.",
    "Created an attachment (id\u003d69663)\nmylar/context/zip\n\n",
    " (In reply to comment #28)\n ...\n \u003e This is screwed mainly because we have used JIRA ids instead of keys everywhere.\n\nI realize that it still may be awkward for the JIRA connector, but this policy is important because IDs are a robust identifier for JIRA issues and keys are not (a key can change over the lifetime of an issue).  Several parts of the Mylar framework rely on the repository+ID being a GUID for a task.",
    "(In reply to comment #33)\n\u003e I realize that it still may be awkward for the JIRA connector, but this policy\n\u003e is important because IDs are a robust identifier for JIRA issues and keys are\n\u003e not (a key can change over the lifetime of an issue).  Several parts of the\n\u003e Mylar framework rely on the repository+ID being a GUID for a task.\n\nMik, it is not just awkward, it is practically insane and provide absolutely no benefits, especially because most of the JIRA remoting API is manipulating with keys and not issue ids. \n\nBesides, key can only change if issue moved into some different project (relatively rare occasion), so in most common setups (unless you have some crazy query that shows all issues from all projects), that changed issue will immediately jump into the archive category.",
    "I get an HTML error from JIRA when I try to close an issue (see below). \n\nNote that advanceIssueWorkflow() does not use the correct URL. It\u0027s a simple fix (I can\u0027t commit this since I have other outgoing changes):\n \n PostMethod method \u003d new PostMethod(baseUrl + \"/secure/CommentAssignIssue.jspa\");\n\n\nSystem Error\n\nA system error has occurred.\n\nIf this problem persists - please notify your JIRA administrator of this problem.\n\nIf you are an administrator, please try submitting this problem via the Support Request Page\n\nElse, please create a support issue on our support system at http://support.atlassian.com with the following information:\n\n   1. a description of your problem\n   2. cut \u0026 paste the error and system information found below\n   3. attach the application server log file ( /spare/jira/atlassian-jira.log ) \n\nCause:\njava.lang.NumberFormatException: For input string: \"\"\n\nStack Trace: [hide]\n\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\n\tat java.lang.Long.parseLong(Long.java:424)\n\tat java.lang.Long.(Long.java:671)\n\tat com.atlassian.jira.issue.fields.AbstractVersionsSystemField.getRelevantParams(AbstractVersionsSystemField.java:115)\n\tat com.atlassian.jira.issue.fields.AbstractOrderableField.populateFromParams(AbstractOrderableField.java:132)\n\tat com.atlassian.jira.web.action.issue.CommentAssignIssue.doValidation(CommentAssignIssue.java:162)\n\tat webwork.action.ActionSupport.validate(ActionSupport.java:373)\n[...]",
    "(In reply to comment #35)\n\u003e I get an HTML error from JIRA when I try to close an issue (see below). \n\u003e \n\u003e Note that advanceIssueWorkflow() does not use the correct URL. It\u0027s a simple\n\u003e fix (I can\u0027t commit this since I have other outgoing changes):\n\u003e  PostMethod method \u003d new PostMethod(baseUrl +\n\u003e \"/secure/CommentAssignIssue.jspa\");\n\nDoes this fixes the issue or there is something else?",
    "No, this does not fix the JIRA exception. I tried uncommenting the code in advanceIssueWorkflow() that submits the fix version but it did not help.",
    "I now get the same error when i try to resolve issues in projects with standard workflows. You can reproduce this using the repository on mylar.eclipse.org .",
    "Steffen, I committed some cleanup for submission code. It now correctly sets required fields and seem to work for me on mylar.eclipse.org",
    "Created an attachment (id\u003d70246)\nScreenshot of operations\n\nI have successfully tested it with standard and customized workflows. This is really cool. Thanks for resolving this Eugene!",
    "Thanks Steffen. Though there are couple things that we may need to look at before closing it.\n\nFirst of all list of available operations don\u0027t available to guests and I just catching exception there. So, still need to test how comment posting is working on projects at the codehaus and spring jira trackers.\n\nAnother thing is that current RepositoryOperation instance only allow one additional property (like assignee and resolution on your screenshot). But for jira we can actually have more then one property (i.e. resolve operation also allows to reassign and specify custom fields, say for time tracking). I\u0027ve been suggesting if for some time to move this UI complexity into submission wizard. So, \"leave as...\" would be simple (and maybe also reassign), and for everything else user would need to use submission wizard that would provide all those options.",
    "\u003e First of all list of available operations don\u0027t available to guests and I just\n\u003e catching exception there. So, still need to test how comment posting is working\n\u003e on projects at the codehaus and spring jira trackers.\n\nI should work when you use JiraClient.addCommentToIssue() instead of JiraClient.updateIssue().\n\n",
    "Opened bugs for remaining issues:\n\nbug 203166: Fix retrieving list of available operations with guest account\nbug 203168: add submission wizard to task editor\n\nMarking this bug as resolved."
  ],
  "commentCreationDates": [
    "2007-05-25T21:48:30+02:00",
    "2007-05-25T23:21:58+02:00",
    "2007-05-25T23:40:46+02:00",
    "2007-05-25T23:54:38+02:00",
    "2007-05-26T00:03:21+02:00",
    "2007-05-26T00:16:31+02:00",
    "2007-05-26T00:26:02+02:00",
    "2007-05-26T09:07:50+02:00",
    "2007-05-26T09:08:03+02:00",
    "2007-05-27T11:11:31+02:00",
    "2007-05-27T11:13:10+02:00",
    "2007-05-27T11:27:43+02:00",
    "2007-05-27T12:34:21+02:00",
    "2007-05-27T12:40:10+02:00",
    "2007-05-27T13:57:38+02:00",
    "2007-05-28T05:51:30+02:00",
    "2007-05-28T06:27:58+02:00",
    "2007-05-28T08:50:35+02:00",
    "2007-05-28T09:10:37+02:00",
    "2007-05-30T00:53:05+02:00",
    "2007-05-30T01:17:44+02:00",
    "2007-05-30T01:46:03+02:00",
    "2007-05-30T02:00:52+02:00",
    "2007-05-30T02:20:10+02:00",
    "2007-05-30T02:24:11+02:00",
    "2007-05-30T02:31:47+02:00",
    "2007-05-30T07:52:47+02:00",
    "2007-05-30T17:17:12+02:00",
    "2007-05-30T17:21:28+02:00",
    "2007-05-30T17:33:34+02:00",
    "2007-05-31T20:06:46+02:00",
    "2007-06-01T09:37:29+02:00",
    "2007-06-01T09:37:32+02:00",
    "2007-06-01T17:37:59+02:00",
    "2007-06-01T18:36:17+02:00",
    "2007-06-04T22:45:05+02:00",
    "2007-06-04T22:53:31+02:00",
    "2007-06-04T23:30:19+02:00",
    "2007-06-05T17:31:31+02:00",
    "2007-06-05T20:41:40+02:00",
    "2007-06-06T00:25:20+02:00",
    "2007-06-06T01:23:51+02:00",
    "2007-06-06T01:44:06+02:00",
    "2007-09-13T00:41:17+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "No workflow action with id \u00275\u0027 available for issue CORE-204",
      "elements": [
        {
          "method": "com.atlassian.jira.workflow.WorkflowTransitionUtilImpl.getActionDescriptor",
          "source": "WorkflowTransitionUtilImpl.java:135"
        },
        {
          "method": "com.atlassian.jira.workflow.WorkflowTransitionUtilImpl.getFieldScreenRenderer",
          "source": "WorkflowTransitionUtilImpl.java:212"
        },
        {
          "method": "com.atlassian.jira.web.action.issue.CommentAssignIssue.getFieldScreenRenderer",
          "source": "CommentAssignIssue.java:98"
        },
        {
          "method": "com.atlassian.jira.web.action.issue.CommentAssignIssue.doValidation",
          "source": "CommentAssignIssue.java:152"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "189209",
      "date": "2007-05-25T21:48:30+02:00",
      "product": "Mylyn",
      "component": "Jira",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.NumberFormatException",
      "message": "For input string: \"\"",
      "elements": [
        {
          "method": "java.lang.NumberFormatException.forInputString",
          "source": "NumberFormatException.java:48"
        },
        {
          "method": "java.lang.Long.parseLong",
          "source": "Long.java:424"
        }
      ],
      "number": 1,
      "commentIndex": 35,
      "bugId": "189209",
      "date": "2007-06-04T22:45:05+02:00",
      "product": "Mylyn",
      "component": "Jira",
      "severity": "normal"
    }
  ],
  "groupId": "189209",
  "bugId": "189209",
  "date": "2007-05-25T21:48:30+02:00",
  "product": "Mylyn",
  "component": "Jira",
  "severity": "normal"
}