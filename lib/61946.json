{
  "comments": [
    "20040512\n\nfor the following code get the var binding of BUNDLE_NAME and do\n\u0027getContantValue\u0027\n\npublic class Accessor {\n\tprivate static final String BUNDLE_NAME \u003d \"test.test\";//$NON-NLS-1$\n\tpublic static String getString(String s) {\n\t\treturn \"\";\n\t}\n}\n\njava.lang.NullPointerException\n\tat java.lang.Throwable.\u003cinit\u003e(Throwable.java)\n\tat java.lang.Throwable.\u003cinit\u003e(Throwable.java)\n\tat java.lang.NullPointerException.\u003cinit\u003e(NullPointerException.java:60)\n\tat\norg.eclipse.jdt.core.dom.VariableBinding.getConstantValue(VariableBinding.java:196)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.nls.NLSInfo.getResourceBundle(NLSInfo.java:95)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.nls.NLSInfo.getAccessorClassInfo(NLSInfo.java:73)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.nls.NLSHolder.create(NLSHolder.java:48)\n\tat\norg.eclipse.jdt.ui.tests.nls.NLSSourceModifierTest.testFromTranslatedToNotTranslated(NLSSourceModifierTest.java:202)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:41)\n\tat java.lang.reflect.Method.invoke(Method.java:386)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:19)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.extensions.TestSetup.run(TestSetup.java:23)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:422)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:306)\n\tat\norg.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:30)\n\tat\norg.eclipse.pde.internal.junit.runtime.UITestApplication$1.run(UITestApplication.java:90)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:106)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:2702)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2394)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1353)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1324)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:243)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:141)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:90)\n\tat\norg.eclipse.pde.internal.junit.runtime.UITestApplication.run(UITestApplication.java:33)\n\tat\norg.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:298)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:249)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:126)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:41)\n\tat java.lang.reflect.Method.invoke(Method.java:386)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:269)\n\tat org.eclipse.core.launcher.Main.run(Main.java:722)\n\tat org.eclipse.core.launcher.Main.main(Main.java:706)",
    "I will investigate.",
    "I cannot reproduce.",
    "The right test case is:\npackage test0554;\n\npublic class A {\n\tprivate static final String BUNDLE_NAME \u003d \"test.test\";//$NON-NLS-1$\n\tpublic static String getString(String s) {\n\t\treturn \"\";\n\t}\n}\n\npackage test0554;\n\nimport test0554.A;\n\npublic class B {\n\tpublic static String foo() {\n\t\treturn A.getString(\"xx\");\n\t}\n}\n\nIn B, get the variable binding for BUNDLE_NAME through the type binding of A\nusing the getDeclaringFields() method.\nIn this case, the constant for the field BUNDLE_NAME is not initialized and it\nis null.\nI will add a null check.\n\nPhilippe, do we have a way to initialize this field binding?",
    "The test cases I added need to update in case we can get the constant value.",
    "In case B is like this:\npublic class B {\n\tpublic static String foo() {\n\t\treturn A.BUNDLE_NAME;\n\t}\n}\n\nAnd BUNDLE_NAME is changed to be public then you can get the constant value\nusing the same call. So it is inconsistent when the constant is available and\nwhen it is not.",
    "This is a kind of lazy initialization for us. In the case in comment 3, the\nfield is not directly referenced in B. Therefore its constant is not\ninitialized. The workaround is to get the declaration for A and get the field\nbinding from there. Then it will be resolved and the constant won\u0027t be null anymore.\n\nJim, this kind of behavior should be clarified in the specs. If we want to be\nable to get such field at any time, then we have to keep the scopes around and\nthis would increase the footprint.\n\nOnce the specs are updated, this bug can be closed. I already added the null check.",
    "The notion of bindings that the AST API provides are supposed to be accurate \nat the time the compilation unit was anaylzed. Whether a variable binding has \na constant value or not should be independent of whether the field is public \nor private. So I believe this should be considered a bug in the \nimplementation. Olivier, you mention that the implementation currently does \nthis lazily and that fixing it would require keeping around scope objects. \nBindings, by their nature, already have a significant footprint (as the spec \npoints out). How much bigger would these scope objects make it? Can you see \nany alternatives, such as computing the value of constant fields eagerly?",
    "I don\u0027t know exactly how much bigger it would be, but keeping the whole scope\nand name environment around might be expensive.\nI don\u0027t see any other way to fix this, because right now we cannot create scopes\non demand and once they are removed, no further resolution can be performed.",
    "Reconsider post 3.0.",
    "reopening",
    "Reconsidering for 3.2. Will release changes to move the reference lazy\nresolution directly into the binding. So as long as the scope is alive, the\nconstant may be computed lazily.\n\nFixed.\nTuned affected tests: \n  ASTConverterTest2#test0554\n  ASTConverterTestAST3_2#test0554",
    "*** Bug 117018 has been marked as a duplicate of this bug. ***",
    "Verified for 3.2 M4 using build I20051212-0010",
    "Created an attachment (id\u003d32755)\nPatch against R3_1_maintenance branch\n\njust in case we want to backport the fix to the R3_1_maintenance branch ...",
    "Created an attachment (id\u003d32762)\nUpdated tests\n\nagainst R3_1_maintenance branch"
  ],
  "commentCreationDates": [
    "2004-05-12T18:45:51+02:00",
    "2004-05-12T19:03:07+02:00",
    "2004-05-12T19:12:40+02:00",
    "2004-05-12T20:08:37+02:00",
    "2004-05-12T20:09:44+02:00",
    "2004-05-12T20:39:58+02:00",
    "2004-05-13T17:06:20+02:00",
    "2004-05-13T22:22:27+02:00",
    "2004-05-14T21:11:54+02:00",
    "2004-05-19T21:38:49+02:00",
    "2005-11-18T16:41:23+01:00",
    "2005-11-18T16:44:34+01:00",
    "2005-11-18T16:48:24+01:00",
    "2005-12-12T14:54:50+01:00",
    "2006-01-10T11:51:49+01:00",
    "2006-01-10T15:35:15+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java"
        },
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java"
        },
        {
          "method": "java.lang.NullPointerException.\u003cinit\u003e",
          "source": "NullPointerException.java:60"
        },
        {
          "method": "org.eclipse.jdt.core.dom.VariableBinding.getConstantValue",
          "source": "VariableBinding.java:196"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.nls.NLSInfo.getResourceBundle",
          "source": "NLSInfo.java:95"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.nls.NLSInfo.getAccessorClassInfo",
          "source": "NLSInfo.java:73"
        },
        {
          "method": "org.eclipse.jdt.internal.corext.refactoring.nls.NLSHolder.create",
          "source": "NLSHolder.java:48"
        },
        {
          "method": "org.eclipse.jdt.ui.tests.nls.NLSSourceModifierTest.testFromTranslatedToNotTranslated",
          "source": "NLSSourceModifierTest.java:202"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:79"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:41"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:386"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.extensions.TestDecorator.basicRun",
          "source": "TestDecorator.java:22"
        },
        {
          "method": "junit.extensions.TestSetup$1.protect",
          "source": "TestSetup.java:19"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.extensions.TestSetup.run",
          "source": "TestSetup.java:23"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:422"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:306"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:30"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run",
          "source": "UITestApplication.java:90"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:106"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:2702"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2394"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1353"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1324"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:243"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:141"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:90"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication.run",
          "source": "UITestApplication.java:33"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:298"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:249"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:126"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:79"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:41"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:386"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:269"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:722"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:706"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "61946",
      "date": "2004-05-12T18:45:51+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "61946",
  "bugId": "61946",
  "date": "2004-05-12T18:45:51+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}