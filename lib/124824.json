{
  "comments": [
    "When I compile my pertypewithin aspect into a jar and then build another project with it on the classpath \u0026 aspectpath, I find that the woven project has references to private around advice methods in it. Here\u0027s the stack trace I\u0027m seeing:\n\njava.lang.IllegalAccessError: tried to access method glassbox.util.logging.api.L\nogManagement.ajc$around$glassbox_util_logging_api_LogManagement$9$ff3f21f8_aroun\ndBody17$advice(Lglassbox/util/logging/api/LogManagement;Ljava/lang/String;Lorg/a\nspectj/runtime/internal/AroundClosure;Lorg/aspectj/lang/JoinPoint;Lglassbox/util\n/logging/api/LogManagement$HandleUninitialized;Lorg/aspectj/runtime/internal/Aro\nundClosure;Lorg/aspectj/lang/JoinPoint;)Ljava/lang/Object; from class glassbox.c\nonfig.GlassboxInitializationImpl\n        at glassbox.config.GlassboxInitializationImpl.logInfo_aroundBody1$advice\n(GlassboxInitializationImpl.java:101)\n        at glassbox.config.GlassboxInitializationImpl.startUp(GlassboxInitializa\ntionImpl.java:39)\n        at glassbox.config.GlassboxInitializer.ajc$before$glassbox_config_Glassb\noxInitializer$1$e7e1d0be_aroundBody2(GlassboxInitializer.aj:28)\n\nI tested this out using the standard 1.5.0 build AspectJ compiler \u0026 ant task inside ant. I\u0027m attaching the separately compiled output from the 2 offending classes, which shows the issue with javap -c -private:\nLogManagement.class (from the library aspect)\nGlassboxInitializationImpl.class (from the jar being build separately with classpath \u0026 aspectpath entries)\n\nI can sometimes see the problem with 2 simple projects in AJDT intermittently, but it seems to be unstable, as if some other random factor in the build changes the result (so it\u0027s been quite hard to create a simpler version of the problem!).",
    "Created an attachment (id\u003d33448)\nWoven file that references private method\n\n",
    "Created an attachment (id\u003d33449)\nThe pertypewithin aspect\n\nThe basic idiom of this aspect is the following:\n\npublic aspect LogManagement pertypewithin(LogOwner+) {\n    declare parents: ... implements LogOwner;\n\n    after() returning: staticinitialization(*) {\n        managedClass \u003d thisJoinPointStaticPart.getSignature().getDeclaringType();\n        initialize();\n    }\n    \n    private void initialize() {\n        if (factory !\u003d null) {\n            logger \u003d getLogger(managedClass);            \n        ...\n    }\n\n    public void LogOwner.logInfo(String message) {\n    }\n    void around(String message) : call(void LogOwner.logInfo(String)) \u0026\u0026 args(message) {\n        logger.info(message);\n    }\n    \n}\n",
    "From javap -private -c -l GlassboxInitializationImpl\n...\n   35:  invokestatic    #171; //Method glassbox/util/logging/api/LogManagement.a\njc$around$glassbox_util_logging_api_LogManagement$9$ff3f21f8_aroundBody17$advice\n:(Lglassbox/util/logging/api/LogManagement;Ljava/lang/String;Lorg/aspectj/runtim\ne/internal/AroundClosure;Lorg/aspectj/lang/JoinPoint;Lglassbox/util/logging/api/\nLogManagement$HandleUninitialized;Lorg/aspectj/runtime/internal/AroundClosure;Lo\nrg/aspectj/lang/JoinPoint;)Ljava/lang/Object;\n\nFrom javap -private -c -l LogManagement\n...\nprivate static final java.lang.Object ajc$around$glassbox_util_logging_api_LogMa\nnagement$9$ff3f21f8_aroundBody17$advice(glassbox.util.logging.api.LogManagement,\n java.lang.String, org.aspectj.runtime.internal.AroundClosure, org.aspectj.lang.\nJoinPoint, glassbox.util.logging.api.LogManagement$HandleUninitialized, org.aspe\nctj.runtime.internal.AroundClosure, org.aspectj.lang.JoinPoint);\n  Code:\n   0:   aload   5\n   2:   astore  8\n   4:   aload_0\n   5:   aload_1\n   6:   aload_2\n   7:   aload_3\n   8:   invokestatic    #453; //Method ajc$around$glassbox_util_logging_api_LogM\nanagement$9$ff3f21f8_aroundBody16:(Lglassbox/util/logging/api/LogManagement;Ljav\na/lang/String;Lorg/aspectj/runtime/internal/AroundClosure;Lorg/aspectj/lang/Join\nPoint;)V\n   11:  aconst_null\n   12:  areturn\n   13:  pop\n...\n",
    "If I build with -Xnoline end-to-end, this error goes away (thanks for suggesting I test that Andy!). The code that is being generated in this case is so ugly/inefficient that I\u0027m looking more closely to see if there\u0027s a reasonable alternative to the approach I\u0027ve been using to access the field from the pertypewithin aspect... which hopefully will also work around this issue.",
    "Ron ... I get an error very similar to this if I mess about with the typemap strategy for looking after types.  Was this bug seen on 1.5.0 final - on HEAD or on a patched HEAD?  ",
    "Each one. I was able to reproduce it with 1.5.0 final.",
    "take a look if time...",
    "interestingly this is exactly the problem I saw when mixing annotation style and code style aspects in a hierarchy.  I suspect this might be fixed now because of what I did for the other bug.",
    "suspected fixed after making those other changes."
  ],
  "commentCreationDates": [
    "2006-01-23T07:20:04+01:00",
    "2006-01-23T07:26:32+01:00",
    "2006-01-23T07:32:05+01:00",
    "2006-01-23T07:33:04+01:00",
    "2006-01-23T19:29:00+01:00",
    "2006-01-24T09:02:14+01:00",
    "2006-01-24T14:38:08+01:00",
    "2007-10-23T18:05:57+02:00",
    "2007-11-08T17:16:39+01:00",
    "2007-12-05T14:45:46+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalAccessError",
      "message": "tried to access method glassbox.util.logging.api.L ogManagement.ajc$around$glassbox_util_logging_api_LogManagement$9$ff3f21f8_aroun dBody17$advice(Lglassbox/util/logging/api/LogManagement;Ljava/lang/String;Lorg/a spectj/runtime/internal/AroundClosure;Lorg/aspectj/lang/JoinPoint;Lglassbox/util /logging/api/LogManagement$HandleUninitialized;Lorg/aspectj/runtime/internal/Aro undClosure;Lorg/aspectj/lang/JoinPoint;)Ljava/lang/Object; from class glassbox.c onfig.GlassboxInitializationImpl",
      "elements": [
        {
          "method": "glassbox.config.GlassboxInitializationImpl.logInfo_aroundBody1$advice",
          "source": "GlassboxInitializationImpl.java:101"
        },
        {
          "method": "glassbox.config.GlassboxInitializationImpl.startUp",
          "source": "GlassboxInitializa tionImpl.java:39"
        },
        {
          "method": "glassbox.config.GlassboxInitializer.ajc$before$glassbox_config_GlassboxInitializer$1$e7e1d0be_aroundBody2",
          "source": "GlassboxInitializer.aj:28"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "124824",
      "date": "2006-01-23T07:20:04+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "124824",
  "bugId": "124824",
  "date": "2006-01-23T07:20:04+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}