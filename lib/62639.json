{
  "comments": [
    "Using Eclipse \nVersion: 3.0.0\nBuild id: 200405140800\nwith 3.0.0.cheetah05\n\nThis:\npublic class V extends java.util.Vector{\n\tpublic synchronized boolean addAll(java.util.Collection arg0) {\n\t\treturn super.addAll(arg0);\n\t}\n}\ngives this error:\nSeverity\tDescription\tResource\tIn Folder\tLocation\tCreation Time\n2\tInternal compiler error\njava.lang.Error: Undefined base type: .\n\tat\norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getTypeFromSignature(LookupEnvironment.java:648)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getTypeFromTypeSignature(LookupEnvironment.java:689)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:201)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:312)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:297)\n\tat org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:191)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:81)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:43)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:49)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.memberTypes(BinaryTypeBinding.java:587)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.memberTypes(ParameterizedTypeBinding.java:404)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.getMemberType(ParameterizedTypeBinding.java:270)\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:609)\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:1666)\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:1553)\n\tat\norg.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:39)\n\tat\norg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:110)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:837)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:696)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods(SourceTypeBinding.java:370)\n\tat\norg.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes(CompilationUnitScope.java:344)\n\tat org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:499)\n\tat org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:333)\n\tat\norg.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:209)\n\tat\norg.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:159)\n\tat\norg.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:49)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:212)\n\tat org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:135)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:532)\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:607)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:668)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:148)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:225)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:178)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:205)\n\tat\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:607)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:668)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:208)\n\tat\norg.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:244)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:273)\n\tat org.eclipse.core.internal.resources.Workspace.build(Workspace.java:198)\n\tat\norg.eclipse.jdt.internal.ui.preferences.OptionsConfigurationBlock$3.run(OptionsConfigurationBlock.java:455)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:66)\n\tV.java\tT1\tline 0\t18. maj 2004 16:03:22",
    "Cannot reproduce. There must be other types involved in it. Is it an \nincremental recompilation ?",
    "Please reopen once reproducing steps are available.",
    "If I do this (I have had a colleuge to do the same, resulting in the same error):\nUnpack M9 to d:\\M9-1\nrun eclipse.exe (using j2se 1.4.2_04)\nAdd the cheetah update 0.0.5\nAdd new java project\nAdd new class V extending Vector in default package\nAdd method addAll\nAdded the j2sdk1.5.0 JRE in Preferences\nSelect the 1.5 JRE \u0026 click OK (rebuilds all)\nChange compliance level to 1.5 in Preferences and press OK\nUndefined base type: .\n\nSwithcing back to 1.4 compliance, the error disappears",
    "Cannot reproduce still. It works just fine for me, issuing the following \nwarning:\n\n----------\n1. WARNING in V.java (at line 5)\n\treturn super.addAll(arg0);\n\t       ^^^^^^^^^^^^^^^^^^\nUnsafe type operation: Should not invoke the method addAll(Collection\u003c? \nextends E\u003e) of raw type Vector. References to generic type Vector\u003cE\u003e should be \nparameterized\n----------\n1 problem (1 warning)\n\nI can only bet this is a bug in the JDK1.5 libraries themselves. I am using \nbeta2-b50, which doesn\u0027t seem to expose this issue any longer. The trace \nindicates that an inconsistent signature in some binaries.",
    "Replaced the Error exception with generation of a problem requiring to abort \ninstead.",
    "beta2-b50?\nWhere did you get it?\nI only have build 1.5.0-beta-b32c",
    "From private channels in IBM. You need to interact with Sun to gain access to \nit.",
    "Reproduced using beta1. Indeed beta1 contains corrupted binary signatures, \nlikely supported by javac in there. \n\nOffending classfile: java.util.AbstractList$ListItr has a signature attribute:\n\nLjava/util/AbstractList\u003cTE;\u003e;.Ljava/util/AbstractList$Itr;Ljava/util/ListIterat\nor\u003cTE;\u003e;\n\nwhich should instead read (as of beta2):\nLjava/util/AbstractList\u003cTE;\u003e.Itr;Ljava/util/ListIterator\u003cTE;\u003e;\n\nClosing as invalid. We cannot support corrupted binaries.\n",
    "One more question though. Why do we bother decoding the member type ListItr \nwhere it is only internally used ? It looks like this scenario shouldn\u0027t \nnotice the broken signature, as no need to eagerly resolve the member types.",
    "Kent - pls investigate eager resolution of member types. We request too much. \nI tried javac beta2 against lib beta1, and it doesn\u0027t care about broken \nsignature, when turning into verbose mode, it appears it doesn\u0027t load the \nmember type, as I would expect we also did.",
    "I did some measurement, and we indeed load 6 more types than javac, which is \n~50% more than we need.\n\nLOADED BINARIES BY ECLIPSE (sorted by type name)\nSAME AS JAVAC:\n[reading    java/util/AbstractCollection.class]\n[reading    java/util/AbstractList.class]\n[reading    java/util/Collection.class]\n[reading    java/lang/Cloneable.class]\n[reading    java/lang/Iterable.class]\n[reading    java/util/Iterator.class]\n[reading    java/util/List.class]\n[reading    java/util/ListIterator.class]\n[reading    java/lang/Object.class]\n[reading    java/util/RandomAccess.class]\n[reading    java/io/Serializable.class]\n[reading    java/lang/String.class]\n[reading    java/util/Vector.class]\n\nEXTRA FILES JAVAC DOESN\u0027T NEED\n[reading    java/util/AbstractList$Itr.class]\n[reading    java/util/AbstractList$ListItr.class]\n[reading    java/util/Enumeration.class]\n[reading    java/io/IOException.class]\n[reading    java/io/ObjectOutputStream.class]\n[reading    java/lang/Throwable.class]\n\nRe-tagging for RC1 as this could benefit to our memory profile.\n",
    "In verbose mode, by changing Compiler#accept(IBinaryType) as below, I was able \nto trace the load of offending binaries.\n\npublic void accept(IBinaryType binaryType, PackageBinding packageBinding) {\n  if (options.verbose) {\n    System.out.println(\n      Util.bind(\n        \"compilation.loadBinary\" , //$NON-NLS-1$\n        new String[] {\n          new String(binaryType.getName())}));\n    new Exception(\"TRACE BINARY\").printStackTrace(System.out);\n    System.out.println();\n   }\n  lookupEnvironment.createBinaryTypeFrom(binaryType, packageBinding);\n}\n\n",
    "Offending invocations are:\nClassScope#checkForInheritedMemberTypes\n\n",
    "Previous comment got truncated.\n\nOffending invocations are:\nClassScope#checkForInheritedMemberTypes\n   it asks for memberTypes() just to check whether there is any. \n   --\u003e replacing with non populating (new) predicate #hasMemberTypes()\nReferenceBinding#getMemberType(char[])\n   asks for memberTypes(), without checking for name match, and thus \n   triggers all resolution (even though in this case, no name match exists).\n   --\u003e override default implementation to do name check first.\n\n+ flow analysis is eagerly loading Throwable, where it should avoid doing so \nuntil some exception type hierarchy is resolved.\n\n",
    "Released changed for making binary member type resolution more lazy.\nAlso changed flow analysis to avoid eagerly referencing Throwable.\n\nNote: the fix has nothing to do with Cheetah itself. It is only exposed by the \nfact one of the unnecessary loaded type had issues which caused Cheetah to \ndiagnose an error in it.\n\nFixed in 3.0.",
    "Added regression test: NegativeTest#test429.\nAlso verifiable using batch compiler with -verbose command line option to see \nexactly the binaries loaded during compilation.",
    "Verified that the list of .class files requested during compilation is:\n\n[reading    java/util/Vector.class]\n[reading    java/util/AbstractList.class]\n[reading    java/util/AbstractCollection.class]\n[reading    java/lang/Object.class]\n[reading    java/util/Collection.class]\n[reading    java/lang/Iterable.class]\n[reading    java/util/List.class]\n[reading    java/io/Serializable.class]\n[reading    java/lang/Cloneable.class]\n[reading    java/util/RandomAccess.class]\n\nVerified in 200405281200"
  ],
  "commentCreationDates": [
    "2004-05-18T16:16:45+02:00",
    "2004-05-19T19:07:00+02:00",
    "2004-05-20T00:14:09+02:00",
    "2004-05-24T09:59:29+02:00",
    "2004-05-24T13:54:31+02:00",
    "2004-05-24T14:45:31+02:00",
    "2004-05-24T14:54:51+02:00",
    "2004-05-24T15:10:54+02:00",
    "2004-05-25T01:30:52+02:00",
    "2004-05-25T01:35:18+02:00",
    "2004-05-25T01:36:59+02:00",
    "2004-05-25T11:26:46+02:00",
    "2004-05-25T12:37:28+02:00",
    "2004-05-25T12:39:18+02:00",
    "2004-05-25T12:43:39+02:00",
    "2004-05-25T15:37:55+02:00",
    "2004-05-25T15:51:01+02:00",
    "2004-05-28T22:08:55+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Error",
      "message": "Undefined base type: .",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getTypeFromSignature",
          "source": "LookupEnvironment.java:648"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getTypeFromTypeSignature",
          "source": "LookupEnvironment.java:689"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom",
          "source": "BinaryTypeBinding.java:201"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom",
          "source": "LookupEnvironment.java:312"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom",
          "source": "LookupEnvironment.java:297"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.accept",
          "source": "Compiler.java:191"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType",
          "source": "LookupEnvironment.java:81"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve",
          "source": "UnresolvedReferenceBinding.java:43"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType",
          "source": "BinaryTypeBinding.java:49"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.memberTypes",
          "source": "BinaryTypeBinding.java:587"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.memberTypes",
          "source": "ParameterizedTypeBinding.java:404"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.getMemberType",
          "source": "ParameterizedTypeBinding.java:270"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType",
          "source": "Scope.java:609"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage",
          "source": "Scope.java:1666"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.Scope.getType",
          "source": "Scope.java:1553"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding",
          "source": "QualifiedTypeReference.java:39"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType",
          "source": "TypeReference.java:110"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor",
          "source": "SourceTypeBinding.java:837"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods",
          "source": "SourceTypeBinding.java:696"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods",
          "source": "SourceTypeBinding.java:370"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes",
          "source": "CompilationUnitScope.java:344"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:499"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:333"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:209"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile",
          "source": "AbstractImageBuilder.java:159"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build",
          "source": "BatchImageBuilder.java:49"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll",
          "source": "JavaBuilder.java:212"
        },
        {
          "method": "org.eclipse.jdt.internal.core.builder.JavaBuilder.build",
          "source": "JavaBuilder.java:135"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$2.run",
          "source": "BuildManager.java:532"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:607"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:668"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:148"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:225"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:178"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager$1.run",
          "source": "BuildManager.java:205"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java:607"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:668"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuild",
          "source": "BuildManager.java:208"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.basicBuildLoop",
          "source": "BuildManager.java:244"
        },
        {
          "method": "org.eclipse.core.internal.events.BuildManager.build",
          "source": "BuildManager.java:273"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.build",
          "source": "Workspace.java:198"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.preferences.OptionsConfigurationBlock$3.run",
          "source": "OptionsConfigurationBlock.java:455"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:66"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "62639",
      "date": "2004-05-18T16:16:45+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "62639",
  "bugId": "62639",
  "date": "2004-05-18T16:16:45+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}