{
  "comments": [
    "We have code called by a multithreaded application. If the first invocation is from a single thread, things work fine; if multiple threads are invoking our code concurrently, we get a NullPointerException at org.eclipse.emf.common.util.BasicEMap.entryForKey(BasicEMap.java:1339) during processing of the ResourceImpl.load() method.\n\nIBM L2 support stated, \"this problem seems to stem from a race condition in initializing an index as a side effect of a lookup.\"  They provided a workaround as follows, which we have verified as working:\n\nIf the customer were to access the details map of all extended metadata annotations in their metamodels before the multiple loads started occurring, the indexes would all be pre-computed and there\u0027d be no chance of the race condition.  This could be done with a simple method like this: \n\n  public static void fixExtendedMetaData(EPackage ePackage) \n  { \n    for (Iterator i \u003d ePackage.eAllContents(); i.hasNext(); ) \n    { \n      Object o \u003d i.next(); \n      if (o instanceof EAnnotation) \n      { \n        ((EAnnotation)o).getDetails().get(\"\"); \n      } \n    } \n  } \n\nThis would need to be invoked on each package during package initialization, which is thread-safe.  So, for package foo, in FooPackageImpl: \n\n  public static FooPackage init() \n  { \n    ... \n\n    // Initialize created meta-data \n    theFooPackage.initializePackageContents(); \n\n    // Add this (for each package above, if there are package interdependencies) \n    fixExtendedMetaData(theFooPackage); \n\n    ... \n\n    return theFooPackage; \n  }",
    "Created an attachment (id\u003d36002)\nA patch to remove the race condition in EAnnotation.details\n\nHere a patch that should eliminate the race condition in EAnnoation.details.  It still works in the single-thread case, but has not yet been tested in the multi-threaded case.\n",
    "The fix has been committed to CVS.",
    "Fixed in  2.2.0 I200603160000",
    "Wondering, why was this not fixed in the more central \u0027BasicEMap.ensureEntryDataExists\u0027?  For example, \u0027EcoreEMap\u0027 is also used by \u0027EStructuralFeatureImpl, but the fix will not extend to that use.",
    "Because the code I wrote bypasses all the proper hooks (like doPut) that clients of derived classes would normally expect to have called.  That\u0027s fine in the inner class used for annotation\u0027s details because that class doesn\u0027t depend on the hooks being called, but is not fine as a general thing."
  ],
  "commentCreationDates": [
    "2006-03-09T18:16:56+01:00",
    "2006-03-09T18:49:57+01:00",
    "2006-03-13T13:59:38+01:00",
    "2006-03-16T21:35:55+01:00",
    "2007-10-25T21:21:35+02:00",
    "2007-10-25T21:38:05+02:00"
  ],
  "traces": [
    {
      "exceptionType": "NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.emf.common.util.BasicEMap.entryForKey",
          "source": "BasicEMap.java:1339"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "131151",
      "date": "2006-03-09T18:16:56+01:00",
      "product": "EMF",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "131151",
  "bugId": "131151",
  "date": "2006-03-09T18:16:56+01:00",
  "product": "EMF",
  "component": "Core",
  "severity": "normal"
}