{
  "comments": [
    "The problem occurs in my plugin when I call FileEditorInput.getPath for a file that has been deleted on disk. This happens when you have an editor open, and then delete its project and choose the option to delete the files on disk. The built-in Eclipse editors do not run into the problem because they present a dialog asking to save or close the file and do not allow any interaction with the file.\n\nThe stack trace is:\n\njava.lang.NullPointerException\n            at  org.eclipse.core.internal.filesystem.InternalFileSystemCore.getStore(InternalFileSystemCore.java:104)\n            at  org.eclipse.core.filesystem.EFS.getStore(EFS.java:350)\n            at  org.eclipse.ui.part.FileEditorInput.getPath(FileEditorInput.java:175)\n\nIn FileEditorInput.getPath, the code is:\n\n  final URI locationURI \u003d file.getLocationURI();\n  IFileStore store \u003d EFS.getStore(locationURI);\n\nIResources.getLocationURI is documented to return null if no URI can be determined. I believe that the code above should check for (locationURI \u003d\u003d null) and return null.\n\nThis null pointer exception occurs with Eclipse 3.3M7, but not with 3.2.\n\nA workaround for this problem is to not call IEditorInput.getPath() if IEditorInput.exists() returns false.",
    "Adding John to help with this - I am not sure that there is anything we can do in the 3.3 timeframe - we should fail more gracefully with this",
    "I suggest reverting to the 3.2 behaviour in this case, and return null from the getPath method.\n\nif (locationURI \u003d\u003d null)\n  return null;\n\nMany callers do check for null when calling getPath, so they will be better off. The same situation occurs for FileEditorInput.getURI(), which also returns null in this case. Ideally IPathEditorInput and IURIEditorInput should specify the behaviour in this case - perhaps something to revisit after 3.3.",
    "This was my gut feeling as well but my concern was that null was never expressed as a valid value for IPathEditorInput#getPath.\n\nWould clarifying the javadoc be considered an API change?",
    "Bug 188448 has been logged for the javadoc update which we will have to wait until 3.4 for. \n\nI agree with John\u0027s assessment - honouring he 3.2 behaviour of returning null in that case is the way to go.",
    "Created an attachment (id\u003d68207)\nPatch\n\nPatch to emulate the 3.0 behaviour. Note we need 2 null checks in the end.",
    "Fix released for build \u003e20070628",
    "*** Bug 194819 has been marked as a duplicate of this bug. ***",
    "Verified in  I20070807-0010",
    "Note that this solution has been integrated into the solution for Bug 199770."
  ],
  "commentCreationDates": [
    "2007-05-18T20:15:58+02:00",
    "2007-05-22T19:50:11+02:00",
    "2007-05-22T21:05:21+02:00",
    "2007-05-22T21:17:02+02:00",
    "2007-05-22T21:29:01+02:00",
    "2007-05-22T22:25:13+02:00",
    "2007-06-28T21:45:14+02:00",
    "2007-06-28T23:17:12+02:00",
    "2007-08-07T20:41:59+02:00",
    "2007-08-13T17:48:44+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.core.internal.filesystem.InternalFileSystemCore.getStore",
          "source": "InternalFileSystemCore.java:104"
        },
        {
          "method": "org.eclipse.core.filesystem.EFS.getStore",
          "source": "EFS.java:350"
        },
        {
          "method": "org.eclipse.ui.part.FileEditorInput.getPath",
          "source": "FileEditorInput.java:175"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "187877",
      "date": "2007-05-18T20:15:58+02:00",
      "product": "Platform",
      "component": "IDE",
      "severity": "normal"
    }
  ],
  "groupId": "187877",
  "bugId": "187877",
  "date": "2007-05-18T20:15:58+02:00",
  "product": "Platform",
  "component": "IDE",
  "severity": "normal"
}