{
  "comments": [
    "According to Jim Hugunin.\n\"The bug has to do with a situation where code in a class can run before that\nclass\u0027s static initializer has completed.  We\u0027ve designed the\nJoinPoint.StaticPart object initialization code so that it is robust to most\nsuch issues, but we\u0027ve apparently missed a case.\"\n\n\nI am using AspectJ 1.1rc1\n\npublic aspect BaseAspect {\n   pointcut methodExec(): execution(* *..*(..)) \u0026\u0026 !within(BaseAspect);\n\n   after () returning: methodExec() {\n       thisJoinPoint.getSignature();\n   }\n}\n\npublic abstract class Expression {\n    public static Expression EMPTYSTRING \u003d new Operator();\n}\n \npublic class Operator extends Expression {\n  \n   public Operator() {\n    initOperands(); // the bug goes away if you remove this call. \n   }\n\n   public void initOperands() {\n   }\n\n   public static void main (String [] args) {\n     Operator t \u003d new Operator();\n   }\n\n}\n\nThat stack dump\nException in thread \"main\" java.lang.ExceptionInInitializerError\nCaused by: java.lang.NullPointerException\n        at BaseAspect.ajc$afterReturning$BaseAspect$df(BaseAspect.java:10)\n        at Operator.initOperands(Operator.java:8)\n        at Operator.\u003cinit\u003e(Operator.java:4)\n        at Expression.\u003cclinit\u003e(Expression.java:2)",
    "I can\u0027t figure out any way to avoid this error that doesn\u0027t add runtime \noverhead to any advice that uses thisJoinPointStaticPart.  This error is so \nunusual that I\u0027m doubtful it\u0027s acceptable to penalize all advice for this odd \ncase.\n\nNote that any program which would show this bug already has the surprising \nbehavior that a properly initialized static final field may be seen to be \nnull.  i.e. if you add to Operator the line:\n  static final Object name \u003d \"name\";\n\nAnd then add to initOperands() the following:\n  System.out.println(name);\n\nYou\u0027ll see that even though name is a static final under this bizarre \ninitialization situation it can be seen to be null.\n\nThis bug is waiting for a patch to be submitted showing how it can be \nprevented without adding performance overhead to all advice that uses \nthisJoinPointStaticPart.",
    "We\u0027re not going to get to this in AJ 1.5.0. Marking as \"LATER\" for consideration\nin 1.5.1 and future release planning.\n\nThe bug has not been hit by any other user in the last 2.5 years, so low priority."
  ],
  "commentCreationDates": [
    "2003-04-23T20:48:44+02:00",
    "2004-01-28T00:12:04+01:00",
    "2005-08-26T16:59:56+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "BaseAspect.ajc$afterReturning$BaseAspect$df",
          "source": "BaseAspect.java:10"
        },
        {
          "method": "Operator.initOperands",
          "source": "Operator.java:8"
        },
        {
          "method": "Operator.\u003cinit\u003e",
          "source": "Operator.java:4"
        },
        {
          "method": "Expression.\u003cclinit\u003e",
          "source": "Expression.java:2"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "36810",
      "date": "2003-04-23T20:48:44+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "36810",
  "bugId": "36810",
  "date": "2003-04-23T20:48:44+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}