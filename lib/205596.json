{
  "comments": [
    "This may duplicate bug 196823, but as far as I can tell, there is nothing wrong with the class file in this case, which is from the runtime distribution.\n\nC:\\\u003e\"\\Program Files\\Java\\jre1.5.0\\bin\\java.exe\" -version\njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.5.0-b64)\nJava HotSpot(TM) Client VM (build 1.5.0-b64, mixed mode, sharing)\n\n-- Error Log --\nDate: Fri Oct 05 13:02:23 EDT 2007\nMessage: ClassFormatException in C:/Program Files/Java/jre1.5.0/lib/ext/sunjce_provider.jar|com/sun/crypto/provider/SunJCE_am.class. Please report this issue to JDT/Core including the problematic document\nSeverity: Error\nPlugin ID: org.eclipse.jdt.core\nStack Trace:\norg.eclipse.jdt.internal.compiler.classfmt.ClassFormatException\nat org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.\u003cinit\u003e(ClassFileReader.java:342)\nat org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.\u003cinit\u003e(ClassFileReader.java:121)\nat org.eclipse.jdt.internal.core.search.indexing.BinaryIndexer.indexDocument(BinaryIndexer.java:622)\nat org.eclipse.jdt.internal.core.search.JavaSearchParticipant.indexDocument(JavaSearchParticipant.java:74)\nat org.eclipse.jdt.internal.core.search.indexing.IndexManager.indexDocument(IndexManager.java:314)\nat org.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex.execute(AddJarFileToIndex.java:197)\nat org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:392)\nat java.lang.Thread.run(Unknown Source)",
    "Created an attachment (id\u003d79822)\ncom/sun/crypto/provider/SunJCE_am.class\n\n",
    "Sorry, I meant bug 195823.\n",
    "I am investigating it.",
    "This doesn\u0027t look like a dup of bug 195823.\nThe class file reader is failing during the EnclosingMethod attribute decoding.",
    "This .class file has been obfuscated and it appears that the resulting .class file doesn\u0027t follow the JVM spec anymore.\nThe EnclosingMethod attribute is supposed to be formed like this:\n\nu2 attribute_name\nu4 attribute_length\nu2 class_index\nu2 method_index\n\nThe class index is supposed to correspond to an CONSTANT_Class entry in the constant pool. In this case the entry at the specified index is a CONSTANT_UTF8 entry. This is illegal and the class file reader doesn\u0027t handle it.\n\njavap doesn\u0027t check this constraints:\nCompiled from DashoA6275\nclass com.sun.crypto.provider.SunJCE_am extends java.lang.Object\n  SourceFile: DashoA6275\n  Synthetic: length \u003d 0x\n\n  EnclosingMethod: length \u003d 0x4\n   00 07 00 00\n  InnerClass:\n   #10 of #12; //class com/sun/crypto/provider/SunJCE_am of class com/sun/crypto/provider/JceKeyStore\n  minor version: 0\n  major version: 48\n  Constant pool:\nconst #1 \u003d Asciz        DashoA6275;\nconst #2 \u003d Asciz        EnclosingMethod;\nconst #3 \u003d Asciz        InnerClasses;\nconst #4 \u003d Asciz        SourceFile;\nconst #5 \u003d Asciz        SunJCE:  Sun Microsystems, Inc.;\nconst #6 \u003d Asciz        Synthetic;\nconst #7 \u003d Asciz        com/sun/crypto/provider/JceKeyStore;\nconst #8 \u003d Asciz        com/sun/crypto/provider/SunJCE_am;\nconst #9 \u003d Asciz        java/lang/Object;\nconst #10 \u003d class       #8;     //  com/sun/crypto/provider/SunJCE_am\nconst #11 \u003d class       #9;     //  java/lang/Object\nconst #12 \u003d class       #7;     //  com/sun/crypto/provider/JceKeyStore\n\n{\n}\n\nYou can see that the \"00 07\" which corresponds to the class index is indeed an CONSTANT_UTF8 entry in the constant pool.\nThe more I look at this, the more I believe that we should silently ignore these errors. I wanted to log them in case we were hiding a real bug inside the classfile reader, but each bug report we got so far related to this logging appears to be due to real corrupted or malformed .class files.\n\nPhilippe, should we report this error only in debug mode ? This is what I would propose otherwise we will keep getting new bug reports when the class file reader is right to reject the .class files.\n\nI could also add error handling inside the class file reader in order to be able to \"read\" as much as possible.\nIn this case, we would not set the enclosing type name, but we would still be able to read the remaining part of the .class file.\n\nLet me know what solution you prefer.",
    "If I manually replace \"00 07\" with \"00 0C\", then it can be successfully read by the class file reader.\nSo we either make the class file reader more resilient to invalid class files, or we simply \"ignore\" the invalid class file and we don\u0027t report the error in the .log anymore.\nI would prefer the second approach and report it only in debug mode if the debug mode is on for the JavaCore plugin.",
    "Closing as a dup of bug 195823.\nEven if the problem is not located in the same part of the .class file, the corresponding .class file is corrupted. So the class file indexer is right to reject it.\n\n*** This bug has been marked as a duplicate of bug 195823 ***",
    "Verified for 3.4M3 using I20071029-0010"
  ],
  "commentCreationDates": [
    "2007-10-05T20:05:20+02:00",
    "2007-10-05T20:07:46+02:00",
    "2007-10-05T20:12:15+02:00",
    "2007-10-05T20:21:28+02:00",
    "2007-10-05T20:23:11+02:00",
    "2007-10-05T20:36:17+02:00",
    "2007-10-10T17:30:47+02:00",
    "2007-10-10T17:33:42+02:00",
    "2007-10-29T17:28:25+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.\u003cinit\u003e",
          "source": "ClassFileReader.java:342"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.\u003cinit\u003e",
          "source": "ClassFileReader.java:121"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.BinaryIndexer.indexDocument",
          "source": "BinaryIndexer.java:622"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.indexDocument",
          "source": "JavaSearchParticipant.java:74"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.IndexManager.indexDocument",
          "source": "IndexManager.java:314"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex.execute",
          "source": "AddJarFileToIndex.java:197"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.processing.JobManager.run",
          "source": "JobManager.java:392"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "205596",
      "duplicateId": "195823",
      "date": "2007-10-05T20:05:20+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "195823",
  "bugId": "205596",
  "duplicateId": "195823",
  "date": "2007-10-05T20:05:20+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}