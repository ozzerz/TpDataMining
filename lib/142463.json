{
  "comments": [
    "I ran into the problem of receiving a strange NullPointerException in BCEL\u0027s MethodGen at line 305 (org.aspectj.apache.bcel.generic.MethodGen).\nThe exception itself is my fault (I instrumented a jar with EMMA and forgot to include emma.jar in the aspectj compilers classpath), but failing with a NullPointerException in the adapted (and hard as hell to compile and get back into aspectj i might add) shouldn\u0027t be necessary.\n\nMy suggestion for a patch (leading spaces stripped) is as follows:\n\n302a303,304\n\u003eif( start \u003d\u003d null )\n\u003e  continue;\n\ninstead of the (silent) continue a warning should/could be issued about missing class references.",
    "could you possibly attach the stack trace?",
    "\nHere you go.\nBy the way: is there a non brute force (ie command line or ide) way to compile the modified bcel library? I found no ant target to do so.\n\njava.lang.NullPointerException\n\tat org.aspectj.apache.bcel.generic.MethodGen.\u003cinit\u003e(MethodGen.java:305)\n\tat org.aspectj.weaver.bcel.LazyMethodGen.initialize(LazyMethodGen.java:291)\n\tat org.aspectj.weaver.bcel.LazyMethodGen.markAsChanged(LazyMethodGen.java:498)\n\tat org.aspectj.weaver.bcel.LazyMethodGen.getBody(LazyMethodGen.java:887)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:470)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:321)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:192)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:875)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:243)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:162)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:367)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:246)\n\tat org.aspectj.tools.ajc.Main.main(Main.java:86)\n",
    "We work with bcel extracted as an eclipse project - eclipse builds it and the Ant script is purely for packaging. So yes, brute force would be your option.\n\nI don\u0027t really want to put in that proposed fix though - problems with missing types should be caught way way way way higher than that so something worse is happening - and strange that it is fixed by adding a jar to the classpath.  A fix to simply skip over the entry will mean local variable information is lost during the weaving process.\n\nGiven that \u0027start\u0027 is calculated like this\n\nInstructionHandle start \u003d il.findHandle(l.getStartPC(), arrayOfInstructions);\n\nand is null, it looks like a duff entry in the local variable table - a variable is giving its start location as an instruction not in our list.  This could either be a duff class file or the unpacking process in bcel not working correctly.  Are you able to diagnose it any further than this? either which class or which method?  If you are hacking at MethodGen you could print out getType()+getName() and that will tell us which method to look at the localvariabletable for?  and l.getName() done at the same point will tell us which local variable it is.\n",
    "here\u0027s a diagnostic message with getType(), getName(), l.getName() and l.toString():\n\n[iajc] Diag: type:void name:\u003cclinit\u003e l.name:ex l:LocalVariable(start_pc \u003d 48, length \u003d 0, index \u003d 0:NoSuchFieldError ex)\n\nBut like i mentioned: i run the aspectj compiler *after* instrumenting the classes with emma. The errors occur at synthetic classes created by emma (\u003coriginal package and class name\u003e$1) and everything works as excected if emma.jar is in aspectj\u0027s classpath, so this might not be the error the average user stumbles across.",
    "Interesting.  We do have other emma users - although I think they run it after AspectJ.  If you could possibly indulge me just one more time, can I possibly see the bytecode for the generated clinit method?  If it is something that will \u0027usually happen\u0027 with emma generated classes, I might try and make our code more able to cope with it - it does seem a little odd to have a 0 length local variable I think.\n\n[iajc] Diag: type:void name:\u003cclinit\u003e l.name:ex l:LocalVariable(start_pc \u003d 48,\nlength \u003d 0, index \u003d 0:NoSuchFieldError ex)\n\nSomething like \"javap -private -verbose \u003cBlah\u003e$1\" should give us the clinit (static {}) bytecode.",
    "Created an attachment (id\u003d41885)\njavap dump\n\njavap dump is attached.\nthe interesting section might be this:\n\nLocalVariableTable:\n   Start  Length  Slot  Name   Signature\n   24      0      0    ex       Ljava/lang/NoSuchFieldError;\n   48      0      0    ex       Ljava/lang/NoSuchFieldError;",
    "thanks for that.\n\nDoesnt look quite right does it - that second entry suggesting that the local variable ex comes into existence at instruction 48, when instruction 47 is a 3byte instruction...  \n\nalso given that it\u0027s name is \u0027ex\u0027 and it\u0027s type is exactly the same as the exception entries in the exception table, I wonder if (both of them) are meant to be the local variables in each of the catch blocks (so start positions would be 33 and 65)... but I might be wrong.\n\nSo! where does that leave us? Well in this case Markus\u0027 first suggestion of just coping with null would be ... ok ... now that we understand the problem.  We would just entirely ignore the second local variable entry, it wouldn\u0027t be attached to any instructions and the woven code coming out of aspectj probably wouldn\u0027t include it - no bad thing if its that badly formed ;)\n",
    "until you decide for a fix i\u0027ll switch back to the \u0027traditional\u0027 way and will instrument with emma after aspectj ;)",
    "I get this same NullPointerException when using AspectJ run-time weaving with emma-instrumented class files.\n\nIs there a way to workaround this for run-time weaving?  I\u0027m using the -javaagent option and emma.jar is on the classpath.\n\nHere is the full stack trace:\njava.lang.NullPointerException\n\tat org.aspectj.apache.bcel.generic.MethodGen.\u003cinit\u003e(MethodGen.java:305)\n\tat org.aspectj.weaver.bcel.LazyMethodGen.initialize(LazyMethodGen.java:294)\n\tat org.aspectj.weaver.bcel.LazyMethodGen.markAsChanged(LazyMethodGen.java:501)\n\tat org.aspectj.weaver.bcel.LazyMethodGen.getBody(LazyMethodGen.java:899)\n\tat org.aspectj.weaver.bcel.BcelShadow.init(BcelShadow.java:710)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2331)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n        ---snip---",
    "The only workaround to my knowledge is recompiling AspectJ with the patch i proposed, apply emma instrumentation after AspectJ (which means no runtime weaving though) or ask the emma developers for a fix. ",
    "what can we do for 1.5.4 on this"
  ],
  "commentCreationDates": [
    "2006-05-18T13:29:11+02:00",
    "2006-05-18T13:31:53+02:00",
    "2006-05-18T13:41:41+02:00",
    "2006-05-18T14:50:24+02:00",
    "2006-05-18T15:10:01+02:00",
    "2006-05-18T16:15:28+02:00",
    "2006-05-18T16:29:25+02:00",
    "2006-05-18T16:56:26+02:00",
    "2006-05-18T17:23:51+02:00",
    "2006-08-25T16:26:02+02:00",
    "2006-08-25T23:03:06+02:00",
    "2007-10-24T16:00:43+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.apache.bcel.generic.MethodGen.\u003cinit\u003e",
          "source": "MethodGen.java:305"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.initialize",
          "source": "LazyMethodGen.java:291"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.markAsChanged",
          "source": "LazyMethodGen.java:498"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.getBody",
          "source": "LazyMethodGen.java:887"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:470"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:109"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1574"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1525"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1305"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1127"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:321"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:192"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:875"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:243"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:162"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:112"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:60"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:367"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:246"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:86"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "142463",
      "date": "2006-05-18T13:41:41+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "enhancement"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.apache.bcel.generic.MethodGen.\u003cinit\u003e",
          "source": "MethodGen.java:305"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.initialize",
          "source": "LazyMethodGen.java:294"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.markAsChanged",
          "source": "LazyMethodGen.java:501"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyMethodGen.getBody",
          "source": "LazyMethodGen.java:899"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.init",
          "source": "BcelShadow.java:710"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.match",
          "source": "BcelClassWeaver.java:2331"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:490"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:115"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1574"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1525"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1305"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1127"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes",
          "source": "WeavingAdaptor.java:284"
        },
        {
          "method": "org.aspectj.weaver.tools.WeavingAdaptor.weaveClass",
          "source": "WeavingAdaptor.java:212"
        },
        {
          "method": "org.aspectj.weaver.loadtime.Aj.preProcess",
          "source": "Aj.java:65"
        },
        {
          "method": "org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform",
          "source": "ClassPreProcessorAgentAdapter.java:55"
        },
        {
          "method": "sun.instrument.TransformerManager.transform",
          "source": "TransformerManager.java:122"
        },
        {
          "method": "sun.instrument.InstrumentationImpl.transform",
          "source": "InstrumentationImpl.java:155"
        },
        {
          "method": "java.lang.ClassLoader.defineClass1",
          "source": "Native Method"
        }
      ],
      "number": 1,
      "commentIndex": 9,
      "bugId": "142463",
      "date": "2006-08-25T16:26:02+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "enhancement"
    }
  ],
  "groupId": "142463",
  "bugId": "142463",
  "date": "2006-05-18T13:29:11+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "enhancement"
}