{
  "comments": [
    "After installing the plugin eZing Builder (http://sourceforge.net/projects/ezingbuilder), I couldn\u0027t open the editor. I always got \"ClassNotFoundException\".\n\nThe root cause was that I was running Eclipse with Java 1.4 but the plugin contains classes which are compiled against Java 1.5.\n\nI\u0027d like to see two enhancements:\n\n- When a plugin contains classes which require Java 1.5, the builder in PDE should disallow to export it without the necessary Execution Environment.\n\n- When the classloader can\u0027t load a class because it requires a different Java runtime, it should say so (instead of \"The editor class could not be instantiated. This usually indicates that the editor\u0027s class name was mistyped in plugin.xml.\").\n\nThis second enhancement is probably part of Equinox:\n\njava.lang.ClassNotFoundException: com.neusoft.ezingbuilder.designer.editors.HtmlFckDesignerMultiPageEditor\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:407)\nat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:352)\nat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)\nat java.lang.ClassLoader.loadClass(Unknown Source)",
    "This type of error would not happen if the author of the plug-in you are using had specified the required execution environment (see http://wiki.eclipse.org/index.php/Execution_Environments and http://lenettoyeur-on-eclipse.blogspot.com/2006/07/setting-bundle-requiredexecutionenviro.html)\nYou should open a bug against the author of the component.\n\nMoving to the UI team to see if they can report a better problem.\nNote that this could tie in with the serviceability solution.",
    "\u003e if the author of the plug-in you are using\n\u003e had specified the required execution environment\n\nYes, you are correct but the same would happen if I accidentially added a JAR, which was compiled with Java 1.5 for some reason, to a plugin.\n\nAs long as I run Eclipse with Java 1.5, I wouldn\u0027t notice. Therefore my request that PDE should check for these kinds of errors and complain when someone tries to export such a broken plugin.",
    "\u003eTherefore my request that PDE should check for these kinds of errors and \u003ecomplain when someone tries to export such a broken plugin.\n\nNot sure what you mean by \"checking for such errors\".  The plug-in is not broken.  If it were, the export would fail.\n\nThe plug-in just does not specify an execution environment.  No need for PDE to interfere here.  an execution environment is useful/recommended, but it is optional, and not having it is not an error.\n",
    "If the behaviour you see at runtime (ie. the classloading error) is mystifying, then I suggest you reopen and move the bug to Equinox for better error reporting.",
    "As it is now, Eclipse requires Java 1.4, so plugins cannot expect to have Java 1.5.\n\nOn the other hand, it\u0027s perfectly possible to create plugins which *require* Java 1.5 without an execution environment.\n\nFrom my point of view, that\u0027s like digging a hole and waiting for someone to fall into it.\n\nAs Java 1.5 becomes more and more widespread, more and more plugins will break.\n\nSo, as I said in my first comment, PDE should only allow to create plugins without exec env as long as they don\u0027t need features which are outside the default exec env (probably Java SDK 1.4).\n\nI\u0027ll create a second bug report for Equinox so we can keep these issues apart.",
    "I see what you are saying, but PDE can\u0027t police the plug-ins and introspect the code in real time to make sure you have an EE defined if you are using a Java5 feature.\n\nPlus, your code may have a path that uses Java5 features, but that path may only get executed in very specific scenarios, so this plug-in would run just fine with 1.4 under normal circumstances.\n\nThis is all very subjective.  That is why PDE should remain out of the way, and it is up to the owner of the plug-in to specify the Execution Environment if one is needed.\n\n",
    "Of course, there might be corner cases but generally, all class files in a JAR will have been compiled with the same Java version, so checking the bytecode version of just one file in every jar should be enough to generate a warning.\n\nRight now, many plugin developers are unaware that the issue even exists. As a user, I must manually check that the plugin will run even though Eclipse would provide the means.\n\nMaybe for 3.2.1, you could enforce the EE a bit more, ie. generate a warning when it\u0027s not set? This way, the person who should know (the developer) can make an educated guess instead of putting this issue on the shoulders of the users.\n\nWasn\u0027t there a FindBugs-like thing for plugins? I thought I remembered something but I\u0027m not sure.",
    "As mentioned above, a missing EE header is not an error.  However, it may be desirable by some teams/companies to enforce having it.  So this seems like a reasonable request, and we already have a flag for EE validation in the plug-in compiler preferences.\n\nI\u0027ll reopen and rename the bug report to reflect the new focal point.\n\nThis is certainly is not a 3.2.x issue though.  It will be evaluated for 3.3 and it will depend on how much we want to enforce having an EE in manifests.",
    "The real issue here still needs to be addressed at the platform level which is to give a good error message instead of a class not found exception.\n\nThe warning at the PDE level is just a nice-to-have.",
    "*** Bug 189580 has been marked as a duplicate of this bug. ***",
    "*** Bug 189579 has been marked as a duplicate of this bug. ***",
    "This is a fairly straightforward warning / quickfix Adam.",
    "Chris, what did you have in mind for the recommended quickfix.  The developer still needs to make an educated decision on the EE level they want to choose.  Would the quickfix list all the valid EEs a developer can choose?",
    "Simply a configurable problem marker (warning by default) that tells people that they don\u0027t have an EE set. The quickfix can simply set the EE header and let you autocomplete it (which you can do already). We could be smarter and even put down an initial EE as part of the quickfix based on your default JRE and its current perfect match EE.",
    "Moving off PDE.\n\nBack to inbox.",
    "Hi guys, i\u0027ll take pick this one up again if no one minds.",
    "Hi Gary, we love contributors ;)\n\nI\u0027m assigning it to you.\n\nOnce you\u0027re done, we will need a \"leafy background\" picture of you to put on our PDE hall-of-fame webpage (http://www.eclipse.org/pde/pde-ui/committers/committers.php).\n\nLet us know if you have any troubles or need help, we\u0027re here!",
    "Here is a Mylyn context in your honor Gary ;)",
    "Created an attachment (id\u003d78007)\nmylyn/context/zip\n\n",
    "Created an attachment (id\u003d78108)\npatch\n\n",
    "Setting up a depends relationship on adding the EE selection back the New Plug-in Project wizard.",
    "btw Gary, the patch was beautiful, just need to wait on one more item because\nright now, what happens is when you create a new plug-in project you get a\nwarning right off the bat since no EE is set. We need to make that not happen\nand that is done via bug 179213",
    "Should i start looking into bug 179213 to resolve this?\n",
    "Assigned it to you Gary. We will need a picture of you in a leafy background to go on our PDE hall of fame ;)\n\nhttp://www.eclipse.org/pde/pde-ui/committers/committers.php",
    "moving to M3",
    "thanks Gary, patch was pretty clean.\n\nI\u0027ve created a TODO to refactor some of the code in the resolution to the VMHelper class to minimize redundancy.",
    "Created an attachment (id\u003d79069)\nmylyn/context/zip\n\n",
    "Verified on I20071030-0010",
    "will mark this noteworthy, part of the EE for the new plug-in project wizard"
  ],
  "commentCreationDates": [
    "2006-07-11T11:04:53+02:00",
    "2006-07-11T15:39:06+02:00",
    "2006-07-11T21:01:51+02:00",
    "2006-07-11T22:48:21+02:00",
    "2006-07-11T22:51:22+02:00",
    "2006-07-11T23:02:26+02:00",
    "2006-07-11T23:10:44+02:00",
    "2006-07-11T23:22:41+02:00",
    "2006-07-11T23:46:20+02:00",
    "2006-07-11T23:47:15+02:00",
    "2007-05-29T21:16:15+02:00",
    "2007-05-29T21:31:43+02:00",
    "2007-09-06T00:50:13+02:00",
    "2007-09-06T14:57:57+02:00",
    "2007-09-06T16:09:05+02:00",
    "2007-09-06T17:41:39+02:00",
    "2007-09-10T20:12:45+02:00",
    "2007-09-10T20:15:07+02:00",
    "2007-09-10T20:34:32+02:00",
    "2007-09-10T20:34:35+02:00",
    "2007-09-11T22:33:21+02:00",
    "2007-09-12T00:31:11+02:00",
    "2007-09-12T00:35:45+02:00",
    "2007-09-12T01:50:47+02:00",
    "2007-09-12T20:24:21+02:00",
    "2007-09-21T17:02:18+02:00",
    "2007-09-24T14:11:31+02:00",
    "2007-09-24T14:11:36+02:00",
    "2007-10-30T23:49:15+01:00",
    "2007-10-31T02:05:05+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ClassNotFoundException",
      "message": "com.neusoft.ezingbuilder.designer.editors.HtmlFckDesignerMultiPageEditor",
      "elements": [
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:407"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:352"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass",
          "source": "DefaultClassLoader.java:83"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "150225",
      "date": "2006-07-11T11:04:53+02:00",
      "product": "PDE",
      "component": "UI",
      "severity": "enhancement"
    }
  ],
  "groupId": "150225",
  "bugId": "150225",
  "date": "2006-07-11T11:04:53+02:00",
  "product": "PDE",
  "component": "UI",
  "severity": "enhancement"
}