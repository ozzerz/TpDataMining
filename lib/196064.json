{
  "comments": [
    "The editor space is a natural location for where to view disassembly code when working with the debugger.",
    "Created an attachment (id\u003d73472)\nWind River\u0027s disassembly editor plugin.\n\nI am attaching the Wind River\u0027s implementation of a disassembly editor as an implementation reference.  This reference is rather specific to Wind River\u0027s debugger in that it references specific back end interfaces, breakpoint implementations, instruction pointer painting etc.  However the main portion of the view should be portable to CDT. \n\nI can attach any of the interfaces that this plugin references upon request.  Also, this contribution is rather large (8000 loc) so it will require an IP review.  \n",
    "As I am to blame for the code, I\u0027ll try to answer any technical questions that may arise.\n",
    "As we discussed I\u0027ll try to come up with the common API and extension points to be used by various models. ",
    "Pawel, could you please reattach the zip file, it seems to be corrupted.",
    "(In reply to comment #4)\n\u003e Pawel, could you please reattach the zip file, it seems to be corrupted.\n\u003e \nI had the same problem.\nIf you change the extension to .tar.gz, it should work.",
    "(In reply to comment #5)\n\u003e I had the same problem.\n\u003e If you change the extension to .tar.gz, it should work.\nThanks, Tony.\n",
    "Tony, the current disassembly in CDT is implemented as a IViewPart. The one of the two main requirements is to move it to the editor area. I thought that\u0027s how your disassembly view is implemented. But it is an IViewPart. Am I missing something?  ",
    "(In reply to comment #7)\n\u003e Tony, the current disassembly in CDT is implemented as a IViewPart. The one of\n\u003e the two main requirements is to move it to the editor area. I thought that\u0027s\n\u003e how your disassembly view is implemented. But it is an IViewPart. Am I missing\n\u003e something?  \n\u003e \n\nIt can be both. DisassemblyPart is the common base class for the editor (DisassemblyEditor) and the view (DisassemblyView) specializations.",
    "(In reply to comment #8)\n\u003e It can be both. DisassemblyPart is the common base class for the editor\n\u003e (DisassemblyEditor) and the view (DisassemblyView) specializations.\nDoes it mean that the user can choose how to open it? BTW, is there only one view or editor shared by all active sessions?\n",
    "(In reply to comment #9)\n\u003e (In reply to comment #8)\n\u003e \u003e It can be both. DisassemblyPart is the common base class for the editor\n\u003e \u003e (DisassemblyEditor) and the view (DisassemblyView) specializations.\n\u003e Does it mean that the user can choose how to open it? BTW, is there only one\n\u003e view or editor shared by all active sessions?\n\u003e \n\nWe never used the view variant in our product, but basically, this could be made a user option. There is one instance per session.",
    "Hi All,\n\nIs there an approximate time frame to getting this disassembly editor extension points/API into CDT?  As things stand the windriver source seems to rely on a large number of their internal classes.\n",
    "(In reply to comment #11)\n\u003e As things stand the windriver source seems to rely on a\n\u003e large number of their internal classes.\n\u003e\n\nYes, I\u0027ve noticed that too.  There are lots of dependencies on Wind River\u0027s internal classes so it\u0027s not easy to see how this disassembly view differs unless you read through the code.\n\n",
    "The intention is to use parts of the WindRiver implementation in the new Disassembly view. I am planning to start working sometime in the beginning of August.  ",
    "My apologies.  I created this bug after a discussion with Mikhail on cdt-dev.  Here\u0027s the link to the discussion thread: \nhttp://dev.eclipse.org/mhonarc/lists/cdt-dev/msg10240.html",
    "(In reply to comment #13)\n\u003e The intention is to use parts of the WindRiver implementation in the new\n\u003e Disassembly view. I am planning to start working sometime in the beginning of\n\u003e August.  \n\u003e \n\nHi Mikhail, \nI am just curious how things are going. Have you started working on the disassembly yet?\nThanks,\nToni",
    "No, I haven\u0027t. The next 2-3 weeks I\u0027ll be doing something else, but the disassembly is the next item in the plan.\nBTW, I have questions to you. \nIs your editor \"infinite\" or it only covers the range specified by the current debug context?\nFor what purposes you are using ICModel elements?\n\nThanks. ",
    "(In reply to comment #16)\n\u003e No, I haven\u0027t. The next 2-3 weeks I\u0027ll be doing something else, but the\n\u003e disassembly is the next item in the plan.\n\u003e BTW, I have questions to you. \n\u003e Is your editor \"infinite\" or it only covers the range specified by the current\n\u003e debug context?\n\nIt is \"infinite\" in the sense that you can scroll up and down and disassembly is requested as needed.\n\n\u003e For what purposes you are using ICModel elements?\n\u003e Thanks. \n\nThat\u0027s for some limited support of semantic highlighting (in addition to the syntax highlighting), ie. ICModel elements in the source are colored according to the semantic highlighting settings of the editor.\n\nIt could make sense if I invested some time and make the code at least compilable without referencing Wind River classes and interfaces.",
    "(In reply to comment #17)\nThanks Toni.\n\n\u003e It could make sense if I invested some time and make the code at least\n\u003e compilable without referencing Wind River classes and interfaces.\n\nThe main problem with the code is that some details are hidden in the WindRiver classes. It wouldn\u0027t be helpful if you simply remove the references.",
    "(In reply to comment #18)\n\u003e The main problem with the code is that some details are hidden in the WindRiver\n\u003e classes. It wouldn\u0027t be helpful if you simply remove the references.\n\nMost Wind River classes only hide things that are specific to our debug engine, which should be ignored (for now) anyway, I think.\nI had in mind to remove those debugger specifics, so that basically only the view-related parts remain.",
    "Hi Mikhail,\nIs there anything we can do to help you with this?  This feature is quite high priority for us and we would be happy to contribute if we can be useful.\nJames",
    "(In reply to comment #20)\n\u003e Hi Mikhail,\n\u003e Is there anything we can do to help you with this?  This feature is quite high\n\u003e priority for us and we would be happy to contribute if we can be useful.\n\u003e James\n\nHi James, it is a high priority feature for us too. Soon I\u0027ll post the requirements on the DSDP/DD wiki page under the Disassembly subgroup. You are welcome to comment on it.\n",
    "I am currently working on a port of the WR disassembly view to work with the CDI debugger. It won\u0027t be fully functional, just something to play with.",
    "(In reply to comment #22)\n\u003e I am currently working on a port of the WR disassembly view to work with the\n\u003e CDI debugger. It won\u0027t be fully functional, just something to play with.\n\nIt shouldn\u0027t be a problem from the CDI side. It is designed to work with gdb/mi and your backend is very similar as far as I know.\nThe CDT disassembly view is built on the top of the IDisassembly interface, it\u0027s an extension of the standard debug model and is a higher level than CDI. Maybe it makes sense to consider using it instead of CDI. CDT will translate high level calls into CDI calls.\nAnd of course it would be very helpful to hear your comments on these interfaces.",
    "(In reply to comment #23)\n\u003e The CDT disassembly view is built on the top of the IDisassembly interface,\n\u003e it\u0027s an extension of the standard debug model and is a higher level than CDI.\n\nThe IDisassembly interface lacks API to request disassembly of an arbitrary address range, therefore I have to fall back to CDI directly.\n\nAnother point is that our backend provides a special implementation of the disassembly retrieval command (-wrs-data-disassemble) which is quite different from GDB\u0027s -data-disassemble. E.g. the response can contain the memory bytes (opcodes) of the instructions which the disassembly view can then display. In the case of GDB this would need an extra query. \n\nThose differences need to be factored out in the API, but at the same time it should be generic enough to allow the support of features specific to the backend.",
    "Created an attachment (id\u003d78557)\nWR Disassembly plugin adapted to CDI debugger\n\nThis version is cleaned from unresolved references to Wind River\u0027s internal classes/interfaces. Furthermore it adds a \"WR Disassembly\" view which works with the CDI debugger. \nTo try it, \n- import the archive as exisiting project, \n- build and run it (requires CDT 4.0 plugins) \n- launch a CDI debug session\n- open the view (Window \u003e Show View \u003e Other... \u003e Debug \u003e WR Disassembly)\n",
    "(In reply to comment #25)\nWhen I try to debug a simple Hello world program the disassembly retrieval seems to go into an infinite cycle with the following exception:\n\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 0\n\tat com.windriver.ide.disassembly.views.DisassemblyPart.insertDisassembly(DisassemblyPart.java:2063)\n\tat com.windriver.ide.disassembly.views.DisassemblyPart.access$27(DisassemblyPart.java:1997)\n\tat com.windriver.ide.disassembly.views.DisassemblyPart$17.done(DisassemblyPart.java:1965)\n\tat com.windriver.ide.disassembly.views.CDIDisassemblyRetrieval$1.run(CDIDisassemblyRetrieval.java:79)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)\n",
    "Created an attachment (id\u003d78619)\nWR Disassembly plugin adapted to CDI debugger v2\n\nThanks Mikhail, I fixed this issue.\nThere are still some TODOs and hacks. E.g. the mapping of source lines to address ranges is incomplete. I had to implement a \"shortcut\" to the previous asynchronous retrieval of full line information for a file.",
    "(In reply to comment #27)\nLooks very good. I haven\u0027t had a chance to look at the code, but I think we need to come up with a better API for it to cover various backend types.\n",
    "Wow, this view is a major improvement!  Thanks Anton for putting in the effort.",
    "Hi All,\n\nHaving played with this, I discovered that GDBs -data-disassemble command doesn\u0027t do what you ask it to.  I\u0027ve hacked on GDB a bit and now have it outputting the full address range you ask for, even if it spans multiple symtabs/symbols.\n\nNow found that this plugin is quite fussy about what you give it back :), for example, it says:\n3580-data-disassemble -s 0xaa8 -e 0xac0 -- 1\nGDB replies:\n3580^done,asm_insns\u003d[\nsrc_and_asm_line\u003d{line\u003d\"97\",file\u003d\"\u003cmemcpy.c\u003e\",line_asm_insn\u003d[\n{address\u003d\"0x00000ab0\",func-name\u003d\"memcpy\",offset\u003d\"192\",inst\u003d\"\u003cinstr\u003e\"}]},\nsrc_and_asm_line\u003d{line\u003d\"98\",file\u003d\"\u003cmemcpy.c\u003e\",line_asm_insn\u003d[\n{address\u003d\"0x00000aa8\",func-name\u003d\"memcpy\",offset\u003d\"184\",inst\u003d\"\u003cinstr\u003e\"},\n{address\u003d\"0x00000ab8\",func-name\u003d\"memcpy\",offset\u003d\"200\",inst\u003d\"\u003cinstr\u003e\"}]}]\n\nNow clearly I\u0027m giving back the full range asked for, just in source line order, so I think what I\u0027m doing is correct from GDBs POV.\n\nGiven that I now guarantee to disassemble the requested range -- irrespective of debug info being present (so there may be some bare {address\u003d\"\",func-name\u003d\"\",offset\u003d\"\",inst\u003d\"\"} packets in there) it would be good to just have the assembly added to the model.  Would also be good if additional disassembly outside the requested range was squirreled away (rather than causing an error/infinite loop of -data-disassemble commands :) ).\n\nGoing to have a go at making it work with our setup -- and contributing back the GDB changes if those guys are interested.  If you have any pointers Anton, I\u0027m all ears!\n\nCheers,\n\nJames",
    "Hi Mikhail, have you managed to make any progress on creating a generic API for this?",
    "(In reply to comment #31)\n\u003e Hi Mikhail, have you managed to make any progress on creating a generic API for\n\u003e this?\n\nJames, I reported the status at the latest DSDP/DD monthly call. Currently I am working on a prototype based on our backend not gdb/mi. As far as I see there will be a set of adpaters similar to the adapters used for the virtual tree viewers. It is more flexible than a regular API. \nNot all questions have been answered yet and I need a proof of concept. We decided that I will do a web presentation when the prototype is ready. You are welcome to join it if you are interested. As far as I know you can also participate in the DSDP/DD monthly calls to follow the progress of this and other issues."
  ],
  "commentCreationDates": [
    "2007-07-10T21:43:25+02:00",
    "2007-07-10T21:46:40+02:00",
    "2007-07-11T09:31:29+02:00",
    "2007-07-11T12:08:24+02:00",
    "2007-07-11T12:37:36+02:00",
    "2007-07-11T12:42:54+02:00",
    "2007-07-11T12:46:56+02:00",
    "2007-07-11T14:40:50+02:00",
    "2007-07-11T14:51:40+02:00",
    "2007-07-11T15:15:02+02:00",
    "2007-07-11T15:26:15+02:00",
    "2007-07-20T14:57:30+02:00",
    "2007-07-20T15:24:33+02:00",
    "2007-07-20T15:37:02+02:00",
    "2007-07-20T16:57:22+02:00",
    "2007-08-23T17:09:35+02:00",
    "2007-08-23T17:55:23+02:00",
    "2007-08-24T08:51:47+02:00",
    "2007-08-24T11:02:59+02:00",
    "2007-08-24T13:51:24+02:00",
    "2007-09-06T18:15:42+02:00",
    "2007-09-06T18:22:19+02:00",
    "2007-09-13T15:51:40+02:00",
    "2007-09-14T11:02:13+02:00",
    "2007-09-14T14:55:00+02:00",
    "2007-09-17T17:03:47+02:00",
    "2007-09-17T19:55:29+02:00",
    "2007-09-18T10:48:07+02:00",
    "2007-09-18T11:32:23+02:00",
    "2007-09-18T13:05:27+02:00",
    "2007-09-25T11:35:15+02:00",
    "2007-11-07T09:54:18+01:00",
    "2007-11-08T10:52:03+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "0",
      "elements": [
        {
          "method": "com.windriver.ide.disassembly.views.DisassemblyPart.insertDisassembly",
          "source": "DisassemblyPart.java:2063"
        },
        {
          "method": "com.windriver.ide.disassembly.views.DisassemblyPart.access$27",
          "source": "DisassemblyPart.java:1997"
        },
        {
          "method": "com.windriver.ide.disassembly.views.DisassemblyPart$17.done",
          "source": "DisassemblyPart.java:1965"
        },
        {
          "method": "com.windriver.ide.disassembly.views.CDIDisassemblyRetrieval$1.run",
          "source": "CDIDisassemblyRetrieval.java:79"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:123"
        }
      ],
      "number": 0,
      "commentIndex": 26,
      "bugId": "196064",
      "date": "2007-09-17T19:55:29+02:00",
      "product": "CDT",
      "component": "cdt-debug",
      "severity": "enhancement"
    }
  ],
  "groupId": "196064",
  "bugId": "196064",
  "date": "2007-07-10T21:43:25+02:00",
  "product": "CDT",
  "component": "cdt-debug",
  "severity": "enhancement"
}