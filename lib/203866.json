{
  "comments": [
    "I cannot view from the client my UTF data correctly.\n\nWhen I transfer the UTF String  from the server to the client..It is not UTF anymore.",
    "Created an attachment (id\u003d78679)\nSupport UTF String\n\nContribution is subject to EPL v1.0",
    "I must admit that I never took the time to deeply understand all these CHARSET issues. Please don\u0027t tell anyone ;-)\nIs UTF \u003dUTF-8 or \u003dUTF-16?\n\nFirst, your patch seems to force everyone to use UTF. Do you think this is good?\nWouldn\u0027t it be better to add a writeString(str, charset) methods to Net4j ExtendedDataOutput (input respectively)?\n\nGiven that the charset for string transfers can be chosen, who choses the actual charset and why?",
    "\nI would say that it is not the consumer that should decide how to wrote in the stream..\n\nAs a consumer point of view... when they put something in the String... they should be able to retrieve it the same format at the consumer side. Right ? \n\nTo let decide the consumer.. will be too much overkill.\n\n\n\nAbout performance,\n\nwriteUTF will write 2 bytes at the beginning of each string... \n\nafter will write \n1 byte \u003d for 1 character\nor \n2 bytes \u003d for 1 character\nor \n3 bytes \u003d for 1 character\n\nIn or case.. I think the only overhead will be to write two additionnal bytes at the beginning since our character can be represented in 1 byte\n\nI look at the code and they seems to support UTF-24  as well!!\n\nSo to anwser your questions :\n\u003e\u003eFirst, your patch seems to force everyone to use UTF. Do you think this is\n\u003e\u003egood?\nYES, because wruteUTF will take the right decision to write it in an optimal way without disadvantage you too much.\n\u003e\u003eWouldn\u0027t it be better to add a writeString(str, charset) methods to Net4j\n\u003e\u003eExtendedDataOutput (input respectively)?\nI don\u0027t see a good reason why we should use writeString.\n\n\u003e\u003eGiven that the charset for string transfers can be chosen, who choses the\n\u003e\u003eactual charset and why?\n\nAlready done by writeUTF... why bother.\n\nSimon\n",
    "From the name UTF-8 I really thought it has only 8 bits per character!\nIn fact it means 1-4 octets per character:\nhttp://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n\nNeither Sun not Wikipedia mention UTF-24 and I think it doesn\u0027t make much sense since there are no 3 byte primitive types in Java. I doubt there are much other programming languages dealing with 3 byte primitives. See also http://www.mail-archive.com/unicode@unicode.org/msg16010.html\n\nAlso I can vaguely remember that I ran into problems with writeUTF() when I invented Net4j years ago, but it\u0027s likely that they were caused by misusage. What about the length of the string, can it be longer than 2^16 characters? I hope so!\n\nHonestly, I don\u0027t believe. See the JavaDoc for DataOutputStream.writeUTF():\n\"First, two bytes are written to the output stream as if by the writeShort method giving the number of bytes to follow. This value is the number of bytes actually written out, not the length of the string.\"\n\nThis clearly indicates that even in the best case (each character represented by single octet) we can only transfer Strings with a max length of 2^16 characters which is much less than what String.length() allows.\n\nThis doesn\u0027t mean that I\u0027m against using writeUTF but it seems that we have to call it in a loop until the whole String is written. Thoughts?\n\n---\n\nBTW. I find the whole story quite weird. JavaDoc of String says: \"A String represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Unicode Character Representations in the Character class for more information). Index values refer to char code units, so a supplementary character uses two positions in a String.\"\n\nI feel as if I\u0027m sent back to school -- and have no clue ;-)\n\n\n\n",
    "I\u0027ve written a TC: org.eclipse.net4j.util.tests.UTFTest\nIt tries to writeUTF() a string that is longer than (1^16)-1 characters.\nImpossible:\n\njava.io.UTFDataFormatException: encoded string too long: 65540 bytes\n\tat java.io.DataOutputStream.writeUTF(DataOutputStream.java:347)",
    "I\u0027ve provided a second TC that writes only 32767 (less than the hlf of the first TC) BUT each character needs 3 octets in UTF-8:\njava.io.UTFDataFormatException: encoded string too long: 98301 bytes\n\nThis is really -1 for Java!!!\nI don\u0027t know of a simple way to determine how short/long a subsequence of a string must be in characters so that writeUTF() won\u0027t fail!\nMaybe this was the reason why I didn\u0027t use writeUTF years ago. Need proposals...\n\nBTW. do you know why the current approach of sending char array chunks does not work for you?\n",
    "Intersting: http://c-jdbc.objectweb.org/current/doc/api/org/objectweb/cjdbc/common/stream/CJDBCOutputStream.html#writeUTF(java.lang.String)",
    "Changed org.eclipse.net4j.util.io.ExtendedIOUtil to use writeUTF() and readUTF() to send Strings in 21K chunks.\nAll current TCs pass.\n\nCommitted to CVS.",
    "Sorry.. I was really busy today!!!\nIt seems that you solve the UTF problems!! Really cool!!\n\nThank you!\n\n\nYou asked many questions.. does some of them still require answer ? ??\n\n\n\n\n",
    "(In reply to comment #9)\n\u003e You asked many questions.. does some of them still require answer ? ??\nIf the fix works for your, no ;-)\n",
    "Fixed in I200710101632."
  ],
  "commentCreationDates": [
    "2007-09-18T20:49:18+02:00",
    "2007-09-18T20:51:42+02:00",
    "2007-09-19T12:38:51+02:00",
    "2007-09-19T13:20:10+02:00",
    "2007-09-19T18:16:38+02:00",
    "2007-09-19T18:48:12+02:00",
    "2007-09-19T19:20:11+02:00",
    "2007-09-19T19:29:39+02:00",
    "2007-09-19T19:55:46+02:00",
    "2007-09-20T00:13:26+02:00",
    "2007-09-20T09:08:13+02:00",
    "2007-10-16T11:22:24+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.UTFDataFormatException",
      "message": "encoded string too long: 65540 bytes",
      "elements": [
        {
          "method": "java.io.DataOutputStream.writeUTF",
          "source": "DataOutputStream.java:347"
        }
      ],
      "number": 0,
      "commentIndex": 5,
      "bugId": "203866",
      "date": "2007-09-19T18:48:12+02:00",
      "product": "EMFT",
      "component": "CDO",
      "severity": "normal"
    }
  ],
  "groupId": "203866",
  "bugId": "203866",
  "date": "2007-09-18T20:49:18+02:00",
  "product": "EMFT",
  "component": "CDO",
  "severity": "normal"
}