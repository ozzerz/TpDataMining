{
  "comments": [
    "While SWT is superior to AWT in many ways, SWT currently falls short of its \ncounterpart in the realm of automated whitebox GUI testing.  We are currently \nworking on extending Abbot, a Java GUI testing framework originally intended \nfor AWT, for use with SWT to allow for whitebox testing of SWT GUIs.  To \naccomplish this, we need the capability to programmatically manipulate SWT \nWidgets in a manner that mimics the user.  To this end, we need to be able to \nlocate ANY Widget in display-coordinates. \n\nCurrently, only Controls have a getLocation() method that provides this \nfunctionality (by calling parent.toDisplay(control.getLocation()).   Other \nspecific subclasses of Widget have a getBounds() method- Caret, CoolItem, \nDecorations, TableItem, ToolItem, and TreeItem- that allow us to find instances \nof these classes in display coordinates.  And Menu has a public handle that \nallows for a platform-specific means of locating the Menu in display \ncoordinates.  This leaves MenuItem, TabItem,  TableColumn, and Tracker, at \nleast right now, unfindable.\n\nThe problem, then, lies in both the non-uniformity of these strategies to \nobtain something as simple as display coordinates and the lack thereof for \nWidgets of type MenuItem, TabItem, TableColumn, and Tracker.  We would like to \nrequest the addition of method(s) that, given an instance of a Widget, would \nreturn an org.eclipse.swt.graphics.Rectangle representing the bounding box for \nthe Widget in Display coordinates.\n\nAnd a final note.  Methods like getLocation, getBounds, and set/getFocus are \nonly available to particular sub-classes of Widget, but these methods are \napplicable to ALL (or nearly all) Widget subclasses.  It would be worthwhile, \nthen, to include these methods in the abstract class Widget and handle special \ncases by overriding these methods in Widget sub-classes.  I am aware that these \noperations- particularly set/getFocus- may not be applicable to particular \nWidget sub-types.  In these cases, however, it would be logical to execute the \nparent\u0027s appropriate method instead.  For example, we would give focus to the \nWidget\u0027s parent, or return the bounding box for the parent, if it were not \npossible to do so for a particular Widget sub-type itself.",
    "Check the map API in Display:\npublic Rectangle map (Control from, Control to, Rectangle rectangle) \n\nYou should call this API to map the coordinates from a Control to the Display, \nyou should also give a rectangle (getBounds) and not a point (getLocation) to \ndo this kind of operation. It\u0027s important if you are running on a Mirrored \ncoordinates system (arabic/hebrew).\n\nStill, this does not solve all your problems...\n\nSN to advise.\n",
    "Could you please provide getBounds() for all Widget\u0027s? Why I ask:\n\nIn order for an SWT automation tool to programmatically interact with\na target, it must be able to\n\n0 use information provided by the coder to identify the target\n\n1 get the size or position of the target\n\n2 generate native events using those coordinates\n\nFortunately\n\n* task 0 is done by navigating the graphical hierarchy\n\n* task 1 is easy if your target is a Control\n\n* there are at least two ways to do task 2 (using abbot.swt.Robot, in\n\nhttp://sourceforge.net/projects/abbot\n\n  or Sebastian Peleato\u0027s API)\n\nThe problem is that not all targets are Control\u0027s, especially if one\nwishes to automate menu picking/navigation. We have workarounds, but\nthey are platform-specific (which complicates tool building and\ndeployment), underperformant (which degrades the user\u0027s experience),\nand just plain kludgey.\n\nCan you please provide getBounds(), or as similar API as possible, for\nall Widget\u0027s, not just Control\u0027s? In 3.0?\n",
    "As a member of the WSAD performance team, I strongly support Tom / Kevin\u0027s \nrequest.  Today we are using XDE Tester, which only supports a \"black box\" \napproach.  It requires training and finessing to keep the scripts running; the \nsupport for Eclipse 3.0 is pending.  I believe that Abbot / Costello for SWT \nwould be a better fit for our needs and those who hope to systematically track \nperformance regressions.\n\nBackground: Gary Karasiuk, Sonia Dimitrov, and myself recently finished some \nwork to integrate our performance plug-in, ptracker, into the Eclipse build.  \nThe goal is to supplement the JUnit launcher used today with one that captures \nkey performance metrics with each build.  This will allow the Eclipse team to \nfind performance regressions the day after they occur (not weeks!), saving \ncountless hours of post-build detective work.\n\nAbbot / Costello is a natural extension of this effort.  Today our performance \ntestcases are limited to what can be executed in JUnit.  These testcases, \nwhile very good at detecting regressions in functionality, only approximate \nthe true user experience.  If the underlying support for Abbot is completed, \nmyself and others on our team will provide high-level **real** user scenarios \nto the Eclipse build team to fill out the incomplete performance regression \ncapability.  This obviously won\u0027t occur if we are reliant exclusively on XDE \nTester as we are today.\n\nSWT\u0027s use of native widget makes 80% of Abbot\u0027s job easy.  However, the last \n20% that is missing makes its usage klunky, awkward, slow, and unreliable.  We \nwould really like to see SWT supported as a first-class citizen among \nautomated testing tools, and Abbot / Costello seems to be the obvious choice.",
    "We have attempted various workarounds to this problem (the lack of getBounds() \nfor non-Control widgets)- for example, making an SWT API call to setSelection\n(boolean) in a testcase instead of actually generating a mouse-click input \nevent.  This, however, is unacceptable, as it makes for testcases that do not \naccurately reflect a realistic user scenario.  We\u0027ve also tried making \napproximations of a widget\u0027s size and location based on its text/image content, \nbut this incomplete approach is not a final solution either.\n\nThe lack of getBounds() for MenuItems is particularly debilitating.  Currently, \nthe only way to automate MenuItem selection is to do so via accelerators and \nkeystrokes.  However as Tom mentioned above, this method cannot consistently \nwork across platforms and applications and is flimsy at best.\n\nI\u0027m beginning work on a patch for MenuItem.getBounds(), starting with win32.  \nIt appears that wrapping the native win32 method GetMenuItemRect(HWND, HMENU, \nUINT, LPRECT) should (essentially) provide the functionality we need.  And \nhopefully a similar approach will work with the other supported windowing \nsystems.\n\nThe patch should allow Abbot to deal with MenuItems in much the same way as it \ndoes Controls, and the added consistency in implementation will result in a \nmore reliable and capable testing tool.  In particular, testcases will be able \nto include menu navigation via mouse clicks.  This method is certainly more \nrepresentative of real user interaction than what Abbot\u0027s current capabilities \nallow.   \n\nHOWEVER, there will still be important non-Control widgets that lack a getBounds\n() method- TableItem, TreeItem, CoolItem, ToolItem, and Scrollbar- basically \nany widget that a user can click that does not already provide a getBounds() \nmethod.  ",
    "Disregard the last paragraph of my most previous post- it doesn\u0027t reflect the \nmost recent SWT API.  The amended list of widgets that lack a getBounds() \nmethod should be- MenuItem, TableColumn, Tab, and ToolItem.  I\u0027ll be working on \na patch for all of these in the coming week.",
    "Created an attachment (id\u003d10629)\nInitial patch for various getBounds() methods\n\nOn Windows, I\u0027ve implemented the following:\n\n\t- TableColumn.getBounds()\n\t- TabItem.getBounds()\n\t- MenuItem.getBounds()\n\nThe first two have no restrictions; MenuItem.getBounds(), however, currently\nonly works for items in bar menus, as I am only able to obtain the size of a\ngiven MenuItem in a cascade or popup menu but not its location.  In particular,\nGetMenuItemRect doesn\u0027t appear to work as advertised in the win32\ndocumentation, and I\u0027m not sure where to go from here.\tAny help with this\nparticular problem would be greatly appreciated.\n\nThe attached zip file contains fixes bound by \"//TODO: Begin patch\" and\n\"//TODO: End patch\".  Changes were made in org.eclipse.swt.internal.win32.OS\nand org.eclipse.swt.widgets.{MenuItem,TableColumn,TabItem}.  I will also be\npassing along an Abbot-driven JUnit test case that demonstrates the new\nfunctionality to Dan Kehn.  \n",
    "Created an attachment (id\u003d10676)\nMenuItem.getBounds() fix\n\nIncludes everything in the previous patch(10629), plus a new-and-improved\nMenuItem.getBounds() for win32 with no restrictions.  It now works on items in\nbar, cascading, and popup style menus.",
    "*** Bug 39184 has been marked as a duplicate of this bug. ***",
    "Can provided Widget-location patches be rolled into SWT 3.0?\n(Not M9, but 3.0 final.) Why I ask:\n\nAutomation is important. SWT\u0027s failure to provide the ability to\nlocate (and therefore drive) all Widget\u0027s presents a competitive\ndisadvantage, given that AWT/Swing allows one to find all its\nComponent\u0027s.\n\nIf SWT (the organization) fails to provide this, automators will need\nto patch SWT (the code), minimally for menuing. An automation tool has\ngotta have menuing: there\u0027s just too much tooling that\u0027s inaccessible\nwithout it. (E.g. a friend in another IBM group wants to start testing\na GEF-based component, but can\u0027t because the component allows a user\nto interact with its figures only through context menus.) We will\neventually need the other non-Control Widget\u0027s, but we need menuing\nnow.\n\nSo I\u0027m wondering, how can we get this into 3.0? Note that\n\n* academic summer being upon us, my group has some more resources\n  available, so we can assist with this task.\n\n* I\u0027m frankly skeptical regarding the claim made in\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d39184\n\n  that this can\u0027t\n\n\u003e happen for 3.0 because we are API frozen (unless mountains are moved\n\u003e with the PMC).\n\n  for 2 reasons:\n\n? This is new API. Since no one\u0027s currently using it, how can it\n  break anyone? Feel free to deprecate the API, \"label as hazardous,\"\n  whatever, to protect the innocent.\n\n? Is there now, or has there ever been, any positive argument for\n  not implementing getBounds() for {MenuItem, TableItem, TreeItem,\n  CoolItem, ToolItem}? I.e. \"we should not implement getBounds() for\n  these classes, because \u003cyour positive argument here/\u003e\"? I suspect\n  not, but I could be wrong.\n\nNote also that we will cheerfully kiss rings, move mountains, etc with\nthe PMC as required--but I frankly don\u0027t see that as a valid objection\nto enabling this API, which folks need ... given that an (admittedly\npartial) implementation is being handed to SWT. So ... how best to get\nthis into 3.0 final?\n\n",
    "*** Bug 48341 has been marked as a duplicate of this bug. ***",
    "Created an attachment (id\u003d11493)\nSWT patch for MenuItem.getBounds() that returns an empty rectangle for\ninvisible items\n",
    "Created an attachment (id\u003d11498)\nTest case showing getBounds() for visible and nonvisible menu items\n",
    "The patch I just posted (SWT patch for MenuItem.getBounds() that returns an\nempty rectangle for invisible items) is the same as the earlier patch that Kevin\nwrote, except for an update to MenuItem.getBounds() that causes it to return an\nempty rectangle instead of garbage in the case when the menu item is not\nvisible.  This is done by checking the return value of GetMenuItemRect, which\nindicates whether menu item bounds were able to be calculated.\n\ngetBounds() returns coordinates that are relative to the client area of the\nDecorations that is the parent of the Menu that the MenuItem belongs to.  This\nmeans that getBounds() can return a rectangle that has negative coordinates. \nThis is seen on Windows: the y-coordinate returned will be negative for menu\nitems on the menu bar since these items lie above the client area.  This does\nnot pose a problem, however, since these relative coordinates can easily be\nturned into screen coordinates through Control.toDisplay().  Therefore in all\ncases that we have tested this patch returns correct bounds in a manner that is\nconsistent with getBounds() on other widgets that implement getBounds().\n\nI have also posted a test case that dynamically displays the result of getBounds\nfor several MenuItems.  In running the test it is possible to see how the\nbounding rectangle changes from empty to nonempty as menu items are revealed and\nhidden.\n",
    "I have been thinking more about MenuItem.getBounds() and I\u0027m coming to the \nconclusion that we shouldn\u0027t implement it (instead we should add a new API \nthat returns widget bounds in Display coordinates).  The problem is that on \nthe Macintosh, the menu bar is not in the shell.  We can fake this but it \nwon\u0027t match the operating system and will have the amazing property that the \ncoordinates will be wrong when the shell is moved.  This will happen because \nwhen the shell is moved but on the Macintosh, the menu bar stays in the same \nlocation instead of moving with the shell like the other platforms.  I\u0027m stuck \non an API name that means \"get the bounds in the display coordinate system\".  \nAt any rate, the API would be exactly what you need, no coordinate mapping.",
    "Re: Comment #14\n\nUnder the Monty Python category, \"And now for something completely \ndifferent...\"\n\nI believe you\u0027re correct Steve.  Thinking about it a bit further, two viable \napproaches come to mind: (a) a new method \"getBoundsRoot\" (borrowed from \nsimilar name in VA/ST, where \"root\" means screen) as you suggest, or (b) an \nadapter.  The advantage of (b) is that it gets SWT out of the loop entirely, \nsince any framework could provide a set of adapters to the APIs we desire.  \nOne method in Widget does it all:\n\n  public Object getAdapter(Class adapter) {\n    return Platform.getAdapterManager().\n      getAdapter(this, adapter);  // note Platform reference... see PS below\n  }\n\nNow that core implements the extension \npoint \"org.eclipse.core.runtime.adapters\" (it\u0027s new and yes, I\u0027ve tested this \nin other code and it works as advertised), this is a cost-free alternative \nfrom a performance perspective (i.e., before there was no means of registering \nan adapter except through code, forcing your plug-in\u0027s activation).  Then \nAbbot for SWT can handle this little problem on its own in a nice, clean, \narchitected way.  If you want to move it later into the SWT layer, great, but \nthere\u0027s certainly no urgent need.\n\nSince this extension point is relatively new, I\u0027ll provide an example of what \nit would look like in the Abbot4SWT implementation:\n\n  \u003cextension point\u003d\"org.eclipse.core.runtime.adapters\"\u003e\n    \u003cfactory \n        adaptableType\u003d\"org.eclipse.swt.widgets.Widget\"\n        class\u003d\"org.abbot4swt.WidgetAdapterFactory\"\u003e\n      \u003cadapter type\u003d\"org.abbot4swt.WidgetCoordinateMapper\"/\u003e\n    \u003c/factory\u003e\n  \u003c/extension\u003e\n\nThe Abbot for SWT folks provide WidgetCoordinateMapper and \nWidgetAdapterFactory.  If there are exception cases (e.g., MenuItem), they \neither (a) handle it in their WidgetCoordinateMapper with instanceof, or (b) \nprovide a widget-specific adapter (e.g., MenuItemCoordinateMapper).\n\nIt also opens the door to future adaptation should we discover \"SWT \nshortcomings\" later.  So how about it, one little method?  Tempted?  :-)  \n\nPS: Of course, one gotcha of this approach is the reference to Platform... \nwhich presupposes the Eclipse platform runtime is present.  That would mean \neither reflection (returning null if not found) or a fragment.  Not perfect, \nbut extensible and gets SWT out of the discussion, now and in the future.",
    "Steve Northover  2004-06-03 09:43 -------\n\u003e I have been thinking more about MenuItem.getBounds() and I\u0027m coming\n\u003e to the conclusion that we shouldn\u0027t implement it (instead we should\n\u003e add a new API that returns widget bounds in Display coordinates).\n\nThat would be great! I continue to believe that API should be\navailable to \n\n* get the bounds of any Widget, just as one can get the bounds of any\n  JComponent. \n\n* return consistent co-ordinates for any Widget\n\nIt\u0027s the inconsistency of the present situation\n\nThomas L Roche/Raleigh/IBM@IBMUS 05/28/2004 08:38 PM\n\u003e\u003e Widget child  has getBounds()?\n\u003e\u003e ------------  ----------------\n\u003e\u003e Caret         yes,\n\u003e\u003e               parent \u003d\u003d null ? relative to display : relative to parent\n\n\u003e\u003e Control       yes,\n\u003e\u003e               parent \u003d\u003d null ? relative to display : relative to parent\n\n\u003e\u003e DragSource    no, but has getControl()\n\n\u003e\u003e DropTarget    no, but has getControl()\n\n\u003e\u003e Item          no\n\n\u003e\u003e Menu          no, we workaround with getParent().getBounds()\n\n\u003e\u003e ScrollBar     yes, no javadoc but looks relative to its parent\n\n\u003e\u003e Tracker       no, but has computeBounds()\n\n\u003e\u003e Tray          no\n\nthat most annoys.\n\n\u003e The problem is that on the Macintosh, the menu bar is not in the\n\u003e shell. We can fake this but it won\u0027t match the operating system and\n\u003e will have the amazing property that the coordinates will be wrong\n\u003e when the shell is moved. This will happen because when the shell is\n\u003e moved but on the Macintosh, the menu bar stays in the same location\n\u003e instead of moving with the shell like the other platforms.\n\nI believe we can live with this. We have never asked for completeness\non all platforms (much less API contracts engraved on tablets)--we\nunderstand that some platforms will do things differently. However it\nis difficult to imagine a platform that did not know the bounds of a\nthing it was drawing, hence providing bounds-getting API (by whatever\nname) on Widget makes sense.\n\nDan Kehn 2004-06-03 11:28 -------\n\u003e Thinking about it a bit further, two viable approaches come to mind:\n\u003e (a) a new method \"getBoundsRoot\" (borrowed from similar name in\n\u003e VA/ST, where \"root\" means screen) as you suggest, or (b) an adapter.\n\nor (c) both.\n\n\u003e The advantage of (b) is that it gets SWT out of the loop entirely,\n\u003e since any framework could provide a set of adapters to the APIs we\n\u003e desire.\n\nTrue, but this is a case where the existing SWT API is noticeably\nfragmented. (c) is best, but (a) is preferable to (b).\n\n\u003e PS: Of course, one gotcha of this approach is the reference to\n\u003e Platform... which presupposes the Eclipse platform runtime is\n\u003e present.\n\nWhich is gonna hose testing standalone (non-platform-resident) SWT\nUIs, no? (b) alone is likely to be insufficient.\n",
    "Along the same line of implementing getBounds() in various widgets, there are\nother widgets that implement getBounds() in ways that are less than ideal for\nautomated testing.  One of these is TableItem.getBounds(int).  This returns a\nbounding box for the entire item, which for purposes of consistency is probably\nwhat should happen.  However, selecting an item by clicking on it can only be\ndone by clicking on the table item\u0027s text or image.  There is no way to get the\nbounds of the area that can be clicked (presumably the union of the image and\ntext bounds).  Are there issues that would make providing this in the API\n(something like TableItem.getClickableBounds(int)) undesirable?  The only\nworkaround that I can foresee for testing is to check the style of the column\nthe text is in and give a default location to click on based on whether it is\nleft, right, or center.\n",
    "Some platforms allow you to click anywhere on the same line.  In general, it\u0027s \nunspecified where you click and with which button.",
    "Steve N., Is there a chance to make progress on this for test tool enablement \nin 3.0.1?  Could you set the target milestone for 3.0.1 or 3.1 as appropriate?\n",
    "I will mark it when I we have finished assessing the rest of the items.",
    "Steven Wasleski  2004-07-20 14:32 -------\n\u003e Could you set the target milestone for 3.0.1 or 3.1 as appropriate?\n\nExtra points for 3.0.1! Patching is a drag :-(\n",
    "This item is still under investigation and will not be added to 3.0.1.",
    "Steven Wasleski  2004-07-20 14:32 -------\n\u003e\u003e Could you set the target milestone for 3.0.1 or 3.1 as appropriate?\n\nVeronika Irvine 2004-08-25 12:16 -------\n\u003e This item is still under investigation and will not be added to\n\u003e 3.0.1.\n\nCould you set the target milestone?\n",
    "I committed a description of our current patches to the abbot.swt documentation\n\nhttp://cvs.sourceforge.net/viewcvs.py/*checkout*/abbot/abbot.swt/doc/swt/patchingSWT.txt?rev\u003d1.7\n\nSame content is available in slightly different form from\n\nhttp://sourceforge.net/mailarchive/message.php?msg_id\u003d9665074\n",
    "Thanks.  I was actually working on the menu part of this last week but could \nfind no way for the Mac to give back the coordinates of items in the menu \nbar.  It seems that owner draw isn\u0027t honoured for Mac menu bars.  I tried \nreaching and getting the MenuBarHandle and looking at the \"lastRight\" \nand \"menuLeft\" fields of the substructures.  The documentation says that they \naren\u0027t when SetRootMenu() is used but I was desparate.  I tried every \nkEventMenu that there was including the amazing kEventMenuGetFrameBounds but \nthis is only called when the user has clicked on a menu bar item.\n\nHow do automated testing applications move the mouse into the Mac menu bar and \nhittest the items there?  I googled for CGPostMouseEvent() hoping to find \nexample code that did this.  Even MenuSelect(), the Mac call that runs the \nmenu bar for the user takes a mouse location.\n\nAndre?",
    "If it turns out to be impossible to get the actual bounds for a component, you may have to rely on \nprogrammatically activating the component given a proper specification of the final target.  This \nunfortunately leaves out actual display operation of the UI component, which sometimes needs to be \ntested, but probably the more common case is needing to be able to activate a given menu item.\n\nMac OSX uses AWT components as proxies for the equivalent Swing menu bits when the \nuseScreenMenuBar property is set (which it should be for any OSX java app).  The AWT menu items \nprovide no location information (actually rendering the location information of the original Swing \ncomponents invalid), so they have to be driven programmatically.\n\nUnfortunately, I don\u0027t know enough about native Mac OS programming to indicate whether the location \ninfo is available or not...",
    "Hi Tom, I checked out your patches.  It seems to me that none of them need to \nbe in SWT classes.  For example, consider the hypothetical method \nSWT_PATCH.TabItem_getBounds():\n\npublic Rectangle TabItem_getBounds(TabFolder parent){\n   int index \u003d parent.indexOf(this);\n   if (index \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n   RECT rect \u003d new RECT();\n   OS.SendMessage( parent.handle,\n           OS.HDM_FIRST + 7 /*OS.TCM_GETITEMRECT*/,\n           index,\n           rect);\n   int width \u003d rect.right - rect.left;\n   int height \u003d rect.bottom - rect.top;\n   return new Rectangle(rect.left,rect.top,width,height); \n}\n\nThe advantage of this is that you don\u0027t need to patch SWT with your changes \nand the work needed to port them to other platforms is isolated in one class.  \nThe disadvantage is that it is ugly as hell.\n\nHopefully we can implement what you need and the issue becomes moot.",
    "Comments From steve_northover@ca.ibm.com  2004-11-23 10:52 -------\n\u003e It seems to me that [none of the abbot.swt patches] need to be in\n\u003e SWT classes. For example, consider the hypothetical method\n\u003e SWT_PATCH.TabItem_getBounds():\n\n\u003e public Rectangle TabItem_getBounds(TabFolder parent){\n\u003e    int index \u003d parent.indexOf(this);\n\u003e    if (index \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n\u003e    RECT rect \u003d new RECT();\n\u003e    OS.SendMessage( parent.handle,\n\u003e            OS.HDM_FIRST + 7 /*OS.TCM_GETITEMRECT*/,\n\u003e            index,\n\u003e            rect);\n\u003e    int width \u003d rect.right - rect.left;\n\u003e    int height \u003d rect.bottom - rect.top;\n\u003e    return new Rectangle(rect.left,rect.top,width,height); \n\u003e }\n\n\u003e The advantage of this is that you don\u0027t need to patch SWT with your\n\u003e changes\n\nwhich would be nice, but ...\n\n\u003e and the work needed to port them to other platforms is isolated in\n\u003e one class.\n\n... that keeps the platform port effort isolated onto the shoulders of\nour zero-FTE-headcount OSS project. Would it not be so much more\nsecurely borne by you SWT professionals ?-) After all, the Sun folks\ndon\u0027t make us support AWT/Swing API ...\n\nPlus, it\u0027s s/one class/one class per patched widget/, and rewriting the\n*Finder and *Tester classes that use them, but those are minor concerns\nrelative to maintaining the proper (IMHO, YMMV) separation of concerns/\neffort.\n\n\u003e Hopefully we can implement what you need and the issue becomes moot.\n\nThat\u0027s what _I\u0027m_ hoping :-)\n",
    "Given that you are forced into patching, why not patch in the most optimal \nway?  Put all the work arounds in a single (ugly) class that is outside of the \nlibrary rather than adding them as methods to the classes where they belong.  \nThat way, no one changes anything and odds are good that your code will \ncontinue to work when the next release of the library ships.  There are more \ngood reasons for this.  Suppose that when the methods are added, they return \nsomething different or use a different coordinate system.  You can isolate \nthose changes in the ugly class.  Also, suppose that when the bug is fixed or \nthe feature implemented, someone applies your patches over the fix by \nmistake.  That seems wrong.  You should be testing the fixed code, not the \npatch.  Imagine that the bug never gets fixed.  You are no worse off and \nnobody needs to patch anything.\n\nThis just seems like good software engineering to me.",
    "Additional Comment #27 From Steve Northover  2004-11-23 10:52 -------\n\u003e\u003e\u003e consider the hypothetical method SWT_PATCH.TabItem_getBounds():\n\n\u003e\u003e\u003e public Rectangle TabItem_getBounds(TabFolder parent){\n\u003e\u003e\u003e    int index \u003d parent.indexOf(this);\n\u003e\u003e\u003e    if (index \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n\u003e\u003e\u003e    RECT rect \u003d new RECT();\n\u003e\u003e\u003e    OS.SendMessage( parent.handle,\n\u003e\u003e\u003e            OS.HDM_FIRST + 7 /*OS.TCM_GETITEMRECT*/,\n\u003e\u003e\u003e            index,\n\u003e\u003e\u003e            rect);\n\u003e\u003e\u003e    int width \u003d rect.right - rect.left;\n\u003e\u003e\u003e    int height \u003d rect.bottom - rect.top;\n\u003e\u003e\u003e    return new Rectangle(rect.left,rect.top,width,height); \n\u003e\u003e\u003e }\n\n\u003e\u003e\u003e The advantage of this is that you don\u0027t need to patch SWT with\n\u003e\u003e\u003e your changes\n\nAdditional Comment #28 From Tom Roche  2004-11-23 12:28 -------\n\u003e\u003e which would be nice, but ...\n\n\u003e and the work needed to port them to other platforms is isolated in\n\u003e one class.\n\n\u003e\u003e ... that keeps the platform port effort isolated onto the shoulders\n\u003e\u003e of our zero-FTE-headcount OSS project. Would it not be so much more\n\u003e\u003e securely borne by you SWT professionals ?-) After all, the Sun\n\u003e\u003e folks don\u0027t make us support AWT/Swing API ...\n\nComments From steve_northover@ca.ibm.com  2004-11-23 12:58 (rearranged)\n\u003e Given that you are forced into patching, why not patch in the most\n\u003e optimal way?\n\nYour rhetorical question is correct (not so sure about this sentence,\nthough :-). But I keep wondering {why I am, how long I will continue\nto be} forced into patching this.\n\n\u003e Put all the work arounds in a single (ugly) class that is outside of\n\u003e the library rather than adding them as methods to the classes where\n\u003e they belong. \n\nOK, in order to patch this way, what\u0027s the best locus for that class?\nIIUC the patches are minimally platform-dependent, and maximally\nSWT-version dependent. Remember, I\u0027m trying to isolate abbot.swt (and\nabbot.swt.gef, etc) users from \"raw\" SWT--how best to isolate\nabbot.swt.* from these dependencies? A separate plugin?\n\n\u003e That way, no one changes anything and odds are good that your code\n\u003e will continue to work when the next release of the library ships.\n\u003e There are more good reasons for this. Suppose that when the methods\n\u003e are added, they return something different or use a different\n\u003e coordinate system. You can isolate those changes in the ugly class.\n\nYes, I understand the goodness of Adapter and Decorator ...\n\n\u003e Also, suppose that when the bug is fixed or the feature implemented,\n\u003e someone applies your patches over the fix by mistake. That seems\n\u003e wrong.\n\nOh, it will be--once you fix SWT, I\u0027m gonna pull the patches off\nSourceForge so fast the servers will spin :-)\n\n\u003e This just seems like good software engineering to me.\n\n... and work for me. FWIW I\u0027d much rather be working on enabling users\nto write (and hopefully TDD) SWT tests, and getting more coverage for\nmy own tests, than adapting SWT to work with j.a.Robot as AWT does\nalready. That being said, if it\u0027ll save me from patching again, I\u0027ll\ndo it. Note that my assumption was that, having patched once, the\nconcept would be proven, and I wouldn\u0027t hafta patch again ...\n",
    "Ok, I give up.  I was trying to help you in case we don\u0027t get to this for 3.1. \nThere is an art to ugly things.  If you can\u0027t see it, then you never will.",
    "Created an attachment (id\u003d16239)\nswt_patch3.zip for eclipse 3.1.M3\n\nThis is an EXACT port of the changes made to swt-3.0.1 in swt-3.1.M3.\n\nHaving this, or a similar fix, in the eclipse 3.1 line would be VERY\nhelpful. Thank you to everyone who has already done all the work on\nthis issue.\n\nIf you download this patch, please, post a note showing your interest\nin the fix.",
    "I\u0027m still stuck on the Mac.  If there is no possible way to get the bounds of \na menu item in a Mac menu bar, then MenuItem.getBounds() can never be SWT API.\n\nAndre?  Where are you?",
    "\u003c\u003c If there is no possible way to get the bounds of a menu item in a Mac menu \nbar, then MenuItem.getBounds() can never be SWT API. \u003e\u003e\n\nIt\u0027s not unprecedented that GUI whitebox testers have platform-specific \nlimitations. So although it\u0027s not ideal, you could throw \nUnsupportedOperationException. ",
    "The thinking is as follows:  There are automated GUI testing tools on the \nMac.  I can\u0027t believe that they don\u0027t test menus in the menu bar.  What do \nthey do?  Whatever they do, we should do the same thing rather than offering \nAPI that can\u0027t be implemented.  I\u0027m hoping that there\u0027s something I\u0027m missing \nand that we will be able to make MenuItem.getBounds() work on a Mac.",
    "A quick search on developer.apple.com shows that the MacOS has native calls to determine the bounds \nof a menu item.\n\nThe comments I made previously about the bounds being unavailable applies only to the AWT menus \nproviding no API to determine their location (this applies to *all* platforms).  When OSX uses AWT \nmenus as proxies for Swing menus, the Swing items\u0027 bounds information becomes invalid.",
    "Timothy, can you post the URL to the Mac native calls?",
    "Sorry Steve, I forgot about this PR after some unsuccessful investigation.\nI\u0027ll spend a \"Support Incident\" with ADC if nothing useful shows up until tomorrow.",
    "I couldn\u0027t find any API to calculate the bounds of a menu item directly, but I think it should be possibIe \nto use the menu definition function for this.\nI haven\u0027t tried this, but you could send a \"kMenuCalcItemMsg\" to the menuProc where you pass in the \nmenuItem. The parameter menuRect will contain the item bounds on return.\n",
    "Another (ugly) approach could be probing:\nyou could generate screen coordinates that run from the left to the right screen bound and an \nincrement of about 10 with a vertical position of menuBar.height/2 and map these coordinates to menu \nitems with available API.",
    "I already had a go at probing (yetch) and failed.  It seems that the only time \nyou can ask this information is when a drop down menu is pulled down.  Then, \ninside the \"cascade callback\", you can get the bounds of the item that was \nselected.  This (of course), is too late.  I have workspace full of unreleased \nhack that I am sitting on that I can make available for you to try,\n\nDo you know how the menu definition function differs from carbon events?  I \nsaw kMenuCalcItemMsg but thought that because we didn\u0027t use a custom menu \ndefinition that it didn\u0027t apply.  Also I had no clue how to send a fake menu \ndefinition function event like kMenuCalcItemMsg.  Also it seemed that this \nevent applied to MenuRefs, not MenuBarHandles (or the various things inside \nthem that represent the menu bar).\n\nPlease spend a support incident with ADC on this as it is holding up the API.",
    "OK, will do.\n(Shouldn\u0027t we create a new bug report for this? Whenever we add a new comment, most likely we are \nspamming a lot of people probably not too interested in the Mac...)",
    "I don\u0027t think so.  If people are uninterested in the progress on this bug \nreport, they can remove themselves.",
    "The trick is to use the Accessibility API.\n\nAfter some hacking I came up with the following piece of code\nwhich does what you are looking for (I passed in the SWT menubar handle):\n\nvoid dumpMenubarItemBounds(MenuRef menu) {\n\tAXUIElementRef ref\u003d AXUIElementCreateWithHIObjectAndIdentifier((HIObjectRef)menu, (UInt64)0);\n\tif (ref !\u003d NULL) {\n\t\tint i\u003d 0;\n\t\tCFArrayRef children;\n\t\tfprintf(stderr, \"menubar item bounds:\\n\");\n\t\tAXUIElementCopyAttributeValue(ref, kAXChildrenAttribute, (CFTypeRef*) \u0026children);\n\t\t\n\t\tCFIndex count\u003d CFArrayGetCount(children);\n\t\tfor (i\u003d 0; i \u003c count; i++) {\n\t\t\tCFTypeRef valueRef;\n\t\t\tCGPoint position;\n\t\t\tCGSize size;\n\t\t\tCFStringRef title;\n \t\t\t\n\t\t\tAXUIElementRef menuItem\u003d (AXUIElementRef) CFArrayGetValueAtIndex(children, i);\n\n\t\t\tAXUIElementCopyAttributeValue(menuItem, kAXTitleAttribute, (CFTypeRef*) \u0026title);\n\t\t\tconst char *t\u003d CFStringGetCStringPtr(title, kCFStringEncodingMacRoman);\n\t\t\n\t\t\tAXUIElementCopyAttributeValue(menuItem, kAXPositionAttribute, \u0026valueRef);\n\t\t\tAXValueGetValue(valueRef, kAXValueCGPointType, \u0026position);\n \n\t\t\tAXUIElementCopyAttributeValue(menuItem, kAXSizeAttribute, \u0026valueRef);\n\t\t\tAXValueGetValue(valueRef, kAXValueCGSizeType, \u0026size);\n            \t            \t\n\t\t\tfprintf(stderr, \"  %d %s: x:%d y:%d w:%d h:%d\\n\", i, t, \n\t\t\t\t(int)position.x, (int)position.y, (int)size.width, (int)size.height);\n            \t\n\t\t\tCFRelease(valueRef);\n\t\t\tCFRelease(title);\n\t\t}\n\t \tCFRelease(children);\n\t\tCFRelease(ref);\n\t}\n}\n",
    "Thanks!",
    "Andre, I added the following code in Menu.java (plus the natives to OS):\n\npublic Rectangle[] getItemBounds () {\n\tif ((style \u0026 SWT.BAR) !\u003d 0) return null;\t\n\tint menuRef \u003d handle;\n\tint ref \u003d OS.AXUIElementCreateWithHIObjectAndIdentifier (menuRef, (long)0);\n\tif (ref !\u003d 0) {\n\t\tint [] children \u003d new int [1];\n\t\tSystem.out.println(\"XAERROR: \" + OS.AXUIElementCopyAttributeValue (ref, \nOS.kAXChildrenAttribute (), children));\n\t\tint count \u003d OS.CFArrayGetCount (children [0]);\n\t\tRectangle [] result \u003d new Rectangle [count];\n\t\tint [] valueRef \u003d new int [1];\n        CGPoint position \u003d new CGPoint ();\n        CGSize size \u003d new CGSize ();\n\t\tfor (int i \u003d 0; i \u003c count; i++) {\n\t\t\tint menuItem \u003d OS.CFArrayGetValueAtIndex (children [0], i);\n            OS.AXUIElementCopyAttributeValue (menuItem, OS.kAXPositionAttribute(), valueRef);\n            OS.AXValueGetValue (valueRef [0], OS.kAXValueCGPointType, position);\n            OS.CFRelease (valueRef [0]);\n            OS.AXUIElementCopyAttributeValue (menuItem, OS.kAXSizeAttribute(), valueRef);\n            OS.AXValueGetValue (valueRef [0], OS.kAXValueCGSizeType, size);\n            OS.CFRelease (valueRef [0]);\n            result [i] \u003d new Rectangle ((int)position.x, (int)position.y, (int)size.width, (int)size.height);\n\t\t}\n\t\treturn result;\n\t}\n\treturn null;\n}\n\nBut when I execute it I get an AXERROR equals to -25211 (kAXErrorAPIDisabled), do you know how to \nfix this ?",
    "Interesting, for security reasons Apple disables the Accessibility API if the user hasen\u0027t enabled\nthe \"Enable access for assistive devices\"  option in System Preferences (I always have this option on to \nsee focus borders everywhere).\nYou can turn it on via the \"System Preferences \u003e Universal Access \u003e Enable access for assistive devices\"\n\nSorry, I didn\u0027t know that and had to Google for it...",
    "it looks like we can\u0027t use this API then :-(\n",
    "Why? The API is for whitebox testing.\nI don\u0027t see a problem to require that the option is turned on.\n",
    "Some call it a \"platform reality\" :-)",
    "Felipe Heidrich 2004-12-03 16:20 -------\n\u003e\u003e\u003e\u003e\u003e Andre, I added [Menu.getItemBounds()] (plus the natives to OS):\n\n\u003csnip\u003e\n\n\u003e\u003e\u003e\u003e\u003e But when I execute it I get an AXERROR equals to -25211\n\u003e\u003e\u003e\u003e\u003e (kAXErrorAPIDisabled), do you know how to fix this ?\n\nAndre Weinand 2004-12-03 17:00 -------\n\u003e\u003e\u003e\u003e Interesting, for security reasons Apple disables the\n\u003e\u003e\u003e\u003e Accessibility API if the user hasen\u0027t enabled the \"Enable access\n\u003e\u003e\u003e\u003e for assistive devices\" option in System Preferences (I always\n\u003e\u003e\u003e\u003e have this option on to see focus borders everywhere). You can\n\u003e\u003e\u003e\u003e turn it on via the \"System Preferences \u003e Universal Access \u003e\n\u003e\u003e\u003e\u003e Enable access for assistive devices\"\n\n\u003e\u003e\u003e\u003e Sorry, I didn\u0027t know that and had to Google for it...\n\nFelipe Heidrich 2004-12-03 17:14 -------\n\u003e\u003e\u003e it looks like we can\u0027t use this API then :-(\n\nAndre Weinand 2004-12-03 17:27 -------\n\u003e\u003e Why? The API is for whitebox testing.\n\u003e\u003e I don\u0027t see a problem to require that the option is turned on.\n\nAndre Weinand 2004-12-03 17:40 -------\n\u003e Some call it a \"platform reality\" :-)\n\nAgreed: it\u0027s realistic to assume the user will need to do other things\nto \"instrument,\" or enable testability for, any given platform @\nruntime. As long as it compiles, and doesn\u0027t break other function, I\ndon\u0027t see a problem with, e.g., javadoc\u0027ing or FAQ\u0027ing similar\nrequirements--\"call at your own risk.\" It Would Be Nice if s/he didn\u0027t\nhafta, but that may be the price to pay for automation.\n",
    "Display.setCursorLocation(point) does nothing on some platforms, so maybe this \nmethod could nothing, or return an empty rectangle when accessibility is \ndisabled.",
    "An empty rectangle isn\u0027t an option when the option is disabled.  How about \ntrying Apple again for another approach?",
    "Yes, I\u0027ve contacted DTS and for security reasons there is no other approach.",
    "The Mac has been around since 1984.  It is 2004 (almost 2005).  HIObject is \nnew to OS 10.x.  In all those years nobody has written a GUI testing tool that \npulls down a menu bar menu and selects an item?  Andre, can you please ask \nagain how GUI testing tools perform this action?  The issue here is that \nhaving an API that fails and requires the user to change something on the \ncontrol panel is not a good solution.\n\nThanks.",
    "Steve, so what is the issue now?\n- getting API so that SWT can implement Menubaritem.getBounds(), or\n- driving the Mac UI from another process?\n\nWhether GUI testing tools existed before MacOS X (1984-2001) doesn\u0027t really matter since they could \neasily patch the OS and wouldn\u0027t run anyway on MacOS X.\n",
    "The first hope is that we could get API to implement MenuItem.getBounds() that \ndoesn\u0027t require the user to set something in the control panel.  If that can\u0027t \nbe done, then the next thing is to investigate how this kind of action is \nnormally done on the Mac.  Assuming we found something, we would then consider \nportable SWT API that exposed this capability (we would need to ensure that it \ncould be implemented on the other platforms).  It\u0027s not great, be we\u0027d be \nportable and could move on.\n\nAgain, my first choice would be MenuItem.getBounds().  It\u0027s very frustrating \nbecause I have an implementation for everything but the menu bar.",
    "Comment #55 From Steve Northover  2004-12-06 10:49 -------\n\u003e\u003e\u003e In all those years nobody has written a GUI testing tool that pulls\n\u003e\u003e\u003e down a menu bar menu and selects an item?\n\nComment #56 From Andre Weinand 2004-12-06 11:15 -------\n\u003e\u003e Whether GUI testing tools existed before MacOS X (1984-2001) doesn\u0027t\n\u003e\u003e really matter\n\nTrue. How far back do we hafta support? Note\n\nhttp://www.apple.com/applescript/uiscripting/\n\u003e Mac OS X v10.3 includes support for the control of the computer\u0027s\n\u003e graphic user interface via AppleScript.\n\n\u003e Graphic user interface control is performed by an updated version of\n\u003e the System Events application. By addressing the System Events\n\u003e application, AppleScript scripts can select menu items, push\n\u003e buttons, enter text into text fields, and generally control the\n\u003e interfaces of most non-Classic applications.\n\n\u003e The following pages detail the process of enabling and using the GUI\n\u003e Scripting architecture.\n",
    "... but, as Andre mentioned\n\nhttp://www.apple.com/applescript/uiscripting/01.html\n\u003e The GUI Scripting architecture is based upon the Mac OS X\n\u003e accessibility frameworks that provide alternative methods of\n\u003e querying and controlling the interfaces of the OS and applications.\n\n\u003e By default, the accessibility frameworks are disabled. An\n\u003e administrative user can enable them by clicking the checkbox labeled\n\u003e \"Enable access for assistive devices\" in the Universal Access System\n\u003e Preference pane and entering their password in the [subsequent]\n\u003e authentication dialog.\n\n\u003e Once the accessibility frameworks have been activated, AppleScript\n\u003e can be used to query and control the user interface of most\n\u003e applications. Scripted actions are performed by addressing the\n\u003e System Events application which has a special script suite for\n\u003e communicating with the GUI Scripting architecture.\n\nIs there API to query or set the Universal Access System?\n",
    "Comment #55 From Steve Northover  2004-12-06 10:49 -------\n\u003e\u003e\u003e In all those years nobody has written a GUI testing tool that pulls\n\u003e\u003e\u003e down a menu bar menu and selects an item?\n\nComment #56 From Andre Weinand 2004-12-06 11:15 -------\n\u003e\u003e Whether GUI testing tools existed before MacOS X (1984-2001) doesn\u0027t\n\u003e\u003e really matter\n\n\u003e\u003e True. How far back do we hafta support? Note\n\nThe Mac menu bar is not new to 10.x.  Can anyone tell me what API pre-10.x GUI \ntesting applications did?  Mac API is backwards compatible.",
    "Re: comment #55:\nI\u0027ve sent your request to DTS.\n\nRe: comment #59:\n\u003e Is there API to query or set the Universal Access System?\nYes, and the example application\n   http://developer.apple.com/samplecode/UIElementInspector/UIElementInspector.html\nuses it to make the user enable the Universal Access option.\n\nRe: comment #60:\n\u003e Mac API is backwards compatible.\nYes, if you run your pre-Carbon apps in Classic mode (MacOS 9 running inside MacOS X).\nNative MacOS X apps must only use Carbon which is a smaller subset of the original Mac Toolbox.",
    "comment #59:\n\u003e\u003e Is there API to query or set the Universal Access System?\n\ncomment #61\n\u003e Yes, and the example application\n\n\u003e http://developer.apple.com/samplecode/UIElementInspector/UIElementInspector.html\n\n\u003e uses it to make the user enable the Universal Access option.\n\n\u003cDo I need XCode to read\nUIElementInspector/UIElementInspector.app/Contents/MacOS/UIElementInspector\n?/\u003e\n\nHopefully \"DTS\" will come up with a cleaner solution, but {if not, for\nthe nonce} why not support Carbon (do we even support Classic or\nCocoa?) like\n\nif (Universal Access not set) {\n  if (user not administrative)\n    throw SWTException // ERROR_USER_LACKS_PERMISSION\n  set it\n}\nreturn bounds\n\n?\n",
    "Re comment #62:\nYou can find the source in the files ending in .h and .m\nUIElementInspector/UIElementInspector.app/Contents/MacOS/UIElementInspector\nis the executable. You don\u0027t want to read it :-)",
    "One more thing to patch: could SWT make ScrollBar.getBounds() public?\nI notice, thanks to\n\nhttp://sourceforge.net/tracker/index.php?func\u003ddetail\u0026aid\u003d1080952\u0026group_id\u003d50939\u0026atid\u003d461490\n\nthat if I do\n\nexport WS\u003d\"win32\"\nexport PLATFORM\u003d\"x86\"\nexport DEVSPACE\u003d\"/d/eclipse/devspaces/scratch\"\n# outside of eclipse? (automate this) copy the patchfiles here\nexport PATCHESPATH\u003d\"$DEVSPACE/patchfiles\"\nexport INPUT\u003d\"eclipse-SDK-3.1M3-$WS.zip\"\nexport ZIPHOME\u003d\"ftp://fullmoon.rtp.raleigh.ibm.com/S-3.1M3-200411050810/$INPUT\"\nexport ZIPSPACE\u003d\"/d/eclipse/zips\"\nexport ZIPVER\u003d\"3.1.0\"\nexport PROJECTPATH\u003d\"$DEVSPACE/org.eclipse.swt\"\n# !forget to backslash underscores between vars!\nexport\nSOURCEZIP\u003d\"eclipse/plugins/org.eclipse.platform.source.$WS.$WS.$PLATFORM\\_$ZIPVER/src/org.eclipse.swt.$WS\\_$ZIPVER/ws/$WS/swtsrc.zip\"\nexport ZIPFILES\u003d\"$SOURCEZIP \\\n  eclipse/plugins/org.eclipse.swt.$WS\\_$ZIPVER/os/$WS/$PLATFORM/swt-*.dll \\\n  eclipse/plugins/org.eclipse.swt_$ZIPVER/plugin.properties \\\n  eclipse/plugins/org.eclipse.swt_$ZIPVER/META-INF/MANIFEST.MF \\\n  eclipse/plugins/org.eclipse.swt_$ZIPVER/plugin.xml \\\n  eclipse/plugins/org.eclipse.swt_$ZIPVER/about.html\"\nwget -O $ZIPSPACE/$INPUT $ZIPHOME\ncd $DEVSPACE\nmkdir -p $PROJECTPATH\n# clean this up! e.g. should move to META-INF/MANIFEST.MF\nunzip -j $ZIPSPACE/$INPUT $ZIPFILES -d $PROJECTPATH\nmkdir -p $PROJECTPATH/src\nunzip $PROJECTPATH/swtsrc.zip -d $PROJECTPATH/src\nfind $PROJECTPATH/src -type f -name \u0027*.java\u0027 | \\\nxargs fgrep -ne \u0027Rectangle getBounds\u0027 | \\\nfgrep -e \u0027{\u0027 | fgrep -v \u0027public\u0027\n\nI get only one line output:\n\n\u003e\n/d/eclipse/devspaces/scratch/org.eclipse.swt/src/org/eclipse/swt/widgets/ScrollBar.java:202:Rectangle\ngetBounds () {\n\nDunno why it should be singled out.\n",
    "This work won\u0027t make it into M4.  We are waiting on Apple.",
    "Still waiting on Apple.",
    "Tom, how does the scrollbar bounds help you? There are still magic regions on a \nscrollbar which don\u0027t have API.\n\nHave you tried using the client area API?  The sides with the larger amount of \ninsets would contain a scrollbar probably.",
    "Comment #67 From Randy Hudson  2005-01-10 17:35 -------\n\u003e\u003e Tom, how does the scrollbar bounds help you? \n\nUmm ... in order to automate moving a scrollbar we need to know where\nto tell java.awt.Robot to mouseDown. (I\u0027m suspecting I don\u0027t fully\nunderstand the question.)\n\n\u003e\u003e There are still magic regions on a scrollbar which don\u0027t have API.\n\nSee future FRs :-) Note that I\u0027m only interested in automating and\ntesting common behaviors: something very WS-specific might require\nnative automation.\n\n\u003e\u003e Have you tried using the client area API? \n\nI\u0027m not sure what you mean: could you show p/code?\n\n\u003e\u003e The sides with the larger amount of insets would contain a\n\u003e\u003e scrollbar probably.\n\nIn any case, while there may be a workaround in this specific case,\nWidget.getBounds() is still greatly to be desired. Not only does it\ngreatly simplify simple automation code (I can let the runtime call\nthe appropriate method), but it facilitates higher-level abstractions,\nwhich makes it easier for coders to write automated test cases for\ntheir targets (which is what my effort is all about). E.g. Abbot has\nComponentLocation, which\n\nComponentLocation javadoc\n\u003e Provides encapsulation of a visible Component-relative location.\n\u003e Hides the location specifics so that ComponentTester primitives\n\u003e (actionClick, actionShowPopup, etc) may be directed to specific\n\u003e elements of substructure on a Component (list rows, tree paths,\n\u003e table cells, substructure values, etc).\n\nwith subclasses JListLocation, JTreeLocation, JTableLocation,\nJTabbedPaneLocation, etc. This relies at base on\nComponent.getBounds(). AFAICS I will need Widget.getBounds() to\nprovide WidgetLocation and subclasses, so that folks can more\neasily/quickly write tests on JFace thingies. (So far we\u0027ve been able\nto automate WDE without WidgetLocation, but I dunno what diabolical\ngraphics those devious GEF folks might devise in future :-)\n",
    "What I meant was that once you have the scrollbar\u0027s bounds, you still have no \nidea where the down up button are, the thumb, or the areas in between.  These \nareas might depend on the WS skin or certain preferences (e.g. Mac OS).\n\nSee Scrollable.computeTrim(int,int,int,int) for a possible workaround to \nobtaining the scrollbar\u0027s bounds.",
    "Comment #65 From Steve Northover  2004-12-10 18:06 -------\n\u003e\u003e This work won\u0027t make it into M4.  We are waiting on Apple.\n\nComment #66 From Steve Northover 2005-01-10 17:10 -------\n\u003e Still waiting on Apple.\n\nWhile we\u0027re waiting, could you make what functionality you have\navailable for use?\n\nAbbot has win32 users and folks who are interested in using it with\nGTK and winCE. We would much rather use your release-quality win32\ngetBounds()\u0027s than our hacks, and would like to enable folks on\nnon-win32 platforms to make progress. In return, we would provide\nreal-world feedback on their use.\n",
    "I won\u0027t release API that can\u0027t be implemented on all platforms.  I am working \nwith Apple on another solution but they are slow.",
    "I don\u0027t really understand the rationale here Steve N. M4 is a milestone build,  \nand if some obscure feature like this one isn\u0027t available for all platforms I  \ndon\u0027t see the problem.   \n  \nIf I remember correctly, the whole Browser widget didn\u0027t get released on all  \nplatforms at the same time either in 3.0 milestones. The Browser API changed a \nlot between Milestones as well; its not like it needs to be stabile at this \npoint. And there are even APIs that doesn\u0027t work on all platforms in GA \nbuilds. Why is this obscure UI-testing-tool feature so different? If Apple \nresponds in M5 or M6 thats great, but are you saying we can never support this \n(from SWT, I agree there are workarounds) if we cannot have it on OSX and \nApple tells us how?  \n \nI guess my question is why you are so afraid to put it in now? Milestones APIs \nhave changed in the past.. Afraid it cannot ever be supported on all [major] \nplatforms? That the API will radically change when you get info from Apple?  \n \nWell, just my .0002$ \n ",
    "I don\u0027t want to put out temporary API that I may need to retract later.",
    "Any word from Apple?",
    "Sigh.  Hopefully something at EclipseCon.",
    "Hi Steve, any news on Apple\u0027s side? ",
    "I talked to them and they made hopeful noises about new API but I was on \nvacation for the last 3 weeks.  I will follow up now.  However, M6 is the API \nfreeze.  I\u0027m actually pretty mad about this (madder than Tom Roche must be!).",
    "Steve, aren\u0027t you Mr. SWT?\nSo I guess you could carry the clout with the PMC to bend the API freeze rules a\nbit.\n\nAlternatively, those changes could be made in time to make it to 3.1 M7, but not\nmade part of the API...\nLike that you respect the API freeze, and the deal could be that the new\nfeatures/methods/visibility of methods -while public- would be unsupported in\nthe API, with a common agreement that the best effort will be made that make\nthem public \u0026 official API in a 3.1.1 or something like that.\n\nThat would really make those ugly patches go away.\n\nAs a last resort, what about aspect enabling SWT -or something similar- to allow\nfor external hooks/mods without API changes?\nI was quite impressed with Martin Lippert AJEER at EclipseCon.",
    "I\u0027m not mad about the API freeze but rather that we have been waiting on Apple \nfor so long that the API freeze happened, causing this feature to probably not \nhappen for 3.1, after I promised to do something about it for 3.1.  I\u0027m still \nworking on it.  API\u0027s can change after M6 but it\u0027s way harder to make it \nhappen ... and that\u0027s a good thing at this stage in the game.",
    "Sounds like getBounds() for Menu and MenuItem are in the pipeline.  I\u0027d like to\nrequest public implementations for ScrollBar, TabItem and TableColumn as well. \nFor completeness, perhaps DragSource, DropTarget, TrayItem, Tracker, Tray should\nprobably be supported as well.",
    "Comment #80 From Gary Johnston  2005-04-08 14:21\n\u003e Sounds like getBounds() for Menu and MenuItem are in the pipeline.\n\u003e I\u0027d like to request public implementations for ScrollBar, TabItem\n\u003e and TableColumn as well. For completeness, perhaps DragSource,\n\u003e DropTarget, TrayItem, Tracker, Tray should probably be supported as\n\u003e well.\n\n\"Probably\"? For completeness they should definitely be supported.\n\nFor functionality, i.e. enabling folks to write their tests,\nDragSource and DropTarget are higher priority. I know at least one\nperson who is trying to test drag\u0027n\u0027drop onto R*D\u0027s Page Data View.\nWe have too much functionality that is only provided by context\nmenuing or DnD, so we really need to be able to test both of those.\n",
    "All Widgets (i.e., including non-Control Widgets) should also implement\ntoDisplay(Point) \u0026 toDisplay(int, int).",
    "I have 3.1-M6 (Eclipse Platform Version: 3.1.0 Build id:\nI20050401-1645) and I\u0027m seeing\n\norg.eclipse.swt.widgets.TableItem\n\u003e /*public*/ Rectangle getBounds () {\n\nCan this be restored to public-ness? Alternatively, is there another\nway to get the bounds of a TableItem that one has found without\nknowing its row and column (e.g. by matching its getText() or some\nsetData()\u0027ed key/value)?\n",
    "Is there some reason that TableItem.getBounds(int) won\u0027t work for you?",
    "Tao Weng 04/25/2005 10:39:05 AM:\n\u003e\u003e\u003e\u003e I got my UML2 regression test script fully automated with\n\u003e\u003e\u003e\u003e Abbot.swt. I have to say that Abbot.swt is a great product.\n\n\u003cmore shameless plug snipped :-\u003e\n\n\u003e\u003e\u003e\u003e By the way, I have changed a little bit of Abbot.swt in order to\n\u003e\u003e\u003e\u003e make my UML2 regression test script run. I do not know whether\n\u003e\u003e\u003e\u003e those changes are valid or not, so I don\u0027t want to do any check\n\u003e\u003e\u003e\u003e in. I would like to let you know.\n\n\u003cbig snip\u003e\n\n\u003e\u003e\u003e\u003e 3) In abbot.tester.swt.WidgetLocator, I have to add the following \n\u003e\u003e\u003e\u003e piece of code in  \"getBounds\" function.\n\n\u003e\u003e\u003e\u003e if(w instanceof TableItem){\n\u003e\u003e\u003e\u003e    TableItem item \u003d (TableItem)w;\n\u003e\u003e\u003e\u003e    Rectangle bounds \u003d item.getBounds();\n\u003e\u003e\u003e\u003e    Point p \u003d item.getParent().toDisplay(bounds.x,bounds.y);\n\u003e\u003e\u003e\u003e    return new Rectangle(p.x,p.y,bounds.width,bounds.height);\n\u003e\u003e\u003e\u003e  }\n\nTom Roche  2005-05-09 21:58\n\u003e\u003e\u003e I have 3.1-M6 (Eclipse Platform Version: 3.1.0 Build id:\n\u003e\u003e\u003e I20050401-1645) and I\u0027m seeing\n\n\u003e\u003e\u003e org.eclipse.swt.widgets.TableItem\n\u003e\u003e\u003e \u003e /*public*/ Rectangle getBounds () {\n\n\u003e\u003e\u003e Can this be restored to public-ness? Alternatively, is there\n\u003e\u003e\u003e another way to get the bounds of a TableItem that one has found\n\u003e\u003e\u003e without knowing its row and column (e.g. by matching its getText()\n\u003e\u003e\u003e or some setData()\u0027ed key/value)?\n\nsteve_northover@ca.ibm.com  2005-05-10 08:31\n\u003e\u003e Is there some reason that TableItem.getBounds(int) won\u0027t work for\n\u003e\u003e you?\n\nAs stated above, tests need to be able to get the bounds for a\nTableItem of which the column index is unknown. Is there API to get\nthe column index for a TableItem? If not:\n\norg.eclipse.swt.widgets.TableItem.getBounds(int)\n\u003e /**\n\u003e  * Returns a rectangle describing the receiver\u0027s size and location\n\u003e  * relative to its parent at a column in the table.\n\u003e  *\n\u003e  * @param index the index that specifies the column\n\u003e  * @return the receiver\u0027s bounding column rectangle\n\nseems to require the user to know the TableItem\u0027s column index. Am I\nmissing something?",
    "Use getBounds(0).",
    "Steve Northover  2005-05-10 12:38\n\u003e Use getBounds(0).\n\nIf TableItem.getBounds(0) \u003d\u003d TableItem.getBounds(),\nwhy not instead\n\npublic Rectangle getBounds () {\n  return getBounds (0);\n}\n\nand refactor the current code\n\n/*public*/ Rectangle getBounds () {\n  checkWidget();\n  if (!parent.checkData (this, true)) error (SWT.ERROR_WIDGET_DISPOSED);\n  int itemIndex \u003d parent.indexOf (this);\n  if (itemIndex \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n  RECT rect \u003d getBounds (itemIndex, 0, true, false);\n  int width \u003d rect.right - rect.left, height \u003d rect.bottom - rect.top;\n  return new Rectangle (rect.left, rect.top, width, height);\n}\n\ninto some other private API? What purpose is served by\nnot providing the same signature for TableItem?\n",
    "TableItem.getBounds() was intended to return the same thing as Tree.getBounds\n() now that Tree\u0027s have columns.  To be exact, the bounds of the text not \nincluding the item but the code didn\u0027t get implemented on all platforms.  This \nwould make Tree and Table API consistent (right now Table is missing the \nmethod).\n\nWould you like me to delete it?  I can\u0027t make it public because we are API \nfrozen.",
    "steve_northover@ca.ibm.com  2005-05-10 13:55 -------\n\u003e TableItem.getBounds() was intended to return the same thing as\n\u003e Tree.getBounds () now that Tree\u0027s have columns. To be exact, the\n\u003e bounds of the text not including the item but the code didn\u0027t get\n\u003e implemented on all platforms. This would make Tree and Table API\n\u003e consistent (right now Table is missing the method).\n\n\u003e Would you like me to delete it? I can\u0027t make it public because we\n\u003e are API frozen.\n\n\u003csigh/\u003e No, we\u0027ll just wait for a thaw. abbot.swt has plenty other\nSWT workarounds right now, what\u0027s one more ...\n",
    "I meant to say \"To be exact, the bounds of the text not including the image\".  \nI\u0027m not sure exactly how not having this API is holding you back.\n\nI\u0027m also really sorry for missing the 3.1 release for this bug report.",
    "Steve Northover 2005-05-10 14:33 -------\n\u003e I\u0027m not sure exactly how not having this API is holding you back.\n\nWe continue to need Widget.getBounds(). Everything that holds that\nback requires workarounds. We have done workarounds for this issue\n(TableItem.getBounds()) and others on win32, but we don\u0027t have the\nresources to workaround for Carbon, GTK, etc.\n\nLots of folks want programmatic automation, mostly for developer\ntesting. (Some for other purposes--Larry Bergman is doing really cool\nextensions for demo/doc/pedagogy, maybe even TVT.) All we ask is for\nSWT to provide a firm foundation for programmatic automation (as Swing\ndoes).\n\n\u003e I\u0027m also really sorry for missing the 3.1 release for this bug\n\u003e report.\n\nMe too--I would love for Abbot 1.0 to have multiplatform support.\n\nTodd Brackett: we\u0027re told that SWT\u0027s fix for this bug is just waiting\nfor Apple to enable MenuItem.getBounds() for Carbon. If correct, can\nyou give us an ETA?\n",
    "You can get the information you need already for the TableItem on all \nplatforms so I\u0027m not sure what you are working around in this particular case.",
    "Steve Northover  2005-05-10 14:33   -------\n\u003e\u003e\u003e I\u0027m not sure exactly how not having this API is holding you back.\n\nTom Roche  2005-05-10 15:55   -------\n\u003e\u003e We continue to need Widget.getBounds(). \n\nI.e. getBounds() for each child of Widget.\n\n\u003e\u003e Everything that holds that back requires workarounds.\n\nSteve Northover 2005-05-10 16:11 -------\n\u003e You can get the information you need already for the TableItem on\n\u003e all platforms so I\u0027m not sure what you are working around in this\n\u003e particular case.\n\nThe non-public-ness of TableItem.getBounds(). As previously mentioned.\nI\u0027m not sure what isn\u0027t clear here.\n\nWe need getBounds() to find things. We have Component.getBounds(), we\nneed Widget.getBounds(). Forgive the repetition, but \"Everything that\nholds [Widget.getBounds()] back requires workarounds.\" (E.g. Abbot\nworks around AWT MenuComponent\u0027s, but fortunately JMenuItem has mostly\nsuperceded that, and JMenuItem isa Component.)\n\nWhat we can find, we can automate--knock wood, but it\u0027s been true so\nfar, threading be damned. Automation is good. Automation allows your\nusers to create more/better tests--which means we develop better UIs\nfaster--and automation allows your users to drive their code for\ndemos, TVT, etc. Code-centric automation is better: it enhances\ndeveloper-time testing and supports TDD. Multi-platform code-centric\nautomation is better yet.\n\nAutomation requires coordinate finding. Swing supports automation via\na single API, Component.getBounds(), the sufficiency of which is\nevinced by the number of code-centric tools that build on that simple\nfoundation, the functionality those tools provide, the number of their\nusers, and the goodness of the UIs their users develop. That\u0027s good.\nThat\u0027s important.\n\nIf you can give SWT automation a similar foundation,\nEclipse+JUnit+Abbot can deliver similar goodness a lot more/faster.\nOtherwise we hafta workaround you.\n",
    "I do second Tom on that one.\n\u003e \"Everything that holds [Widget.getBounds()] back requires workarounds.\"\nI am faced with the exact same issues for the plug-in I am working on.\nShall I continue to leave in the underworld of patched SWT?\nAnd I am dying to use abbot for my tests.\n\nSteve, in comment #79 you replied to me:\n\u003e API\u0027s can change after M6 but it\u0027s way harder to make it \n\u003e happen ... and that\u0027s a good thing at this stage in the game.\nI guess that this bugzilla has enough votes and followers to carry some weight\nand do some thing about it.\nYou can make API change happen, you said it. \nI feel kind of let down here.\n\nNow, over 42 unique individuals, including 23 positives votes, the rest as CC\nare following this bug! I wish all bugs were so popular!\n\nJust some of the folks and companies which are represented in the CC on this\nbug, based on the voters and CCed emails:\n(excluding all the IBM folks in the US, Canada, and Switzerland ;-) )\n\n*Eclipse board and strategic members: \nSAP\nIntel\n\n*Add-in provider members like:\nAgitar\nInstantiations\n\n*Companies like:\nApple\nRIM (the blackberry guys)\nOrbeon\nWorldpac\nTrigeo\n\n*Open source projects: empproject, abbot, orbeon, oxf studio, vence,\neasyeclipse, eclipse-ccase, harbour-ide\n\n*Eclipse advocates and bloggers like Luis de la Rosa, and Gunnar Wagenknecht\n\n*Plus at least two academic institutions....\n\nI think it is enough justification to give a push and make it so that it goes\ninto 3.1 !",
    "The original discussion was about TableItem.getBounds(), which you do not need \ntoday in order to make Abbot work.  I agree that you need the general \ncapability to get widget coordinates.  You are free to contribute the code \nthat does this at any time.\n\nIn the case of MenuItem.getBounds() and Menu.getBounds(), we are stuck on \nApple and have been for a while.  There is nothing I can do about this.  So, \nthe right thing for you to do in the short term is to include platform \nspecific code in Abbot and not to support Abbot on the Mac.  This is sad, but \nit is the right software engineering thing to do.\n\nPlease stop ranting at me.  I am doing all I can and it doesn\u0027t help.",
    "Philippe, the bug is important and we are doing all we can.  The implications \nof adding an API like Widget.getBounds() (or solving this problem in another \nway) are big.  We cannot propose API that is no-portable.  We realize this bug \nis important and have been trying to get to it for a while.",
    "Steve,\n\nFirst I would like you to kindly accept my public apologies if I came out hard\nand harsh.\n\nThis may be my French way of loving heated arguments and debates resurfacing now\nand then ;-) I want you to be my best buddy, and I have serious respect for the\nwork you guys are doing.Being the API guardians of the essential SWT must be a\ntough job, with trolls like me ruining your day!\n\nIn all fairness, if some irresponsible person had given me your job, SWT would\nhave been a half-baked, ugly, buggy, non-portable piece of crap, instead of the\nelegant work it is today and Eclipse would be dying from my incompetence :-) \n\nBe assured that if I need to vent my SWT frustration in the future, I will do it\n1-on-1 first.\n\nNow, right after posting that unruly comment yesterday, I was hanging @ #eclipse\nand chatted with Billy B. who gave me some valuable insights.\n\nAlso I did not really understand until now that the menu problem on Mac is real\nhard, and may not be solvable in a portable way because the way carbon handles\nmenu bars.\n\nAs far as I am concerned, I need the menu and menu items coordinates\n(MenuItem.getBounds() and Menu.getBounds() ), but I can live without\nportability, and Billy told me there could be a way to do it in my plug-in,\nprobably without having to resort to SWT patching, or weird aspects, reflection\nor byte code hacks, as long as portability was not the major concern. And for me\nit is not.\n\nI care about making my own little plugin run nicely on top of a vanilla Eclipse\nbuild, with decent support for at least Windows, Mac and Linux/GTK. And if some\nfeatures are NOT available on Mac, then so be it. I can live with that, and I\ncan inform my users properly about the capabilities of that plugin on each\nplatforms, both in the documentation and at run-time.\nI also care about SWT staying homogenous, elegant and portable on all Eclipse\u0027s\nplatforms, and do not want to be an architect of its demise.\n\nIf there is a way to get some code examples for Win and GTK posted somewhere to\nget me started, that would be great. \nAnd as far as I am concerned, that would close that bug!\n\nCordially",
    "Ok, thanks Philippe, I wouldn\u0027t go quite that far.\n\nIf you are looking for the code that does Menu.getBounds() and \nMenuItem.getBounds(), it is also released as /*public*/ but doesn\u0027t work on \nthe Mac.  NOTE:  Since many operating systems don\u0027t compute the menu bounds \nuntil the menu is about to be shown, the bounds are zero when the menu is not \ndisplayed.  Also, this the coordinate systems are consistent but might not be \nthe same when the code is finally released (sometime in the year 3000).  It \nshould be easy enough to do the same thing that Tom is doing (ie. copy the \ncode to a platform specific utility class) and call it.  Maybe Tom could \nprovide his utility class as a patch in this bug report?\n\nAlso, BB should be commenting in the bug report rather than chatting privately!",
    "Steve,\nsince Menu.getBounds() and  MenuItem.getBounds() are /*public*/, I can work\naround that with reflection, as long I am not under the control of a restrictive\nsecurity manager. A bit awkward, but the hack will do the trick for me, together\nwith some platform specific conditions for macs or platforms where it returns\nodd or (0,0,0,0) values\n\n\u003eNOTE:  Since many operating systems don\u0027t compute the menu bounds \n\u003euntil the menu is about to be shown, the bounds are zero when the menu is not \ndisplayed.  \nIn my case that would not be a problem. I really only need to compute the menu\nbounds just right after they have been displayed, not before.\n\n\u003eIt should be easy enough to do the same thing that Tom is doing \n\u003e (ie. copy the code to a platform specific utility class) and call it.  \nDoes not this require a patched SWT and therefore a modified core eclispe?\nI am trying to avoid that. \n\nTom your patch would be welcomed or is it already in abbot? If so, I will do a\ndiff again between SWT and your latest patched SWT, last I made is a few months old.\n",
    "Just adding a quick note for everybody\u0027s understanding is that all Billy told me\nabout this bug in our chat was it was down to the Mac menu issues. ;-)",
    "Steve Northover  2005-05-11 08:03  [reply] -------\n\u003e\u003e\u003e Please stop ranting at me. I am doing all I can and it doesn\u0027t\n\u003e\u003e\u003e help.\n\nNot ranting, just explaining, since the rationale for getBounds() (vs\ngetBounds(...), yourAPIhere(...), etc) doesn\u0027t seem to take.\n\nSteve Northover  2005-05-11 16:15  [reply] -------\n\u003e\u003e If you are looking for the code that does Menu.getBounds() and\n\u003e\u003e MenuItem.getBounds(), it is also released as /*public*/ but doesn\u0027t\n\u003e\u003e work on the Mac.\n\nThe code in org.eclipse.swt.widgets.MenuItem.getBounds() in 3.1-M6\nalso works incorrectly on win32 when used to exercise a workbench:\nwill post separately regarding that.\n\n\u003e\u003e NOTE: Since many operating systems don\u0027t compute the menu bounds\n\u003e\u003e until the menu is about to be shown, the bounds are zero when the\n\u003e\u003e menu is not displayed. Also, this the coordinate systems are\n\u003e\u003e consistent but might not be the same when the code is finally\n\u003e\u003e released (sometime in the year 3000).\n\n\u003e\u003e It should be easy enough to do the same thing that Tom is doing\n\u003e\u003e (ie. copy the code to a platform specific utility class) and call\n\u003e\u003e it. Maybe Tom could provide his utility class as a patch in this\n\u003e\u003e bug report?\n\nPhilippe Ombredanne 2005-05-11 16:31 [reply] -------\n\u003e Steve, since Menu.getBounds() and MenuItem.getBounds() are\n\u003e /*public*/, I can work around that with reflection, as long I am not\n\u003e under the control of a restrictive security manager. A bit awkward,\n\u003e but the hack will do the trick for me, together with some platform\n\u003e specific conditions for macs or platforms where it returns odd or\n\u003e (0,0,0,0) values\n\n\u003e\u003e NOTE: Since many operating systems don\u0027t compute the menu bounds\n\u003e\u003e until the menu is about to be shown, the bounds are zero when the\n\u003e\u003e menu is not displayed.\n\n\u003e In my case that would not be a problem. I really only need to\n\u003e compute the menu bounds just right after they have been displayed,\n\u003e not before.\n\n\u003e\u003e It should be easy enough to do the same thing that Tom is doing\n\u003e\u003e (ie. copy the code to a platform specific utility class) and call\n\u003e\u003e it.\n\n\u003e Does not this require a patched SWT and therefore a modified core\n\u003e eclispe? \n\nNo longer.\n\n\u003e Tom your patch would be welcomed or is it already in abbot? \n\nIt is: the patches are in\n\nabbot.swt.SWTWorkarounds\nhttp://cvs.sourceforge.net/viewcvs.py/*checkout*/abbot/abbot.swt/src/abbot/swt/SWTWorkarounds.java?rev\u003dHEAD\n\nbut they are transparent to the user: just use your Matcher\u0027s,\nFinder\u0027s, and Tester\u0027s and they will call the correct code for\nlocation.\n\n\u003e If so, I will do a diff again between SWT and your latest patched\n\u003e SWT, last I made is a few months old.\n\nQuit patching !-) See\n\nhttp://sourceforge.net/mailarchive/message.php?msg_id\u003d11730297",
    "Steve Northover  2005-05-11 16:15\n\u003e\u003e If you are looking for the code that does Menu.getBounds() and\n\u003e\u003e MenuItem.getBounds(), it is also released as /*public*/ but doesn\u0027t\n\u003e\u003e work on the Mac.\n\nTom Roche  2005-05-12 13:46\n\u003e The code in org.eclipse.swt.widgets.MenuItem.getBounds() in 3.1-M6\n\u003e also works incorrectly on win32 when used to exercise a workbench:\n\u003e will post separately regarding that.\n\nWhen exercising a workbench, the code in 3.1-M6/\norg.eclipse.swt.widgets.MenuItem.getBounds(), massaged slightly to run\nfrom our different package, clicks below the menubar, activating the\ntoolbar button immediately below the targeted menu item. I suspect it\nreturns a y value that is too large. This behavior was originally\nreported by other members of the abbot-users list.\n\nHow to reproduce (in a 3.1-M6 workbench, untested with other versions,\non win32, untested with other WSs):\n\n0 Create a clean devspace folder, and start a workbench pointing to it.\n\n1 Checkout/install/build the abbot, abbot.swt, and abbot.swt.eclipse\n  modules from SourceForge CVS as described in\n\nhttp://cvs.sourceforge.net/viewcvs.py/*checkout*/abbot/abbot.swt/doc/swt/building.html#sourceAbbot\n\n  Note that the abbot.swt.* modules are both eclipse plugins \"out of\n  the box,\" and so build \"normally\" in eclipse (e.g. with C-b), but\n  that the abbot module is not--it\u0027s IDE-agnostic and requires an ant\n  build (target\u003declipse.setup) to attain plugin-hood in your workspace.\n (Hence turning off autobuild is advised before you start checkout.)\n\n2 Create a JUnit Plugin Test with test class\u003d\n  abbot.swt.eclipse.tests.MenuItemGetBoundsTest running in a blank\n  runspace (check Clear workspace data before launching) using the\n  workbench\u0027s JRE (Runtime JRE\u003declipse). Run it:\n\n  A Java project will be created (headlessly), then 2 tests will run\n  (it\u0027s {pretty fast, hard to see} but you can see the mouse move):\n  the first clicks Run\u003eExternalTools\u003eExternalTools to launch that\n  wizard, and the second clicks File\u003eNew\u003eOther to launch the New\n  wizard. (The JUnit view will green bar, but will report 4/4 due to\n  inheritance.) Remove the terminated session in the Console view\n  (call me anal, but pde.junit has some bugs/quirks that I try to\n  accomodate ... or I may just be superstitious).\n\n3 Open abbot.swt.SWTWorkarounds in an editor and browse to getBounds\n  (MenuItem menuItem). Note that it currently contains\n\n+   public static Rectangle getBounds (MenuItem menuItem) {\n+ // start code from 3.1-M6 org.eclipse.swt.widgets.MenuItem.getBounds()    \n+ //  checkWidget ();\n+ // not visible, but menuItem.getParent() will call it\n+ //  Menu parent \u003d menuItem.getParent();\n+ //  if (OS.IsWinCE) return new Rectangle (0, 0, 0, 0);\n+ //  int index \u003d parent.indexOf (menuItem);\n+ //  if (index \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n+ //  if ((parent.getStyle() \u0026 SWT.BAR) !\u003d 0) {\n+ //    Decorations shell \u003d parent.getParent();\n+ //    if (shell.getMenuBar() !\u003d parent) {\n+ //      return new Rectangle (0, 0, 0, 0);\n+ //    }\n+ //    int hwndShell \u003d shell.handle;\n+ //    MENUBARINFO info1 \u003d new MENUBARINFO ();\n+ //    info1.cbSize \u003d MENUBARINFO.sizeof;\n+ //    if (!OS.GetMenuBarInfo (hwndShell, OS.OBJID_MENU, 1, info1)) {\n+ //      return new Rectangle (0, 0, 0, 0);\n+ //    }\n+ //    MENUBARINFO info2 \u003d new MENUBARINFO ();\n+ //    info2.cbSize \u003d MENUBARINFO.sizeof;\n+ //    if (!OS.GetMenuBarInfo (hwndShell, OS.OBJID_MENU, index + 1, info2)) {\n+ //      return new Rectangle (0, 0, 0, 0);\n+ //    }\n+ //    int x \u003d info2.left - info1.left;\n+ //    int y \u003d info2.top - info1.top;\n+ //    int width \u003d info1.right - info1.left;\n+ //    int height \u003d info1.bottom - info1.top;\n+ //    return new Rectangle (x, y, width, height);\n+ //  } else {\n+ //    int hMenu \u003d parent.handle;\n+ //    RECT rect1 \u003d new RECT ();\n+ //    if (!OS.GetMenuItemRect (0, hMenu, 0, rect1)) {\n+ //      return new Rectangle (0, 0, 0, 0);\n+ //    }\n+ //    RECT rect2 \u003d new RECT ();\n+ //    if (!OS.GetMenuItemRect (0, hMenu, index, rect2)) {\n+ //      return new Rectangle (0, 0, 0, 0);\n+ //    }\n+ //    int x \u003d rect2.left - rect1.left + 2;\n+ //    int y \u003d rect2.top - rect1.top + 2;\n+ //    int width \u003d rect2.right - rect2.left;\n+ //    int height \u003d rect2.bottom - rect2.top;\n+ //    return new Rectangle (x, y, width, height);\n+ //  }\n+ // end code from 3.1-M6 org.eclipse.swt.widgets.MenuItem.getBounds()\n+ // start code adapted from o.e.swt.patched.MenuItem.getBounds()\n+     Menu parent \u003d menuItem.getParent();\n+     Decorations parentControl \u003d parent.getParent();\n+     if (OS.IsWinCE) return new Rectangle (0, 0, 0, 0);\n+     int index \u003d parent.indexOf (menuItem);\n+     if (index \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n+     RECT rect \u003d new RECT();\n+     boolean success \u003d\nOS.GetMenuItemRect(((parent.getStyle()\u0026SWT.BAR)\u003d\u003dSWT.BAR)?parentControl.handle:0,\n+               parent.handle,\n+               index,\n+               rect);\n+     if (!success) {\n+       /* the OS API call couldn\u0027t get the MenuItem bounds, so return an empty\nrectangle */\n+       return new Rectangle(0, 0, 0, 0);   \n+     }\n+     if ((parentControl.getStyle() \u0026 SWT.MIRRORED) \u003d\u003d 0) {\n+       /* coordinates are not mirrored */\n+       Point p \u003d parentControl.toControl(rect.left,rect.top);\n+       int width \u003d rect.right - rect.left;\n+       int height \u003d rect.bottom - rect.top;\n+       return new Rectangle(p.x,p.y,width,height);   \n+     } else {\n+       /* coordinates are mirrored */\n+       /* TODO: this has not been tested */\n+       Point p \u003d parentControl.toControl(rect.left,rect.top);\n+       int width \u003d rect.left - rect.right;\n+       int height \u003d rect.bottom - rect.top;\n+       return new Rectangle(p.x,p.y,width,height);       \n+     }\n+ // end code adapted from o.e.swt.patched.MenuItem.getBounds()\n+   }\n\n  The first section is minimally adapted from 3.1-M6/\n  org.eclipse.swt.widgets.MenuItem.getBounds(), the latter is from\n  Abbot\u0027s patches. Note that the latter section is what you just ran\n  successfully. Comment out that latter section, and uncomment the\n  first section, to produce\n\n-   public static Rectangle getBounds (MenuItem menuItem) {\n- // start code from 3.1-M6 org.eclipse.swt.widgets.MenuItem.getBounds()    \n- //  checkWidget ();\n- // not visible, but menuItem.getParent() will call it\n-   Menu parent \u003d menuItem.getParent();\n-   if (OS.IsWinCE) return new Rectangle (0, 0, 0, 0);\n-   int index \u003d parent.indexOf (menuItem);\n-   if (index \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n-   if ((parent.getStyle() \u0026 SWT.BAR) !\u003d 0) {\n-     Decorations shell \u003d parent.getParent();\n-     if (shell.getMenuBar() !\u003d parent) {\n-       return new Rectangle (0, 0, 0, 0);\n-     }\n-     int hwndShell \u003d shell.handle;\n-     MENUBARINFO info1 \u003d new MENUBARINFO ();\n-     info1.cbSize \u003d MENUBARINFO.sizeof;\n-     if (!OS.GetMenuBarInfo (hwndShell, OS.OBJID_MENU, 1, info1)) {\n-       return new Rectangle (0, 0, 0, 0);\n-     }\n-     MENUBARINFO info2 \u003d new MENUBARINFO ();\n-     info2.cbSize \u003d MENUBARINFO.sizeof;\n-     if (!OS.GetMenuBarInfo (hwndShell, OS.OBJID_MENU, index + 1, info2)) {\n-       return new Rectangle (0, 0, 0, 0);\n-     }\n-     int x \u003d info2.left - info1.left;\n-     int y \u003d info2.top - info1.top;\n-     int width \u003d info1.right - info1.left;\n-     int height \u003d info1.bottom - info1.top;\n-     return new Rectangle (x, y, width, height);\n-   } else {\n-     int hMenu \u003d parent.handle;\n-     RECT rect1 \u003d new RECT ();\n-     if (!OS.GetMenuItemRect (0, hMenu, 0, rect1)) {\n-       return new Rectangle (0, 0, 0, 0);\n-     }\n-     RECT rect2 \u003d new RECT ();\n-     if (!OS.GetMenuItemRect (0, hMenu, index, rect2)) {\n-       return new Rectangle (0, 0, 0, 0);\n-     }\n-     int x \u003d rect2.left - rect1.left + 2;\n-     int y \u003d rect2.top - rect1.top + 2;\n-     int width \u003d rect2.right - rect2.left;\n-     int height \u003d rect2.bottom - rect2.top;\n-     return new Rectangle (x, y, width, height);\n-   }\n- // end code from 3.1-M6 org.eclipse.swt.widgets.MenuItem.getBounds()\n- // start code adapted from o.e.swt.patched.MenuItem.getBounds()\n- //    Menu parent \u003d menuItem.getParent();\n- //    Decorations parentControl \u003d parent.getParent();\n- //    if (OS.IsWinCE) return new Rectangle (0, 0, 0, 0);\n- //    int index \u003d parent.indexOf (menuItem);\n- //    if (index \u003d\u003d -1) return new Rectangle (0, 0, 0, 0);\n- //    RECT rect \u003d new RECT();\n- //    boolean success \u003d\nOS.GetMenuItemRect(((parent.getStyle()\u0026SWT.BAR)\u003d\u003dSWT.BAR)?parentControl.handle:0,\n- //              parent.handle,\n- //              index,\n- //              rect);\n- //    if (!success) {\n- //      /* the OS API call couldn\u0027t get the MenuItem bounds, so return an\nempty rectangle */\n- //      return new Rectangle(0, 0, 0, 0);   \n- //    }\n- //    if ((parentControl.getStyle() \u0026 SWT.MIRRORED) \u003d\u003d 0) {\n- //      /* coordinates are not mirrored */\n- //      Point p \u003d parentControl.toControl(rect.left,rect.top);\n- //      int width \u003d rect.right - rect.left;\n- //      int height \u003d rect.bottom - rect.top;\n- //      return new Rectangle(p.x,p.y,width,height);   \n- //    } else {\n- //      /* coordinates are mirrored */\n- //      /* TODO: this has not been tested */\n- //      Point p \u003d parentControl.toControl(rect.left,rect.top);\n- //      int width \u003d rect.left - rect.right;\n- //      int height \u003d rect.bottom - rect.top;\n- //      return new Rectangle(p.x,p.y,width,height);       \n- //    }\n- // end code adapted from o.e.swt.patched.MenuItem.getBounds()\n-   }\n\n  Save and build.\n\n4 Rerun abbot.swt.eclipse.tests.MenuItemGetBoundsTest (e.g. with\n  C-F11). Note that, instead of clicking the menu, the mouse clicks\n  the Search button on the toolbar, and the Search wizard launches\n  instead of External Tools. (Note that the button and mouse are\n  positioned just below the Run item in the menu bar, hence my\n  hypothesis.) This hoses that and subsequent tests with\n\nabbot.WaitTimedOutError: Timed out waiting for External Tools to show\n  at abbot.tester.swt.Robot.wait(Robot.java:1454)\n  at abbot.tester.swt.Robot.wait(Robot.java:1442)\n  at abbot.tester.swt.WidgetTester.waitForShellShowing(WidgetTester.java:897)\n  at\nabbot.swt.eclipse.tests.MenuItemGetBoundsTest$1.run(MenuItemGetBoundsTest.java:82)\n\n  in the Console.\n\n5 If desired, whack the session, undo the changes to SWTWorkarounds,\n  save, C-b, C-F11: the tests again run successfully to completion by\n  correctly clicking the menu items.\n\nAll: please let me know if you are able to reproduce or not,\nespecially if the directions are unclear.\n",
    "The part that is unclear is whether you know what the bug is already and have \na fix.  If this is the case, can you please post the patch?  Thanks.",
    "Created an attachment (id\u003d21077)\nadaption of code that fixes bad menu-picking as demonstrated in\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c102\n\nSee\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c102\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c104\n",
    "Steve Northover  2005-05-12 18:34\n\u003e The part that is unclear is whether you know what the bug is already\n\nUmm ... it seems pretty clear that the bug is in the code adapted from \n3.1-M6 org.eclipse.swt.widgets.MenuItem.getBounds(), since the test\nfails when using that code, no?\n\n\u003e and have a fix. If this is the case, can you please post the patch?\n\nhttps://bugs.eclipse.org/bugs/attachment.cgi?id\u003d21077\n\nbut note that I can\u0027t verify the patched code directly ... because I\nhafta workaround the non-public-ness of MenuItem.getBounds().\n",
    "Tom, the more you help me, the more I can help you.  A single sentence \nlike \"The problem is that the coordinates are wrong because ... or mirroring \nis not taken into account ...\" would be most appreciated (unless you really \nhave no idea what is wrong, in which case saying so helps too, but you have a \npatch so that implies you do know what\u0027s going on).  It\u0027s just easier not to \nhave to guess from the code but I can do that if you want.  It\u0027ll just take \nlonger.\n\nAlso, a small stand alone test case that uses the API is really helpful rather \nthan downloading and installing Abbot.  If you don\u0027t have the code, then \nthat\u0027s fine too.\n\nBilly, can you verify that the patch doesn\u0027t compile?",
    "Tom Roche  2005-05-12 18:07\n\u003e\u003e\u003e When exercising a workbench, the code in 3.1-M6/\n\u003e\u003e\u003e org.eclipse.swt.widgets.MenuItem.getBounds(), massaged slightly to\n\u003e\u003e\u003e run from our different package, clicks below the menubar,\n\u003e\u003e\u003e activating the toolbar button immediately below the targeted menu\n\u003e\u003e\u003e item. I suspect it returns a y value that is too large. \n\nsteve_northover@ca.ibm.com  2005-05-13 08:50\n\u003e\u003e A single sentence like \"The problem is that the coordinates are\n\u003e\u003e wrong because ... or mirroring is not taken into account ...\" would\n\u003e\u003e be most appreciated\n\nSteve: what part of \"returns a y value that is too large\" is unclear?\n\n\u003e\u003e (unless you really have no idea what is wrong, in which case saying\n\u003e\u003e so helps too, but you have a patch so that implies you do know\n\u003e\u003e what\u0027s going on). \n\n(The more helpful you claim to be, the more your language betrays you.)\nNot only have I an \"idea what is wrong,\" I have given you a test case\nthat clearly displays it! I even walk you through reproduction of the\ntest case\u0027s behavior:\n\n\u003e\u003e\u003e 2 Create a JUnit Plugin Test with test class\u003d\n\u003e\u003e\u003e   abbot.swt.eclipse.tests.MenuItemGetBoundsTest[....] 2 tests will\n\u003e\u003e\u003e   run (it\u0027s {pretty fast, hard to see} but you can see the mouse\n\u003e\u003e\u003e   move): the first clicks Run\u003eExternalTools\u003eExternalTools to\n\u003e\u003e\u003e   launch that wizard, and the second clicks File\u003eNew\u003eOther to\n\u003e\u003e\u003e   launch the New wizard.\n\n\u003csnip\u003e\n\n\u003e\u003e\u003e 3 Open abbot.swt.SWTWorkarounds in an editor and browse to\n\u003e\u003e\u003e getBounds (MenuItem menuItem)[....] Comment out that latter\n\u003e\u003e\u003e section, and uncomment the first section\n\n\u003csnip\u003e\n\n\u003e\u003e\u003e 4 Rerun abbot.swt.eclipse.tests.MenuItemGetBoundsTest (e.g. with\n\u003e\u003e\u003e   C-F11). Note that, instead of clicking the menu, the mouse clicks\n\u003e\u003e\u003e   the Search button on the toolbar, and the Search wizard launches\n\u003e\u003e\u003e   instead of External Tools. \n\n\u003e\u003e It\u0027s just easier not to have to guess from the code but I can do\n\u003e\u003e that if you want. It\u0027ll just take longer.\n\nYou know I don\u0027t want that, Steve: that\u0027s why I show you how to actually\nreproduce the problem. Why \"guess from the code\" when you can *observe*\nthe behavior?\n\n\u003e\u003e Also, a small stand alone test case that uses the API is really\n\u003e\u003e helpful rather than downloading and installing Abbot.\n\nKeep in mind here that the code in question (MenuItem.getBounds()) is\nrequired for automation. In order to empirically assess the\ncorrectness of the code, you\u0027re gonna hafta have some automation\nframework. I note\n\nhttp://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-swt-home/test_plan.html\n\u003e 1. Ensure all public API is exercised through a JUnit test\n\n\u003e - we have an automated tool to do this but we have not made it\n\u003e   publicly accessible yet\n\nbut it seems to have been that way for a while :-) Unfortunately\nautomation seems to require a fair amount of infrastructure.\nFortunately, in this case the infrastructure amounts to all of 3\nplugins. Is that so onerous? (Perhaps your non-public automation tool\nis more svelte? We\u0027d love to see it !-) You can get/install it, and\nreproduce the problem, in all of 15 minutes (on LAN). If you\u0027d like, I\ncan build binary plugin zips for abbot and abbot.swt for you:\nunfortunately pde.junit currently can\u0027t run tests outside the\nworkbench, so you\u0027d still hafta get that as source.\n\nNote that I\u0027m putting my automation framework out there for you and\neveryone to use, and to reproduce this problem, because ya gotta test,\nSteve, not just eyeball the code. We even expose our tests as JUnit\ntestcases that are easily run via Eclipse\u0027s builtin tooling! (Never\nlet it be said that I don\u0027t try to help you help me :-)\n\nSo until you put *your* automation tool out there for folks to use, I\ndon\u0027t see a feasible alternative to the following for testing this\nbug:\n\n0 Reproduce the problem as detailed in\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c102\n\n1 Twiddle the code in abbot.swt.SWTWorkarounds.getBounds(MenuItem) as\n  desired, then test using abbot.swt.eclipse.tests.MenuItemGetBoundsTest\n\n2 Repeat step 1 until you get the code the way you want it, and it\n  passes the test. For extra credit, run\n  abbot.swt.examples.CelsiusConverterFindingTest and\n  abbot.swt.examples.CelsiusConverterTest as JUnit tests (i.e.\n  Run\u003eRun\u003eJUnit, not Run\u003eRun\u003eJUnit Plugin Test)--they also pass with\n  the HEAD of abbot.swt.SWTWorkarounds.getBounds(MenuItem).\n\n3 Copy/mod your code from abbot.swt.SWTWorkarounds.getBounds(MenuItem)\n  back into org.eclipse.swt.widgets.MenuItem.getBounds(). (Then, make\n  it public !-)",
    "\u003e Keep in mind here that the code in question (MenuItem.getBounds()) is\n\u003e required for automation. In order to empirically assess the\n\u003e correctness of the code, you\u0027re gonna hafta have some automation\n\u003e framework. I note\n\u003e http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-swt-\nhome/test_plan.html\n\u003e \u003e 1. Ensure all public API is exercised through a JUnit test\n\u003e \u003e - we have an automated tool to do this but we have not made it\n\u003e \u003e   publicly accessible yet\n\u003e but it seems to have been that way for a while :-) Unfortunately\n\u003e automation seems to require a fair amount of infrastructure.\n\u003e Fortunately, in this case the infrastructure amounts to all of 3\n\u003e plugins.\n\nYou won\u0027t know if a snippet will reproduce the problem until you\u0027ve actually \ntried it. I don\u0027t see why querying menu location would require some sort of \ncomplex setup or series of events to reproduce the problem. Just create a \nShell, slap a menubar on it, call the package protected API, and place a \ntracker over that rectangle highlighting the bogus bounds. Not only is this \neasier for Steve, but it removes the however small chance that Abbot is doing \nsomething wrong.",
    "Please Tom, just stop.  I\u0027m not trying to imply anything or do anything other \nthat find out what is wrong and fix it.",
    "Randy: if you can, please contribute a snippet that launches a\nworkbench and tests MenuItem.getBounds() against it. If you can\u0027t,\nplease *try* to reproduce the bug as described, and ask where the\ndescriptions are unclear. I suspect you\u0027ll find that installing the\ncode and running the tests is not so nearly so onerous as you suspect\n(and probably a helluva lot less onerous than writing the snippet :-)\n\nRandy Hudson  2005-05-13 11:34\n\u003e You won\u0027t know if a snippet will reproduce the problem until you\u0027ve\n\u003e actually tried it.\n\nTrue, but I suspect you\u0027re overlooking 2 problems:\n\n0 Testcases show the problem occurring with SUT\u003dworkbench, not SUT\u003da\n  standalone app (more below)\n\n1 I don\u0027t know how to do a snippet that would\n\n(adapted for what actually needs done)\n\u003e Just [launch a workbench, find one of its MenuItem\u0027s], and place a\n\u003e tracker over that rectangle highlighting the bogus bounds.\n\nFirst, please note:\n\nTom Roche  2005-05-12 18:07\n\u003e\u003e\u003e When exercising a workbench, \n\nThat\u0027s the important part: exercising a workbench.\n\n\u003e\u003e\u003e the code in 3.1-M6/ org.eclipse.swt.widgets.MenuItem.getBounds(),\n\u003e\u003e\u003e massaged slightly to run from our different package, clicks below\n\u003e\u003e\u003e the menubar, activating the toolbar button immediately below the\n\u003e\u003e\u003e targeted menu item. I suspect it returns a y value that is too\n\u003e\u003e\u003e large.\n\nSecond, note that Abbot also works against standalone SWT: in fact we\nhave an example standalone SWT app and publically-available tests that\nrun against it:\n\n\u003e\u003e   For extra credit, run\n\u003e\u003e   abbot.swt.examples.CelsiusConverterFindingTest and\n\u003e\u003e   abbot.swt.examples.CelsiusConverterTest as JUnit tests (i.e.\n\u003e\u003e   Run\u003eRun\u003eJUnit, not Run\u003eRun\u003eJUnit Plugin Test)--they also pass\n\u003e\u003e   with the HEAD of abbot.swt.SWTWorkarounds.getBounds(MenuItem).\n\nThird, I know, from running those Celsius*Test\u0027s, that both code\nsections in abbot.swt.SWTWorkarounds.getBounds(MenuItem)\n\n\u003e\u003e\u003e   The first section is minimally adapted from 3.1-M6/\n\u003e\u003e\u003e   org.eclipse.swt.widgets.MenuItem.getBounds(), the latter is from\n\u003e\u003e\u003e   Abbot\u0027s patches. Note that the latter section is what you just\n\u003e\u003e\u003e   ran successfully. Comment out that latter section, and uncomment\n\u003e\u003e\u003e   the first section\n\nwork in the standalone case. The difference is the workbench case as\ndescribed in\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c102\n\nIn that case, our code STILL works, but the code derived from\norg.eclipse.swt.widgets.MenuItem.getBounds() fails.\n\nFinally, please note that the *only* reason why abbot.swt resorts to\nadapting org.eclipse.swt.widgets.MenuItem.getBounds() is because Steve\nhas made it non-public. Were it public, we could call it directly,\nwithout resorting to abbot.swt.SWTWorkarounds.\n\nSo if you can do a snippet that launches a workbench, finds one of its\nmainmenu items and highlights the bounds, please do, because you are\ncertainly correct that\n\n\u003e it [would remove] the however small chance that Abbot is doing\n\u003e something wrong.\n\nI am certainly not claiming that Abbot or abbot.swt is without fault:\nwe\u0027re trying to get an RC1 out and our users are making very clear\nwhere our faults and function gaps are :-) What I am doing is making\nan SWT automation framework publically available (IIRC the *only*\npublically available SWT automation framework, which is why so many\nfolks want this fixed), making testcases publically available,\npublically demonstrating how to reproduce a problem--and even\npublically demonstrating code that FIXES the problem! (Feel free to\ndemonstrate where *that* is at fault. Til then, honi soit qui mal y\npense.)\n",
    "SN, here\u0027s the snippet:\n\npublic static void main(String[] args) {\n\tDisplay display \u003d new Display ();\n\tShell shell \u003d new Shell (display);\n\tMenu bar \u003d new Menu (shell, SWT.BAR);\n\tshell.setMenuBar (bar);\n\tMenuItem fileItem \u003d new MenuItem (bar, SWT.CASCADE);\n\tfileItem.setText (\"File\");\n\tMenu submenu \u003d new Menu (shell, SWT.DROP_DOWN);\n\tfileItem.setMenu (submenu);\n\tMenuItem item \u003d new MenuItem (submenu, SWT.PUSH);\n\titem.setText (\"Select \u0026All\\tCtrl+A\");\n\titem.setAccelerator (SWT.CTRL + \u0027A\u0027);\n\tshell.setSize (200, 200);\n\tshell.open ();\n\t\n\ttry {\n\t\tMethod m \u003d fileItem.getClass().getDeclaredMethods()[8];\n\t\tSystem.out.println(m.toString());\n\t\tm.setAccessible(true);\n\t\tRectangle rect \u003d (Rectangle)m.invoke(fileItem, null);\n\t\tPoint where \u003d new Point(rect.x, rect.y);\n\t\twhere \u003d shell.toDisplay(where);\n\t\tShell highlight \u003d new Shell(display, SWT.NO_TRIM | \nSWT.PRIMARY_MODAL);\n\t\thighlight.setBounds(where.x, where.y, rect.width, rect.height);\n\t\thighlight.setBackground(display.getSystemColor\n(SWT.COLOR_INFO_BACKGROUND));\n\t\thighlight.open();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t\n\twhile (!shell.isDisposed()) {\n\t\tif (!display.readAndDispatch ()) display.sleep ();\n\t}\n\tdisplay.dispose ();\n}\n\n\nBTW, if setAccelerator is not called, an exception gets thrown.",
    "The problem is that MenuItem.getBounds() returns the coordinates in terms of \nthe parent, which is a Menu.  Menus are like Shells and use the coordinate \nsystem of the display, rather than their parent.  So some coordinate math is \nnecessary which is a bit bad but the best I can do right now.\n\nThere was also a bug in MenuItem.getBounds() where the wrong width was \nreturned on Windows.  That bug has been fixed and released.\n\nHere is a better snippet:\n\nimport java.lang.reflect.*;\n\nimport org.eclipse.swt.*;\nimport org.eclipse.swt.graphics.*;\nimport org.eclipse.swt.widgets.*;\n\npublic class PR_38436 {\npublic static void main(String[] args) {\n\tDisplay display \u003d new Display();\n\tShell shell \u003d new Shell(display);\n\tMenu bar \u003d new Menu(shell, SWT.BAR);\n\tshell.setMenuBar(bar);\n\tMenuItem fileItem \u003d new MenuItem(bar, SWT.CASCADE);\n\tfileItem.setText(\"File\");\n\tMenu submenu \u003d new Menu(shell, SWT.DROP_DOWN);\n\tfileItem.setMenu(submenu);\n\tMenuItem item \u003d new MenuItem(submenu, SWT.PUSH);\n\titem.setText(\"Select \u0026All\\tCtrl+A\");\n\titem.setAccelerator(SWT.CTRL + \u0027A\u0027);\n\tshell.setSize(200, 200);\n\tshell.open();\n\ttry {\n\t\tMethod m1 \u003d bar.getClass().getDeclaredMethod(\"getBounds\", \nnull);\n\t\tm1.setAccessible(true);\n\t\tRectangle menuRect \u003d (Rectangle) m1.invoke(bar, null);\n\t\tMethod m2 \u003d fileItem.getClass().getDeclaredMethod(\"getBounds\", \nnull);\n\t\tm2.setAccessible(true);\n\t\tRectangle itemRect \u003d (Rectangle) m2.invoke(fileItem, null);\n\t\tif ((bar.getStyle() \u0026 SWT.RIGHT_TO_LEFT) !\u003d 0) {\n\t\t\titemRect.x \u003d menuRect.x + menuRect.width - \nitemRect.width - itemRect.x;\n\t\t} else {\n\t\t\titemRect.x +\u003d menuRect.x;\n\t\t}\n\t\titemRect.y +\u003d menuRect.y;\n\t\tShell highlight \u003d new Shell(display, SWT.NO_TRIM | \nSWT.PRIMARY_MODAL);\n\t\thighlight.setBounds(itemRect.x, itemRect.y, itemRect.width, \nitemRect.height);\n\t\thighlight.setBackground(display.getSystemColor\n(SWT.COLOR_INFO_BACKGROUND));\n\t\thighlight.open();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\twhile (!shell.isDisposed()) {\n\t\tif (!display.readAndDispatch())\n\t\t\tdisplay.sleep();\n\t}\n\tdisplay.dispose();\n}\n}\n\n",
    "I have run MenuItemGetBoundsTest.  As SN described, the problem seems to be \nthat Menu.getBounds() is returning its result in display coordinates and the \ncode in WidgetLocator is translating these display relative coordinates using \nitem.getParent().getParent().toDisplay(bounds.x,bounds.y); and this is not \nneccessary.  The following works for me on Windows:\n\nIn SWTWorkaround:\n\n\tpublic static Rectangle getBounds(MenuItem menuItem) {\n//\t\t start code adapted from \n\u003curl\u003ehttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c112\u003c/url\u003e\n\t\tMenu parent \u003d menuItem.getParent();\n\t\tMethod m1 \u003d null;\n\t\ttry {\n\t\t\tm1 \u003d parent.getClass().getDeclaredMethod(\"getBounds\", \nnull);\n\t\t} catch (SecurityException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchMethodException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tm1.setAccessible(true);\n\t\tRectangle menuRect \u003d null;\n\t\ttry {\n\t\t\tmenuRect \u003d (Rectangle) m1.invoke(parent, null);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (InvocationTargetException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tMethod m2 \u003d null;\n\t\ttry {\n\t\t\tm2 \u003d menuItem.getClass().getDeclaredMethod\n(\"getBounds\", null);\n\t\t} catch (SecurityException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchMethodException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tm2.setAccessible(true);\n\t\tRectangle itemRect \u003d null;\n\t\ttry {\n\t\t\titemRect \u003d (Rectangle) m2.invoke(menuItem, null);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (InvocationTargetException e) {\n\t\t\t// TODO_Tom Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif ((parent.getStyle() \u0026 SWT.RIGHT_TO_LEFT) !\u003d 0) {\n\t\t\titemRect.x \u003d menuRect.x + menuRect.width - \nitemRect.width - itemRect.x;\n\t\t} else {\n\t\t\titemRect.x +\u003d menuRect.x;\n\t\t}\n\t\titemRect.y +\u003d menuRect.y;\n\t\treturn itemRect;\n//\t\t end code adapted from \n\u003curl\u003ehttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c112\u003c/url\u003e\t\n\t\n\t}\n\n\nIn WidgetLocator.getBounds(Widget, boolean):\n\nif(w instanceof MenuItem){\n\tMenuItem item \u003d (MenuItem)w;\n\treturn SWTWorkarounds.getBounds(item);\n}",
    "Veronika Irvine 05/16/2005 04:58:02 PM:\n\u003e\u003e I have reproduced the problem and seen that the code from M6 and\n\u003e\u003e from 38436#c112 both fail whereas \"code adapted from o.e.swt.\n\u003e\u003e patched.MenuItem.getBounds()\" works. Will investigate with Steve.\n\nVeronika Irvine  2005-05-16 17:55\n\u003e I have run MenuItemGetBoundsTest. As SN described, the problem seems\n\u003e to be that Menu.getBounds() is returning its result in display\n\u003e coordinates and the code in WidgetLocator is translating these\n\u003e display relative coordinates using\n\u003e item.getParent().getParent().toDisplay(bounds.x,bounds.y); and this\n\u003e is not neccessary.\n\nDoh! I still don\u0027t understand why the translation only failed in-\nworkbench and not standalone, but the tests now pass, which is what\ncounts. Thanks so much!",
    "For future consideration, I think the problem would be simplified if Menu \nsupported toControl() and toDisplay().  That way you would not have to do the \nfollowing math:\n\nif ((parent.getStyle() \u0026 SWT.RIGHT_TO_LEFT) !\u003d 0) {\n\titemRect.x \u003d menuRect.x + menuRect.width - itemRect.width - itemRect.x;\n} else {\n\titemRect.x +\u003d menuRect.x;\n}\nitemRect.y +\u003d menuRect.y;\n\nInstead, you would just get the bounds of the MenuItem (itemRect in the code \nabove) and call menuItem.getParent().toDisplay(itemRect.x, itemRect.y).",
    "Yes, but more importantly, Display.map() needs to take more than just \ncontrols.  Display.map() is the API that maps whole rectangles from RTL and \nLTR coordinate systems which is the right way to do coordinate transformations \nin a mirrored world.",
    "org.eclipse.swt.custom.CTabFolder class do not expose any methods to get the\nRectangle bounds of :\n          1) Chevron \u003e\u003e\u003e button\n          2) Minimize/Maximize button\n          3) Close button\n\nIn Eclipse 3.0 milestones releases, methods exists to get those bounds but they \nwere removed. The implications for GUI Test Automation tool(IBM Rational \nFunctional Tester) is that they CANNOT click on the chevron, min/max or close \nbuttons and so cannot test complex cases where more views are stacked at a \nCTabFolder.",
    "Created an attachment (id\u003d23906)\nabbot.swt.SWTWorkarounds shelters from Widget.getBounds()-related problems:\ncases where either Whatever.getBounds() is unavailable, not public, or has\nunwelcome behavior.\n\nMost up-to-date code, as well as code for users of abbot.swt.SWTWorkarounds\n(currently\n\nabbot.tester.swt.WidgetLocator\nabbot.tester.swt.MenuItemTester\nabbot.tester.swt.ScrollBarTester\nabbot.tester.swt.TableTester\nabbot.tester.swt.TreeItemTester\n\n) is available (with null password) from\n\ncvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/abbot co abbot.swt\n",
    "Tao Weng 05/26/2005 11:43 AM\n\u003e\u003e\u003e Currently, Abbot.swt solution is not platform independent due to\n\u003e\u003e\u003e bugzilla defect number 38436.\n\n\u003csnip\u003e\n\n\u003e\u003e\u003e 1) Is the defect going to be fixed within the next 6 months or so? \n\u003e\u003e\u003e If not, when is it going to be available. Just roughly....\n\n\u003e\u003e\u003e 2) Is it possible to release a patched version of swt for linux \n\u003e\u003e\u003e environment in the next 6 months. Just like what we did for windows? \n\nSteve Northover 05/26/2005 12:19:43 PM:\n\u003e\u003e Yes. Either the bug will be fixed or I will work with Tom to ensure\n\u003e\u003e that Abbot is patched to support Linux. \n\nTom Roche 05/26/2005 10:15 PM\n\u003e Thanks!\n\n\u003e\u003e Tom, if you contribute the [SWTWorkarounds] class from Abbot to\n\u003e\u003e the bug report, we will look at providing implementations for the\n\u003e\u003e other plaforms.\n\n\u003e Will do soonest, just verifying a (candidate) fix for 3.0 first.\n\nUnfortunately soonest was much less soon than I had hoped :-( but I\nhave refactored such that (IIUC) all abbot.swt\u0027s SWT workarounds are\nin abbot.swt.SWTWorkarounds, which is now attached. Apologies for the\ndelay, your assistance is appreciated.\n",
    "I am working on a version of SWTWorkarounds that can be used for 3.1.  Hold \nthe phone.\n\nThomas, the implementation of swt2Awt() can\u0027t work anywhere else but Windows.  \nThe format of the KeyTable is platforms specific.  Is this method critical to \nAbbot? (seems like it might be).  Can you please recode this method either as \na horrible huge case statement or a hash table and post the code here?  Thanks!",
    "We have the code ready but need an implementation of swt2Awt() before we can \nproceed.",
    "Comment #120 From Steve Northover  2005-07-11 11:53\n\u003e I am working on a version of SWTWorkarounds that can be used for\n\u003e 3.1.\n\nGreat! Thanks for your cooperation!\n\n\u003e Thomas, the implementation of swt2Awt() can\u0027t work anywhere else\n\u003e but Windows. The format of the KeyTable is platforms specific.\n\nSteve, SWTWorkarounds.keyTable exists to enable\nSWTWorkarounds.swt2Awt(int swtKeyValue), and both are in\nSWTWorkarounds because ... they\u0027re more \u003cbleep\u003eing workarounds for\nSWT. As the latter\u0027s javadoc states:\n\n  /**\n   * Translates from SWT keys values to AWT ones, e.g.\n   * from \u003ccode\u003eSWT.ESC\u003c/code\u003e to \u003ccode\u003eVK_ESCAPE\u003c/code\u003e.\n   * For details see\n   * {@link org.eclipse.swt.widgets.Display#KeyTable}\n   * Workaround for package scope of\n   * {@link org.eclipse.swt.widgets.Display#untranslateKey(int)}\n   */\n\nSo ... could you please just make Display.untranslateKey(int) public?\ninstead of requiring Yet Another Workaround\n\n\u003e Can you please recode this method either as a horrible huge case\n\u003e statement or a hash table\n\nfrom your users? \n",
    "Tom, I\u0027m going to appeal one last time to please skip the editorial comments \nlike \"bleep\" or \"Yet Another WorkAround\".  They are offsensive, cloud the \nissue, waste time and make me wonder why on earth I would want to help someone \nwho continually insults me and the work I do.\n\nPlease read the rest of this comment and respond only to the technical issues.\n\n\u003eThomas, the implementation of swt2Awt() can\u0027t work anywhere else but\n\u003eWindows.  The format of the KeyTable is platforms specific.\n\nThe package variable KeyTable maps SWT key constants to platform specific key \nconstants.  On Windows, keys like SWT.HOME are mapped to the Windows constant \nVK_HOME.  On GTK, SWT.HOME is mapped to GDK_HOME.  It does not map SWT key \nconstants to AWT key constants and therefore cannot be made to do this.  In \naddition, it does not make sense for SWT to provide a mechanism to map SWT \nconstants to AWT constants.  For one, AWT doesn\u0027t exist on all the platforms \nwhere SWT runs.  So, if Abbot needs to make AWT constants to SWT constants for \nsome reason, Abbot will need code to do this.  Since I have no idea what this \nmapping is used for and cannot know from the source code in SWTWorkarounds, \nyou are the most logical person to write the code and contribute it.\n\nOther than the mapping table, we are ready to go.\n",
    "Comment #123 From Steve Northover 2005-07-12 13:20\n\u003e Tom, I\u0027m going to appeal one last time to please skip the editorial\n\u003e comments like \"bleep\" or \"Yet Another WorkAround\".\n\nSteve, lighten up, then\n\n\u003e respond only to the technical issues.\n\ne.g. \n\nComment #122 From Tom Roche  2005-07-12 12:06\n\u003e\u003e could you please just make Display.untranslateKey(int) public?\n\nIf not I\u0027ll try reflecting on it, which would presumably obviate the\nneed for the local copy of org.eclipse.swt.widgets.Display.KeyTable\n(or am I missing something?)\n",
    "The mapping table in Display is different on every platform.  It maps SWT keys \nto platform specific keys, not AWT keys.  Therefore it cannot be used.  You \nwill need to provide an implementation that maps SWT keys to AWT keys.  Once \nwe have that code, the 3.1 SWTWorkarounds patch will be complete.",
    "To be even more precise, the mapping table will be portable and will live \ninside SWTWorkarounds.",
    "Comment #125 From Steve Northover  2005-07-12 17:54\n\u003e The mapping table in Display is different on every platform. It maps\n\u003e SWT keys to platform specific keys, not AWT keys. Therefore it\n\u003e cannot be used. You will need to provide an implementation that maps\n\u003e SWT keys to AWT keys.\n\nOK, will do. If you know of any tables with this information, please\npoint.\n",
    "I know of none.",
    "Created an attachment (id\u003d25375)\norg.eclipse.swt.widgets.SWTWorkarounds lives in Abbot, exposing needed\npackage-privates to users\n",
    "\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c122\nFrom Tom Roche  2005-07-12 12:06\n\u003e\u003e could you please just make Display.untranslateKey(int) public?\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c125\nFrom Steve Northover 2005-07-12 17:54\n\u003e The mapping table in Display is different on every platform. It\n\u003e maps SWT keys to platform specific keys, not AWT keys. Therefore it\n\u003e cannot be used.\n\nApologies for the delay. Turns out that SWTWorkarounds.swt2Awt was a\nred herring:\n\n* it did _not_ translate from SWT to AWT key values\n\n* its caller needed translation from SWT to native, hence the local\n  copy of Display.KeyTable.\n\nPlease find\n\nhttps://bugs.eclipse.org/bugs/attachment.cgi?id\u003d25375\n\nattached. In addition to renaming the method, I also changed\nSWTWorkarounds\u0027 package to workaround the package-visibility issues:\nthis allows SWTWorkarounds.swt2OS to call Display.untranslateKey(int)\ndirectly. I\u0027ll also try eliminate the reflection in\ngetBounds(MenuItem) after we branch for 3.1. Meanwhile,\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c120\nFrom Steve Northover  2005-07-11 11:53\n\u003e\u003e\u003e I am working on a version of SWTWorkarounds that can be used for\n\u003e\u003e\u003e 3.1.\n\nPlease lemme know if you find any other obstacles.\n",
    "\u003eOther than the mapping table, we are ready to go.\n\n1) Please don\u0027t write any code or change anything in the SWTWorkarounds class \n(other than the mapping table).  We are have been ready to go with the code \nfor a while.  No other work is necessary and changing anything else in the \nfile may actually cause work.\n\n2) Are you telling me that Abbot really needs to translate SWT keys to \noperating system keys in order to work?  There is no API in SWT that will \naccept operating system key values and do anything sensible with them.  Is \nthere an API in AWT or Abbot that takes operating system key values?  If so, \nhow is Abbot for AWT getting these values?  Is there AWT API that translates \nAWT key values to operating system key values?\n\n\n",
    "https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c131\nFrom Steve Northover  2005-07-27 18:57 (rearranged)\n\u003e 2) Are you telling me that Abbot really needs to translate SWT keys\n\u003e to operating system keys in order to work?\n\nIf you define \"really\" as in \"SWT really needs to have a package-\nprivate Display.untranslateKey(int),\" then yes: at the moment, in one\nplace, it does.\n\n\u003e 1) Please don\u0027t write any code or change anything in the\n\u003e SWTWorkarounds class (other than the mapping table). We are have\n\u003e been ready to go with the code for a while. No other work is\n\u003e necessary and changing anything else in the file may actually cause\n\u003e work.\n\nWhat has changed:\n\n* the package, allowing ...\n\n* ... keyTable (and initKeyTable(...)) to disappear, per your request\n\n* swt2Awt(...) -\u003e swt2OS(...)\n\n* swt2OS(...) calls Display.untranslateKey(int) directly\n\nSince presumably none of your code used the local keyTable or called\ninitKeyTable(...) or swt2Awt(...), you should have no problems.\n",
    "Billy to go and get the Abbot source and find out what Abbot is doing with \noperating system key values to determine whether the API is needed or not and \npost the results in this bug report.",
    "The only code I found that used swt2OS() was in TreeItemTester:\n\n  new Robot().keyPress(SWTWorkarounds.swt2OS(SWT.ESC));\n\nThe method swt2OS(SWT.ESC) returns GDK_Escape (0xff1b) under GTK+.  I cannot\nfind any code path in Robot().keyPress() which expects a GDK key value, and\nsending 0xff1b to an AWT robot under GTK+ results in an invalid key code\nexception.  I assume this works on Windows because SWT.ESC maps to Windows\u0027\nVK_ESCAPE (0x1b) which I guess happens to have the same value as the AWT VK_ESCAPE.\n\nI don\u0027t think this function is actually useful to you.  Is there somewhere else\nyou intended to use this?",
    "https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c131\nFrom Steve Northover  2005-07-27 18:57\n\u003e\u003e\u003e 2) Are you telling me that Abbot really needs to translate SWT\n\u003e\u003e\u003e keys to operating system keys in order to work?\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c132\nFrom Tom Roche  2005-07-27 19:27\n\u003e\u003e If you define \"really\" as in \"SWT really needs to have a package-\n\u003e\u003e private Display.untranslateKey(int),\" then yes: at the moment, in\n\u003e\u003e one place, it does.\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c134\nFrom Billy Biggs  2005-07-28 10:59\n\u003e The only code I found that used swt2OS() was in TreeItemTester:\n\n\u003e   new Robot().keyPress(SWTWorkarounds.swt2OS(SWT.ESC));\n\nCorrect.\n\n\u003e The method swt2OS(SWT.ESC) returns GDK_Escape (0xff1b) under GTK+. I\n\u003e cannot find any code path in Robot().keyPress() which expects a GDK\n\u003e key value, and sending 0xff1b to an AWT robot under GTK+ results in\n\u003e an invalid key code exception. I assume this works on Windows\n\u003e because SWT.ESC maps to Windows\u0027 VK_ESCAPE (0x1b) which I guess\n\u003e happens to have the same value as the AWT VK_ESCAPE.\n\nDoh! hafta do an swt2Awt after all ...\n\n\u003e I don\u0027t think this function is actually useful to you. Is there\n\u003e somewhere else you intended to use this?\n\nAs stated above, just this one place. Doesn\u0027t mean it won\u0027t be useful\nin the future, but if you really can\u0027t tolerate its existence, feel\nfree to remove: we can always add it back if needed.\n",
    "\n\u003e \n\u003e As stated above, just this one place. Doesn\u0027t mean it won\u0027t be useful\n\u003e in the future, but if you really can\u0027t tolerate its existence, feel\n\u003e free to remove: we can always add it back if needed.\n\u003e \n\nYAGNI\n",
    "What Billy is trying to tell you is that this method is not only useless, it \nis also broken.  It does not work on GTK.\n\nAfter examining the Abbot source code, we have determined that the intent of \nthe method is to map SWT key values to AWT key values (not operating system \nkey values as was previously claimed).  Since Abbot calls swt2OS() in exactly \none place, always with SWT.ESC and SWT.ESC maps to AWT\u0027s VK_ESCAPE, I suggest \nyou change Abbot to simply inline AWT\u0027s VK_ESCAPE.  To be more precise, change \nthe line to TreeItemTester to be:\n\n  new Robot().keyPress(KeyEvent.VK_ESCAPE));\n\nOnce this is done, we can release the patch.",
    "https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c137\nFrom Steve Northover  2005-07-28 13:39\n\u003e new Robot().keyPress(KeyEvent.VK_ESCAPE));\n\nDone!",
    "Created an attachment (id\u003d25431)\nSWTWorkarounds for Abbot (SWT 3.1, Windows, GTK and Motif)\n\nHere is the SWTWorkarounds class for Abbot (SWT 3.1, Windows, GTK and Motif).  \n\n\nNOTE: There is no work around code for the Mac due to missing operating system\nfeatures for that platform and lack of support from Apple.  Too bad!",
    "should getBounds(Menu) call itself or getBounds((Object)menu);?",
    "\u003e should getBounds(Menu) call itself or getBounds((Object)menu);?\n\nditto getBounds(MenuItem) ... that first stack overflow was attention-grabbing :-)",
    "Oops, we didn\u0027t do a final test pass on everything (but the code should be \nclose).  Please attach a new class with your fixes when you have finished \ntesting it.  If you have any problems, let us know.",
    "\u003e Created an attachment (id\u003d25431) [edit]\n\u003e SWTWorkarounds for Abbot (SWT 3.1, Windows, GTK and Motif)\n\u003e \n\u003e Here is the SWTWorkarounds class for Abbot (SWT 3.1, Windows, GTK and Motif).  \n\nThis does not work properly for menu(item)s (I already added the cast to\nObject). The coordinates do not get mapped to display space coords. As I am not\ninvolved into abbot at all, I don\u0027t know whether this should happen in\nSWTWorkarounds or in WidgetLocator.getBounds(). However,\nSWTWorkarounds.getBounds(Menu menu) already answers display space coords for me\n(Linux/GTK). So, I added a  \n\nitemRect.y +\u003d menuRect.y;\n\nin getBounds(MenuItem menuItem) and it seems to work fine for me. Here is the\nwhole method:\n\npublic static Rectangle getBounds(MenuItem menuItem) {\n        Rectangle itemRect \u003d getBounds ((Object)menuItem);\n        Rectangle menuRect \u003d getBounds (menuItem.getParent ());\n        if ((menuItem.getParent ().getStyle() \u0026 SWT.RIGHT_TO_LEFT) !\u003d 0) {\n            itemRect.x \u003d menuRect.x + menuRect.width - itemRect.width - itemRect.x;\n        } else {\n            itemRect.x +\u003d menuRect.x;\n        }\n        itemRect.y +\u003d menuRect.y;\n        return itemRect;\n}",
    "Created an attachment (id\u003d25499)\nSWTWorkarounds for Abbot (SWT 3.1: Windows, GTK, Motif)\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c143\nFrom i.maier@tu-bs.de  2005-08-01 06:08\n\u003e I added a  \n\n\u003e itemRect.y +\u003d menuRect.y;\n\n\u003e in getBounds(MenuItem menuItem) and it seems to work fine for me.\n\nThanks, Ingo Maier! Attachment also fixes the stack overflows.\nRemaining known issues:\n\n* tree item finding (e.g. in New Wizard dialog) requires \"training\": a\n  test will fail the first time, but succeeds after first manual\n  iteration. E.g. I observe the sequence [Run\u003eRun\u003e\u003ctest\u003e: fails, run\n  the same scenario manually, Run\u003eRun\u003e\u003ctest\u003e: succeeds] with several\n  tests (JavaProjectTester, WTPSimpleWebProjectTest, WTPWizardTest).\n\n* need to handle cases when method is unavailable\n\n* incomplete Carbon support\n",
    "https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d38436#c144\n\u003e Remaining known issues:\n\non win32: need reports from other platforms\n",
    "Created an attachment (id\u003d25568)\nSWTWorkarounds for Abbot (SWT 3.1: Windows, GTK, Motif)\n\nOK, here is the latest class.  I tested the code on Windows, GTK and Motif.\n\nTOM:  Do not put this class in org.eclipse.swt.widgets.  It is temporary work\naround code specifically for Abbot.  I put it in the package abbot.swt which\nwas the original place you had the workaround.",
    "\u003e* tree item finding (e.g. in New Wizard dialog) requires \"training\": a\n\u003e  test will fail the first time, but succeeds after first manual\n\nEnter a new bug report for this.  It has nothing to do with this bug report.",
    "As I see, this topic is dead for a half year, and still not solved. From what I understood here, MenuItem on MacOS is stuck, but other widgets, which have fixed place (like TabItem) didn\u0027t run into this problem and could be implemented on all platforms. Couldn\u0027t this be done at least for widgets for which it is possible? Cause I see the need not only for automatic testing, but for general use (such as creating context menus for TabItem\u0027s).",
    "I agree with you, however, we cannot offer API on one platform that cannot be implemented on another or SWT will cease to be portable.",
    "That\u0027s really true, but I\u0027m talking only about widgets, for which such functionality can be implemented on all platforms. This wouldn\u0027t break portability.",
    "Steve, per our recent email exchange, would you please provide a workaround/patch implementation of getBounds() for TreeColumn (analogous to what we\u0027re using for some of the other non-Control Widgets in our SWTWorkarounds class in abbot.swt (on SourceForge)?  Thanks.",
    "NOTE:  Our email exchange consisted of me asking Gary to ask for this new feature in the bug report.",
    "Created an attachment (id\u003d56919)\nSWTWorkarounds for Abbot (SWT 3.2: Windows, GTK, Motif) \n\nNew versions of the code for 3.2.",
    "Created an attachment (id\u003d74636)\nextends SWT to add a getBounds method for MenuItem, and for TabItem, on OSX\n\nThe enclosed code extends SWT to add a getBounds method for MenuItem, and for TabItem, on OSX.\n\nThe way it does this is to use the Accessibility API. You must first have checked the item\n\t\u0027System Preferences/Universal Access/Enable access for assistive devices\u0027 \nThis is unfortunate, but this seems like an acceptable cost for a test framework.",
    "(From update of attachment 74636)\n "
  ],
  "commentCreationDates": [
    "2003-06-04T22:20:55+02:00",
    "2003-06-12T17:50:07+02:00",
    "2004-04-21T06:35:07+02:00",
    "2004-04-21T15:32:28+02:00",
    "2004-05-07T22:42:51+02:00",
    "2004-05-07T23:20:58+02:00",
    "2004-05-14T00:36:47+02:00",
    "2004-05-14T22:28:35+02:00",
    "2004-05-18T15:16:52+02:00",
    "2004-05-18T21:03:39+02:00",
    "2004-05-25T22:38:26+02:00",
    "2004-06-02T21:08:57+02:00",
    "2004-06-02T21:44:54+02:00",
    "2004-06-02T22:14:20+02:00",
    "2004-06-03T15:43:19+02:00",
    "2004-06-03T17:28:16+02:00",
    "2004-06-03T22:14:13+02:00",
    "2004-06-25T19:49:30+02:00",
    "2004-06-25T19:56:45+02:00",
    "2004-07-20T20:32:58+02:00",
    "2004-07-20T21:26:05+02:00",
    "2004-07-20T21:28:10+02:00",
    "2004-08-25T18:16:46+02:00",
    "2004-08-25T23:25:09+02:00",
    "2004-11-21T21:12:18+01:00",
    "2004-11-22T16:41:13+01:00",
    "2004-11-22T17:19:35+01:00",
    "2004-11-23T15:52:52+01:00",
    "2004-11-23T17:28:52+01:00",
    "2004-11-23T17:58:47+01:00",
    "2004-11-23T19:05:07+01:00",
    "2004-11-23T21:52:43+01:00",
    "2004-11-30T18:04:40+01:00",
    "2004-11-30T18:38:38+01:00",
    "2004-11-30T18:47:52+01:00",
    "2004-11-30T18:56:27+01:00",
    "2004-11-30T19:00:52+01:00",
    "2004-11-30T21:31:38+01:00",
    "2004-11-30T22:57:05+01:00",
    "2004-11-30T23:25:23+01:00",
    "2004-11-30T23:53:34+01:00",
    "2004-12-01T17:38:11+01:00",
    "2004-12-01T17:51:08+01:00",
    "2004-12-01T18:04:25+01:00",
    "2004-12-03T11:41:52+01:00",
    "2004-12-03T15:05:33+01:00",
    "2004-12-03T21:20:13+01:00",
    "2004-12-03T22:00:34+01:00",
    "2004-12-03T22:14:35+01:00",
    "2004-12-03T22:27:33+01:00",
    "2004-12-03T22:40:33+01:00",
    "2004-12-03T22:55:36+01:00",
    "2004-12-03T23:05:45+01:00",
    "2004-12-03T23:24:43+01:00",
    "2004-12-03T23:37:32+01:00",
    "2004-12-06T15:49:10+01:00",
    "2004-12-06T16:15:51+01:00",
    "2004-12-06T16:26:00+01:00",
    "2004-12-06T20:35:40+01:00",
    "2004-12-06T20:39:39+01:00",
    "2004-12-06T21:13:32+01:00",
    "2004-12-06T22:13:33+01:00",
    "2004-12-07T02:17:31+01:00",
    "2004-12-07T08:43:15+01:00",
    "2004-12-10T22:08:30+01:00",
    "2004-12-10T23:06:50+01:00",
    "2005-01-10T22:10:18+01:00",
    "2005-01-10T22:35:04+01:00",
    "2005-01-10T23:35:42+01:00",
    "2005-01-11T15:45:27+01:00",
    "2005-01-19T01:31:32+01:00",
    "2005-01-19T17:25:02+01:00",
    "2005-01-19T17:46:19+01:00",
    "2005-01-19T17:51:41+01:00",
    "2005-02-26T01:29:19+01:00",
    "2005-02-28T08:14:13+01:00",
    "2005-03-19T08:31:58+01:00",
    "2005-03-29T05:35:38+02:00",
    "2005-03-29T18:18:29+02:00",
    "2005-03-29T18:58:40+02:00",
    "2005-04-08T20:21:25+02:00",
    "2005-04-08T20:58:25+02:00",
    "2005-05-02T18:30:22+02:00",
    "2005-05-10T03:58:40+02:00",
    "2005-05-10T14:31:07+02:00",
    "2005-05-10T18:00:33+02:00",
    "2005-05-10T18:38:12+02:00",
    "2005-05-10T18:54:02+02:00",
    "2005-05-10T19:55:44+02:00",
    "2005-05-10T20:08:40+02:00",
    "2005-05-10T20:33:22+02:00",
    "2005-05-10T21:55:39+02:00",
    "2005-05-10T22:11:35+02:00",
    "2005-05-10T23:13:16+02:00",
    "2005-05-11T02:03:51+02:00",
    "2005-05-11T14:03:44+02:00",
    "2005-05-11T14:11:04+02:00",
    "2005-05-11T19:11:18+02:00",
    "2005-05-11T22:15:26+02:00",
    "2005-05-11T22:31:15+02:00",
    "2005-05-11T22:50:49+02:00",
    "2005-05-12T19:46:19+02:00",
    "2005-05-13T00:07:48+02:00",
    "2005-05-13T00:34:32+02:00",
    "2005-05-13T01:45:07+02:00",
    "2005-05-13T01:47:52+02:00",
    "2005-05-13T14:50:26+02:00",
    "2005-05-13T17:04:39+02:00",
    "2005-05-13T17:34:39+02:00",
    "2005-05-13T18:15:02+02:00",
    "2005-05-13T18:51:18+02:00",
    "2005-05-13T19:48:55+02:00",
    "2005-05-13T20:28:52+02:00",
    "2005-05-16T23:55:16+02:00",
    "2005-05-17T00:59:05+02:00",
    "2005-05-17T14:23:16+02:00",
    "2005-05-17T16:47:11+02:00",
    "2005-05-31T23:32:58+02:00",
    "2005-06-24T01:11:30+02:00",
    "2005-06-24T01:15:50+02:00",
    "2005-07-11T17:53:06+02:00",
    "2005-07-12T16:53:34+02:00",
    "2005-07-12T18:06:47+02:00",
    "2005-07-12T19:20:30+02:00",
    "2005-07-12T19:37:15+02:00",
    "2005-07-12T23:54:13+02:00",
    "2005-07-13T00:09:22+02:00",
    "2005-07-13T16:49:11+02:00",
    "2005-07-13T17:01:25+02:00",
    "2005-07-27T22:07:13+02:00",
    "2005-07-27T22:10:15+02:00",
    "2005-07-28T00:57:06+02:00",
    "2005-07-28T01:27:28+02:00",
    "2005-07-28T16:01:56+02:00",
    "2005-07-28T16:59:47+02:00",
    "2005-07-28T18:57:34+02:00",
    "2005-07-28T19:37:34+02:00",
    "2005-07-28T19:39:04+02:00",
    "2005-07-28T19:49:44+02:00",
    "2005-07-28T21:53:26+02:00",
    "2005-07-28T22:27:16+02:00",
    "2005-07-28T22:40:11+02:00",
    "2005-07-28T23:20:41+02:00",
    "2005-08-01T12:08:12+02:00",
    "2005-08-01T14:14:11+02:00",
    "2005-08-01T14:18:01+02:00",
    "2005-08-02T19:34:32+02:00",
    "2005-08-02T19:36:24+02:00",
    "2006-03-06T12:19:59+01:00",
    "2006-04-28T16:56:03+02:00",
    "2006-05-02T07:47:33+02:00",
    "2007-01-12T23:10:15+01:00",
    "2007-01-13T14:49:28+01:00",
    "2007-01-15T18:23:20+01:00",
    "2007-07-26T03:10:09+02:00",
    "2007-07-26T19:14:08+02:00"
  ],
  "traces": [
    {
      "exceptionType": "abbot.WaitTimedOutError",
      "message": "Timed out waiting for External Tools to show",
      "elements": [
        {
          "method": "abbot.tester.swt.Robot.wait",
          "source": "Robot.java:1454"
        },
        {
          "method": "abbot.tester.swt.Robot.wait",
          "source": "Robot.java:1442"
        },
        {
          "method": "abbot.tester.swt.WidgetTester.waitForShellShowing",
          "source": "WidgetTester.java:897"
        },
        {
          "method": "abbot.swt.eclipse.tests.MenuItemGetBoundsTest$1.run",
          "source": "MenuItemGetBoundsTest.java:82"
        }
      ],
      "number": 0,
      "commentIndex": 102,
      "bugId": "38436",
      "date": "2005-05-13T00:07:48+02:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "enhancement"
    }
  ],
  "groupId": "38436",
  "bugId": "38436",
  "date": "2003-06-04T22:20:55+02:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "enhancement"
}