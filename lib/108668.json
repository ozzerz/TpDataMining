{
  "comments": [
    "I was reading\nhttp://www-128.ibm.com/developerworks/xml/library/x-utf8/?ca\u003ddnt-635 today, and\nit got me thinking; why does Eclipse default to a platform-specific encoding for\nits file types when creating new files? In the majority of cases, source files\nwill already be in US-ASCII (which is upwards compatible with UTF-8) and these\ndays, operating systems are already capable of dealing with UTF-8 documents in\neditors (Windows has notepad and wordpad, Mac OS X has TextEdit, and Linux has a\nvariety of tools (vim, emacs) that also support UTF-8.\n\nThis would also avoid potential problems with creating HTML pages, by\ndisallowing certain windows-codepage characters (those tending to be ` and \u0027\nquotes) that don\u0027t show up on other platforms.\n\nObviously Eclipse can be configured to define the default encoding type, but\nEclipse is such a leading player in the IDE market that it makes sense for\nEclipse to take the lead in making UTF-8 the default encoding for text files.",
    "-1 to do this for all kind of text files. Note we already define UTF-8 as\ndefault for files with content-type XML.\n\nMoving to JDT Core to decide whether they want to define a default encoding for\nJava source files.\n\n",
    "Why -1 for all types of files? It will only affect newly created files within\nEclipse, and the default can be changed by users afterwards.\n\nGiven that Eclipse is well set up for distributed environments, and indeed,\nworks on many platforms, then UTF-8 is the only sensible default encoding type.\n\nGranted, there may be good reasons; but can you explain them here for others\ninterested in the reasoning behind the decision?",
    "Because Eclipse is not just an IDE and more important we should not override the\nplatform (os) encoding that user has chosen.",
    "The user does not normally choose the platform OS encoding. They install an\noperating system and say they\u0027re in the U.S./Japan/Quebec/Denmark/ wherever and\na default character set is chosen for them based on that information. On Windows\nand the Mac, this encoding is likely to be a local, platform dependent,\nnon-standard character set. Linux is a little better. You\u0027re at least likely to\nget a genuine standard character set. However, it still may not be Unicode.\n\nThe user has not made an explicit choice of the default encoding at the\noperating system level, and generaly cannot make that choice. I think the\nvendors should also change their defaults to UTF-8 and Unicode, but until they\ndo, there\u0027s no reaosn for Eclipse to repsect their defaults. ",
    "For that matter, Windows users don\u0027t get to choose what their encoding is\neither. The regional options specify a \u0027Language for non-Unicode platforms\u0027 that\nshould be used as a fall-back when you have a program that doesn\u0027t know what\nUnicode is. But Eclipse knows what Unicode is, and can deal with it nicely; even\nWindows 2000 supported UTF-8.\n\nGiven that all OS vendors are moving towards supporting UTF-8 as a default\noption, I think it\u0027s time to give the shackles of codepages a rest and move\nforwards rather than looking backwards. It doesn\u0027t really matter whether you\u0027re\nlooking at Eclipse as an IDE or the Eclipse platform; I\u0027m writing a Rich Client\nApplication and it\u0027s just as important for that that the default text format is\na cross-platform rather than platform-specific format. After all, I\u0027m developing\nit as a Rich Client app because of the cross-platform support.",
    "I\u0027ll voice my 2 cents that I do not possibly see how UTF-8 as the default for \nall files could possibly work. Seems this would mean files created with Eclipse \ncould not be interoperable with other applications not making that assumption. \nPerhaps the originator is assuming that all UTF-8 is identified with a 3 byte \nBOM, which I do not think is true. Even if so, Java, by itself, does not even \nhandle that 3 byte BOM well (does not handle well on \u0027read\u0027, does not produce \nduring \u0027write\u0027). Of course, it makes sense for XML, etc. HTML and JSP\u0027s all have \ntheir own spec\u0027d encoding rules (well, HTML doesn\u0027t, that I know of). But as a \ngeneral rule, if the encoding is not identified in the content (or spec\u0027d rules \nfor the content), you pretty much have to assume platform default. \n",
    "Much as I would like to see some sanity in this area, I agree with David. The\ndescription is correct - an increasing number of applications can deal with\nUTF-8. The fact that Windows adds the UTF-8 BOM helps a lot. But other platforms\nstill don\u0027t write a UTF-8 BOM, and until there is a reliable,\nplatform-independent, content-independent way to detect UTF-8 encoding, it\ndoesn\u0027t make sense as the Eclipse default. Too bad, really, but easy workaround.\nThe user can set UTF-8 as the default encoding.",
    "Autodetection of encoding would be nice. However, without a lot of effort it\ncan\u0027t be done for all types of files. However this does not mean we shoudl\naccept the platform default. The platform default is just one other encoding\nthat cannot be autodetected. There is no reason that encoding is more likely to\nbe correct than UTF-8. In 2005 files are routinely moved between platforms and\nlocales. I often start a project by checking existing code out of a source\nrepository. What encoding the files are in, depends only on what encoding they\nwere checked in as. It has nothing to do with the platform default.\n\nOne option that UTF-8 offers (and single byte platform defaults do not) is to\nattempt to read a file as UTF-8 and, if it fails, to try again with the platform\ndefault. A file that is not UTF-8 is unlikely to be be read as UTF-8 without\ndetectable error. The reverse is not true. If, for instance, you attempt to read\na file as Latin-1, then all files will seem to be legal Latin-1 without\nexception, even if that\u0027s wrong. Non-UTF-8 can normally be detected through\ninvalid byte sequences. However all byte sequences are legal in Latin-1 and most\nothe rsingle-byte character sets.  ",
    "The fact is no single encoding will work as the default for all files. This\nincludes the platform default. The current system does not work. The question is\nnot whether UTF-8 will work for all files. It won\u0027t. The question is whether\nassuming UTF-8 as the default will work better than the current, failing system.\nIt will. \n\nJava is a cross-platform language. Teams routinely use different platforms and\nincreasingly the same platform but set to different locales. Even if everyone on\na team is using Windows, the developers in Japan, Israel, the U.S. India, and\nChina are all likely to have different default character sets. Unicode is the\nonly character set that has any hope of working for them all, and UTF-8 is the\nright encoding for Unicode. ",
    "Just to be clear, I didn\u0027t raise this with the expectation that all UTF-8 files are marked with the BOM, or \nassume that such encodings can be automatically detected.\n\nHowever, just because one encoding cannot automatically be detected does not mean that another \nchoice is therefore the correct answer. Consider the possibilities that Eclipse (including RCP) are \npossibly going to be used for:\n\n1) Editing files that other Eclipse installs will read (e.g. private data to an RCP application, or others \nspecific to a feature e.g. Java source files)\n\n2) Editing files that will be stored in some kind of shared repository, potentially globally\n\n3) Editing files as a souped-up editor for the filesystem\n\nOf these three possibilities, it\u0027s way more likely that Eclipse will be used as one of the first two options. \nEven Eclipse\u0027s assumptions about all files being stored under some particular workspace/project \ncombination (for the IDE, at least) is likely to rule out Eclipse as a general purpose editor, unlike Emacs \nwhich happily can edit files in any location. For example, I wouldn\u0027t use Eclipse to edit /etc/hosts \nbecause (a) I don\u0027t want to have to set up a .project in /etc just to look at the config files, and (b) I don\u0027t \nwant to create linked resources for every file I want to edit in Eclipse -- I\u0027ll just use Emacs or Vi (both of \nwhich support UTF-8, by the way).\n\nThe point is that with any choice, there are pros and cons. In this case, if files are created/assumed to \nbe UTF-8, then you\u0027ll end up with a file that is editable on any Unicode-savvy operating system. This \nincludes Windows, where UTF-8 files are supported by the OS (and the encoding reported by Java is the \n\u0027fallback encoding\u0027 for non-Unicode aware systems). On the other hand, if you use RandomOS\u0027 choice of \ncharacter encoding for files, then it\u0027s only RandomOS that will be able to read that file correctly. All \nother non-RandomOS systems will load the file transparently with errors, possibly mangling the data in \nthe process.\n\nEclipse is supposed to be about platform-neutral development, so that development is independent of \nthe OS that is being used to create the content. This simply isn\u0027t true when using RandomOS\u0027 character \nset encoding. In fact, by using RandomOS\u0027 encoding, you are explicitly limiting those file(s) to only be \nusable on RandomOS.\n\nYes, it may break obscure cases where Eclipse is being used as an editor for platform-specific files, like \n/etc/hosts. But it will fix a lot more cases where files are developed by distributed team members \naround the globe on a variety of different operating systems.\n\nSo there is no one this-absolutely-works-for-all-cases. But UTF-8 is a much, much better choice as a \ndefault than RandomOS\u0027 encoding, especially when compared with the target uses of Eclipse outlined \nabove.\n\nThis bug as also raised against the Core Text component, rather than JDT itself. To re-iterate, this is a \nbug on the text handling of *all* text files, not just .java files. This may be currently assigned to jdt-\ninbox for their comments, but the bug should still remain a Core Text bug.",
    "\u003eThis may be currently assigned to jdt-\n\u003einbox for their comments, but the bug should still remain a Core Text bug.\nIt\u0027s not Platform Text: the default encoding is provided by Platform Resources.",
    "The encoding for .java files is not spec\u0027ed by the JLS.\nMoving to Platform Resources for comment on the general resolution of this request.",
    "I beg to differ re: Java files:\n\nhttp://java.sun.com/docs/books/jls/third_edition/html/lexical.html#95413\n\n\"Programs are written in Unicode (section 3.1), but lexical translations are\nprovided (section 3.2) so that Unicode escapes (section 3.3) can be used to\ninclude any Unicode character using only ASCII characters.\"\n\n\"3.1 Unicode\nPrograms are written using the Unicode character set. ... \"\n\nIt doesn\u0027t explicitly say which encoding of Unicode should be used (UTF-8,\nUTF-16 etc.) but it *does* say that it is Unicode. Furthermore, it says that\nprograms may also be written in ASCII with Unicode escape sequences, and UTF-8\nis the only encoding that also has the property that the first 128 characters\nare ASCII, so the implicit conclusion is that the only UTF encoding that can be\nused is UTF-8.\n\nNote that the statement further on:\n\n\"Except for comments (section 3.7), identifiers, and the contents of character\nand string literals (section 3.10.4, section 3.10.5), all input elements\n(section 3.5) in a program are formed only from ASCII characters (or Unicode\nescapes (section 3.3) which result in ASCII characters). ASCII (ANSI X3.4) is\nthe American Standard Code for Information Interchange. The first 128 characters\nof the Unicode character encoding are the ASCII characters.\"\n\nmay be misleading due to the English, but it is saying that all of the\npunctuation, white-space and other characters in a file are ASCII (also the same\ncharacter in UTF-8) -- but (importantly) the comments, identifiers, and string\nliterals (i.e. everything except keywords and punctuation) *is* Unicode. It\u0027s\njust that as well as Unicode, it can also be represented using \\u notation, but\ndoes not have to be.\n",
    "The only reasonable default encoding is the one supplied by the operating\nsystem.  If the user is running in a different locale and has an encoding to\nmatch that locale, it needs to be honoured by Eclipse.  Interoperability with\nthe local operating system and other local programs is more important than\ncross-platform interoperability.  If you want to set the encoding used by\nEclipse to UTF-8, you can do so.",
    "This isn\u0027t just a cross-platform issue. It\u0027s a cross-locale issue. Developers\nwriting code/documentation/files in a Locale on one side of the globe should be\nable to have files shared with those on the other side of the globe, even on the\nsame platform.\n\nFurther, there\u0027s no way of setting the default locale as picked up by Java on\nWindows systems. The Cp1252 reported on windows (when running in England) is the\nfallback encoding for when UTF-8 isn\u0027t supported.\n\nI also feel this bug needs a wider audience (and reasoned discussion) than an\nassertion that \u0027the only sensible default is the OS locale\u0027. As is noted in\ncomment #4, the user often doesn\u0027t have this choice of encoding; they just\nselect from a generic regional location and a locale-specific non-global one is\npicked randomly without any user intervention.\n\nI also strongly disagree with the statment that \u0027Interoperability with\nthe local operating system and other local programs is more important than\ncross-[locale] interoperability.\u0027. I invite you to submit an example of any\nEclipse application -- JDT or otherwise -- that edits operating system files\ninstead of ones that are destined for UTF-8 capable systems (web browsers,\nversion control systems etc.) And please note, this is about cross-locale\ninteroperability, not just cross-platform interoperability.",
    "Note that for cross-locale interoperability users are expected to set the\ndefault encoding (whatever it is) at the project level (instead of at the\nworkspace level). This setting is stored in the project content area, thus being\nshared through the team repository (all users will end up with the same setting).",
    "I\u0027d also like to point out that whilst it\u0027s possible to override the default\nJava setting (using -Dfile.encoding\u003dUTF-8), this hides what any original\nplatform setting may be at any level. Having Eclipse default to UTF-8 by\ndefault, whilst still allowing it to be changed back to any locale-specific\nencoding, is a way of having a locale- and platform- portable default that is\noverridable by the user to be locale-specific.\n\nI don\u0027t necessarily believe that a per-project setting is the best workaround,\nas there are RCP apps that don\u0027t necessarily use .projects for data interchange\n(they may choose to work with WebDAV or similar). Having a default accessible\nmay make sense for these kinds of applications as well.",
    "I completely agree with John. UTF-8 is still a minority encoding; most files are\nin national character sets. The setting most likely to correspond to the user\u0027s\nnational character set is the operating system default. Given that the user can\nchange the default encoding with one preference setting, I\u0027m surprised this\ndiscussion (reasoned or not) has dragged on this long.",
    "Because it\u0027s about changing the *default*. You know, what Eclipse comes with. Yes, it\u0027s trivial for me to \nchange my preference setting, but I\u0027m building RCP applications and I don\u0027t want users across Europe \n(who use a variety of slightly different locales) wondering why they can\u0027t exchange RCP documents.\n\no Eclipse uses GIFs instead of BMPs, because they\u0027re more portable\no Eclipse uses HTML instead of Word or TROFF, because they\u0027re more portable\n\nAnd yet you\u0027re arguing that using a less-portable character set encoding is the right thing to do?\n\nEclipse isn\u0027t used as a general-purpose text editor to edit operating system files. Even if it was, current \noperating systems can deal with UTF-8 character set encodings natively and this \u0027codepage\u0027 thing is a \nfallback for applications that can\u0027t, or in this case, won\u0027t deal with UTF-8 encodings.\n\nAs has already been pointed out, Java files are already UTF-8, and it\u0027s also currently the default for XML \ndocuments. It should also be the default for any HTML or JSP document to avoid non-printing \ncharacters showing up when the page is viewed on a platform where the encoding is different.\n\nEclipse is a very good cross-platform product. It\u0027s already used in global development (the Eclipse \ncommitters do a great job of making that happen). However, you have situations where developers in \none locale will be creating files with one encoding, and developers the other side of the world using \nanother encoding. Tell me why it\u0027s not sensible that we should all be using one encoding?\n",
    "This discussion is closed as far as I\u0027m concerned.  I think the discussion has\nhad adequate exposure in the various newsgroup postings Alex has made, and there\nclearly isn\u0027t community consensus. Changing the default encoding is a drastic\nenough change that we would need broad support from both the community and the\ncommiters on affected projects, and the -1\u0027s above from the platform and WTP\ntext leads alone are enough for me to consider this closed.",
    "My dev team ran into this unexpected issue.  A cut/paste from a Windows doc into\nan Eclipse Java file editor was then checked into the source control system.  A\nlinux user then was unable to compile or open the file because it contained\ncp1252 characters, which are illegal under the linux default of utf8. \n\nDevelopers expectations are that the tools are going to protect them from such\nsituations.  We have people developing product on three platforms: Windows,\nLinux, and Solaris. Cross platform is a big issue for us.  I assume the best\nsuggestion is that we manually configure character encoding to be UTF-8 across\nall platforms?\n\nCheers,",
    "Yes, you need to use an encoding that is shared across all your development\nplatforms, or restrict yourself to the range that those encodings have in\ncommon.  cp1252 and UTF-8 share a signficant subset (128 bits of ASCII, and\nmore). The development of Eclipse itself is done across many platforms within\nthat shared subset of encodings.",
    "That comment is incorrect. The only characters Cp1252 and UTF-8 share in the\ncontext of Eclipse are the 128 ASCII characters. While all 256 Cp1252 characters\nare available in UTF-8, 128 of them do not share the same code points. Since,\nunlike XML, Java files do not carry any information about their own encoding,\nthis needs to be externally speciifed by the IDE. Thus a Cp1252 file loaded into\na UTF-8 environment will be reported a smalformed. The Java editor does not\nautodetect and account for the different mappings from code points to\ncharacters, as an XML editor might be able to do. \n\nThis is a flaw in the design of Java. We can\u0027t fix that. Currently the best\nsolution is indeed to manually configure for UTF-8 across all platforms.\nHowever, since that is the best solution it should be the default as well. ",
    "cp1252 and UTF-8 only differ in the range 0x80-0x9F, the remaining 224\ncharacters are the same. Here is a mapping table from unicode.org:\n\nhttp://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1252.TXT",
    "Please confirm or correct the following statement.  \n\nIf a dev team is developing on Linux, Solaris, and Windows, then it is\nrecommended that Eclipse file encoding be set to UTF-8 for all platforms.",
    "The Cp1252 character set is a proper subset of the Unicode character set. Every\ncharacter in Cp1252 has a corresponding Unicode code point.\n\nThe problem is that Eclipse doesn\u0027t work at the level of characters. It does not\nknow that Cp1252 ? (the byte 0xE9) is equivalent to the two UTF-8 bytes 0xC3 0x\nA9. Thus at the level Eclipse works, the different character sets are not\ncompatible.\n\nThere is a missing layer of indirection in Java. XML has this additional layer\nof indirection between bytes and characters. Java doesn\u0027t. If Java had it, we\nwouldn\u0027t be having this discussion.\n\nGiven that Java does not include in file metadata about the character encoding,\nthe question becomes what Eclipse should do to handle character set\nidentification. No solution will be perfect. However in the long term I think\nthe current platform specific approach is clearly inferior to a\nplatform-independent UTF-8 default. ",
    "My correction: \"It is recommended that the Eclipse file encoding be set to UTF-8\nfor all platforms.\" No \"if\" is necessary. :-)\n\nEven a mono-platform environment will not be harmed by using UTF-8, and may well\nbe improved by it if characters from outside the current locale are needed. In\ntoday\u0027s international world, we cannot assume that just because I am typing this\nmessage in the U.S. that I only require characters from the Roman alphabet. I\nmay well need Cyrillic or Japanese or other character sets. \n\nAt worst UTF-8 does no harm. At best it avoids numerous problems of characters\nset interoperability between programmers on a team.",
    "It would have saved my team some grief had all the the platform defaults been\nset to UTF8.  This character encoding issues is not something most developers\nwant or need to be bothered with.\n\nP.S.  Why did not the Windows cp1252 editor complain when illegal characters\nwere cut and pasted from a Word doc?  Is this a bug?  Had the editor\ndetected/prevented the illegal chars, we would not have had a problem.",
    "Good point about catching this on paste - I suggest entering a separate bug\nreport against the Platform Text component.",
    "Where exactly does the file encoding setting get persisted and to which\nproperty?  I\u0027m playing with the file encoding setting now and exporting a new\npreference file, but can\u0027t locate the encoding change in the preferences file. \nFurther, when I import our old preferences file, the encoding remains set to my\nchange to UTF8, not back to the original default of cp1252.\n\n?",
    "And here is the bug report response...\n\n\ndaniel.megert@eclipse.org changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|NEW                         |RESOLVED\n         Resolution|                            |INVALID\n\n\n\n\n------- Additional Comments From daniel.megert@eclipse.org  2005-11-09 12:12 -------\nWe have no idea under which encoding someone will checkout that file in the\nfuture. The one who checks out the file could have his workspace encoding set to\nChinese or whatever.\n\nIf you share files across platforms you have to choices:\n1. have a policy that users watch for such problems and don\u0027t release such files\n2. have a policy that users must set their workspace encoding to UTF-8\n3. set the project encoding to UTF-8. This might be the best solution because any\n   one who checks out the project will get the correct encoding.\n\n\n",
    "re comment 30: The best place to set the encoding is by right clicking on any\nresource (project, folder, file), and selecting Properties \u003e Info. When the\nencoding is set on a project or folder, it sets the *default* encoding for all\nfiles in that container.  I.e., if the file does not have an explicit encoding\nstored, Eclipse looks for the encoding on the containing folder recursively\nuntil an encoding setting is found.  When set this way, the encoding information\nwill be persisted in the project content area in the .settings directory along\nwith the project contents.",
    "I can not locate a .settings folder.  Where exactly is it located?",
    "The .settings folder isonly created as needed... it is a sibling of the .project\nfile in your project\u0027s top level directory. If you set the encoding of a\nresource in that project (or for the entire project), it will be stored in that\ndirectory.",
    "I just changed the encoding on the project to UTF-8, then closed the project. \nNo sign of a .settings folder.\n\n?",
    "Created an attachment (id\u003d29639)\nScreen shot\n\nFor illustration, here is a screen shot of a simple project that has its\nencoding set to UTF8.  You can see the .settings folder in the Navigator, and\nit contains a file called \"org.eclipse.core.resources.prefs\" that stores the\nencoding details for the project.  I assume you are using Eclipse 3.0 or\ngreater, and that you don\u0027t have filter on your view that hides .* files?",
    "If I do this exactly as you describe on a new sample test project, I get exactly\nthe result you describe.  If I try this on my existing project, no .settings\nfolder is created.\n\n?",
    "Actually, I get \"internal error setting encoding\" dialogue.  Don\u0027t know if this\nis relevant, but we are using CCRC pluggin for Eclipse.  The project is under\nClearCase source control.\n\n",
    "Are there more error details in the log file? (workspace/.metadata/.log)?",
    "!ENTRY org.eclipse.core.runtime 4 2 2005-11-09 17:47:00.367\n!MESSAGE An internal error occurred during: \"Setting encoding\".\n!STACK 0\njava.lang.IllegalArgumentException: Attempted to beginRule: R/, does not match\nouter scope rule: P/bac-nova\n\tat org.eclipse.core.internal.runtime.Assert.isLegal(Assert.java:58)\n\tat org.eclipse.core.internal.jobs.ThreadJob.illegalPush(ThreadJob.java:117)\n\tat org.eclipse.core.internal.jobs.ThreadJob.push(ThreadJob.java:211)\n\tat org.eclipse.core.internal.jobs.ImplicitJobs.begin(ImplicitJobs.java:59)\n\tat org.eclipse.core.internal.jobs.JobManager.beginRule(JobManager.java:190)\n\tat org.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:96)\n\tat\norg.eclipse.core.internal.resources.Workspace.prepareOperation(Workspace.java:1674)\n\tat org.eclipse.core.internal.resources.Folder.create(Folder.java:88)\n\tat\norg.eclipse.core.internal.resources.ProjectPreferences$2.run(ProjectPreferences.java:304)\n\tat\norg.eclipse.core.internal.resources.ProjectPreferences.save(ProjectPreferences.java:315)\n\tat\norg.eclipse.core.internal.preferences.EclipsePreferences.flush(EclipsePreferences.java:351)\n\tat\norg.eclipse.core.internal.resources.ProjectPreferences.flush(ProjectPreferences.java:585)\n\tat\norg.eclipse.core.internal.preferences.EclipsePreferences.flush(EclipsePreferences.java:339)\n\tat\norg.eclipse.core.internal.resources.ProjectPreferences.flush(ProjectPreferences.java:585)\n\tat\norg.eclipse.core.internal.resources.CharsetManager.setCharsetFor(CharsetManager.java:280)\n\tat\norg.eclipse.core.internal.resources.Container.setDefaultCharset(Container.java:255)\n\tat\norg.eclipse.ui.ide.dialogs.ResourceEncodingFieldEditor$1.run(ResourceEncodingFieldEditor.java:134)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)",
    "Re comment #40 - can you enter a new bug report for that error?  In the report,\ninclude what version/build of Eclipse you are using (build id is in Help \u003e\nAbout...).",
    "Re: 41, under which category should this bug be filled?",
    "You can log it under Platform Resources.",
    "*** Bug 171087 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2005-09-02T15:16:20+02:00",
    "2005-09-02T15:26:32+02:00",
    "2005-09-02T15:28:48+02:00",
    "2005-09-02T15:38:25+02:00",
    "2005-09-02T16:54:39+02:00",
    "2005-09-02T17:01:20+02:00",
    "2005-09-12T06:40:49+02:00",
    "2005-09-12T08:03:20+02:00",
    "2005-09-12T10:08:24+02:00",
    "2005-09-12T10:19:06+02:00",
    "2005-09-12T10:36:58+02:00",
    "2005-09-12T10:48:26+02:00",
    "2005-09-15T16:17:45+02:00",
    "2005-09-15T16:43:49+02:00",
    "2005-09-15T17:21:08+02:00",
    "2005-09-15T17:29:19+02:00",
    "2005-09-15T18:13:08+02:00",
    "2005-09-15T18:28:18+02:00",
    "2005-09-16T04:26:23+02:00",
    "2005-09-16T09:54:58+02:00",
    "2005-09-16T15:59:27+02:00",
    "2005-11-07T21:47:03+01:00",
    "2005-11-09T14:27:11+01:00",
    "2005-11-09T15:22:11+01:00",
    "2005-11-09T15:53:50+01:00",
    "2005-11-09T16:07:50+01:00",
    "2005-11-09T16:10:37+01:00",
    "2005-11-09T16:14:58+01:00",
    "2005-11-09T16:19:12+01:00",
    "2005-11-09T16:26:17+01:00",
    "2005-11-09T16:45:11+01:00",
    "2005-11-09T17:19:36+01:00",
    "2005-11-09T20:11:25+01:00",
    "2005-11-09T20:21:50+01:00",
    "2005-11-09T20:26:28+01:00",
    "2005-11-09T20:34:02+01:00",
    "2005-11-09T20:56:21+01:00",
    "2005-11-09T22:42:03+01:00",
    "2005-11-09T22:48:03+01:00",
    "2005-11-09T22:56:49+01:00",
    "2005-11-10T15:28:41+01:00",
    "2005-11-11T22:02:26+01:00",
    "2005-11-14T15:57:53+01:00",
    "2005-11-14T16:03:56+01:00",
    "2007-01-22T15:42:20+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Attempted to beginRule: R/, does not match outer scope rule: P/bac-nova",
      "elements": [
        {
          "method": "org.eclipse.core.internal.runtime.Assert.isLegal",
          "source": "Assert.java:58"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.illegalPush",
          "source": "ThreadJob.java:117"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.push",
          "source": "ThreadJob.java:211"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:59"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:190"
        },
        {
          "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
          "source": "WorkManager.java:96"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
          "source": "Workspace.java:1674"
        },
        {
          "method": "org.eclipse.core.internal.resources.Folder.create",
          "source": "Folder.java:88"
        },
        {
          "method": "org.eclipse.core.internal.resources.ProjectPreferences$2.run",
          "source": "ProjectPreferences.java:304"
        },
        {
          "method": "org.eclipse.core.internal.resources.ProjectPreferences.save",
          "source": "ProjectPreferences.java:315"
        },
        {
          "method": "org.eclipse.core.internal.preferences.EclipsePreferences.flush",
          "source": "EclipsePreferences.java:351"
        },
        {
          "method": "org.eclipse.core.internal.resources.ProjectPreferences.flush",
          "source": "ProjectPreferences.java:585"
        },
        {
          "method": "org.eclipse.core.internal.preferences.EclipsePreferences.flush",
          "source": "EclipsePreferences.java:339"
        },
        {
          "method": "org.eclipse.core.internal.resources.ProjectPreferences.flush",
          "source": "ProjectPreferences.java:585"
        },
        {
          "method": "org.eclipse.core.internal.resources.CharsetManager.setCharsetFor",
          "source": "CharsetManager.java:280"
        },
        {
          "method": "org.eclipse.core.internal.resources.Container.setDefaultCharset",
          "source": "Container.java:255"
        },
        {
          "method": "org.eclipse.ui.ide.dialogs.ResourceEncodingFieldEditor$1.run",
          "source": "ResourceEncodingFieldEditor.java:134"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 0,
      "commentIndex": 40,
      "bugId": "108668",
      "date": "2005-11-10T15:28:41+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "normal"
    }
  ],
  "groupId": "108668",
  "bugId": "108668",
  "date": "2005-09-02T15:16:20+02:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "normal"
}