{
  "comments": [
    "The following code produces an NPE:\n\nBundle bundle \u003d Platform.getBundle(\"org.eclipse.osgi\");\nURL location \u003d bundle.getEntry(\"/\");\nFileLocator.toFileURL(location);\n\nWhen resolving \u0027location\u0027 with FileLocator.resolve() before, it works fine.\n\njava.lang.NullPointerException\nat org.eclipse.osgi.baseadaptor.bundlefile.DirZipBundleEntry.getFileURL(DirZipBundleEntry.java:68)\nat org.eclipse.osgi.framework.internal.core.BundleURLConnection.getFileURL(BundleURLConnection.java:129)\nat org.eclipse.core.runtime.internal.adaptor.URLConverterImpl.toFileURL(URLConverterImpl.java:33)\nat org.eclipse.core.runtime.FileLocator.toFileURL(FileLocator.java:126)",
    "To clarify, does this only happen for you with the bundle org.eclipse.osgi (the \"system bundle\")?  I can reproduce, but only with the \"system bundle\".\n\nAlso, what are you trying to do.  If the code worked (with no NPE) then the file URL returned would point you to a directory where the complete content of the org.eclipse.osgi jar was extracted.  Is that really what you are after here?",
    "(In reply to comment #1)\n\u003e To clarify, does this only happen for you with the bundle org.eclipse.osgi (the\n\u003e \"system bundle\")?  I can reproduce, but only with the \"system bundle\".\n\nYes, you\u0027re right, it only happens with the system bundle.\n \n\u003e Also, what are you trying to do.  If the code worked (with no NPE) then the\n\u003e file URL returned would point you to a directory where the complete content of\n\u003e the org.eclipse.osgi jar was extracted.  Is that really what you are after\n\u003e here?\n\nActually, I wanted to get the location of the osgi jar file. We\u0027re trying to make use of hook configurators by setting the properties\n\nosgi.hook.configurators.include and\nosgi.frameworkClassPath\n\nIn frameworkClassPath, we need to add our own hook configurator classes as well as the osgi jar (or is there a way to just add something to the frameworkClassPath?).\n\nWe have a launch configuration delegate based on EclipseApplicationLaunchConfiguration that needs to set these two properties. That\u0027s why we want to determine the osgi jar\u0027s location.\n\nIf there\u0027s a better way, I\u0027d be glad to be educated of course :-)",
    "Take a look at the Adaptor Hooks WIKI (in progress) \n\nhttp://wiki.eclipse.org/index.php/Adaptor_Hooks\n\nPay attention to the the Hookable Adaptor section which mentions the use of the osgi.framework.extensions property\n\nhttp://wiki.eclipse.org/index.php/Adaptor_Hooks#Hookable_Adaptor",
    "(In reply to comment #3)\n\u003e http://wiki.eclipse.org/index.php/Adaptor_Hooks#Hookable_Adaptor\n\nThanks, that was helpful. We\u0027re now providing an osgi fragment, specifying it with the osgi.framework.extensions property.\n\nNow we run into another problem, though :]\n\nWithin the fragment, i.e. from our ClassLoadingHook, we use some classes that are contained in a jar, which resides within the fragment (in a lib/ folder).\n\nThat jar is specified to be in the fragment\u0027s runtime classpath, via the\nBundle-ClassPath: lib/foo.jar\ndirective within fragment.xml.\n\nAt runtime, this jar seems not to be visible, though -- we get NoClassDefFoundErrors.\n\nIf we extract the jar right into the fragment\u0027s root folder, the classes are found.\n\nSo, to sum it up, the following works:\n\nmyfragment_1.0.jar\n  META-INF/MANIFEST.MF\n  org/foo/MyClassLoadingHook.class\n  org/somethingelse/MyHelper.class\n\nwhile this doesn not work:\n\nmyfragment_1.0.jar\n  META-INF/MANIFEST.MF\n  org/foo/MyClassLoadingHook.class\n  lib/myhelper.jar\n    org/somethingelse/MyHelper.jar",
    "That is a limitation to fragments specified on the osgi.framework.extensions property.  The boot strap code does not have all the necessary infrastructure to understand how to add inner jars to the plain old URLClassLoader which is used to load the framework.  It only understands how to add simple jar files to the classpath of the framework.",
    "(In reply to comment #5)\nOK, we\u0027ll be looking for a workaround, then.\n\nThanks for your help,\nCarsten",
    "I released a fix to 3.3 to prevent the NPE.  The SystemBundleData object was missing the StorageHook instances.  This ultimately caused the NPE to occur."
  ],
  "commentCreationDates": [
    "2006-05-23T20:16:45+02:00",
    "2006-05-23T20:45:56+02:00",
    "2006-05-24T01:56:48+02:00",
    "2006-05-24T19:43:52+02:00",
    "2006-05-24T21:44:38+02:00",
    "2006-05-24T22:21:31+02:00",
    "2006-05-24T22:54:52+02:00",
    "2006-07-26T22:24:49+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.osgi.baseadaptor.bundlefile.DirZipBundleEntry.getFileURL",
          "source": "DirZipBundleEntry.java:68"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleURLConnection.getFileURL",
          "source": "BundleURLConnection.java:129"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.URLConverterImpl.toFileURL",
          "source": "URLConverterImpl.java:33"
        },
        {
          "method": "org.eclipse.core.runtime.FileLocator.toFileURL",
          "source": "FileLocator.java:126"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "143283",
      "date": "2006-05-23T20:16:45+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    }
  ],
  "groupId": "143283",
  "bugId": "143283",
  "date": "2006-05-23T20:16:45+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "normal"
}