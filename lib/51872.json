{
  "comments": [
    "I performed an Update of about 200 incoming files in the sync view. About half \nway through this background operation, the workbench was locked by another \noperation. It is strange that the user would be blocked by an operation they \ndid not explicitley perform. Here is the traceback of the blockage I got when \nI canceled the job blocking the UI. In general, it is a bad idea to obtain \nresource scheduling rules in the UI thread. I\u0027m assigning this to the text \ncomponent since it appears to e related to text editors. If I am mistaken, \nplease forward appropriately.\n\norg.eclipse.core.runtime.OperationCanceledException\n\tat org.eclipse.core.internal.jobs.ImplicitJobs$ThreadJob.joinRun\n(ImplicitJobs.java:109)\n\tat org.eclipse.core.internal.jobs.ImplicitJobs.begin\n(ImplicitJobs.java:261)\n\tat org.eclipse.core.internal.jobs.JobManager.beginRule\n(JobManager.java:149)\n\tat \norg.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.readDocumen\nt(LastSaveReferenceProvider.java:161)\n\tat \norg.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.elementCont\nentReplaced(LastSaveReferenceProvider.java:291)\n\tat \norg.eclipse.ui.editors.text.TextFileDocumentProvider$FileBufferListener.bufferC\nontentReplaced(TextFileDocumentProvider.java:214)\n\tat \norg.eclipse.core.internal.filebuffers.TextFileBufferManager.fireBufferContentRe\nplaced(TextFileBufferManager.java:242)\n\tat \norg.eclipse.core.internal.filebuffers.ResourceTextFileBuffer.handleFileContentC\nhanged(ResourceTextFileBuffer.java:280)\n\tat org.eclipse.core.internal.filebuffers.ResourceFileBuffer$1.execute\n(ResourceFileBuffer.java:142)\n\tat \norg.eclipse.core.internal.filebuffers.ResourceFileBuffer$SafeFileChange.run\n(ResourceFileBuffer.java:76)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java:102)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:2325)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2033)\n\tat org.eclipse.jface.window.Window.runEventLoop(Window.java:586)\n\tat org.eclipse.jface.window.Window.open(Window.java:566)\n\tat org.eclipse.jface.dialogs.MessageDialog.openInformation\n(MessageDialog.java:303)\n\tat org.eclipse.team.internal.ccvs.ui.subscriber.SafeUpdateAction$5.run\n(SafeUpdateAction.java:296)\n\tat org.eclipse.ui.internal.UILockListener.doPendingWork\n(UILockListener.java:101)\n\tat org.eclipse.ui.internal.UISynchronizer$1.run(UISynchronizer.java:33)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java:102)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:2325)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2033)\n\tat \norg.eclipse.ui.internal.dialogs.EventLoopProgressMonitor.runEventLoop\n(EventLoopProgressMonitor.java:114)\n\tat org.eclipse.ui.internal.dialogs.EventLoopProgressMonitor.isCanceled\n(EventLoopProgressMonitor.java:93)\n\tat org.eclipse.core.internal.jobs.ImplicitJobs$ThreadJob.isCanceled\n(ImplicitJobs.java:133)\n\tat org.eclipse.core.internal.jobs.ImplicitJobs$ThreadJob.joinRun\n(ImplicitJobs.java:106)\n\tat org.eclipse.core.internal.jobs.ImplicitJobs.begin\n(ImplicitJobs.java:261)\n\tat org.eclipse.core.internal.jobs.JobManager.beginRule\n(JobManager.java:149)\n\tat \norg.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.readDocumen\nt(LastSaveReferenceProvider.java:161)\n\tat \norg.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.elementCont\nentReplaced(LastSaveReferenceProvider.java:291)\n\tat \norg.eclipse.ui.editors.text.TextFileDocumentProvider$FileBufferListener.bufferC\nontentReplaced(TextFileDocumentProvider.java:214)\n\tat \norg.eclipse.core.internal.filebuffers.TextFileBufferManager.fireBufferContentRe\nplaced(TextFileBufferManager.java:242)\n\tat \norg.eclipse.core.internal.filebuffers.ResourceTextFileBuffer.handleFileContentC\nhanged(ResourceTextFileBuffer.java:280)\n\tat org.eclipse.core.internal.filebuffers.ResourceFileBuffer$1.execute\n(ResourceFileBuffer.java:142)\n\tat \norg.eclipse.core.internal.filebuffers.ResourceFileBuffer$SafeFileChange.run\n(ResourceFileBuffer.java:76)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java:102)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:2325)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2033)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1550)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1526)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench\n(Workbench.java:265)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run\n(IDEApplication.java:47)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:236)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:101)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:279)\n\tat org.eclipse.core.launcher.Main.run(Main.java:742)\n\tat org.eclipse.core.launcher.Main.main(Main.java:581)",
    "Tom, please comment.\n\nIn my opinion it is OK to get the lock since it is fine grained on a single\nfile. It looks as if someone else blocked the whole workspace (or large parts of\nit) and then we need to wait otherwise the user continues working on an already\nmodified /deleted document.\n\nMichael was there some other job that might have acquired a coarse grained lock?",
    "I guess it is ok to obtain a lock (you have to if you need exclusive access and\nto avoid clashing with someone else). (We don\u0027t really need exclusive access -\nits just that its not possible to get non-blocking access to an IFile).\n\nUsually, LastSaveReferenceProvider.readDocument is called from the line differ\ninside a background job - but not in the described case upon content changes.\n\nPerhaps we could schedule an extra job in this case and push it into the\nbackground. The document line differ can handle updates to the reference\ndocument in any thread.",
    "We might argue that it is OK to go on with an outdated quick diff in such a case\nbut e.g. in case of a pessimistic team provider this will not help much: as soon\nas the user starts typing, validateEdit will request a lock and will then be\nblocked by the coarse grained lock.\n\nSo instead of tweaking here the \"other\" (whatever) job should reconsider\nblocking the whole workspace or large parts of it.\n",
    "When peforming a CVS update, the smallest granularity we can get is the \nproject (this is a CVS restriction). In this case, we grab multiple projects \n(i.e. those involved in the update) and we will definitely consider reducing \nthis to one project at a time. However, that is the smallest we could go and \neven at the granularity, this problem could still occur (i.e. a single project \nwith a large number of changes).\n\nHowever, this is just one case of a background job with a large granularity. \nThere will be others, I am sure and to expect all tools built on top of \nEclipse to be good citizens in this area is not a realistic expectation in my \nopinion. The problem with this particular case is that the work being done by \nquick diff is an indirect result of another operation. When the blockage \noccurs, the user can see the background jobs (i.e. update) but has no idea \nwhat the forground operation is and whether they should cancel it. I got the \ntraceback by cancelling it. I don\u0027t even know if this left things in an OK \nstate or not. \n\nHere\u0027s what I think needs to be done (for what it is worth):\n\n1) CVS reduces granularity as much as possible (entered new bug 51883).\n2) QuickDiff needs to either...\n- not obtain a scheduling rule in the UI thread since it may be triggered \nindirectly by another operation \n- or it should somehow be made appearent in the blockage dialog what the \nblocked operation is so the user knows what\u0027s going on (unfortunately there is \nno way I know of to do this at the current time). \n\nIf the later is chosen, the QuickDiff operation must be able to recover from \nthe cancellation in some way that is reasonable (since the user has the option \nof cancelling it).",
    "Michael, \n\n- the reference provider needs the lock when executing inside a job (see bug\n44667). There are two possible solutions on our side:\n\n1) we could push the operation into the background job, so the ui thread cannot\nbe blocked. Dani, this does not result in a outdated quick diff since the\nDocumentLineDiffer can handle delayed / unsynched updates to the reference document.\n\n2) (perhaps: only acquire the lock if we are called from outside the ui thread.\nthis is unsafe, since a background job that is trying to, say, delete the file\nwill run into an exception.)\n\n-\u003e I favor 1)\n\nDani, of course there will still be a problem in the interactive case you\nmention in comment 3 - but only if the user starts editing, which is far less\nlikely than having a document open in an editor that is being updated. We should\nonly block where we really need, which is not the case here.",
    "fixed \u003e 20040216\n\n- updating triggered by IElementStateListener methods are now pushed into a Job,\nso that the UI thread will never have to wait. See\nLastSaveReferenceProvider#ReadJob.\n\n- locking up the ui thread is still possible if the read job was started and\nlater the ui thread tries to acquire the lock on the resource. However, in the\nnormal case, the background job will just be blocked, which is fine."
  ],
  "commentCreationDates": [
    "2004-02-12T17:52:57+01:00",
    "2004-02-12T18:04:28+01:00",
    "2004-02-12T18:18:08+01:00",
    "2004-02-12T18:34:33+01:00",
    "2004-02-12T19:16:14+01:00",
    "2004-02-12T22:39:57+01:00",
    "2004-02-16T18:41:52+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.runtime.OperationCanceledException",
      "elements": [
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs$ThreadJob.joinRun",
          "source": "ImplicitJobs.java:109"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:261"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.readDocument",
          "source": "LastSaveReferenceProvider.java:161"
        },
        {
          "method": "org.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.elementContentReplaced",
          "source": "LastSaveReferenceProvider.java:291"
        },
        {
          "method": "org.eclipse.ui.editors.text.TextFileDocumentProvider$FileBufferListener.bufferContentReplaced",
          "source": "TextFileDocumentProvider.java:214"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.TextFileBufferManager.fireBufferContentReplaced",
          "source": "TextFileBufferManager.java:242"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceTextFileBuffer.handleFileContentChanged",
          "source": "ResourceTextFileBuffer.java:280"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer$1.execute",
          "source": "ResourceFileBuffer.java:142"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer$SafeFileChange.run",
          "source": "ResourceFileBuffer.java:76"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:102"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:2325"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2033"
        },
        {
          "method": "org.eclipse.jface.window.Window.runEventLoop",
          "source": "Window.java:586"
        },
        {
          "method": "org.eclipse.jface.window.Window.open",
          "source": "Window.java:566"
        },
        {
          "method": "org.eclipse.jface.dialogs.MessageDialog.openInformation",
          "source": "MessageDialog.java:303"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.ui.subscriber.SafeUpdateAction$5.run",
          "source": "SafeUpdateAction.java:296"
        },
        {
          "method": "org.eclipse.ui.internal.UILockListener.doPendingWork",
          "source": "UILockListener.java:101"
        },
        {
          "method": "org.eclipse.ui.internal.UISynchronizer$1.run",
          "source": "UISynchronizer.java:33"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:102"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:2325"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2033"
        },
        {
          "method": "org.eclipse.ui.internal.dialogs.EventLoopProgressMonitor.runEventLoop",
          "source": "EventLoopProgressMonitor.java:114"
        },
        {
          "method": "org.eclipse.ui.internal.dialogs.EventLoopProgressMonitor.isCanceled",
          "source": "EventLoopProgressMonitor.java:93"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs$ThreadJob.isCanceled",
          "source": "ImplicitJobs.java:133"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs$ThreadJob.joinRun",
          "source": "ImplicitJobs.java:106"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:261"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.readDocument",
          "source": "LastSaveReferenceProvider.java:161"
        },
        {
          "method": "org.eclipse.ui.internal.editors.quickdiff.LastSaveReferenceProvider.elementContentReplaced",
          "source": "LastSaveReferenceProvider.java:291"
        },
        {
          "method": "org.eclipse.ui.editors.text.TextFileDocumentProvider$FileBufferListener.bufferContentReplaced",
          "source": "TextFileDocumentProvider.java:214"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.TextFileBufferManager.fireBufferContentReplaced",
          "source": "TextFileBufferManager.java:242"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceTextFileBuffer.handleFileContentChanged",
          "source": "ResourceTextFileBuffer.java:280"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer$1.execute",
          "source": "ResourceFileBuffer.java:142"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer$SafeFileChange.run",
          "source": "ResourceFileBuffer.java:76"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:102"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:2325"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2033"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1550"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1526"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:265"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:139"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:47"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:236"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:101"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:279"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:742"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:581"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "51872",
      "date": "2004-02-12T17:52:57+01:00",
      "product": "Platform",
      "component": "Text",
      "severity": "normal"
    }
  ],
  "groupId": "51872",
  "bugId": "51872",
  "date": "2004-02-12T17:52:57+01:00",
  "product": "Platform",
  "component": "Text",
  "severity": "normal"
}