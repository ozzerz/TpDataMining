{
  "comments": [
    "See attached test case for the weaver5 project, to be placed in java5-testsrc/org/aspectj/weaver/reflect\n\nRunning it produces similar stack traces for all tests:\n\njava.lang.StackOverflowError\n\tat java.lang.Class.forName(Ljava.lang.String;ZLjava.lang.ClassLoader;)Ljava.lang.Class;(Unknown Source)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:39)\n\tat org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:102)\n\tat org.aspectj.weaver.World.resolveToReferenceType(World.java:296)\n\tat org.aspectj.weaver.World.resolve(World.java:213)\n\tat org.aspectj.weaver.World.resolve(World.java:134)\n\tat org.aspectj.weaver.World.resolve(World.java:261)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType(Java15ReflectionBasedReferenceTypeDelegate.java:270)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType(Java15ReflectionBasedReferenceTypeDelegate.java:273)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromTypes(Java15ReflectionBasedReferenceTypeDelegate.java:312)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType(Java15ReflectionBasedReferenceTypeDelegate.java:280)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getTypeVariables(Java15ReflectionBasedReferenceTypeDelegate.java:140)\n\tat org.aspectj.weaver.World.makeGenericTypeFrom(World.java:365)\n\tat org.aspectj.weaver.World.resolveToReferenceType(World.java:302)\n\tat org.aspectj.weaver.World.resolve(World.java:213)\n\tat org.aspectj.weaver.World.resolve(World.java:134)\n\tat org.aspectj.weaver.World.resolve(World.java:261)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType(Java15ReflectionBasedReferenceTypeDelegate.java:270)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType(Java15ReflectionBasedReferenceTypeDelegate.java:273)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromTypes(Java15ReflectionBasedReferenceTypeDelegate.java:312)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType(Java15ReflectionBasedReferenceTypeDelegate.java:280)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getTypeVariables(Java15ReflectionBasedReferenceTypeDelegate.java:140)\n\tat org.aspectj.weaver.World.makeGenericTypeFrom(World.java:365)\n\tat org.aspectj.weaver.World.resolveToReferenceType(World.java:302)\n\tat org.aspectj.weaver.World.resolve(World.java:213)\n\tat org.aspectj.weaver.World.resolve(World.java:134)",
    "Created an attachment (id\u003d30425)\ntest case\n\n",
    "Created an attachment (id\u003d30438)\nPatch to ReflectionBasedReferenceTypeDelegateTest that causes the problem\n\nThe offending line of code is \n\t\tclassType \u003d world.resolve(\"java.lang.Class\");\n\nok: I should have just submitted a separate test case with this specific problem...",
    "Created an attachment (id\u003d30442)\nBetter test case that exposes three bugs in the Java 1.5 reflection code including the original one...\n\n",
    "Created an attachment (id\u003d30445)\n Patch to ReflectionBasedReferenceTypeDelegateTest that allows the tests to mostly work on a Java 1.5 (JRockIt!) VM...\n\n",
    "This test case is now failing with 4 distinct errors (when run with a JRockIt Java 1.5 VM inside Eclipse). I plan to work on these and will submit any fixes in separate bugs that depend on this one, to keep things organized. \n\ntestResolveGeneric:\n\norg.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature (descriptor): \u0027[Ljava.lang.Object;\u0027\n\n\tat org.aspectj.weaver.UnresolvedType.nameToSignature(UnresolvedType.java:729)\n\tat org.aspectj.weaver.UnresolvedType.forName(UnresolvedType.java:308)\n\tat org.aspectj.weaver.World.resolve(World.java:261)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType(Java15ReflectionBasedReferenceTypeDelegate.java:270)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.createGenericMethodMember(Java15ReflectionBasedReferenceTypeDelegate.java:169)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredMethods(Java15ReflectionBasedReferenceTypeDelegate.java:154)\n\tat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:398)\n\tat org.aspectj.weaver.reflect.TestJava5ReflectionBasedReferenceTypeDelegate.testResolveGeneric(TestJava5ReflectionBasedReferenceTypeDelegate.java:12)\n\tat jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)\n\tat jrockit.reflect.InitialMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown Source)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\ntestGetDeclaredMethods:\njava.lang.NullPointerException\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testGetDeclaredMethods(ReflectionBasedReferenceTypeDelegateTest.java:136)\n\tat jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)\n\tat jrockit.reflect.InitialMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown Source)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\ntestGetAnnotations:\njava.lang.UnsupportedOperationException: getAnnotations on Java15ReflectionBasedReferenceTypeDelegate is not implemented yet\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getAnnotations(Java15ReflectionBasedReferenceTypeDelegate.java:82)\n\tat org.aspectj.weaver.ReferenceType.getAnnotations(ReferenceType.java:120)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testGetAnnotations(ReflectionBasedReferenceTypeDelegateTest.java:75)\n\tat jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)\n\tat jrockit.reflect.InitialMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown Source)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
    "Created an attachment (id\u003d30449)\nPatch to ReflectionBasedReferenceTypeDelegateTest that allows the tests to mostly work on a Java 1.5 (JRockIt!) VM...\n\nI erroneously left out one line in pasting which generated one of the NPE\u0027s.",
    "The patch in bug #117624 fixes the (not pasted in) test failure of an NPE in getSuperclass()\n\nThe test failure from testResolveGeneric is happening on the Collection.toArray() method, apparently because the return type of an array of generics is being treated as a Class but its name should be something like an array of generics. This code is complicated enough that I would need help to fix this bug. With the corrected original test case, testGetDeclaredMethods is producing this same error.\n\nThe test for getAnnotations can be fixed by delegated to super.getAnnotations() in the impl. Probably more tests for this are needed...",
    "I tried to put in the test from comment #3 (shame its not patch format) - its all a bit confusing Ron.  I put the test in - it fails to compile because world isnt exposed and findMethod doesnt exist.  So I discovered those in the patch in comment #2 which you had marked as being redundant now?  .... so.... basically I am putting in the test from comment #3 with the necessary bits hacked out of #2 - nothing else so far (testwise).",
    "So... the tests I put in dont fail as expected for me.  Presumably because the form of generics used in the jrockit vm differs from the sun one.\n\nIt would be far easier to get it working and tested consistently if we can write a generic type that looks the same as the failing one in jrockit and use it as a testcase on all VMs.  Do you know the *precise* generic signatures of the failing types and methods within them?\n\n(I have fixed a problem to do with arrays and generic signatures a while ago - but it looks like I didnt catch all cases.)",
    "right - after some shuffling around (my fault) - I\u0027ve recreated some of the problems here (not all).\n\n1. nameToSignature()  - I\u0027ve fixed this.\n2. getSuperclass() problem - I\u0027ve fixed this to return null as the superclass of Object, exactly the same as the other delegates do.\n3. getAnnotations() - i made the same change Ron has - but marked it with a ?? to verify its right at some point.\n\n4. getDeclaredMethods() blowing up.  This is complicated, I\u0027ve recreated it but not fixed it yet.\n5. The StackOverflow due to resolving java.lang.Class.  The test continues to just work for me.\n\nI\u0027ve put in Ron\u0027s two tests - but part of one of them is commented out until I get it working (getDeclaredMethods)\n\nJust to confirm Ron - there aren\u0027t any problems I\u0027m missing here?  (this bug has too many in !!)  And if you could try me changes to verify they fix the issues I claim, that would be very helpful.",
    "Ok I see the first two bugs are fixed (thanks!). Now I\u0027m seeing another old friend when I run my tests (this may be the same one that you noted you can recreate and are trying to fix, Andy). See stack trace below. I will work on recreating the infinite recursion bug and submit in a separate bug report (for sanity\u0027s sake).\n\njava.lang.IllegalStateException: Can\u0027t ask to parameterize a member of a non-generic type\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:605)\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:590)\n\tat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:402)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testGetDeclaredMethods(ReflectionBasedReferenceTypeDelegateTest.java:134)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n",
    "My test case just had a copy paste error. Here\u0027s the correct test case for the stack overflow on a Sun or JRockIt 1.5 VM:\n\n\tpublic void testResolveEnum() {\n\t\t//stack overflow\n\t\tworld.resolve(\"java.lang.Enum\");\t\t\n\t}\n",
    "I\u0027ve now fixed the other two problems:\n\n4. getDeclaredMethods() blowing up.  \n5. The StackOverflow resolving java.lang.Enum. ",
    "fixes available.",
    "I have verified that all the problems are now fixed. Thanks!\n\nI am wondering if this line of code shouldn\u0027t be in a finally block:\n\nin Java15ReflectionBasedReferenceTypeDelegate.getTypeVariables() {\n...\n\t\t\tthis.getResolvedTypeX().getWorld().forgetTypeVariablesCurrentlyBeingProcessed(getBaseClass());\n",
    "I decided that if we go wrong in that processing we\u0027re screwed anyway, so trying to repair and recover isnt worth it..."
  ],
  "commentCreationDates": [
    "2005-11-23T03:17:30+01:00",
    "2005-11-23T03:18:05+01:00",
    "2005-11-23T03:24:07+01:00",
    "2005-11-23T03:26:14+01:00",
    "2005-11-23T03:27:44+01:00",
    "2005-11-23T03:32:31+01:00",
    "2005-11-23T03:45:08+01:00",
    "2005-11-23T04:08:17+01:00",
    "2005-11-23T09:08:03+01:00",
    "2005-11-23T09:15:21+01:00",
    "2005-11-23T16:30:18+01:00",
    "2005-11-23T16:55:35+01:00",
    "2005-11-23T17:10:02+01:00",
    "2005-11-25T09:39:47+01:00",
    "2005-11-26T16:55:43+01:00",
    "2005-11-28T06:20:26+01:00",
    "2005-11-28T09:31:17+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StackOverflowError",
      "elements": [
        {
          "method": "java.lang.Class.forName",
          "source": "Ljava.lang.String;ZLjava.lang.ClassLoader;"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "117622",
      "date": "2005-11-23T03:17:30+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "org.aspectj.weaver.BCException",
      "message": "Do not call nameToSignature with something that looks like a signature (descriptor): \u0027[Ljava.lang.Object;\u0027",
      "elements": [
        {
          "method": "org.aspectj.weaver.UnresolvedType.nameToSignature",
          "source": "UnresolvedType.java:729"
        },
        {
          "method": "org.aspectj.weaver.UnresolvedType.forName",
          "source": "UnresolvedType.java:308"
        },
        {
          "method": "org.aspectj.weaver.World.resolve",
          "source": "World.java:261"
        },
        {
          "method": "org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType",
          "source": "Java15ReflectionBasedReferenceTypeDelegate.java:270"
        },
        {
          "method": "org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.createGenericMethodMember",
          "source": "Java15ReflectionBasedReferenceTypeDelegate.java:169"
        },
        {
          "method": "org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredMethods",
          "source": "Java15ReflectionBasedReferenceTypeDelegate.java:154"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getDeclaredMethods",
          "source": "ReferenceType.java:398"
        },
        {
          "method": "org.aspectj.weaver.reflect.TestJava5ReflectionBasedReferenceTypeDelegate.testResolveGeneric",
          "source": "TestJava5ReflectionBasedReferenceTypeDelegate.java:12"
        },
        {
          "method": "jrockit.reflect.VirtualNativeMethodInvoker.invoke",
          "source": "Ljava.lang.Object;[Ljava.lang.Object;"
        }
      ],
      "number": 1,
      "commentIndex": 5,
      "bugId": "117622",
      "date": "2005-11-23T03:32:31+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testGetDeclaredMethods",
          "source": "ReflectionBasedReferenceTypeDelegateTest.java:136"
        },
        {
          "method": "jrockit.reflect.VirtualNativeMethodInvoker.invoke",
          "source": "Ljava.lang.Object;[Ljava.lang.Object;"
        }
      ],
      "number": 2,
      "commentIndex": 5,
      "bugId": "117622",
      "date": "2005-11-23T03:32:31+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.UnsupportedOperationException",
      "message": "getAnnotations on Java15ReflectionBasedReferenceTypeDelegate is not implemented yet",
      "elements": [
        {
          "method": "org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getAnnotations",
          "source": "Java15ReflectionBasedReferenceTypeDelegate.java:82"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getAnnotations",
          "source": "ReferenceType.java:120"
        },
        {
          "method": "org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testGetAnnotations",
          "source": "ReflectionBasedReferenceTypeDelegateTest.java:75"
        },
        {
          "method": "jrockit.reflect.VirtualNativeMethodInvoker.invoke",
          "source": "Ljava.lang.Object;[Ljava.lang.Object;"
        }
      ],
      "number": 3,
      "commentIndex": 5,
      "bugId": "117622",
      "date": "2005-11-23T03:32:31+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Can\u0027t ask to parameterize a member of a non-generic type",
      "elements": [
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:605"
        },
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:590"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getDeclaredMethods",
          "source": "ReferenceType.java:402"
        },
        {
          "method": "org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testGetDeclaredMethods",
          "source": "ReflectionBasedReferenceTypeDelegateTest.java:134"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:478"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:344"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 4,
      "commentIndex": 11,
      "bugId": "117622",
      "date": "2005-11-23T16:55:35+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "117622",
  "bugId": "117622",
  "date": "2005-11-23T03:17:30+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}