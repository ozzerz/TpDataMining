{
  "comments": [
    "I get the same BCException when I build incrementally but not after cleaning the\nproject.  The code is correct (I think) and runs fine after clean-and-build.\n\nAJDT Build id: 20051104134042\nAspectJ version: 1.5.0.200510241400\n\n(Sorry if this is another manifestation of a different bug or an AJDT bug.)\n\n---------------------------------------------------------------\n----------------- Singleton.java\npackage com.isberg.articles.aop7.patterns;\n\n/**\n * CODE article singleton variant without eager/lazy\n */\npublic abstract aspect Singleton\u003cTarget\u003e pertypewithin(Target) {\n\tprivate final Object lock \u003d new Object();\n\tprivate Target singleton;\n\n\t/**\n\t * Subaspects define this.  All join points must return type Target.\n\t */\n\tabstract protected pointcut creation();\n\n\tpointcut creating() : cflow(within(Singleton+) \u0026\u0026 adviceexecution());\n\t\n    Target around() : creation() \u0026\u0026 !creating(){\n    \tsynchronized(lock) {\n            if (singleton \u003d\u003d null) {\n                singleton \u003d proceed();\n            }\n            return singleton;\n    \t}\n    }\n}\n\n----------------- SingletonTest.java\npackage com.isberg.articles.aop7.patterns;\n\nimport junit.framework.TestCase;\n\npublic class SingletonTest extends TestCase {\n\tpublic void testSingleton() throws Exception {\n\t\tC[] cs \u003d {C.create(), new C(), C.create()};\n\t\tfor (int i \u003d 1; i \u003c cs.length; i++) {\n\t\t\tassertEquals(cs[0], cs[i]);\n\t\t}\n\t}\n\tstatic class C {\n\t\tstatic C create() {return new C();}\n\t\tC() {}\t\t\n\t}\n\tstatic aspect A extends Singleton\u003cC\u003e {\n\t\tprotected pointcut creation() : execution(static C C.create())\n\t\t\t|| call(C.new());\n\t}\n}\n---------------------------------------------------------------\n\ntrouble in:public class com.isberg.articles.aop7.patterns.SingletonTest extends\njunit.framework.TestCase:\npublic void \u003cinit\u003e():\nALOAD_0     // com.isberg.articles.aop7.patterns.SingletonTest this   (line 5)\nINVOKESPECIAL junit.framework.TestCase.\u003cinit\u003e ()V\nconstructor-execution(void com.isberg.articles.aop7.patterns.SingletonTest.\u003cinit\u003e())\n|               RETURN\nconstructor-execution(void com.isberg.articles.aop7.patterns.SingletonTest.\u003cinit\u003e())\nend public void \u003cinit\u003e()\npublic void testSingleton() throws java.lang.Exception   \norg.aspectj.weaver.MethodDeclarationLineNumber: 6:142\n:\nmethod-execution(void\ncom.isberg.articles.aop7.patterns.SingletonTest.testSingleton())\n|               ICONST_3   (line 7)\n|               ANEWARRAY com.isberg.articles.aop7.patterns.SingletonTest$C\n|               DUP\n|               ICONST_0\n| method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\ncom.isberg.articles.aop7.patterns.SingletonTest$C.create())\n| |             INVOKESTATIC\ncom.isberg.articles.aop7.patterns.SingletonTest$C.create\n()Lcom/isberg/articles/aop7/patterns/SingletonTest$C;\n| method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\ncom.isberg.articles.aop7.patterns.SingletonTest$C.create())\n|               AASTORE\n|               DUP\n|               ICONST_1\n| constructor-call(void com.isberg.articles.aop7.patterns.SingletonTest$C.\u003cinit\u003e())\n| |             NEW com.isberg.articles.aop7.patterns.SingletonTest$C\n| |             DUP\n| |             INVOKESPECIAL\ncom.isberg.articles.aop7.patterns.SingletonTest$C.\u003cinit\u003e ()V\n| constructor-call(void com.isberg.articles.aop7.patterns.SingletonTest$C.\u003cinit\u003e())\n|               AASTORE\n|               DUP\n|               ICONST_2\n| method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\ncom.isberg.articles.aop7.patterns.SingletonTest$C.create())\n| |             INVOKESTATIC\ncom.isberg.articles.aop7.patterns.SingletonTest$C.create\n()Lcom/isberg/articles/aop7/patterns/SingletonTest$C;\n| method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\ncom.isberg.articles.aop7.patterns.SingletonTest$C.create())\n|               AASTORE\n|               ASTORE_1\n|               ICONST_1   (line 8)\n|               ISTORE_2\n|               GOTO L1\n|           L0: ALOAD_1     //\ncom.isberg.articles.aop7.patterns.SingletonTest$C[] cs   (line 9)\n|               ICONST_0\n|               AALOAD\n|               ALOAD_1     //\ncom.isberg.articles.aop7.patterns.SingletonTest$C[] cs\n|               ILOAD_2     // int i\n|               AALOAD\n| method-call(void junit.framework.Assert.assertEquals(java.lang.Object,\njava.lang.Object))\n| |             INVOKESTATIC\ncom.isberg.articles.aop7.patterns.SingletonTest.assertEquals\n(Ljava/lang/Object;Ljava/lang/Object;)V\n| method-call(void junit.framework.Assert.assertEquals(java.lang.Object,\njava.lang.Object))\n|               IINC 2 1     // int i   (line 8)\n|           L1: ILOAD_2     // int i\n|               ALOAD_1     //\ncom.isberg.articles.aop7.patterns.SingletonTest$C[] cs\n|               ARRAYLENGTH\n|               IF_ICMPLT L0\n|               RETURN   (line 11)\nmethod-execution(void\ncom.isberg.articles.aop7.patterns.SingletonTest.testSingleton())\nend public void testSingleton() throws java.lang.Exception\nend public class com.isberg.articles.aop7.patterns.SingletonTest\nwhen implementing on shadow constructor-call(void\ncom.isberg.articles.aop7.patterns.SingletonTest$C.\u003cinit\u003e())\nwhen weaving type com.isberg.articles.aop7.patterns.SingletonTest\nwhen weaving classes\nwhen weaving\nwhen incrementally building\nBuildConfig[c:\\home\\ws\\main-31\\.metadata\\.plugins\\org.eclipse.ajdt.core\\devworks-fall.generated.lst]\n#Files\u003d90\n\n\norg.aspectj.weaver.BCException: Class\ncom.isberg.articles.aop7.patterns.Singleton does not have a method\najc$around$com_isberg_articles_aop7_patterns_Singleton$1$51e13820 with signature\n(Lorg/aspectj/runtime/internal/AroundClosure;)Ljava/lang/Object;\nwhen implementing on shadow constructor-call(void\ncom.isberg.articles.aop7.patterns.SingletonTest$C.\u003cinit\u003e())\nwhen weaving type com.isberg.articles.aop7.patterns.SingletonTest\nwhen weaving classes\nwhen weaving\nwhen incrementally building\nBuildConfig[c:\\home\\ws\\main-31\\.metadata\\.plugins\\org.eclipse.ajdt.core\\devworks-fall.generated.lst]\n#Files\u003d90\nat org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1161)\nat org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1146)\nat org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:1973)\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:211)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:514)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:391)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1782)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:394)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:98)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1478)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1443)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1217)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1039)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat\norg.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:249)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:158)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)",
    "I better take a look.",
    "Created an attachment (id\u003d30372)\ntestcase patch\n\nPatch containing failing testcase - apply to the tests project.\n\nThe testcase contains the line:\n\n\tAjdeInteractionTestbed.VERBOSE\u003dtrue;\n\nto be used for debugging, but should probably be removed when integrated.\n\nThe key things to recreating this bug seemed to be the around advice returning a \u0027Target\u0027 which is the same as used within the aspect declaration.",
    "Created an attachment (id\u003d30373)\nNPE fix patch\n\nApply to the org.aspectj.ajdt.core project.\n\nWhen you run the test program attached above an NPE occurs before the reported BCException (this has been introduced since the bug was raised since I\u0027ve run the test program within a workspace containing an old version of aspectj and no NPE was seen). This patch contains a fix for that NPE. With this fix, the previously attached testcase produces the reported BCException.",
    "This bug is proving to be really hard to track down - here\u0027s what I\u0027ve learnt so far:\n\n\"The case of the zombie shadow munger\"\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nWe start off with a full build, and aspect A1 has around advice in it. This cause an around advice shadow munger to be created in the crosscutting member set. \n\nWe change A1 (to delete the around advice) and do an incremental build. This causes us to source compile only A1.java, but to weave everything. The first bug lurking here is that A1 is an abstract aspect extended by A. When we addOrReplaceAspect in the CrosscuttingMembersSet, if the aspect is abstract we also need to refresh the crosscutting members of any subaspects of it we have defined - because crosscutting members are aggregated in concrete subaspects from abstract super aspects. This part of the fix is in and working. When we do this, the around advice shadow munger is no longer present (correct).\n\nWe come back to the incremental compilation loop, and the references tell us that we need to recompile C1.java too (because in that file is a subtype of A1 that we just rebuilt). So we do an incremental compile of C1.java, which triggers a full weave again (C1.java contains the definition of concrete aspect A). But this time, when we get all of the shadow mungers for the crosscutting members set, the around advice shadow munger has come back from the dead! In particular, when we ask the reference type for A1 for it shadowMungers, it returns the around advice munger.\n\nWell, it\u0027s all downhill from here. We do matching, see that the around advice munger matches, and try to inline a call to the advice method that the munger specifies - but that method doesn\u0027t exist anymore, and bang!. \n\nSo the question is.... why does the around shadowMunger come back from the dead, having correctly disappeared in the first incremental compilation round? ??",
    "\"The case of the zombie shadow munger, part 2\"\n\nOK, there were two more layered problems here. Firstly, generic reference types need to remember all of their derivative types, so that if the delegate of the generic type is updated, the delegates of the derivative (raw and parameterized) types get updated too. This is mostly an issue during incremental compilation when delegates get updated after an increment.\n\nSecond issue was that EclipseFactory was sometimes creating new Reference types for generic types when the world already had one. This leads to multiple versions kicking around and trouble later on.\n\nBoth of these are now fixed, and this test case passes, but several other tests in the suite are broken so we\u0027re not out of the woods yet...\n\n",
    "The final hurdle.\n\nIt turns out that cflow is a bit of a mess. The change to add-or-replace sub-aspects when adding-or-replacing an abstract super aspect breaks an assumption in CflowPointcut.concretize1 that adds special shadow and type mungers to the crosscutting member set of a concrete aspect. If you ask for the crosscutting member set more than once, you don\u0027t get the members second time round. After several more hours looking at the options, I backed out this part of the change. It should probably be re-enabled post 1.5.0 when we can reconsider the cflow design at our leisure. Breaking backwards compatibility with 1.2.1 is one of the issues I ran into. The part of the change that is backed out is actually not necessary to make this case pass :- the order of adding aspects to the member set seems to nearly always work out so that my safeguard was just that. I\u0027d just like to be 100% certain about it rather than saying \"it seems to (nearly?) always work out\". ...!",
    "fixes checked into cvs - first green bar in a long time it feels like! waiting on build.....",
    "fix available"
  ],
  "commentCreationDates": [
    "2005-11-07T02:36:24+01:00",
    "2005-11-07T08:05:27+01:00",
    "2005-11-22T13:21:13+01:00",
    "2005-11-22T13:23:51+01:00",
    "2005-11-25T09:55:56+01:00",
    "2005-11-25T11:46:58+01:00",
    "2005-11-25T16:20:24+01:00",
    "2005-11-25T17:40:42+01:00",
    "2005-11-25T19:19:53+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.aspectj.weaver.BCException",
      "message": "Class com.isberg.articles.aop7.patterns.Singleton does not have a method ajc$around$com_isberg_articles_aop7_patterns_Singleton$1$51e13820 with signature (Lorg/aspectj/runtime/internal/AroundClosure;)Ljava/lang/Object; when implementing on shadow constructor-call(void com.isberg.articles.aop7.patterns.SingletonTest$C.\u003cinit\u003e()) when weaving type com.isberg.articles.aop7.patterns.SingletonTest when weaving classes when weaving when incrementally building BuildConfig[c:\\home\\ws\\main-31\\.metadata\\.plugins\\org.eclipse.ajdt.core\\devworks-fall.generated.lst] #Files\u003d90",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen",
          "source": "LazyClassGen.java:1161"
        },
        {
          "method": "org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen",
          "source": "LazyClassGen.java:1146"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline",
          "source": "BcelShadow.java:1973"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelAdvice.implementOn",
          "source": "BcelAdvice.java:211"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implementMungers",
          "source": "Shadow.java:514"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Shadow.java:391"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "BcelClassWeaver.java:1782"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:394"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:98"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1478"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1443"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1217"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1039"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:300"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:178"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:759"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:249"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:158"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "115251",
      "date": "2005-11-07T02:36:24+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "115251",
  "bugId": "115251",
  "date": "2005-11-07T02:36:24+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}