{
  "comments": [
    "Nightly debug tests are failing intermittently. I added more info to the tests \nand found the failures are often of the following sort... It looks like the \nframe line number if off by one. This could be caused by a race condition. The \nstack frame (in this case, in the main thread), did realize at line 52 (as a \nnon-top-stack frame), but then resumed to a breakpoint to suspend at line 53 \n(as a top stack frame). It could be that the underlying frame was retrieved and \ncached at the line 52 location, and was not properly re-retrieved when line 53 \nbreakpoint was hit.\n\nline numbers of breakpoint and stack frame do not match expected:\u003c53\u003e but \nwas:\u003c52\u003e \n\njunit.framework.AssertionFailedError: line numbers of breakpoint and stack \nframe do not match expected:\u003c53\u003e but was:\u003c52\u003e\nat \norg.eclipse.jdt.debug.tests.core.DeferredBreakpointTests.testDeferredBreakpoints\n(DeferredBreakpointTests.java:86)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\nat org.eclipse.jdt.debug.tests.AutomatedSuite$1.run(AutomatedSuite.java:171)\nat java.lang.Thread.run(Thread.java:534)",
    "Fixed.\nSet JDIStackFrame#getUnderlyingStackFrame() and \nJDIStackFrame#setUnderlyingStackFrame(..) synchronized.\n\nThe problem was :\nthread 1 calls getUnderlyingStackFrame()\n         there is no cached value, so it sends a JDWP request to get the value.\n         waiting for the reply\nthread 2 calls setUnderlyingStackFrame(..)\n         set fStackFrame to null.\n         ... do some other stuff ...\nthread 1 get a reply\n         set fStackFrame to the new value.\n\nthis value was never cleared and used in the next computation.\n",
    "Please verify, Darin S.",
    "Verified.",
    "Luc, I\u0027m not convinced that this fixes the problem. Adding \"synch\" to the \nmethods means only one thread can enter those methods at once, but the time \nslicing could still occurr, allowing one thread to enter \nthe \"getUnderlyingFrame\" method, then swap out, while another thread \"nulls\" \nout the underlying frame. I believe we need to syncrhonize the code in the \nJDIThread that performs the following operation (which needs to be atomic), on \nthe thread object itself:\n\n* set state to running\n* preserve stack frames (i.e. null them out)",
    "With the gettor and settor synchronized and no other instances in the code of \nsetting fStackframe, it is not possible for another thread to change the value \nof fStackFrame. No time slicing will occur as thread1 has a lock on the \nmonitor of the stack frame object. Thread2 will be blocked attempting to enter \neither the gettor or the settor until thread1 releases the monitor of the \nstack frame object which it obtained by entering either the gettor or the \nsettor.",
    "I\u0027m not sure that a synchronized method is the same as \"synchronized (this)\"? \n(Is it - I don\u0027t have a JLS book here). My understanding is that only one \nthread can enter a synchronized method, but there is no lock on the object \nitself.",
    "My understanding is that synchronizing the method is the same as writing:\n\npublic void method() {\nsynchronized (this) {\n...\n}\n}\n\nQuick web search: http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?\nubb\u003dget_topic\u0026f\u003d27\u0026t\u003d000612",
    "http://java.sun.com/docs/books/tutorial/together/bingo/synchronized.html\n\n\"By synchronizing [these] two methods, the Java platform ensures that the first \nmethod call completes before the second can begin...\". \n\nI.e. synch\u0027d methods serialize access to methods, not objects.",
    "err .. no, it says after \"..gameInProgress fully completes (and returns true)\nbefore setGameResumed is allowed to begin.\"\n\nAnyway, from the JLS :\n\"A synchronized method acquires a lock (?17.1) before it executes. For a class\n(static) method, the lock associated with the Class object for the method\u0027s\nclass is used. For an instance method, the lock associated with this (the object\nfor which the method was invoked) is used.\nThese are the same locks that can be used by the synchronized statement\n(?14.18); ...\"\nhttp://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#260369\n",
    "OK great - now we know how that works. Phew. Now let me see if I think there \ncould still be a timing issue (the frame is synchronized, but the resume \noperation in the thread is not).",
    "Yes - I agree this fixes the problem at hand. The frame was being \"recached\" \nbetween the time a request to resume the thread was made, and the actual resume \nwas performed. However, now there is no way for the frame to be set to an \nactual frame, after the thread has started the resume operation.",
    "Verified."
  ],
  "commentCreationDates": [
    "2003-10-20T16:07:03+02:00",
    "2003-10-21T00:31:24+02:00",
    "2003-10-21T00:31:44+02:00",
    "2003-10-21T01:12:56+02:00",
    "2003-10-22T17:18:21+02:00",
    "2003-10-22T17:31:19+02:00",
    "2003-10-22T17:38:01+02:00",
    "2003-10-22T17:46:09+02:00",
    "2003-10-22T18:13:00+02:00",
    "2003-10-22T18:23:18+02:00",
    "2003-10-22T18:47:45+02:00",
    "2003-10-22T18:57:51+02:00",
    "2003-10-22T18:59:01+02:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "message": "line numbers of breakpoint and stack  frame do not match expected:\u003c53\u003e but was:\u003c52\u003e",
      "elements": [
        {
          "method": "org.eclipse.jdt.debug.tests.core.DeferredBreakpointTests.testDeferredBreakpoints",
          "source": "DeferredBreakpointTests.java:86"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "org.eclipse.jdt.debug.tests.AutomatedSuite$1.run",
          "source": "AutomatedSuite.java:171"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:534"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "45211",
      "date": "2003-10-20T16:07:03+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "45211",
  "bugId": "45211",
  "date": "2003-10-20T16:07:03+02:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "normal"
}