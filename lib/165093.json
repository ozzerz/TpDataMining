{
  "comments": [
    "If you launch the JVMTI Profiler\u0027s Memory Analysis or Thread Analysis collectors, you can no longer use the Execution Time Analysis collectors.\n\nSteps to reproduce\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n1. From the Monitor tab, select either the Heap Analysis or Thread Analysis JVMTI collectors and execute a profiling session.\n2. When done, launch a new session and select the Execution Time Analysis JVMTI collector. No data will appear in the profiling perspective.\n\nProblem Analysis\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nThe problem is in the launch() method of the org.eclipse.tptp.platform.jvmti.client.internal.launcher.TIDelegateHelper class: by default, the string in the TI_JVM_FLAG static field contains the options to launch the JVMTI Call Graph profiler (CGProf). When the user selects either the Thread Analysis or Heap Analysis options, the value of the TI_JVM_FLAG is overwritten with the options to launch the selected profiler (either HeapProf or ThreadProf). However, there is no code to set this variable back to launching CGProf in case the user selects Execution Time Analysis.\n\nDue to problems in configuring the build environment, I cannot fix, test this defect, and submit a patch. I suggest someone from the UI group will take an ownership and fix this.",
    "Created an attachment (id\u003d54179)\nPatch\n\nAli and Asaf, would you please review the patch? I will attach a deployable plugin jar for you to patch and test with candidate build.",
    "Created an attachment (id\u003d54180)\npatched jar \n\nAli and Asaf, please test with this patched jar plugin.",
    "Here are some issues that I discovered with the JVMTI agent:\n\n1) It doesn\u0027t work with IBM JVM 1.5.  It throws the following NPE exceptions every second.\n\njava.lang.NullPointerException\n\tat org.eclipse.tptp.platform.execution.util.internal.TPTPXMLParse.setParser(TPTPXMLParse.java:204)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.AgentController.queryAgentByProcessID(AgentController.java:489)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.AgentController.getAgent(AgentController.java:837)\n\tat org.eclipse.tptp.platform.jvmti.client.internal.launcher.AgentAvailibilityTester$1.processLaunched(AgentAvailibilityTester.java:135)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl$ProcessEventListener.processLaunched(ProcessImpl.java:785)Couldn\u0027t find class :com.sun.org.apache.xpath.internal.XPathAPI\n\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl.launchAC(ProcessImpl.java:629)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl.launch(ProcessImpl.java:113)\n\tat org.eclipse.tptp.platform.jvmti.client.internal.launcher.AgentAvailibilityTester$2.run(AgentAvailibilityTester.java:162)\n\tat java.lang.Thread.run(Thread.java:797)\njava.lang.NullPointerException\n\tat org.eclipse.tptp.platform.execution.client.core.internal.AgentController.queryAgentByProcessID(AgentController.java:491)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.AgentController.getAgent(AgentController.java:837)\n\tat org.eclipse.tptp.platform.jvmti.client.internal.launcher.AgentAvailibilityTester$1.processLaunched(AgentAvailibilityTester.java:135)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl$ProcessEventListener.processLaunched(ProcessImpl.java:785)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl.launchAC(ProcessImpl.java:629)\n\tat org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl.launch(ProcessImpl.java:113)\n\tat org.eclipse.tptp.platform.jvmti.client.internal.launcher.AgentAvailibilityTester$2.run(AgentAvailibilityTester.java:162)\n\tat java.lang.Thread.run(Thread.java:797)\n\n\n2) The 3rd or 4th launch always fails with an out of memory exception.  See the stack trace below.  This causes the workbench to hang.\n\nStringCoding$CharsetSD.decode(byte[], int, int) line: 183\t\nStringCoding.decode(String, byte[], int, int) line: 228\t\nStringCoding.decode(byte[], int, int) line: 234\t\nString.\u003cinit\u003e(byte[], int, int) line: 458\t\nString.\u003cinit\u003e(byte[]) line: 479\t\nTPTPMessageUtil.readTPTPCmdStringFromBuffer(byte[], int, TPTPString) line: 77\t\nCommandFragment.readFromBuffer(byte[], int) line: 64\t\nControlMessage.readACCommands(byte[], int, int) line: 271\t\nControlMessage.readFromBuffer(byte[], int) line: 259\t\nConnectionImpl.processControlMessage(byte[], int, int) line: 596\t\nConnectionImpl$SocketReaderThread.run() line: 773\t\n\n3) Here\u0027s the scenario that I tried testing:\n\n- Launch StartStop as an external Java app with \"Execution Time Analysis\"\n- Launch StartStop as an external Java app with \"Memory Analysis\"\n- Launch StartStop as an external Java app with \"Execution Time Analysis\"\n\nThe 3rd launch will generate a trace that is empty at the method level.  When I select the class/package level, I see some entries with 0 base/average/cumulative time  (see the snapshot attached).",
    "Thanks Ali for your test.\n\nI can reproduce problem (1) in your comment, but not (2) and (3).\nWould you please open the problem you found as separate bugs to track the problems?",
    "Created an attachment (id\u003d54213)\nExecution Stat View - class level view\n\nThe view is empty at method level.  The names without a valid time stamp are displayed at package and class level.",
    "2) and 3) were being caused by errors in my setting.  Please ignore my comments about 2) and 3).\n\nThe patch seems to work fine.",
    "I\u0027ve opened https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d165272 for problem #1.",
    "(In reply to comment #2)\nI verified that the patch solves the problem",
    "-1 per PMC call on Nov 22nd.\nTarget to 4.4. Fix should be checked in as soon as 4.4 is opened.",
    "update target, priority and severity\n\nrequire to verify patch with the latest HEAD code again.",
    "patch submitted."
  ],
  "commentCreationDates": [
    "2006-11-19T11:02:03+01:00",
    "2006-11-20T16:58:54+01:00",
    "2006-11-20T17:03:41+01:00",
    "2006-11-20T21:11:43+01:00",
    "2006-11-20T21:54:31+01:00",
    "2006-11-20T22:34:23+01:00",
    "2006-11-20T23:15:14+01:00",
    "2006-11-21T03:17:50+01:00",
    "2006-11-21T19:03:00+01:00",
    "2006-11-22T15:52:32+01:00",
    "2007-01-12T23:02:56+01:00",
    "2007-01-12T23:09:26+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.tptp.platform.execution.util.internal.TPTPXMLParse.setParser",
          "source": "TPTPXMLParse.java:204"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.AgentController.queryAgentByProcessID",
          "source": "AgentController.java:489"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.AgentController.getAgent",
          "source": "AgentController.java:837"
        },
        {
          "method": "org.eclipse.tptp.platform.jvmti.client.internal.launcher.AgentAvailibilityTester$1.processLaunched",
          "source": "AgentAvailibilityTester.java:135"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl$ProcessEventListener.processLaunched",
          "source": "ProcessImpl.java:785"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "165093",
      "date": "2006-11-20T21:11:43+01:00",
      "product": "TPTP Profiling",
      "component": "Platform.UI.ProfilingPerspective",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.AgentController.queryAgentByProcessID",
          "source": "AgentController.java:491"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.AgentController.getAgent",
          "source": "AgentController.java:837"
        },
        {
          "method": "org.eclipse.tptp.platform.jvmti.client.internal.launcher.AgentAvailibilityTester$1.processLaunched",
          "source": "AgentAvailibilityTester.java:135"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl$ProcessEventListener.processLaunched",
          "source": "ProcessImpl.java:785"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl.launchAC",
          "source": "ProcessImpl.java:629"
        },
        {
          "method": "org.eclipse.tptp.platform.execution.client.core.internal.ProcessImpl.launch",
          "source": "ProcessImpl.java:113"
        },
        {
          "method": "org.eclipse.tptp.platform.jvmti.client.internal.launcher.AgentAvailibilityTester$2.run",
          "source": "AgentAvailibilityTester.java:162"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:797"
        }
      ],
      "number": 1,
      "commentIndex": 3,
      "bugId": "165093",
      "date": "2006-11-20T21:11:43+01:00",
      "product": "TPTP Profiling",
      "component": "Platform.UI.ProfilingPerspective",
      "severity": "major"
    }
  ],
  "groupId": "165093",
  "bugId": "165093",
  "date": "2006-11-19T11:02:03+01:00",
  "product": "TPTP Profiling",
  "component": "Platform.UI.ProfilingPerspective",
  "severity": "major"
}