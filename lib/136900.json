{
  "comments": [
    "3.2RC1, during iterating over CompilationUnit.imports() and removing some entries, NoSuchElementException is raised.\n\nCompilationUnit unit \u003d ...\nfor( ImportDeclaration id : (List\u003cImportDeclaration\u003e)unit.imports() )\n\tif( condition )\n\t\tunit.imports().remove( id );\n\nJava 5 features are not the cause. After some checking, ASTNode.NodeList does not overrise iterator() to be synchronized with NodeList.store.\n\nIf this is an improper usage, UnsupportedOperationException should be raised during remove() instead.",
    "If I modify it the way you suggest it, I get a java.util.ConcurrentModificationException instead of a current NoSuchElementException.\n\nIs this what you want?\n\nThis would be consistent with what happens when trying to modify a list in the same time the list is iterated.",
    "What about something like:\n\n\tpublic static void main( String[] args ) throws Exception {\n\t\tList\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();\n\t\tlist.add( \"Hello\" );\n\t\tlist.add( \"there\" );\n\t\tfor( String s : list )\n\t\t\tif( s.equals( \"Hello\" ) )\n\t\t\t\tlist.remove( s );\n\t\tSystem.out.println( \"Finished \" + list.size() );\n\t}\n\nThere is no exception.\n\nI don\u0027t know when ConcurrentModificationException is exactly thrown, as the documentation says something about fail-fast iterator. But I guess someway should be there for a much better usability.\n\nHope that clarifies, many thanks.\n",
    "If you put more elements in your list, you would get the exception.\nFor example,\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class X {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tList\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();\n\t\tlist.add(\"Hello\");\n\t\tlist.add(\"there\");\n\t\tlist.add(\"Hello\");\n\t\tlist.add(\"there\");\n\t\tlist.add(\"Hello\");\n\t\tlist.add(\"there\");\n\t\tlist.add(\"Hello\");\n\t\tlist.add(\"there\");\n\t\tlist.add(\"Hello\");\n\t\tlist.add(\"there\");\n\t\tfor (String s : list)\n\t\t\tif (s.equals(\"Hello\"))\n\t\t\t\tlist.remove(s);\n\t\tSystem.out.println(\"Finished \" + list.size());\n\t}\n}\n\nleads to:\nException in thread \"main\" java.util.ConcurrentModificationException\n\tat java.util.AbstractList$Itr.checkForComodification(AbstractList.java:449)\n\tat java.util.AbstractList$Itr.next(AbstractList.java:420)\n\tat X.main(X.java:15)\n",
    "Changing this actually breaks many rewriting tests.\nDefer post 3.2."
  ],
  "commentCreationDates": [
    "2006-04-15T07:50:44+02:00",
    "2006-04-19T05:36:05+02:00",
    "2006-04-19T13:02:28+02:00",
    "2006-04-19T19:14:35+02:00",
    "2006-04-19T20:26:14+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.util.ConcurrentModificationException",
      "elements": [
        {
          "method": "java.util.AbstractList$Itr.checkForComodification",
          "source": "AbstractList.java:449"
        },
        {
          "method": "java.util.AbstractList$Itr.next",
          "source": "AbstractList.java:420"
        },
        {
          "method": "X.main",
          "source": "X.java:15"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "136900",
      "date": "2006-04-19T19:14:35+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "136900",
  "bugId": "136900",
  "date": "2006-04-15T07:50:44+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}