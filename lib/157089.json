{
  "comments": [
    "workbench cpu 100% consumed when 200 tests introduced to project only in TestPerspective.\nSteps to repro.\n\n1. Copy 200 unique test suites to project folder using Windows Explorer\n2. Launch RPT workspace containing project with 200 unique tests\n3. Observe greedy CPU consumption\n\n200 unique tests can be found here \\\\jibe.raleigh.ibm.com\\myShare\\oldstuff\\200tests",
    "Please disregard the path to the tests location. The tests will be available upon request.",
    "Created an attachment (id\u003d50014)\nperformance graph\n\n",
    "I\u0027ve tried reproduce this issue using the driver 4.2.1 used to make test pass.\nThis is pure TPTP driver without RPT.\nI\u0027ve duplicated a manual test suite (very simple) until 200 different files\nusing Windows explorer.\nThen, I\u0027ve launch TPTP with the test perspective open containing the test\nnavigator (in resource mode). After refreshing its content test suites appear\nafter 10sec (the CPU is 100% during this period).\nIf I try to switch to logical mode or close/open the test nav, it takes around\n5sec to display test suites due to cache (CPU usage 100% during this period as\nwell)\nSame duration is observed if I close/restart TPTP.\n\nSame test has been performed using plugin actual junit test suite (used for\nTPTP interanl tests) duplicated 1000 times.\nHere is the snapshoot of the performance graph of my system (old test machine\nDELL dimension 2300)\n\nFrom a TPTP perspective, it seems that test navigator is scalable.",
    "Reassign to Jerome.  Change from blocker to critical.",
    "Here are some observations I have made while debugging the problem:\n\n1. During refresh, each test is loaded into memory. RPT Tests tend to be much larger than simple manual tests, so loading them must be more time consuming.  Time spent in RPT code (i.e. ProxyNode and Factory) is in the range 5-20ms, which is to say, very small. Indeed most of time is spent loading the test.\n\n2. Below is the typical stack trace that can be obtained by pausing Eclipse at any given moment during the delay/freeze. As you can see, the problem stems not from the fact that that loading large EMF tests into memory is a long operation, but rather that this is being done inside UI thread.\n\n3. There are several ways to move processing and updating the UI into background. Jobs, UIJobs, LazyContentProvider, LazyLabelProviders and delayed decorators can all be used to improve visual user experience during long lasting ops. Perhaps TestNavigator can be changed to use one or more of these.\n\n4. Finally, this problem does not appear to be specific to RPT. Any other product can potentially create large test assets and bring TestNavigator to a crawl.\n\n-------------------- stack trace ----------------------------------\nXMLEntityScanner.skipSpaces() line: not available [local variables unavailable]\t\nXMLDocumentScannerImpl(XMLDocumentFragmentScannerImpl).scanStartElement() line: not available\t\nXMLDocumentScannerImpl$ContentDispatcher(XMLDocumentFragmentScannerImpl$FragmentContentDispatcher).dispatch(boolean) line: not available\t\nXMLDocumentScannerImpl(XMLDocumentFragmentScannerImpl).scanDocument(boolean) line: not available\t\nXIncludeAwareParserConfiguration(XML11Configuration).parse(boolean) line: not available\t\nXIncludeAwareParserConfiguration(XML11Configuration).parse(XMLInputSource) line: not available\t\nSAXParserImpl$JAXPSAXParser(XMLParser).parse(XMLInputSource) line: not available\t\nSAXParserImpl$JAXPSAXParser(AbstractSAXParser).parse(InputSource) line: not available\t\nSAXParserImpl.parse(InputSource, DefaultHandler) line: not available\t\nXMILoadImpl(XMLLoadImpl).load(XMLResource, InputStream, Map) line: 179\t\nFacadeResourceImpl(XMLResourceImpl).doLoad(InputStream, Map) line: 179\t\nFacadeResourceImpl.doLoad(InputStream, Map) line: 181\t\nFacadeResourceImpl(ResourceImpl).load(InputStream, Map) line: 1089\t\nFacadeResourceImpl(ResourceImpl).load(Map) line: 895\t\nResourceSetImpl.demandLoad(Resource) line: 249\t\nResourceSetImpl.demandLoadHelper(Resource) line: 264\t\nResourceSetImpl.getResource(URI, boolean) line: 390\t\nEMFResourceProxyFactory.getEMFResource(IFile) line: 88\t\nEMFResourceProxyFactory.create(IFile, Object) line: 108\t\nFileProxyNodeCache.createProxy(IFile) line: 451\t\nFileProxyNodeCache.getProxy(IFile) line: 432\t\nFileProxyManager.getProxy(IFile, Object) line: 63\t\n--\u003e TestResourceChangeUpdater.add(IResource, IResource[]) line: 171\t\nResourceChangeUpdaterProvider$UIUpdaterProvider(ResourceChangeUpdaterProvider).processDelta(IResourceDelta) line: 227\t\nResourceChangeUpdaterProvider$UIUpdaterProvider(ResourceChangeUpdaterProvider).processDelta(IResourceDelta) line: 203\t\nResourceChangeUpdaterProvider$UIUpdaterProvider(ResourceChangeUpdaterProvider).doProcessDelta(IResourceDelta) line: 133\t\nResourceChangeUpdaterProvider$UIUpdaterProvider.run() line: 67\t\nUILockListener.doPendingWork() line: 155\t\nUISynchronizer$1.run() line: 36\t\nRunnableLock.run() line: 35\t\nUISynchronizer(Synchronizer).runAsyncMessages(boolean) line: 123\t\nDisplay.runAsyncMessages(boolean) line: 3325\t\nDisplay.readAndDispatch() line: 2971\t\nWorkbench.runEventLoop(Window$IExceptionHandler, Display) line: 1914\t\nWorkbench.runUI() line: 1878\t\nWorkbench.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 419\t\nPlatformUI.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 149\t\nIDEApplication.run(Object) line: 95\t\nPlatformActivator$1.run(Object) line: 78\t\nEclipseAppLauncher.runApplication(Object) line: 92\t\nEclipseAppLauncher.start(Object) line: 68\t\nEclipseStarter.run(Object) line: 400\t\nEclipseStarter.run(String[], Runnable) line: 177\t\nNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]\t\nNativeMethodAccessorImpl.invoke(Object, Object[]) line: 64\t\nDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 4",
    "Will try to implement the asynchronous solution in i3.",
    "Please correct the version since there is no 4.2.2 release.",
    "Created an attachment (id\u003d52041)\nFix.\n\n",
    "Adjusting priority to reflect severity.",
    "*** Bug 161415 has been marked as a duplicate of this bug. ***",
    "Please target to 4.4 since all non-blocking/critical defects will be deferred as decided in today\u0027s AG call.",
    "I got out of memory error when I tried to open a test execution history folder at the Test Navigator view in the Test Perspective. There are around 10 test execution history in that folder.\n!ENTRY org.eclipse.ui 4 0 2006-11-10 10:47:09.750\n!MESSAGE java.lang.OutOfMemoryError\n!STACK 0\njava.lang.OutOfMemoryError\n\tat java.lang.Class.getInterfaces(Native Method)\n\tat org.eclipse.ui.internal.ObjectContributorManager.computeInterfaceOrder(ObjectContributorManager.java:148)\n\tat org.eclipse.ui.internal.ObjectContributorManager.getCommonClasses(ObjectContributorManager.java:649)\n\tat org.eclipse.ui.internal.ObjectContributorManager.getContributors(ObjectContributorManager.java:576)\n\tat org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecoratorsFor(LightweightDecoratorManager.java:290)\n\tat org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:315)\n\tat org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:338)\n\tat org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:308)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\n\n",
    "(In reply to comment #12)\n\u003e I got out of memory error when I tried to open a test execution history folder\n\u003e at the Test Navigator view in the Test Perspective. There are around 10 test\n\u003e execution history in that folder.\n\u003e !ENTRY org.eclipse.ui 4 0 2006-11-10 10:47:09.750\n\u003e !MESSAGE java.lang.OutOfMemoryError\n\nCindy, the fix to the following defects are likely to address this problem:\n160224 TestNavigator: proxies should not use the common resource...\n160221 [Performance] TestNavigator: Large execution results display is excessively slow\nThese fixes, which will be available in 4.4, address a number of scalibility \u0026 performance issues with large resources.",
    "I\u0027m getting similar problems with a small project using the candidate i3 build:  TPTP-4.3.0-200611070100.  I am not able to reproduce this problem on my laptop but I am able to consistently reproduce it on my desktop. Here are the steps:\n\n1) Create a Java project \n2) Create a TPTP JUnit under the project\n3) Create a TPTP manual test suite under the project\n4) Switch to the test perspective\n5) Click the \"Logical\" toolbar item of the test navigator\n6) Expand the project\n\nThe workbench consistently hangs on my desktop.  Here\u0027s the stack trace of the main thread (retrieved using a runtime workbench):\n\nCollections$SynchronizedSet(Collections$SynchronizedCollection).add(Object) line: not available\t\nFileProxyNodeCache.addResourceListener(IResourceChangeListener) line: 284\t\nDefaultTypeProvider.\u003cinit\u003e() line: 48\t\nTypeProviderManager$DefaultTypeProviderInfo.\u003cinit\u003e(TypeProviderManager, String) line: 111\t\nTypeProviderManager.getTypeProviderProxyNode(IProject, String) line: 183\t\nLogicalTestNavigatorProvider.getTypeProviders(IProject) line: 85\t\nLogicalTestNavigatorProvider.getChildren(Object) line: 68\t\nTreeViewer(AbstractTreeViewer).getRawChildren(Object) line: 1166\t\nTreeViewer.getRawChildren(Object) line: 768\t\nTreeViewer(AbstractTreeViewer).getFilteredChildren(Object) line: 574\t\nTreeViewer(AbstractTreeViewer).getSortedChildren(Object) line: 543\t\n.\n.\n.\n\n\n\n\nIt appears that the deadlock is being caused when a resource change listener is being added to FileProxyNodeCache.",
    "The attached patch seems to resolve the problem mentioned under comment #14",
    "Julien, has this patch been well tested?  ",
    "Bob and Sheldon: Can you verify that this patch resolves your problems?",
    "Alex, can you provide a TPTP-specific description on how to recreate this defect?",
    "(In reply to comment #18)\n\u003e Alex, can you provide a TPTP-specific description on how to recreate this\n\u003e defect?\n\nPaul, I got a copy of Alex\u0027s 200 test suites, and I could reproduce and address the problem. I would not recommend delivering the patch at this stage, as it introduces many threading risks (with this patch, most test navigator tasks get performed in a background job). However, I can come with a subset of this patch that specifically addresses the deadlock.",
    "(In reply to comment #19)\n\nThanks Julien.  Can make the proposed subset of this patch available for Ali, Bob and Sheldon to try?  If it resolves their problems, we will propose the new patch for 4.3 once it has been thoroughly tested.",
    "This appears to be specific to hyperthread or multi-core machine (e.g. seen on desktops and not laptops) and may be JRE-specific. \n\nBob/Ali/Sheldon:  Is your machine hyperthread or multi-core machine?  Also, what JRE are you using?\n",
    "I have created bugzilla 164637 to track the deadlock issue. The patch will be attached there.",
    "(In reply to comment #21)\n\u003e This appears to be specific to hyperthread or multi-core machine (e.g. seen on\n\u003e desktops and not laptops) and may be JRE-specific. \n\u003e Bob/Ali/Sheldon:  Is your machine hyperthread or multi-core machine?  Also,\n\u003e what JRE are you using?\n\nMy desktop is a hyperthread machine and I\u0027m using the same JRE 1.4.2 brand on my desktop and laptop.",
    "(In reply to comment #21)\n\u003e This appears to be specific to hyperthread or multi-core machine (e.g. seen on\n\u003e desktops and not laptops) and may be JRE-specific. \n\u003e Bob/Ali/Sheldon:  Is your machine hyperthread or multi-core machine?  Also,\n\u003e what JRE are you using?\n\nI recreated this problem on my T40 laptop using IBM JDK 1.4.2 SR3.",
    "*** Bug 147939 has been marked as a duplicate of this bug. ***",
    "Reassigning to the component leads to triage for 4.4.",
    "Patch applied and checked in",
    "Reporter: Please verify and close in preparation for shutting down the TPTP 4.4 release.  Thanks."
  ],
  "commentCreationDates": [
    "2006-09-12T21:24:12+02:00",
    "2006-09-12T22:26:30+02:00",
    "2006-09-13T10:55:25+02:00",
    "2006-09-13T10:56:16+02:00",
    "2006-09-13T14:15:39+02:00",
    "2006-09-13T16:24:26+02:00",
    "2006-09-15T15:30:07+02:00",
    "2006-09-18T15:48:01+02:00",
    "2006-10-16T18:42:33+02:00",
    "2006-10-18T10:16:47+02:00",
    "2006-10-19T11:14:07+02:00",
    "2006-10-20T20:53:04+02:00",
    "2006-11-10T15:52:24+01:00",
    "2006-11-10T16:08:17+01:00",
    "2006-11-14T21:28:22+01:00",
    "2006-11-14T23:04:55+01:00",
    "2006-11-15T03:24:42+01:00",
    "2006-11-15T03:25:25+01:00",
    "2006-11-15T03:29:04+01:00",
    "2006-11-15T09:27:33+01:00",
    "2006-11-15T12:11:43+01:00",
    "2006-11-15T12:26:12+01:00",
    "2006-11-15T13:51:55+01:00",
    "2006-11-15T15:35:10+01:00",
    "2006-11-15T15:45:52+01:00",
    "2007-01-16T13:43:22+01:00",
    "2007-01-16T15:26:05+01:00",
    "2007-02-28T17:10:31+01:00",
    "2007-06-02T20:51:39+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.OutOfMemoryError",
      "elements": [
        {
          "method": "java.lang.Class.getInterfaces",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.ui.internal.ObjectContributorManager.computeInterfaceOrder",
          "source": "ObjectContributorManager.java:148"
        },
        {
          "method": "org.eclipse.ui.internal.ObjectContributorManager.getCommonClasses",
          "source": "ObjectContributorManager.java:649"
        },
        {
          "method": "org.eclipse.ui.internal.ObjectContributorManager.getContributors",
          "source": "ObjectContributorManager.java:576"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecoratorsFor",
          "source": "LightweightDecoratorManager.java:290"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations",
          "source": "LightweightDecoratorManager.java:315"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached",
          "source": "DecorationScheduler.java:338"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$1.run",
          "source": "DecorationScheduler.java:308"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 12,
      "bugId": "157089",
      "date": "2006-11-10T15:52:24+01:00",
      "product": "TPTP Testing",
      "component": "Test.UI",
      "severity": "major"
    }
  ],
  "groupId": "157089",
  "bugId": "157089",
  "date": "2006-09-12T21:24:12+02:00",
  "product": "TPTP Testing",
  "component": "Test.UI",
  "severity": "major"
}