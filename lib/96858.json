{
  "comments": [
    "With the following in the same file:\n\npackage p1;\nclass Test\u003c\n\tT extends Test\u003cT, B\u003e,\n\tB extends Key\u003cT, B\u003e\u003e {\n}\nclass Key\u003c\n\tT extends Test\u003cT, K\u003e,\n\tK extends Key\u003cT, K\u003e\u003e {\n}\n\nException in thread \"Text Viewer Hover Presenter\" \njava.lang.IllegalArgumentException\n  at  o.e.j.core.Signature.getTypeParameters(Signature.java:1374)\n  at  o.e.j.core.Signature.getTypeParameters(Signature.java:1431)\n  at  o.e.j.ui.JavaElementLabels.getTypeLabel(JavaElementLabels.java:821)\n  at  o.e.j.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:398)\n  at  o.e.j.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:363)\n  at  o.e.j.internal.ui.text.java.hover.JavadocHover.getInfoText\n(JavadocHover.java:142)\n  at  o.e.j.internal.ui.text.java.hover.JavadocHover.getHoverInfo\n(JavadocHover.java:118)\n  at  \no.e.j.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo\n(AbstractJavaEditorTextHover.java:120)\n  at  o.e.j.internal.ui.text.java.hover.BestMatchHover.getHoverInfo\n(BestMatchHover.java:102)\n  at  o.e.j.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo\n(JavaEditorTextHoverProxy.java:69)\n  at org.eclipse.jface.text.TextViewerHoverManager$4.run\n(TextViewerHoverManager.java:160)",
    "This is suspicious.\n\nThe binding key is:\nLp/X~Test\u003cTT;TB;\u003e;\n\nAnd the corresponding signature ends up being:\n\u003cT:\u003eLp.X~Test;\n\nThe label seems wrong. We end up with Test\u003cT\u003e instead of the expecting\nTest\u003cT, B\u003e.\n\nThis leads to a wrong label when hovering on Test in \"T extends Test\u003cT, B\u003e\".\n\nFor Key in \"B extends Key\u003cT, B\u003e\", the binding key is:\nLp/X~Key\u003cLp/X~Test;:TT;Lp/X~Test;:TB;\u003e;\n\nAnd then the label is as expected: Key\u003cT, B\u003e.\n\nMoving to JDT/UI to investigate if KeyToSignature is working as expected.\n\nPhilippe, I put you in CC, because the binding for Test\u003cT, B\u003e is seen as a\ngeneric type and the binding for Key\u003cT, B\u003e is seend as a parameterized type.\nThis doesn\u0027t look consistent.",
    "Olivier,\n\nI actually don\u0027t understand your question. The code on JDT/UI side looks as follows:\n\nif (getFlag(flags, T_TYPE_PARAMETERS)) {\n\tif (getFlag(flags, USE_RESOLVED) \u0026\u0026 type.isResolved()) {\n\t\tBindingKey key\u003d new BindingKey(type.getKey());\n\t\tif (key.isParameterizedType()) {\n\t\t\tString[] typeArguments\u003d key.getTypeArguments();\n\t\t\tgetTypeArgumentSignaturesLabel(typeArguments, flags, buf);\n\t\t} else {\n\t\t\tString[] typeParameters\u003d Signature.getTypeParameters(key.internalToSignature());\n\t\t\tgetTypeParameterSignaturesLabel(typeParameters, flags, buf);\n\t\t\t\t}\n\t} else if (type.exists()) {\n               ...\n\t}\n}\n\nKeyToSignature is an internal JDT/Core class. However what we expect is that\nBindingKey#getTypeArguments (which uses KeyToSignature) returns an array of type\nsignatures for parameterized types.\n\nMoving back to JDT/Core.",
    "Indeed, problem is on our side. Thanks Dirk.",
    "Created an attachment (id\u003d21932)\nProposed fix\n",
    "Created an attachment (id\u003d21933)\nRegression test\n",
    "+1 for RC2",
    "Released fix and test.",
    "Verified in N20050606-0010",
    "Verified for 3.1 RC2 using build I20050610-0010"
  ],
  "commentCreationDates": [
    "2005-05-26T21:36:41+02:00",
    "2005-05-27T20:37:49+02:00",
    "2005-05-27T23:23:27+02:00",
    "2005-05-28T10:30:58+02:00",
    "2005-05-29T11:09:19+02:00",
    "2005-05-29T11:09:45+02:00",
    "2005-05-30T12:19:01+02:00",
    "2005-05-30T14:44:41+02:00",
    "2005-06-07T02:05:03+02:00",
    "2005-06-10T14:45:50+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "elements": [
        {
          "method": "o.e.j.core.Signature.getTypeParameters",
          "source": "Signature.java:1374"
        },
        {
          "method": "o.e.j.core.Signature.getTypeParameters",
          "source": "Signature.java:1431"
        },
        {
          "method": "o.e.j.ui.JavaElementLabels.getTypeLabel",
          "source": "JavaElementLabels.java:821"
        },
        {
          "method": "o.e.j.ui.JavaElementLabels.getElementLabel",
          "source": "JavaElementLabels.java:398"
        },
        {
          "method": "o.e.j.ui.JavaElementLabels.getElementLabel",
          "source": "JavaElementLabels.java:363"
        },
        {
          "method": "o.e.j.internal.ui.text.java.hover.JavadocHover.getInfoText",
          "source": "JavadocHover.java:142"
        },
        {
          "method": "o.e.j.internal.ui.text.java.hover.JavadocHover.getHoverInfo",
          "source": "JavadocHover.java:118"
        },
        {
          "method": "o.e.j.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo",
          "source": "AbstractJavaEditorTextHover.java:120"
        },
        {
          "method": "o.e.j.internal.ui.text.java.hover.BestMatchHover.getHoverInfo",
          "source": "BestMatchHover.java:102"
        },
        {
          "method": "o.e.j.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo",
          "source": "JavaEditorTextHoverProxy.java:69"
        },
        {
          "method": "org.eclipse.jface.text.TextViewerHoverManager$4.run",
          "source": "TextViewerHoverManager.java:160"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "96858",
      "date": "2005-05-26T21:36:41+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "96858",
  "bugId": "96858",
  "date": "2005-05-26T21:36:41+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "normal"
}