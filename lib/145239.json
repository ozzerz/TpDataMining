{
  "comments": [
    "RC5: In the following snippet:\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003cqvtrelation:RelationalTransformation xmlns:imperativeocl\u003d\"http:///imperativeocl.ecore\"\n                                      xmlns:qvtbase\u003d\"http:///qvtbase.ecore\"\n                                      xmlns:qvtoperational\u003d\"http:///qvtoperational.ecore\"\n                                      xmlns:xs\u003d\"http://www.w3.org/2001/XMLSchema\"\n                                      xmlns:qvtrelation\u003d\"http:///qvtrelation.ecore\"\n                                      xmlns:qvttemplate\u003d\"http:///qvttemplate.ecore\"\n                                      xmlns:xsi\u003d\"http://www.w3.org/2001/XMLSchema-instance\"\n                                      xmlns:xmi\u003d\"http://www.omg.org/XMI\"\n                                      xmlns:emof\u003d\"http:///emof.ecore\"\n                                      xmlns:essentialocl\u003d\"http:///essentialocl.ecore\"\n                                      xmi:id\u003d\"e3\"\n                                      name\u003d\"Relations2Core\"\n                                      xmi:version\u003d\"2.0\"\n                                      xsi:schemaLocation\u003d\"http:///qvtoperational.ecore qvtoperationalXMI.xsd\"\u003e\n   \u003cownedType xsi:type\u003d\"emof:Class\" xmi:id\u003d\"e68\" name\u003d\"opsStub\"\u003e\n      \u003cownedOperation xmi:id\u003d\"e28\" name\u003d\"concat\" type\u003d\"emof:DataType emof:/String\"\u003e\n         \u003cownedParameter xmi:id\u003d\"e50\" name\u003d\"s\" type\u003d\"emof:DataType emof:/String\"/\u003e\n      \u003c/ownedOperation\u003e\n   \u003c/ownedType\u003e\n   \u003cmodelParameter xmi:id\u003d\"e4\" name\u003d\"relations\"\n                   usedPackage\u003d\"http:///qvttemplate.ecore#/ http:///qvtbase.ecore#/ http:///emof.ecore#/ http:///qvtrelation.ecore#/\"/\u003e\n   \u003cmodelParameter xmi:id\u003d\"e9\" name\u003d\"core\"\n                   usedPackage\u003d\"http:///qvtcore.ecore#/ http:///emof.ecore#/\"/\u003e\n   \u003crule xsi:type\u003d\"qvtrelation:Relation\" xmi:id\u003d\"e2\" name\u003d\"RelationToTraceclass\"\n         isTopLevel\u003d\"true\"\u003e\n      \u003cdomain xsi:type\u003d\"qvtrelation:RelationDomain\" xmi:id\u003d\"e7\" name\u003d\"relations\"\n              typedModel\u003d\"#e4\"\u003e\n         \u003cpattern xsi:type\u003d\"qvtrelation:DomainPattern\"\u003e\n            \u003cpredicate\u003e\n               \u003cconditionExpression xsi:type\u003d\"qvttemplate:ObjectTemplateExp\"\n                                    referredClass\u003d\"emof:Class http:///qvtrelation.ecore#//RelationDomain\"\n                                    bindsTo\u003d\"#e36\"/\u003e\n\nfor which all xmlns prefixes are registered, the xsi:type fields are correctly interpreted by the Sample Ecore Editor, and (in the last element) bindsTo is followed but referredClass is not - it is shown as blank in the Properties View.",
    "Ed,\n\nI can\u0027t reproduce a specific problem with just an incomplete snippet.  There are any number reasons a proxy may fail to resolve none of which would indicate a bug in the framework itself. How about reopening if you can provide a failing example in the form of a JUnit or a project with a main?",
    "Created an attachment (id\u003d43420)\nFile that displays poorly in Sample Ecore Editor\n\nThe attached demonstrates the problem.\nThe requisite registered packages may all be found in the standalone plug-in in CVS at\n\norg.eclipse.gmt/umlx/org.eclipse.gmt.umlx.qvt\n\non\n\n/home/technology",
    "I\u0027m not sure how references to http:///qvtrelation.ecore are supposed to resolve.  I wouldn\u0027t expect them to just work without some setup.  Given how busy our tiny little group is, we need you to make it easy to reproduce the problem.  I doubt there is any serious problem in the framework, so that means the problem is likely in the  setup so I need that setup to be provided as something as something I can import onto my machine with the least amount of work...",
    "\"The requisite registered packages may all be found in the standalone plug-in in\nCVS at\n\norg.eclipse.gmt/umlx/org.eclipse.gmt.umlx.qvt\n\non\n\n/home/technology\"\n\nThis plug-in is just a genmodel of its model/qvt.ecore and model/qvt.genmodel. It registers an 8 package, 8 URI model. (The truncated URI is truncated by OMG!)\n\nSo you should be able to:\n    import project from CVS\n    run up a nested Eclipse\n    (verify that a Sample Ecore Editor Load Resource... can see http:///qvtrelation.ecore)\n    register the Sample Ecore Editor as the preferred editor for *.qvtrelation\n    open the attached file: qvtr2qvtc.qvtrelation with the Sample Ecore Editor or\n    rename it to xxx.ecore and open it.\n\nOpen Top Level Resource\n Open Relational Transformation\n  Open Relation RelationToTraceclass\n   Open Relation Domain\n    Open Domain\n     Open (first) Predicate\n      Select Object Template Exp\n\n... bindsTo is resolved\n... referredClass is not\n\nin the Properties View\n\nIf instead of Open Relation RelationToTraceclass you select a Typed Model an\n\njava.lang.ArrayStoreException\n\tat org.eclipse.emf.common.util.BasicEList.assign(BasicEList.java:188)\n\tat org.eclipse.emf.ecore.util.EcoreEList.resolve(EcoreEList.java:156)\n\tat org.eclipse.emf.ecore.util.EObjectResolvingEList.resolve(EObjectResolvingEList.java:58)\n\tat org.eclipse.emf.common.util.BasicEList.get(BasicEList.java:514)\n\tat org.eclipse.emf.common.util.BasicEList$EIterator.next(BasicEList.java:1274)\n\tat org.eclipse.emf.edit.provider.AdapterFactoryItemDelegator.getText(AdapterFactoryItemDelegator.java:72)\n\tat org.eclipse.emf.edit.provider.ItemPropertyDescriptor$ItemDelegator.getText(ItemPropertyDescriptor.java:199)\n\tat org.eclipse.emf.edit.ui.provider.PropertyDescriptor$3.getText(PropertyDescriptor.java:124)\n\tat org.eclipse.ui.views.properties.PropertySheetEntry.getValueAsString(PropertySheetEntry.java:497)\n\tat org.eclipse.ui.views.properties.PropertySheetViewer.updateEntry(PropertySheetViewer.java:1298)\n\nresults!\n\n\n\n\n",
    "Ed,\n\nThis model\u0027s references what are assumed to be emof.Package instances\n\n   \u003cmodelParameter xmi:id\u003d\"e4\" name\u003d\"relations\"\n                   usedPackage\u003d\"http:///qvttemplate.ecore#/ http:///qvtbase.ecore#/ http:///emof.ecore#/ http:///qvtrelation.ecore#/\"/\u003e\n\nBut in fact these reference generated packages such as qvtcore.impl.QvtcorePackageImpl which do not implement emof.Package.\n\nI\u0027m not sure if that means your model is wrong or if GMT needs to mix emof.Package into their generated packages, but from the EMF side of things, everthing appears to be working as expected so I\u0027ll return this as works for me.",
    "You\u0027re mostly right.\n\nIt\u0027s confusing because the model is a QVT transformation model referencing a QVT victim model, so QVT appears at two meta-levels.\n\nThis shows unpleasantly that it is not possible to use Ecore for this purpose. The references to the QVT meta-model must be to an emof rather than ecore. It doesn\u0027t work to use emof at one level and ecore at the other.\n\n?? I guess I\u0027d better do an ecore to emof transformation.\n\n?? This is a genmodel limitation. The meta-level crossing references in QVT in its ecore variant should be annotated so that references to emof:Package are generated as references to ecore:EPackage.\n\nBut, now that EMF is doing good error reporting,\n\na) the NPE cannot be right\nb) the blank properties should be more informative",
    "As per modelling newsgroup posting \"Is Ecore fit for EMOF meta-modelling\", the original models that caused the ArrayStoreException were erroneous. However after correcting the models the ArrayStoreException persists.\n\nThe ArrayStoreException can be fixed by providing an ability to register a dynamic package, which makes EMF tools useful for modelling without the need to create any Java classes.\n\nRequiring Java class models to present an EMOF or ... or ... facade is a matter for considerable discussion and extension. Providing an ability for a model to be registered for access as itself seems eminently reasonable.\n\nThe following (all my own work, and done in my own time) supports this:\n\nTo RegistryReader add a class for dynamic read loading:\n\n  static class ResourceDescriptor extends PluginClassDescriptor implements EPackage.Descriptor\n  {\n\tprotected URI modelURI;\n    public ResourceDescriptor(IConfigurationElement element, String attributeName, URI modelURI)\n    {\n      super(element, attributeName);\n      this.modelURI \u003d modelURI;\n    }\n    \n    public Object createInstance()\n    {\n      throw new UnsupportedOperationException(getClass().getName() + \".\");\n    }\n\n    public EPackage getEPackage()\n    {\n    \tResourceSet resourceSet \u003d new ResourceSetImpl();  // FIXME ? is there a standard ResourceSet to use?\n    \tResource resource \u003d resourceSet.getResource(modelURI, true);\n    \tString packageString \u003d element.getAttribute(attributeName);\n    \tObject result \u003d resource.getEObject(packageString);\n    \treturn (EPackage)result;\n    }\n    \n    public EFactory getEFactory()\n    {\n      return null;\n    }\n  }\n\nTo GeneratedPackageRegistryReader add support for an alternate config element:\n\n  static final String TAG_RESOURCE \u003d \"resource\";\n  static final String ATT_MODEL \u003d \"model\";\n  static final String ATT_PACKAGE \u003d \"package\";\n\n...\n\n    else if (element.getName().equals(TAG_RESOURCE))\n    {\n      String model \u003d element.getAttribute(ATT_MODEL);\n      String packageURI \u003d element.getAttribute(ATT_URI);\n      if (model \u003d\u003d null)\n      {\n        logMissingAttribute(element, ATT_MODEL);\n      }\n      else if (packageURI \u003d\u003d null)\n      {\n        logMissingAttribute(element, ATT_URI);\n      }\n        else if (element.getAttribute(ATT_PACKAGE) \u003d\u003d null)\n      {\n        logMissingAttribute(element, ATT_PACKAGE);\n      }\n      else\n      {\n        URI modelURI \u003d URI.createURI(model);\n        if (modelURI.isRelative())\n        {\n          modelURI \u003d URI.createURI(\"platform:/plugin/\" + element.getDeclaringExtension().getContributor().getName() + \"/\" + model);\n        }\n        Object previous \u003d EPackage.Registry.INSTANCE.put(packageURI, new ResourceDescriptor(element, ATT_PACKAGE, modelURI));\n        if (previous instanceof PluginClassDescriptor)\n        {\n          PluginClassDescriptor descriptor \u003d (PluginClassDescriptor)previous;\n          EcorePlugin.INSTANCE.log\n              (\"Both \u0027\" + descriptor.element.getContributor().getName() + \"\u0027 and \u0027\" + element.getContributor().getName() + \"\u0027 register a package for \u0027\" + packageURI + \"\u0027\");\n        }\n        // FIXME Fudge, need this to enable visibility to Sample Editor Load Resource...\n        if (ePackageNsURIToGenModelLocationMap !\u003d null)\n        {\n          ePackageNsURIToGenModelLocationMap.put(packageURI, modelURI); // FIXME not a genmodel!\n        }\n\nand to generated_package.exsd, add the new config element:\n\n\n   \u003celement name\u003d\"resource\"\u003e\n      \u003ccomplexType\u003e\n         \u003cattribute name\u003d\"uri\" type\u003d\"string\" use\u003d\"required\"\u003e\n            \u003cannotation\u003e\n               \u003cdocumentation\u003e\n                  A URI that uniquely identifies a model resource.\n               \u003c/documentation\u003e\n            \u003c/annotation\u003e\n         \u003c/attribute\u003e\n         \u003cattribute name\u003d\"model\" type\u003d\"anyURI\"\u003e\n            \u003cannotation\u003e\n               \u003cdocumentation\u003e\n                  An absolute or plugin relative URI the model resource containing the package.\n               \u003c/documentation\u003e\n            \u003c/annotation\u003e\n         \u003c/attribute\u003e\n         \u003cattribute name\u003d\"package\" type\u003d\"string\" use\u003d\"required\"\u003e\n            \u003cannotation\u003e\n               \u003cdocumentation\u003e\n                  A fragment path to locate the package within its resource.\n               \u003c/documentation\u003e\n            \u003c/annotation\u003e\n         \u003c/attribute\u003e\n      \u003c/complexType\u003e\n   \u003c/element\u003e\n\nreferencing as:\n\n         \u003csequence\u003e\n            \u003celement ref\u003d\"package\" minOccurs\u003d\"0\" maxOccurs\u003d\"unbounded\"/\u003e\n            \u003celement ref\u003d\"resource\" minOccurs\u003d\"0\" maxOccurs\u003d\"unbounded\"/\u003e\n         \u003c/sequence\u003e\n\nThis done, references from EMOF models to the packages in registered EMOF models works. (Presumably this works for any representation that has Ecore\nreaders and writers.)\n\nThere is still an issue with references to classes etc. Still investigating, may be my fault, may be another form of bug 146305.\n",
    "Ed,\n\nI\u0027ll reopen this as an enhancement request to support the static registration of dynamic package.  Perhaps we should use a new extension point since generated_package seems an inaccurate characterization.  I\u0027m thinking too about how best to ensure that a resource containing packages with subpackages would be supported. Maybe the registration for the resource should include a list of all the nsURIs (though typically there will be just one).  And maybe we don\u0027t need the fragment path for the package since we can look for the one with the matching nsURI.",
    "I thought generated_package was indeed being stretched but changed my mind.\n\nThe package is generated by something; few people type XML manually. In the case of ATL, they like KM3 (Kernel Meta-Model Model) which is a very lightweight text format, very similar to Ecore. So yes they still generate the Ecore package, but since they like to be neutral, I might now encourage them to\nuse EMOF rather than Ecore for non-Java models.\n\nI think single or multiple packages per model file is a user option. If there are multiples, then I think each needs its own entry (hence the fragment path). If the nsURI is held sacred then both \u0027uri\u0027 and \u0027package\u0027 elements are redundant. All nsURI in the \u0027model\u0027 get registered. Ah, but my ATL friends\ndon\u0027t like putting EMF-specific bits in their models, so they might prefer the\nability to apply the URI from outside. A neutral EMOF file plus a plugin.xml\ngives a registered package - fantastic.\n\nAnyway creation of another extension point rather than a syntax variant of the existing one is probably more rather than less confusing.\n\n(I don\u0027t hold any of my detailed implementation sacred, it\u0027s just a demonstration of principle, with a few FIXMEs to encourage you to review a couple of dubious decisions. Christian Damus already has a contribution questionnaire that should combine with my earlier statement to cover legal stupidities.)\n\nIf you can get this into 2.2.0, that will remove a major obstacle to more generic EMF use.\n\nProvision of a browser, and dynamic registration can easily be added post 2.2.0 just so long as the extension is in first.",
    "Ed,\n\nFeature enhancement work for 2.2 during the RC phase we are in with release just three weeks away is dubious.  An extension point like this could be implemented outside of the Ecore plugin for anyone needing this sooner rather than later.\n\nI should note this bugzilla too that dynamic packages should probably be made available in the Ecore Editor Browse Registered Packages... (re https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d146377) since there will (I assume?) never be a .genmodel available for them.  ",
    "Yes it could be a separate plug-in but not quite as elegantly, since it weould have to rely on processing its extension at Eclipse start up rather than EMF startup.\n\nI guess there could be genmodels. Just because models can be used in non-Java style shouldn\u0027t preclude a more optimised installation for stable models. Definite bug in my schema, driven by my fudge around 146377.\n\nIn fact it could be very useful to merge the two forms of registration allowing a model as well as genModel for a Java package. Because (bug 140940), it is pretty stupid to have to generate e.g. Ecore.ecore from its Java class model for XSLT usage just because there is no registration of the original model location.\n\nA registered model\n    may have a Java implementing class\n    may have an Ecore readable model file\n    must have one of the above",
    "Good point about the registration issue.  One \"trick\" to use here would be to use the package_registry_implementation extension point to specify an empty derived EPackageRegistryImpl in another plugin.  This would force that plugin to start when the registry is first used and would allow that plugin to process extension points related to populating the registry.  Unfortunately I don\u0027t think I can justify doing this feature work this late in the development cycle...",
    "Your trick doesn\u0027t really work.\n\npackage_registry_implementation is an at most one usage, so it should be left to final OEM suppliers, not normal plug-ins, certainly not a \u0027bug\u0027-fix.",
    "Yes, it\u0027s far from ideal and perhaps worse because it could fail due to conflict, but potentially a workaround for an EMOF provider plugin.\n\nIs it okay to address this at the start of the next development cycle?",
    "Disappointing, but it\u0027s not for me to set your priorities.\n\nSince the API \u0027change\u0027 is fully upward compatible and it provides a very basic utility useful to many new generation modeling projects, it would be nice if you could squeeze it in. 3.2.1 is a fair way away, and many users don\u0027t really expect more functionality till 3.3 and OEMs lag further.\n\nI may be the first to stress EMOF, but if a very transformation-based MDA is really going to happen on Eclipse then I think it\u0027s going to use EMOF.",
    "New development work that will require new features is probably best done against the development stream so that issues can be addressed on a weekly basis as they arise so we\u0027ll defer action on this until the next cycle.",
    "Created an attachment (id\u003d44162)\nA patch similar to the changes described in this bugzilla.\n\n"
  ],
  "commentCreationDates": [
    "2006-06-04T16:36:43+02:00",
    "2006-06-04T18:09:09+02:00",
    "2006-06-04T18:21:22+02:00",
    "2006-06-04T18:37:06+02:00",
    "2006-06-04T18:56:14+02:00",
    "2006-06-05T14:28:09+02:00",
    "2006-06-06T09:02:08+02:00",
    "2006-06-10T12:51:02+02:00",
    "2006-06-10T15:10:33+02:00",
    "2006-06-10T15:39:43+02:00",
    "2006-06-10T15:54:34+02:00",
    "2006-06-10T16:39:54+02:00",
    "2006-06-10T17:03:48+02:00",
    "2006-06-10T17:10:59+02:00",
    "2006-06-10T17:30:26+02:00",
    "2006-06-10T17:42:30+02:00",
    "2006-06-10T19:48:49+02:00",
    "2006-06-12T19:32:56+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayStoreException",
      "elements": [
        {
          "method": "org.eclipse.emf.common.util.BasicEList.assign",
          "source": "BasicEList.java:188"
        },
        {
          "method": "org.eclipse.emf.ecore.util.EcoreEList.resolve",
          "source": "EcoreEList.java:156"
        },
        {
          "method": "org.eclipse.emf.ecore.util.EObjectResolvingEList.resolve",
          "source": "EObjectResolvingEList.java:58"
        },
        {
          "method": "org.eclipse.emf.common.util.BasicEList.get",
          "source": "BasicEList.java:514"
        },
        {
          "method": "org.eclipse.emf.common.util.BasicEList$EIterator.next",
          "source": "BasicEList.java:1274"
        },
        {
          "method": "org.eclipse.emf.edit.provider.AdapterFactoryItemDelegator.getText",
          "source": "AdapterFactoryItemDelegator.java:72"
        },
        {
          "method": "org.eclipse.emf.edit.provider.ItemPropertyDescriptor$ItemDelegator.getText",
          "source": "ItemPropertyDescriptor.java:199"
        },
        {
          "method": "org.eclipse.emf.edit.ui.provider.PropertyDescriptor$3.getText",
          "source": "PropertyDescriptor.java:124"
        },
        {
          "method": "org.eclipse.ui.views.properties.PropertySheetEntry.getValueAsString",
          "source": "PropertySheetEntry.java:497"
        },
        {
          "method": "org.eclipse.ui.views.properties.PropertySheetViewer.updateEntry",
          "source": "PropertySheetViewer.java:1298"
        }
      ],
      "number": 0,
      "commentIndex": 4,
      "bugId": "145239",
      "date": "2006-06-04T18:56:14+02:00",
      "product": "EMF",
      "component": "Tools",
      "severity": "enhancement"
    }
  ],
  "groupId": "145239",
  "bugId": "145239",
  "date": "2006-06-04T16:36:43+02:00",
  "product": "EMF",
  "component": "Tools",
  "severity": "enhancement"
}