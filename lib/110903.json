{
  "comments": [
    "Summary\n-------\nLaunchClientJob hangs with the following exception:\njava.lang.NullPointerException\n    at\norg.eclipse.wst.server.core.internal.DependantJob.shouldRun(DependantJob.java:40)\n    at org.eclipse.core.internal.jobs.JobManager.startJob(JobManager.java:1025)\n    at org.eclipse.core.internal.jobs.WorkerPool.startJob(WorkerPool.java:199)\n    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:69)\n\nThe problem occurs easily when RunOnServer is run the first time. But, not\neverytime. My evaluation suggests that it can occurs in other situation.\n\n\n\nEvaluation\n----------\nRunOnServer action trigger 3 jobs to be scheduled immediately: StartServerTask\n(S), PublishTask (P), and LaunchClientTask (C).\n\nAll 3 tasks having conflicting SchedulingRule on a common IServer, so they will\nnot be run at the same time. \n\nHowever, in additional to the common IServer rule, P also has ISehedulingRule\nthat lock the Workspace root.\n\nSo, when S is finished, another periodical task O might running, and blocking P. \n\nSo, task L is let run, which is unexpected because L shouldn\u0027t be run until P is\ncompleted. \n\nAnd, it is why PublishTask.getStatus() return null.\n\n\nSolutions\n---------\nThe easiest is to add IScheduleRule to LaunchClientTask to conflict with IServer\nand WorkspaceRoot just like PublishTask. \n\nIn general, the Job/JobManager does behave in expected way that the first task\ngot schedule will be run first. That solution should be sufficient. The downside\nis that we will lock the workspace for longer time. \n\nWhich is ok, because LaunchClientTask is relatively short compare with PublishTask.",
    "Created an attachment (id\u003d27605)\nPatch that add ISchedulingRule to lock the workspace to match PublishTask\n",
    "A similar bug was opened earlier.\n   https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d105477",
    "Hi,\nThe underlying problem here is that scheduling all of the jobs at once allows\nthem to run out of order if their locks are different or the Job scheduler ever\nchanges. Changing every job to have the same lock isn\u0027t a good solution - at the\nminimum the patch would have to be expanded to include the StartServerJob to\ncover other scenarios, but this would mean that we now block the workspace\nduring server startup. Even if servers start fairly quickly, users would not be\nhappy about being unable to save editors during this time too.\n\nSince the root of the problem is scheduling all the jobs at once, I threw out my\nnifty DependantJob class and replaced it with a ChainedJob. Instead of deciding\nwhether a job can be run based on the result of the previous job, we can delay\nscheduling the next job until the previous has completed successfully. This\navoids the whole locking issue and avoids scheduling jobs that may never run.\n\nThe fix has been dropped to HEAD and will be included in this week\u0027s I-build.",
    "\"Instead of deciding whether a job can be run based on the result of the\nprevious job, we can delay scheduling the next job until the previous has\ncompleted successfully.\"\n\nI think it is a good and complete solution.",
    "This change is a bulk update of all _un_targeted, fixed, resolved bugs upon release of M5. This particular bug _might_ have been fixed earlier than M5. (Feel free to correct). \n\n",
    "Verified that it is fixed. Lot of test was done on this.",
    "Closing old jobs."
  ],
  "commentCreationDates": [
    "2005-09-28T08:24:51+02:00",
    "2005-09-28T08:27:41+02:00",
    "2005-09-28T08:55:01+02:00",
    "2005-10-04T15:47:43+02:00",
    "2005-10-04T23:18:00+02:00",
    "2006-03-04T06:04:15+01:00",
    "2006-06-26T23:56:24+02:00",
    "2006-11-21T19:42:54+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.wst.server.core.internal.DependantJob.shouldRun",
          "source": "DependantJob.java:40"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.startJob",
          "source": "JobManager.java:1025"
        },
        {
          "method": "org.eclipse.core.internal.jobs.WorkerPool.startJob",
          "source": "WorkerPool.java:199"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:69"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "110903",
      "date": "2005-09-28T08:24:51+02:00",
      "product": "Web Tools",
      "component": "wst.server",
      "severity": "blocker"
    }
  ],
  "groupId": "110903",
  "bugId": "110903",
  "date": "2005-09-28T08:24:51+02:00",
  "product": "Web Tools",
  "component": "wst.server",
  "severity": "blocker"
}