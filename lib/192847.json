{
  "comments": [
    "Automation test SequentWorkload_5 crashes on Linux.\n\nHere is test log:\n\nSTDERR start\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d BEGIN DUMP \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nJRockit dump produced after 0 days, 00:00:00 on Thu Jun 14 14:10:13 2007\n\nAdditional information is available in:\n \n/nfs/site/proj/iret/users/aan/testautomation/ws/org.eclipse.tptp.ac.testautomation/results_20070614_135401_pbtmrte006/org.eclipse.tptp.scenario.thread.SequentWorkload_5/standalone_thread_filter/jrockit.25696.dump\nNo snapshot file (core dump) will be created because core dumps have been\ndisabled. To enable core dumping, try \"ulimit -c unlimited\"\nbefore starting JRockit again.\nIf you see this dump, please open a support case with BEA and\nsupply as much information as you can on your system setup and\nthe program you were running. You can also search for solutions\nto your problem at http://forums.bea.com in\nthe forum jrockit.developer.interest.general.\n\nError Message: Illegal memory access. [54]\nSignal info  : si_signo\u003d11, si_code\u003d2 si_addr\u003d0x74726174\nVersion      : BEA JRockit(R)\nR27.2.0-131-78843-1.5.0_10-20070320-1511-linux-ia32\nGC Mode      : Garbage collection optimized for throughput\nGC Strategy  : Generational Parallel Mark \u0026 Sweep\n             : Current OC phase is: not running. YC is not running.\n             : mmHeap-\u003edata \u003d 0x40500000, mmHeap-\u003etop \u003d 0x44500000\n             : The nurserylist starts at 0x40500000 and ends at 0x42500000\n             : References are 32-bit.\nCPU          : Intel Pentium 4 (HT) SSE SSE2 NetBurst\nNumber CPUs  : 4\nTot Phys Mem : 2125373440 (2026 MB)\nOS version   : SUSE LINUX Enterprise Server 9 (i586)\nVERSION \u003d 9\nLinux version 2.6.5-7.97-smp (geeko@buildhost) (gcc version 3.3.3 (SuSE Linux))\n#1 SMP Fri Jul 2 14:21:59 UTC 2004 (i686)\nThread System: NPTL\nState        : JVM is running\nCommand Line :\n-agentlib:JPIBootLoader\u003dJPIAgent:server\u003dstandalone,file\u003dtrace.trcxml,filters\u003dfilters.txt;ThreadProf\n-Dsun.java.launcher\u003dSUN_STANDARD\norg.eclipse.tptp.scenario.thread.SequentWorkload 5\njava.home    :\n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10\nj.class.path :\n/nfs/pb/home/analexee/iret/users/aan/testautomation/ws/org.eclipse.tptp.ac.testautomation/bin\nj.lib.path   :\n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/jrockit:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/../lib/i386:/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler:/nfs/pb/home/analexee/iret/users/aan/testautomation/ws/org.eclipse.tptp.ac.testautomation/lib/linux_ia32:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/jrockit:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/../lib/i386::/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler:/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/bin\nJAVA_HOME    : \u003cnot set\u003e\n_JAVA_OPTIONS: \u003cnot set\u003e\nLD_LIBRARY_PATH:\n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/jrockit:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/../lib/i386:/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler:/nfs/pb/home/analexee/iret/users/aan/testautomation/ws/org.eclipse.tptp.ac.testautomation/lib/linux_ia32:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/jrockit:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386:/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/../lib/i386::/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler:/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/bin\nLD_ASSUME_KERNEL: \u003cnot set\u003e\nC Heap       : Good; no memory allocations have failed\nStackOverFlow: 0 StackOverFlowErrors have occured\nOutOfMemory  : 0 OutOfMemoryErrors have occured\n\nRegisters (from ThreadContext: 0x817ee654 / OS context: 0x817ee750):\n   eax \u003d 00000000    ecx \u003d ffffffff    edx \u003d 74726174    ebx \u003d 817eea80 \n   esp \u003d 817eea40    ebp \u003d 817eea58    esi \u003d 74726174    edi \u003d 74726174 \n    es \u003d 0000007b     cs \u003d 00000073     ss \u003d 0000007b     ds \u003d 0000007b \n    fs \u003d 00000000     gs \u003d 00000033 \n   eip \u003d 812abcf4 eflags \u003d 00000246 \n\nStack:\n(* marks the word pointed to by the stack pointer)\n817eea40: 00000400* 8059fe9b  00000000  817eea80  812b8a92  812bea64  \n817eea58: 817eeaa8  812ac774  812bea64  74726174  00000008  00000008  \n817eea70: 817eea78  40039eb0  817eeb48  00000000  81565e10  00000009  \n817eea88: 00000400  00000000  817eeb48  00000000  817eeac8  81565dd0  \n\nCode:\n(* marks the word pointed to by the instruction pointer)\n812abcc4: 458b0006  f0558b10  458b1089  f4658df0  5d5f5e5b  00768dc3  \n812abcdc: 57e58955  ec835356  0c758b0c  c031f289  ffffb9fc  d789ffff  \n812abcf4: d1f7aef2* fe0e7c80  8005753b  30755b3e  d789f289  b9c031fc  \n812abd0c: ffffffff  ec83aef2  51d1f70c  e201c3e8  084589be  830c7589  \n\nLoaded modules:\n(* denotes the module causing the exception)\n08048000-08056fd3 \n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/bin/java\nffffe000-ffffe5fb \n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/bin/java\n40033000-4003f883  /lib/tls/libpthread.so.0\n40043000-4006382a  /lib/tls/libm.so.6\n40065000-40066ec0  /lib/libdl.so.2\n40068000-40170fef  /lib/tls/libc.so.6\n40000000-40015803  /lib/ld-linux.so.2\n4017d000-4041c207 \n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/jrockit/libjvm.so\n404b2000-404b82db  /lib/tls/librt.so.1\n8055e000-80564ae1 \n/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler/libJPIBootLoader.so\n80567000-8056fa57 \n/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler/libMartiniOSA.so\n80572000-805a47d5 \n/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler/libJPI.so\n812a1000-812b9157\n*/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler/libJPIAgent.so\n812da000-812dbd1b  /lib/libuuid.so.1\n812dd000-812f5275 \n/nfs/pb/home/analexee/iret/users/aan/testautomation/tptp/tptpdc/linux_ia32/plugins/org.eclipse.tptp.javaprofiler/libThreadProf.so\n812fb000-813057db \n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/libverify.so\n81307000-81327217 \n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/libjava.so\n81345000-81356281  /lib/libnsl.so.1\n8139a000-8139ff13 \n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/native_threads/libhpi.so\n816c8000-816d64c4 \n/nfs/site/proj/iret/java/linux/ia32/bea/jrockit-R27.2.0-jre1.5.0_10/lib/i386/libzip.so\n\n\n\"level_5_002\" id\u003d11 idx\u003d0x3c tid\u003d25730 lastJavaFrame\u003d0x817eed9c\n\nStack 0: start\u003d0x817cd000, end\u003d0x817f1000, guards\u003d0x817d2000 (ok),\nforbidden\u003d0x817d0000\nThread Stack Trace:\n    at\nConvertClassName__Q37Martini8JPIAgent9CPrintXMLPCc+24(atexit.c)@0x812abcf4\n    at\nprintNewClassElement__Q37Martini8JPIAgent9CPrintXMLUxPQ37Martini3MPI10SClassInfo+64(atexit.c)@0x812ac774\n    at\nPrintClassDefElement__FPQ37Martini8JPIAgent6EC_EnvUxPQ37Martini3MPI10SClassInfo+27(atexit.c)@0x812a7ed7\n    at CheckClassId__Q37Martini8BaseProf8CProfEnvUx+186(atexit.c)@0x812e40ba\n    at CheckObjectId__Q37Martini8BaseProf8CProfEnvUxUx+230(atexit.c)@0x812e41ba\n    at\nHandleEvent__Q37Martini10ThreadProf27CContendedMonitorEnterEventRQ37Martini3MPI31SContendedMonitorEnterEventData+78(atexit.c)@0x812e94de\n    at\nNotify__Q37Martini3JPI37CContendedMonitorEnterEventDispatcherPQ37Martini3JPI7SEmDataPQ37Martini3MPI14IEventObserverUi+133(atexit.c)@0x805862c9\n    at\nNotifyObservers__Q37Martini3JPI16CEventDispatcherPQ37Martini3JPI7SEmData+81(atexit.c)@0x80585c01\n    at\nNotifyMpiEvent__Q37Martini3JPI13CEventManagerUiPQ37Martini3JPI7SEmData+46(atexit.c)@0x8058a6f2\n    at MonitorContendedEnterHandler+114(atexit.c)@0x8059319a\n    at jvmtiMonitorEnterEvent+249()@0x4029b939\n    -- Java stack --\n    at jrockit/vm/Locks.profMonitorContendedEnter(Ljava/lang/Object;)V(Native\nMethod)\n    at\njrockit/vm/Locks.monitorEnterSecondStage(Ljava/lang/Object;I)Ljava/lang/Object;(Unknown\nSource)\n    at\njrockit/vm/Locks.monitorEnter(Ljava/lang/Object;)Ljava/lang/Object;(Unknown\nSource)\n    at java/lang/Thread.nextThreadID(Thread.java:187)\n    at java/lang/Thread.init(Thread.java:342)\n    at java/lang/Thread.\u003cinit\u003e(Thread.java:429)\n    at\norg/eclipse/tptp/scenario/thread/WorkloadLauncher.launch(WorkloadLauncher.java:27)\n    at\norg/eclipse/tptp/scenario/thread/SequentWorkload.run(SequentWorkload.java:54)\n    at java/lang/Thread.run(Thread.java:595)\n    at jrockit/vm/RNI.c2java(IIII)V(Native Method)\n    -- end of trace\n\nAdditional information is available in:\n \n/nfs/site/proj/iret/users/aan/testautomation/ws/org.eclipse.tptp.ac.testautomation/results_20070614_135401_pbtmrte006/org.eclipse.tptp.scenario.thread.SequentWorkload_5/standalone_thread_filter/jrockit.25696.dump\nNo snapshot file (core dump) will be created because core dumps have been\ndisabled. To enable core dumping, try \"ulimit -c unlimited\"\nbefore starting JRockit again.\nIf you see this dump, please open a support case with BEA and\nsupply as much information as you can on your system setup and\nthe program you were running. You can also search for solutions\nto your problem at http://forums.bea.com in\nthe forum jrockit.developer.interest.general.\nExtended, platform specific info:\nlibc release: 2.3.3-stable\nElf headers:\nlibc       ehdrs: EI: 7f454c46010101000000000000000000 ET: 3 EM: 3 V: 1 ENTRY:\n00015340 PHOFF: 00000034 SHOFF: 00119834 EF: 0x0 HS: 52 PS: 32 PHN; 10 SS: 40\nSHN: 65 STIDX: 62\nlibpthread ehdrs: EI: 7f454c46010101000000000000000000 ET: 3 EM: 3 V: 1 ENTRY:\n000049f0 PHOFF: 00000034 SHOFF: 0000f1cc EF: 0x0 HS: 52 PS: 32 PHN; 9 SS: 40\nSHN: 34 STIDX: 31\nlibjvm     ehdrs: EI: 7f454c46010101000000000000000000 ET: 3 EM: 3 V: 1 ENTRY:\n00057470 PHOFF: 00000034 SHOFF: 002dfe00 EF: 0x0 HS: 52 PS: 32 PHN; 4 SS: 40\nSHN: 19 STIDX: 16\n\u003d\u003d\u003d\u003d\u003d END DUMP \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nSTDERR finish\n\n\nERROR:\njava.io.IOException: Process terminated abnormally (exit code \u003d 134).\n        at\norg.eclipse.tptp.ac.testautomation.junits.LocalProcessLauncher.launch(TIProfilingBase.java:1062)\n        at\norg.eclipse.tptp.ac.testautomation.junits.TIProfilingBase.executeLocalProcess(TIProfilingBase.java:562)\n        at\norg.eclipse.tptp.ac.testautomation.junits.TIProfilingBase.launchTest(TIProfilingBase.java:452)\n        at\norg.eclipse.tptp.ac.testautomation.junits.TIProfilingBase.launchTest(TIProfilingBase.java:298)\n        at\norg.eclipse.tptp.ac.testautomation.junits.ThreadStandaloneProfiling.launchTest(ThreadStandaloneProfiling.java:72)\n        at\norg.eclipse.tptp.ac.testautomation.junits.ThreadStandaloneProfiling.tp_threadSequentWorkload_5_F(ThreadStandaloneProfiling.java:180)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at junit.framework.TestCase.runTest(TestCase.java:154)\n        at junit.framework.TestCase.runBare(TestCase.java:127)\n        at junit.framework.TestResult$1.protect(TestResult.java:106)\n        at junit.framework.TestResult.runProtected(TestResult.java:124)\n        at junit.framework.TestResult.run(TestResult.java:109)\n        at junit.framework.TestCase.run(TestCase.java:118)\n        at junit.framework.TestSuite.runTest(TestSuite.java:208)\n        at junit.framework.TestSuite.run(TestSuite.java:203)\n        at junit.framework.TestSuite.runTest(TestSuite.java:208)\n        at junit.framework.TestSuite.run(TestSuite.java:203)\n        at junit.textui.TestRunner.doRun(TestRunner.java:116)\n        at junit.textui.TestRunner.doRun(TestRunner.java:109)\n        at junit.textui.TestRunner.run(TestRunner.java:72)\n        at\norg.eclipse.tptp.ac.testautomation.junits.AllStandaloneProfiling.main(AllStandaloneProfiling.java:29)",
    "I\u0027m not able to reproduce the bug with the latest driver TPTP-4.4.0-200706140100.",
    "This is a Martini bug. Can be reproduced with the SequentWorkload tests (usually with SequentWorkload_10).\n\nRoot cause analysis: in some situations, the GetObjectInfo API may fail for object ids returned in one of the \"monitor\" event handlers. This happens when the object id was created \"on the fly\" by JPI when querying JVMTI for information of related object, and was not stored in the JPI \"object database\". \n\nChanging bug summary to better describe the problem, and reassigning to myself.\n\nFix should be considered by PMC for 4.4.0.1.\n",
    "This is not a Linux-specific issue. It can be reproduced on Windows multi-core platforms as well.",
    "Created an attachment (id\u003d72284)\nA patch that resolves the bug. Need some clean-up (remove code duplications in CObjectInfoManager)\n\n",
    "Asaf, who can review your patch ?\n\n ",
    "(In reply to comment #5)\nI am not sure... this is a Martini-internal issue and currently I am the sole owner of this code. Guru - any ideas?",
    "Created an attachment (id\u003d72573)\nA cleaned-up version of the previous patch.\n\n",
    "Asaf - does the patch resolve the issue?",
    "(In reply to comment #8)\nThe patch resolves the issue on Windows. I asked Stanislav and Alex to verify the patch on their test environment.\n",
    "I have verified it on Linux and this issue is resolved.\n",
    "Lowering the priority on this defect.\nWe are addressing P1\u0027s for 4.4.0.1",
    "Created an attachment (id\u003d73108)\nUpdated binaries for 32 bit Windows and Linux\n\n",
    "(In reply to comment #12)\n\u003e Created an attachment (id\u003d73108) [details]\n\u003e Updated binaries for 32 bit Windows and Linux\n\u003e \n\nTested configuration on multi-core machines: \n\nXP: \n-IBM JRE 1.5.0 SR4a: Pass\n-Sun JRE 1.5.0 06: Fail\n\n[scenario] SequentWorkload started\n[Error: GetThreadInfo failed: -2147483648]\n\n-Sun JRE 1.5.0 12-b04: Fail\n\n[scenario] SequentWorkload started\n[Error: GetThreadInfo failed: -2147483645]\n\nSteps:\n1. Place JPI.dll in \u003cAC HOME\u003e\\plugins\\org.eclipse.tptp.javaprofiler,\noverriding the existing version you have there\n\n2. set JAVA_PROFILER_HOME to point to this directory\n\n3. Add this directory to the path\n\n4. Run the test:\n\njava -classpath . -agentlib:JPIBootLoader\u003dJPIAgent:server\u003dstandalone;ThreadProf org.eclipse.tptp.scenario.thread.SequentWorkload 10",
    "Linux: \n-IBM JRE 1.5.0 SR4: Pass\n-IBM Sun 1.5.0 11-b03: Pass",
    "Paul,\n\nCan you please enable logging, repeat the failed tests and attach the created log file?\n\nTo enable logging, define the following environment variables:\nMARTINI_LOGGER_DIRECTORY\u003d\u003can existing directory\u003e\nMARITNI_LOGGER_LOG_LEVEL\u003d5\n\nIf the JVM crashes, can you also attach the created dump file?\n\nThanks,\nAsaf\n",
    "Vista: \n-IBM JRE 1.5.0 SR4: Pass\n-IBM Sun 1.5.0 12-b04: Fail\n\n[scenario] SequentWorkload started\n[Error: GetThreadInfo failed: -2147483645]\n...\njava.lang.OutOfMemoryError\n",
    "(In reply to comment #15)\n\nUsing the Sun JRE 1.5.0 12-b04, the memory consumption for the java.exe process grows/shrinks  (~500 MB - ~1.3 GB) after the process starts:\n\n[scenario] SequentWorkload started\n\nbefore eventually running out of memory:\n\nException java.lang.OutOfMemoryError: requested 152 bytes for CHeapObj-new. Out\nof swap space?",
    "Created an attachment (id\u003d73151)\nLog file.\n\n",
    "Triaging 4.4.0.2 candidate defects for Joanna.  \n\nThis is a 4.4.0.2 candidate defect since deferred from 4.4.0.1 and a patch is attached.\n\nAsaf, please target to 4.4.0.2 when the field is available.\n",
    "Since we\u0027ve lost Slava, I\u0027ll make a go at reviewing this...  Has Alexander started reviewing these yet?\n\nMinor -- Several places (DataManager.cpp, ObjectInfoManager.cpp) you cast the ObjectID to a U32 for printing on failure.  It is a U64 though.\n\nQuestionable -- Do you need a detachCurrentThreadClause in DataManager.cpp patch?  It looks like you\u0027re adding an exit path that does not detach...  I\u0027d think you\u0027d need some sort of conditional detatch before the return...\n\nMinor -- not really related directly to patch...  Several places in ObjectInfoManager.cpp refer to TId instead of MPI::TId.  Is this intentional?\n\nMinor -- Does *pNewObjectId need to be set to 0 if tag is 0 in NewObject()?\n\nQuestionable -- I am a bit concerned about the lack of freeing of weak reference in SaveObjectInDb.  For thread objects, I don\u0027t have a problem but for monitors, this concerns me a bit more.  Perhaps a count of this leaked memory would be valuable?\n\nAnnotation -- If the move of setting *ptag\u003d(jlong) after m_pcsObjectManager-\u003eEnter() is necessary can it be commented?\n\nMajor -- I\u0027m concerned that Paul says that this doesn\u0027t fix Windows w/ Sun VM...\n\nMinor -- If SaveObjectInDb() always returns MRTE_RESULT_OKAY, why not void?\n\nQuestion -- I\u0027m not sure how multithreaded this code is...  I didn\u0027t go check all the different use cases?  Should MapObjectIdToJniRef be before mapping the ObjectIDToTag?  Is it ever possible that another thread could grab the objectID from the tag before the current thread finishes setting the jni reference?  (Your comment about locks in the ObjectInfoManager makes me curious...\n\n\n\n",
    "Created an attachment (id\u003d74875)\nUpdated patch\n\n",
    "Chris, thank you for your extensive and constructive review.\n\nAttached is an updated patch for your review.\n\nSome comments:\n\n\u003e Minor -- Several places (DataManager.cpp, ObjectInfoManager.cpp) you cast the\n\u003e ObjectID to a U32 for printing on failure.  It is a U64 though.\n\nI am not aware of any U64 format specifier which works for both Windows and Linux. Therefore, I am including only the lower 32 bits of the id in the log.\n\n\u003e Questionable -- Do you need a detachCurrentThreadClause in DataManager.cpp\n\u003e patch?  It looks like you\u0027re adding an exit path that does not detach...  I\u0027d\n\u003e think you\u0027d need some sort of conditional detatch before the return...\n\nI am not sure I understand this comment. Can you refer me to the exact source line?\n\n\u003e Minor -- not really related directly to patch...  Several places in\n\u003e ObjectInfoManager.cpp refer to TId instead of MPI::TId.  Is this intentional?\n\nThe MPI namespace is imported into ObjectInfoManager.cpp. Therefore TId \u003d\u003d MPI::TId. I clean-up the code (see updated patch).\n\n\u003e Minor -- Does *pNewObjectId need to be set to 0 if tag is 0 in NewObject()?\n\nIf NewObject() fails, it returns an error. I added documentation to clarify that output variables are left untouched in case of a failure.\n\n\u003e Questionable -- I am a bit concerned about the lack of freeing of weak\n\u003e reference in SaveObjectInDb.  For thread objects, I don\u0027t have a problem but\n\u003e for monitors, this concerns me a bit more.  Perhaps a count of this leaked\n\u003e memory would be valuable?\n\nKnown issue. I share your concern. We\u0027ll have to address this eventually.\n\n\n\u003e Annotation -- If the move of setting *ptag\u003d(jlong) after\n\u003e m_pcsObjectManager-\u003eEnter() is necessary can it be commented?\n\nI have restructured function CreateTag() so that the output variables will be set only after all databases were updated.\n\n\u003e Major -- I\u0027m concerned that Paul says that this doesn\u0027t fix Windows w/ Sun\n\u003e VM...\n\nThe failures observed by Paul are not related to this bug. They are addressed by the patch to bug 192862.\n\n\u003e Minor -- If SaveObjectInDb() always returns MRTE_RESULT_OKAY, why not void?\n\nError handling can be added later. For now, we assume that the function will never fail (this assumption will break only when memory is exhausted). I prefer to keep the interface as-is.\n\n\u003e Question -- I\u0027m not sure how multithreaded this code is...  I didn\u0027t go check\n\u003e all the different use cases?  Should MapObjectIdToJniRef be before mapping the\n\u003e ObjectIDToTag?  Is it ever possible that another thread could grab the objectID\n\u003e from the tag before the current thread finishes setting the jni reference? \n\u003e (Your comment about locks in the ObjectInfoManager makes me curious...\n\nGood point. I believe that the restructuring of CreateTag() (as mentioned above) resolves this issue.\n\n",
    "Okay, I see how you\u0027ve updated CreateTag.  You avoid setting the external pointers until after creating the full database entry.  It might have just been paranoia but this looks better to me.\n\nIt sounds like you\u0027ve answered all but one of my questions at this point.  It would be good to have a separate defect (if one is not already opened) regarding this:\n\n\u003e\u003e Questionable -- I am a bit concerned about the lack of freeing of weak\n\u003e\u003e reference in SaveObjectInDb.  For thread objects, I don\u0027t have a problem but\n\u003e\u003e for monitors, this concerns me a bit more.  Perhaps a count of this leaked\n\u003e\u003e memory would be valuable?\n\n\u003e Known issue. I share your concern. We\u0027ll have to address this eventually.\n\nThere is no reason to hold up this patch because it is not actually creating THAT leak.\n\nOn the one last issue where you did not understand my comment... \n\n\u003e\u003e Questionable -- Do you need a detachCurrentThreadClause in DataManager.cpp\n\u003e\u003e patch?  It looks like you\u0027re adding an exit path that does not detach...  I\u0027d\n\u003e\u003e think you\u0027d need some sort of conditional detatch before the return...\n\n\u003e I am not sure I understand this comment. Can you refer me to the exact \n\u003e source line?\n\nIn DataManager.cpp, I\u0027m curious about line 351\n    TResult res \u003d m_pJavaInterface-\u003eAttachCurrentThread(\u0026pJNIEnv, \u0026bAttached);\nand line 387\n        m_pJavaInterface-\u003eDetachCurrentThread();\n\nIf I read the code you are inserting correctly at line 364, \n+\t\telse\n+\t\t{\n+\t\t\tMARTINI_INFORMATIVE1(\"CDataManager\", 0, false, \n+\t\t\t\t\"[GetObjectInfo] failed to get object info for object id %u\",\n+\t\t\t\t(U32)objectId);\n+\t\t\treturn MRTE_ERROR_FAIL;\n+\t\t}\n\nshould be something like\n+\t\telse\n+\t\t{\n+\t\t\tMARTINI_INFORMATIVE1(\"CDataManager\", 0, false, \n+\t\t\t\t\"[GetObjectInfo] failed to get object info for object id %u\",\n+\t\t\t\t(U32)objectId);\n+                   if (bAttached) { m_pJavaInterface-\u003eDetachCurrentThread(); }\n+\t\t\treturn MRTE_ERROR_FAIL;\n+\t\t}\n\nThx,\nChris",
    "\u003e \u003e\u003e Questionable -- I am a bit concerned about the lack of freeing of weak\n\u003e \u003e\u003e reference in SaveObjectInDb.  For thread objects, I don\u0027t have a problem but\n\u003e \u003e\u003e for monitors, this concerns me a bit more.  Perhaps a count of this leaked\n\u003e \u003e\u003e memory would be valuable?\n\u003e \n\u003e \u003e Known issue. I share your concern. We\u0027ll have to address this eventually.\n\u003e \n\u003e There is no reason to hold up this patch because it is not actually creating\n\u003e THAT leak.\n\nI\u0027ll open a new Bugzilla to address this.\n\n\u003e \n\u003e On the one last issue where you did not understand my comment... \n\u003e \n\u003e \u003e\u003e Questionable -- Do you need a detachCurrentThreadClause in DataManager.cpp\n\u003e \u003e\u003e patch?  It looks like you\u0027re adding an exit path that does not detach...  I\u0027d\n\u003e \u003e\u003e think you\u0027d need some sort of conditional detatch before the return...\n\nRight. Added \"detach\" for the new exit path. See updated patch.",
    "Created an attachment (id\u003d75003)\nUpdated patch\n\n",
    "Thats more like I expected. :-)  Looks good to me.\n\nthx,\n\nChris",
    "(From update of attachment 75003)\nPatch checked-in to HEAD (4.4.1) and to 4.4.0.2 branch",
    "fixed"
  ],
  "commentCreationDates": [
    "2007-06-15T13:59:55+02:00",
    "2007-06-15T16:31:24+02:00",
    "2007-06-24T14:29:59+02:00",
    "2007-06-24T14:31:55+02:00",
    "2007-06-24T15:01:01+02:00",
    "2007-06-26T16:29:11+02:00",
    "2007-06-27T08:34:37+02:00",
    "2007-06-27T12:05:52+02:00",
    "2007-06-27T17:41:23+02:00",
    "2007-06-28T10:23:42+02:00",
    "2007-06-29T14:14:59+02:00",
    "2007-06-29T20:18:54+02:00",
    "2007-07-05T14:49:50+02:00",
    "2007-07-05T19:30:43+02:00",
    "2007-07-05T20:14:09+02:00",
    "2007-07-05T20:28:35+02:00",
    "2007-07-05T20:53:32+02:00",
    "2007-07-05T21:06:45+02:00",
    "2007-07-05T21:07:25+02:00",
    "2007-07-16T15:06:12+02:00",
    "2007-07-24T00:09:24+02:00",
    "2007-07-29T19:33:20+02:00",
    "2007-07-29T19:46:40+02:00",
    "2007-07-30T19:03:07+02:00",
    "2007-07-31T09:31:15+02:00",
    "2007-07-31T09:34:03+02:00",
    "2007-07-31T18:25:26+02:00",
    "2007-08-01T13:57:48+02:00",
    "2007-08-01T13:58:28+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.IOException",
      "message": "Process terminated abnormally (exit code \u003d 134).",
      "elements": [
        {
          "method": "org.eclipse.tptp.ac.testautomation.junits.LocalProcessLauncher.launch",
          "source": "TIProfilingBase.java:1062"
        },
        {
          "method": "org.eclipse.tptp.ac.testautomation.junits.TIProfilingBase.executeLocalProcess",
          "source": "TIProfilingBase.java:562"
        },
        {
          "method": "org.eclipse.tptp.ac.testautomation.junits.TIProfilingBase.launchTest",
          "source": "TIProfilingBase.java:452"
        },
        {
          "method": "org.eclipse.tptp.ac.testautomation.junits.TIProfilingBase.launchTest",
          "source": "TIProfilingBase.java:298"
        },
        {
          "method": "org.eclipse.tptp.ac.testautomation.junits.ThreadStandaloneProfiling.launchTest",
          "source": "ThreadStandaloneProfiling.java:72"
        },
        {
          "method": "org.eclipse.tptp.ac.testautomation.junits.ThreadStandaloneProfiling.tp_threadSequentWorkload_5_F",
          "source": "ThreadStandaloneProfiling.java:180"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "junit.textui.TestRunner.doRun",
          "source": "TestRunner.java:116"
        },
        {
          "method": "junit.textui.TestRunner.doRun",
          "source": "TestRunner.java:109"
        },
        {
          "method": "junit.textui.TestRunner.run",
          "source": "TestRunner.java:72"
        },
        {
          "method": "org.eclipse.tptp.ac.testautomation.junits.AllStandaloneProfiling.main",
          "source": "AllStandaloneProfiling.java:29"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "192847",
      "date": "2007-06-15T13:59:55+02:00",
      "product": "TPTP Profiling",
      "component": "Platform.Agents.JVMTI",
      "severity": "major"
    }
  ],
  "groupId": "192847",
  "bugId": "192847",
  "date": "2007-06-15T13:59:55+02:00",
  "product": "TPTP Profiling",
  "component": "Platform.Agents.JVMTI",
  "severity": "major"
}