{
  "comments": [
    "I\u0027m attempting to use Eclispe (2.1 on Linux) with a rather large project I\nam working on.  The project directory is not too strange, it is the base of my\njava tree, and also contains subfolders with libraries, built class files, log\nfiles, a tomcat installation, etc.  \nAs the instructions indicate, I\u0027m starting with a 256M\nmaxheap size (if I don\u0027t, I get OutOfMemory errors).  I create a new\nproject by \"New Project\"-\u003e\"Java\", and enter my project\u0027s name, and the\nexisting directory as the location.  I then hit \"next\".\n\nThen, it processes for a very long time (10 - 20 minutes), and I\neventually get  the error \"Compilation unit name must end with .java\". \nI\u0027m not sure what this is all about, I haven\u0027t had a chance to configure\nany compilation units, even if I knew what they were!  So I am unable to\nmake my project, which is a shame.  That\u0027s why I categorized this as a\n\"blocker\".  If you run into this, there isn\u0027t anything you can do (that I know\nof, at least).\n\nI tried turning off the auto-build, but it had no effect.\n\nHere\u0027s the output (I truncated it, but this should be everything you need to know)\n\n!ENTRY org.eclipse.core.resources 4 566 Apr 02, 2003 14:07:32.353\n!MESSAGE An error occurred while traversing resources.\n!STACK 0\njava.lang.IllegalArgumentException: Compilation unit name must end with\njava.\n        at\norg.eclipse.jdt.internal.core.CompilationUnit.\u003cinit\u003e(CompilationUnit.java:48)\n        at\norg.eclipse.jdt.internal.core.PackageFragment.getCompilationUnit(PackageFragment.java:180)\n        at\norg.eclipse.jdt.internal.core.JavaModelManager.createCompilationUnitFrom(JavaModelManager.java:336)\n        at\norg.eclipse.jdt.core.JavaCore.createCompilationUnitFrom(JavaCore.java:828)\n       at\norg.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visitCompilationUnit(ClassPathDetector.java:210)\n        at\norg.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visit(ClassPathDetector.java:266)\n        at\norg.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:50)\n        at\norg.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:76)\n        at\norg.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:80)\n        at\norg.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:80)\n        at\norg.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:80)\n        at\norg.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:119)\n        at\norg.eclipse.core.internal.resources.Resource.accept(Resource.java:60)\n        at\norg.eclipse.jdt.internal.ui.wizards.ClassPathDetector.\u003cinit\u003e(ClassPathDetector.java:62)\n        at\norg.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.updateProject(NewProjectCreationWizardPage.java:124)\n        at\norg.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage$1.run(NewProjectCreationWizardPage.java:86)",
    "There is some code trying to guess your project classpath based on the existing \nfiles layout. This detection code seems to have a problem. It shouldn\u0027t take so \nlong, 10-20 minutes is not acceptable, plus it should succeed.\n\nFor now, you may resort to define a project in a separate directory than the \none containing your existing sources. Then import sources into this new \nproject, so as to workaround the detection code.\n\nMoving to JDT/UI who owns the detection code. JDT/Core should improve error \nmessages to surface irritants\u0027 names.",
    "Andrew, this is a known problem for 2.1. (see excerpt from the readme below).\nCan you please check if the existing source code contains a file named \"java\". \nIf so, it is a dup of bug 35614. Lowering severity, since this is not a \nblocker. A work around exists.\n\nForm the 2.1 readme file:\n\nProblems with files named \"java\"\n\nIf a Java project contains a file named \"java\", it will trigger an internal \nerror when it is classified (incorrectly) as a Java compilation unit. There \nare no problems with the string \"java\" occurs as a part of the name (e.g, \njavaRefs.txt) or as the file extension part of the name (e.g, A.java). The \nworkaround is to ensure that there are no files named \"java\" within a Java \nproject. (bug 35614)\n\n\n",
    "Yes, I have a \"java\" file in my root directory.  I\u0027ll try renaming it, then renaming it back after I create the project.  Sorry for not noticing the relevant part of the release notes.  Thanks for the help.  I\u0027m marking this as a duplicate of 35614.\n\n*** This bug has been marked as a duplicate of 35614 ***"
  ],
  "commentCreationDates": [
    "2003-04-03T01:33:29+02:00",
    "2003-04-03T08:55:36+02:00",
    "2003-04-03T09:50:57+02:00",
    "2003-04-04T00:32:52+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Compilation unit name must end with java.",
      "elements": [
        {
          "method": "org.eclipse.jdt.internal.core.CompilationUnit.\u003cinit\u003e",
          "source": "CompilationUnit.java:48"
        },
        {
          "method": "org.eclipse.jdt.internal.core.PackageFragment.getCompilationUnit",
          "source": "PackageFragment.java:180"
        },
        {
          "method": "org.eclipse.jdt.internal.core.JavaModelManager.createCompilationUnitFrom",
          "source": "JavaModelManager.java:336"
        },
        {
          "method": "org.eclipse.jdt.core.JavaCore.createCompilationUnitFrom",
          "source": "JavaCore.java:828"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visitCompilationUnit",
          "source": "ClassPathDetector.java:210"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visit",
          "source": "ClassPathDetector.java:266"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource$1.visitElement",
          "source": "Resource.java:50"
        },
        {
          "method": "org.eclipse.core.internal.watson.ElementTreeIterator.doIteration",
          "source": "ElementTreeIterator.java:76"
        },
        {
          "method": "org.eclipse.core.internal.watson.ElementTreeIterator.doIteration",
          "source": "ElementTreeIterator.java:80"
        },
        {
          "method": "org.eclipse.core.internal.watson.ElementTreeIterator.doIteration",
          "source": "ElementTreeIterator.java:80"
        },
        {
          "method": "org.eclipse.core.internal.watson.ElementTreeIterator.doIteration",
          "source": "ElementTreeIterator.java:80"
        },
        {
          "method": "org.eclipse.core.internal.watson.ElementTreeIterator.iterate",
          "source": "ElementTreeIterator.java:119"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.accept",
          "source": "Resource.java:60"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.\u003cinit\u003e",
          "source": "ClassPathDetector.java:62"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.updateProject",
          "source": "NewProjectCreationWizardPage.java:124"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage$1.run",
          "source": "NewProjectCreationWizardPage.java:86"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "36001",
      "duplicateId": "35614",
      "date": "2003-04-03T01:33:29+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "major"
    }
  ],
  "groupId": "35614",
  "bugId": "36001",
  "duplicateId": "35614",
  "date": "2003-04-03T01:33:29+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "major"
}