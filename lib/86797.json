{
  "comments": [
    "Run-time Workbench launch configurations are very useful for debugging plugins. \nAnother important aspect of plugin development is ability to run automated sets \nof regression tests. While Run-time Workbench launch configurations can be used \nto run such tests manually, they are not suitable for running tests as part of \nnightly builds. Ant task for running Run-time Workbench would be very useful \nsince if would allow automatic plugin tests to be launched by a script running \noutside Eclipse.",
    "Have you investigated the antRunner application entry point for Eclipse?\nAllows for headless execution of Eclipse for running Ant builds.",
    "Javadoc for AntRunner class describes it as \"Entry point for running Ant builds \ninside Eclipse\". The feature I\u0027m looking for is ability to run Eclipse from \nAnt. I couldn\u0027t see how AntRunner can help with that. Am I missing something?",
    "You can use the AntRunner entry point to run an Ant build in the same JRE as \nEclipse (so you have the Eclipse workbench context). From this Ant build you \ncould run your JUnit tests.",
    "Is it possible to use AntRunner from Ant running from a command line? If so, \nare there any examples on how to do it?",
    "Since Ant can run any Java program using the java task or simple launch a bat \nfile using the exec task it is not too hard. I will attach an example bat file \nfor launching antRunner.",
    "Created an attachment (id\u003d18349)\nText to use for a bat file to use the antRunner application entry point\n\nModify as required for your setup",
    "Thanks for the example. Would you mind attaching your build.xml, or at least \nthe relevant part of it. Thanks in advance.",
    "Questions regarding antRunner:\n1. How do I specify the set of plugins to include?\n2. How do I specify the ant target?\n3. Ho do I specify ant properties?\n\nI\u0027m getting an exception when I try to call PlatformUI.getWorkbench from my \ntest:\n  java.lang.IllegalStateException: Workbench has not been created yet. at \norg.eclipse.ui.PlatformUI.getWorkbench(PlatformUI.java:92) at \ncom.sigmadynamics.test.studio.StudioTest.setUp(StudioTest.java:109) at \norg.eclipse.ant.internal.core.ant.InternalAntRunner.run\n(InternalAntRunner.java:648) at \norg.eclipse.ant.internal.core.ant.InternalAntRunner.run\n(InternalAntRunner.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0\n(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39) at \nsun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25) at org.eclipse.ant.core.AntRunner.run\n(AntRunner.java:493) at \norg.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:220) at \norg.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:273) at \norg.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:129) at \nsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at \nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) \nat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25) at \norg.eclipse.core.launcher.Main.basicRun(Main.java:185) at \norg.eclipse.core.launcher.Main.run(Main.java:710) at \norg.eclipse.core.launcher.Main.main(Main.java:694)",
    "Sergey sorry for the delay on this...where are you currently at?",
    "Sonia helped me to get org.eclipse.test plugin to work, but it requires the \nplugin being tested to be co-located with the rest of Eclipse. It seems that a \nself contained Ant task mimicking the capabilities of JUnit Plug-in Test \nlauncher would be very useful for people who want to test their plugins as part \nof automatic build process.",
    "We will consider post 3.1",
    "Reopened to be on radar screen for 3.2.",
    "This enhancement is unlikely to happen for 3.2 unless the community helps out with the implementation.",
    "deferring"
  ],
  "commentCreationDates": [
    "2005-02-28T00:28:54+01:00",
    "2005-02-28T01:04:02+01:00",
    "2005-02-28T01:15:58+01:00",
    "2005-02-28T02:01:45+01:00",
    "2005-02-28T03:09:29+01:00",
    "2005-02-28T06:33:07+01:00",
    "2005-02-28T06:34:24+01:00",
    "2005-02-28T18:59:18+01:00",
    "2005-03-03T02:39:40+01:00",
    "2005-04-15T07:00:17+02:00",
    "2005-04-15T17:52:47+02:00",
    "2005-04-15T17:59:58+02:00",
    "2005-06-29T22:26:19+02:00",
    "2006-02-09T16:05:51+01:00",
    "2006-02-13T23:25:39+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Workbench has not been created yet.",
      "elements": [
        {
          "method": "org.eclipse.ui.PlatformUI.getWorkbench",
          "source": "PlatformUI.java:92"
        },
        {
          "method": "com.sigmadynamics.test.studio.StudioTest.setUp",
          "source": "StudioTest.java:109"
        },
        {
          "method": "org.eclipse.ant.internal.core.ant.InternalAntRunner.run",
          "source": "InternalAntRunner.java:648"
        },
        {
          "method": "org.eclipse.ant.internal.core.ant.InternalAntRunner.run",
          "source": "InternalAntRunner.java:551"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "org.eclipse.ant.core.AntRunner.run",
          "source": "AntRunner.java:493"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:220"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:273"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:129"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:185"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:710"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:694"
        }
      ],
      "number": 0,
      "commentIndex": 8,
      "bugId": "86797",
      "date": "2005-03-03T02:39:40+01:00",
      "product": "Platform",
      "component": "Ant",
      "severity": "enhancement"
    }
  ],
  "groupId": "86797",
  "bugId": "86797",
  "date": "2005-02-28T00:28:54+01:00",
  "product": "Platform",
  "component": "Ant",
  "severity": "enhancement"
}