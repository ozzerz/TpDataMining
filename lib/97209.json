{
  "comments": [
    "3.1-RC1 test pass\n\n- have the type hierarchy below (note that the two type variables are not connected)\n- try to pull up sub from SubType to SuperType\n- get the JavaModelException below\n\n\n------- SuperType.java ---------\npackage com.example;\n\n\n\npublic class SuperType\u003cELEM extends Number\u003e {\n\n\tvoid add(ELEM e) {\n\n\t}\n\n\t\n\n\tELEM get() {\n\n\t\treturn null;\n\n\t}\n\n}\n\n------- SubType.java -----------\npackage com.example;\n\n\n\npublic class SubType\u003cELEM\u003e extends SuperType\u003cInteger\u003e {\n\n\tvoid sub(Integer i) {\n\n\t\tadd(i);\n\n\t}\n\n\n\n}\n\n--------------------------------\n\n\njava.lang.reflect.InvocationTargetException\n\tat\norg.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:90)\n\tat\norg.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:113)\nCaused by: Java Model Exception: Java Model Status [add(Integer)\n{key\u003dLcom/example/SuperType;.add(TELEM;)V} [in SuperType [in [Working copy]\nSuperType.java [in com.example [in src [in Generics]]]]] does not exist]\n\tat\norg.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:468)\n\tat org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:499)\n\tat org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:232)\n\tat org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:218)\n\tat org.eclipse.jdt.internal.core.Member.getFlags(Member.java:147)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.structure.MemberVisibilityAdjustor.adjustOutgoingVisibility(MemberVisibilityAdjustor.java:671)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.structure.MemberVisibilityAdjustor.adjustOutgoingVisibility(MemberVisibilityAdjustor.java:690)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.structure.MemberVisibilityAdjustor.adjustOutgoingVisibility(MemberVisibilityAdjustor.java:722)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.structure.MemberVisibilityAdjustor.adjustVisibility(MemberVisibilityAdjustor.java:763)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.structure.PullUpRefactoring.createChangeManager(PullUpRefactoring.java:949)\n\tat\norg.eclipse.jdt.internal.corext.refactoring.structure.PullUpRefactoring.checkFinalConditions(PullUpRefactoring.java:615)\n\tat\norg.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:84)\n\tat\norg.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:114)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1719)\n\tat\norg.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:86)\n\t... 1 more",
    "Note (1): the same happens if SubType is not a generic type\n\nNote (2): the same works, if SubType.sub(Integer) does not call\nSuperType.add(ELEM). In this case, the method is correctly pulled up. The pulled\nup method still has an \u0027Integer\u0027 parameter type - one could expect that since\nthe parameter type corresponds with the type argument to the superclass\nspecification of SubType, the pull up operation could offer to convert the\nmethod and substitute ELEM as parameter type.",
    "Re. the last note (2):\n\nExpanding the parameter type if it is the same as a type argument to the\nsupertype would make \u0027Push Down\u0027 and \u0027Pull Up\u0027 symmetrical, as the conversion\nhappens when pushing down: In the example, \u0027add(ELEM)\u0027 is pushed down to\n\u0027add(Integer)\u0027.",
    "Tobias, a candidate for 3.2.\n\nHow risky is it to fix. I am asking since the visibility adjuster is used in\nseveral other places.",
    "ad 1: Its a search problem, see bug 94160\n\nad 2: This must be fixed",
    "Approved for RC2. If we have to change the MemberVisibilityAdjustor and it is a\nlarger change then I would prefer that you review it since the code is used in\nMove member as well.",
    "Just to clarify: Comment 0 is entirely covered by bug 94160, which does not \ninvolve any changes in JDT UI.\n\nThe only thing to fix in the PullUp Refactoring is the renaming of the type \nparameters during pull up.",
    "Thanks for clarification. You consider 94160 a must fix I guess.",
    "Yes, the search engine seems to deliver incorrect resolved source methods.",
    "Fixed \u003e 20050606",
    "Start verifying...",
    "Verified that the exception doesn\u0027t occur anymore. However the generated result\nhas a compile error in SuperType. Will open a separate bug report (see 99211)."
  ],
  "commentCreationDates": [
    "2005-05-30T12:07:15+02:00",
    "2005-05-30T12:12:19+02:00",
    "2005-05-30T12:14:45+02:00",
    "2005-05-30T23:21:53+02:00",
    "2005-05-31T10:30:07+02:00",
    "2005-05-31T11:40:27+02:00",
    "2005-05-31T11:45:35+02:00",
    "2005-05-31T11:48:08+02:00",
    "2005-05-31T11:51:23+02:00",
    "2005-06-06T11:17:31+02:00",
    "2005-06-09T19:34:58+02:00",
    "2005-06-09T19:37:45+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "elements": [
        {
          "method": "org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run",
          "source": "WorkbenchRunnableAdapter.java:90"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:113"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "97209",
      "date": "2005-05-30T12:07:15+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "97209",
  "bugId": "97209",
  "date": "2005-05-30T12:07:15+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}