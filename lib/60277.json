{
  "comments": [
    "I Build id: 200404270800\n\nIntro on RCP fails to bind, and so you cant see your intro.\nLooked at the code. It seems like the workbench does not restore Momento state \nwhen running only RCP plugins.",
    "To give you more info, the restoreState method in workbench has this: \n\n   if (!getWorkbenchConfigurer().getSaveAndRestore()) {\n\t\t\tString msg \u003d WorkbenchMessages\n                    .getString(\"Workbench.restoreDisabled\"); //$NON-NLS-1$\n            return new Status(IStatus.WARNING, WorkbenchPlugin.PI_WORKBENCH,\n                    IWorkbenchConfigurer.RESTORE_CODE_RESET, msg, null);\n\t\t} \n\nThe getSaveAndRestore returns false, and so no restore is happening.\nIm using the RCP Browser exanple in HEAD.\nI dont know much about configurator details, and advisor stuff.. but It might \nbe that the rcp sample is not configured to restore. dont know.\n\n\n",
    "Correct, the app has control over this.  It can setSaveAndRestore(true) during\nthe WorkbenchAdvisor\u0027s initialize method.",
    "thanks Nick. tried it, the workbench state seems to be ok now. Momemto is \nbeing restored. \nBUT, no one seems to be showing intro? \nIntroDescription is fine, just now one showing it?!\n\nreopening... ",
    "The workbench doesn\u0027t open intro automatically.  It has to be done by the app.\nKim, can you please advise on how to do this?  Might be a good entry for the RCP\nFAQ.\n",
    "The best place to activate intro is in WorkbenchAdvisor.postWindowCreate(). \nThis may be done by a standard call to IIntroManager.showIntro().  Additional\nlifecycle managment may be added here as well.  See\nIDEWorkbenchAdvisor.postWindowCreate() for an example of how the SDK does it.",
    "A note has been added to the RCP FAQ.",
    "Thanks Kim.",
    "hmm... ist it me, or does this not sound too intuitive. Why would I have an \nintro plugin in my RCP app, and not want to show it. PLUS, are you saying that \nI cant dynamically add an intrio plugin to an RCP app? If you have an rcp \napp,  Am I missing something? \n\nI wanted to double check. So I added the following to my app:\n\npublic void postWindowCreate(IWorkbenchWindowConfigurer configurer) {\n\t\tIWorkbenchWindow window \u003d configurer.getWindow();\n\t\twindow.getWorkbench().getIntroManager().showIntro(window,true);\n\t}\n\nand I got the following stack dump: \nbtw, where is the rcp faq? couldnt find it.. \n\n!SESSION Apr 30, 2004 11:55:16.693 --------------------------------------------\n-\njava.version\u003d1.4.2_02\njava.vendor\u003dSun Microsystems Inc.\nBootLoader constants: OS\u003dwin32, ARCH\u003dx86, WS\u003dwin32, NL\u003den_US\nCommand-line arguments: -application org.eclipse.ui.examples.rcp.browser.app -\napplication org.eclipse.ui.examples.rcp.browser.app -product \norg.eclipse.ui.intro.examples.coolProduct\n!ENTRY org.eclipse.ui 4 4 Apr 30, 2004 11:55:16.693\n!MESSAGE Invalid Menu Extension (Path is invalid): \norg.eclipse.ui.edit.text.gotoLastEditPosition\n!ENTRY org.eclipse.ui 4 4 Apr 30, 2004 11:55:16.703\n!MESSAGE Invalid Menu Extension (Path is invalid): \norg.eclipse.ui.configureActivities\n!ENTRY org.eclipse.ui 4 4 Apr 30, 2004 11:55:24.496\n!MESSAGE Unhandled event loop exception\n!ENTRY org.eclipse.ui 4 0 Apr 30, 2004 11:55:24.496\n!MESSAGE java.lang.NullPointerException\n!STACK 0\njava.lang.NullPointerException\n\tat org.eclipse.ui.internal.WorkbenchWindow.updateLayoutDataForContents\n(WorkbenchWindow.java:2302)\n\tat org.eclipse.ui.internal.WorkbenchWindow.setCoolBarVisible\n(WorkbenchWindow.java:2230)\n\tat org.eclipse.ui.internal.ViewIntroAdapterPart.setStandby\n(ViewIntroAdapterPart.java:68)\n\tat org.eclipse.ui.internal.ViewIntroAdapterPart$1.propertyChange\n(ViewIntroAdapterPart.java:49)\n\tat org.eclipse.ui.internal.PartPane.setZoomed(PartPane.java:296)\n\tat org.eclipse.ui.internal.PerspectivePresentation.zoomIn\n(PerspectivePresentation.java:1227)\n\tat org.eclipse.ui.internal.WorkbenchPage.toggleZoom\n(WorkbenchPage.java:2991)\n\tat org.eclipse.ui.internal.WorkbenchIntroManager.setIntroStandby\n(WorkbenchIntroManager.java:149)\n\tat org.eclipse.ui.internal.intro.impl.parts.StandbyPart.doReturn\n(StandbyPart.java:175)\n\tat org.eclipse.ui.internal.intro.impl.parts.StandbyPart.access$2\n(StandbyPart.java:171)\n\tat org.eclipse.ui.internal.intro.impl.parts.StandbyPart$1.linkActivated\n(StandbyPart.java:115)\n\tat org.eclipse.ui.forms.widgets.AbstractHyperlink.handleActivate\n(AbstractHyperlink.java:183)\n\tat org.eclipse.ui.forms.widgets.ImageHyperlink.handleActivate\n(ImageHyperlink.java:137)\n\tat org.eclipse.ui.forms.widgets.AbstractHyperlink.handleMouseUp\n(AbstractHyperlink.java:264)\n\tat org.eclipse.ui.forms.widgets.AbstractHyperlink.access$1\n(AbstractHyperlink.java:248)\n\tat org.eclipse.ui.forms.widgets.AbstractHyperlink$4.handleEvent\n(AbstractHyperlink.java:95)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:796)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2592)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2270)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1353)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1324)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench\n(Workbench.java:240)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:140)\n\tat org.eclipse.ui.examples.rcp.browser.BrowserApp.run\n(BrowserApp.java:54)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:283)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:240)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:117)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:269)\n\tat org.eclipse.core.launcher.Main.run(Main.java:700)\n\tat org.eclipse.core.launcher.Main.main(Main.java:684)\n",
    "I have to agree here (sorry for not paying attention earlier). Intro support \nis important because it is part of the product branding (together with About, \nsplash screen etc.). The intro handshake is tricky to get right and if left to \nRCP developers, it should be easy to add (without NPEs :-).",
    "Is there any way of telling if both the intro part is installed -and- there is\ncontent to show?  If so, then I agree it should be done automatically by the\nworkbench.\n",
    "Kim, would you be able to look into the NPE as well?",
    "The NPE is a result of the fact that an RCP app can choose not to create the\ndefault window contents and consequently defaultLayout is null.  There should be\na checks added into WorkbenchWindow to take this possibility into account. \nCreated Bug 60594 to address this.\n\nNick:  what do you mean \"and there is content to show\"...?",
    "In order to interact properly with any non-default layout, and also to handle\nthe legacy Welcome support in the IDE, we have decided to keep the app in\ncontrol over if/when Intro is shown.  Trying to push this down to the generic\nworkbench would require complicated handshaking protocols.\n\nWhen showing/hiding the intro, the hide/show of the trim controls will happen\nfor free when using the default layout.  If the app has its own layout, then it\ncan hide/show trim controls itself.  To do so, it needs notification of when\nintro changes mode from main intro to standby, or is dismissed.  A simple\nproperty change listener on the intro manager should suffice.  Or is\nnotification per window necessary?\n\n",
    "By adding \"and there is content to show\" I was trying to handle the case where\nthe intro part is installed, but there is no associated intro content for it to\nshow.  I wanted to avoid the case where the workbench automatically opens intro,\nbut it\u0027s empty.  If this is all under control of the app, we don\u0027t need to worry\nabout this case.\n",
    "We (the workbench) have no idea what the intro contains, only that there is one\ndefined...there is no API we can query for this, and I dont believe any would be\npossible without enforcing that intro implementations all derive from the intro\nimplementation being offered by the org.eclipse.ui.intro plugin.",
    "Nick,\nthe idea of Intro having \"content to show\" was introduced by the \norg.eclipse.ui.intro plugin, where UI content for the intro was determined by \nxml markup associated with a specific intro. \nFrom the Workbench\u0027s perspective, and from RCP perspective, you dont care. no? \nIf someone contributed an intro part that is empty when its shown, it\u0027s not \nanyones problem. Its the problem of the person contributing the bad intro. Its \nlike contributing an empty view. Do we stop that from showing up? no. \nKim has logic that says \"if there is proper intro binding to product, show \nIntro (regardless of intro content). If not show legacy Welcome if it exists\". \n(ps: This is different than the case where an intro part behaves bad. If the \nIntro part behaves badly and throws exception on startup, then thats a \ndifferent story, and the workbench should just log the fact and move on, and \nnot show anything).\n\nRCP behavior should be the same as the above mentioned SDK behavior, imoh. If \nnot then I would not be able to dynamically contribute an intro plugin to an \nRCP application.\nYou mentioned \"In order to interact properly with any non-default layout...\". \nI honestly dont know what that means, but if you are saying that it was \ntechnicallty difficult to do the handshaking of the intro at the rcp level, \nthen a contributred intro plugin should be able to \"easily\" add that \nhandshaking, by contributing to the workbench advisor, and being able to \noverride advisor behavior *from a contributed plugin* (I had to overwrite \ncreate, and init). I dont think this doable today? \n\nIn short, one of the above cases has to work for intro to be dynamically \ncontributable (is that even a word! :)  ) \n\n \n\n \n  ",
    "I understand the dynamic contribution scenario.  However, I think it\u0027s more\nimportant to give the app over how/when intro is shown.  For example, for the\ncurrent logic to be pushed down, the old welcome support would have to be too\n(it currently is internal to the IDE layer).  The dynamic contribution scenario\nwill not be supported for 3.0.",
    "Nick,\nagain, Im playing the devil\u0027s advocate here, so bear with me please. \nThe old welcome support is not RCP complaint. Its an editor, and rightfully so \nbecause it was designed for the SDK.\nYou mentioned two points:\n1) \"However, I think it\u0027s more important to give the app over how/when intro \nis shown.\"   \n\n2) \" For example, for the current logic to be pushed down, the old welcome \nsupport would have to be too...(it currently is internal to the IDE layer)\" \n\nFor point one, I dont understand why any app would want to inhibit dynamic \nnature.\nFor point two, dont support old welcome. Simple and quick. Support for old \nwelcome was for backward compatibility with existing 2.xx products, no? \nThis is rcp we are talking about, why would you want to support old welcome? \n \n",
    "OK, you\u0027ve convinced me.  \n\nWe will add a new lifecycle event to WorkbenchAdvisor:\nopenIntro(IWorkbenchWindowConfigurer), which will be called immediately after\npostWindowCreate.  The default implementation will do what the IDE currently\ndoes, but without the support for legacy welcome pages.  The IDE implementation\nwill handle this.\n\nThe preference it uses will need to be pushed down as well, and should probably\nbe an API preference: defined in IWorkbenchPreferenceConstants and looked up on\nthe org.eclipse.ui plugin, not org.eclipse.ui.workbench.  Need to use the new\nprefs API to access this, to ensure proper defaults initialization.  See how\nit\u0027s done for PRESENTATION_FACTORY_ID.  I also suggest changing the key to\nSHOW_INTRO \u003d \"showIntro\".\n",
    "Nick, I think this behaviour is exactly as we would expect it to be. I think \nRCP developers in general will greatly benefit from it because implementing \nthe intro handshake is non-trivial and the default behaviour will be used in \nmost of the cases.",
    "thank you ;-) ",
    "Fix in HEAD.  The preference is stored on Workbench rather than UI because we\nneed read/write access to it and UIPlugin is not available from the workbench\nproject.",
    "One thing to note - the Introduction action cannot appear for free in the menu.\n This has to be explicitly added by the application in its fillActionBars method.",
    "I think that\u0027s fine - I was only concerned about complex work that RCP \ndevelopers need to do to get the intro going. Adding the action to the menu \nbar is something I don\u0027t consider hard as long as the work that needs to be \ndone by the action is one method call away.",
    "Please use org.eclipse.ui for API prefs.  This does require an up-reference, but\nit\u0027s possible.  See PRESENTATION_FACTORY_ID.\n\nThis needs to be an API pref since apps may override the default behaviour, and\nshouldn\u0027t have to define their own pref.  It will also allow them to override\nthe default in plugin_customization.ini without having to access internal prefs.\n",
    "The presentation preference is only read, not written.  You cannot write\npreferences via the IPreferencesService interface, I cannot access UIPlugin\ndirectly and I can no longer use Platform.getPlugin() because we no longer rely\non compatibility.  I don\u0027t see how we can do this.",
    "Additionally, how is this preference any different from\nSHOULD_SHOW_PROGRESS_INDICATOR, SHOULD_SHOW_PERSPECTIVE_BAR, etc?",
    "I\u0027ve fixed this up, and made it easier to access API prefs on o.e.ui.  See PrefUtil.\n\nI\u0027ve also deleted IWorkbenchPreferences, which defined all the SHOW_* prefs.\nIt did not make sense to have both the prefs and the\nIWorkbenchWindowConfigurer.setShow* methods.\n",
    "Verified in 200405190010",
    "Closing to keep a tidy house.  Pardon the spam."
  ],
  "commentCreationDates": [
    "2004-04-28T18:30:16+02:00",
    "2004-04-28T18:33:23+02:00",
    "2004-04-29T17:09:46+02:00",
    "2004-04-29T23:20:21+02:00",
    "2004-04-30T15:39:54+02:00",
    "2004-04-30T15:49:42+02:00",
    "2004-04-30T16:04:02+02:00",
    "2004-04-30T16:32:59+02:00",
    "2004-04-30T18:20:16+02:00",
    "2004-04-30T18:24:08+02:00",
    "2004-04-30T19:06:58+02:00",
    "2004-04-30T19:07:09+02:00",
    "2004-04-30T19:11:13+02:00",
    "2004-04-30T19:28:34+02:00",
    "2004-04-30T19:30:21+02:00",
    "2004-04-30T21:59:38+02:00",
    "2004-05-02T21:53:59+02:00",
    "2004-05-03T04:00:40+02:00",
    "2004-05-03T04:13:18+02:00",
    "2004-05-03T15:25:45+02:00",
    "2004-05-03T16:15:38+02:00",
    "2004-05-03T16:34:55+02:00",
    "2004-05-03T17:28:47+02:00",
    "2004-05-03T17:30:46+02:00",
    "2004-05-03T17:34:47+02:00",
    "2004-05-03T17:40:23+02:00",
    "2004-05-03T17:47:01+02:00",
    "2004-05-03T17:50:21+02:00",
    "2004-05-04T08:06:58+02:00",
    "2004-05-19T17:35:32+02:00",
    "2004-07-06T15:29:38+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow.updateLayoutDataForContents",
          "source": "WorkbenchWindow.java:2302"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow.setCoolBarVisible",
          "source": "WorkbenchWindow.java:2230"
        },
        {
          "method": "org.eclipse.ui.internal.ViewIntroAdapterPart.setStandby",
          "source": "ViewIntroAdapterPart.java:68"
        },
        {
          "method": "org.eclipse.ui.internal.ViewIntroAdapterPart$1.propertyChange",
          "source": "ViewIntroAdapterPart.java:49"
        },
        {
          "method": "org.eclipse.ui.internal.PartPane.setZoomed",
          "source": "PartPane.java:296"
        },
        {
          "method": "org.eclipse.ui.internal.PerspectivePresentation.zoomIn",
          "source": "PerspectivePresentation.java:1227"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchPage.toggleZoom",
          "source": "WorkbenchPage.java:2991"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchIntroManager.setIntroStandby",
          "source": "WorkbenchIntroManager.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.intro.impl.parts.StandbyPart.doReturn",
          "source": "StandbyPart.java:175"
        },
        {
          "method": "org.eclipse.ui.internal.intro.impl.parts.StandbyPart.access$2",
          "source": "StandbyPart.java:171"
        },
        {
          "method": "org.eclipse.ui.internal.intro.impl.parts.StandbyPart$1.linkActivated",
          "source": "StandbyPart.java:115"
        },
        {
          "method": "org.eclipse.ui.forms.widgets.AbstractHyperlink.handleActivate",
          "source": "AbstractHyperlink.java:183"
        },
        {
          "method": "org.eclipse.ui.forms.widgets.ImageHyperlink.handleActivate",
          "source": "ImageHyperlink.java:137"
        },
        {
          "method": "org.eclipse.ui.forms.widgets.AbstractHyperlink.handleMouseUp",
          "source": "AbstractHyperlink.java:264"
        },
        {
          "method": "org.eclipse.ui.forms.widgets.AbstractHyperlink.access$1",
          "source": "AbstractHyperlink.java:248"
        },
        {
          "method": "org.eclipse.ui.forms.widgets.AbstractHyperlink$4.handleEvent",
          "source": "AbstractHyperlink.java:95"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:82"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:796"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:2592"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2270"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1353"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1324"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:240"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:140"
        },
        {
          "method": "org.eclipse.ui.examples.rcp.browser.BrowserApp.run",
          "source": "BrowserApp.java:54"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:283"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:240"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:117"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:269"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:700"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:684"
        }
      ],
      "number": 0,
      "commentIndex": 8,
      "bugId": "60277",
      "date": "2004-04-30T18:20:16+02:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "60277",
  "bugId": "60277",
  "date": "2004-04-28T18:30:16+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}