{
  "comments": [
    "Since 3.3M6 the following implementation fails with an AbstractMethodError \n\ninterface IBase \n{\n\tIBaseReturn get();\n}\n\ninterface IEnhanced extends IBase \n{\n\tIEnhancedReturn get();\n}\n\nabstract class AImpl \n{\n\n\tpublic IEnhancedReturn get() \n\t{\n\t\treturn null;\n\t}\n}\n\nclass Impl extends AImpl implements IBase, IEnhanced \n{\n}\n\nclass ImplTest extends TestCase \n{\n\tpublic void testGet() throws Exception \n\t{\n\t\tIBase base \u003d new Impl();\n\t\tIBaseReturn baseReturn \u003d base.get();\n\t\tif (baseReturn !\u003d null) \n\t\t{\n\t\t\tSystem.out.println(baseReturn);\n\t\t}\n\t}\n}\n\nTest fails:\n\njava.lang.AbstractMethodError: Impl.get()LIBaseReturn;\n\tat ImplTest.testGet(ImplTest.java:9)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:164)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:230)\n\tat junit.framework.TestSuite.run(TestSuite.java:225)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n\nIt works on 3.2.x and until 3.3M5 but never again since M6!",
    "Created an attachment (id\u003d69926)\nError Project with test case\n\n",
    "Kent - smells like a late show stopper (now if too risky at this point in the game...). But given it looks like a regression, we probably should address it.",
    "Maxime - can you also investigate ? ",
    "Tagging tentatively for RC4 (no commitment, just so we do keep track of it).",
    "Created an attachment (id\u003d69988)\nProposed patch\n\nThe optimization to remove inherited methods meant we didn\u0027t add a bridge method for IBase.get() to AImpl.\n\nFrom change for bug 184293",
    "Risk:\nThe change is straight forward and has a low risk of causing new problems.\n\nThe fix for bug 184293 removed overridden inherited methods for all tests, but should have only done it for checkInheritedReturnTypes() so bridge methods could still be created.\n\nBenefits:\nThis is a regression from 3.3M6. Its a real case from actual code, so the fix is necessary for some users.",
    "+1",
    "I didn\u0027t mean to close it as FIXED.",
    "Fix looks OK. Somehow stresses the fact that the check* series of methods has side effects beyond emitting error messages (which may call for an explicit comment, since the more general accepted meaning of check is: go verify something and return the result - implicitly without changing the observed system).\nHence +1.\n\nOtherwise, we normally no more add tests to the Compliance* classes, but use a test on the compliance instead when results depend on the compliance level. The Compliance* classes should vanish when the migration of existing tests (which may take a while) will be over. I would then suggest that you move the new test to MethodVerifyTest.",
    "Created an attachment (id\u003d70141)\nUpdated patch\n\nMoved test to MethodVerifyTest",
    "Created an attachment (id\u003d70147)\nCorrect updated patch\n\n",
    "+1 for 3.3rc4",
    "+1 for 3.3 RC4",
    "Released into HEAD for 3.3RC4",
    "Verified for 3.3RC4 using I20070606-0010",
    "Great work! \nI checked your fix with RC4 in my \"real life\" application and no more \"AbstractMethodErrors\" has been throws. \n\nYou made my day!\nJan"
  ],
  "commentCreationDates": [
    "2007-06-04T10:31:15+02:00",
    "2007-06-04T10:36:12+02:00",
    "2007-06-04T13:46:29+02:00",
    "2007-06-04T13:47:10+02:00",
    "2007-06-04T13:48:36+02:00",
    "2007-06-04T19:01:24+02:00",
    "2007-06-04T19:33:30+02:00",
    "2007-06-04T19:38:59+02:00",
    "2007-06-04T19:39:20+02:00",
    "2007-06-05T12:45:14+02:00",
    "2007-06-05T16:32:25+02:00",
    "2007-06-05T17:12:06+02:00",
    "2007-06-05T19:26:22+02:00",
    "2007-06-05T19:29:43+02:00",
    "2007-06-05T19:31:00+02:00",
    "2007-06-07T01:24:09+02:00",
    "2007-06-14T08:13:04+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "message": "Impl.get()LIBaseReturn;",
      "elements": [
        {
          "method": "ImplTest.testGet",
          "source": "ImplTest.java:9"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:164"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:130"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:120"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:230"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:225"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
          "source": "JUnit3TestReference.java:130"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
          "source": "TestExecution.java:38"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:460"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:673"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:386"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
          "source": "RemoteTestRunner.java:196"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "190748",
      "date": "2007-06-04T10:31:15+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "blocker"
    }
  ],
  "groupId": "190748",
  "bugId": "190748",
  "date": "2007-06-04T10:31:15+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "blocker"
}