{
  "comments": [
    "3.2 M2\n\nIAnnotationModel does not offer queries for annotations contained in a certain\ndocument range. This means that any client interested in a certain offset or\nrange has to iterate over the entire model, collecting the interesting\nannotations itself:\n\n- AnnotationRulerColumn (to find the viewport-visible annotations)\n- SelectMarkerRulerAction (to find the annotations on a single line)\n- AbstractAnnotationHover (to find the annotations on a document region)\n- AnnotationPainter (intersection of document range and viewport-visible)\n\nOf these, especially AnnotationPainter and AnnotationRulerColumn are performance\nrelevant as they are constantly updated when the document, the viewport or the\nannotation model changes.\n\nWe should investigate the cost of maintaining a positional index of the\ncontained annotations in AnnotationModel, which would allow to offer range based\nqueries to clients. Queries could allow character or line ranges.",
    "An idea:\n- maintain a SortedMap\u003cLineRange, Chunk\u003e, with chunks of N (say 20-50) lines. \n- every chunk knows the intersecting Annotation/Position tuples.\n  - update when annotations are added/removed\n  - update on document changes:\n    - pessimistic: prune cache, rebuild when requested next\n    - optimistic: \n       - add (don\u0027t remove) annotations to chunks based on document change \n       - prune when next requested\n",
    "To fix or dispose during M4.",
    "Created an attachment (id\u003d84092)\nproposed fix\n\nAllZRHTextTests are green\n\nHere are some numbers:\n\n                   New      Old\nAnnotationModelPerformanceTest#testAddForward()\n  Elapsed Process: 65ms      50ms\n\nAnnotationModelPerformanceTest#testAddBackwards()\n  Elapsed Process: 237ms    224ms\n\nAnnotationModelPerformanceTest#testAddRandom()\n  Elapsed Process: 156ms    140ms\n\nAnnotationModelPerformanceTest#testRemoveRandom()\n  Elapsed Process: 203ms   1089ms\n\nAnnotationModelPerformanceTest#testRegionInside()\n  Elapsed Process: 162ms    137ms\n\nAnnotationModelPerformanceTest#testRegionBeforeAfter()\n  Elapsed Process: 115ms    137ms\n\nAnnotationModelPerformanceTest#testRegionBeforeAfterOld()\n  Elapsed Process: 121ms    121ms\n\nAnnotationModelPerformanceTest#testRegionBeforeAfterCompare()\n  Elapsed Process:  -6ms      6ms\n\nScrollVerticalRuler100Test#testScrollTextEditorPageWise()\n  Elapsed Process:  52ms     41ms\n\nScrollVerticalRuler100Test#testScrollTextEditorLineWiseMoveCaret2()\n  Elapsed Process:  531ms   572ms\n\nScrollVerticalRuler1000Test#testScrollTextEditorPageWise()\n  Elapsed Process:  427ms   921ms\n\nScrollVerticalRuler1000Test#testScrollTextEditorLineWiseMoveCaret2()\n  Elapsed Process:  6.33s  18.55s\n\nScrollVerticalRuler5000Test#testScrollTextEditorPageWise()            \n  Elapsed Process:  2.03s  13.33s\n\n\nFix has following known issues:\n1. Reconciler kicks in when he shouldn\u0027t\n2. Changes in AnnotationRulerColumn are not ready to be released\n3. It whould be great if we could get rid of AnnotationModel#fPositions\n\nDani? Can you start reviewing?",
    "Created an attachment (id\u003d84149)\nfix\n\nSame as previous, but contains one fix.",
    "Created an attachment (id\u003d84330)\nfix\n\nThe chunk approach does not work. This is a much simpler fix which IMHO is a acceptable time/space/complexity compromise.\n\nIt still has the reconciler bug. Reason seams to be that with this patch the drawing is too fast, no really:\n\n1. Add this \u0027new Exception(region.toString()).printStackTrace();\u0027 to org.eclipse.jface.text.presentation.PresentationReconciler.InternalListener.textChanged(TextEvent) line 210\n2. Open faust with 9999 spelling errors and spelling errors with \u0027Native Problem Underline\u0027\n3. Press and hold enter for about 10 seconds\nIs:\n -without the patch you get a couple of stack traces (see below) after you release the key\n -with the patch you get this stack traces while the key is pressed\nShould:\n exactly one stack trace after key release\n\nWith the patch the async runnable is executed while the key is pressed because I guess the UI thread has a free slot to run the runnable.\n\nThe trace:\njava.lang.Exception: [0+76881]\n\tat org.eclipse.jface.text.presentation.PresentationReconciler$InternalListener.textChanged(PresentationReconciler.java:208)\n\tat org.eclipse.jface.text.TextViewer.updateTextListeners(TextViewer.java:2624)\n\tat org.eclipse.jface.text.TextViewer.invalidateTextPresentation(TextViewer.java:3271)\n\tat org.eclipse.jface.text.source.AnnotationPainter.invalidateTextPresentation(AnnotationPainter.java:959)\n\tat org.eclipse.jface.text.source.AnnotationPainter.updatePainting(AnnotationPainter.java:941)\n\tat org.eclipse.jface.text.source.AnnotationPainter.access$1(AnnotationPainter.java:935)\n\tat org.eclipse.jface.text.source.AnnotationPainter$1.run(AnnotationPainter.java:1074)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:130)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3727)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3364)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2393)",
    "Created an attachment (id\u003d84432)\nproposed fix\n\nContains a few bug fixes and more important the new API is used within jdt/ui and platform/text",
    "Created an attachment (id\u003d84861)\nchanges for AnnotationRulerColumn\n\n",
    "I\u0027ve released the tests and the typo fix. Open issues:\n- why do you use line.getLength() + 1 in the SelectMarkerRulerAction but not at\n  other places (1 seems random since e.g. on windows this will be the \u0027CR\u0027\n- how big is the performance win we gain by adding Position#annotation? If the\n  gain is low I\u0027d vote for not doing this\n\nMoving to M5 as there are still open discussion. Will fix right after M4 is out.",
    "Created an attachment (id\u003d84957)\nproposed fix\n\n(In reply to comment #8)\n\u003e I\u0027ve released the tests and the typo fix. Open issues:\n\u003e - why do you use line.getLength() + 1 in the SelectMarkerRulerAction but not at\n\nThat was a mistake\n\n\u003e   other places (1 seems random since e.g. on windows this will be the \u0027CR\u0027\n\nI add 1 in AnnotationRulerColumn see bug 20284",
    "Created an attachment (id\u003d84958)\nperformance results\n\n\u003e - how big is the performance win we gain by adding Position#annotation? If the\n\u003e   gain is low I\u0027d vote for not doing this\n\nThe gain in corner cases is very high (scroll 1000 and scroll 5000). We should for sure take the trivial performance enhancement for removing positions, see the performance gain."
  ],
  "commentCreationDates": [
    "2005-10-20T17:30:47+02:00",
    "2005-10-20T17:58:47+02:00",
    "2007-11-26T09:52:31+01:00",
    "2007-11-29T18:50:34+01:00",
    "2007-11-30T09:56:37+01:00",
    "2007-12-03T16:27:17+01:00",
    "2007-12-04T17:24:29+01:00",
    "2007-12-10T14:53:16+01:00",
    "2007-12-10T17:55:54+01:00",
    "2007-12-11T14:58:54+01:00",
    "2007-12-11T15:04:07+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "[0+76881]",
      "elements": [
        {
          "method": "org.eclipse.jface.text.presentation.PresentationReconciler$InternalListener.textChanged",
          "source": "PresentationReconciler.java:208"
        },
        {
          "method": "org.eclipse.jface.text.TextViewer.updateTextListeners",
          "source": "TextViewer.java:2624"
        },
        {
          "method": "org.eclipse.jface.text.TextViewer.invalidateTextPresentation",
          "source": "TextViewer.java:3271"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationPainter.invalidateTextPresentation",
          "source": "AnnotationPainter.java:959"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationPainter.updatePainting",
          "source": "AnnotationPainter.java:941"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationPainter.access$1",
          "source": "AnnotationPainter.java:935"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationPainter$1.run",
          "source": "AnnotationPainter.java:1074"
        },
        {
          "method": "org.eclipse.swt.widgets.RunnableLock.run",
          "source": "RunnableLock.java:35"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:130"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:3727"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3364"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:2393"
        }
      ],
      "number": 0,
      "commentIndex": 5,
      "bugId": "113247",
      "date": "2007-12-03T16:27:17+01:00",
      "product": "Platform",
      "component": "Text",
      "severity": "normal"
    }
  ],
  "groupId": "113247",
  "bugId": "113247",
  "date": "2005-10-20T17:30:47+02:00",
  "product": "Platform",
  "component": "Text",
  "severity": "normal"
}