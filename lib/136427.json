{
  "comments": [
    "This NPE (stack below) was first discovered during our adoption testing of RC1 (build: R-1.0.2RC1-200604070459); our previous build was M200603280054.\n\nThe error is intermittent (2 occurrences on approx 100 runs) but serious.\n\nThe NPE is triggered when the CreateReferenceComponentsOp is executed by one of our facet installation delegates during execution of the EJB project creation wizard.\n\nBased on a conversation with Chuck, it sounds like may be some relevant fixes in RC2 so we are going to start testing with that build (Chuck: if you could include a pointers to the change you think is relevant, that would be great). \n\n--------------------\njava.lang.NullPointerException\n\tat org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:229)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.setModified(ResourceImpl.java:1240)\n\tat org.eclipse.emf.ecore.resource.impl.ResourceImpl$ModificationTrackingAdapter.notifyChanged(ResourceImpl.java:1133)\n\tat org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:229)\n\tat org.eclipse.emf.common.notify.impl.NotificationChainImpl.dispatch(NotificationChainImpl.java:113)\n\tat org.eclipse.emf.common.notify.impl.NotificationChainImpl.dispatch(NotificationChainImpl.java:101)\n\tat org.eclipse.emf.common.notify.impl.NotifyingListImpl.addUnique(NotifyingListImpl.java:288)\n\tat org.eclipse.emf.common.util.BasicEList.add(BasicEList.java:599)\n\tat org.eclipse.wst.common.componentcore.internal.resources.VirtualComponent.addReferences(VirtualComponent.java:339)\n\tat org.eclipse.wst.common.componentcore.internal.operation.CreateReferenceComponentsOp.addReferencedComponents(CreateReferenceComponentsOp.java:77)\n\tat org.eclipse.wst.common.componentcore.internal.operation.CreateReferenceComponentsOp.execute(CreateReferenceComponentsOp.java:39)\n\tat org.eclipse.wst.common.frameworks.internal.datamodel.ExtendableOperationImpl.doExecute(ExtendableOperationImpl.java:163)\n\tat org.eclipse.wst.common.frameworks.internal.datamodel.ExtendableOperationImpl$1.run(ExtendableOperationImpl.java:131)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1721)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1741)\n\tat org.eclipse.wst.common.frameworks.internal.datamodel.ExtendableOperationImpl.execute(ExtendableOperationImpl.java:137)\n\tat com.bea.wlw.common.core.util.J2EEProjectDependencyUtil.addDependency(J2EEProjectDependencyUtil.java:199)\n\tat com.bea.wlw.common.core.util.J2EEProjectDependencyUtil.createDependenciesForUtilOrEJBProject(J2EEProjectDependencyUtil.java:141)\n\tat com.bea.wlw.ejb.core.feature.EJBFeatureDelegate.createDependencies(EJBFeatureDelegate.java:238)\n\tat com.bea.wlw.ejb.core.feature.EJBFeatureDelegate.execute(EJBFeatureDelegate.java:134)\n\tat org.eclipse.wst.common.project.facet.core.internal.FacetedProject.callDelegate(FacetedProject.java:726)\n\tat org.eclipse.wst.common.project.facet.core.internal.FacetedProject.modifyInternal(FacetedProject.java:348)\n\tat org.eclipse.wst.common.project.facet.core.internal.FacetedProject.access$0(FacetedProject.java:247)\n\tat org.eclipse.wst.common.project.facet.core.internal.FacetedProject$1.run(FacetedProject.java:232)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1721)\n\tat org.eclipse.wst.common.project.facet.core.internal.FacetedProject.modify(FacetedProject.java:237)\n\tat org.eclipse.wst.common.project.facet.ui.AddRemoveFacetsWizard.performFinish(AddRemoveFacetsWizard.java:348)\n\tat org.eclipse.wst.web.ui.internal.wizards.NewProjectDataModelFacetWizard.performFinish(NewProjectDataModelFacetWizard.java:173)\n\tat org.eclipse.wst.common.project.facet.ui.AddRemoveFacetsWizard$2.run(AddRemoveFacetsWizard.java:283)\n\tat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1721)\n\tat org.eclipse.wst.common.project.facet.ui.AddRemoveFacetsWizard$3.run(AddRemoveFacetsWizard.java:297)\n\tat org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:113)",
    "[minutes] This is a stop ship problem for WTP 1.0.2. 133187 appears to be causing this regression. \n\n[action] Ted to open another bug for the bad fix.",
    "To clarify, 133187 didn\u0027t cause the regression.\nThere was speculation that 133187 might fix this issue.",
    "Just to clarify the seriousness of this bug ... you say it happens approximately 2 times out of 100 runs. That sounds kind of rare to me. Are the \"runs\" some automated testing? Or some true \"batch job\"? If automated tests, have you observed this error with \"normal user\" scenerios? \n\nAlso, perhaps by \"serious\" you meant the end results leave the workspace unusable? Is data damaged? Or, is just a restart, or something, required? \n\nWhile the stack trace is great, if someone were going to site down and reproduce this, what steps should they try? \n\nThanks much. \n\n",
    "-this was detected during automated testing\n\n-\"serious\" indicated that the failure left projects in a non-usable state\n\n-this particular NPE has been seen in other WTP contexts (see https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d104786 and https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d107238) so the appearence of the NPE in this particular area raised the concern that it may reappear in some of these other areas\n\n-the exact repro involves the programmatic creation of j2ee project dependencies from within a facet install delegate that is executed during project creation; unfortunately, this is a use case that is exercised only by our code; repeated creation of j2ee dependencies may be sufficient to trigger the issue, however, given the low frequency of the problem, a manual repro will be difficult (it looks like this NPE has primarily been detected during automated tests in the past)\n\n\n\n\n\n",
    "Would also add that we\u0027ve executed this facet install logic on top of the 3/28 build (and prior builds) many, many thousands of times now without generating an EMF NPE.  Some change between 3/28 and 4/07 seems to have introduced it, or, more likely, shifted an underlying threading problem into this area.\n\nWe\u0027re hoping that Chuck\u0027s rework of the 133187 fix will resolve this.  See\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d136732",
    "Its possible, but I\u0027m ready to send you guys another patch that dumps the current threads when this exception is hit.  this will go a long way for understanding the  type of access to these EMF collections.\n\nBTW - I did some investigation of Kosta\u0027s locking policies on FactetedProject, and we could use some of these techniques, the problem is, we don\u0027t own the data structure (All EMF code), so techniques like using a copy of the data while changing won\u0027t be as easy.  We need to understand what paths are creating the race conditions, and create a common lock object between these paths (hopefully all in client WTP code)",
    "I have another idea, and its to override the eNotify() method in our specialized Resource class to protect against unsafe access of the adapter list while inside the for loop....\n\nEd - I cc\u0027d you on this because I\u0027m not sure what else we can do to protect ourselves.  The notify method accesses the adapter list directly, and doesn\u0027t protect itself from other changes...\n\npublic void eNotify(Notification notification)\n\t  {\n\t    if (eDeliver() \u0026\u0026 eBasicAdapters() !\u003d null)\n\t    {\n\t      int size \u003d eBasicAdapters().size();\n\t      if (size \u003e 0)\n\t      {\n\t        Adapter [] adapters \u003d (Adapter [])eBasicAdapters().data();\n\t        for (int i \u003d 0; i \u003c size; ++i)\n\t        {\n                  // Protecting against multithreaded changes\n\t          if (adapters[i] \u003d\u003d null) continue;\n\t          adapters[i].notifyChanged(notification);\n\t        }\n\t      }\n\t    }\n\t  }",
    "Chuck,\n\nOnce you have null in the list, the list is most likely already hosed so this approach is just ignoring symptoms when no doubt other symptoms will be waiting to bite you.",
    "Hi Ed, I\u0027m not sure I agree with this argument.\n\nIf two threads are accessing the adapter list of a resource, one is iterating, and the other is changing (removing or adding) - couldn\u0027t we avoid the short term access problems by getting a readonly copy of the list?\n\nIf the list was smart like a synchronized EList that used a synchronized Iterator, we could lock on changes, and avoid these scenarios.  \n\nWith so many clients out there accessing the adapter list directly, its hard to create a policy that encompasses all code paths.",
    "Chuck,\n\nYou should feel free to do what you think will make things better.  But take note that as long as there are threads updating the data structures you are reading on another thread, you are treading on thin ice and likely no good will come of it.  In particular, you should take note that the list of adapters does this:\n\n    public Object [] data()\n    {\n      safe \u003d true;\n      return (Adapter [])data;\n    }\n\n    protected void ensureSafety()\n    {\n      if (safe \u0026\u0026 data !\u003d null)\n      {\n        Object [] oldData \u003d data;\n        data \u003d newData(data.length);\n        System.arraycopy(oldData, 0, data, 0, size);\n        safe \u003d false;\n      }\n    }\n\n    public boolean add(Object object)\n    {\n      ensureSafety();\n      return super.add(object);\n    }\n\nSo it should be quite difficult (impossible for single threaded) for the array to be modified while you are iterating over it.\n",
    "Adding a patch file...\n\nI overrode the eAdapter() method in our resource to create a new subclass of EAdapterList called ESynchronizedAdapterList\n\nThe change methods use the instance to synchronize\n\nI also overrode eNotify() to synchronize on the eAdapter() list.\n\nAlthough this could run a tad slower, this seems to work great....  comments welcome\n\n",
    "Created an attachment (id\u003d38869)\nPatch for adapter override\n\n",
    "Looking at the patch I wonder a few things.  Firstly why introduce mutex when it\u0027s just assigned \"this\"? (A mutex() method that returns \"this\" is just as flexible.) Why make mutex a public field?  Why use a synchronize block rather than a synchronized method?  Why use a synchronize block on eNotify rather than synchronizing the data() method?  (The later approach holds the lock for much less time whereas the former approach might well deadlock the system because the lock is held during the entire notification sequence.) Given that a common pattern of adapter usage is to look for an existing adapter and if it isn\u0027t present, add one, does this approach solve the problem of adding the adapter twice? And lastly, why is the formatting totally inconsistent?",
    "Dropped to M build.\n\nhttp://download.eclipse.org/webtools/committers/drops/R-1.0.2RC3-200604190807/",
    "verified",
    "Closing."
  ],
  "commentCreationDates": [
    "2006-04-12T21:00:11+02:00",
    "2006-04-13T20:32:18+02:00",
    "2006-04-13T21:21:24+02:00",
    "2006-04-15T07:26:07+02:00",
    "2006-04-17T16:26:19+02:00",
    "2006-04-17T18:59:59+02:00",
    "2006-04-17T19:25:15+02:00",
    "2006-04-17T23:07:45+02:00",
    "2006-04-17T23:50:22+02:00",
    "2006-04-18T00:28:14+02:00",
    "2006-04-18T01:31:14+02:00",
    "2006-04-19T01:12:27+02:00",
    "2006-04-19T01:13:35+02:00",
    "2006-04-19T14:43:52+02:00",
    "2006-04-19T16:42:39+02:00",
    "2006-06-20T19:24:03+02:00",
    "2006-09-26T16:09:39+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify",
          "source": "BasicNotifierImpl.java:229"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.setModified",
          "source": "ResourceImpl.java:1240"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl$ModificationTrackingAdapter.notifyChanged",
          "source": "ResourceImpl.java:1133"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify",
          "source": "BasicNotifierImpl.java:229"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.NotificationChainImpl.dispatch",
          "source": "NotificationChainImpl.java:113"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.NotificationChainImpl.dispatch",
          "source": "NotificationChainImpl.java:101"
        },
        {
          "method": "org.eclipse.emf.common.notify.impl.NotifyingListImpl.addUnique",
          "source": "NotifyingListImpl.java:288"
        },
        {
          "method": "org.eclipse.emf.common.util.BasicEList.add",
          "source": "BasicEList.java:599"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.resources.VirtualComponent.addReferences",
          "source": "VirtualComponent.java:339"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.operation.CreateReferenceComponentsOp.addReferencedComponents",
          "source": "CreateReferenceComponentsOp.java:77"
        },
        {
          "method": "org.eclipse.wst.common.componentcore.internal.operation.CreateReferenceComponentsOp.execute",
          "source": "CreateReferenceComponentsOp.java:39"
        },
        {
          "method": "org.eclipse.wst.common.frameworks.internal.datamodel.ExtendableOperationImpl.doExecute",
          "source": "ExtendableOperationImpl.java:163"
        },
        {
          "method": "org.eclipse.wst.common.frameworks.internal.datamodel.ExtendableOperationImpl$1.run",
          "source": "ExtendableOperationImpl.java:131"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1721"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1741"
        },
        {
          "method": "org.eclipse.wst.common.frameworks.internal.datamodel.ExtendableOperationImpl.execute",
          "source": "ExtendableOperationImpl.java:137"
        },
        {
          "method": "com.bea.wlw.common.core.util.J2EEProjectDependencyUtil.addDependency",
          "source": "J2EEProjectDependencyUtil.java:199"
        },
        {
          "method": "com.bea.wlw.common.core.util.J2EEProjectDependencyUtil.createDependenciesForUtilOrEJBProject",
          "source": "J2EEProjectDependencyUtil.java:141"
        },
        {
          "method": "com.bea.wlw.ejb.core.feature.EJBFeatureDelegate.createDependencies",
          "source": "EJBFeatureDelegate.java:238"
        },
        {
          "method": "com.bea.wlw.ejb.core.feature.EJBFeatureDelegate.execute",
          "source": "EJBFeatureDelegate.java:134"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.core.internal.FacetedProject.callDelegate",
          "source": "FacetedProject.java:726"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.core.internal.FacetedProject.modifyInternal",
          "source": "FacetedProject.java:348"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.core.internal.FacetedProject.access$0",
          "source": "FacetedProject.java:247"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.core.internal.FacetedProject$1.run",
          "source": "FacetedProject.java:232"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1721"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.core.internal.FacetedProject.modify",
          "source": "FacetedProject.java:237"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.ui.AddRemoveFacetsWizard.performFinish",
          "source": "AddRemoveFacetsWizard.java:348"
        },
        {
          "method": "org.eclipse.wst.web.ui.internal.wizards.NewProjectDataModelFacetWizard.performFinish",
          "source": "NewProjectDataModelFacetWizard.java:173"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.ui.AddRemoveFacetsWizard$2.run",
          "source": "AddRemoveFacetsWizard.java:283"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1721"
        },
        {
          "method": "org.eclipse.wst.common.project.facet.ui.AddRemoveFacetsWizard$3.run",
          "source": "AddRemoveFacetsWizard.java:297"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:113"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "136427",
      "date": "2006-04-12T21:00:11+02:00",
      "product": "Web Tools",
      "component": "wst.common",
      "severity": "critical"
    }
  ],
  "groupId": "136427",
  "bugId": "136427",
  "date": "2006-04-12T21:00:11+02:00",
  "product": "Web Tools",
  "component": "wst.common",
  "severity": "critical"
}