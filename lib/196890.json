{
  "comments": [
    "When executing an Eclipse 3.3 launch configuration containing the org.eclipse.equinox.http (or HttpService) bundle pointing to a strictly compliant OSGi/Minimum-1.1 JRE, the following error occurs.\n\norg.osgi.framework.BundleException: Exception in org.eclipse.equinox.http.Activator.start() of bundle org.eclipse.equinox.http.\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:1018)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:974)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:346)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:260)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:252)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkCommandProvider._start(FrameworkCommandProvider.java:260)\n\tat java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205)\n\tat java.lang.reflect.Method.invoke(Method.java:259)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkCommandInterpreter.execute(FrameworkCommandInterpreter.java:145)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.docommand(FrameworkConsole.java:291)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.console(FrameworkConsole.java:276)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.run(FrameworkConsole.java:218)\n\tat java.lang.Thread.run(Thread.java:718)\nCaused by: java.lang.NoClassDefFoundError: java.text.DateFormat\n\tat org.eclipse.equinox.http.LogTracker.\u003cinit\u003e(LogTracker.java:48)\n\tat org.eclipse.equinox.http.Http.initialize(Http.java:51)\n\tat org.eclipse.equinox.http.Http.\u003cinit\u003e(Http.java:42)\n\tat org.eclipse.equinox.http.Activator.start(Activator.java:32)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:999)\n\tat java.security.AccessController.doPrivileged(AccessController.java:222)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:993)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:974)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:346)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:260)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:252)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkCommandProvider._start(FrameworkCommandProvider.java:260)\n\tat java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205)\n\tat java.lang.reflect.Method.invoke(Method.java:259)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkCommandInterpreter.execute(FrameworkCommandInterpreter.java:145)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.docommand(FrameworkConsole.java:291)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.console(FrameworkConsole.java:276)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.run(FrameworkConsole.java:218)\n\tat java.lang.Thread.run(Thread.java:718)\n\nSteps to reproduce:\n(1) Create a new launch configuration containing the following bundles: javax.servlet, org.eclipse.equinox.http, org.eclipse.osgi, and org.eclipse.osgi.services.\n(2) Point the launch configuration to a stricly compliant OSGi/Minimum-1.1 JRE.\n(3) Run the launch configuration.\n(4) If the exception is not seen during startup, attempt to start the HttpService bundle, which will be in the RESOLVED state.\n\nIf necessary, I can provide a strictly compliant JRE internally.",
    "The org.eclipse.equinox.http bundle has \n\nBundle-RequiredExecutionEnvironment: J2SE-1.4,\n J2SE-1.3,\n CDC-1.0/Foundation-1.0\n\nI would expect this bundle to not even resolve on OSGi/Minimum-1.1 EE.",
    "(In reply to comment #1)\n\u003e The org.eclipse.equinox.http bundle has \n\u003e Bundle-RequiredExecutionEnvironment: J2SE-1.4,\n\u003e  J2SE-1.3,\n\u003e  CDC-1.0/Foundation-1.0\n\u003e I would expect this bundle to not even resolve on OSGi/Minimum-1.1 EE.\n\nIn my environment, the bundle does show as RESOLVED when executing a launch configuration as described in the initial report. As a JRE, I\u0027m using a modified WECE 6.1.2 RM/MAX distribution. JCL Max has been removed. All JAR files in the RM JCL ext directory have been removed except for collx.jar. When I look at the Windows-\u003ePreferences-\u003eJava-\u003eInstalled JREs-\u003eExecution Environments window, the JRE is listed as compatible with CDC-1.0/Foundation-1.0 which, I assume, is why it\u0027s resolving. Although the customizations made have effectively resulted in a compliant OSGi/Minimum-1.1 JRE, the information communicated by the VM remains the same as if the complete distribution were being used. I suspect that you\u0027re correct in that if one pointed to a JRE distributed as OSGi/Minimum-1.1 compliant at its core, the bundle would not resolve.",
    "we interogate the JRE to reverse engineer what EE it is.  I suspect that the one you are running \"appears\" to be Foundation 1.0 (or some such). Either that or we can;t figure it out and revert to assuming some high leve JRE.",
    "This is just a follow-up. I haven\u0027t seen any activity related to this defect for a while and was curious as to its status and your intent. Do you no longer intend to maintain compliance with the OSGi/Minimum-1.1 EE within Equinox? Will it be the case that some service implementations are compliant but others are not?",
    "The overall intention is to minimize requirements where feasible/reasonble on a per bundle basis.  there is no Equinox project wide policy on what EE to use (other than trying to minimize the requirements).  Having said that, it would be surprising to find many bundles that needed more than Foundation 1.1.  ",
    "The http service implementation should run fine on a Foundation 1.0 profile.  That is what it states in its Bundle-RequiredExecutionEnvironment.\n\nLooking over several of the other equinox bundles it looks like we do not even specify a BREE header so the intention is not even expressed in these bundles.  At least the http service implementation accurately states that it needs foundation 1.0 or better.  The following bundles need to be evaluated to see what minimum EE they require:\n\norg.eclipse.equinox.device\norg.eclipse.equinox.log\norg.eclipse.equinox.metatype\norg.eclipse.equinox.useradmin\norg.eclipse.equinox.wireadmin\n\nI suspect most/all of these bundles only require min OSGi EE 1.0 but they need to be evaluated to be sure.\n\nChris, can you do this evaluation and set the appropriate BREE headers?",
    "sure, renamed the bug and will provide a patch.",
    "I\u0027m not sure how to interpret the previous comments.\n\nJeff, if i understand you correctly, the Equinox team does not assert compliance with any particular execution environment. The EE that a bundle is ultimately compliant/compatible with is a function of that particular bundle\u0027s needs using a \"feasable/reasonable\" decision matrix. I think we can be certain that bundles implementing functionality defined by the Core and Service Compendium specifications are at least compliant with CDC-1.0/Foundation-1.0 or CDC-1.1/Foundation-1.1 (R4 versus R41). Our concern, however, is that we can only use implementations that are compliant with OSGi/Minimum-1.1. Our hope is that you will use a very strict \"feasonable/reasonable\" approach and keep the implementations compliant with OSGi/Minimum-1.1 if at all possible, as they were in the 3.2.2 release. Our opinion is that while java.text.DateFormat is nice to have, it\u0027s not a good reason, in of itself, to strip away compliance with the minimum EE. In fact, we reported several compliance related defects associated with the use of DateFormat for the 3.2.2 release which were corrected, including the HTTP Service. If DateFormat is the only cause in 3.3, which the exceptions indicate, we hope you will take the same approach.\n\nTom, if I understand you correctly, the current intent is not to make the HTTP Service implementation in 3.3 compliant with the minimum EE.",
    "It is interesting that the 3.2.2 http.service implementation works for you in on OSGi/Minimum-1.1.  The LogTracker service has not changed since the 3.2.0 release.\n\nLooking at the LogTracker class it is a bit silly that it has a hard requirement on DateFormat.  It only needs it in case a LogService is not available.  Even then it is just a nice thing to have to print the timestamp to the console.  Chris, can you look at removing the DateFormat requirement a la refection.  I also find it very strange that the LogTracker class initializes the static vars \"calendar\" and \"dateFormat\" in the constructor?!!!  Seems like these should be instance vars that only get initialized if noLogService method is called.",
    "Chris, note that there are several copies of the LogTracker class in the equinox bundles.  They all seem to have the same issue except the copy in org.eclipse.equinox.event.  We should likely copy the LogTracker class from equinox.event into the other bundles.  See bug 183883 for details on the fix to LogTracker in equinox.event.",
    "(In reply to comment #9)\n\u003e It is interesting that the 3.2.2 http.service implementation works for you in\n\u003e on OSGi/Minimum-1.1.  The LogTracker service has not changed since the 3.2.0\n\u003e release.\n\nYou\u0027re right, Tom. My memory must be hazy. The 3.2.2 HTTP Service does not work on OSGi/Minimum-1.1. In order to use it, we must have a device capable of supporting (and providing) a CDC-1.0/Foundation-1.0 compatible JCL (or some sort of custom, non-standard EE providing the java.text package). For 3.3, I assume we\u0027ll be limited to only CDC-1.1/Foundation-1.1 compatibles due to the addition of the BREE header. Nevertheless, our hope remains that might change in a future release.\n\nThis actually raises an interesting question about the BREE header in terms of the pros and cons. Without it in the manifest, one could take an OSGi/Minimum-1.1 EE and \"tweak\" it only as far as necessary to include the java.text.DateFormat dependency. With it, I presume your only choice is to upgrade to a complete CDC-1.1/Foundation-1.1 (or larger) EE.\n\n",
    "re comment 11. this is fundamentally a problem in the spec.  The BREE mechanism lumps together class library dependencies with VM and language feature dependencies.  For example, your bundle may use JMX so many people will have a tendency to say BREE \u003d Java 1.5 when in fact you can just spec and dependency on the javax.management package, get an implementation and run on Foundation 1.0.  See the Equinox incubator for an example.\n\nThis is forced on you by the spec not allowing the declaration of java.* package dependencies.  If that were allowed, you could for example, use the same approach with java.* as I mentioned above for javax.managemnt.  I recall some recent discussion in the area of relaxing this but it is not likely to happen in a framework near you for a while.\n\nIn the mean time personally I would favor spec\u0027ing your dependencies (including BREE) as strictly as possible and using the Equinox profile mechanisms to define and map profiles as needed.",
    "re comment 8:  That is pretty much it.  As I say, Equinox covers a very wide range of function and scenarios.  If you want to talk about the BREE of particular bundles then you should open bugs for the individual issues and even provide patches.  Note that I totally agree that the value for using a particular language or class lib feature should be high if it is in effect excluding a reasonable and viable use scenario.  The challenge is in measuring \"high\", \"reasonable\" and \"viable\" in that statement. Taken to its logical conclusion, vast swaths of Eclipse should depend only on Minimum EE 1.1 so they can be used in embedded devices etc.  Clearly there is a point where it does not make sense.  Where that point is, is much less clear :-)\n\nSo, rather than throw up our hands, we spec BREEs and record our intentions in an appendix to the plan.  For example, see the end of \n  http://www.eclipse.org/eclipse/development/eclipse_project_plan_3_3.html\n\nWith the upcoming API tooling work we hope to be in a better place to spec, test and maintain these boundaries.\n\nSo, in the end, is this bug just about HTTP service?  Should the summary be changed to something more specific and then the bug closed when the fix is in?",
    "In response to a nudge from John: +1 that we spec the EE the Equinox bundles require, and that we do everything possible to not create unnecessary dependencies that break the spec\u0027d EE.\n\nWhen you look at it from the point of view of running OSGi bundles on a constrained/embedded device, changes in dependencies (caused by such things as using the DateFormat class, etc) should be considered as serious as breaking API.  I like to think of the BREE as being a form of API commitment.\n\nIn John\u0027s case, changing the assumed EE from OSGi Min to OSGi Foundation would likely cause him to no longer be able to use the bundle.\n\nWe\u0027ve already discussed some of these issues in bug 149892, which mentions how to work around not having the beloved DateFormat class.",
    "While there may be a few errors or missing BREEs, I believe we already do what you are asking.  \n\nThe change to use DateFormat should not have happened I suspect and as I understand it, Chris is going to supply a fix. \n\nIs there more to this?\n",
    "nope, we just need to spec our bundles properly.\n\nI didn\u0027t know BREE\u0027s would get people up in such a bunch ;)",
    "(In reply to comment #13)\n\u003e So, in the end, is this bug just about HTTP service?  Should the summary be\n\u003e changed to something more specific and then the bug closed when the fix is in?\n\nThat would honor the original intent of this bug report and be fine with us. The initial summary referred directly to the HTTP Service not being OSGi/Minimum-1.1 compliant. The summary was changed at some point (which is also fine with us). See comment 7.",
    "(In reply to comment #12)\n\u003e This is forced on you by the spec not allowing the declaration of java.*\n\u003e package dependencies.  If that were allowed, you could for example, use the\n\u003e same approach with java.* as I mentioned above for javax.managemnt.  I recall\n\u003e some recent discussion in the area of relaxing this but it is not likely to\n\u003e happen in a framework near you for a while.\n\nIt sounds like you\u0027re referring to the OSGi spec\u0027s prohibition on the system bundle exporting java.* packages. While this would prevent someone from \"bundleizing\", for example, the java.text package and installing it into the framework, one could still add a minimal JAR file to the JRE/JCL ext directory. J9 supports this for sure, but I believe this directory is also part of the JVM specification, although I don\u0027t know whether it\u0027s mandatory or optional.\n\nIf I understand, however, you\u0027re saying that the BREE header was introduced as a measure of protection, with the consequent pros and cons, because a developer cannot declare java.* imports within the Import-Package header. This seems like a high price to pay to me. I like the finer granularity that explicit package imports provide. Are we being \"dumbed down\"?",
    "Others with more OSGi history than me will have to comment on the origin and shape of BREE but in the end what you say is correct.  BTW, the restriction I am refering to is on import package.  I\u0027m actually not sure that there is a restriction on exporting java.* but it is completely moot if you cannot import. This restriction forces us to conflate two somewhat unrelated things of class lib and VM/language feature into one BREE value.\n\nFWIW, to support Apache Harmony\u0027s use of PDE and OSGi metadata we added some flags to allow bundles, at least at development time, to import/export java.*. I don\u0027t for the life of me recall what they are but there is likely a bug report around that describes what is supported.  I\u0027m not sure that this is a good thing in this particular situation but thought I would mention it.",
    "There may still be discussion or work going on regarding this; however, I noticed that the 3.3.1 version as well as the head stream contents have the same issues. So, if it\u0027s helpful, I\u0027m attaching a patch that enables the http service bundle to run on OSGi/Minimum-1.1. The patch is based on the R3_3_1 version from the repository. The changes were very simple and contained with the LogTracker class and do the same thing that the LogTracker within the event admin bundle does. They also address the issues raised in comment 9. I also added OSGi/Minimum-1.1 to the BREE header.\n\nI noticed the bundle would not compile against an osgi minimum JCL even with the changes due to a dependency on javax.net.ServerSocketFactory which, as far as I can tell, does not appear until J2SE-1.4. The bundle works fine as long as you don\u0027t try and create a new HTTP Service listening on port 443 using the ManagedServiceFactory which causes runtime exceptions since the class does not exist. Since none of the classes necessary for supporting HTTPS are available in osgi min anyway, I guess I\u0027m ok with this state of affairs since I\u0027m happy enough just to be able to use HTTP. However, this ultimately raises another question in my mind regarding the utility of the BREE header. Is it really interpreted so leniently that it\u0027s acceptable to declare support for an EE even if the bundle can\u0027t compile against it (recall that CDC-1.0/Foundation-1.0 and J2SE-1.3 were already declared in the manifest)?\n\nI\u0027m wondering if the best solution might ultimately be to put the HTTPS support in a separate bundle with a BREE header of J2SE-1.4 only...",
    "Created an attachment (id\u003d80099)\nAttachment referenced in comment 20.\n\n",
    "the availability of HTTPS support is independent of the JRE level.  That is, you can get HTTPS support as an add-on to random JREs.  The real problem is that BREE conflates the class lib level and the JVM/language level.\n\nIn any event, the direction you are headed is good.  The way we can approach this is to have API stubs for compilation that contain the required extra classes. \n\nIt is IMHO perfectly reasonable to have a bundle that has decreased function if running in less than complete execution environments.  We do this quite a bit.  If it is really problematic then you could define a fragment but would still have some issues defining when the fragment is applicable due to the BREE issue described above.",
    "(In reply to comment #22)\nThe real problem (for us) right now is that the current bundle will not run in OSGi/Minimum-1.1 due to a dependency on DateFormat. Currently, the bundle is completely unusable, within this context, because it blows up in a constructor where an instance of DateFormat is created. Would you be willing to accept the provided patch, or provide functionally similar modifications, so that it is usable in OSGi/Minimum-1.1?",
    "Created an attachment (id\u003d80363)\nhttp patch\n\nThanks John.  I modified the patch a bit to be a direct copy of the LogTracker class from the eventAdmin implementation.  I also added an optional Import-Package for the javax.net package.  Without this the https support will not work with the strict OSGi parent delegation.  I will release this patch once you confirm it fixes the problem in your environment.",
    "(In reply to comment #24)\n\u003e Created an attachment (id\u003d80363) [details]\n\u003e http patch\n\u003e Thanks John.  I modified the patch a bit to be a direct copy of the LogTracker\n\u003e class from the eventAdmin implementation.  I also added an optional\n\u003e Import-Package for the javax.net package.  Without this the https support will\n\u003e not work with the strict OSGi parent delegation.  I will release this patch\n\u003e once you confirm it fixes the problem in your environment.\n\nConfirmed. This patch will allow the bundle to function within an osgi minimum 1.1 runtime and provide http functionality. Users should expect runtime errors if an attempt is made to create an http service instance on port 443 if either (a) the runtime is not J2SE-1.4 or higher or (b) the required class files (e.g. javax.net.ServerSocketFactory) have not been provided via some other mechanism such as JCL extensions or library bundles.\n\nThanks much. We appreciate the support. Would it be possible to target this for 3.3.2?",
    "Taking ownership and renaming bug back to its original intent.  Opened bug 206373 for tracking the other equinox bundles that do not have BREEs specified.  Jeff, do you approve such a fix for 3.3.2?",
    "Patch released to HEAD for 3.4.  Leaving bug open for 3.3.2 consideration.",
    "Patch released to 3.3.2.  I modified the bundle version to be 1.0.101 in the 3.3.2 stream to be in line with the eclipse versioning guidelines.",
    "Contributed keyword added to recognize John\u0027s contribution to the fix."
  ],
  "commentCreationDates": [
    "2007-07-18T01:29:03+02:00",
    "2007-07-18T05:26:44+02:00",
    "2007-07-18T18:13:57+02:00",
    "2007-07-18T19:51:28+02:00",
    "2007-08-07T17:01:04+02:00",
    "2007-08-07T17:12:33+02:00",
    "2007-08-07T17:26:13+02:00",
    "2007-08-07T17:33:39+02:00",
    "2007-08-07T18:15:26+02:00",
    "2007-08-07T18:56:40+02:00",
    "2007-08-07T19:31:01+02:00",
    "2007-08-08T00:29:38+02:00",
    "2007-08-08T02:24:45+02:00",
    "2007-08-08T02:39:29+02:00",
    "2007-08-08T04:10:09+02:00",
    "2007-08-08T14:39:46+02:00",
    "2007-08-08T16:36:15+02:00",
    "2007-08-08T17:12:41+02:00",
    "2007-08-08T18:16:58+02:00",
    "2007-08-08T19:26:20+02:00",
    "2007-10-11T01:45:37+02:00",
    "2007-10-11T01:46:24+02:00",
    "2007-10-15T02:26:19+02:00",
    "2007-10-15T16:56:19+02:00",
    "2007-10-15T17:52:50+02:00",
    "2007-10-15T21:16:58+02:00",
    "2007-10-15T21:47:21+02:00",
    "2007-10-15T21:54:03+02:00",
    "2007-10-16T15:46:31+02:00",
    "2007-10-16T15:50:35+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.osgi.framework.BundleException",
      "message": "Exception in org.eclipse.equinox.http.Activator.start() of bundle org.eclipse.equinox.http.",
      "elements": [
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
          "source": "BundleContextImpl.java:1018"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
          "source": "BundleContextImpl.java:974"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:346"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
          "source": "AbstractBundle.java:260"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
          "source": "AbstractBundle.java:252"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkCommandProvider._start",
          "source": "FrameworkCommandProvider.java:260"
        },
        {
          "method": "java.lang.reflect.AccessibleObject.invokeV",
          "source": "AccessibleObject.java:205"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:259"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkCommandInterpreter.execute",
          "source": "FrameworkCommandInterpreter.java:145"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.docommand",
          "source": "FrameworkConsole.java:291"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.console",
          "source": "FrameworkConsole.java:276"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.run",
          "source": "FrameworkConsole.java:218"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:718"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.NoClassDefFoundError",
        "message": "java.text.DateForm",
        "elements": [
          {
            "method": "atorg.eclipse.equinox.http.LogTracker.\u003cinit\u003e",
            "source": "LogTracker.java:48"
          },
          {
            "method": "org.eclipse.equinox.http.Http.initialize",
            "source": "Http.java:51"
          },
          {
            "method": "org.eclipse.equinox.http.Http.\u003cinit\u003e",
            "source": "Http.java:42"
          },
          {
            "method": "org.eclipse.equinox.http.Activator.start",
            "source": "Activator.java:32"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run",
            "source": "BundleContextImpl.java:999"
          },
          {
            "method": "java.security.AccessController.doPrivileged",
            "source": "AccessController.java:222"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
            "source": "BundleContextImpl.java:993"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
            "source": "BundleContextImpl.java:974"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
            "source": "BundleHost.java:346"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
            "source": "AbstractBundle.java:260"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
            "source": "AbstractBundle.java:252"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.FrameworkCommandProvider._start",
            "source": "FrameworkCommandProvider.java:260"
          },
          {
            "method": "java.lang.reflect.AccessibleObject.invokeV",
            "source": "AccessibleObject.java:205"
          },
          {
            "method": "java.lang.reflect.Method.invoke",
            "source": "Method.java:259"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.FrameworkCommandInterpreter.execute",
            "source": "FrameworkCommandInterpreter.java:145"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.docommand",
            "source": "FrameworkConsole.java:291"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.console",
            "source": "FrameworkConsole.java:276"
          },
          {
            "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.run",
            "source": "FrameworkConsole.java:218"
          },
          {
            "method": "java.lang.Thread.run",
            "source": "Thread.java:718"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 0,
      "bugId": "196890",
      "date": "2007-07-18T01:29:03+02:00",
      "product": "Equinox",
      "component": "Bundles",
      "severity": "normal"
    }
  ],
  "groupId": "196890",
  "bugId": "196890",
  "date": "2007-07-18T01:29:03+02:00",
  "product": "Equinox",
  "component": "Bundles",
  "severity": "normal"
}