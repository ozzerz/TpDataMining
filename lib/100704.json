{
  "comments": [
    "I have experienced some problems with eclipse 3.1RC3 and some update sites like\nAntlrEclipse (http://antlreclipse.sourceforge.net/updates/) and RubyEclipse\n(http://rubyeclipse.sf.net/updatesite). Frequntly I get errors updating from\nthese site. Using retry or cancel often gives new errors (like \"Already\nconnected\" if I retry). I have listed two frequent errors below:\n\nException 1) java.io.IOException: InputStream ended after 57344 bytes (expected\n2104228 )\nat\norg.eclipse.update.internal.core.UpdateManagerUtils.copy(UpdateManagerUtils.java:897)\nat\norg.eclipse.update.core.FeatureContentProvider.asLocalReference(FeatureContentProvider.java:278)\nat\norg.eclipse.update.internal.core.FeaturePackagedContentProvider.getPluginEntryArchiveReferences(FeaturePackagedContentProvider.java:165)\nat\norg.eclipse.update.internal.operations.UpdateUtils.downloadFeatureContent(UpdateUtils.java:627)\nat\norg.eclipse.update.internal.ui.wizards.InstallWizard2.download(InstallWizard2.java:405)\nat\norg.eclipse.update.internal.ui.wizards.InstallWizard2.access$3(InstallWizard2.java:394)\nat\norg.eclipse.update.internal.ui.wizards.InstallWizard2$4.run(InstallWizard2.java:350)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)\n\n\nException 2) java.lang.IllegalStateException: Already connected\n\tat java.net.URLConnection.setRequestProperty(URLConnection.java:1016)\n\tat\nsun.net.www.protocol.http.HttpURLConnection.setRequestProperty(HttpURLConnection.java:1919)\n\tat\norg.eclipse.update.internal.core.HttpResponse.getInputStream(HttpResponse.java:46)\n\tat\norg.eclipse.update.core.ContentReference.getPartialInputStream(ContentReference.java:166)\n\tat\norg.eclipse.update.core.FeatureContentProvider.asLocalReference(FeatureContentProvider.java:225)\n\tat\norg.eclipse.update.internal.core.FeaturePackagedContentProvider.getPluginEntryArchiveReferences(FeaturePackagedContentProvider.java:165)\n\tat\norg.eclipse.update.internal.operations.UpdateUtils.downloadFeatureContent(UpdateUtils.java:627)\n\tat\norg.eclipse.update.internal.ui.wizards.InstallWizard2.download(InstallWizard2.java:405)\n\tat\norg.eclipse.update.internal.ui.wizards.InstallWizard2.access$3(InstallWizard2.java:394)\n\tat\norg.eclipse.update.internal.ui.wizards.InstallWizard2$4.run(InstallWizard2.java:350)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)",
    "This is a major regression introduced between 3.1M4 and 3.1M5, probably with a \nfix for bug 84103.\n\nPrior to 3.0, when connection was broken.  User could restart installation \nwizard and continue downloading features/plugins.  Features already downloaded \nwere preserved.\n\nSince 3.0, http download from a given offset were added.  When connection was \nbroken, user could restart download from the middle of a feature/plugin that \nwas interrupted.  With each restart user is closer (at least not further) from \nthe end of download process.\n\nIn 3.1M5, the broken connection is being preserved, thus feature/plugin cannot \nbe redownloaded from the middle, or even from the beginning of a file.  The \nexception #2 always occurs.  It is impossible to restart installation without \nexiting and restarting the workbench.  When workbench is exited and restarted \nall downloaded features/plug-ins are lost and installation starts from scratch.\nIf the server or connection is little unstable, it is practically impossible \nto update a medium size or larger product.\n\nI think it has to be fixed for 3.1.\n\nDorian,\nTo reproduce, try installing any feature from remote site, unplug the network \ncable during downloading of features and plug-ins.  Wait few seconds for the \nerror dialog to pop up.  Plug-in the cable back.  Click retry, or try \ninstalling the feature again.",
    "Konrad, what is the proposed fix? We cannot evaluate the risk/value ratio for \nRC4 unless we have the patch we can examine.",
    "Thanks Konrad. Just looking at the code done for fixing bug 84103 I can see \nwhy this would happen.\nI haven\u0027t looked at this yet, but I was wondering if there is some \nheader/field in the connection that can be tested prior to reusing the \nconnection. It this worked, then the connection can be reused as long as it \nappears healthy, but will be discared and re-created when needed. Do you have \nany thoughts?\nI\u0027d say this should be at least a P2.",
    "Yes, so far this looks like a must have for RC4.",
    "One thought I have is to do get a connection status  ini HttpResonse when the \noffset is positive, that is, when we have this code pattern:\n\nif (connection \u003d\u003d null)\n   connection \u003d url.openConnection();\nif (offset \u003e 0)\n   connection.setRequestProperty(\"Range\", \"bytes\u003d\" + offset + \"-\"); \n\nthen add a this code first (or something along these lines)\n\nif (connection !\u003d null \u0026\u0026 offset \u003e 0 \u0026\u0026 HttpURLConnection) \nconnection).getResponseCode() !\u003d HTTP_OK) {\n   // perhaps create a new connection here\n}",
    "Whatever the fix, we must:\n\n1) Show that the it fixes the reported problem\n2) Show that it does not affect functionality that works in RC3",
    "Created an attachment (id\u003d23525)\n100704 o.e.update.core patch.txt\n\nOne of the possibilities to fix it is to revert changes for bug 84103.\nMost methods of HTTPResponse, like getStatusCode() operate without any regard\non whether requests fields have been set, whether connection has been connected\nor it has been broken.\tFix 84103 should have not made it in, without\nreimplementing HTTPResponse properly.\n\nIf you want to leave the fix in, we can try reusing the connection in most\ncases when everything is OK, but create new ones when something failed\npreviously.\n\nChecking header field is wrong.  While it can indicate that connection cannot\nbe established or failed at the very beginning, it does not guaranteee anything\nelse.  Connection can be broken right after the headers got trasfered.\tIn\nfact, exposing these headers from HttpResponse so that they are queried\nseparately in whatever order, by the rest of the code, is the whole cause of\nextra connections and this bug.\n\n\nAttached is a patch that leaves the fix for bug 100704 in, and fixes known\nproblems.\n\n1.  The change to add \"|| offset \u003e 0\" creates a new connection for receiving\npartial input stream, because the original connection is already connected and\nspoiled by some call to getStatusCode().\n\n2.  Remaining change ensures that when InputStream is obtained and read from by\nsome calee, problems with connection that manifest themselves as IOException\nare not just lost in the callee stack, and connections looks like a good new\none.  The code ensures the connection is discarded so it is not reused in the\nfuture.\n\nThe patch may introduce some extra connections when connection is unstable. \nThis is unavoidable and depends on what methods and in which order are called\non HttpResponse.   When connections are working good, there should be no extra\nconnections and benefits of fix for bug 84103 are still there.\n\nPlease evaluate the patch.  I am not strongly for it, but I have not seen any\nother good alternative to reveting fix 84103.",
    "Apply the patch over HttpResponse, not over the o.e.update.core project.",
    "Thanks Konrad. The patch looks fine but I also need to understand some of your \ncomments:\n1. Can you comment on why checking the headers  in\n\nif (connection !\u003d null \u0026\u0026 offset \u003e 0 \u0026\u0026 HttpURLConnection) \nconnection).getResponseCode() !\u003d HTTP_OK)\n\nwould cause extra connections? To my knowledge, if the connection is there, \nbeen used before, this should not have extra overhead. If the connection was \nbroken, then the status should already be !\u003d HTTP_OK.\n\n2. the patch nullifies the connection upon ioexception in the input stream, \nwhich should be pragmatic enough to re-create the connection. Are there any \nscenarios when ioexceptions are thrown and we are unnecessarily re-creating \nthe connection? If not, then I think the patch is worth a +1 for rc4",
    "1. if (connection !\u003d null \u0026\u0026 offset \u003e 0 \u0026\u0026 HttpURLConnection) \nconnection).getResponseCode() !\u003d HTTP_OK)\n\nI believe, this would would not cause extra connections, but would not be \nenough to recover from a broken input stream.  If the connection is \nestablished, headers transfered (with response code), and connection breaks, \nthe expression would still evaluate to false.\n\n2.  \u003e Are there any scenarios when ioexceptions are thrown and we are\n\u003eunnecessarily re-creating the connection\nI don\u0027t think can happen when connections are stable.  When they are not, and \ninput stream breaks, the code should not access anything else from this \nconnection unless it is retrying, but there are few more calls to HttpResponse \nbeing made.  I have not investigated why, but frankly, I don\u0027t care if there \nis some extra access to this connection (by some calls to HttpResponse) after \nit is broken and causes some (like 3 or so) unnecessary connection to the \nserver.  They might even be reused when code tries to redownload the feature, \nand legitimately accesses the connection again.  If not, there might be extra \nconnections created just for users with unstable networks (or servers).  At \nthis point I don\u0027t think we have a time to investigate if this solution is \nperfect on the point of extra connections after the donwload failed.  I don\u0027t \nsign up to eliminate that for 3.1.\n\nToday I see it is unbelievable difficult to simulate connection broken in a \nmiddle while here a work.  The network characteristic here (during day hours) \nis that I wait about 5 second for establishing connection to each plug-in jar, \nbut then it downloads in fraction of a second, that I don\u0027t even see the \nnumbers of bytes downloaded.  It was much more smooth and predictable over \nADSL at home (on the weekend).\n\n",
    "Thanks Konrad.\n\n+1 for RC4",
    "Dejan,\nAnother +1 is needed.",
    "+1\n\nNeeds paranoid testing.",
    "Fix released.",
    "*** Bug 101268 has been marked as a duplicate of this bug. ***",
    "Verified that cannot get the problem anymore.  Duplicate reporter also \nverified."
  ],
  "commentCreationDates": [
    "2005-06-18T17:45:54+02:00",
    "2005-06-19T18:32:36+02:00",
    "2005-06-20T02:30:50+02:00",
    "2005-06-20T02:33:56+02:00",
    "2005-06-20T02:36:56+02:00",
    "2005-06-20T02:54:22+02:00",
    "2005-06-20T03:04:13+02:00",
    "2005-06-20T05:49:28+02:00",
    "2005-06-20T06:10:47+02:00",
    "2005-06-20T15:18:29+02:00",
    "2005-06-20T17:07:30+02:00",
    "2005-06-20T17:18:07+02:00",
    "2005-06-21T23:00:48+02:00",
    "2005-06-21T23:34:49+02:00",
    "2005-06-21T23:42:10+02:00",
    "2005-06-22T17:07:35+02:00",
    "2005-06-24T00:37:05+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.IOException",
      "message": "InputStream ended after 57344 bytes (expected 2104228 )",
      "elements": [
        {
          "method": "org.eclipse.update.internal.core.UpdateManagerUtils.copy",
          "source": "UpdateManagerUtils.java:897"
        },
        {
          "method": "org.eclipse.update.core.FeatureContentProvider.asLocalReference",
          "source": "FeatureContentProvider.java:278"
        },
        {
          "method": "org.eclipse.update.internal.core.FeaturePackagedContentProvider.getPluginEntryArchiveReferences",
          "source": "FeaturePackagedContentProvider.java:165"
        },
        {
          "method": "org.eclipse.update.internal.operations.UpdateUtils.downloadFeatureContent",
          "source": "UpdateUtils.java:627"
        },
        {
          "method": "org.eclipse.update.internal.ui.wizards.InstallWizard2.download",
          "source": "InstallWizard2.java:405"
        },
        {
          "method": "org.eclipse.update.internal.ui.wizards.InstallWizard2.access$3",
          "source": "InstallWizard2.java:394"
        },
        {
          "method": "org.eclipse.update.internal.ui.wizards.InstallWizard2$4.run",
          "source": "InstallWizard2.java:350"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "100704",
      "date": "2005-06-18T17:45:54+02:00",
      "product": "Platform",
      "component": "Update",
      "severity": "critical"
    },
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Already connected",
      "elements": [
        {
          "method": "java.net.URLConnection.setRequestProperty",
          "source": "URLConnection.java:1016"
        },
        {
          "method": "sun.net.www.protocol.http.HttpURLConnection.setRequestProperty",
          "source": "HttpURLConnection.java:1919"
        },
        {
          "method": "org.eclipse.update.internal.core.HttpResponse.getInputStream",
          "source": "HttpResponse.java:46"
        },
        {
          "method": "org.eclipse.update.core.ContentReference.getPartialInputStream",
          "source": "ContentReference.java:166"
        },
        {
          "method": "org.eclipse.update.core.FeatureContentProvider.asLocalReference",
          "source": "FeatureContentProvider.java:225"
        },
        {
          "method": "org.eclipse.update.internal.core.FeaturePackagedContentProvider.getPluginEntryArchiveReferences",
          "source": "FeaturePackagedContentProvider.java:165"
        },
        {
          "method": "org.eclipse.update.internal.operations.UpdateUtils.downloadFeatureContent",
          "source": "UpdateUtils.java:627"
        },
        {
          "method": "org.eclipse.update.internal.ui.wizards.InstallWizard2.download",
          "source": "InstallWizard2.java:405"
        },
        {
          "method": "org.eclipse.update.internal.ui.wizards.InstallWizard2.access$3",
          "source": "InstallWizard2.java:394"
        },
        {
          "method": "org.eclipse.update.internal.ui.wizards.InstallWizard2$4.run",
          "source": "InstallWizard2.java:350"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "100704",
      "date": "2005-06-18T17:45:54+02:00",
      "product": "Platform",
      "component": "Update",
      "severity": "critical"
    }
  ],
  "groupId": "100704",
  "bugId": "100704",
  "date": "2005-06-18T17:45:54+02:00",
  "product": "Platform",
  "component": "Update",
  "severity": "critical"
}