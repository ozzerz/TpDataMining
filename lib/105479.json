{
  "comments": [
    "The aspect below won\u0027t compile (\u0027The return type is incompatible\u0027) using the \nlatest from CVS as of 27-7-05 \n\npublic aspect ReturnTypeTest {\n  private interface Test {\n    Object getId();\n  }\n \n  class StringTest {\n    public String getId() {\n      return null;\n    }\n  }\n \n  declare parents : StringTest implements Test;\n}\n\nfrom Andy Clement: \n\nnote that this pure Java version of the program doesn\u0027t compile\nwith ajc but compiles with javac:\n\npublic class ReturnTypeTest {\n  private interface Test {\n    Object getId();\n  }\n \n  class StringTest implements Test {\n    public String getId() {\n      return null;\n    }\n  }\n}\n\nwhich tells us it is probably occurring because we haven\u0027t upgraded to\nthe final version of the 3.1 eclipse JDT compiler.",
    "tagging as something that will be fixed when we upgrade to the 3.1 final compiler.",
    "The pure java scenario is fixed now we have moved to the final 3.1 JDT compiler.\n The AspectJ variant that uses declare parents still doesnt work:\n\nK:\\ws\\aspectj_ws\\A\\ReturnTypeTest.java:1 [error] The return type is incompatible\nwith ReturnTypeTest$Test.getId()\n(no source information available)\n\n1 error\n\nthats with the build dated 20050824100440\n\nit might possibly be fixed by another change I\u0027m about to put in...",
    "for M4",
    "finally fixed! At the last hurdle, the test for assignability of return types in\nbinary weaving of declare parents was the wrong way round.\n\nFix commited in tree and will be available in published build from AspectJ\ndownloads page later on today.",
    "fix now available in latest published build",
    "I have verified that covariance in return types now generates no compiler\nerrors; thank you.\n\nHowever, the aspect below compiles, but loading the ReturnTypeTester class\nresults in a java.lang.AbstractMethodError when the\n    Object Test.getId()\nis called inside\n    int Test.hashCode()\n \n(see stack trace at bottom)\n\nThanks,\nReid\n\n/*\n * ReturnTypeTest.java\n *\n * Created on September 1, 2005, 3:26 PM\n *\n */\n\n\npublic aspect ReturnTypeTest {\n  private interface Test {\n    Object getId();\n    int hashCode();\n  }\n \n  public int Test.hashCode() {\n    return getId().hashCode();\n  }\n \n  declare parents : ReturnTypeTester implements Test;\n}\n\n/*\n * ReturnTypeTester.java\n *\n * Created on September 1, 2005, 3:28 PM\n *\n */\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class ReturnTypeTester {\n  static Set\u003cReturnTypeTester\u003e set \u003d new HashSet\u003cReturnTypeTester\u003e();\n  static {\n    ReturnTypeTester tester \u003d new ReturnTypeTester();\n    set.add(tester);\n  }\n \n  public String getId() {\n    return \"id\";\n  }\n}\n\nstack trace:\n\njava.lang.AbstractMethodError: ReturnTypeTester.getId()Ljava/lang/Object;\n        at\nReturnTypeTest.ajc$interMethod$ReturnTypeTest$ReturnTypeTest$Test$hashCode(ReturnTypeTest.java:16)\n        at ReturnTypeTester.hashCode(ReturnTypeTester.java:1)\n        at java.util.HashMap.hash(HashMap.java:264)\n        at java.util.HashMap.put(HashMap.java:382)\n        at java.util.HashSet.add(HashSet.java:194)\n        at ReturnTypeTester.\u003cclinit\u003e(ReturnTypeTester.java:15)\n\n\n\n\n\n\n\n\n",
    "I haven\u0027t been able to reproduce this bug this morning, I\u0027ve tried variants both\nwith all types in the same file, and with the types declared in separate files.\n\nHere\u0027s my test program, based on your input:\n\nimport java.util.HashSet;\nimport java.util.Set;\n\naspect ReturnTypeTest {\n  private interface Test {\n    Object getId();\n    int hashCode();\n  }\n \n  public int Test.hashCode() {\n\tSystem.out.println(\"in Test.hashCode()\");\n    return getId().hashCode();\n  }\n \n  declare parents : ReturnTypeTester implements Test;\n}\n\nclass ReturnTypeTester {\n  static Set\u003cReturnTypeTester\u003e set \u003d new HashSet\u003cReturnTypeTester\u003e();\n  static {\n    ReturnTypeTester tester \u003d new ReturnTypeTester();\n    set.add(tester);\n  }\n \n  public String getId() {\n    return \"id\";\n  }\n}\n\npublic class pr105479part2 {\n\t\n\tpublic static void main(String[] args) {\n\t\tReturnTypeTester rtt \u003d new ReturnTypeTester();\n\t\trtt.hashCode();\n\t\tSystem.out.println(rtt.getId());\n\t\tif (rtt.hashCode() !\u003d \"id\".hashCode()) throw new \n                     RuntimeException(\"dispatch failure\");\n\t}\n\t\n}\n\nand the test specification:\n\n    \u003cajc-test dir\u003d\"bugs150\" pr\u003d\"105479\" \n              title\u003d\"override and covariance with decp - runtime\"\u003e\n        \u003ccompile files\u003d\"pr105479part2.aj\" options\u003d\"-1.5\"/\u003e\n        \u003crun class\u003d\"pr105479part2\"\u003e\n            \u003cstdout\u003e\n                \u003cline text\u003d\"in Test.hashCode()\"/\u003e\n                \u003cline text\u003d\"in Test.hashCode()\"/\u003e\n                \u003cline text\u003d\"id\"/\u003e\n                \u003cline text\u003d\"in Test.hashCode()\"/\u003e\n            \u003c/stdout\u003e\n        \u003c/run\u003e\n    \u003c/ajc-test\u003e\n\nIs there anything else present in your application that could be contributing to\ntriggering the bug? Some advice applying to one of the methods involved perhaps?\nDoes the program in this comment compile and run for you successfully giving the\nexpected output? \n\nThanks, Adrian.",
    "We\u0027d like to get a fix for this into 1.5.0 RC1 if we can, but need to be able to reproduce the failure first. \nAre you doing any binary weaving in this scenario perhaps??",
    "Sorry I\u0027ve not had more time to address this.  I do compile-time binary weaving.\nI will send more info after I make sure no other advice affects this class, but\nin the meantime here is a new version of the test class (the advice is\nunchanged) and the resulting output.  \n\npublic class ReturnTypeTester {\n  static Set\u003cReturnTypeTester\u003e set \u003d new HashSet\u003cReturnTypeTester\u003e();\n  public static void main(String[] args ) {\n    ReturnTypeTester tester \u003d new ReturnTypeTester();\n    Class[] classes \u003d tester.getClass().getInterfaces();\n    for(Class clas : classes) {\n      System.out.println(\"clas \" + clas);\n    }\n    Method[] methods \u003d tester.getClass().getMethods();\n    for(Method method : methods) {\n      System.out.println(\"method \" + method);\n    }\n    Field[] fields \u003d tester.getClass().getFields();\n    for(Field field : fields) {\n      System.out.println(\"field \" + field);\n    }\n    System.out.println(\"here\");\n    tester.hashCode();\n    System.out.println(tester.getId());\n    if (tester.hashCode() !\u003d \"id\".hashCode()) throw new \n         RuntimeException(\"dispatch failure\");\n    \n    set.add(tester);\n  }\n  \n  public String getId() {\n    return \"id\";\n  }\n  \n}\n\nclas interface ReturnTypeTest$Test\nmethod public int ReturnTypeTester.hashCode()\nmethod public static void ReturnTypeTester.main(java.lang.String[])\nmethod public java.lang.String ReturnTypeTester.getId()\nmethod public final native java.lang.Class java.lang.Object.getClass()\nmethod public final native void java.lang.Object.wait(long) throws\njava.lang.InterruptedException\nmethod public final void java.lang.Object.wait(long,int) throws\njava.lang.InterruptedException\nmethod public final void java.lang.Object.wait() throws\njava.lang.InterruptedException\nmethod public boolean java.lang.Object.equals(java.lang.Object)\nmethod public final native void java.lang.Object.notify()\nmethod public final native void java.lang.Object.notifyAll()\nmethod public java.lang.String java.lang.Object.toString()\nmethod public abstract java.lang.Object aspects.ReturnTypeTest$Test.getId()\nhere\njava.lang.AbstractMethodError: ReturnTypeTester.getId()Ljava/lang/Object;\n        at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:172)\n        at org.apache.tools.ant.taskdefs.Java.run(Java.java:705)\n        at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:178)\n        at org.apache.tools.ant.taskdefs.Java.execute(Java.java:84)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1214)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1062)\n        at\norg.apache.tools.ant.module.bridge.impl.BridgeImpl.run(BridgeImpl.java:234)\n        at\norg.apache.tools.ant.module.run.TargetExecutor.run(TargetExecutor.java:242)\n        at org.netbeans.core.execution.RunClassThread.run(RunClassThread.java:125)\nCaused by: java.lang.AbstractMethodError: ReturnTypeTester.getId()Ljava/lang/Object;\n        at\naspects.ReturnTypeTest.ajc$interMethod$aspects_ReturnTypeTest$aspects_ReturnTypeTest$Test$hashCode(ReturnTypeTest.java:20)\n        at ReturnTypeTester.hashCode(ReturnTypeTester.java:1)\n        at ReturnTypeTester.main(ReturnTypeTester.java:35)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:193)\n        at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:130)\n        ... 12 more\n--- Nested Exception ---\njava.lang.AbstractMethodError: ReturnTypeTester.getId()Ljava/lang/Object;\n        at\naspects.ReturnTypeTest.ajc$interMethod$aspects_ReturnTypeTest$aspects_ReturnTypeTest$Test$hashCode(ReturnTypeTest.java:20)\n        at ReturnTypeTester.hashCode(ReturnTypeTester.java:1)\n        at ReturnTypeTester.main(ReturnTypeTester.java:35)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:193)\n        at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:130)\n        at org.apache.tools.ant.taskdefs.Java.run(Java.java:705)\n        at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:178)\n        at org.apache.tools.ant.taskdefs.Java.execute(Java.java:84)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1214)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1062)\n        at\norg.apache.tools.ant.module.bridge.impl.BridgeImpl.run(BridgeImpl.java:234)\n        at\norg.apache.tools.ant.module.run.TargetExecutor.run(TargetExecutor.java:242)\n        at org.netbeans.core.execution.RunClassThread.run(RunClassThread.java:125)",
    "Created an attachment (id\u003d28941)\njar containing aspect and test class\n\nrtt.jar with just test class and aspect produces the exception for me when\nusing the ant target below.\n\n  \u003ctarget name\u003d\"run\" description\u003d\"run\"\u003e\n       \u003cjava classname\u003d\"com.imageworks.ejb.ReturnTypeTester\"\u003e\n\t \u003cclasspath\u003e\n\t    \u003cpath refid\u003d\"aspectj.jars\"/\u003e\n\t    \u003cpathelement location\u003d\"rtt.jar\" /\u003e\n\t \u003c/classpath\u003e\n       \u003c/java\u003e\n   \u003c/target\u003e\n",
    "Ok.  This appears to be a missing bridge method.  Because the signature of getId\nin the subtype is \u0027String getId()\u0027 and yet the signature on the interface was\n\u0027Object getId()\u0027 then we need to create a forwarding bridge method in the\nsubtype called \u0027Object getId()\u0027 that simply delegates to \u0027String getId()\u0027.  If I\ndisassemble the class file attached in the zip at the end of the bug, I find\nthese set of methods in the type:\n\npublic class com.imageworks.ejb.ReturnTypeTester extends java.lang.Object implem\nents com.imageworks.ejb.aspects.rtt.ReturnTypeTest$Test{\n    static java.util.Set set;\n    public com.imageworks.ejb.ReturnTypeTester();\n    public static void main(java.lang.String[]);\n    public java.lang.String getId();\n    static {};\n    public int hashCode();\n}\n\nwith no bridge method.  If I disassemble my version of the scenario, I get:\n\npublic class ReturnTypeTester extends java.lang.Object implements ReturnTypeTest\n$Test{\n    static java.util.Set set;\n    static {};\n    public ReturnTypeTester();\n    public java.lang.String getId();\n    public static void main(java.lang.String[]);\n    public java.lang.Object getId();  \u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c here\n    public int hashCode();\n}\n\nsee the extra bridge method for getId().\n\nSo...  can I ask, what level of the compiler are you currently seeing the\nproblem on (or what did you use to build your .class files for the zip?)\n\nalso, you say you are doing \u0027compile-time binary weaving\u0027 - I\u0027m not quite sure\nwhat that means.  Are you binary weaving the aspect after compiling the two\nsource files separately?  If you are then I know why it fails - as this scenario\nfails for me exactly as you describe:\n\njavac ReturnTypeTester.java\najc ReturnTypeTest.java\najc -inpath . -d output\n\nthen running the .class files in output:\n\nD:\\temp\\pr105479\\poo\u003ejava ReturnTypeTester\nException in thread \"main\" java.lang.AbstractMethodError: ReturnTypeTester.getId\n()Ljava/lang/Object;\n        at ReturnTypeTest.ajc$interMethod$ReturnTypeTest$ReturnTypeTest$Test$has\nhCode(ReturnTypeTest.java:8)\n        at ReturnTypeTester.hashCode(ReturnTypeTester.java:1)\n        at java.util.HashMap.hash(HashMap.java:264)\n        at java.util.HashMap.put(HashMap.java:382)\n        at java.util.HashSet.add(HashSet.java:194)\n        at ReturnTypeTester.\u003cclinit\u003e(ReturnTypeTester.java:8)\n\nand the reason it does is covered in bug 108101 case #3.  ",
    "I\u0027ve checked in a fix for the binary weaving case.  We now correctly create the\nbridge method and it all works fine.",
    "I have verified the bridge methods supporting covariance are inserted by ajc\nwhen weaving \u0027decp\u0027 relationships into javac-produced .class files.  I usually\ndo it this way--is there an advantage to building and weaving entirely with ajc?\n\nI usually do daily check out and builds of the ajc, and then \u0027test\u0027 it by\nbuilding my applications.  It\u0027s not a lot of support, but I deeply appreciate\nthe oustanding work you guys are doing.\n\nThanks, Reid.\n\nP.S. The signature of the bridge \u0027Object getId()\u0027 method is:\nmethod public volatile java.lang.Object com.imageworks.ejb.ReturnTypeTester.getId()\nWhat does volatile as a return-type modifier mean?\n",
    "Some of the modifier flags are \u0027reused\u0027 here and there - the volatile is likely\nto be appearing as it clashes with the bridge modifier which I suspect has the\nsame number (i dont have the spec to hand to check).  So far sorting this out\nhasnt become urgent...so I haven\u0027t done it.\n\nIf the compiler gets full control from the start from source through to woven\n.class files then it will make far fewer mistakes (bugs!) creating bridge\nmethods.  However it\u0027s very useful that you run the way you do since it\nhighlights all the bugs in binary weaving ;)\n\nthanks for checking the fix."
  ],
  "commentCreationDates": [
    "2005-07-28T18:55:31+02:00",
    "2005-08-18T11:14:45+02:00",
    "2005-08-24T12:47:17+02:00",
    "2005-08-26T17:41:26+02:00",
    "2005-08-31T16:00:11+02:00",
    "2005-08-31T18:22:16+02:00",
    "2005-09-02T00:51:46+02:00",
    "2005-09-02T12:06:00+02:00",
    "2005-10-28T12:59:38+02:00",
    "2005-10-28T19:38:29+02:00",
    "2005-10-28T20:38:11+02:00",
    "2005-11-01T11:44:27+01:00",
    "2005-11-01T17:02:10+01:00",
    "2005-11-01T18:16:14+01:00",
    "2005-11-01T20:31:38+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "message": "ReturnTypeTester.getId()Ljava/lang/Object;",
      "elements": [
        {
          "method": "ReturnTypeTest.ajc$interMethod$ReturnTypeTest$ReturnTypeTest$Test$hashCode",
          "source": "ReturnTypeTest.java:16"
        },
        {
          "method": "ReturnTypeTester.hashCode",
          "source": "ReturnTypeTester.java:1"
        },
        {
          "method": "java.util.HashMap.hash",
          "source": "HashMap.java:264"
        },
        {
          "method": "java.util.HashMap.put",
          "source": "HashMap.java:382"
        },
        {
          "method": "java.util.HashSet.add",
          "source": "HashSet.java:194"
        },
        {
          "method": "ReturnTypeTester.\u003cclinit\u003e",
          "source": "ReturnTypeTester.java:15"
        }
      ],
      "number": 0,
      "commentIndex": 6,
      "bugId": "105479",
      "date": "2005-09-02T00:51:46+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "message": "ReturnTypeTester.getId()Ljava/lang/Object;",
      "elements": [
        {
          "method": "org.apache.tools.ant.taskdefs.ExecuteJava.execute",
          "source": "ExecuteJava.java:172"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.Java.run",
          "source": "Java.java:705"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.Java.executeJava",
          "source": "Java.java:178"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.Java.execute",
          "source": "Java.java:84"
        },
        {
          "method": "org.apache.tools.ant.UnknownElement.execute",
          "source": "UnknownElement.java:275"
        },
        {
          "method": "org.apache.tools.ant.Task.perform",
          "source": "Task.java:364"
        },
        {
          "method": "org.apache.tools.ant.Target.execute",
          "source": "Target.java:341"
        },
        {
          "method": "org.apache.tools.ant.Target.performTasks",
          "source": "Target.java:369"
        },
        {
          "method": "org.apache.tools.ant.Project.executeTarget",
          "source": "Project.java:1214"
        },
        {
          "method": "org.apache.tools.ant.Project.executeTargets",
          "source": "Project.java:1062"
        },
        {
          "method": "org.apache.tools.ant.module.bridge.impl.BridgeImpl.run",
          "source": "BridgeImpl.java:234"
        },
        {
          "method": "org.apache.tools.ant.module.run.TargetExecutor.run",
          "source": "TargetExecutor.java:242"
        },
        {
          "method": "org.netbeans.core.execution.RunClassThread.run",
          "source": "RunClassThread.java:125"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.AbstractMethodError",
        "message": "ReturnTypeTester.getId()Ljava/lang/Object;",
        "elements": [
          {
            "method": "aspects.ReturnTypeTest.ajc$interMethod$aspects_ReturnTypeTest$aspects_ReturnTypeTest$Test$hashCode",
            "source": "ReturnTypeTest.java:20"
          },
          {
            "method": "ReturnTypeTester.hashCode",
            "source": "ReturnTypeTester.java:1"
          },
          {
            "method": "ReturnTypeTester.main",
            "source": "ReturnTypeTester.java:35"
          },
          {
            "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "source": "Native Method"
          },
          {
            "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
            "source": "NativeMethodAccessorImpl.java:39"
          },
          {
            "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "source": "DelegatingMethodAccessorImpl.java:25"
          },
          {
            "method": "java.lang.reflect.Method.invoke",
            "source": "Method.java:585"
          },
          {
            "method": "org.apache.tools.ant.taskdefs.ExecuteJava.run",
            "source": "ExecuteJava.java:193"
          },
          {
            "method": "org.apache.tools.ant.taskdefs.ExecuteJava.execute",
            "source": "ExecuteJava.java:130"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 1,
      "commentIndex": 9,
      "bugId": "105479",
      "date": "2005-10-28T19:38:29+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "message": "ReturnTypeTester.getId()Ljava/lang/Object;",
      "elements": [
        {
          "method": "aspects.ReturnTypeTest.ajc$interMethod$aspects_ReturnTypeTest$aspects_ReturnTypeTest$Test$hashCode",
          "source": "ReturnTypeTest.java:20"
        },
        {
          "method": "ReturnTypeTester.hashCode",
          "source": "ReturnTypeTester.java:1"
        },
        {
          "method": "ReturnTypeTester.main",
          "source": "ReturnTypeTester.java:35"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.ExecuteJava.run",
          "source": "ExecuteJava.java:193"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.ExecuteJava.execute",
          "source": "ExecuteJava.java:130"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.Java.run",
          "source": "Java.java:705"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.Java.executeJava",
          "source": "Java.java:178"
        },
        {
          "method": "org.apache.tools.ant.taskdefs.Java.execute",
          "source": "Java.java:84"
        },
        {
          "method": "org.apache.tools.ant.UnknownElement.execute",
          "source": "UnknownElement.java:275"
        },
        {
          "method": "org.apache.tools.ant.Task.perform",
          "source": "Task.java:364"
        },
        {
          "method": "org.apache.tools.ant.Target.execute",
          "source": "Target.java:341"
        },
        {
          "method": "org.apache.tools.ant.Target.performTasks",
          "source": "Target.java:369"
        },
        {
          "method": "org.apache.tools.ant.Project.executeTarget",
          "source": "Project.java:1214"
        },
        {
          "method": "org.apache.tools.ant.Project.executeTargets",
          "source": "Project.java:1062"
        },
        {
          "method": "org.apache.tools.ant.module.bridge.impl.BridgeImpl.run",
          "source": "BridgeImpl.java:234"
        },
        {
          "method": "org.apache.tools.ant.module.run.TargetExecutor.run",
          "source": "TargetExecutor.java:242"
        },
        {
          "method": "org.netbeans.core.execution.RunClassThread.run",
          "source": "RunClassThread.java:125"
        }
      ],
      "number": 2,
      "commentIndex": 9,
      "bugId": "105479",
      "date": "2005-10-28T19:38:29+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "message": "ReturnTypeTester.getId ()Ljava/lang/Object;",
      "elements": [
        {
          "method": "ReturnTypeTest.ajc$interMethod$ReturnTypeTest$ReturnTypeTest$Test$hashCode",
          "source": "ReturnTypeTest.java:8"
        },
        {
          "method": "ReturnTypeTester.hashCode",
          "source": "ReturnTypeTester.java:1"
        },
        {
          "method": "java.util.HashMap.hash",
          "source": "HashMap.java:264"
        },
        {
          "method": "java.util.HashMap.put",
          "source": "HashMap.java:382"
        },
        {
          "method": "java.util.HashSet.add",
          "source": "HashSet.java:194"
        },
        {
          "method": "ReturnTypeTester.\u003cclinit\u003e",
          "source": "ReturnTypeTester.java:8"
        }
      ],
      "number": 3,
      "commentIndex": 11,
      "bugId": "105479",
      "date": "2005-11-01T11:44:27+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "105479",
  "bugId": "105479",
  "date": "2005-07-28T18:55:31+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}