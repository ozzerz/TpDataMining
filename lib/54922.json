{
  "comments": [
    "Build id: 200403040800\n\nJava editor, according to the insert mode, sets a special Caret in the \nStyledText. I\u0027ve two problem with that:\n1- This caret is not bidi aware\n2- At some point they dispose the image of the StyledText default Caret\n\nWe (SWT Team) have some major changes (still to be release) in StyledText that \nwill expose this UI bug.\n\nHere is the stack trace:\njava.lang.Exception: Stack trace\n\tat java.lang.Thread.dumpStack(Thread.java:1064)\n\tat org.eclipse.swt.graphics.Image.dispose(Image.java:825)\n\tat org.eclipse.ui.texteditor.AbstractTextEditor.disposeNonDefaultCaret\n(AbstractTextEditor.java:4378)\n\tat org.eclipse.ui.texteditor.AbstractTextEditor.updateCaret\n(AbstractTextEditor.java:4359)\n\tat org.eclipse.ui.texteditor.AbstractTextEditor.handleInsertModeChanged\n(AbstractTextEditor.java:4399)\n\tat org.eclipse.ui.texteditor.AbstractTextEditor.setInsertMode\n(AbstractTextEditor.java:4234)\n\tat org.eclipse.ui.texteditor.AbstractTextEditor.switchToNextInsertMode\n(AbstractTextEditor.java:4266)\n\tat org.eclipse.ui.texteditor.AbstractTextEditor.access$4\n(AbstractTextEditor.java:4253)\n\tat \norg.eclipse.ui.texteditor.AbstractTextEditor$ToggleInsertModeAction.run\n(AbstractTextEditor.java:808)\n\tat org.eclipse.ui.texteditor.TextNavigationAction.runWithEvent\n(TextNavigationAction.java:106)\n\tat org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:68)\n\tat org.eclipse.ui.internal.commands.Command.execute(Command.java:160)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand\n(WorkbenchKeyboard.java:475)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.press\n(WorkbenchKeyboard.java:887)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent\n(WorkbenchKeyboard.java:931)\n\tat \norg.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings\n(WorkbenchKeyboard.java:568)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$2\n(WorkbenchKeyboard.java:500)\n\tat org.eclipse.ui.internal.keys.WorkbenchKeyboard$1.handleEvent\n(WorkbenchKeyboard.java:256)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)\n\tat org.eclipse.swt.widgets.Display.filterEvent(Display.java:705)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:809)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:834)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:819)\n\tat org.eclipse.swt.widgets.Control.sendKeyEvent(Control.java:1720)\n\tat org.eclipse.swt.widgets.Control.sendKeyEvent(Control.java:1716)\n\tat org.eclipse.swt.widgets.Control.WM_KEYDOWN(Control.java:3487)\n\tat org.eclipse.swt.widgets.Control.windowProc(Control.java:2971)\n\tat org.eclipse.swt.widgets.Display.windowProc(Display.java:2962)\n\tat org.eclipse.swt.internal.win32.OS.CallWindowProcW(Native Method)\n\tat org.eclipse.swt.internal.win32.OS.CallWindowProc(OS.java:1362)\n\tat org.eclipse.swt.internal.BidiUtil.windowProc(BidiUtil.java:647)\n\tat org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)\n\tat org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1438)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2100)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1509)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1480)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench\n(Workbench.java:257)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run\n(IDEApplication.java:48)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:260)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:173)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:106)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:305)\n\tat org.eclipse.core.launcher.Main.run(Main.java:745)\n\tat org.eclipse.core.launcher.Main.main(Main.java:713)",
    "re: 1 - we know there\u0027s a problem with that shape (bug 39600, bug 39205)\n\n2- what are the changes in SWT and what is the scenario that shows the bug? Can\nyou give us a preview? As you can see from the stack trace the intention is to\ndispose the non-default caret and not the styled text\u0027s default caret. So it\nwould be good to have the scenario where we dispose the default one.\n\nNote: Please one bug per report.",
    "Created bug 54942 for the BIDI problem.\n",
    "Created an attachment (id\u003d8605)\nnew StyledText implementation\n\nCopy these files to:\norg.eclipse.swt\\Eclipse SWT Custom Widgets\\common\\org\\eclipse\\swt\\custom\nself-host eclipse, in tha java editor press insert.\n",
    "We might be releasing this code today...",
    "Sure, go ahead. We can then grap the SWT plug-in from the N-build and\ninvestigate the bug.\n\nNote: when (at least we in Zurich ;-) talk about a preview then we mean the\nwhole plug-in.\n",
    "Code released. Still, you will need to open the StyledText, go to line 6462 \nand remove the code:\n\n//workaround bug#54922 \nif (updateImage) {\n\tif ((leftCaretBitmap !\u003d null \u0026\u0026 leftCaretBitmap.isDisposed()) ||\n\t\t(rightCaretBitmap !\u003d null \u0026\u0026 rightCaretBitmap.isDisposed())) {\n\t\tcreateCaretBitmaps();\n\t}\n}\n\n",
    "I would assume it is much easier for you to give us a preview than for us\nswitching to source, isn\u0027t it?\n",
    "You want a preview: load org.eclipse.swt from dev.eclipse.org, it does not \nrequire any other plugin, remove the workaround, selfhost eclipse and test it. \nIt will not take you more than 3 minutes, very easy.\n\nI already gave you the stacktrace, source code, I released the changes in the \nCVS... Please, look into this.\n",
    "I did the following as requested in comment 6:\n1. checked out org.eclipse.swt from HEAD (20.12.2004, 22h00 MET)\n2. commented out the following code in StyledText.java (rev. 1.202)\n//if (updateImage) {\n//\tif ((leftCaretBitmap !\u003d null \u0026\u0026 leftCaretBitmap.isDisposed()) ||\n//\t\t(rightCaretBitmap !\u003d null \u0026\u0026 rightCaretBitmap.isDisposed())) {\n//\t\t\tcreateCaretBitmaps();\n//\t}\n//}\n\n\nWhat I see is:\n1. no exceptions - neither in .log nor in console\n2. works as expected",
    "build I20040407.\n\nSteps\n1. New workspace\n2. Create Java project\n3. Create Java File\n4. Open Java File\n5. Focus Java Editor\n6. Press Insert key\n",
    "Created an attachment (id\u003d9303)\nlog file\n\nAlthough the exception happens inside SWT code it is caused by the application\nwho reach for StyledText\u0027s default caret and disposed its image.\n",
    "Note, in order to reproduce this bug your machine has to be Bidi Enabled (it \nmeans, you need to have Arabic or Hebrew input method installed).\n",
    "I now see the problem:\nnormally in SWT when someone creates a resource and then sets it has to dispose\nit, right. We followed this approach in Text code with Caret as well. Which I\nguess was wrong (i.e. caret doesn\u0027t need to be treated as resource and disposed).\n\nLet me explain our scenario to give you some background:\nst\u003d new StyledText(...);\n\u003c... now happens code you can\u0027t control - assume someone calls:\nc1\u003d new Caret(st, 0);\nIn our case this means a client pre-configures StyledText with some caret\n...\u003e\nnow we get the StyledText and want to apply our caret(s)\ninitialCaret\u003d st.getCaret();\nc2\u003d new Caret(st, 0);\nc3\u003d new Caret(st, 0);\nCaching c2 for later use. Now assume the editor closes. st automatically\ndisposes c3 and I can dispose c2 but since normally ST disposes the caret I also\nneed to dispose the initial caret if it is not styled text\u0027s default. We assumed\nthat if the default caret is used getCaret returns null - this does not hold in\nthe BIDI case.\n\nI guess we don\u0027t need to track and dispose the caret. We only need to ensure to\ndispose the images that we create and the client is responsible for disposing\nhis image (if he created one). Am I on the right track?",
    "I assume the Caret is not an OS resource, right? \n\nAnother question is how we can set a caret without an image since StyledText\nalways sets an image if the direction is not default and our caret\u0027s image is null.\n\n",
    "\"I assume the Caret is not an OS resource, right? \"\nWrong, it is. Follow the rule: if you created and disposed.\n\n\"Another question is how we can set a caret without an image since StyledText\nalways sets an image if the direction is not default and our caret\u0027s image is \nnull.\"\n\nIf you set a caret in the StyledText the StyledText should not change its \nimage.\n\nI will change the StyledText as follow:\nStyledText will always create and dispose its internal Caret, therefore you \ndon\u0027t need to disposed it even though you set a new caret in the StyledText.\nYou must dispose the carets you create yourself, don\u0027t relie that StyledText \nwill dispose it for you.\n",
    "Sounds good.\n\n",
    "I\u0027ve released StyledText changes. It will be in tomorrow\u0027s integration build.",
    "Note: Using this approach one of the caret will be disposed twice: who created \nthe caret always disposed it plus the framework in Canvas always assure that \nthe current caret always gets disposed. This is not a problem. In SWT, we can \ncall dispose on object multiple times.\n",
    "Fixed the code on our side for I200404130800. There\u0027s just one remaining issue:\nit would be nice if setCaret(null) would reset the StyledText\u0027s caret. In\nI20040407 this is not the case due to:\n\n\tif (caret !\u003d null) {\n\t\tsetCaretLocation();\n\t}\n\nQ: how can I reset the StyledText\u0027s caret to default (especially in BIDI situation)?\n",
    "Daniel, I understand that setCaret(null) restores the StyledText default caret \nis convenient for you but I don\u0027t think I can do that because there is the \ncase where the application actually really wants to set the caret to null \n(maybe to emulated a disable state or something). But maybe this case should \nnot be allowed anyway. I\u0027m going to ask Silenio or Steve if I can do that for \nyou.\n\nAbout the problem with BIDI I\u0027m afraid the StyledText does not give you any \nsupport for that. Internally StyledText handle all bidi code but it does not \nexpose any functionality.",
    "I fully understand that it is problematic to setCaret(null). Couldn\u0027t StyledText\nit offer resetCaret()?\n",
    "Silenio, StyledText API request see comment#21.\nIMO, it is easy enough for the application to remember styled text default \ncaret and set back whenever it is need.",
    "\u003eIMO, it is easy enough for the application to remember styled text default \n\u003ecaret and set back whenever it is need.\nThis is only true if styled text doesn\u0027t dynamically change the caret e.g. when\nI change input locale.\n",
    "\u003eThis is only true if styled text doesn\u0027t dynamically change the caret e.g. \n\u003ewhen I change input locale.\nStyledText does not changed the caret when the input locale changes. It \nchanges its image only. It is always the same instance of Caret.\n",
    "Daniel, I just downloaded and tested I200404130800.\nThe caret is a pinhead (x,2). I believe you relie that StyledText will set the \nsize of the caret for you, right ?\nI actually changed StyledText to only set location a user-defined caret \npreserving all others attributes (image, size).\nI will release some code to always set (override) the height of the caret. \nthis is fix the problem.\nOther option would be the application to set height of the caret (using the \nAPI StyledText#getLineHeight() to figure out the height).\n\n\nOther problem: I didn\u0027t see \u0027Insert Mode\u0027, Java editor only has \u0027Smart Insert\u0027 \nand \u0027Override\u0027 now ?\n",
    "\u003eThe caret is a pinhead (x,2). I believe you rely that StyledText will set the \n\u003esize of the caret for you, right ?\nYes, we did so (we set the height to caret.getSize().y). which used to work.\n\n\u003eI will release some code to always set (override) the height of the caret. \n\u003ethis is fix the problem.\nGood. Though I would treat this as being our bug since we expected that a new\ncaret has the correct height. We just fixed our code.\n\n\u003eOther problem: I didn\u0027t see \u0027Insert Mode\u0027, Java editor only has \u0027Smart Insert\u0027 \n\u003eand \u0027Override\u0027 now ?\nCorrect :-) We removed the three-state toggle since it confused people. It now\ntoggles between \"Smart Insert\" and \"Overwrite\". To get the \u0027raw\u0027 insert mode you\nneed to press Ctrl+Shift+Insert. After doing so it toggles between \u0027raw\u0027 Insert\nand \"Overwrite\" mode. Ctrl+Shift+Insert brings back smartness.",
    "re comment 24: I then agree with comment 22.\n"
  ],
  "commentCreationDates": [
    "2004-03-16T00:33:29+01:00",
    "2004-03-16T09:02:34+01:00",
    "2004-03-16T09:04:34+01:00",
    "2004-03-16T18:41:48+01:00",
    "2004-03-16T18:42:39+01:00",
    "2004-03-17T09:08:55+01:00",
    "2004-03-18T02:03:12+01:00",
    "2004-03-18T07:30:22+01:00",
    "2004-03-18T17:33:52+01:00",
    "2004-03-20T21:52:32+01:00",
    "2004-04-07T21:21:10+02:00",
    "2004-04-07T21:23:20+02:00",
    "2004-04-07T21:24:17+02:00",
    "2004-04-08T18:02:10+02:00",
    "2004-04-08T19:20:38+02:00",
    "2004-04-08T23:48:15+02:00",
    "2004-04-12T19:15:48+02:00",
    "2004-04-12T19:57:23+02:00",
    "2004-04-12T20:00:15+02:00",
    "2004-04-13T16:50:31+02:00",
    "2004-04-13T17:22:45+02:00",
    "2004-04-13T17:27:10+02:00",
    "2004-04-13T17:31:14+02:00",
    "2004-04-13T17:55:29+02:00",
    "2004-04-13T18:18:24+02:00",
    "2004-04-13T18:38:09+02:00",
    "2004-04-13T18:56:37+02:00",
    "2004-04-13T19:00:02+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "message": "Stack trace",
      "elements": [
        {
          "method": "java.lang.Thread.dumpStack",
          "source": "Thread.java:1064"
        },
        {
          "method": "org.eclipse.swt.graphics.Image.dispose",
          "source": "Image.java:825"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor.disposeNonDefaultCaret",
          "source": "AbstractTextEditor.java:4378"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor.updateCaret",
          "source": "AbstractTextEditor.java:4359"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor.handleInsertModeChanged",
          "source": "AbstractTextEditor.java:4399"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor.setInsertMode",
          "source": "AbstractTextEditor.java:4234"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor.switchToNextInsertMode",
          "source": "AbstractTextEditor.java:4266"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor.access$4",
          "source": "AbstractTextEditor.java:4253"
        },
        {
          "method": "org.eclipse.ui.texteditor.AbstractTextEditor$ToggleInsertModeAction.run",
          "source": "AbstractTextEditor.java:808"
        },
        {
          "method": "org.eclipse.ui.texteditor.TextNavigationAction.runWithEvent",
          "source": "TextNavigationAction.java:106"
        },
        {
          "method": "org.eclipse.ui.commands.ActionHandler.execute",
          "source": "ActionHandler.java:68"
        },
        {
          "method": "org.eclipse.ui.internal.commands.Command.execute",
          "source": "Command.java:160"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand",
          "source": "WorkbenchKeyboard.java:475"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.press",
          "source": "WorkbenchKeyboard.java:887"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent",
          "source": "WorkbenchKeyboard.java:931"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings",
          "source": "WorkbenchKeyboard.java:568"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$2",
          "source": "WorkbenchKeyboard.java:500"
        },
        {
          "method": "org.eclipse.ui.internal.keys.WorkbenchKeyboard$1.handleEvent",
          "source": "WorkbenchKeyboard.java:256"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:82"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.filterEvent",
          "source": "Display.java:705"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:809"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:834"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:819"
        },
        {
          "method": "org.eclipse.swt.widgets.Control.sendKeyEvent",
          "source": "Control.java:1720"
        },
        {
          "method": "org.eclipse.swt.widgets.Control.sendKeyEvent",
          "source": "Control.java:1716"
        },
        {
          "method": "org.eclipse.swt.widgets.Control.WM_KEYDOWN",
          "source": "Control.java:3487"
        },
        {
          "method": "org.eclipse.swt.widgets.Control.windowProc",
          "source": "Control.java:2971"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.windowProc",
          "source": "Display.java:2962"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.CallWindowProcW",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.CallWindowProc",
          "source": "OS.java:1362"
        },
        {
          "method": "org.eclipse.swt.internal.BidiUtil.windowProc",
          "source": "BidiUtil.java:647"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.DispatchMessageW",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.swt.internal.win32.OS.DispatchMessage",
          "source": "OS.java:1438"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:2100"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1509"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1480"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:257"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:139"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:48"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:260"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:173"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:106"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:305"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:745"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:713"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "54922",
      "date": "2004-03-16T00:33:29+01:00",
      "product": "JDT",
      "component": "Text",
      "severity": "major"
    }
  ],
  "groupId": "54922",
  "bugId": "54922",
  "date": "2004-03-16T00:33:29+01:00",
  "product": "JDT",
  "component": "Text",
  "severity": "major"
}