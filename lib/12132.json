{
  "comments": [
    "Release 20020214\n\nI added the following to my command line to set the socksProxyHost to allow me \nto connect to CVS servers outside of our firewall:\n\n -vmargs -DsocksProxyHost\u003dproxy\n\nThis appears to cause problems for the debugger. Any attempt to launch the \ndebugger with this set will fail with a message stating that it could not find \na free port for the debugger.\n\nThis also seems to sometimes affect the JUnit launcher, but not always. That is \nwhere I first noticed it. If it affects the JUnit lanucher it will cause it to \nfail with an exception about a missing port parameter. This is because it has a \nroutine that tries to find an available port and that fails.\n\nWhile trying to see why that was happening, I copied the code from SocketUtil \nin the junit launching code and created a main method to call it. If invoked \nthat with debug, that was when I noticed that debug was failing. However \ninvoking it with \"run\" has no problems and returns an empty port.\n\nOne other variable is that this is on a laptop (windows 2000) that is sometimes \nconnected to a network and sometimes not. Whether it is connected seems to make \nno difference.",
    "Needs investigation.",
    "Duplicated problem.  Following trace is in log:\n\nmessage\u003d\"Could not find a free socket for the \ndebugger.\"\n       trace\u003d\"\norg.eclipse.core.runtime.CoreException: Could not find a free \nsocket for the debugger.\n\tat \norg.eclipse.jdt.launching.AbstractVMRunner.abort(AbstractVMRunner.java:45)\n\tat \norg.eclipse.jdt.internal.launching.StandardVMDebugger.run(StandardVMDebugger.java:57)\n\tat \norg.eclipse.jdt.internal.launching.JavaLocalApplicationLaunchConfigurationDelegate.launch(JavaLocalApplicationLaunchConfigurationDelegate.java:69)\n\tat \norg.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:140)\n\tat \norg.eclipse.debug.internal.ui.launchConfigurations.LaunchConfigurationDialog$8.run(LaunchConfigurationDialog.java:1821)\n\tat \norg.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:98)",
    "Dale, from the (very) little I\u0027ve been able to learn about Socks, it seems that you typically want \nto set three \nproperties:\n\nsocksProxySet\u003dtrue\nsocksProxyHost\u003d\u003cyourProxyHostName\u003e\nsocksProxyPort\u003d1080\n\nThe \nport # of 1080 is I think the \u0027standard\u0027 Socks port #.  \nSince I don\u0027t have access to a firewall set \nup, could you try this and let me know what happens?  Thanks.\n",
    "There is no use of socksProxySet property. 1080 is the standard port and if you \ndon\u0027t specify one it will use that default. Just specifying the host is enough \nto activate socks proxy support on the default port of 80. I tried your \nsuggestion any way, and there was no change.",
    "I was able to duplicate this now outside of Eclipse. I took the SocketUtil \nclass out and called it straight from a simple main program. With \nsocksProxyHost set it does not find an empty port, but it doesn when it is not \nset.",
    "I think the problem is really mine. I am doing something that I really \nshouldn\u0027t be doing. By setting my socks proxy information correctly I can get \nit to work when I am connected, but not when I am not. Java\u0027s socket support is \nnot that powerful. It is either on or off based on the properties. It has no \nnotion of bypassing the proxy server for local addresses.\n\nAnyway I don\u0027t think it is the fault of Eclipse and should be closed.",
    "OK, thanks for doing the extra research to resolve this problem.  Moving this \nreport to Closed."
  ],
  "commentCreationDates": [
    "2002-03-22T16:14:49+01:00",
    "2002-04-02T19:34:42+02:00",
    "2002-04-18T20:26:39+02:00",
    "2002-04-18T21:32:37+02:00",
    "2002-04-18T22:26:51+02:00",
    "2002-04-18T22:38:40+02:00",
    "2002-04-18T23:14:09+02:00",
    "2002-04-18T23:24:04+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.runtime.CoreException",
      "message": "Could not find a free  socket for the debugger.",
      "elements": [
        {
          "method": "org.eclipse.jdt.launching.AbstractVMRunner.abort",
          "source": "AbstractVMRunner.java:45"
        },
        {
          "method": "org.eclipse.jdt.internal.launching.StandardVMDebugger.run",
          "source": "StandardVMDebugger.java:57"
        },
        {
          "method": "org.eclipse.jdt.internal.launching.JavaLocalApplicationLaunchConfigurationDelegate.launch",
          "source": "JavaLocalApplicationLaunchConfigurationDelegate.java:69"
        },
        {
          "method": "org.eclipse.debug.internal.core.LaunchConfiguration.launch",
          "source": "LaunchConfiguration.java:140"
        },
        {
          "method": "org.eclipse.debug.internal.ui.launchConfigurations.LaunchConfigurationDialog$8.run",
          "source": "LaunchConfigurationDialog.java:1821"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:98"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "12132",
      "date": "2002-04-18T20:26:39+02:00",
      "product": "JDT",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "12132",
  "bugId": "12132",
  "date": "2002-03-22T16:14:49+01:00",
  "product": "JDT",
  "component": "Debug",
  "severity": "normal"
}