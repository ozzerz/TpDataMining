{
  "comments": [
    "When BundleA requires BundleB using Require-Bundle header in the manifest, and \nBundleB likewise requires BundleA also using Require-Bundle header, an \nexception is thrown when BundleB (the latter one) starts.\n\nException thrown:\n\norg.eclipse.core.dependencies.IDependencySystem$CyclicSystemException: \n{classloading.tb4c,classloading.tb4b}\n\tat org.eclipse.core.internal.dependencies.DependencySystem.visit\n(DependencySystem.java(Compiled Code))\n\tat org.eclipse.core.internal.dependencies.DependencySystem.resolve\n(DependencySystem.java:73)\n\tat org.eclipse.core.internal.dependencies.DependencySystem.resolve\n(DependencySystem.java:68)\n\tat org.eclipse.osgi.internal.resolver.ResolverImpl.resolve\n(ResolverImpl.java:38)\n\tat org.eclipse.osgi.internal.resolver.StateImpl.resolve\n(StateImpl.java:164)\n\tat org.eclipse.osgi.internal.resolver.StateImpl.resolve\n(StateImpl.java:192)\n\tat org.eclipse.osgi.framework.internal.core.PackageAdmin.refreshPackages\n(PackageAdmin.java:396)\n\tat org.eclipse.osgi.framework.internal.core.PackageAdmin$1.run\n(PackageAdmin.java:369)\n\tat java.lang.Thread.run(Thread.java:566)",
    "This is the expected behaviour. \"Cycle\" are only accepted in import/export \npackages.",
    "No where do we specify that cycles are not allowed in the RFC.  What is the \ntechnical reason to not allow this?",
    "The resolution is more complicated (see with Rafael). The build with \nautomaticly generated script becomes extremely difficult (because you have to \ncompile all the code at once and then separate it) and how do you break the \ncycle in the class lookup?\n\nI thought the spec was saying something about the absence of cycles.",
    "There was a bug about this somewhere else.  The general consensus was\n\n- cycles are ok for the runtime (classloading).  \n- The resolver may well be marking it as an error but did not really need to.  -\n- The JDT compiler structure can handle cycles.  \n- The PDE build cannot since it uses Ant \u003cjavac\u003e and compiles project \nindependently.\n\nSo the question from the past is why would we support in the runtime a \nstructure that we can\u0027t build?  the complementary question is, why would we \ndisallow it just because WE can\u0027t build it?\n\nUnless there is some major issue with the resolver I suggest that we try to \nfactor this out into a policy statement.  Theoretically the resolver could \nwarn/error on cycle.  PDE build can refuse to build on cycle and if the user \nwants to use some other mechanism to build the cyclical structure, more power \nto them.\n",
    "\n\n*** This bug has been marked as a duplicate of 46141 ***"
  ],
  "commentCreationDates": [
    "2003-12-11T20:40:16+01:00",
    "2003-12-12T18:07:29+01:00",
    "2003-12-12T18:47:23+01:00",
    "2003-12-12T19:27:22+01:00",
    "2003-12-12T19:31:47+01:00",
    "2003-12-13T00:12:38+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.dependencies.IDependencySystem$CyclicSystemException",
      "message": "{classloading.tb4c,classloading.tb4b}",
      "elements": [
        {
          "method": "org.eclipse.core.internal.dependencies.DependencySystem.visit",
          "source": "DependencySystem.java(Compiled Code)"
        },
        {
          "method": "org.eclipse.core.internal.dependencies.DependencySystem.resolve",
          "source": "DependencySystem.java:73"
        },
        {
          "method": "org.eclipse.core.internal.dependencies.DependencySystem.resolve",
          "source": "DependencySystem.java:68"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.ResolverImpl.resolve",
          "source": "ResolverImpl.java:38"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateImpl.resolve",
          "source": "StateImpl.java:164"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateImpl.resolve",
          "source": "StateImpl.java:192"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.PackageAdmin.refreshPackages",
          "source": "PackageAdmin.java:396"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.PackageAdmin$1.run",
          "source": "PackageAdmin.java:369"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:566"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "48576",
      "duplicateId": "46141",
      "date": "2003-12-11T20:40:16+01:00",
      "product": "Equinox",
      "component": "Incubator",
      "severity": "normal"
    }
  ],
  "groupId": "46141",
  "bugId": "48576",
  "duplicateId": "46141",
  "date": "2003-12-11T20:40:16+01:00",
  "product": "Equinox",
  "component": "Incubator",
  "severity": "normal"
}