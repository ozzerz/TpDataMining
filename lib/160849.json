{
  "comments": [
    "If the type parameter of a generic class uses \"extends\" and the generic class is declared to implement an a generic interface with the same type parameter, this causes \njava.lang.IllegalStateException: Expecting raw type\n\tat org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:42)\n\tat org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:82)\n\tat org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:42)\n\tat org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked(BcelObjectType.java:686)\n\tat org.aspectj.weaver.bcel.BcelObjectType.getSuperclass(BcelObjectType.java:188)\n\tat org.aspectj.weaver.ReferenceType.getSuperclass(ReferenceType.java:601)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1222)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1072)\n...\n\n\nA simple example is:\npublic abstract class Foo\u003cF extends Bar\u003e implements IFooBar\u003cF\u003e {\n}\n\nIn our real world example, this is \n  public abstract class OurClass\u003cE extends OurClass\u003e implements Comparable\u003cE\u003e",
    "please try this with a recent AspectJ dev build (see download page) - we have fixed numerous occurences of this since 1.5.2\n\nIf that fails - can you supply a more complete test program? this complete program compiles fine for me on 1.5.2:\n\n\u003d\u003d\u003d\u003d8\u003c\u003d\u003d\u003d\u003d\u003d\u003d\npublic abstract class Foo\u003cF extends Bar\u003e implements IFooBar\u003cF\u003e {}\n\ninterface IFooBar\u003cT\u003e {}\ninterface Bar {}\n\naspect X {\n  declare parents: Foo implements java.io.Serializable;\n}\n\u003d\u003d\u003d\u003d8\u003c\u003d\u003d\u003d\u003d\u003d\u003d\n",
    "(In reply to comment #1)\n\u003e please try this with a recent AspectJ dev build (see download page) - we have\n\u003e fixed numerous occurences of this since 1.5.2\n\nYes, it seems to work with the latest dev release. Sorry I didn\u0027t check that first.\nIs there an ETA on the next release?\n\nAnyway, thanks!",
    "within a month I hope ! :)"
  ],
  "commentCreationDates": [
    "2006-10-13T14:09:38+02:00",
    "2006-10-13T15:35:36+02:00",
    "2006-10-13T15:51:22+02:00",
    "2006-10-14T08:17:21+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Expecting raw type",
      "elements": [
        {
          "method": "org.aspectj.weaver.TypeFactory.createParameterizedType",
          "source": "TypeFactory.java:42"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX",
          "source": "BcelGenericSignatureToTypeXConverter.java:82"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX",
          "source": "BcelGenericSignatureToTypeXConverter.java:42"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked",
          "source": "BcelObjectType.java:686"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelObjectType.getSuperclass",
          "source": "BcelObjectType.java:188"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getSuperclass",
          "source": "ReferenceType.java:601"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor",
          "source": "BcelWeaver.java:1222"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1072"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "160849",
      "date": "2006-10-13T14:09:38+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "blocker"
    }
  ],
  "groupId": "160849",
  "bugId": "160849",
  "date": "2006-10-13T14:09:38+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "blocker"
}