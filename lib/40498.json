{
  "comments": [
    "The machine is a recently built RH9 box, running KDE, and Eclipse using GTK. \nTrying to build platform-ui from CVS (importing the other pieces as binary\nprojects), I get a failure that complains:\n\n\"The project was not built since the source file\n/org.eclipse.ui.workbench/Eclipse\nUI/org/eclipse/ui/internal/misc/StringMatcher.java could not be read.\"\n\nWhen I first tried to open the file, it complained that it was not valid UTF-8.\n I switched to ASCII, and now it opens fine.  The build still fails.\n\n\nSTEPS TO REPRODUCE:\n1.) Install the latest I20030717 build on a RH9 box under KDE.\n2.) Open Eclipse, add a CVS perspective, and add a CVS resource pointing to\ndev.eclipse.org (anonymous)\n3.) Checkout platform-ui\n4.) Import all the other Eclipse stuff as binary projects.\n5.) Rebuild all.\n\nOBSERVED RESULTS:\n29 problems (24 errors).  The errors are all traced back to the error mentioned\nabove.  Opening StringMatcher at this point should cause problems.",
    "Found this in the log.  There are multiple entries, all the same.  Destroying\nthe project and checking it out again does nothing.  Neither does updating.  I\nam now using the M2 build; problem is still present.\n\n!STACK 1\norg.eclipse.core.internal.resources.ResourceException: Resource is out of sync\nwith the file system: /org.eclipse.ui.workbench/Eclipse UI/org/eclipse/ui/CVS/Root.\n\tat java.lang.Throwable.\u003cinit\u003e(Throwable.java)\n\tat java.lang.Throwable.\u003cinit\u003e(Throwable.java)\n\tat org.eclipse.core.runtime.CoreException.\u003cinit\u003e(CoreException.java:35)\n\tat\norg.eclipse.core.internal.resources.ResourceException.\u003cinit\u003e(ResourceException.java:30)\n\tat\norg.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:406)\n\tat org.eclipse.core.internal.resources.File.getContents(File.java:214)\n\tat org.eclipse.core.internal.resources.File.getContents(File.java:204)\n\tat\norg.eclipse.team.internal.ccvs.core.util.SyncFileWriter.readFirstLine(SyncFileWriter.java:398)\n\tat\norg.eclipse.team.internal.ccvs.core.util.SyncFileWriter.readFolderSync(SyncFileWriter.java:171)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.cacheFolderSync(EclipseSynchronizer.java)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.getFolderSync(EclipseSynchronizer.java)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isCVSFolder(EclipseFolder.java)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isIgnored(EclipseFolder.java)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.members(EclipseFolder.java)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates(EclipseFolder.java:390)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified(EclipseFolder.java:359)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates(EclipseFolder.java:394)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified(EclipseFolder.java:359)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates(EclipseFolder.java:394)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified(EclipseFolder.java:359)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates(EclipseFolder.java:394)\n\tat\norg.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified(EclipseFolder.java:359)\n\tat\norg.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.isDirty(CVSLightweightDecorator.java:99)\n\tat\norg.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.isDirty(CVSLightweightDecorator.java:112)\n\tat\norg.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.decorate(CVSLightweightDecorator.java:189)\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:158)\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:54)\n\tat org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java)\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java)\n\tat\norg.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java)\n\tat\norg.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n!ENTRY org.eclipse.core.resources 4 274 Jul 21, 2003 09:49:58.584\n!MESSAGE Resource is out of sync with the file system:\n/org.eclipse.ui.workbench/Eclipse UI/org/eclipse/ui/CVS/Root.",
    "Created an attachment (id\u003d5547)\nEclipse Log\n\nA log file showing the actual UTF8 conversion failure.",
    "The StringMatcher.java file contains the hexidecimal values 0x91 and 0x92 in\nmultiple positions.  I don\u0027t believe these to be valid UTF-8 encoded characters.\n For example, the following sequence of bytes can be seen in vi:\n\n         * pattern which may contain \u003c91\u003e*\u003c92\u003e for 0 and many characters and\n         * \u003c91\u003e?\u003c92\u003e for exactly one character.",
    "From bash, executing \"rm StringMatcher.java; cvs update -d -C\nStringMatcher.java\" still leaves the strange hexadecimal values in the file.",
    "I\u0027ve confirmed this on a Debian box.  This file displays this way under Linux. \nThe characters appear as left and right quotes under Windows, as well as in the\nMozilla browser on Linux.  However, on a Linux terminal it displays as an\ninvalid UTF-8 character (both uxterm and xterm).  In Eclipse, it complains that\nit is not valid UTF-8.\n\nThe last person to edit this file must have used Windows and inserted these\ncharacters, which Windows happens to encode as 0x91 and 0x92.  However, 0x91 and\n0x92 are not valid UTF-8 characters, and hence Linux complains.  Why does\nMozilla display it properly?  (font?  special handler code?)\n\nThis is really two problems.  CVS seems to contain a file that is not valid\nUTF-8.  The eclipse core should escape those bytes before storing them to the\nfile system.  (But wouldn\u0027t eclipse core use Java\u0027s IO libraries to do this anyway?)\n\nYou could probably also point a finger at Linux\u0027 UTF-8 locale implementation,\nbut it does seem to match the specification.",
    "Moving to Platform UI since they own that particular copy of the string matcher.\n",
    "The problem occurs in a second (duplicate?) StringMatcher class located in\n\"org.eclipse.ui.views\".  I\u0027m supplying patches for both projects.  Note that\nthis does not fix the problem of how 0x91 and 0x92 ended up in CVS in the first\nplace.",
    "Created an attachment (id\u003d5564)\nPatch for org.eclipse.ui.views\n",
    "Created an attachment (id\u003d5565)\nPatch for org.eclipse.ui.workbench\n",
    "Note: There are several more instances of the StringMatcher class with different\nowners.\n",
    "As a note, it looks like the code generating patches is also affected.  Text\nfrom the original is not included in the patch file starting at the first\noffending character.  It looks like the patch generator doesn\u0027t like including\nunrecognized characters, and doesn\u0027t recover as well as it might from such an\nerror.  (arg!)",
    "Moving to VCM.",
    "Maybe this is a VM problem? Did you try using another VM?",
    "Under Sun\u0027s 1.4.2 VM, the code will compile.  When the source is viewed in an\neditor, it will display, but missing the 0x91 and 0x92 characters.  Editing the\nfile and then saving it will overwrite the 0x91 and 0x92 characters with their\nUTF-8 equivalents.\n\nSo, there are still files in CVS that are not valid UTF-8.  Sun\u0027s VM is tolerant\nof these oddities, but IBM\u0027s VM that I was using is not (pj9xia32131-20030714a).\n Somehow, invalid UTF-8 can be written to a CVS repository using Eclipse.  It\nwasn\u0027t Sun\u0027s 1.4.2 VM that wrote them to CVS (see above).\n\nFurther testing with other VMs?",
    "I\u0027m not a VM guy, so I don\u0027t know if there\u0027s a spec for this i.e. which VM\nbehavior is the one we can expect.\n\n",
    "The CVS plugin transfers bytes to the server and is agnostic about the encoding\nused in the platform. The stack trace relates to the CVS decorators and the fact\nthat some of the projects in your workspace were out-pf-sync with the file\nsystem. This is not related to the java builder not compiling the class.\n\nEclipse uses the default OS encoding or uses the overriden setting under\nPreferences \u003e Workbench \u003e Editors. There shouldn\u0027t be a plugin that assumes\nUTF-8 as the default.\n\nTo conclude, this is not a CVS problem but a problem with the java compiler.\nHowever I\u0027m not sure what encoding scheme it should use to parse the source\nfiles when two developers are using different OS encodings and committing the\nfiles to CVS.",
    "On Windows I can\u0027t open the files in question either when selecting UTF-8 \nencoding. The default encoding was 8859 anyway so this wasn\u0027t a problem. With \nthe default encoding the questionable characters are not shown at all. I.e., \nthey are 0 length characters.\nThe build works fine because the Java compiler still uses 8859. The build would \nprobably fail on my Windows box as well if I specified UTF-8 encoding on the \ncommand line (file.encoding property).\nNot sure where these bogus characters come from.\n\nRemoved the offending characters in the three Platform UI StringMatcher files. \nSuggest Team, Search and JDT Debug and JDT UI teams do the same.",
    "See Sections 3.1 and 3.3 of the Java Language Specification.\n(\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#95413\"\n[Section 3.1]).\n\n\"Programs are written using the Unicode character set.\"\n\nIt\u0027s not a valid Java program if it isn\u0027t written in Unicode.",
    "Fixed for Search and JDT UI.\n",
    "Jean-Michel,\n\nWhat makes you think there is a Java compiler bug here ? If the specified \nencoding is incorrect, then how could we process it without any errors ?",
    "Let me take that back. What I was trying to say is that if the java spec says \nthat Java source files must be encoded as Unicode then either the VM (as Doug \nhas observed) or the JDT Java Editor is not ensuring that the file is written \nas UTF-8?\n\nBTW, I\u0027ve also fixed the StringMatcher in Team/CVS.\n\n",
    "Many apologies, but I don\u0027t think that I read it closely enough the first \ntime.  There is an \"except\".  Any character (e.g., 0x91) is allowed in \ncomments, string/character literals and identifiers.  Only keywords, \nseparators, and operators need to be in low ASCII (or escaped using \"\\uXXXX\" \nsequences).\n\nThere is no problem using Sun\u0027s JDK 1.4.2.  I\u0027m beginning to think this is a \nVM bug.",
    "this is late in the game but\ni encountered this problem today on a new linux install with the IBM 1.4.1 VM.\nthe problem disappeared without any other changes using the SUN 1.4.2 VM.",
    "Closing as JRE issue."
  ],
  "commentCreationDates": [
    "2003-07-18T20:52:35+02:00",
    "2003-07-22T20:17:49+02:00",
    "2003-07-24T16:50:57+02:00",
    "2003-07-24T17:26:17+02:00",
    "2003-07-24T17:30:45+02:00",
    "2003-07-24T18:27:17+02:00",
    "2003-07-25T10:23:06+02:00",
    "2003-07-28T15:18:35+02:00",
    "2003-07-28T15:19:30+02:00",
    "2003-07-28T15:19:51+02:00",
    "2003-07-28T15:24:51+02:00",
    "2003-07-28T15:28:18+02:00",
    "2003-07-30T03:17:22+02:00",
    "2003-07-30T10:03:59+02:00",
    "2003-07-30T15:50:27+02:00",
    "2003-07-30T16:02:17+02:00",
    "2003-07-30T19:25:32+02:00",
    "2003-07-31T14:25:40+02:00",
    "2003-07-31T15:27:15+02:00",
    "2003-07-31T17:20:31+02:00",
    "2003-09-30T00:05:05+02:00",
    "2003-10-03T15:18:12+02:00",
    "2003-10-03T16:18:19+02:00",
    "2004-02-09T21:41:03+01:00",
    "2004-02-17T18:04:17+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Resource is out of sync with the file system: /org.eclipse.ui.workbench/Eclipse UI/org/eclipse/ui/CVS/Root.",
      "elements": [
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java"
        },
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java"
        },
        {
          "method": "org.eclipse.core.runtime.CoreException.\u003cinit\u003e",
          "source": "CoreException.java:35"
        },
        {
          "method": "org.eclipse.core.internal.resources.ResourceException.\u003cinit\u003e",
          "source": "ResourceException.java:30"
        },
        {
          "method": "org.eclipse.core.internal.localstore.FileSystemResourceManager.read",
          "source": "FileSystemResourceManager.java:406"
        },
        {
          "method": "org.eclipse.core.internal.resources.File.getContents",
          "source": "File.java:214"
        },
        {
          "method": "org.eclipse.core.internal.resources.File.getContents",
          "source": "File.java:204"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.util.SyncFileWriter.readFirstLine",
          "source": "SyncFileWriter.java:398"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.util.SyncFileWriter.readFolderSync",
          "source": "SyncFileWriter.java:171"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.cacheFolderSync",
          "source": "EclipseSynchronizer.java"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.getFolderSync",
          "source": "EclipseSynchronizer.java"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isCVSFolder",
          "source": "EclipseFolder.java"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isIgnored",
          "source": "EclipseFolder.java"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.members",
          "source": "EclipseFolder.java"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates",
          "source": "EclipseFolder.java:390"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified",
          "source": "EclipseFolder.java:359"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates",
          "source": "EclipseFolder.java:394"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified",
          "source": "EclipseFolder.java:359"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates",
          "source": "EclipseFolder.java:394"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified",
          "source": "EclipseFolder.java:359"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.calculateAndSaveChildModificationStates",
          "source": "EclipseFolder.java:394"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.core.resources.EclipseFolder.isModified",
          "source": "EclipseFolder.java:359"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.isDirty",
          "source": "CVSLightweightDecorator.java:99"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.isDirty",
          "source": "CVSLightweightDecorator.java:112"
        },
        {
          "method": "org.eclipse.team.internal.ccvs.ui.CVSLightweightDecorator.decorate",
          "source": "CVSLightweightDecorator.java:189"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate",
          "source": "LightweightDecoratorDefinition.java:158"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run",
          "source": "LightweightDecoratorManager.java:54"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.run",
          "source": "InternalPlatform.java"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate",
          "source": "LightweightDecoratorManager.java"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations",
          "source": "LightweightDecoratorManager.java"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$1.run",
          "source": "DecorationScheduler.java"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "40498",
      "date": "2003-07-22T20:17:49+02:00",
      "product": "JDT",
      "component": "Core",
      "severity": "major"
    }
  ],
  "groupId": "40498",
  "bugId": "40498",
  "date": "2003-07-18T20:52:35+02:00",
  "product": "JDT",
  "component": "Core",
  "severity": "major"
}