{
  "comments": [
    "Please use Display.getDefault().getSystemColor() instead.  Otherwise, if the class happens to be loaded in a non ui thread, there will be a NPE when loading the class.",
    "Or rather then face another flame war :), GMF could force load of this specific class on initialization of it\u0027s Editor.",
    "I think this is valid, and maybe a duplicate of another open bug. (Unlike the update manager, which does its work on the UI thread by design). But, if you are just constructing some figures and then printing them or capture them to an image, background threads are valid. SWT lets you create Colors, Images, and Fonts on background threads. You can also paint onto an Image in a background thread. So, there is a use case for building an entire diagram in a background thread, in which case ColorConstants might get referenced. An IBM product generates file thumbnails this way.",
    "Committed change.  Modified Display.getCurrent() to Display.getDefault in ColorConstants",
    "This fix is unlikely to work since getSystemColor calls checkDevice which checks for invalid thread access.  Randy was going to consult with SWT team to see if the checkDevice call was necessary in this case.",
    "Needs target milestone.\n\nThis is still broken:\nCaused by: org.eclipse.swt.SWTException: Invalid thread access\n\tat org.eclipse.swt.SWT.error(SWT.java:3374)\n\tat org.eclipse.swt.SWT.error(SWT.java:3297)\n\tat org.eclipse.swt.SWT.error(SWT.java:3268)\n\tat org.eclipse.swt.widgets.Display.error(Display.java:978)\n\tat org.eclipse.swt.widgets.Display.checkDevice(Display.java:638)\n\tat org.eclipse.swt.widgets.Display.getSystemColor(Display.java:1931)\n\tat org.eclipse.draw2d.ColorConstants.\u003cclinit\u003e(ColorConstants.java:26)\n\t... 3 more\n",
    "Test case:\n\npublic static void main(String[] args) {\n\tfinal Display display \u003d new Display();\n\tShell shell \u003d new Shell(display);\n\tshell.open();\n\t\n\tnew Thread(){\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tClass.forName(\"org.eclipse.draw2d.ColorConstants\");\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}.start();\n\t\n\twhile (!shell.isDisposed()) {\n\t\tif (!display.readAndDispatch())\n\t\t\tdisplay.sleep();\n\t}\n\tdisplay.dispose();\n}",
    "Created an attachment (id\u003d39070)\npatch\n\nHere is a patch to fix the problem.\n\n+1 for RC1",
    "Thanks Randy.\n\nOnly comments:\n- rename Internal to something more relevant. --\u003e SystemColorFactory (?)\n- could we add your test case as a JUnit?\n\n+1",
    "I seem to run into deadlock when I run a JUnit I created:\n\n\tpublic void test_Thumbnail() {\n\t\tfinal Boolean result[] \u003d new Boolean[1];\n\t\tThread testThread \u003d new Thread() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tClass.forName(\"org.eclipse.draw2d.ColorConstants\");\n\t\t\t\t\tresult[0] \u003d Boolean.TRUE;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tresult[0] \u003d Boolean.FALSE;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinterrupt();\n\t\t\t}\n\t\t};\n\t\t\n\t\ttestThread.start();\n\t\ttry {\n\t\t\ttestThread.join();\n\t\t} catch (InterruptedException e) {\n\t\t\tassertTrue(result[0].booleanValue());\n\t\t}\n\n\t}",
    "the name of the JUnit is obviously incorrect... should read test_ColorConstantsInit",
    "The junit setup is blocking the UI thread since it runs from the UI. You might be able to avoid the problem by running the event loop from inside the test case while waiting for the background thread to complete.",
    "Created an attachment (id\u003d39089)\nupdated patch\n\n- Updated patch with minor name change of Internal class + added passing JUnit.\n- Verified that JUnit doesn\u0027t pass without changes to ColorConstants",
    "Committed patch + new JUnit",
    "Updated JUnit test to make event loop thread safe.  Apparently, when a JUnit Suite is run, it\u0027s on a separate thread.--\u003e caused NPE when using Display.getCurrent().  When running the JUnit individually, it\u0027s on the main thread, so it passed in my dev environment.",
    "When you ran it individually, did you invoke it as a plug-in junit, or a normal junit?"
  ],
  "commentCreationDates": [
    "2006-04-06T20:25:34+02:00",
    "2006-04-06T21:07:16+02:00",
    "2006-04-06T21:33:26+02:00",
    "2006-04-10T22:52:11+02:00",
    "2006-04-20T17:05:05+02:00",
    "2006-04-20T19:27:02+02:00",
    "2006-04-20T19:27:37+02:00",
    "2006-04-20T19:29:49+02:00",
    "2006-04-20T19:53:30+02:00",
    "2006-04-20T20:20:03+02:00",
    "2006-04-20T20:21:14+02:00",
    "2006-04-20T20:30:30+02:00",
    "2006-04-20T21:03:12+02:00",
    "2006-04-20T22:19:26+02:00",
    "2006-04-21T14:11:37+02:00",
    "2006-04-21T14:26:43+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Invalid thread access",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3374"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3297"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:3268"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.error",
          "source": "Display.java:978"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.checkDevice",
          "source": "Display.java:638"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.getSystemColor",
          "source": "Display.java:1931"
        },
        {
          "method": "org.eclipse.draw2d.ColorConstants.\u003cclinit\u003e",
          "source": "ColorConstants.java:26"
        }
      ],
      "number": 0,
      "commentIndex": 5,
      "bugId": "135344",
      "date": "2006-04-20T19:27:02+02:00",
      "product": "GEF",
      "component": "draw2d",
      "severity": "major"
    }
  ],
  "groupId": "135344",
  "bugId": "135344",
  "date": "2006-04-06T20:25:34+02:00",
  "product": "GEF",
  "component": "draw2d",
  "severity": "major"
}