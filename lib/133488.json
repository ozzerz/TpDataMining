{
  "comments": [
    "I20060328-0010.\n\nSteps to reproduce:\n1. add T.java as follows:\n----------- %\u003c ---------\npackage traditional;\n\npublic class T {\n\tString s\u003d \"traditional\"\n}\n----------- %\u003c ---------\n\nExternalize the string using default arguments.\nThen change T.java to:\n----------- %\u003c ---------\npackage traditional;\n\npublic class T {\n\tString s\u003d \"traditional\"\n\tString s\u003d \"traditional\"\n}\n----------- %\u003c ---------\nObserve the compile error.\nNow execute the Find Broken NLS Keys action\n\u003d\u003d\u003e error dialog plus .log entry:\n!ENTRY org.eclipse.core.jobs 4 2 2006-03-28 12:08:09.212\n!MESSAGE An internal error occurred during: \"Search for Broken NLS Keys\".\n!STACK 0\njava.lang.StringIndexOutOfBoundsException: String index out of range: -13\n\tat java.lang.String.substring(String.java:1444)\n\tat java.lang.String.substring(String.java:1411)\n\tat org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResultRequestor.findKey(NLSSearchResultRequestor.java:200)\n\tat org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResultRequestor.acceptSearchMatch(NLSSearchResultRequestor.java:111)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.report(MatchLocator.java:1658)\n\tat org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference(TypeReferenceLocator.java:532)\n\tat org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference(TypeReferenceLocator.java:308)\n\tat org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference(TypeReferenceLocator.java:280)\n\tat org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference(TypeReferenceLocator.java:319)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2247)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2376)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2141)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.process(MatchLocator.java:1548)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1033)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1074)\n\tat org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1195)\n\tat org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:94)\n\tat org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:212)\n\tat org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:498)\n\tat org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:538)\n\tat org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchQuery.run(NLSSearchQuery.java:89)\n\tat org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:89)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)",
    "Or: have this:\n\npackage P;\n\npublic class T {\n        String s\u003d Messages.getString(\"Ckass.0\"); //$NON-NLS-1$\n        String s\u003d Messages.getString(\"Ckass.1\"); //$NON-NLS-1$\n}\n\nWith a 5.0 JRE.",
    "Created an attachment (id\u003d37191)\nfix1\n\nPrevent the exception",
    "This bug must be there since day 1 and I can\u0027t fix it for M6. Either:\n\na) SearchMatch#getAccuracy must be equal A_INACCURATE, then I could ignore the search match and warn the user, or\nb) ISourceReference#getSourceRange#getOffset must return the right offset for the second declaration of \u0027s\u0027, at the moment the offset for the first \u0027s\u0027 is returned.\n\nFor M6 we could apply fix1, but this fix only prevents the exception, the reported search result is still wrong.\n\nMartin?",
    "I think we should release the patch that makes sure that ranges are inside, but forward the bug to jdt.core.",
    "Created an attachment (id\u003d37197)\nfix2\n\nOk, don\u0027t panic... This does fix the issue.",
    "fixed \u003e I20060328-0010\n\nReleased fix2. Thanks Martin!",
    "I think\n keyPositionResult.setOffset(typeNameStart + keyStart);\nis still wrong, no need to add typeNameStart.\n\nPlease also review the usage of \u0027getCurrentTokenEndPosition()\u0027. It unfortunatly returns the _inclusive_ end position.\n\n-\u003e length \u003d end + 1 - start;",
    "(In reply to comment #7)\n\u003e I think\n\u003e  keyPositionResult.setOffset(typeNameStart + keyStart);\n\u003e is still wrong, no need to add typeNameStart.\n\u003e \n\nI can\u0027t see this code anywhere...\n\n\u003e Please also review the usage of \u0027getCurrentTokenEndPosition()\u0027. It unfortunatly\n\u003e returns the _inclusive_ end position.\n\u003e \n\u003e -\u003e length \u003d end + 1 - start;\n\u003e \n\nThe code is IMHO correct.\n\nEclipse style:\n  FOOBAR\n\nFOOBAR needs to be selected\n\neclipseLength\u003d end - start + 1\u003d end + 1 - start\n\nTraditional:\n  \"foobar\"\n\nfoobar needs to be selected\n\nastart\u003d start + 1\nlength\u003d end - astart\u003d end - (start + 1)\u003d end - start - 1\u003d end - start + 1 - 2\u003d eclipseLength - 2\n\n",
    "fix2 fixes it.",
    "verified in m6"
  ],
  "commentCreationDates": [
    "2006-03-28T11:13:51+02:00",
    "2006-03-29T11:23:31+02:00",
    "2006-03-29T13:37:23+02:00",
    "2006-03-29T13:38:10+02:00",
    "2006-03-29T14:08:45+02:00",
    "2006-03-29T15:09:20+02:00",
    "2006-03-29T15:12:39+02:00",
    "2006-03-29T15:30:50+02:00",
    "2006-03-29T16:02:13+02:00",
    "2006-03-30T17:28:51+02:00",
    "2006-04-03T15:43:52+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: -13",
      "elements": [
        {
          "method": "java.lang.String.substring",
          "source": "String.java:1444"
        },
        {
          "method": "java.lang.String.substring",
          "source": "String.java:1411"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResultRequestor.findKey",
          "source": "NLSSearchResultRequestor.java:200"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResultRequestor.acceptSearchMatch",
          "source": "NLSSearchResultRequestor.java:111"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.report",
          "source": "MatchLocator.java:1658"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference",
          "source": "TypeReferenceLocator.java:532"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference",
          "source": "TypeReferenceLocator.java:308"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference",
          "source": "TypeReferenceLocator.java:280"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator.matchReportReference",
          "source": "TypeReferenceLocator.java:319"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching",
          "source": "MatchLocator.java:2247"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching",
          "source": "MatchLocator.java:2376"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching",
          "source": "MatchLocator.java:2141"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.process",
          "source": "MatchLocator.java:1548"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1033"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1074"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches",
          "source": "MatchLocator.java:1195"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches",
          "source": "JavaSearchParticipant.java:94"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches",
          "source": "BasicSearchEngine.java:212"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.BasicSearchEngine.search",
          "source": "BasicSearchEngine.java:498"
        },
        {
          "method": "org.eclipse.jdt.core.search.SearchEngine.search",
          "source": "SearchEngine.java:538"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchQuery.run",
          "source": "NLSSearchQuery.java:89"
        },
        {
          "method": "org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run",
          "source": "InternalSearchUI.java:89"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "133488",
      "date": "2006-03-28T11:13:51+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "133488",
  "bugId": "133488",
  "date": "2006-03-28T11:13:51+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}