{
  "comments": [
    "I keep getting this error in my logs when validating HTML and JSP files:\n\n!ENTRY org.eclipse.core.resources 4 1 2006-04-05 05:15:46.560\n!MESSAGE Internal Error\n!STACK 0\njava.lang.IllegalArgumentException: Attempted to beginRule: P/org.eclipse.help.webapp, does not match outer scope rule: org.eclipse.wst.validation.internal.core.EmptySchedulingRule@cfa5c1\n\tat org.eclipse.core.runtime.Assert.isLegal(Assert.java:60)\n\tat org.eclipse.core.internal.jobs.ThreadJob.illegalPush(ThreadJob.java:116)\n\tat org.eclipse.core.internal.jobs.ThreadJob.push(ThreadJob.java:225)\n\tat org.eclipse.core.internal.jobs.ImplicitJobs.begin(ImplicitJobs.java:80)\n\tat org.eclipse.core.internal.jobs.JobManager.beginRule(JobManager.java:218)\n\tat org.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:96)\n\tat org.eclipse.core.internal.resources.Workspace.prepareOperation(Workspace.java:1684)\n\tat org.eclipse.core.internal.resources.Resource.refreshLocal(Resource.java:1396)\n\tat org.eclipse.core.internal.resources.File.refreshLocal(File.java:334)\n\tat org.eclipse.core.internal.filebuffers.ResourceFileBuffer.refreshFile(ResourceFileBuffer.java:452)\n\tat org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:238)\n\tat org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:110)\n\tat org.eclipse.wst.sse.core.internal.FileBufferModelManager.getModel(FileBufferModelManager.java:541)\n\tat org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel(ModelManagerImpl.java:318)\n\tat org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel(ModelManagerImpl.java:304)\n\tat org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.getModelForRead(ModelManagerImpl.java:1062)\n\tat org.eclipse.wst.html.internal.validation.HTMLValidator.getModel(HTMLValidator.java:108)\n\tat org.eclipse.wst.html.internal.validation.HTMLValidator.validateFile(HTMLValidator.java:469)\n\tat org.eclipse.wst.html.internal.validation.HTMLValidator.validateContainer(HTMLValidator.java:434)\n\tat org.eclipse.wst.html.internal.validation.HTMLValidator.validateFull(HTMLValidator.java:496)\n\tat org.eclipse.wst.html.internal.validation.HTMLValidator.validate(HTMLValidator.java:210)\n\tat org.eclipse.wst.html.internal.validation.HTMLValidator.validateInJob(HTMLValidator.java:514)\n\tat org.eclipse.wst.validation.internal.operations.ValidatorJob.run(ValidatorJob.java:85)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\nThe Core Filebuffers API is the intended way for plugins to access text document repesentations of files, and it uses rules implicitly when reading and writing files.  The default rule provided by the validation framework does not properly contain the resource rule used when reading files in the project being validated, or ANY OTHER RULE for that matter.\n\nThe scheduling rule should be allowed to be \"null\" since \"null\" is a valid value in the Job API.  If the IValidationContext does not return a rule, one should not be set on the IValidationJob.",
    "Also seen:\n\n!ENTRY org.eclipse.wst.validation 4 0 2006-04-05 05:17:01.878\n!MESSAGE \n*** ERROR ***: Wed Apr 05 05:17:00 EDT 2006    org.eclipse.jst.j2ee.commonarchivecore.internal.exception.DeploymentDescriptorLoadException: WEB-INF/web.xml\n    Stack trace of nested exception:\n    java.lang.IllegalArgumentException: Attempted to beginRule: F/webApp/WebContent/WEB-INF, does not match outer scope rule: org.eclipse.wst.validation.internal.core.EmptySchedulingRule@8c6ad\n    \tat org.eclipse.core.runtime.Assert.isLegal(Assert.java:60)\n    \tat org.eclipse.core.internal.jobs.ThreadJob.illegalPush(ThreadJob.java:116)\n    \tat org.eclipse.core.internal.jobs.ThreadJob.push(ThreadJob.java:225)\n    \tat org.eclipse.core.internal.jobs.ImplicitJobs.begin(ImplicitJobs.java:80)\n    \tat org.eclipse.core.internal.jobs.JobManager.beginRule(JobManager.java:218)\n    \tat org.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:96)\n    \tat org.eclipse.core.internal.resources.Workspace.prepareOperation(Workspace.java:1684)\n    \tat org.eclipse.core.internal.resources.Resource.refreshLocal(Resource.java:1396)\n    \tat org.eclipse.core.internal.resources.File.refreshLocal(File.java:334)\n    \tat org.eclipse.core.internal.filebuffers.ResourceFileBuffer.refreshFile(ResourceFileBuffer.java:452)\n    \tat org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:238)\n    \tat org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:110)\n    \tat org.eclipse.wst.sse.core.internal.FileBufferModelManager.getModel(FileBufferModelManager.java:541)\n    \tat org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel(ModelManagerImpl.java:318)\n    \tat org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel(ModelManagerImpl.java:304)\n    \tat org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.getModelForRead(ModelManagerImpl.java:1062)\n    \tat org.eclipse.wst.xml.core.internal.emf2xml.EMF2DOMSSERenderer.initializeXMLModel(EMF2DOMSSERenderer.java:389)\n    \tat org.eclipse.wst.xml.core.internal.emf2xml.EMF2DOMSSERenderer.loadDocument(EMF2DOMSSERenderer.java:423)\n    \tat org.eclipse.wst.common.internal.emf.resource.EMF2DOMRenderer.doLoad(EMF2DOMRenderer.java:60)\n    \tat org.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.basicDoLoad(TranslatorResourceImpl.java:141)\n    \tat org.eclipse.wst.common.internal.emf.resource.CompatibilityXMIResourceImpl.doLoad(CompatibilityXMIResourceImpl.java:173)\n    \tat org.eclipse.emf.ecore.resource.impl.ResourceImpl.load(ResourceImpl.java:1018)\n    \tat org.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.load(TranslatorResourceImpl.java:387)\n    \tat org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoad(ResourceSetImpl.java:249)\n    \tat org.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.demandLoad(ProjectResourceSetImpl.java:83)\n    \tat org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoadHelper(ResourceSetImpl.java:264)\n    \tat org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.getResource(ResourceSetImpl.java:349)\n    \tat org.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.getResource(ProjectResourceSetImpl.java:262)\n    \tat org.eclipse.jst.j2ee.internal.archive.operations.ComponentLoadStrategyImpl.getMofResource(ComponentLoadStrategyImpl.java:447)\n    \tat org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ArchiveImpl.getMofResource(ArchiveImpl.java:869)\n    \tat org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ModuleFileImpl.getDeploymentDescriptorResource(ModuleFileImpl.java:255)\n    \tat org.eclipse.jst.j2ee.commonarchivecore.internal.strategy.XmlBasedImportStrategyImpl.primLoadDeploymentDescriptor(XmlBasedImportStrategyImpl.java:39)\n    \tat org.eclipse.jst.j2ee.commonarchivecore.internal.strategy.War22ImportStrategyImpl.loadDeploymentDescriptor(War22ImportStrategyImpl.java:87)\n    \tat org.eclipse.jst.j2ee.commonarchivecore.internal.strategy.War22ImportStrategyImpl.importMetaData(War22ImportStrategyImpl.java:81)\n    \tat org.eclipse.jst.j2ee.commonarchivecore.internal.impl.WARFileImpl.getDeploymentDescriptor(WARFileImpl.java:150)\n    \tat org.eclipse.jst.j2ee.model.internal.validation.WarValidator.validateInJob(WarValidator.java:280)\n    \tat org.eclipse.jst.j2ee.internal.web.validation.UIWarValidator.validateInJob(UIWarValidator.java:90)\n    \tat org.eclipse.wst.validation.internal.operations.ValidatorJob.run(ValidatorJob.java:85)\n    \tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)",
    "I believe this is (mosty) by-design in new validation framework.\nThe idea was that no one *should* be doing in \"modifications\" since that \ncan trigger new builds, etc. \n\nBut your are right, someone needs to do sometihng.  Either a new class of \nvalidators, that allow scheduling rules to be obtained/set, so we would get one from file buffers before starting ... or, we need a new doucment manager! \n\nAdding Dani for comment. Dani, we\u0027ve briefly discussed this problem before. \nHave a soltuion yet? :)  I would guess your solution would be that all clients have to get the \"modify rule\" before \"getting\" a document, even if they do not plan on modifying it?  Any chance a new method oculd be added that let\u0027s client, basically, spec if \"refreshLocal\" should or should not be used?  \n\n",
    "It is wrong that you would have to obtain a scheduling rule that allows writes, when you do not intend to change the document. I think the underlying problem should be fixed, not just simply masking the problem by granting more access then you really need. ",
    "\u003eIt is wrong that you would have to obtain a scheduling rule that allows writes,\n\u003ewhen you do not intend to change the document.\nThere\u0027s no modify rule needed but the refresh rule (see also bug 75638).\n\n\u003e I would guess your solution would be that all clients\n\u003ehave to get the \"modify rule\" before \"getting\" a document\nNo, in fact most clients do not have to get the refresh rule unless of course they run that code inside an operation on which they have set a scheduling rule themselves. In such situations - like with all other operations that involve a scheduling rule - you have to ensure to use a MultiRule.\n\n\u003eAny chance a new method oculd be added that let\u0027s\n\u003eclient, basically, spec if \"refreshLocal\" should or should not be used?\nSimply make sure the file is refreshed before creating the document. This will make sure it doesn\u0027t run into the refresh code.",
    "This  defect couldn\u0027t be addressed at validation framework level, it is upto the validator implementor  on  how they implement it. The  framework provides you ability to set the scheduling rule.",
    "Reopening.  My validator is not returning a rule at all.  Nothing in the IValidatorJob interface nor the Job class says that one is *required*, the Job class even says that \"null\" is valid.  The validator framework forces any IValidatorJobs that are returning \"null\" as its rule to use a different rule they might not have been designed to safely run with.",
    "Retargetting to review in 151... Other Scheduling rule fixes are slated for 151.\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d145529",
    "EmptySchedulingRule is not being used as the default scheduling rule now.",
    "*** Bug 153852 has been marked as a duplicate of this bug. ***",
    "Verified that exceptions not seen anymore during jsp/html validation.",
    "closing"
  ],
  "commentCreationDates": [
    "2006-04-05T11:46:00+02:00",
    "2006-04-05T11:55:56+02:00",
    "2006-04-05T13:39:28+02:00",
    "2006-04-05T15:29:22+02:00",
    "2006-04-05T16:45:26+02:00",
    "2006-05-11T15:26:04+02:00",
    "2006-06-26T20:50:49+02:00",
    "2006-06-27T15:41:35+02:00",
    "2006-07-31T16:52:22+02:00",
    "2006-08-15T17:42:58+02:00",
    "2006-09-26T20:29:35+02:00",
    "2006-09-26T20:38:42+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Attempted to beginRule: P/org.eclipse.help.webapp, does not match outer scope rule: org.eclipse.wst.validation.internal.core.EmptySchedulingRule@cfa5c1",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.Assert.isLegal",
          "source": "Assert.java:60"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.illegalPush",
          "source": "ThreadJob.java:116"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.push",
          "source": "ThreadJob.java:225"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:80"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:218"
        },
        {
          "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
          "source": "WorkManager.java:96"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
          "source": "Workspace.java:1684"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.refreshLocal",
          "source": "Resource.java:1396"
        },
        {
          "method": "org.eclipse.core.internal.resources.File.refreshLocal",
          "source": "File.java:334"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer.refreshFile",
          "source": "ResourceFileBuffer.java:452"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create",
          "source": "ResourceFileBuffer.java:238"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect",
          "source": "TextFileBufferManager.java:110"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.FileBufferModelManager.getModel",
          "source": "FileBufferModelManager.java:541"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel",
          "source": "ModelManagerImpl.java:318"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel",
          "source": "ModelManagerImpl.java:304"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.getModelForRead",
          "source": "ModelManagerImpl.java:1062"
        },
        {
          "method": "org.eclipse.wst.html.internal.validation.HTMLValidator.getModel",
          "source": "HTMLValidator.java:108"
        },
        {
          "method": "org.eclipse.wst.html.internal.validation.HTMLValidator.validateFile",
          "source": "HTMLValidator.java:469"
        },
        {
          "method": "org.eclipse.wst.html.internal.validation.HTMLValidator.validateContainer",
          "source": "HTMLValidator.java:434"
        },
        {
          "method": "org.eclipse.wst.html.internal.validation.HTMLValidator.validateFull",
          "source": "HTMLValidator.java:496"
        },
        {
          "method": "org.eclipse.wst.html.internal.validation.HTMLValidator.validate",
          "source": "HTMLValidator.java:210"
        },
        {
          "method": "org.eclipse.wst.html.internal.validation.HTMLValidator.validateInJob",
          "source": "HTMLValidator.java:514"
        },
        {
          "method": "org.eclipse.wst.validation.internal.operations.ValidatorJob.run",
          "source": "ValidatorJob.java:85"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "134987",
      "date": "2006-04-05T11:46:00+02:00",
      "product": "Web Tools",
      "component": "wst.validation",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Attempted to beginRule: F/webApp/WebContent/WEB-INF, does not match outer scope rule: org.eclipse.wst.validation.internal.core.EmptySchedulingRule@8c6ad",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.Assert.isLegal",
          "source": "Assert.java:60"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.illegalPush",
          "source": "ThreadJob.java:116"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.push",
          "source": "ThreadJob.java:225"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:80"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:218"
        },
        {
          "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
          "source": "WorkManager.java:96"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
          "source": "Workspace.java:1684"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.refreshLocal",
          "source": "Resource.java:1396"
        },
        {
          "method": "org.eclipse.core.internal.resources.File.refreshLocal",
          "source": "File.java:334"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer.refreshFile",
          "source": "ResourceFileBuffer.java:452"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create",
          "source": "ResourceFileBuffer.java:238"
        },
        {
          "method": "org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect",
          "source": "TextFileBufferManager.java:110"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.FileBufferModelManager.getModel",
          "source": "FileBufferModelManager.java:541"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel",
          "source": "ModelManagerImpl.java:318"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._commonGetModel",
          "source": "ModelManagerImpl.java:304"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.getModelForRead",
          "source": "ModelManagerImpl.java:1062"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.emf2xml.EMF2DOMSSERenderer.initializeXMLModel",
          "source": "EMF2DOMSSERenderer.java:389"
        },
        {
          "method": "org.eclipse.wst.xml.core.internal.emf2xml.EMF2DOMSSERenderer.loadDocument",
          "source": "EMF2DOMSSERenderer.java:423"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.EMF2DOMRenderer.doLoad",
          "source": "EMF2DOMRenderer.java:60"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.basicDoLoad",
          "source": "TranslatorResourceImpl.java:141"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.CompatibilityXMIResourceImpl.doLoad",
          "source": "CompatibilityXMIResourceImpl.java:173"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceImpl.load",
          "source": "ResourceImpl.java:1018"
        },
        {
          "method": "org.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.load",
          "source": "TranslatorResourceImpl.java:387"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoad",
          "source": "ResourceSetImpl.java:249"
        },
        {
          "method": "org.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.demandLoad",
          "source": "ProjectResourceSetImpl.java:83"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.demandLoadHelper",
          "source": "ResourceSetImpl.java:264"
        },
        {
          "method": "org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.getResource",
          "source": "ResourceSetImpl.java:349"
        },
        {
          "method": "org.eclipse.jem.internal.util.emf.workbench.ProjectResourceSetImpl.getResource",
          "source": "ProjectResourceSetImpl.java:262"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.archive.operations.ComponentLoadStrategyImpl.getMofResource",
          "source": "ComponentLoadStrategyImpl.java:447"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ArchiveImpl.getMofResource",
          "source": "ArchiveImpl.java:869"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.impl.ModuleFileImpl.getDeploymentDescriptorResource",
          "source": "ModuleFileImpl.java:255"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.strategy.XmlBasedImportStrategyImpl.primLoadDeploymentDescriptor",
          "source": "XmlBasedImportStrategyImpl.java:39"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.strategy.War22ImportStrategyImpl.loadDeploymentDescriptor",
          "source": "War22ImportStrategyImpl.java:87"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.strategy.War22ImportStrategyImpl.importMetaData",
          "source": "War22ImportStrategyImpl.java:81"
        },
        {
          "method": "org.eclipse.jst.j2ee.commonarchivecore.internal.impl.WARFileImpl.getDeploymentDescriptor",
          "source": "WARFileImpl.java:150"
        },
        {
          "method": "org.eclipse.jst.j2ee.model.internal.validation.WarValidator.validateInJob",
          "source": "WarValidator.java:280"
        },
        {
          "method": "org.eclipse.jst.j2ee.internal.web.validation.UIWarValidator.validateInJob",
          "source": "UIWarValidator.java:90"
        },
        {
          "method": "org.eclipse.wst.validation.internal.operations.ValidatorJob.run",
          "source": "ValidatorJob.java:85"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "134987",
      "date": "2006-04-05T11:55:56+02:00",
      "product": "Web Tools",
      "component": "wst.validation",
      "severity": "major"
    }
  ],
  "groupId": "134987",
  "bugId": "134987",
  "date": "2006-04-05T11:46:00+02:00",
  "product": "Web Tools",
  "component": "wst.validation",
  "severity": "major"
}