{
  "comments": [
    "On OX X with eclipse RC1, deleting a project from eclipse fails due to the immutable bit set with \nchflags. When deleting a project with \"Also delete contents under ...\" option, eclipse fails with \n\"Problems encountered while deleting resources\" error message.\n\nDeleting the project works after I manually unset the immutable bit by running \"chflags -R nouchg .\" \ncommand from the shell.\n\nThe full stacktrace below:\n\nMESSAGE Could not delete: /TeamTest.\n!STACK 1\norg.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.\n        at \norg.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java\n:172)\n        at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:778)\n        at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1506)\n        at org.eclipse.core.internal.resources.Resource.delete(Resource.java:669)\n        at org.eclipse.core.internal.resources.Project.delete(Project.java:320)\n        at org.eclipse.ui.actions.DeleteResourceAction.delete(DeleteResourceAction.java:346)\n        at org.eclipse.ui.actions.DeleteResourceAction.delete(DeleteResourceAction.java:314)\n        at org.eclipse.ui.actions.DeleteResourceAction.access$0(DeleteResourceAction.java:305)\n        at org.eclipse.ui.actions.DeleteResourceAction$2.execute(DeleteResourceAction.java:429)\n        at org.eclipse.ui.actions.WorkspaceModifyOperation$1.run(WorkspaceModifyOperation.java:91)\n        at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1673)\n        at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:105)\n        at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:101)",
    "When watch/edit is enabled for a project, CVS uses Core API to set the read \nonly bit of the file. I would suspect that deleting a file would unset it \nusing the same API. Moving to Core since this is not really a Team issue and \ncoping Andre since he has been dealing with similar problems on the Mac.",
    "Andre, I think this is fixed by the native patch to bug 61755.\nPlease confirm.",
    "No, my native patch fixed a problem in CoreFileSystemLibrary.setReadOnly().\nBut this method isn\u0027t called when deleting resources.\n\nPlease note: files cannot be removed if their immutable bit is set.",
    "Andre,\n\nI\u0027m sorry I wasn\u0027t clear enough.  \nThis is for CVS project.  When I create a project by checking out an existing project in CVS and try to \ndelete the project, eclipse is unable to delete the project and its resources because it fails to delete the \nresources.  So I\u0027m not explicitly setting the immutable bit - eclipse is.\n\nThanks",
    "Yes, I think I understood what the problem is: Eclipse fails to call setReadOnly(false) \nbefore trying to delete a resource (or after an attempt to delete the resource has failed).\nMy comment #3 was a response to comment #2.\n",
    "Exactly.  I thought your note in comment 3 was for me. \nlike you implied, i do not think this is an issue with the native library.  eclipse is not unsetting the read-\nonly bit before deleting resources, and os x might be the only platform that will have this problem since \nother OSes (that eclipse officially supports) won\u0027t have this problem.    ",
    "Ok, I understand now. Here is a summary:\n\n(Nick, I was incorrect about the \"getting out of sync\" thing that I\nmentioned...perhaps it was something extra involved when CVS was part of the\nequation)\n\nOn Windows/Linux:\n- create project AAA\n- create file FILE\n- mark FILE as read-only\n- try to delete FILE\n    -\u003e asked for confirmation\n    -\u003e works OK\n- create file FILE2\n- mark FILE2 as read-only\n- try to delete AAA\n    -\u003e asked for confirmation\n    -\u003e works OK\n\nOn MacOSX:\n- create project AAA\n- create file FILE\n- mark FILE as read-only\n- try to delete FILE\n    -\u003e asked for confirmation\n    -\u003e fails\n- try to delete AAA\n    -\u003e asked for confirmation\n    -\u003e fails\n\nIn the DeleteResourceAction, the ReadOnlyStateChecker goes through all the\nresources to delete and checks to see if they are read-only or read-write. For\nthe ones that are read-only, it prompts the user if they really want to delete\nthem. If the user answers Yes then they are added to the resulting array of\nresources to delete.\n\nThen the delete code goes through and just calls our APIs to delete the\nindividual resources. They are using the IResource.FORCE flag but that is only\nintended to resolve the \"out-of-sync with the filesystem\" state and doesn\u0027t do\nanything about read-only status.\n\nIt seems like a combination of differences between:\n- java.io.File#delete\n- being able to delete a folder which has read-only children\n...on the different file-systems results in different behaviour.\n\nMoving to Platform/UI for comment and adding Nick to CC. \nMaybe we should be doing something like this?\n\n- user calls DeleteResourceAction\n- ReadOnlyStateChecker checks status and adds/removes from resulting array\n- for each resource do: core API for delete is called\n- if (failed \u0026\u0026 file.isReadOnly()) then file.setReadOnly(false) and try again\n",
    "Wouldn\u0027t it be better to hide this platform difference in as low a layer as\npossible (i.e. Core)?  What are the intended semantics of IResource.delete(...)\non a read only file?  In my view, either it can either fail or not, but it\nshould be consistently on all platforms.\n\nNote that for project deletion, which just call delete on the IProject, so we\ndon\u0027t have the opportunity to try again on individual files, without recursing\nover the project\u0027s files ourselves.\n\n\n",
    "Adding McQ to CC for comment.",
    "The javadoc in IResource claims that it can throw a CoreException if the resource could not be deleted \n\"for some reason\". Although I agree that it would be good if the set of reasons was consistent across \nplatforms, we can not guarantee this. Attempting to force this to be true in general would lead to \nfragile, per platform, special case code that could potentially change every release of the o/s and have \nsubtle, unexpected side-effects.\n\nIn other words, as long as the method *is* throwing an exception that indicates that the resource could \nnot be deleted, then the application code should have been able to deal with it.\n\nHaving said that, in this particular case, it seems like we could do a better job in Core than we are. \nPersonally, I don\u0027t like the idea of allowing r/o files to be deleted, so if I had my way, I\u0027d argue that we \nshould explicitely check the r/o status on other platforms and throw an exception if it is set. \n\n*However*, despite the fact that I believe this is the correct solution, I do not believe we can make this \nchange at this point. It would almost certainly break lots of code that has not been well tested on the \nMac, and in particular, points out a hole in the way watch edit works: In this case, the fact that the files \nare read-only is a side effect of the implementation of watch edit. Since watch edit caused the files to \nbe in this state (rather than the user), the watch edit code would need to participate in the delete \noperation so that it could mark the files as r/w for deletion. Ugh.\n\nAn alternative would be to add a new flag, say \"DELETE_READ_ONLY\", to the delete operation but since \nno team has the cycles to respond to this at this point (and we are API frozen), this will not work.\n\nEssentially, at this point, the best I can see is for us to overload the meaning of the FORCE flag to allow \ndeletion in both the out-of-sync and read-only cases. I expect this is close to most user\u0027s expectations \nin any case.\n\nComments?",
    "As a user, here\u0027s my two cents (hope you don\u0027t mind this).\n\nFrom a user\u0027s perspective, this is what seems to make sense to me.  Eclipse is already asking if it\u0027s ok to \ndelete read only resources.  So when the user says ok, explcitly set readonly flag to false (by calling \ninternalReadOnly) for the files marked as readonly before proceeding to delete the project.  but i could \nsee you guys don\u0027t want to do this for performance issue though.\n\nAnother potential solution is not using immutable bit at all on mac.  It\u0027s a cool feature that osx/darwin \ngives mac users to protect files, but I believe it\u0027s a unique system call available only on mac (please \ncorrect me if I\u0027m wrong).  if chflag call is removed from mac\u0027s core, then I would think the behavior of \nthe readonly will be consistent across all OSes.  Maybe I\u0027m sure you guys must have a good reason to \nuse that bit.  just thinking out loud.\n\nAnywa, As I mentioned in my other post, I don\u0027t think this is a huge deal as I don\u0027t delete cvs enabled \nproject that often.  This problem must have existed since core implemented chflag function call, and \nthe fact that this issue was not reported before seems to indicate it wouldn\u0027t affect majority of mac \nusers for the time being.  so at least for 3.0 release, I for one as a user don\u0027t expect a fix for this. (plus \nthere\u0027s an easy way around this).\n\none thing i\u0027d like to point out though is that this project is not cvs watch/edit enabled - aka i didn\u0027t set \nthe option explicitly.  or I might have misunderstood what you meant by watch/edit.\n\nthank you all for paying attention to this.",
    "why we use the immutable bit on Mac OS X:\n\n- the Perforce versioning control system uses this flag (see bug #41056)\n- the \"locked\" bit of Mac files (see GetInfo) is implemented on top of this.\n- the UF_IMMUTABLE is BSD API, it is not Mac specific.\n\nSo, I don\u0027t think we can eliminate the use of UF_IMMUTABLE.",
    "Yujin, The only time I see files being marked read-only is via watch/edit. I have no problem deleting \nprojects normally. I don\u0027t know why you would be seeing this behavior unless you explicitely set the r/o \nflag.\n\nEveryone: Is Eclipse marking some of the files r/o now?\n",
    "The UI does not mark files read-only unless the user explicitly marked it as\nsuch, e.g. in the properties page.\n",
    "Thanks Andre for clearing it up.  \n\nAs for when the r/0 gets set, when i create a project that exists in cvs, or when i replace file with latest \nversion in cvs, etc, the r/o gets set.\n\ni\u0027m i\u0027m creating a regular file (no cvs), then the file is writable.",
    "This looks like a duplicate of bug 21084.",
    "\n\n*** This bug has been marked as a duplicate of 21084 ***"
  ],
  "commentCreationDates": [
    "2004-06-06T07:59:01+02:00",
    "2004-06-07T03:53:27+02:00",
    "2004-06-10T22:50:52+02:00",
    "2004-06-11T11:45:39+02:00",
    "2004-06-11T14:35:33+02:00",
    "2004-06-11T14:45:04+02:00",
    "2004-06-11T17:05:35+02:00",
    "2004-06-11T18:43:48+02:00",
    "2004-06-11T21:13:19+02:00",
    "2004-06-11T22:56:50+02:00",
    "2004-06-13T20:02:33+02:00",
    "2004-06-14T07:46:31+02:00",
    "2004-06-14T09:58:37+02:00",
    "2004-06-14T13:12:40+02:00",
    "2004-06-14T17:16:46+02:00",
    "2004-06-18T15:56:04+02:00",
    "2005-06-10T00:39:18+02:00",
    "2005-06-10T15:49:36+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Problems encountered while deleting resources.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.localstore.FileSystemResourceManager.delete",
          "source": "FileSystemResourceManager.java :172"
        },
        {
          "method": "org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject",
          "source": "ResourceTree.java:778"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.unprotectedDelete",
          "source": "Resource.java:1506"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.delete",
          "source": "Resource.java:669"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.delete",
          "source": "Project.java:320"
        },
        {
          "method": "org.eclipse.ui.actions.DeleteResourceAction.delete",
          "source": "DeleteResourceAction.java:346"
        },
        {
          "method": "org.eclipse.ui.actions.DeleteResourceAction.delete",
          "source": "DeleteResourceAction.java:314"
        },
        {
          "method": "org.eclipse.ui.actions.DeleteResourceAction.access$0",
          "source": "DeleteResourceAction.java:305"
        },
        {
          "method": "org.eclipse.ui.actions.DeleteResourceAction$2.execute",
          "source": "DeleteResourceAction.java:429"
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation$1.run",
          "source": "WorkspaceModifyOperation.java:91"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1673"
        },
        {
          "method": "org.eclipse.ui.actions.WorkspaceModifyOperation.run",
          "source": "WorkspaceModifyOperation.java:105"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext$ModalContextThread.run",
          "source": "ModalContext.java:101"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "65893",
      "duplicateId": "21084",
      "date": "2004-06-06T07:59:01+02:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "21084",
  "bugId": "65893",
  "duplicateId": "21084",
  "date": "2004-06-06T07:59:01+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}