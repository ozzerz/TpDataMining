{
  "comments": [
    "Build ID: M20070212-1330\n\nSteps To Reproduce:\n1. Delete or refactor a resource\n\nProblem: \"Resouce does not exist\" message is printed in Error log.\n\nHere\u0027s the comments added by Hiroshi Tsuji from the original defect:\n---------------------------\nWe need to have Eclipse add a check that the resource being decorated exists before passing it to decorators\nThis fix would involve adding a call to IResource.exists() in     org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(). This would avoid individual decorators from causing the exception in most cases when the resource no longer exists. This case can apparently occur when the user deletes resources while the decorator thread is running.\n\n\nMore information:\nIf you need more information please contact mandylh@ca.ibm.com or htsuji@ca.ibm.com.",
    "I am appending the original problem description. Although the steps to reproduce are specific to our adopting product, you can see that a file is being deleted (and possibly other associated files, as well) in step 3. The exception stack trace is also below.\n\nI realize that the ResourceException is caused by a decorator that is not supplied by Eclipse, and could be fixed in the decorator code by checking if the file exists. However, that decorator also is not provided by our product. It could become difficult for us to track down all providers of all decorators that are causing a similar exception, when it appears that a check for the existence of the file in the decorator thread would prevent it for all decorators.\n\nIs there a reason why a decorator might want to receive a recently deleted file, and if so, are all deleted files passed to a decorator?\n\n- - - - -\n\nSteps to reproduce:\n1) Add a new BSM;\n2) Add a new state to the BSM, Save the changes and close the edtior;\n3) Wait until the \"Building workspace\" process completed, delete the BSM from the BI view;\n\nProblem: Exception is reported in the Error log:\norg.eclipse.core.internal.resources.ResourceException: Resource /Module1/gg.sacl does not exist.\n       at org.eclipse.core.internal.resources.Resource.checkExists(Resource.java:311)\n       at org.eclipse.core.internal.resources.Resource.checkAccessible(Resource.java:187)\n       at org.eclipse.core.internal.resources.Resource.getPersistentProperty(Resource.java:997)\n       at com.ibm.correlation.rulemodeler.act.presentation.ACTLResourceState.decorate(Unknown Source)\n       at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:253)\n       at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:71)\n       at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n       at org.eclipse.core.runtime.Platform.run(Platform.java:843)\n       at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:336)\n       at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:322)\n       at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:338)\n       at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:308)\n       at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n",
    "You can work around this yourself by checking if the resource exists. I am reluctant to consider this change as adding arbitrary filtering may be breaking another decorator that does want to work in that case.\n\nACTLResourceState should do this check.",
    "As I mentioned, we do not own the decorator. I also suspect that files are not passed to decorators when they are deleted. If this is true, it would be rather arbitrary what deleted files a decorator could expect to see (e.g. only those that are deleted while the decorator thread is running). As a result, any code that a decorator provides specifically to run on deleted files, such as clean-up code, would not run predictably anyway. So unless my premise of not receiving all deleted files is false, I can\u0027t see that any decorator could be doing anything useful with deleted files, except to ignore them.\n\nHowever, I understand your reluctance to change code that is not causing any real breakage.\n",
    "I realize that it is a bit of a wild cse but say someone chose not to removed deleted files from a view but had a \"deleted\" decorator?\n\nI don;t expect that this is the case but every time I assert that something would never happen I find someone who does.\n\nI think the best we can do is log a bug to the owner of the decorator."
  ],
  "commentCreationDates": [
    "2007-11-07T15:21:15+01:00",
    "2007-11-07T20:04:34+01:00",
    "2007-11-08T14:18:47+01:00",
    "2007-11-08T15:54:44+01:00",
    "2007-11-08T17:56:50+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Resource /Module1/gg.sacl does not exist.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.resources.Resource.checkExists",
          "source": "Resource.java:311"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.checkAccessible",
          "source": "Resource.java:187"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.getPersistentProperty",
          "source": "Resource.java:997"
        },
        {
          "method": "com.ibm.correlation.rulemodeler.act.presentation.ACTLResourceState.decorate",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate",
          "source": "LightweightDecoratorDefinition.java:253"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run",
          "source": "LightweightDecoratorManager.java:71"
        },
        {
          "method": "org.eclipse.core.runtime.SafeRunner.run",
          "source": "SafeRunner.java:37"
        },
        {
          "method": "org.eclipse.core.runtime.Platform.run",
          "source": "Platform.java:843"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate",
          "source": "LightweightDecoratorManager.java:336"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations",
          "source": "LightweightDecoratorManager.java:322"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached",
          "source": "DecorationScheduler.java:338"
        },
        {
          "method": "org.eclipse.ui.internal.decorators.DecorationScheduler$1.run",
          "source": "DecorationScheduler.java:308"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "209040",
      "date": "2007-11-07T20:04:34+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "enhancement"
    }
  ],
  "groupId": "209040",
  "bugId": "209040",
  "date": "2007-11-07T15:21:15+01:00",
  "product": "Platform",
  "component": "UI",
  "severity": "enhancement"
}