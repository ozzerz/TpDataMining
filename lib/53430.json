{
  "comments": [
    "Creating separate bug as requested in bug 37775.\n\nI have made additional changes to SWT-N20040228 to address some problems\noccuring when using SWT on the amd64 platform. With the patches attached I am\nnow able to get the first window of Eclipse-N20040228 up and running.\n\nThere are all kinds of fixes, including changes in the glue .c files - although\nI understand these are automatically generated? There are changes made to\nparameters, return values, size constants and pointer arithmetics using the same\nstandard as the other changes ( int -\u003e long /*int*/ ).\n\nbtw, I was thinking that being able to get conversion warnings from both C and\nJava compilers when an implicit conversion from int to long is taking place\nwould be of great help, wouldn\u0027t it? Wouldn\u0027t that pinpoint possible problem areas?\n\nAnyways, I plan to continue with getting Eclipse going on 64-bit. If I come up\nwith new patches, should I attach them here as well or open a new bug?",
    "Created an attachment (id\u003d8254)\nPatches for swt source files in SWT-N20040228\n",
    "Created an attachment (id\u003d8255)\nPatches for swt-pi source files in SWT-N20040228\n",
    "Just checked SWT-N20040301 and it only contains some changes to os.c - note that\nthe changes made to the function type return value is still needed.\n",
    "Created an attachment (id\u003d8256)\nPatches for swt source files in SWT-N20040228 (rev 2)\n\nReattaching patch without debug entry in Display.java.",
    "Created an attachment (id\u003d8259)\natches for swt source files in SWT-N20040228 (rev 3)\n\nStatus report: with these latest patches I am able to run Eclipse 3.0M7 without\nany major problems! I am not even close to an exhaustive run-through, but I\nhave created new projects with source files, edited and run them through the\ndebugger. \n\nThe only problems I am seeing are complaints like these in .log:\n\n!ENTRY org.eclipse.jdt.core 4 4 Mar 02, 2004 00:19:25.658\n!MESSAGE Background Indexer Crash Recovery\n!STACK 0\njava.lang.InternalError\n\tat java.util.zip.Inflater.end(Native Method)\n\tat java.util.zip.Inflater.end(Inflater.java:294)\n\tat java.util.zip.ZipFile.close(ZipFile.java:369)\n\tat\norg.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex.execute(AddJarFileToIndex.java:185)\n\n\tat\norg.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:344)\n\n\tat java.lang.Thread.run(Thread.java:534)\n\nI have seen this before and I see the possibility that this is actually an\nissue with the JDK (Blackdown 1.4.2rc1). Since there are rumours that a new JDK\nrelease is on the way, I am waiting to test that before spending any more time\non it.\n\nNew patches are mainly signature changes to callback methods.\n",
    "Thanks Johan. Your patch captures many of the remaining changes that need to \ngo in. I\u0027ll go through each one of the changes and put them in.\n\nQuestion about your patch - did you use Eclipse to generate it? they start \nwith N20040228/org/eclipse/swt/widgets/Display.java instead of - i believe - \norg.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display .\n\nYou can continue to post the patches here.\n\n\u003ebtw, I was thinking that being able to get conversion warnings from both C and\n\u003eJava compilers when an implicit conversion from int to long is taking place\n\u003ewould be of great help, wouldn\u0027t it? Wouldn\u0027t that pinpoint possible problem \n\u003eareas?\nAgree...\n\n",
    "In response to comment 5: this sounds great!",
    "Well, I guess I did my own setup to link together the eclipse source code to \nthe 64 bit code. I wanted a setup that could manage to update eclipse and \ngtk64 code without disturbing each other. I now have a setup where a script \nproduces symbolic links in the eclipse distribution replacing build files to \nintroduce the x86_64 platform (which I guess will be amd64 later on). There \nare also symbolic links to the source directories made up out of the gtk64 \nsource code. I am not sure how you have planned to get the 64 bit code into \nthe big tree in the end - I guess the 64 bit support should really go in other \nos/ws combinations as well.\n\nThe actual answer to your question in comment 6 though: the diffs are produced \nagainst each directory tree as they are stored in the zip-files in the gtk64 \nsource distribution (the swtsrc.zip, swt-pisrc.zip and swt-mozillasrc.zip \nfiles). So I would suggest creating a directory for each zip, uncompress and \nthen apply the patch from the parent directory. Then you can just add symbolic \nlinks from your eclipse tree to get to them.\n\nYou may laugh or cry, but so far I have not used Eclipse for doing any of the \nwork so far... ;o)  Just plain ant, gdb, emacs and a good deal of tracing. One \nof these days I want to understand how to get the Eclipse source into Eclipse \nas a project with build and debug support - do you know of any how-to-doc\u0027s on \nthat?\n\nI did start out looking at the mozilla code, but I realized that is just too \nmuch to get into at this point. Those virtual table calls didn\u0027t look like \nthat much fun to do manually - I hope you got some automagic scripts or \nsomething for those...\n",
    "We have had another pass of 64 bit refactoring. This should include the \nchanges in the attached patches. Please reopen or open new PR\u0027s if you believe \nwe missed certain spots or if you observe GP\u0027s.\nv\u003e20040305"
  ],
  "commentCreationDates": [
    "2004-03-01T20:15:19+01:00",
    "2004-03-01T20:16:43+01:00",
    "2004-03-01T20:17:25+01:00",
    "2004-03-01T20:57:14+01:00",
    "2004-03-01T21:24:22+01:00",
    "2004-03-01T23:39:46+01:00",
    "2004-03-01T23:52:28+01:00",
    "2004-03-01T23:53:28+01:00",
    "2004-03-02T00:32:36+01:00",
    "2004-03-05T14:32:44+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.InternalError",
      "elements": [
        {
          "method": "java.util.zip.Inflater.end",
          "source": "Native Method"
        },
        {
          "method": "java.util.zip.Inflater.end",
          "source": "Inflater.java:294"
        },
        {
          "method": "java.util.zip.ZipFile.close",
          "source": "ZipFile.java:369"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex.execute",
          "source": "AddJarFileToIndex.java:185"
        },
        {
          "method": "org.eclipse.jdt.internal.core.search.processing.JobManager.run",
          "source": "JobManager.java:344"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:534"
        }
      ],
      "number": 0,
      "commentIndex": 5,
      "bugId": "53430",
      "date": "2004-03-01T23:39:46+01:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "normal"
    }
  ],
  "groupId": "53430",
  "bugId": "53430",
  "date": "2004-03-01T20:15:19+01:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "normal"
}