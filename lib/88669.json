{
  "comments": [
    "SWT is packaged with the new plugin format since today\u0027s nightly build (bug \n88122). There are no more swt-pi.jar, swt-mozilla.jar swt.jar, just one \norg.eclipse.swt_win32.jar etc. that contains all the classes. \n\nThe native libraries are copied by Core into a location known to only Core \ngurus :-) and the SWT launcher does not find them anymore. We get:\n\njava.lang.UnsatisfiedLinkError: no swt-win32-3126 in java.library.path\n\tat java.lang.ClassLoader.loadLibrary(ClassLoader.java:1517)\n\tat java.lang.Runtime.loadLibrary0(Runtime.java:788)",
    "PDE can not rely on having the library exported somewhere, since this has\nnothing to do with osgi or runtime.\n\nIf PDE wants to provide the same level of comfort than it used to, it will have\nto extract the native libs somewhere. However I don\u0027t think this is a great story.\n\nInstead I think it would be best if SWT had some \"auto extraction\" code embedded.\nNote to Wassim, SWT has been thinking of having code that automatically extract\nthe libs at runtime, which would make the standalone case nicer to setup.",
    "Well Chris, we had a good run :-)\n\nJeff, any comforting recommendations?  short term and long term?",
    "Updating severity flag. We need to come up with a workaround for M6 - coming \nthursday.",
    "Yup.  the SWT launcher works if SWT is in the workspace. That shape did not \nchange at all.  What we need to do for the external case is extract the \nlibraries prior to launching.  The extraction is easy (we have code in OSGi \nthat does this so we can \"reuse\").  Three issues outstanding\n\n1) where do we put the extracted libs (and how do we manage them so they are \nreused)\n\n2) we have to set the permissions on them for *nix systems\n\n3) how do we know what libs there are to extract.\n\nAll seem tractible, just details to be set.\n\n1) somewhere in the PDE area and key the location to the launch config\n2) DJ wrote this code today for OSGi.  \"reuse\"\n3) presumably we know the OS/WS/Arch we are launching for so reach into the SWT \njar and extract all files for the current platform.  Could refine this to just \ngrab .so and .dll but that might be too refined.",
    "\u003e1) somewhere in the PDE area and key the location to the launch config\nPDE area is good.  Storing a copy of this set of natives per launch config is \na bit too much.  Each SWT snippet has its own launch config and they have \u003e150 \nsnippets.\n\nI will store one copy of the dlls per os-ws-arch combination in the pde \nmetadata.  This way all launch configs can reuse them.\nWhen the target platform changes (ie. the timestamp of the swt JARs in the \ntarget changes), I would dump the cached dlls and extract the new ones.",
    "Keeping DarinW in the loop.",
    "testing I20050324-1400 on hpux\n\n1. It starts fine now that the library permissions are set correctly.\n2. Import Existing Plug-ins and Fragments: org.eclipse.swt and \norg.eclipse.swt.motif.\n3. Write a small swt app in project that has these swt projects on its build \npath--\u003eit will compile fine.\n4. Run it as an SWT Application, and it fails because the permissions on the \nswt libraries that were imported do not include executable.\n\nSo it seems like whatever is done to make the libraries have the correct \npermissions at startup time on hpux is also needed when the swt plugins are \nimported.\n",
    "To summarize the current situation: there are 3 scenarios for the SWT launcher.\n\n1. SwtTest class from a java TestProject built against the org.eclipse.swt \nproject available in the workspace. org.eclipse.swt.motif or relevant fragment \nis also in the workspace.\n\n\u0027Run as SWT application\u0027 works in that case on all platforms except Motif HP. \nHP case should be fixed by SWT in the next build.\n\nNote to SWT: we must use Eclipse 3.1 when checking in our native libraries \nbecause Eclipse 3.0 CVS does not correctly set the executable flag. That\u0027s the \ncase with I20050324.\n\n2. SwtTest class from a java TestProject built against the \norg.eclipse.swt_3.1.0.jar and org.eclipse.swt_motif_3.1.0.jar\n\n\u0027Run as SWT application\u0027 does not work. PDE launcher needs to be corrected as \nWassim described in comment 5. At the moment we get:\n-\nDjava.library.path\u003d/somepath/eclipse/plugins/org.eclipse.swt.motif_3.1.0.jar/os\n/hpux/PA_RISC\n\n3. Variant from 2. described in comment 7",
    "SWT reviewed the options carefully.\n\nIn order to get the new plugin jar format sufficiently tested before Eclipse \n3.1 ships, it seems necessary that SWT be packaged in this new format for M6. \nEven if that means that for M6 the SWT launcher cannot support 2 of the 3 \ncases described in comment 8. We understand that trade-off.\n\nWassim: we\u0027re assuming the SWT launcher can support the new format and fully \nwork in time for M7 and final 3.1 release. Does it sound a reasonable \ntimeframe to you?",
    "yes.  A new launcher for M7.",
    "(In reply to comment #9)\n\u003e Even if that means that for M6 the SWT launcher cannot support 2 of the 3 \n\u003e cases described in comment 8.\n\nI\u0027m assuming that the case in #8 that does work is case 1?\n\nPlease don\u0027t remove case 1 from M6 because 2 and 3 don\u0027t work. Case 1 is quite\nuseful for serious SWT developers.\n",
    "Wassim:  in bug 90217, SWT needs to change the fragment structure. This \nimpacts this bug.",
    "*** Bug 90557 has been marked as a duplicate of this bug. ***",
    "*** Bug 90567 has been marked as a duplicate of this bug. ***",
    "The workaround with extracting jar file works fine. But in Java webstart there \nis a possibility to load a dll from jar file using tag \u003cnativelib\u003e in .jnlp \nfile. I think this means that somehow we can direct JVM to look for dll in jar \nfile. Just I don\u0027t know how. If I am wrong please laugth out loudly :D.",
    "I believe that taht directive just tells webstart support to extract the \nlibrary into the file system and then when you call loadLibrary() the Webstart \nclassloader looks in the library cache.  The Eclipse runtime does the same \nthing so that should not be an issue.\n\n",
    "*** Bug 90741 has been marked as a duplicate of this bug. ***",
    "Wassim, we are getting many bug reports that this doesn\u0027t work in M6 (it\u0027s too \nbad the feature wasn\u0027t pulled before the release).  Anyhow, can we get this \nfixed really soon so we can point people to a new build through this bug \nreport?",
    "Once bug 90217 is resolved and the new shape of the swt jars finalized, I \ncould reimplement the launcher.",
    "Thanks Wassim. We know this could not really be addressed until all the recent \njar/renaming changes in SWT fragments were finalized and checked-in.",
    "Yes, we understand that you couldn\u0027t do anything until the new fragment story \nwas released.  Thanks for your great work on this feature.",
    "Wake the kids and call the neighbors.  The swt launcher is open for business \nagain.\n\nChristophe, please have your team test it using this week\u0027s I-build the \nfollowing scenarios on all platforms:\n1. org.eclipse.swt and its fragment checked out from head into the workspace\n2. org.eclipse.swt and its fragment NOT in the workspace\n3. org.eclipse.swt and its fragment imported into the workspace via the plugin \nimport wizard.\n\nNotes:\n1. The launcher and source lookup will work on both the new swt packaging \nformat and the old one.\n2. When we encounter a JARd fragment, PDE extracts and caches the native libs \ninto the pde/ui metadata.\n3. The cache is deemed state and the natives are reextracted again if the \ntimestamp of the JARd fragment changes or the absolute path to the JARd \nfragment has changed.\n4. When extracting resources from the JAR, PDE only extracts resources from \nthe root of the JAR (ie. ones that are not in a directory).  \n\nLooking at the different fragments, it seems that the only resources that we \nneed to extract are ones whose name contains the substring \u0027swt\u0027.  Christophe, \nplease confirm this.\n\n5. When extracting resources on HP, we chmod the resources with 755\n\n6. I verified that the launcher works great on Windows.",
    "FWIW, while HP-UX is particularly picky about such things, it would be polite\nand correct to ensure that .so files have the executable bit set on all UNIX\nplatforms.",
    "Wassim, you are the greatest!",
    "thanks.  I do what I can.\n\nI still need somebody from swt to confirm this conjecture before tomorrow:\n\n\u003eLooking at the different fragments, it seems that the only resources that we \n\u003eneed to extract are ones whose name contains the substring \u0027swt\u0027.",
    "Response to comment 25:\n- catching *swt* will get all the native libraries with the exception of \nlibXm.so.2 on org.eclipse.swt.motif.linux.x86 . Note this library is not \nexpected to change name any time soon.\n\nThe *swt* filter may not catch all libraries in the future (ones that don\u0027t \nhave swt like libXm.so). Another possibility is to look for *.jnilib, *.dll, \n*.so*, *.a, *.sl\n",
    "thanks.  I\u0027ll extract files that matches the following filters:\n*.jnilib, *.dll, *.so*, *.a, *.sl\nuntil told otherwise.",
    "Ok.",
    "a few days have gone by and no defects have been opened against the new swt \nlauncher.  Chris, did it get a clean bill of health on all platforms?",
    "It worked for me yesterday on both winxp and rh gtk2. Not exhaustive testing but\njust one happy user\u0027s feedback \u003cg\u003e",
    "Chrix to verify.",
    "*** Bug 92524 has been marked as a duplicate of this bug. ***",
    "Tested on Linux Motif. Can someone else in SWT test Mac, and the other Motifs \n(HP in particular?).",
    "Works on Mac.",
    "Tested (and works) on all of the motifs and solaris-gtk.\n"
  ],
  "commentCreationDates": [
    "2005-03-21T19:41:34+01:00",
    "2005-03-21T19:50:49+01:00",
    "2005-03-21T20:55:19+01:00",
    "2005-03-21T22:53:17+01:00",
    "2005-03-22T04:28:50+01:00",
    "2005-03-22T04:35:52+01:00",
    "2005-03-22T20:52:28+01:00",
    "2005-03-24T22:56:22+01:00",
    "2005-03-28T17:02:56+02:00",
    "2005-03-28T18:20:03+02:00",
    "2005-03-28T21:36:11+02:00",
    "2005-03-29T03:22:19+02:00",
    "2005-04-04T21:56:47+02:00",
    "2005-04-07T03:43:38+02:00",
    "2005-04-07T15:46:28+02:00",
    "2005-04-07T16:08:38+02:00",
    "2005-04-07T16:36:59+02:00",
    "2005-04-08T05:29:00+02:00",
    "2005-04-11T22:49:11+02:00",
    "2005-04-11T23:18:33+02:00",
    "2005-04-11T23:32:45+02:00",
    "2005-04-12T01:11:56+02:00",
    "2005-04-18T05:09:25+02:00",
    "2005-04-18T05:21:17+02:00",
    "2005-04-18T18:32:33+02:00",
    "2005-04-18T19:38:16+02:00",
    "2005-04-18T20:00:48+02:00",
    "2005-04-18T20:13:35+02:00",
    "2005-04-18T21:22:13+02:00",
    "2005-04-21T19:43:37+02:00",
    "2005-04-21T20:20:50+02:00",
    "2005-04-22T18:29:55+02:00",
    "2005-04-25T00:06:09+02:00",
    "2005-04-25T15:21:53+02:00",
    "2005-04-25T15:48:19+02:00",
    "2005-04-25T17:44:16+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.UnsatisfiedLinkError",
      "message": "no swt-win32-3126 in java.library.path",
      "elements": [
        {
          "method": "java.lang.ClassLoader.loadLibrary",
          "source": "ClassLoader.java:1517"
        },
        {
          "method": "java.lang.Runtime.loadLibrary0",
          "source": "Runtime.java:788"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "88669",
      "date": "2005-03-21T19:41:34+01:00",
      "product": "PDE",
      "component": "UI",
      "severity": "critical"
    }
  ],
  "groupId": "88669",
  "bugId": "88669",
  "date": "2005-03-21T19:41:34+01:00",
  "product": "PDE",
  "component": "UI",
  "severity": "critical"
}