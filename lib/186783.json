{
  "comments": [
    "I had the pleasure of debugging a problem with jar processor on a fairly large Eclipse-based product this weekend. I came across a deadlock situation where pack200 gets run in the CommandStep. If an exception is thrown by pack200 via Runtime.exec(), it gets eaten and we have a hang. One solution is to attach a couple of threads that read stderror/stdout from the command process. If we read anything, we can safely fail and at least log something.\n\nAn example exception is this...\nSTDERR: Exception in thread \"main\" java.lang.SecurityException: SHA1 digest error for META-INF/eclipse.inf\nSTDERR: \tat sun.security.util.ManifestEntryVerifier.verify(ManifestEntryVerifier.java:253)\nSTDERR: \tat java.util.jar.JarVerifier.processEntry(JarVerifier.java:225)\nSTDERR: \tat java.util.jar.JarVerifier.update(JarVerifier.java:212)\nSTDERR: \tat java.util.jar.JarVerifier$VerifierStream.read(JarVerifier.java:438)\nSTDERR: \tat java.io.InputStream.read(InputStream.java:112)\nSTDERR: \tat com.sun.java.util.jar.pack.Package$File.readFrom(Package.java:789)\nSTDERR: \tat com.sun.java.util.jar.pack.PackerImpl$DoPack.readFile(PackerImpl.java:529)\nSTDERR: \tat com.sun.java.util.jar.pack.PackerImpl$DoPack.run(PackerImpl.java:490)\nSTDERR: \tat com.sun.java.util.jar.pack.PackerImpl.pack(PackerImpl.java:91)\nSTDERR: \tat com.sun.java.util.jar.pack.Driver.main(Driver.java:279)\n\nIt had to deal with issues with the bundles being already signed improperly I believe.",
    "Created an attachment (id\u003d67053)\norg.eclipse.update.core.patch\n\nHere is a potential solution that captures stdout/stderror and at least System.out\u0027s them... what should be the recommended course of action if we have issues like this?",
    "Andrew?\n",
    "Chris, are you saying that the subprocess is blocking because the std buffers get full? (http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Process.html)\n\nI would suggest we just write them to std.out if the verbose flag is set.  Otherwise we swallow it.  We can let the existing error handling do the rest.",
    "What happens is that when the pack200 is run via Runtime.exec, it gets an error thrown out to stderror and is always blocked because I believe the buffer is never read. We end up waiting for the process forever to end.\n\nI will attach a sample update site that causes this problem if you like to reproduce.",
    "Created an attachment (id\u003d67058)\nReproducible Deadlock Test Case\n\nHere you go, this will throw a SecurityException when using pack200",
    "btw, thanks for looking at this quickly, it\u0027s much appreciated.\n\nA frosty beverage is in order.",
    "Created an attachment (id\u003d67088)\nupdated patch\n\nChris, your attached zip did not contain signed jars.  But I did reproduce this by manually corrupting the signatures in an existing signed jar I had and then trying to pack it.\n\nDejan can you review and +1",
    "+1",
    "done in HEAD.",
    "Andrew, I\u0027m wondering if we should add logic to detect that we shouldn\u0027t be packing a jar that is already signed (skip it?). This is the underlying problem here. This solution of at least dumping out error\u0027s is good for now.",
    "Also, is there a tool to clear out bundles from all signing info? This is an issue for people who want to pack Eclipse plugins but they already come signed in all distributions.\n\nThoughts?",
    "By default the JarProcessor should skip packing jars that were not previously conditioned according to the eclipse.inf (signing is only an issue if the jar was not conditioned before signing).  The user currently has to specify the argument -processAll to for unconditioned jars to be processed.\n\nPDE-Build is now extening update to provide an eclipse.jarProcessor ant task (see bug 183234) which supports unsigning (as well as signing using Ant, normalize/condition, and pack)\n\n",
    "Great, what do you recommend for consumers that pickup the SDK that has already signed bundles but weren\u0027t conditioned? This is the problem we face currently that we are grabbing some bundles from the SDK and they come signed but not packed (conditioned). What happens is that the product related bundles get packed/signed by issuing a -processAll, because I\u0027m not sure how else it would be done (maybe include an eclipse.inf?)",
    "The SDK bundles that we sign at eclipse.org should all be conditioned. (Confirm this by looking in the meta-inf/eclipse.inf for pack200.conditioned \u003d true.\n\nIf you are having problems with them, perhaps if was one of the bugs fixed from bug 178886.  Things should be better starting in M7.\n"
  ],
  "commentCreationDates": [
    "2007-05-14T15:50:28+02:00",
    "2007-05-14T15:51:31+02:00",
    "2007-05-14T15:53:18+02:00",
    "2007-05-14T16:12:29+02:00",
    "2007-05-14T16:19:20+02:00",
    "2007-05-14T16:23:16+02:00",
    "2007-05-14T16:24:23+02:00",
    "2007-05-14T17:38:49+02:00",
    "2007-05-14T19:25:54+02:00",
    "2007-05-14T19:47:52+02:00",
    "2007-05-14T20:59:52+02:00",
    "2007-05-14T21:01:00+02:00",
    "2007-05-14T21:19:55+02:00",
    "2007-05-14T21:35:26+02:00",
    "2007-05-14T22:18:31+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.SecurityException",
      "message": "SHA1 digest error for META-INF/eclipse.inf STDERR:",
      "elements": [
        {
          "method": "sun.security.util.ManifestEntryVerifier.verify",
          "source": "ManifestEntryVerifier.java:253"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "186783",
      "date": "2007-05-14T15:50:28+02:00",
      "product": "Platform",
      "component": "Update",
      "severity": "critical"
    }
  ],
  "groupId": "186783",
  "bugId": "186783",
  "date": "2007-05-14T15:50:28+02:00",
  "product": "Platform",
  "component": "Update",
  "severity": "critical"
}