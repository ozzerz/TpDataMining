{
  "comments": [
    "Hi,\n\nI\u0027m trying to define simple ANT Tasks, but there are some disapointing random messages.\n\nFirst of all, this is my ANT Task :\n\n\u003ctarget name\u003d\"all\" depends\u003d\"loadModels\"\u003e\n    \n\u003c/target\u003e\n    \n\u003ctarget name\u003d\"loadModels\"\u003e\n  \u003c!-- Load ATL metamodel --\u003e\n  \u003cam3.loadModel modelHandler\u003d\"EMF\" name\u003d\"ATL\" metamodel\u003d\"MOF\" nsUri\u003d\"http://www.eclipse.org/gmt/2005/ATL\" /\u003e\n  \u003c!-- Load KM3 metamodel --\u003e\n  \u003cam3.loadModel modelHandler\u003d\"EMF\" name\u003d\"KM3\" metamodel\u003d\"MOF\" nsUri\u003d\"http://www.eclipse.org/gmt/2005/KM3\" /\u003e\n  \u003c!-- Load current metamodel --\u003e\n  \u003cam3.loadModel modelHandler\u003d\"EMF\" name\u003d\"MM\" metamodel\u003d\"MOF\" path\u003d\"${metamodelsPath}/${metamodel_filename}\" /\u003e\n\u003c/target\u003e    \n\nNot a esoteric example ;)\n\nSo, the first time i launch the ant script, i got messages telling me everything is ok. After a random number of executions (from 3 to 10), it fails and give me error message (see at the end of the post for complete message).\n\nI don\u0027t understand the behaviour. Between succesive executions, i didn\u0027t change anything.\nAny help would be appreciated !!\n\nRegards, \nMikael\n\nloadModels:\n[am3.loadModel] Loading of model ATL\n[am3.loadModel] java.lang.NullPointerException\n[am3.loadModel]     at org.atl.engine.repositories.emf4atl.ASMEMFModel.addAllReferencedExtents(ASMEMFModel.java:418)\n[am3.loadModel]     at org.atl.engine.repositories.emf4atl.ASMEMFModel.loadASMEMFModel(ASMEMFModel.java:275)\n[am3.loadModel]     at org.atl.eclipse.engine.AtlEMFModelHandler.loadModel(AtlEMFModelHandler.java:123)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.loadModel(AM3AntToolKit .java:74)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.loadModel(AM3AntToolKit.java:359)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.tasks.LoadModelTask.execute(LoadModelTask.java:47)\n[am3.loadModel]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n[am3.loadModel]     at org.apache.tools.ant.Task.perform(Task.java:364)\n[am3.loadModel]     at org.apache.tools.ant.Target.execute(Target.java:341)\n[am3.loadModel]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeTarget(Project.java:1185)\n[am3.loadModel]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40) \n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeTargets(Project.java:1068)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:706)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:457)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n[am3.loadModel]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n[am3.loadModel]     at java.lang.reflect.Method.invoke(Unknown Source)\n[am3.loadModel]     at org.eclipse.ant.core.AntRunner.run(AntRunner.java:35 6)\n[am3.loadModel]     at org.eclipse.ant.internal.ui.launchConfigurations.AntLaunchDelegate$1.run(AntLaunchDelegate.java:230)\n[am3.loadModel]     at java.lang.Thread.run(Unknown Source)\n[am3.loadModel] Loading of model KM3\n[am3.loadModel] java.lang.NullPointerException\n[am3.loadModel]     at org.atl.engine.repositories.emf4atl.ASMEMFModel.addAllReferencedExtents(ASMEMFModel.java:418)\n[am3.loadModel]     at org.atl.engine.repositories.emf4atl.ASMEMFModel.loadASMEMFModel(ASMEMFModel.java:275)\n[am3.loadModel]     at org.atl.eclipse.engine.AtlEMFModelHandler.loadModel(AtlEMFModelHandler.java:123)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.loadModel(AM3AntToolKit.java:74)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.loadModel(AM3AntToolKit.java:359)\n[am3.loadModel]     a t org.eclipse.gmt.am3.tools.ant.tasks.LoadModelTask.execute(LoadModelTask.java:47)\n[am3.loadModel]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n[am3.loadModel]     at org.apache.tools.ant.Task.perform(Task.java:364)\n[am3.loadModel]     at org.apache.tools.ant.Target.execute(Target.java:341)\n[am3.loadModel]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeTarget(Project.java:1185)\n[am3.loadModel]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)\n[am3.loadModel]    ;  at org.apache.tools.ant.Project.executeTargets(Project.java:1068)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:706)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:457)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n[am3.loadModel]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n[am3.loadModel]     at java.lang.reflect.Method.invoke(Unknown Source)\n[am3.loadModel]     at org.eclipse.ant.core.AntRunner.run(AntRunner.java:356)\n[am3.loadModel]     at org.eclipse.ant.internal.ui.launchConfigurations.AntLaunchDelegate$1.run(AntLaunchDelegate.java:230)\n[am3.loadModel]      at java.lang.Thread.run(Unknown Source)\n[am3.loadModel] Loading of model MM\n[am3.loadModel] org.eclipse.emf.ecore.resource.Resource$IOWrappedException: Package with uri \u0027http://www.eclipse.org/gmt/2005/KM3\u0027 not found. (file:/D:/eclipse_workspace/HOTMatchAndDiff/metamodels/Relational-KM3.ecore, 2, 191)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLLoadImpl.handleErrors(XMLLoadImpl.java:80)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLLoadImpl.load(XMLLoadImpl.java:189)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doLoad(XMLResourceImpl.java:179)\n[am3.loadModel]     at org.eclipse.emf.ecore.resource.impl.ResourceImpl.load(ResourceImpl.java:1089)\n[am3.loadModel]     at org.eclipse.emf.ecore.resource.impl.ResourceImpl.load(ResourceImpl.java:895)\n[am3.loadModel]     at org.atl.engine.repositories.emf4atl.ASMEMFMod el.loadASMEMFModel(ASMEMFModel.java:296)\n[am3.loadModel]     at org.atl.eclipse.engine.AtlEMFModelHandler.loadModel(AtlEMFModelHandler.java:111)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.loadModel(AM3AntToolKit.java:76)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.loadModel(AM3AntToolKit.java:359)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.tasks.LoadModelTask.execute(LoadModelTask.java:47)\n[am3.loadModel]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n[am3.loadModel]     at org.apache.tools.ant.Task.perform(Task.java:364)\n[am3.loadModel]     at org.apache.tools.ant.Target.execute(Target.java:341)\n[am3.loadModel]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n[am3.loadModel]     at org.apache.tools. ant.Project.executeSortedTargets(Project.java:1216)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeTarget(Project.java:1185)\n[am3.loadModel]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeTargets(Project.java:1068)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:706)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:457)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n[am3. loadModel]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n[am3.loadModel]     at java.lang.reflect.Method.invoke(Unknown Source)\n[am3.loadModel]     at org.eclipse.ant.core.AntRunner.run(AntRunner.java:356)\n[am3.loadModel]     at org.eclipse.ant.internal.ui.launchConfigurations.AntLaunchDelegate$1.run(AntLaunchDelegate.java:230)\n[am3.loadModel]     at java.lang.Thread.run(Unknown Source)\n[am3.loadModel] Caused by: org.eclipse.emf.ecore.xmi.PackageNotFoundException: Package with uri \u0027http://www.eclipse.org/gmt/2005/KM3\u0027 not found. (file:/D:/eclipse_workspace/HOTMatchAndDiff/metamodels/Relational-KM3.ecore, 2, 191)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLHandler.getPackageForURI(XMLHandler.java:2311)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLHandler.getFactoryForPrefix(XMLHandler.java:2149)\n[am3 .loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLHandler.createObjectByType(XMLHandler.java:1132)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLHandler.createTopObject(XMLHandler.java:1234)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLHandler.processElement(XMLHandler.java:872)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMIHandler.processElement(XMIHandler.java:78)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLHandler.startElement(XMLHandler.java:854)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLHandler.startElement(XMLHandler.java:626)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.startElement(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$ContentDispatcher.scanRootElementHook(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source)\n[am3.loadModel]     at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(Unknown Source)\n[am3.loadModel]   \u0026nbs p; at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(Unknown Source)\n[am3.loadModel]     at javax.xml.parsers.SAXParser.parse(Unknown Source)\n[am3.loadModel]     at org.eclipse.emf.ecore.xmi.impl.XMLLoadImpl.load(XMLLoadImpl.java:179)\n[am3.loadModel]     ... 26 more\n[am3.loadModel] java.lang.NullPointerException\n[am3.loadModel]     at org.atl.engine.repositories.emf4atl.ASMEMFModel.adaptMetamodel(ASMEMFModel.java:327)\n[am3.loadModel]     at org.atl.engine.repositories.emf4atl.ASMEMFModel.loadASMEMFModel(ASMEMFModel.java:304)\n[am3.loadModel]     at org.atl.eclipse.engine.AtlEMFModelHandler.loadModel(AtlEMFModelHandler.java:111)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.loadModel(AM3AntToolKit.java:76)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.toolkit.AM3AntToolKit.load Model(AM3AntToolKit.java:359)\n[am3.loadModel]     at org.eclipse.gmt.am3.tools.ant.tasks.LoadModelTask.execute(LoadModelTask.java:47)\n[am3.loadModel]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n[am3.loadModel]     at org.apache.tools.ant.Task.perform(Task.java:364)\n[am3.loadModel]     at org.apache.tools.ant.Target.execute(Target.java:341)\n[am3.loadModel]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeTarget(Project.java:1185)\n[am3.loadModel]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.EclipseDefaultExecutor.executeT argets(EclipseDefaultExecutor.java:32)\n[am3.loadModel]     at org.apache.tools.ant.Project.executeTargets(Project.java:1068)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:706)\n[am3.loadModel]     at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:457)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[am3.loadModel]     at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n[am3.loadModel]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n[am3.loadModel]     at java.lang.reflect.Method.invoke(Unknown Source)\n[am3.loadModel]     at org.eclipse.ant.core.AntRunner.run(AntRunner.java:356)\n[am3.loadModel]     at org.eclipse.ant.internal.ui.launchConfigurations.AntLaunchDeleg ate$1.run(AntLaunchDelegate.java:230)\n[am3.loadModel]     at java.lang.Thread.run(Unknown Source)",
    "Hi,\n\nI found where this issue come from. The dispose() method is sometime\ncalled by finalize() method in\norg.atl.engine.repositories.emf4atl.ASMEMFModel\n\nI don\u0027t know why this method is called from time to time by the\ngarbage collector, but it doesn\u0027t have to.\n\nI comment its call in finalize() and everything is ok now. I know it\u0027s\nnot a good solution, but it is the only one i found.\n\nHope this help\n\nRegards,\nMikael",
    "The NPE problem occurs when a model is \"loaded\" from URI. In this case, the model isn\u0027t explicitly loaded, but resolved in a registry. If a resource in a registry is unloaded, it will not be reloaded on use.\n\nA possible fix is to record for each model whether is was explicitly loaded and only unload in this case. This also requires recording extra registry entries that ATL makes, since these entries need to be unregistered before a model is unloaded.",
    "Created an attachment (id\u003d49049)\nPatch for safe unloading of EMF Resources\n\n",
    "Short version:\n\nI believe ASMEMFModelElement.dispose() has a reasonable intent\nbut the means used to achieve it (i.e., calling Resource.clear()\nand ResourceSet.remove()) is unwise.\n\nSearch for references to Resource.unload(). It is used for\nEMFT Transaction support (i.e., a resource change induces unload + (re)load).\nI haven\u0027t seen any other EMF-related code call Resource.unload() explicitly\nlike it is done in ASMEMFModelElement.\n\nLong version:\n\nThese problems have been vexing me for a while as well, enough to dig\ndeeper into finding out what\u0027s going on. \n\nFirst, I\u0027d suggest adding Monkey scripts to monitor the \"health\" of EMF\u0027s\nmodel registry with a Monkey DOM that has the following functions:\n\n\tpublic EPackage.Registry getDefaultEMFRegistry() {\n\t\treturn EPackage.Registry.INSTANCE;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List\u003cString\u003e getRegistryKeys(final EPackage.Registry registry) {\n\t\tfinal Set\u003cString\u003e keys \u003d (Set\u003cString\u003e) registry.keySet();\n\t\tfinal List\u003cString\u003e registryKeys \u003d new ArrayList\u003cString\u003e(keys);\n\t\tCollections.sort(registryKeys);\n\t\treturn registryKeys;\n\t}\n\n\tpublic EPackage getEPackageIfLoaded(final EPackage.Registry registry, final String nsURI) {\n\t\tfinal Object ePackage \u003d registry.get(nsURI);\n\t\tif (ePackage instanceof EPackage) {\n\t\t\treturn (EPackage) ePackage;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\nThen, using the attached Monkey scripts, you can monitor the state of the EMF registry through the travails of ATL.\n\nThe scripts produce 3 sets of numbers\ntabulating the results of examining each\nURI entry in the EMF registry:\n\n+P \u003d there is an EPackage instance object registered at that URI\n-P \u003d either the URI maps to null or to a delegate object.\n\n+R \u003d if the EPackage object has a legit. Resource object \n-R \u003d otherwise\n\nThe 3 sets of numbers are:\n\n+P+R \u003d\u003e there is an EPackage object w/ a Resource object registered at the URI\n+P-R \u003d\u003e there is an EPackage object but no Resource object registered at the URI\n-P-R \u003d\u003e the URI points to a delegate\n\nMy experience w/ ATL led me to propose an \"invariance\" claim\nin a sort of \"model checking\" way:\n\nFor all EMF-related operations on resources and resource contexts,\nthe following invariant should always be true: +P-R \u003d\u003d 0\n\nIn practice, one can observe violations of this invariant property\n(i.e., +P-R \u003e 0) when an exception is thrown inside an Ant build script\nthat uses am3 tasks; regardless of whether the exception happens inside\nan am3 task or a non-am3 task.\n\nHere\u0027s my explanation of the bug:\n\n(see org.eclipse.ant.core.AntRunner)\n\n\t\t\tMethod run \u003d classInternalAntRunner.getMethod(\"run\", null); //$NON-NLS-1$\n\t\t\trun.invoke(runner, null);\n\t\t} catch ...\n\t\t} catch (Exception e) {\n\t\t\tString message \u003d (e.getMessage() \u003d\u003d null) ? InternalCoreAntMessages.AntRunner_Build_Failed__3 : e.getMessage();\n\t\t\tIStatus status\u003d new Status(IStatus.ERROR, AntCorePlugin.PI_ANTCORE, AntCorePlugin.ERROR_RUNNING_BUILD, message, e);\n\t\t\tthrow new CoreException(status);\n\t\t} finally {\n\t\t\tbuildRunning\u003d false;\n\t\t\tThread.currentThread().setContextClassLoader(originalClassLoader);\n\t\t}\n\nNotice the code that restores the original class loader.\nWhat\u0027s the big deal about that?\n\nMost of the ATL tasks in org.eclipse.gmt.am3.tools.ant.tasks \nuse a map of \"models\" i.e., Map\u003cString, ASMModel\u003e\n\nFor example, the am3.load task does something like:\n\nString name \u003d ...;\nASMModel loadedModel \u003d AM3AntToolkit.loadModel(name, ...);\ngetProject().addReference(name, loadedModel);\n\nThe am3.atl task fetches the \"in\" models using getProject().getReference(name)\nand for the \"out\" models, it does:\n\nASMModel currentAsmModel \u003d amh.newModel(name, metamodel);\ngetProject().addReference(name, currentASMModel);\nAtlLauncher.getDefault().launch(....);\n\nThe org.atl.engine.vm.ACTInterpreter executes the ATL code in the VM.\nBefore executing the operations of the *.asm ATL script, it adds all\nof the models to its execution environment.\n\nWhen everything works peachy clean, the stack of VM frames will be\nempty by the time the VM is finished and when the AntRunner finalization\nwork restores the original classloader context, there is no \"junk\" for the garbage collector to cleanup on the ant classloader.\n\nOn the other hand, when an exception unwinds the stack from somewhere in the code of an am3 task and is caught up in the AntRunner exception handler,\nthe finalization work will restore the original classloader context while the now defunct ant classloader context has a bunch of objects that haven\u0027t been cleaned up by stack unwinding \u003d\u003e i.e., the VM execution environment, the VM interpreter, etc... so when the GC examines these things and finds live references to some objects, e.g., ASMModel, it finalizes them and now everything goes bonkers....\n\nSo, the moral of the story is that we have a case of subtle violation of classloader boundaries during exception handling. I\u0027m not sure how someone like Stuart Halloway would describe this problem but I\u0027m certain that somewhere, there are a bunch of \"classloader rules\" that we\u0027re violating big time.",
    "Created an attachment (id\u003d49219)\nEclipse Monkey scripts to look at the EMF model registry\n\n",
    "(In reply to comment #4)\n\u003e Short version:\n\u003e \n\u003e I believe ASMEMFModelElement.dispose() has a reasonable intent\n\u003e but the means used to achieve it (i.e., calling Resource.clear()\n\u003e and ResourceSet.remove()) is unwise.\n\nHmm, the ResourceSet used by ASMEMFModel is a private one that is used only by ATL. I don\u0027t know whether or when resources are automatically removed from a ResourceSet, but it seems safe to remove Resources that we\u0027ve also added ourselves..\n\nThe same goes for Resource.unload(): this is now only called on Resources that we\u0027ve explicitly loaded into our private ResourceSet (hence is not shared with other Eclipse plugins).\n\nI do agree that called ResourceSet.remove() and Resource.unload() on shared objects is very unsafe.\n\n\u003e \n\u003e Search for references to Resource.unload(). It is used for\n\u003e EMFT Transaction support (i.e., a resource change induces unload + (re)load).\n\u003e I haven\u0027t seen any other EMF-related code call Resource.unload() explicitly\n\u003e like it is done in ASMEMFModelElement.\n\nI don\u0027t like the unload() either: as references to the Resource are removed, it should be cleared up automagically. Fr?d?ric\u0027s experiences showed him otherwise, however, so he had to add this.\n\n\u003e \n\u003e Long version:\n\u003e \n\u003e These problems have been vexing me for a while as well, enough to dig\n\u003e deeper into finding out what\u0027s going on. \n\u003e \n\u003e First, I\u0027d suggest adding Monkey scripts to monitor the \"health\" of EMF\u0027s\n\u003e model registry with a Monkey DOM that has the following functions:\n\u003e \n\u003e         public EPackage.Registry getDefaultEMFRegistry() {\n\u003e                 return EPackage.Registry.INSTANCE;\n\u003e         }\n\u003e \n\u003e         @SuppressWarnings(\"unchecked\")\n\u003e         public List\u003cString\u003e getRegistryKeys(final EPackage.Registry registry) {\n\u003e                 final Set\u003cString\u003e keys \u003d (Set\u003cString\u003e) registry.keySet();\n\u003e                 final List\u003cString\u003e registryKeys \u003d new ArrayList\u003cString\u003e(keys);\n\u003e                 Collections.sort(registryKeys);\n\u003e                 return registryKeys;\n\u003e         }\n\u003e \n\u003e         public EPackage getEPackageIfLoaded(final EPackage.Registry registry,\n\u003e final String nsURI) {\n\u003e                 final Object ePackage \u003d registry.get(nsURI);\n\u003e                 if (ePackage instanceof EPackage) {\n\u003e                         return (EPackage) ePackage;\n\u003e                 } else {\n\u003e                         return null;\n\u003e                 }\n\u003e         }\n\u003e \n\u003e Then, using the attached Monkey scripts, you can monitor the state of the EMF\n\u003e registry through the travails of ATL.\n\u003e \n\u003e The scripts produce 3 sets of numbers\n\u003e tabulating the results of examining each\n\u003e URI entry in the EMF registry:\n\u003e \n\u003e +P \u003d there is an EPackage instance object registered at that URI\n\u003e -P \u003d either the URI maps to null or to a delegate object.\n\u003e \n\u003e +R \u003d if the EPackage object has a legit. Resource object \n\u003e -R \u003d otherwise\n\u003e \n\u003e The 3 sets of numbers are:\n\u003e \n\u003e +P+R \u003d\u003e there is an EPackage object w/ a Resource object registered at the URI\n\u003e +P-R \u003d\u003e there is an EPackage object but no Resource object registered at the\n\u003e URI\n\u003e -P-R \u003d\u003e the URI points to a delegate\n\u003e \n\u003e My experience w/ ATL led me to propose an \"invariance\" claim\n\u003e in a sort of \"model checking\" way:\n\u003e \n\u003e For all EMF-related operations on resources and resource contexts,\n\u003e the following invariant should always be true: +P-R \u003d\u003d 0\n\u003e \n\u003e In practice, one can observe violations of this invariant property\n\u003e (i.e., +P-R \u003e 0) when an exception is thrown inside an Ant build script\n\u003e that uses am3 tasks; regardless of whether the exception happens inside\n\u003e an am3 task or a non-am3 task.\n\nThis is indeed exactly the problem condition. The patch should make sure that any Resource that will be unloaded is first unregistered.\n\nHowever: things get more interesting below... ;-)\n\n\u003e \n\u003e Here\u0027s my explanation of the bug:\n\u003e \n\u003e (see org.eclipse.ant.core.AntRunner)\n\u003e \n\u003e                         Method run \u003d classInternalAntRunner.getMethod(\"run\",\n\u003e null); //$NON-NLS-1$\n\u003e                         run.invoke(runner, null);\n\u003e                 } catch ...\n\u003e                 } catch (Exception e) {\n\u003e                         String message \u003d (e.getMessage() \u003d\u003d null) ?\n\u003e InternalCoreAntMessages.AntRunner_Build_Failed__3 : e.getMessage();\n\u003e                         IStatus status\u003d new Status(IStatus.ERROR,\n\u003e AntCorePlugin.PI_ANTCORE, AntCorePlugin.ERROR_RUNNING_BUILD, message, e);\n\u003e                         throw new CoreException(status);\n\u003e                 } finally {\n\u003e                         buildRunning\u003d false;\n\u003e                        \n\u003e Thread.currentThread().setContextClassLoader(originalClassLoader);\n\u003e                 }\n\u003e \n\u003e Notice the code that restores the original class loader.\n\u003e What\u0027s the big deal about that?\n\u003e \n\u003e Most of the ATL tasks in org.eclipse.gmt.am3.tools.ant.tasks \n\u003e use a map of \"models\" i.e., Map\u003cString, ASMModel\u003e\n\u003e \n\u003e For example, the am3.load task does something like:\n\u003e \n\u003e String name \u003d ...;\n\u003e ASMModel loadedModel \u003d AM3AntToolkit.loadModel(name, ...);\n\u003e getProject().addReference(name, loadedModel);\n\u003e \n\u003e The am3.atl task fetches the \"in\" models using getProject().getReference(name)\n\u003e and for the \"out\" models, it does:\n\u003e \n\u003e ASMModel currentAsmModel \u003d amh.newModel(name, metamodel);\n\u003e getProject().addReference(name, currentASMModel);\n\u003e AtlLauncher.getDefault().launch(....);\n\u003e \n\u003e The org.atl.engine.vm.ACTInterpreter executes the ATL code in the VM.\n\u003e Before executing the operations of the *.asm ATL script, it adds all\n\u003e of the models to its execution environment.\n\u003e \n\u003e When everything works peachy clean, the stack of VM frames will be\n\u003e empty by the time the VM is finished and when the AntRunner finalization\n\u003e work restores the original classloader context, there is no \"junk\" for the\n\u003e garbage collector to cleanup on the ant classloader.\n\u003e \n\u003e On the other hand, when an exception unwinds the stack from somewhere in the\n\u003e code of an am3 task and is caught up in the AntRunner exception handler,\n\u003e the finalization work will restore the original classloader context while the\n\u003e now defunct ant classloader context has a bunch of objects that haven\u0027t been\n\u003e cleaned up by stack unwinding \u003d\u003e i.e., the VM execution environment, the VM\n\u003e interpreter, etc... so when the GC examines these things and finds live\n\u003e references to some objects, e.g., ASMModel, it finalizes them and now\n\u003e everything goes bonkers....\n\u003e \n\u003e So, the moral of the story is that we have a case of subtle violation of\n\u003e classloader boundaries during exception handling. I\u0027m not sure how someone like\n\u003e Stuart Halloway would describe this problem but I\u0027m certain that somewhere,\n\u003e there are a bunch of \"classloader rules\" that we\u0027re violating big time.\n\u003e \n\nSo... I\u0027ve fixed the wrong problem, since the finalization should never occur to begin with? Or do you mean that we should never mess with objects from another class loader (e.g. shared Resources)?",
    "(In reply to comment #3)\n\u003e Created an attachment (id\u003d49049) [edit]\n\u003e Patch for safe unloading of EMF Resources\n\u003e \n\nSigned off by Dennis Wagelaar \u003cdennis.wagelaar@vub.ac.be\u003e to be published under\nthe Eclipse Public License v.1.0 (http://www.eclipse.org/legal/epl-v10.html) or\nany later version.",
    "Nicolas\u0027 point about violating class loader rules in AM3 Ant tasks is starting to catch up with me :-/ . Bug # 158523 indicates that ASMEMFModels are not unloaded after running a normal Ant session (without thrown Exceptions).",
    "Latest patch causes meta-models that are already registered not to be registered again. This causes problems when loading a model on top of that meta-model: this model uses the registered EPackage and not the EPackage that was just loaded from the meta-model. This problem only manifests itself when an ASMEMFModel wasn\u0027t disposed (and hence unregistered), i.e. in AM3 Ant tasks.",
    "Created an attachment (id\u003d50827)\nPatch for safe unloading of EMF Resources and postponed loading of uninitialised EMF meta-models\n\nThis patch always registers a meta-model, even if there\u0027s already a registry entry. It does so in the *local* package registry, however. This way, EMF will always use the meta-model that is registered by ATL. A warning is generated if an existing registry entry is overwritten.\n\nThis patch also includes the code for postponed loading of registered meta-models for which the Eclipse plugin has not yet been loaded by OSGI. See also Bug # 156103.\n\nSigned off by Dennis Wagelaar \u003cdennis.wagelaar@vub.ac.be\u003e to be published under\nthe Eclipse Public License v.1.0 (http://www.eclipse.org/legal/epl-v10.html) or\nany later version.",
    "Created an attachment (id\u003d53190)\nPatch for safe unloading of EMF Resources and postponed loading of uninitialised EMF meta-models\n\nThe previous version of this patch would cause ATL to always use the default XMI resource factory. The original \"init()\" method has been restored, which registers the fallback resource factory in the global registry instead of the local (overriding) registry.\n\nSigned off by Dennis Wagelaar \u003cdennis.wagelaar@vub.ac.be\u003e to be published under\nthe Eclipse Public License v.1.0 (http://www.eclipse.org/legal/epl-v10.html) or\nany later version.",
    "Integrated patch.",
    "This solution has been used for a while now without issues. I\u0027m closing this bug."
  ],
  "commentCreationDates": [
    "2006-08-30T14:09:14+02:00",
    "2006-08-30T14:10:33+02:00",
    "2006-08-30T14:17:16+02:00",
    "2006-08-30T14:18:17+02:00",
    "2006-08-31T23:12:30+02:00",
    "2006-08-31T23:15:09+02:00",
    "2006-09-01T13:45:21+02:00",
    "2006-09-04T11:30:45+02:00",
    "2006-09-25T11:20:57+02:00",
    "2006-09-25T11:25:44+02:00",
    "2006-09-25T16:57:53+02:00",
    "2006-11-03T09:09:54+01:00",
    "2006-12-12T09:51:07+01:00",
    "2007-05-03T11:38:12+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.emf.ecore.resource.Resource$IOWrappedException",
      "message": "Package with uri \u0027http://www.eclipse.org/gmt/2005/KM3\u0027 not found. (file:/D:/eclipse_workspace/HOTMatchAndDiff/metamodels/Relational-KM3.ecore, 2, 191) [am3.loadModel]",
      "elements": [
        {
          "method": "org.eclipse.emf.ecore.xmi.impl.XMLLoadImpl.handleErrors",
          "source": "XMLLoadImpl.java:80"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "155673",
      "date": "2006-08-30T14:09:14+02:00",
      "product": "GMT",
      "component": "ATL",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.emf.ecore.xmi.PackageNotFoundException",
      "message": "Package with uri \u0027http://www.eclipse.org/gmt/2005/KM3\u0027 not found. (file:/D:/eclipse_workspace/HOTMatchAndDiff/metamodels/Relational-KM3.ecore, 2, 191) [am3.loadModel]",
      "elements": [
        {
          "method": "org.eclipse.emf.ecore.xmi.impl.XMLHandler.getPackageForURI",
          "source": "XMLHandler.java:2311"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "155673",
      "date": "2006-08-30T14:09:14+02:00",
      "product": "GMT",
      "component": "ATL",
      "severity": "normal"
    }
  ],
  "groupId": "155673",
  "bugId": "155673",
  "date": "2006-08-30T14:09:14+02:00",
  "product": "GMT",
  "component": "ATL",
  "severity": "normal"
}