{
  "comments": [
    "See bug 192530.",
    "Created an attachment (id\u003d74553)\nproposed patch for 1.5.5\n\nAttaching a patch that\u0027s mostly a backport from 2.0\u0027s version of the fix.  1.5 didn\u0027t support filtering by region context, so that part of the fix has been excised.  The speedup also surfaced some threading problems with our position manager, so sse.core is also modified slightly to avoid the following stacktrace:\n\n!ENTRY org.eclipse.wst.sse.ui 4 4 2007-07-25 07:32:31.031\n!MESSAGE problem with reconciling\n!STACK 0\njava.lang.NullPointerException\n\tat org.eclipse.wst.sse.core.internal.text.GenericPositionManager.computeIndexInPositionList(GenericPositionManager.java:189)\n\tat org.eclipse.wst.sse.core.internal.text.GenericPositionManager.addPosition(GenericPositionManager.java:89)\n\tat org.eclipse.wst.sse.core.internal.text.GenericPositionManager.addPosition(GenericPositionManager.java:66)\n\tat org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.addPosition(BasicStructuredDocument.java:859)\n\tat org.eclipse.jface.text.source.AnnotationModel.addPosition(AnnotationModel.java:315)\n\tat org.eclipse.jface.text.source.AnnotationModel.addAnnotation(AnnotationModel.java:278)\n\tat org.eclipse.jface.text.source.AnnotationModel.replaceAnnotations(AnnotationModel.java:256)\n\tat org.eclipse.jface.text.source.AnnotationModel.replaceAnnotations(AnnotationModel.java:226)\n\tat org.eclipse.wst.sse.ui.internal.spelling.SpellcheckStrategy.spellCheck(SpellcheckStrategy.java:396)\n\tat org.eclipse.wst.sse.ui.internal.spelling.SpellcheckStrategy.reconcile(SpellcheckStrategy.java:369)\n\tat org.eclipse.wst.sse.ui.internal.reconcile.DocumentRegionProcessor.process(DocumentRegionProcessor.java:189)\n\tat org.eclipse.wst.sse.ui.internal.reconcile.StructuredRegionProcessor.process(StructuredRegionProcessor.java:302)\n\tat org.eclipse.wst.sse.ui.internal.reconcile.DirtyRegionProcessor.run(DirtyRegionProcessor.java:636)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)",
    "David, I\u0027m also requesting a review from you because of the threading changes.  It\u0027s just adding synchronization onto the position manager when calculating the index of a position or when adding or removing one, but I would still appreciate your input.\n\nTo fully measure the performance difference, you\u0027ll want to grab a dictionary from the jdt.ui plug-in in 3.3 and enable that as the spelling dictionary.",
    "Patch looks except for:\n-copyright statements need to be updated for GenericPositionManager \u0026 SpellcheckStrategy\n\n-SpellingStep#reconcileModel should the following line:\nservice.check(getDocument(), new IRegion[]{subRegion}, fSpellingContext, fProblemCollector, getProgressMonitor());\nbe:\nservice.check(getDocument(), new IRegion[]{dirtyRegion}, fSpellingContext, fProblemCollector, getProgressMonitor());\n\nOr is this an unrelated bug?\n\n-I noticed you created a spellcheck() method for some of the logic in reconcile().  Shouldn\u0027t the first part of reconcile(), from \n\"if (isSupportedPartitionType(partitions[i].getType())) {\"\njust call spellCheck() like the last part of that method does?",
    "I left out the word \"good\" in the previous comment.  Patch looks *good* except for those suggestions I made.",
    "Created an attachment (id\u003d74985)\nupdated patch\n\n(In reply to comment #3)\nI\u0027ve updated the patch based on comments.  The passed in region to the spelling service doesn\u0027t matter all that much; the implementation of our reconciler is such that when talking to our spelling strategy, both subRegion and dirtyRegion are the same.  And only putting the refactored spellcheck() method call in one place was an effort to cut down on the size of the patch, but then it\u0027s more readable if I just change the other branch as well.",
    "Marking for PMC review.\n\nThis defect backports a last-minute improvement to the spell checking performance that was made for 2.0 that is just as valid in the 1.5 branch.  The original reported bug saw the spell checking eat the CPU for many minutes after the file was first opened, invoking the spell checker and repainting the source page over 1000 times when it is much faster to do it all at once.  On a multi-core system it\u0027s annoying, but on a single core system it brings Eclipse to its knees with no workaround other than turning off spell checking for all file types everywhere.\n\nAs a backport, I consider this low risk.  It has been reviewed and tested by Amy Wu and myself.",
    "I\u0027ve reviewed the threading changes you\u0027ve proposed, and think they are fine (i.e. safe :) \n\nBut I would suggest a few more. First any method that _modifies_ fPositions should be synchronized ... I think there\u0027s only a couple more ... add/removePositionCategory. \n\nLastly, the method getDocumentManagedPositions is problematic. It\u0027s a \"bad\" method since it exposes the internal data structures of the class. You can imagine that someone else thread get\u0027s fPositons and does their own modifications, outside the protection of GenericPositionManager! \n\nI could not find any place where this is used in WTP (with a very brief search) so it could perhaps be removed? At least in current streams? If it is indeed needed, for some adopter usage that I don\u0027t know about right off, then a) we\u0027d want to see if we could do away with that :) and b)  fPositions itself could be made into a synchronized Map, using something like \nfPositions \u003d Collections.synchronizedMap(new HashMap);\nThat would help avoid the Null Pointer exceptions, though is not as good as protecting the complete computations. \n\nHope this helps. \n\n\n\n",
    "Very good suggestions, but I\u0027m going to err even more on the side of caution since Position Categories aren\u0027t added and removed as frequently as Positions.  Sound like good changes for 3.0, though.",
    "Released.",
    "Verified with wtp-M-RC1.5.5-200708101347."
  ],
  "commentCreationDates": [
    "2007-06-25T20:46:48+02:00",
    "2007-07-25T14:58:19+02:00",
    "2007-07-25T15:05:44+02:00",
    "2007-07-26T01:04:42+02:00",
    "2007-07-26T01:19:35+02:00",
    "2007-07-31T03:23:38+02:00",
    "2007-07-31T03:29:39+02:00",
    "2007-07-31T04:55:01+02:00",
    "2007-08-01T05:08:22+02:00",
    "2007-08-02T02:00:34+02:00",
    "2007-08-16T08:33:12+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.wst.sse.core.internal.text.GenericPositionManager.computeIndexInPositionList",
          "source": "GenericPositionManager.java:189"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.GenericPositionManager.addPosition",
          "source": "GenericPositionManager.java:89"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.GenericPositionManager.addPosition",
          "source": "GenericPositionManager.java:66"
        },
        {
          "method": "org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.addPosition",
          "source": "BasicStructuredDocument.java:859"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationModel.addPosition",
          "source": "AnnotationModel.java:315"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationModel.addAnnotation",
          "source": "AnnotationModel.java:278"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationModel.replaceAnnotations",
          "source": "AnnotationModel.java:256"
        },
        {
          "method": "org.eclipse.jface.text.source.AnnotationModel.replaceAnnotations",
          "source": "AnnotationModel.java:226"
        },
        {
          "method": "org.eclipse.wst.sse.ui.internal.spelling.SpellcheckStrategy.spellCheck",
          "source": "SpellcheckStrategy.java:396"
        },
        {
          "method": "org.eclipse.wst.sse.ui.internal.spelling.SpellcheckStrategy.reconcile",
          "source": "SpellcheckStrategy.java:369"
        },
        {
          "method": "org.eclipse.wst.sse.ui.internal.reconcile.DocumentRegionProcessor.process",
          "source": "DocumentRegionProcessor.java:189"
        },
        {
          "method": "org.eclipse.wst.sse.ui.internal.reconcile.StructuredRegionProcessor.process",
          "source": "StructuredRegionProcessor.java:302"
        },
        {
          "method": "org.eclipse.wst.sse.ui.internal.reconcile.DirtyRegionProcessor.run",
          "source": "DirtyRegionProcessor.java:636"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "194276",
      "date": "2007-07-25T14:58:19+02:00",
      "product": "Web Tools",
      "component": "wst.sse",
      "severity": "critical"
    }
  ],
  "groupId": "194276",
  "bugId": "194276",
  "date": "2007-06-25T20:46:48+02:00",
  "product": "Web Tools",
  "component": "wst.sse",
  "severity": "critical"
}