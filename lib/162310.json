{
  "comments": [
    "receive the error: \n\nException in thread \"Thread-0\" java.lang.VerifyError: (class: comps/TestUnit, method: doK signature: ()V) Incompatible argument to function\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\n\tat java.lang.Class.privateGetDeclaredConstructors(Unknown Source)\n\tat java.lang.Class.getConstructor0(Unknown Source)\n\tat java.lang.Class.newInstance0(Unknown Source)\n\tat java.lang.Class.newInstance(Unknown Source)\n\nthe scenario:\n\n1. project with the abstract aspect like this:\npublic abstract aspect AbstractAspect {\n\tpublic pointcut point();\n\tbefore() : point() {\n\t\tSystem.out.println(thisJoinPoint);\n\t}\n}\n\n2. project with the concrete aspect like this:\npublic aspect ConcreteAspect {\n\tpublic pointcut point() : execution (* *.doK*());\n}\nand some class comps.TestUnit having the method doK();\n\nThere is the main application in the 1. project. This find ConcreteAspect.class and change it (using BCEL) to make ConcreteAspect extend the AbstractAspect like this:\n\n   JavaClass clazz \u003d new ClassParser(/*needed arguments*/).parse();\n   ClassGen clgen \u003d new ClassGen(clazz);\t\t\n   clgen.setSuperclassName(\"AbstractAspect\");\t\t\n   JavaClass cla \u003d clgen.getJavaClass();\n   cla.dump(/*file ConcreteAspect.class*/);\n\nAnd now making the weaving with ajc. Have tryed do this with Runtime.getRuntime.exec(java org.aspectj.tools.ajc.Main) with needed parameters\nor using org.aspectj.weaver.tools.WeavingAdaptor (load-time weaving) - the same result.\nI am getting no compilation errors; with the -showWeaveInfo i have\n\"Join point \u0027method-execution(void comps.TestUnit.doK())\u0027 in Type \u0027comps.TestUnit\u0027 (TestUnit.java:17) advised by before advice from \u0027ConcreteAspect\u0027 (AbstractAspect.aj:6)\"\n\nNow i am loading the woven TestUnit to the JVM and try instantiate it with the java reflection (loadedClass.newInstance()) and receiving the above error;",
    "I\u0027m not sure why you think this would work?  There is more to connecting a pair of aspects together than just setting the superclass of one to be the other????  I don\u0027t think we support this way of working.",
    "(In reply to comment #1)\n\nwhy shouldnt it? the both aspects have the same pointcut name; the compiler have the access to the both aspects, i.e. pointcut definition and advice.\n\nwhere is the mistake in this way?",
    "AspectJ has a number of public, documented (http://www.eclipse.org/aspectj/doc/released/devguide/index.html) interfaces for performing aspect weaving. For example you can use ajc to for compile- or post compile-time (binary) weaving. Alternatively you can use Aj or the -javaagent for load-time weaving.",
    "If you really want to find the differences - put the \u0027extends\u0027 into the source, do a full build and compare the class file resulting for the sub-aspect and your \u0027faked\u0027 sub-aspect.\n",
    "(In reply to comment #4)\n\nokay the bytecode is not the same,\nbut i compared the compiler\u0027s output of TestUnit putting \u0027extends\u0027 to source code with the output provided using \"\u0027faked\u0027 sub-aspect\"\nthis is the method doK (normal):\n // access flags 1\n  public doK() : void\n  ATTRIBUTE org.aspectj.weaver.MethodDeclarationLineNumber : unknown\n    GETSTATIC TestUnit.ajc$tjp_0 : JoinPoint$StaticPart\n    ALOAD 0\n    ALOAD 0\n    INVOKESTATIC Factory.makeJP(JoinPoint$StaticPart,Object,Object) : JoinPoint\n    ASTORE 1\n    INVOKESTATIC ConcreteAspect.aspectOf() : ConcreteAspect\n    ALOAD 1\n    INVOKEVIRTUAL AbstractAspect.ajc$before$asps_AbstractAspect$1$5d3d8e49(JoinPoint) : void\n   L0 (8)\n    LINENUMBER 18 L0\n    GETSTATIC System.out : PrintStream\n    LDC \"TestUnit doK\"\n    INVOKEVIRTUAL PrintStream.println(String) : void\n   L1 (12)\n    LINENUMBER 20 L1\n    RETURN\n   L2 (14)\n    LOCALVARIABLE this TestUnit L0 L2 0\n    MAXSTACK \u003d 3\n    MAXLOCALS \u003d 2\n\nand \"faked\":\n\n// access flags 1\n  public doK() : void\n  ATTRIBUTE org.aspectj.weaver.MethodDeclarationLineNumber : unknown\n    GETSTATIC TestUnit.ajc$tjp_0 : JoinPoint$StaticPart\n    ALOAD 0\n    ALOAD 0\n    INVOKESTATIC Factory.makeJP(JoinPoint$StaticPart,Object,Object) : JoinPoint\n    ASTORE 1\n   L0 (5)\n    LINENUMBER 18 L0\n    INVOKESTATIC ConcreteAspect.aspectOf() : ConcreteAspect\n    ALOAD 1\n    INVOKEVIRTUAL AbstractAspect.ajc$before$asps_AbstractAspect$1$5d3d8e49(JoinPoint) : void\n   L1 (9)\n    GETSTATIC System.out : PrintStream\n    LDC \"TestUnit doK\"\n    INVOKEVIRTUAL PrintStream.println(String) : void\n   L2 (13)\n    LINENUMBER 20 L2\n    RETURN\n   L3 (15)\n    LOCALVARIABLE this TestUnit L1 L3 0\n    MAXSTACK \u003d 3\n    MAXLOCALS \u003d 2\n\n\nso i realize they are not the same but can the code in the second case cause the\n\"Incompatible argument to function\"-error?"
  ],
  "commentCreationDates": [
    "2006-10-25T22:21:42+02:00",
    "2006-10-26T08:55:59+02:00",
    "2006-10-26T09:22:46+02:00",
    "2006-10-26T09:26:38+02:00",
    "2006-10-26T09:40:15+02:00",
    "2006-10-26T11:00:57+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.VerifyError",
      "message": "(class: comps/TestUnit, method: doK signature: ()V) Incompatible argument to function",
      "elements": [
        {
          "method": "java.lang.Class.getDeclaredConstructors0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.privateGetDeclaredConstructors",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.getConstructor0",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.newInstance0",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.Class.newInstance",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "162310",
      "date": "2006-10-25T22:21:42+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "162310",
  "bugId": "162310",
  "date": "2006-10-25T22:21:42+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}