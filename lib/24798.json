{
  "comments": [
    "not sure if it\u0027s a bug:\ni have a TableCursor and want to remove it under some cisrcumstances.\nok, so i call dispose()\nhowever, somebody else calles resize just a bit later\n\ndispose in TableCursor is handled in asychEcex (i could not find another widget \nthat does it) so my call loses - which leads to an exeption \n(the widget is not good anymore so i wanted to prevent exceptions by calling \ndispose()).\n\nCould this be changed to synchExec maybe? the my call would win because it\u0027s \nfirst.\n\nCan dispose happen from a thread different than ui, btw ? (i guess not - by \nlooking at Widget::dispose()). If it cannot - then what\u0027s the rationale for \nusing *exec() ?",
    "Adam, can you provide some code?  I think the asyncExec was put in to work \naround a Windows probem that may not be there anymore.\n\nVI to investigate and advise.",
    "the problem is related to my ng message\n\ntry running this:\nclass D {\n    public static void main(String[] args) {\n        Display display\u003d new Display();\n        Shell shell\u003d new Shell(display);\n        shell.setLayout(new GridLayout());\n\n        // create a a table with 3 columns and fill with data\n        final Table table\u003d new Table(shell, SWT.BORDER | SWT.MULTI | \nSWT.FULL_SELECTION);\n        table.setLayoutData(new GridData(GridData.FILL_BOTH));\n        TableColumn column1\u003d new TableColumn(table, SWT.NONE);\n        TableColumn column2\u003d new TableColumn(table, SWT.NONE);\n        TableColumn column3\u003d new TableColumn(table, SWT.NONE);\n        \n        /*\t\tfor (int i \u003d 0; i \u003c 100; i++) {\n        \t\t\tTableItem item \u003d new TableItem(table, SWT.NONE);\n        \t\t\titem.setText(new String[] { \"cell \"+i+\" \n0\", \"cell \"+i+\" 1\", \"cell \"+i+\" 2\"});\n        \t\t}*/\n\n        // create a TableCursor to navigate around the table\n        final TableCursor cursor\u003d new TableCursor(table, SWT.NONE);\n\n\tcolumn1.pack();\n        column2.pack();\n        column3.pack();\n\t\t\n        shell.open();\n        while (!shell.isDisposed()) {\n            if (!display.readAndDispatch())\n                display.sleep();\n        }\n        display.dispose();\n    }\n}\n\nthe table has no entries to you get a \n\njava.lang.IllegalArgumentException: Index out of bounds\n\tat org.eclipse.swt.SWT.error(SWT.java:2114)\n\tat org.eclipse.swt.SWT.error(SWT.java:2060)\n\tat org.eclipse.swt.widgets.Widget.error(Widget.java:371)\n\tat org.eclipse.swt.widgets.Table.getItem(Table.java:736)\n\tat org.eclipse.swt.custom.TableCursor.resize(TableCursor.java:442)\n\nis that a bug, btw?\n\nok, so, in my code i want to remove the cursor what i realize the table would \nhave no items.\ni call dispose(). but because of this asych stuff i\u0027m too late.\n\nhard to give code - inside a WizardPage::createContent i create the table \n(via a TableViewer) and the cursor\n\nthen, later i fill the table.\nit\u0027s at that point that i wanted to remove the cursor.\n\nTo summarize: i think the IllegalArgumentException is a bug (not 100% sure here \nthough). And i\u0027d rather see that one fixed.\nFor now, i wanted to workaround it - but got stopped by this one.",
    "i tried to tackle it from another angle and i guess i succeeded:\ni delay adding the cursor as long as possible and then add it if there\u0027s more \nthan 0 entries.\n\na. bug (if it is a bug) remains a bug\nb. need to do more dance to handle cases in which i start with an empty table \nand add items to it later (i feel that i should not have to do it - i should \njust add the cursor and it should be able to hadle empty or non-empty tables)",
    "I also had some related problems with the TableCursor:\n\n1) I disposed and recreated the TableCursor each time when columns were added \nto the Table because the TableCursor would only resize with the columns present \nwhen the TableCursor was created. This lead to the same problem as described \nabove, the dispose-handling comes in too late (WidgetDisposed exception after a \nresize).\n\n2) My current workaround is to create the TableCursor once and to manually add \nresize listeners to the table columns which resize the TableCursor when adding \ncolumns to the table.\n\nI\u0027d suggest to fix 1) by either handling dispose synchonously or at least \navoid/catch the WidgetDisposed exception.\n\nFor 2) it would be nice if the TableCursor could automatically add resize \nlisteners to newly added columns or at least provide a method which adds resize-\nlisteners to the currently present columns (i.e. using a part of the code in \nthe constructor). ",
    "Created an attachment (id\u003d71058)\nSample code to replicate the exception\n\nThe problem has nothing to do with sync or async. It\u0027s caused because the TableCursor wasn\u0027t properly disposed and it did not remove all its listeners.\nTo replicate the problem run the above code:\n  - select an item\n  - press Delete to remove it\n  - close the shell and an exception will be printed to the console",
    "Is this caused by the fact that the TableCursor is a decoration?",
    "*** Bug 30027 has been marked as a duplicate of this bug. ***",
    "No. I don\u0027t thinks so.\n\nThe code for \"disposeItemListener\" and \"disposeColumnListener\" are incorrect. Disposing a column should not interfere with the row and disposing a row should not interfere with the column. In the current implementation, disposing a row will prevent the column from unhooking its listeners.",
    "Renamed the title to reflect the current problem.\n\nAsync may have been a factor in Eclipse 2.0 release but that\u0027s no longer the case in Eclipse 3.3.",
    "Fixed \u003e 070724\n\nWhen an item or column where the table cursor is located is deleted, the table cursor must unhook the listeners for the row and column."
  ],
  "commentCreationDates": [
    "2002-10-15T19:10:31+02:00",
    "2002-10-15T19:16:53+02:00",
    "2002-10-15T19:45:55+02:00",
    "2002-10-15T20:16:07+02:00",
    "2002-12-17T21:52:31+01:00",
    "2007-06-12T19:52:06+02:00",
    "2007-06-12T20:05:50+02:00",
    "2007-06-12T20:22:05+02:00",
    "2007-06-12T21:00:48+02:00",
    "2007-06-15T00:35:47+02:00",
    "2007-07-24T21:19:37+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Index out of bounds",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2114"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2060"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.error",
          "source": "Widget.java:371"
        },
        {
          "method": "org.eclipse.swt.widgets.Table.getItem",
          "source": "Table.java:736"
        },
        {
          "method": "org.eclipse.swt.custom.TableCursor.resize",
          "source": "TableCursor.java:442"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "24798",
      "date": "2002-10-15T19:45:55+02:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "normal"
    }
  ],
  "groupId": "24798",
  "bugId": "24798",
  "date": "2002-10-15T19:10:31+02:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "normal"
}