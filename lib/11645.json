{
  "comments": [
    "314\n\n1. Set the workspace location to be wswb10test/eclipse (A directory containing \nthe 1.0 install)\n2. import all plugins (binary)\n3. launch runtime workbench.\n\nThis fails with the following error:\n\njava.lang.NoSuchMethodError: org.eclipse.core.boot.BootLoader.getOSArch()\nLjava/lang/String;\n\tat org.eclipse.core.internal.plugins.PluginDescriptor.buildOSVariants\n(PluginDescriptor.java:69)\n\tat org.eclipse.core.internal.plugins.PluginDescriptor.\u003cclinit\u003e\n(PluginDescriptor.java:54)\n\tat \norg.eclipse.core.internal.plugins.InternalFactory.createPluginDescriptor\n(InternalFactory.java:35)\n\tat \norg.eclipse.core.internal.runtime.InternalPlatform.createXMLClassLoader\n(InternalPlatform.java:218)\n\tat org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup\n(InternalPlatform.java:570)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.startup\n(InternalBootLoader.java:912)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:803)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)\n\tat SlimLauncher.main(SlimLauncher.java:14)\nException in thread \"main\" \n\nThe casual observer (me) cannot easily understand the plugin mismatch\nthat is occurring.\n\nIf it was minimal work, we would allow you to use PDE to run/test 1.0.\nIf not, we should try to improve the error reporting near this.",
    "Vlad, could you comment on what is hapenning exactly? Why is the entire 1.0 \nplug-in set (including BootLoader) trying to call 2.0-type methods?\n\nIs this because BootLoader 1.0 was not equipped to run from a workspace?",
    "The trace implies we are running with 2.0 core.runtime and 1.0 core.boot.\n\nI tried this with 1.0 SDK as target and 0314 build as the tool. Works for \nme ... sort of. Have run into a different bug where the 1.0 code does not \ntolerate a space in the install path (which is my normal setup to catch these \nkinds of things). So, on my first attemp I fail with ClassDefNotFound on one of \nthe xerces classes (the xerces loader is created with empty class path). When I \ninstall 1.0 in a path without space things work.\n\nI did the following:\n* start brand new 0314 workspace\n* Preferences\u003e PDE\u003e Target ... set my target to the 1.0 tree and press [Reload] \n(not sure if this was needed ... Dejan?)\n* open Java perspective\n* import external plugins ... select my 1.0 tree, do not copy content, select \nAll, OK (38 binary plugins imported)\n* select project, run with workspace launcher\n\n1.0 workbench comes up OK (I traced class loader creation and all loaders are \nrunning from the 1.0 tree)\n",
    "One other comment ... I do not think this setup will work for self-hosting \nchanges to R1.0 core.boot, core.runtime and xerces. The R1.0 code has special \nhandling for this regardless of what is set in the plugin path. But should be \nOK for other plugins.",
    "I think the key here is that you did not copy content. If you did (I suspect \nJohn did) your 1.0 BootLoader would end up in a workspace and I don\u0027t think it \nknows what to do in that situation. By not copying the content, you allowed it \nto find all the classes it depends on.",
    "I did copy the content(this is the default setting).  (I still want to remove \nthe option to not copy \u003cg\u003e, but that is a different conversation)",
    "OK, so you win ... I did the same importing content and see the original \nfailure. I then deleted core.boot, core.runtime and xerces, and reimported only \nthese 3 as binary (content not copied). Things work. So this will have to be \nthe setup people use if they want to use 2.0 tool to self-host against 1.0 \ntarget.",
    "The original failure is caused by a coincidence of multiple default settings. \nDefault import setting is to copy, default workspace location is as a peer to \nplugins/ in the tool install tree. The startup code for handling the magic \ntriad in R1.0 gets it wrong. We start with the 1.0 core.boot in the workspace. \nWe then look for core.runtime relative to core.boot. It just happens that the \ndefault workspace is \u003c2.0root\u003e/workspace (containing the 1.0 code). Se when we \ngo relative to the load location of BootLoader we get \n\u003c2.0root\u003e/workspace/org.eclipse.core.boot/../../plugins/org.eclipse.core.runtime\n/runtime.jar .... which happens to contain the R2.0 tool code. We try to run \nwith 1.0 core.boot and 2.0 core.runtime.\n\nWe fail in some other way when I move the workspace, so I think the story will \nhave to be the \"triad\" as binary, the rest can be self-hosted.\n",
    "I am closing the bug with a conclusion that launcing 1.0 plug-ins with 2.0 \neclipse works IF the three rogue plug-ins (boot, runtime, xerces) are left in \ntheir original location.\n\nAs a side-note, I second the motion to make the copying the only mode to import \nbinary projects.\n\nI am closing with resolution \u0027WONTFIX\u0027 although the more appropriate one would \nbe \u0027LIMITATION\u0027. "
  ],
  "commentCreationDates": [
    "2002-03-19T16:02:33+01:00",
    "2002-03-19T18:03:45+01:00",
    "2002-03-19T19:21:49+01:00",
    "2002-03-19T19:26:28+01:00",
    "2002-03-19T19:28:47+01:00",
    "2002-03-19T19:35:23+01:00",
    "2002-03-19T19:45:47+01:00",
    "2002-03-19T20:19:57+01:00",
    "2002-03-22T01:34:47+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoSuchMethodError",
      "message": "org.eclipse.core.boot.BootLoader.getOSArch() Ljava/lang/String;",
      "elements": [
        {
          "method": "org.eclipse.core.internal.plugins.PluginDescriptor.buildOSVariants",
          "source": "PluginDescriptor.java:69"
        },
        {
          "method": "org.eclipse.core.internal.plugins.PluginDescriptor.\u003cclinit\u003e",
          "source": "PluginDescriptor.java:54"
        },
        {
          "method": "org.eclipse.core.internal.plugins.InternalFactory.createPluginDescriptor",
          "source": "InternalFactory.java:35"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.createXMLClassLoader",
          "source": "InternalPlatform.java:218"
        },
        {
          "method": "org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup",
          "source": "InternalPlatform.java:570"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.startup",
          "source": "InternalBootLoader.java:912"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:803"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:285"
        },
        {
          "method": "SlimLauncher.main",
          "source": "SlimLauncher.java:14"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "11645",
      "date": "2002-03-19T16:02:33+01:00",
      "product": "PDE",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "11645",
  "bugId": "11645",
  "date": "2002-03-19T16:02:33+01:00",
  "product": "PDE",
  "component": "UI",
  "severity": "normal"
}