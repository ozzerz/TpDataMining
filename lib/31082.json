{
  "comments": [
    "This is the file I have :\n------------------------\n//\n// Created      : 05-Feb-2003, 13:30:45\n// Filename     : AST2Java.java\n// Description  : \n// Project      : TPWeb\n// Author       : Nikolay\n// Copyright    : (c) Teamphone.com Ltd. 2002 - All Rights Reserved\n//\npackage com.teamphone.schetor.ast2java;\n\nimport com.teamphone.common.io.FileUtilities;\nimport com.teamphone.common.util.TeamphoneLogger;\nimport com.teamphone.schetor.ast.ASTVisitor;\nimport com.teamphone.schetor.ast.Boolean;\nimport com.teamphone.schetor.ast.Complex;\nimport com.teamphone.schetor.ast.Element;\nimport com.teamphone.schetor.ast.Enum;\nimport com.teamphone.schetor.ast.Primitive;\nimport com.teamphone.schetor.ast.Roots;\nimport com.teamphone.schetor.ast.Set;\nimport com.teamphone.schetor.ast.Type;\nimport com.teamphone.schetor.ast.Union;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.apache.commons.lang.StringUtils;\n\n/**\n * Translates the AST into the required java files.\n *\n * @author Nikolay\n */\npublic class AST2Java\n{\n   private static final Logger g_logger \u003d TeamphoneLogger.getLogger\n(AST2Java.class);\n   private static final String sourceIdentifier \u003d \"standard\" + \nFile.separatorChar + \"source\" + File.separatorChar + \"xsd\" + File.separatorChar;\n   private static final class TranslationVisitor implements ASTVisitor\n   {\n      private final File m_root;\n      \n      public TranslationVisitor(final File root)\n      {\n         m_root \u003d root;\n      }\n      \n      public void visit(final Element element)\n      {\n         if(element.isRoot())\n         {\n            try\n            {\n               generateRootSchema(m_root, element);\n            }\n            catch (IOException e)\n            {\n               g_logger.log(Level.SEVERE, e.getMessage(), e);\n            }\n         }\n      }\n\n      public void visit(final Complex complex)\n      {\n      }\n\n      public void visit(final Primitive simple)\n      {\n      }\n\n      public void visit(final Enum enum)\n      {\n      }\n\n      public void visit(final Set set)\n      {\n      }\n\n      public void visit(final Union union)\n      {\n      }\n\n      public void visit(final Boolean bool)\n      {\n      }\n   };\n   private AST2Java()\n   {\n   }\n   \n   public static void translate(final Roots ast, final File root) throws \nIOException\n   {\n      generateGlobalFiles(root);\n      ast.apply(new TranslationVisitor(root));\n   }\n   \n   private static void generateRootSchema(final File root, final Element \nelement) throws IOException\n   {\n      final File wholePath \u003d element.getPath();\n      final String path \u003d calculatePath(wholePath, sourceIdentifier);\n      final String fileName \u003d calculateFileName(wholePath);\n      final StringBuffer fileContent \u003d new StringBuffer();\n      fileContent.append( \n      \"public final class \" + fileName + \"RootSchema\\n\" +\n      \"{\\n\" +\n      \"   public static final \" + fileName + \"Schema g_start \u003d new \" + fileName \n+ \"Schema(RootSchema.instance(), \\\"\" + fileName + \"\\\");\\n\" +\n      \"\\n\" +\n      \"   protected \" + fileName + \"RootSchema()\\n\" +\n      \"   {\\n\" +\n      \"   }\\n\");\n       \n      final Iterator it \u003d ((Complex)element.getType()).getElements();\n      while (it.hasNext())\n      {\n         final Element innerElement \u003d (Element) it.next();\n         final String getterName \u003d innerElement.getName();\n         final Type innerType \u003d innerElement.getType();\n         final String returnType;\n         if(innerType instanceof Primitive)\n         {\n            returnType \u003d \"Simple\";\n         }\n         else\n         {\n            returnType \u003d innerType.getName();\n         }\n         fileContent.append(\n         \"\\n\" + \n         \"   public static \" + returnType + \"Schema get\" + getterName + \"()\\n\" +\n         \"   {\\n\" +\n         \"      return g_start.get\" + getterName + \"();\\n\" +\n         \"   }\\n\" +\n         \"\\n\"\n         );\n      }    \n      fileContent.append(\n      \"   public static Tag getTag()\\n\" +\n      \"   {\\n\" +\n      \"      return g_start.getTag();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public static NodeSetExpression getXPathExpression()\\n\" +\n      \"   {\\n\" +\n      \"      return g_start.getXPathExpression();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public static Document toXML(final \" + fileName + \"Data data)\\n\" +\n      \"   {\\n\" +\n      \"      return new Document(g_start.toXML(data));\\n\" +\n      \"   }\\n\" +\n      \"}\\n\");\n      \n      printFile(root,path,fileName + \"RootSchema\", fileContent.toString());\n   }\n\n   private static String calculateFileName(final File wholePath)\n   {\n      final String absolutePath \u003d wholePath.getAbsolutePath();\n      return absolutePath.substring(absolutePath.lastIndexOf\n(File.separatorChar) + 1 ,absolutePath.length() - \".xsd\".length());\n   }\n\n   private static String calculatePath(final File wholePath, final String \nsourceIdentifier)\n   {\n      final String absolutePath \u003d wholePath.getAbsolutePath();\n      return absolutePath.substring(absolutePath.indexOf(sourceIdentifier) + \nsourceIdentifier.length(),absolutePath.lastIndexOf(File.separatorChar));\n   }\n   \n   private static void generateGlobalFiles(final File root) throws IOException\n   {\n      generateSet(root);\n      generateSchemaInterface(root);\n      generateRootSchema(root);\n      generateAbstractSchema(root);\n      generateSimpleSchema(root);\n   }\n\n   private static void generateSimpleSchema(File root) throws IOException\n   {\n      printStaticFile(root, \"SimpleSchema\", \n      \"import com.teamphone.common.util.AbstractEnum;\\n\" +\n      \"import com.teamphone.common.xml.dom.Element;\\n\" +\n      \"import com.teamphone.common.xml.dom.Sequence;\\n\" +\n      \"\\n\" +\n      \"import java.util.Iterator;\\n\" +\n      \"import java.util.Map;\\n\" +\n      \"\\n\" +\n      \"public final class SimpleSchema extends AbstractSchema\\n\" +\n      \"{\\n\" +\n      \"   public SimpleSchema(final Schema parent, final String name)\\n\" +\n      \"   {\\n\" +\n      \"      super(parent, name);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Element toXML(final String data)\\n\" +\n      \"   {\\n\" +\n      \"      return getTag().compose(data);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Element toXML(final int data)\\n\" +\n      \"   {\\n\" +\n      \"      return toXML(Integer.toString(data));\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Element toXML(final boolean data)\\n\" +\n      \"   {\\n\" +\n      \"      return toXML(Boolean.toString(data));\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Element toXML(final AbstractEnum data)\\n\" +\n      \"   {\\n\" +\n      \"      return toXML(data.toString());\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Element toXML(final SafeSet data)\\n\" +\n      \"   {\\n\" +\n      \"      // this should be DSVList\\n\" +\n      \"      final Iterator it \u003d data.iterator();\\n\" +\n      \"      final StringBuffer setValues \u003d new StringBuffer();\\n\" +\n      \"\\n\" +\n      \"      while (it.hasNext())\\n\" +\n      \"      {\\n\" +\n      \"         setValues.append(it.next().toString());\\n\" +\n      \"         if (it.hasNext())\\n\" +\n      \"         {\\n\" +\n      \"            setValues.append(\u0027 \u0027);\\n\" +\n      \"         }\\n\" +\n      \"      }\\n\" +\n      \"\\n\" +\n      \"      return toXML(setValues.toString());\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected void addXML(final Sequence result, final Object data)\\n\" +\n      \"   {\\n\" +\n      \"      result.add(toXML((String)data));\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public String getToken()\\n\" +\n      \"   {\\n\" +\n      \"      return super.getToken();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Map getTokenMap()\\n\" +\n      \"   {\\n\" +\n      \"      return null;\\n\" +\n      \"   }\\n\" +\n      \"}\\n\");\n      \n   }\n\n   private static void generateAbstractSchema(File root) throws IOException\n   {\n      printStaticFile(root, \"AbstractSchema\", \n      \"import com.teamphone.common.util.StringUtils;\\n\" +\n      \"import com.teamphone.common.xml.dom.ComposedSequence;\\n\" +\n      \"import com.teamphone.common.xml.dom.DefaultSequence;\\n\" +\n      \"import com.teamphone.common.xml.dom.DefaultTag;\\n\" +\n      \"import com.teamphone.common.xml.dom.Sequence;\\n\" +\n      \"import com.teamphone.common.xml.dom.Tag;\\n\" +\n      \"import com.teamphone.common.xml.dom.TagHelper;\\n\" +\n      \"import com.teamphone.common.xml.xsl.expression.DefaultLocationStep;\\n\" +\n      \"import \ncom.teamphone.common.xml.xsl.expression.DefaultNodeSetExpression;\\n\" +\n      \"import com.teamphone.common.xml.xsl.expression.LiteralNodeTest;\\n\" +\n      \"import com.teamphone.common.xml.xsl.expression.LocationStep;\\n\" +\n      \"import com.teamphone.common.xml.xsl.expression.NodeSetExpression;\\n\" +\n      \"\\n\" +\n      \"import java.util.Collections;\\n\" +\n      \"import java.util.Iterator;\\n\" +\n      \"import java.util.List;\\n\" +\n      \"import java.util.Map;\\n\" +\n      \"\\n\" +\n      \"public abstract class AbstractSchema implements Schema\\n\" +\n      \"{\\n\" +\n      \"   private static String g_rootNamespacePrefix;\\n\" +\n      \"   private static String g_rootNamespaceURI;\\n\" +\n      \"   protected static String g_defaultListItemDelimiter;\\n\" +\n      \"   protected static Creators g_creators;\\n\" +\n      \"   \\n\" +\n      \"   private static boolean g_isInitialised \u003d false;\\n\" +\n      \"   \\n\" +\n      \"   protected final Schema m_parent;\\n\" +\n      \"   protected final String m_name;\\n\" +\n      \"   private final Tag m_tag;\\n\" +\n      \"   private final Map m_rootMap;\\n\" +\n      \"   \\n\" +\n      \"   /**\\n\" +\n      \"    * Configures the xml output.\\n\" +\n      \"    * @param namespacePrefix the prefix to use for the given \nnamespace\\n\" +\n      \"    * @param namespace the namespace for all the services to use\\n\" +\n      \"    * @param defaultListItemDelimiter the default delimiter for List \nItems that are Posted back as DSVList\u0027s\\n\" +\n      \"    * @param creators the factory interface used to create complex data \ntypes\\n\" +\n      \"    */\\n\" +\n      \"   public static void setConfiguration(final String namespacePrefix, \nfinal String namespace, final String defaultListItemDelimiter, final Creators \ncreators)\\n\" +\n      \"   {\\n\" +\n      \"      g_rootNamespacePrefix \u003d namespacePrefix;\\n\" +\n      \"      g_rootNamespaceURI \u003d namespace;\\n\" +\n      \"      g_defaultListItemDelimiter \u003d defaultListItemDelimiter;\\n\" +\n      \"      g_creators \u003d creators;\\n\" +\n      \"      g_isInitialised \u003d true;\\n\" +\n      \"   }\\n\" +\n      \"   \\n\" +\n      \"   protected AbstractSchema()\\n\" +\n      \"   {\\n\" +\n      \"      this(null);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected AbstractSchema(final String name)\\n\" +\n      \"   {\\n\" +\n      \"      this(null, name);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected AbstractSchema(final Schema parent, final String name)\\n\" +\n      \"   {\\n\" +\n      \"      if (!g_isInitialised)\\n\" +\n      \"      {\\n\" +\n      \"         throw new RuntimeException(\\\"Please initialise this class via \nsetConfiguration()\\\");\\n\" +\n      \"      }\\n\" +\n      \"\\n\" +\n      \"      m_parent \u003d parent;\\n\" +\n      \"      \\n\" +\n      \"      if (m_parent \u003d\u003d RootSchema.instance())\\n\" +\n      \"      {\\n\" +\n      \"         m_name \u003d g_rootNamespacePrefix + \\\":\\\" + name;\\n\" +\n      \"         m_tag \u003d new DefaultTag(m_name);\\n\" +\n      \"         m_tag.addNameSpace(g_rootNamespacePrefix, \ng_rootNamespaceURI);\\n\" +\n      \"      }\\n\" +\n      \"      else if (!StringUtils.isNullOrBlank(name))\\n\" +\n      \"      {\\n\" +\n      \"         m_name \u003d name;\\n\" +\n      \"         m_tag \u003d new DefaultTag(m_name);\\n\" +\n      \"      }\\n\" +\n      \"      else\\n\" +\n      \"      {\\n\" +\n      \"         m_name \u003d null;\\n\" +\n      \"         m_tag \u003d null;\\n\" +\n      \"      }\\n\" +\n      \"\\n\" +\n      \"      m_rootMap \u003d getRootSchema().getTokenMap();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected abstract void addXML(final Sequence result, final Object \ndata);\\n\" +\n      \"\\n\" +\n      \"   public Tag getTag()\\n\" +\n      \"   {\\n\" +\n      \"      return m_tag;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public NodeSetExpression getXPathExpression()\\n\" +\n      \"   {\\n\" +\n      \"      final NodeSetExpression expr \u003d (m_parent \u003d\u003d null) ? new \nDefaultNodeSetExpression() : m_parent.getXPathExpression();\\n\" +\n      \"\\n\" +\n      \"      if (m_name !\u003d null)\\n\" +\n      \"      {\\n\" +\n      \"         expr.addLocationStep(getLocationStep());\\n\" +\n      \"      }\\n\" +\n      \"\\n\" +\n      \"      return expr;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected LocationStep getLocationStep()\\n\" +\n      \"   {\\n\" +\n      \"      return new DefaultLocationStep(new LiteralNodeTest(m_name));\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected void addAttribute(final String name, final String value)\\n\" \n+\n      \"   {\\n\" +\n      \"      if (m_tag !\u003d null)\\n\" +\n      \"      {\\n\" +\n      \"         TagHelper.addAttribute(m_tag, name, value);\\n\" +\n      \"      }\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public ComposedSequence toXML()\\n\" +\n      \"   {\\n\" +\n      \"      return new ComposedSequence(getTag());\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Sequence toXML(final List data)\\n\" +\n      \"   {\\n\" +\n      \"      final Sequence result \u003d new DefaultSequence();\\n\" +\n      \"      final Iterator it \u003d data.iterator();\\n\" +\n      \"   \\n\" +\n      \"      while (it.hasNext())\\n\" +\n      \"      {\\n\" +\n      \"         addXML(result, it.next());\\n\" +\n      \"      }\\n\" +\n      \"   \\n\" +\n      \"      return result;\\n\" +\n      \"   }\\n\" +\n      \"   \\n\" +\n      \"   private Schema getRootSchema()\\n\" +\n      \"   {\\n\" +\n      \"      Schema schema \u003d this;\\n\" +\n      \"      Schema parent\u003d m_parent;\\n\" +\n      \"      \\n\" +\n      \"      while (parent !\u003d null)\\n\" +\n      \"      {\\n\" +\n      \"         schema \u003d parent;\\n\" +\n      \"         parent \u003d parent.getParent();\\n\" +\n      \"      }\\n\" +\n      \"      \\n\" +\n      \"      return schema;\\n\" +\n      \"   }\\n\" +\n      \"   \\n\" +\n      \"   public Schema getParent()\\n\" +\n      \"   {\\n\" +\n      \"      return m_parent;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected String getToken()\\n\" +\n      \"   {\\n\" +\n      \"      return (String)m_rootMap.get(getTokenKey());\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public String getTokenKey()\\n\" +\n      \"   {\\n\" +\n      \"      return getXPathExpression().toString();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public String toString()\\n\" +\n      \"   {\\n\" +\n      \"      return m_name;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Map getTokenMap()\\n\" +\n      \"   {\\n\" +\n      \"      return Collections.EMPTY_MAP;\\n\" +\n      \"   }\\n\" +\n      \"}\\n\");\n   }\n\n   private static void generateRootSchema(File root) throws IOException\n   {\n      printStaticFile(root, \"RootSchema\", \n      \"import com.teamphone.common.xml.dom.Tag;\\n\" +\n      \"import \ncom.teamphone.common.xml.xsl.expression.DefaultNodeSetExpression;\\n\" +\n      \"import com.teamphone.common.xml.xsl.expression.NodeSetExpression;\\n\" +\n      \"\\n\" +\n      \"import java.util.Map;\\n\" +\n      \"\\n\" +\n      \"public final class RootSchema implements Schema\\n\" +\n      \"{\\n\" +\n      \"   public static final RootSchema g_instance \u003d new RootSchema();\\n\" +\n      \"   \\n\" +\n      \"   private RootSchema()\\n\" +\n      \"   {\\n\" +\n      \"   }\\n\" +\n      \"   \\n\" +\n      \"   public Tag getTag()\\n\" +\n      \"   {\\n\" +\n      \"      return null;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public NodeSetExpression getXPathExpression()\\n\" +\n      \"   {\\n\" +\n      \"      return new DefaultNodeSetExpression(false);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public static RootSchema instance()\\n\" +\n      \"   {\\n\" +\n      \"      return g_instance;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public String getToken()\\n\" +\n      \"   {\\n\" +\n      \"      return null;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Map getTokenMap()\\n\" +\n      \"   {\\n\" +\n      \"      return null;\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Schema getParent()\\n\" +\n      \"   {\\n\" +\n      \"      return null;\\n\" +\n      \"   }\\n\" +\n      \"}\\n\");\n   }\n\n   private static void generateSchemaInterface(final File root) throws \nIOException\n   {\n      printStaticFile(root,\"Schema\",\n      \"import com.teamphone.common.xml.dom.Tag;\\n\" +\n      \"import com.teamphone.common.xml.xsl.expression.NodeSetExpression;\\n\" +\n      \"\\n\" +\n      \"import java.util.Map;\\n\" +\n      \"\\n\" +\n      \"public interface Schema\\n\" +\n      \"{\\n\" +\n      \"   public Tag getTag();\\n\" +\n      \"   public NodeSetExpression getXPathExpression();\\n\" +\n      \"   public Map getTokenMap();\\n\" +\n      \"   public Schema getParent();\\n\" +\n      \"}\\n\"\n      );\n   }\n   \n   private static void generateSet(final File root) throws IOException\n   {\n      printStaticFile(root,\"SafeSet\",\n      \"import java.util.HashSet;\\n\" +\n      \"import java.util.Iterator;\\n\" +            \n      \"import java.util.Set;\\n\" +            \n      \"\\n\" +\n      \"public abstract class SafeSet\\n\" +\n      \"{\\n\" +\n      \"   private final Set m_set \u003d new HashSet();\\n\" +\n      \"\\n\" +\n      \"   protected SafeSet()\\n\" +\n      \"   {\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected boolean add(final Object member)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.add(member);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected boolean addAll(final SafeSet members)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.addAll(members.m_set);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public void clear()\\n\" +\n      \"   {\\n\" +\n      \"      m_set.clear();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected boolean contains(final Object member)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.contains(member);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected boolean containsAll(final SafeSet members)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.containsAll(members.m_set);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public boolean equals(final Object otherSet)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.equals(otherSet);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public int hashCode()\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.hashCode();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public boolean isEmpty()\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.isEmpty();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public Iterator iterator()\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.iterator();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected boolean remove(final Object member)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.remove(member);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected boolean removeAll(final SafeSet members)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.removeAll(members.m_set);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected boolean retainAll(final SafeSet members)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.retainAll(members.m_set);\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   public int size()\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.size();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected Object[] toArray()\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.toArray();\\n\" +\n      \"   }\\n\" +\n      \"\\n\" +\n      \"   protected Object[] toArray(final Object[] desiredType)\\n\" +\n      \"   {\\n\" +\n      \"      return m_set.toArray(desiredType);\\n\" +\n      \"   }\\n\" +\n      \"}\\n\");\n   }\n   \n   private static void printStaticFile(final File root, final String fileName, \nfinal String fileContent) throws IOException\n   {\n      printFile(root,\"com\" + File.separator + \"teamphone\",fileName,fileContent);\n   }\n   \n   private static void printFile(final File root, final String path, final \nString fileName, final String fileContent) throws IOException\n   {\n      final FileWriter out \u003d createFileWriter(root, path, fileName);\n      out.write(\n      \"//\\n\" +\n      \"// Description  : AutoGenerated File\\n\" +\n      \"// Author       : Nikolay Metchev\\n\" +\n      \"// Copyright    : (c) Teamphone.com Ltd. 2003 - All Rights Reserved\\n\" +\n      \"//\\n\" +\n      \"package \" + StringUtils.replace(path, File.separator, \".\") \n+  \".schema ;\\n\" +\n      \"\\n\" +\n      fileContent);\n      out.close();\n   }\n   \n   private static FileWriter createFileWriter(final File root, final String \npath, final String fileName) throws IOException\n   {\n      return FileUtilities.createFileWriter(new File(root,path + \"/schema/\" + \nfileName + \".java\"));\n   }\n}\n\n-------- this is the exception that occurs when I try to rename the field \nsourceIdentifier\n\njava.lang.reflect.InvocationTargetException\n\tat org.eclipse.jface.operation.ModalContext.runInCurrentThread\n(ModalContext.java:307)\n\tat org.eclipse.jface.operation.ModalContext.run(ModalContext.java:246)\n\tat org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.run\n(RefactoringWizardDialog2.java:264)\n\tat \norg.eclipse.jdt.internal.ui.refactoring.PerformRefactoringUtil.performRefactorin\ng(PerformRefactoringUtil.java:43)\n\tat \norg.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish\n(RefactoringWizard.java:366)\n\tat \norg.eclipse.jdt.internal.ui.refactoring.UserInputWizardPage.performFinish\n(UserInputWizardPage.java:113)\n\tat \norg.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish\n(RefactoringWizard.java:429)\n\tat \norg.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.okPressed\n(RefactoringWizardDialog2.java:379)\n\tat org.eclipse.jface.dialogs.Dialog.buttonPressed(Dialog.java:250)\n\tat org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:417)\n\tat org.eclipse.swt.widgets.TypedListener.handleEvent\n(TypedListener.java:87)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:77)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:836)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1692)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1410)\n\tat org.eclipse.jface.window.Window.runEventLoop(Window.java:561)\n\tat org.eclipse.jface.window.Window.open(Window.java:541)\n\tat \norg.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate\n(RefactoringStarter.java:59)\n\tat org.eclipse.jdt.internal.ui.refactoring.actions.RenameTempAction.run\n(RenameTempAction.java:68)\n\tat org.eclipse.jdt.ui.actions.RenameAction.run(RenameAction.java:122)\n\tat org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun\n(SelectionDispatchAction.java:193)\n\tat org.eclipse.jdt.ui.actions.SelectionDispatchAction.run\n(SelectionDispatchAction.java:169)\n\tat org.eclipse.jface.action.Action.runWithEvent(Action.java:804)\n\tat org.eclipse.ui.internal.WWinKeyBindingService.invoke\n(WWinKeyBindingService.java:135)\n\tat org.eclipse.ui.internal.WWinKeyBindingService.pressed\n(WWinKeyBindingService.java:116)\n\tat org.eclipse.ui.internal.WWinKeyBindingService$6.widgetSelected\n(WWinKeyBindingService.java:365)\n\tat org.eclipse.ui.internal.AcceleratorMenu$2.handleEvent\n(AcceleratorMenu.java:55)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:77)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:836)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1692)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1410)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1289)\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:1272)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:845)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:247)\n\tat org.eclipse.core.launcher.Main.run(Main.java:703)\n\tat org.eclipse.core.launcher.Main.main(Main.java:539)\nCaused by: java.lang.NullPointerException\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.ProblemNodeFinder.getProblemN\nodes(ProblemNodeFinder.java:29)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenameTempRefactoring.analyze\nAST(RenameTempRefactoring.java:189)\n\tat \norg.eclipse.jdt.internal.corext.refactoring.rename.RenameTempRefactoring.checkIn\nput(RenameTempRefactoring.java:161)\n\tat org.eclipse.jdt.internal.ui.refactoring.CheckConditionsOperation.run\n(CheckConditionsOperation.java:59)\n\tat org.eclipse.jdt.internal.ui.refactoring.CreateChangeOperation.run\n(CreateChangeOperation.java:94)\n\tat org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation.run\n(PerformChangeOperation.java:138)\n\tat org.eclipse.jface.operation.ModalContext.runInCurrentThread\n(ModalContext.java:296)\n\t... 41 more",
    "almost sure it\u0027s fixed by now but i will check",
    "Nikolay, which build is it?",
    "help-\u003eabout says:\n200302050800\nI downloaded the intigration build",
    "ok, cool - then it\u0027s a dup of bug 30959\nit was fixed yesterday\n\nthanks, Nikolay\nfor now, rename by relecting the field in the outliner - that works\n\n\n*** This bug has been marked as a duplicate of 30959 ***"
  ],
  "commentCreationDates": [
    "2003-02-06T12:45:18+01:00",
    "2003-02-06T14:34:17+01:00",
    "2003-02-06T14:55:59+01:00",
    "2003-02-06T14:57:06+01:00",
    "2003-02-06T15:01:11+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "elements": [
        {
          "method": "org.eclipse.jface.operation.ModalContext.runInCurrentThread",
          "source": "ModalContext.java:307"
        },
        {
          "method": "org.eclipse.jface.operation.ModalContext.run",
          "source": "ModalContext.java:246"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.run",
          "source": "RefactoringWizardDialog2.java:264"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.PerformRefactoringUtil.performRefactoring",
          "source": "PerformRefactoringUtil.java:43"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish",
          "source": "RefactoringWizard.java:366"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.UserInputWizardPage.performFinish",
          "source": "UserInputWizardPage.java:113"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish",
          "source": "RefactoringWizard.java:429"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.okPressed",
          "source": "RefactoringWizardDialog2.java:379"
        },
        {
          "method": "org.eclipse.jface.dialogs.Dialog.buttonPressed",
          "source": "Dialog.java:250"
        },
        {
          "method": "org.eclipse.jface.dialogs.Dialog$1.widgetSelected",
          "source": "Dialog.java:417"
        },
        {
          "method": "org.eclipse.swt.widgets.TypedListener.handleEvent",
          "source": "TypedListener.java:87"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:77"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:836"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:1692"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1410"
        },
        {
          "method": "org.eclipse.jface.window.Window.runEventLoop",
          "source": "Window.java:561"
        },
        {
          "method": "org.eclipse.jface.window.Window.open",
          "source": "Window.java:541"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate",
          "source": "RefactoringStarter.java:59"
        },
        {
          "method": "org.eclipse.jdt.internal.ui.refactoring.actions.RenameTempAction.run",
          "source": "RenameTempAction.java:68"
        },
        {
          "method": "org.eclipse.jdt.ui.actions.RenameAction.run",
          "source": "RenameAction.java:122"
        },
        {
          "method": "org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun",
          "source": "SelectionDispatchAction.java:193"
        },
        {
          "method": "org.eclipse.jdt.ui.actions.SelectionDispatchAction.run",
          "source": "SelectionDispatchAction.java:169"
        },
        {
          "method": "org.eclipse.jface.action.Action.runWithEvent",
          "source": "Action.java:804"
        },
        {
          "method": "org.eclipse.ui.internal.WWinKeyBindingService.invoke",
          "source": "WWinKeyBindingService.java:135"
        },
        {
          "method": "org.eclipse.ui.internal.WWinKeyBindingService.pressed",
          "source": "WWinKeyBindingService.java:116"
        },
        {
          "method": "org.eclipse.ui.internal.WWinKeyBindingService$6.widgetSelected",
          "source": "WWinKeyBindingService.java:365"
        },
        {
          "method": "org.eclipse.ui.internal.AcceleratorMenu$2.handleEvent",
          "source": "AcceleratorMenu.java:55"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:77"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:836"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:1692"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1410"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1289"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:1272"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:845"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:461"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:247"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:703"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:539"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.NullPointerException",
        "elements": [
          {
            "method": "org.eclipse.jdt.internal.corext.refactoring.rename.ProblemNodeFinder.getProblemNodes",
            "source": "ProblemNodeFinder.java:29"
          },
          {
            "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameTempRefactoring.analyzeAST",
            "source": "RenameTempRefactoring.java:189"
          },
          {
            "method": "org.eclipse.jdt.internal.corext.refactoring.rename.RenameTempRefactoring.checkInput",
            "source": "RenameTempRefactoring.java:161"
          },
          {
            "method": "org.eclipse.jdt.internal.ui.refactoring.CheckConditionsOperation.run",
            "source": "CheckConditionsOperation.java:59"
          },
          {
            "method": "org.eclipse.jdt.internal.ui.refactoring.CreateChangeOperation.run",
            "source": "CreateChangeOperation.java:94"
          },
          {
            "method": "org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation.run",
            "source": "PerformChangeOperation.java:138"
          },
          {
            "method": "org.eclipse.jface.operation.ModalContext.runInCurrentThread",
            "source": "ModalContext.java:296"
          }
        ],
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 0,
      "bugId": "31082",
      "duplicateId": "30959",
      "date": "2003-02-06T12:45:18+01:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "30959",
  "bugId": "31082",
  "duplicateId": "30959",
  "date": "2003-02-06T12:45:18+01:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}