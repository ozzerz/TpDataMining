{
  "comments": [
    "HI,\n\nI don\u0027t want to tell how to reproduce this, cause this would take too much \ntime for me. Maybe you\u0027ll understand without reproducing. Look at \norg.eclipse.swt.widgets.Widget class.\nLook at \n\n1 protected void checkWidget () {\n2\tDisplay display \u003d this.display;\n3\tif (display \u003d\u003d null) error (SWT.ERROR_WIDGET_DISPOSED);\n4\tif (display.thread !\u003d Thread.currentThread ()) \n           error  (SWT.ERROR_THREAD_INVALID_ACCESS);\n5\tif ((state \u0026 DISPOSED) !\u003d 0) error (SWT.ERROR_WIDGET_DISPOSED);\n6 }\n\nIn line 3, a Widget disposed Exception is thrown, when display is null.\nI got this exception during the initialisation of a tree viewer. Obviously,\nthe tree was not disposed at that time, it had\u0027t been created yet, checkWidget\nwas called within the tree\u0027s constructor call chain. Specifically:\npublic Widget (Widget parent, int style) {\n\tcheckSubclass ();\n\tcheckParent (parent);\n\tthis.style \u003d style;\n\tdisplay \u003d parent.display;\n}\n(checkParent calls checkWidget)\nIn fact, I got this exception because the treeviewers content provider had a \nbug throwing an exception. I used the tree viewer for a ContentOutlinePage. I \nthink that the exception was thrown only the secont time when the page tried to\ncreate the content provider. I don\u0027t know whether this is of any importance.\n\nFor debugging, I found it quite confusing to get \"Widget disposed\" during the\nwidget\u0027s constructor, so I think another Exception type for the case of \ncheckwidget being called by the constructor would help other devellopers.\n\nbye",
    "I\u0027m trying to recreate the case you are seeing. Here is an example that does it.\nIf you try to create a widget from the wrong thread when the parent is disposed,\nyou\u0027ll get a disposed exception, rather than invalid thread.  The problem is\nthat once the parent is disposed, there is no way to get the display and no way\nto test when the thread is wrong so the only exception that we can throw at this\npoint is disposed exception.  Can you confirm that this is what you are seeing?\n\nimport org.eclipse.swt.*;\nimport org.eclipse.swt.widgets.*;\n\npublic class PR_77285 {\npublic static void main (String [] args) {\n\tDisplay display \u003d new Display ();\n\tfinal Shell shell \u003d new Shell (display);\n\tfinal Composite c \u003d new Composite (shell, SWT.NULL);\n\tshell.open ();\n\tThread t \u003d new Thread () {\n\t\tpublic void run () {\n\t\t\tTree tree \u003d new Tree (c, SWT.SINGLE);\n\t\t}\n\t};\n\tc.dispose ();\n\tt.start ();\n\twhile (!shell.isDisposed ()) {\n\t\tif (!display.readAndDispatch ()) display.sleep ();\n\t}\n\tdisplay.dispose ();\n}\n}\n",
    "Hi Steve,\nI\u0027m not sure whether it has to do with Thread access. Okay, here is how to \nreproduce it: Create an Editor (any kind) and extend getAdapter() Method:\n\n\tpublic Object getAdapter(Class adapter) {\n\t\tif (IContentOutlinePage.class.equals(adapter)) {\n\t                fOutlinePage \u003d new TestContentOutlinePage();\n\t\t\treturn fOutlinePage;\n\t\t}\n\t\treturn super.getAdapter(adapter);\n\t}\n\nThen use this class TestContentOutlinePage:\n\n\npublic class TestContentOutlinePage extends ContentOutlinePage implements \nIDecisionModelContentOutlinePage {\n\n    public void createControl(Composite parent) {     \n        super.createControl(parent); \n        throw new RuntimeException(\"bug in createControl\");\n    }\n}\n\nOpening this Editor will throw 2 Exceptions:\nFirst the given RuntimeException, \nthen a SWTException: Widget is disposed.\n\nAparently createControl is called twice, you\u0027ll see in the differences in\nstack trace. So maybe the Exception makes sense indeed, if the parent was \ndisposed after failure of createControl the first time.\nStill it is confusing getting this Exception while the stack trace is full of \nconstructors, which gives the impression of everything being in the process of \ncreation. \n\nThe stack trace is as follows:\norg.eclipse.swt.SWTException: Widget is disposed\nat org.eclipse.swt.SWT.error(SWT.java:2691)\n...\nat org.eclipse.swt.widgets.Widget.error(Widget.java:381)\nat org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:283)\nat org.eclipse.swt.widgets.Widget.checkParent(Widget.java:223)\nat org.eclipse.swt.widgets.Widget.\u003cinit\u003e(Widget.java:111)\n...\nat org.eclipse.swt.widgets.Tree.\u003cinit\u003e(Tree.java:89)\nat org.eclipse.jface.viewers.TreeViewer.\u003cinit\u003e(TreeViewer.java:73)\nat org.eclipse.ui.views.contentoutline.ContentOutlinePage.createControl\n(ContentOutlinePage.java:78)\nat TestContentOutlinePage.createControl(TestContentOutlinePage.java:22)\n\nThe Contentpage creates a treeviewer, this creates a tree, and this needs a \nvalid parent composite.\n\nI\u0027m not sure whether you\u0027d want to fix this, or where, I just say that I find \nit confusing getting a widget disposed Exception with a stack trace full of \nconstructors of Eclipse classes (out of my control).\nMaybe checking the parent composite before even calling all the constructors \n(In ContentOutlinePage or TreeViewer) would make more sense to me.\n\nbye,\n  Thibault",
    "I\u0027m going to move this to UI for them to recreate.  Perhaps they can shed some \nlight into what is happening.",
    "Marking as WORKSFORME. Please reopen if you still have this issue"
  ],
  "commentCreationDates": [
    "2004-10-29T15:22:45+02:00",
    "2004-11-01T14:40:17+01:00",
    "2004-11-02T10:17:14+01:00",
    "2004-11-02T15:18:21+01:00",
    "2005-04-27T20:43:32+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Widget is disposed",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2691"
        }
      ],
      "number": 0,
      "commentIndex": 2,
      "bugId": "77285",
      "date": "2004-11-02T10:17:14+01:00",
      "product": "Platform",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "77285",
  "bugId": "77285",
  "date": "2004-10-29T15:22:45+02:00",
  "product": "Platform",
  "component": "UI",
  "severity": "normal"
}