{
  "comments": [
    "Using the Java code shown below, when I insert the text \"Refer to {@link \" into \nthe Javadoc comments on line 39, position 67 (in front of the \nword \"According\"), the UI hangs for about 30 seconds. A dialog then appears \nappears indicating the following error:\n\norg.eclipse.swt.SWTException: Failed to execute runnable \n(java.lang.OutOfMemoryError)\n\tat org.eclipse.swt.SWT.error(SWT.java:1887)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java:96)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:1390)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1208)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:788)\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:771)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:777)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:319)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:151)\n\tat org.eclipse.core.launcher.Main.run(Main.java:502)\n\tat org.eclipse.core.launcher.Main.main(Main.java:362)\n*** Stack trace of contained exception ***\njava.lang.OutOfMemoryError\n\nI suspect that may be due to some kind of recursive problem. When the UI hangs, \nin the Windows task manager the CPU usage goes to 100%, however memory usage \nbarely changes.\n\nCheers,\n\n- David Lewis\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \npackage org.nfis.cubewerx.wmt;\n\nimport java.util.*;\nimport java.net.URL;\nimport java.net.MalformedURLException;\nimport java.io.PrintStream;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.Element;\n\nimport org.nfis.wmt.xml.layer.LegendURL;\nimport org.nfis.wmt.xml.util.*;\n\n/**\n * A Style element lists the name by which a style is requested and a\n * human-readable title for pick lists, optionally (and ideally) provides a\n * human-readable description, and optionally gives a style URL. With WMT\n * MS Capabilities 1.1.0, two new elements were added: {@link LegendURL} \n * and {@link StyleSheetURL}.\n * \n * \u003cp\u003e\u003cb\u003eSupported by:\u003c/b\u003e WMT MS Capabilities 0.9.3 and greater.\u003c/p\u003e\n * @version \t2.0\n * @author David Lewis \u003cdlewis@pfc.forestry.ca\u003e\n */\npublic class Style implements java.io.Serializable {\n\n\tprivate static final long serialVersionUID \u003d 7815103380041966231L;\n\tprivate String name;\n\tprivate String title;\n\tprivate String abstractDescription;\n\tprivate URL url;\n\tprivate LegendURL legend \u003d null;\n\tprivate static Style defaultStyle;\n\n\t/**\n\t * Class constructor.\u003chr\u003e\n\t *\n\t * 2002-03-05 David Lewis \u003cdlewis@pfc.forestry.ca\u003e\u003cbr\u003e\n\t * I suspect that this static method is used by the GeoExplore client \nand\n\t * server to specify that the default Style is being requested. \nAccording\n\t * to the OCG specification (GC 01-068r3, section 7.2.3.4), the default\n\t * Style is requested with a null value (as in \"STYLE\u003d\"). With WMT MS\n\t * Capabilities 1.1.0 and later, a Style object has two new elements \n\t * added: LegendURL and StyleSheetURL.  Refer to the static method \n\t * {@link getDefaultStyle} for more information. This static method may \n\t * need to be refactored/modified to accomodate these changes.\u003chr\u003e\n\t * \n\t * @param name a name; must not be null\u003cP\u003e\n\t * @param title a human-readable title; must not be null\u003cP\u003e\n\t * @param abstract a human-readable description; can be null\u003cP\u003e\n\t * @param url a URL providing information; can be null\u003cP\u003e\n\t */\n\tprotected Style (String name, String title, String abstractDescription,\n\t\t\t\tURL url) {\n\t\tif (name \u003d\u003d null || title \u003d\u003d null)\n\t\t\tthrow new IllegalArgumentException();\n\n\t\tthis.name \u003d name;\n\t\tthis.title \u003d title;\n\t\tthis.abstractDescription \u003d abstractDescription;\n\t\tthis.url \u003d url;\n\t}\n\t/**\n\t * Class constructor which creates a Style by parsing the given\n\t * XML element.\u003cP\u003e\n\t *\n\t * @param element the XML element to parse\u003cP\u003e\n\t *\n\t * @throws CapabilitiesParseException if the given XML element cannot\n\t * be parsed as a Style\u003cP\u003e\n\t */\n\tprotected Style (Element element) throws CapabilitiesParseException {\n\t\tNode child \u003d element.getFirstChild();\n\t\twhile (child !\u003d null) {\n\t\t\tif (child.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\n\t\t\t\tString nodeName \u003d child.getNodeName();\n\t\t\t\tif (nodeName.equalsIgnoreCase(\"Name\"))\n\t\t\t\t\tname \u003d WMT_XMLParser.simpleElementParser\n((Element) child);\n\t\t\t\telse if (nodeName.equalsIgnoreCase(\"Title\"))\n\t\t\t\t\ttitle \u003d \nWMT_XMLParser.simpleElementParser((Element) child);\n\t\t\t\telse if (nodeName.equalsIgnoreCase(\"Abstract\"))\n\t\t\t\t\tabstractDescription \u003d \nWMT_XMLParser.simpleElementParser((Element) child);\n\t\t\t\telse if (nodeName.equalsIgnoreCase(\"StyleURL\"))\n\t\t\t\t\turl \u003d WMT_XMLParser.parseUrl((Element) \nchild);\n\t\t\t\telse if (nodeName.equalsIgnoreCase(\"LegendURL\"))\n\t\t\t\t\tlegend \u003d new LegendURL(child);\n\n\t\t\t}\n\t\t\tchild \u003d child.getNextSibling();\n\t\t}\n\n\t\tif (name \u003d\u003d null)\n\t\t\tthrow new CapabilitiesParseException(\n\t\t\t\t\"section \\\"\" + element.getNodeName() + \"\\\" is \nmissing section \\\"Name\\\"\");\n\n\t\tif (title \u003d\u003d null)\n\t\t\tthrow new CapabilitiesParseException(\n\t\t\t\t\"section \\\"\" + element.getNodeName() + \"\\\" is \nmissing section \\\"Title\\\"\");\n\n\t}\n\n\t/**\n\t * Dumps a text representation of this Style to the specified stream\n\t * for dubugging purposes.\u003cP\u003e\n\t *\n\t * @param stream where to send the output\u003cP\u003e\n\t * @param tab the String to use to indent each line of the output\u003cP\u003e\n\t */\n\tpublic void dumpToStream(PrintStream stream, String tab) {\n\t\tIterator i;\n\n\t\tstream.println(tab + \"Style:\");\n\t\ttab \u003d tab + \"    \";\n\t\tstream.println(tab + \"Name: \" + name);\n\t\tstream.println(tab + \"Title: \" + title);\n\t\tstream.println(tab + \"Abstract: \" + abstractDescription);\n\t\tstream.println(tab + \"URL: \" + url);\n\t}\n\n\t/**\n\t * Returns a human-readable description of this Style, or null if none\n\t * was provided.\n\t * @return a human-readable description of this Style, or null if none\n\t * was provided\n\t */\n\tpublic String getAbstract() {\n\t\treturn abstractDescription;\n\t}\n\n\t/**\n\t * Returns a default Style that is valid for all {@link Layer}s during a\n\t * {@link Server#getMap getMap} request.\u003cP\u003e\n\t *\n\t * @return a default Style that is valid for all {@link Layer}s during a\n\t * {@link Server#getMap getMap} request\u003cP\u003e\n\t * \n\t * \n**********************************************************************\n\t * 2002-03-05 David Lewis \u003cdlewis@pfc.forestry.ca\u003e\n\t * I suspect that this static method is used by the GeoExplore client \nand\n\t * server to specify that the default Style is being requested. \nAccording\n\t * to the OCG specification (GC 01-068r3, section 7.2.3.4), the default\n\t * Style is requested with a null value (as in \"STYLE\u003d\"). With WMT MS\n\t * Capabilities 1.1.0 and later, a Style object has two new elements \n\t * added: LegendURL and StyleSheetURL. This static method may need to \nbe \n\t * refactored/modified to accomodate these changes.\n\t * \n**********************************************************************\n\t */\n\tpublic static Style getDefaultStyle() {\n\t\tif (defaultStyle \u003d\u003d null)\n\t\t\tdefaultStyle \u003d new Style(\"default\", \"default\", null, \nnull);\n\n\t\treturn defaultStyle;\n\t}\n\n\t/**\n\t * Returns the name of this Style.\n\t * @return the name of this Style\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t/**\n\t * Returns a human-readable title for this Style.\n\t * @return a human-readable title for this Style\n\t */\n\tpublic String getTitle() {\n\t\treturn title;\n\t}\n\n\t/**\n\t * Returns a URL providing information about this Style, or null if none\n\t * was provided.\n\t * @return a URL providing information about this Style, or null if none\n\t * was provided\n\t */\n\tpublic URL getUrl() {\n\t\treturn url;\n\t}\n\n\tpublic LegendURL getLegend() {\n\t\treturn legend;\n\t}\n\n\t/**\n\t * The equals compares objects based only on the name attribute as \ndescribed\n\t * in the OGC Web Map Service Implementation Specification, verion \n1.1.1 \n\t * (OGC 01-068r3), section 7.1.4.5.4\n\t * \n\t * Style declarations are inherited by child Layers.  A child shall not \n\t * redefine a Style with the same Name as one inherited from a parent.  \n\t * A child may define a new Style with a new Name that is not available \nfor \n\t * the parent Layer.\n\t *  \n\t * @see Object#equals(Object)\n\t */\n\tpublic boolean equals(Object obj) {\n\t\tboolean equals \u003d false;\n\t\tif(obj !\u003d null \u0026\u0026 obj instanceof Extent) {\n\t\t\tequals \u003d this.name.equals(((Extent)obj).getName());\n\t\t}\n\t\t\n\t\treturn equals;\t\t\n\t}\n\n\n\t/**\n\t * Returns a human-readable title for this Style.\n\t * @return a human-readable title for this Style\n\t */\n\tpublic String toString() {\n\t\treturn \"Style [Name: \" + getName() + \", Title: \" + getTitle() + \n\t\t\t\", URL: \" + getUrl() + \"]\";\n\t}\n\n}",
    "Is this problem reproducible for you?",
    "I have reproduced this bug at least six times, including after closing and \nrestarting the Eclipse IDE. The most recent time I reproduced this bug, the IDE \nhung, with no dialog appearing ... after 3 minutes I killed the process. \n\nThe hang occurs shortly after the auto activation for Javadoc code completion. \nWhen I type \"{@link \" before the word \"According\", the IDE no longer responds \nto any keyboard or mouse input. I can type \"{@link \" in many other places \nwithin this and other documents with no problem. I am use build 20020214.",
    "Created an attachment (id\u003d442)\nJava Source: org.nfis.cubewerx.wmt.Style\n",
    "I have also reproduced the behavior (erimurph@pfc.forestry.ca)  described by my \ncollegue David Lewis on my computer using the same project. Upon further \ninvestigation the hang on line 39 position 67 seems to occur regardless of what \ntext follows the {@link.  In other words after typing {@link\u003cspace\u003e the hang \noccurs regardess of the text that follows.  You must let the suggestion box pop \nup after typing {@ then continue typing link.",
    "When reproducing the error, here\u0027s the information added to the log file \n(\\eclipse\\workspace\\.metadata\\.log):\n\nLog: Thu Mar 07 10:30:07 PST 2002\n1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.\nLog: Thu Mar 07 10:30:07 PST 2002\n4 org.eclipse.ui 0 Failed to execute runnable (java.lang.OutOfMemoryError)\norg.eclipse.swt.SWTException: Failed to execute runnable \n(java.lang.OutOfMemoryError)\n\tat org.eclipse.swt.SWT.error(SWT.java:1887)\n\tat org.eclipse.swt.widgets.Synchronizer.runAsyncMessages\n(Synchronizer.java:96)\n\tat org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:1390)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1208)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:788)\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:771)\n\tat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:777)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:319)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:151)\n\tat org.eclipse.core.launcher.Main.run(Main.java:502)\n\tat org.eclipse.core.launcher.Main.main(Main.java:362)\nLog: Thu Mar 07 10:30:07 PST 2002\n1 org.eclipse.core.resources 4 *** Stack trace of contained exception ***\nLog: Thu Mar 07 10:30:07 PST 2002\n4 org.eclipse.ui 0 java.lang.OutOfMemoryError\njava.lang.OutOfMemoryError",
    "I couldn\u0027t reproduce it with 20020528.\nCan you check if this is still a problem?",
    "I cannot reproduce this bug using the 20020425 build. I haven\u0027t tested it using \nthe 20020528 build. I think we can consider this bug fixed now! Thanks!"
  ],
  "commentCreationDates": [
    "2002-03-06T17:35:16+01:00",
    "2002-03-07T13:59:08+01:00",
    "2002-03-07T16:55:06+01:00",
    "2002-03-07T17:58:24+01:00",
    "2002-03-07T18:01:26+01:00",
    "2002-03-07T18:32:11+01:00",
    "2002-05-31T17:56:40+02:00",
    "2002-05-31T19:18:50+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Failed to execute runnable  (java.lang.OutOfMemoryError)",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:1887"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:96"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:1390"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1208"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:788"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:771"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:777"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:319"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:151"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:502"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:362"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "10885",
      "date": "2002-03-06T17:35:16+01:00",
      "product": "JDT",
      "component": "UI",
      "severity": "major"
    },
    {
      "exceptionType": "org.eclipse.swt.SWTException",
      "message": "Failed to execute runnable  (java.lang.OutOfMemoryError)",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:1887"
        },
        {
          "method": "org.eclipse.swt.widgets.Synchronizer.runAsyncMessages",
          "source": "Synchronizer.java:96"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runAsyncMessages",
          "source": "Display.java:1390"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1208"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:788"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:771"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:777"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:319"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:151"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:502"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:362"
        }
      ],
      "number": 1,
      "commentIndex": 5,
      "bugId": "10885",
      "date": "2002-03-07T18:32:11+01:00",
      "product": "JDT",
      "component": "UI",
      "severity": "major"
    }
  ],
  "groupId": "10885",
  "bugId": "10885",
  "date": "2002-03-06T17:35:16+01:00",
  "product": "JDT",
  "component": "UI",
  "severity": "major"
}