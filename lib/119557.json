{
  "comments": [
    "If I create a new empty data folder and then switch the main data directory to the new folder and close the workspace, the tasklist.xml file from the previous data directory is saved. In this case, the tasklist.xml file should not have any tasks in it.\n\nMik, if you can\u0027t think of any recent changes that might have caused this, then I can check this out when you\u0027re finished your overhaul of the tasklist project.",
    "Wesley, if you could look into this that would be great.  I don\u0027t know off-hand which change could have broken this since the last change of this functionality should have been the change task data folder thing.  But it seems to be related to the following new critical bug 119372.",
    "I\u0027ll take a look... That\u0027s strange that the test case for the change task data directory test isn\u0027t picking this up. I\u0027ll start by checking/adding coverage there.",
    "The problem here is that the workspace move doesn\u0027t do anything with the bugzilla registry. Everything works fine for non-bugzilla tasks. This is very likely to also be the cause of the problem in critical bug 119372 (That report mentions that it\u0027s the bugzilla tasks that disappeared). \n\nI\u0027ll try to extend the testcase to use bugzilla tasks as well, which should make it fail and take it from there.",
    "That sounds right (thanks for figuring it out!), and it would be great if you did that.  Feel free to commit those test cases as failing because it\u0027s critical that this get fixed.",
    "Created an attachment (id\u003d31359)\nPatch for tasklist\n\nThe stale bugzilla task registry entries are no longer causing a problem when I load tasks. But I was able to produce a failing test case where the registry returns the wrong task after switching workspaces (in the patch). \n\nWould it be right to clear the registry when switching directories and have the new registry read in from the tasklist file? If so, how do you make the call to clear without introducing a dependency on bugzilla?",
    "Created an attachment (id\u003d31360)\npatch for bugzilla.ui\n\nHas extracted method required by the test case",
    "Created an attachment (id\u003d31361)\nPatch for tasklist\n\nProposed patch for testing out a theory that parsing strings into longs might be causing negative task times. This patch includes a check that the elapsed time value being set is \u003e 0. If it isn\u0027t, an error is reported and it is set to zero. This will set all of the negative times in your tasklist file to zero and then the error won\u0027t appear again, but if it does, it should be easy to track down what is causing the negative times.",
    "I\u0027m currently reworking the entire task timing thing and have a bunch of test coverage.  It was way too fragile, and yes, one of the problems was that tasks shouldn\u0027t know about string versions of their times, etc.  I\u0027ve also got a reasonable test harness for this now.\n\nLet me commit this stuff and then I\u0027ll try to apply your patch for the registry thing.  I have to think again about whether the approach of re-reading the registry makes sense, but that could work.",
    "Sounds good!",
    "OK, the new tasks and timing stuff is committed.  I\u0027m still working on it and am sure that there are some bugs, but take a look and let mek now if I should apply these patches as-is.",
    "Created an attachment (id\u003d31363)\nPatch for tasklist.tests\n\nRevised failing test",
    "Created an attachment (id\u003d31364)\nPatch for tasklist\n\nRevised proposed patch for tasklist.  Note: the bugzill.ui patch should be ok as is.",
    "Regarding the setElapsed time change, right idea, but why lose the previous time?  Note that changed method.\n\nDid you test the changes in the Bugzilla task addition thoroughly?  They are not covered by tests.  I\u0027ve applied this patch, but from now on I think it is best that I have to be very careful about applying any patches not covered by tests because I have been spending considerably time fixing up regressions.",
    "\u003eRegarding the setElapsed time change, right idea, but why lose the previous\ntime?  \n\nIf the previous time is negative it is wrong anyway. So by setting it to zero we can have error messages produced only in new cases when a client is attempting to set a negative time (after the first run). I think this is will help find the problem.\n\n\n\u003e Did you test the changes in the Bugzilla task addition thoroughly?  They are\nnot covered by tests.  I\u0027ve applied this patch, but from now on I think it is\nbest that I have to be very careful about applying any patches not covered by\ntests because I have been spending considerably time fixing up regressions.\n\nThe Bugzilla task change is essentially just an extract method refactoring. Sorry about the fix-up work you\u0027ve been doing. I\u0027ll try to be more careful. \n",
    "The previous time can either be 0 (from initialization), or can be set to something positive (thanks to the check you added, which is indeed useful).  So resetting it to 0 if a negative set is attempted doesn\u0027t help and losed something if there was already a positive time.\n\nThe changes to the CreateBugzillaTask action broke the action with a class cast exception (did you test it manually?).  So I havent been able to commit those patches.  I suggest that you extract the code you need from CreateBugzillaTaskAction into your test case, and then we can refactor the common code.",
    "\u003e The previous time can either be 0 (from initialization), or can be set to\nsomething positive (thanks to the check you added, which is indeed useful).  So\nresetting it to 0 if a negative set is attempted doesn\u0027t help and losed\nsomething if there was already a positive time.\n\nRight. This still gets rid of the negative values in the file after the first save so we can see new cases that come up.\n\n\u003e The changes to the CreateBugzillaTask action broke the action with a class cast exception (did you test it manually?).  So I havent been able to commit those patches.  I suggest that you extract the code you need from\nCreateBugzillaTaskAction into your test case, and then we can refactor the\ncommon code.\n\nSigh. This obviously wasn\u0027t as trivial as I thought. I\u0027ll try moving the code into the test case.",
    "Created an attachment (id\u003d31366)\nPatch for tasklist.tests\n\nHere\u0027s a revised version of the failing test that doesn\u0027t require any other changes.",
    "The patch fails to apply, could you regenerate it after synching from HEAD?\n\nJust to make sure I\u0027m up-to-speed: this should point out the failure in not updating the context paths in bugzilla reports, right?",
    "Yes, I need to regenerate it, and the test case for the workspace move bug 119372 will be here too. Let me know if you\u0027d like it somewhere else.\n\nThe investigation (and test case) I did for this report suggests that context file paths for bugzilla reports are moving properly.\n\nThe failing test (if correct) points out a possible problem with information in the bugzilla task registry not matching corresponding task data after some moves.",
    "Created an attachment (id\u003d31402)\nChangeMainTaskDirTest.java\n\nI can\u0027t synch without conflicts, so I\u0027ve attached the file. It wants me to remove a parameter that should be there. I tried moving things around, copying changes from right to left and then fixing the code, but it insists. How do I get around this?",
    "I applied the attached test.  The problem to with creating the patch was probably a conflicting change.  Note where the tests fail, is this what you\u0027re expecting?  Doesn\u0027t seem quite the same as comment#19\n\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.assertTrue(Assert.java:20)\n\tat junit.framework.Assert.assertFalse(Assert.java:34)\n\tat junit.framework.Assert.assertFalse(Assert.java:41)\n\tat org.eclipse.mylar.tasklist.tests.ChangeMainTaskDirTest.tearDown(ChangeMainTaskDirTest.java:323)\n\n",
    "That isn\u0027t at all what I was expecting. I don\u0027t even have a line 323 in my file. Mine fails on the last line (assertion) of testBugzillaRegistry.  \n\nMy file is 299 lines long. Did I send the wrong thing or is the line in the trace not supposed to correspond to the file?",
    "Please synch up, because I reformatted the file to meet our conventions, specified on dev page, but in short Ctrl+Shift+F with a 150 column limit.  ",
    "The test case can\u0027t delete the test data directory because the monitor creates a file there that cannot be deleted (to clean up) because it\u0027s in use. \n\nSuggestions\n- Should I try to tell the monitor to stop monitoring and close the file while this test case is running. (Requires a new dependency on the monitor plugin by the tasklist tests)\n- Leave the test folders after the test\n\nAny preference?",
    "The PREFERENCE_LISTENER on MylarMonitorPlugin should be taking care of this, so could be useful to check why it\u0027s getting skipped.  ",
    "I\u0027m stumped. I can step through and watch the interaction logger close the file stream. But I still can\u0027t delete the file in the code or Windows Explorer. \n\n\nBy the way, SwitchTaskDataFolderTest seems to fail or not fail depending on changes I make in ChangeMainTaskDirTest. ",
    "Working on this now...",
    "I\u0027ll send a slightly revised test in a moment, but it has exactly the same problem.",
    "Created an attachment (id\u003d31438)\nPatch for tasklist.tests\n\nHere\u0027s my most recent file (in the patch). It\u0027s nearly the same. The test that\u0027s supposed to fail has been commented out.\n\n(By the way, I tried calling the code that moves the monitor file directly from the test but that didn\u0027t work.)",
    "I\u0027m rewriting that part of the test, will point you at it when done.",
    "The rewritten test is now in an integration tests area (since it tests stuff that goes across plug-ins).  Note how each unit test only tests what it needs to.  I think that the tests you have in there could be rescued, and it would be a very useful exercise for you to try to put them back.  And I can give you feedback after you\u0027ve done that.  There may be enough coverage now, but I\u0027ll leave this report open because your additional coverage would be useful to get back.\n\nThere were a large number of problems with the test, which I solved by slowly working up the asserts.  Note that I created a seperate test for the cause of the problem (the monitor failures) which helped identify some wrong assumptions about the test wrt to the new centralized directory stuff.  Note that the only thing not centralized now is the copying over of files, in order to ensure that your folder switching functionality continues to work.  However, SharedTaskFolderTest has been commented out of the suite because it was failing. ",
    "*** Bug 118581 has been marked as a duplicate of this bug. ***",
    "The rewritten test doesn\u0027t actually test that task files are moved because no task context file is created because the task has not been activated and no interaction event has occurred, right? I\u0027d like to come back to this (and SharedTaskDataDirTest) later and reimplement the coverage in a way that works with the new api changes. ",
    "That\u0027s correct, it doesn\u0027t test the move of the context files and that\u0027s some of the coverage from your cases that I think would be valuable to put back.",
    "Btw, note that I made a big change on Friday--contexts are only manipulated with handles now, there is no more concept of their paths being set on tasks, etc. That chagne is why the release didn\u0027t go out on Friday.  The MylarContextManager encapsualtes all of that now and you just give it a unique task id for reading, writing, etc.  This will be much more robust to future changes.",
    "Yes, I just noticed that because I needed to fix the upload project. I like the new API but I hope it doesn\u0027t make stand-alone use of the API depend on the ContextManager :) I think it will be ok though since the context path is the handle ID plus \".xml\"",
    "They key thing to keep in mind here is that wherever the encapsulation is, there needs to be encapsulation (e.g. so that client\u0027s don\u0027t reconstruct context filenames, policy on reading them, or locating them).  It\u0027s easy to move stuff out of the context manager into an API that takes another root directory, etc, but it\u0027s hard and painful to go modifying every client when the code is scattered.",
    "Agreed. I\u0027ll update the jars used by the stand-alone client and see if it can work with the better encapsulation as-is.",
    "Asking the context manager for the path of a task context file requires the ContextManager, MylarPlugin, preference store (and probably other things) to be up and running. Also, the path that would be returned isn\u0027t right for a stand-alone client because it starts with the mylar data directory. \n\nFor this stand-alone case, do you think it\u0027s ok to define a getFileName() method on ITask again? Or maybe ContextManager.getContextFileName(String handleID)? This would be more robust than using getHandleID() + \".xml\"",
    "Putting that info on ITask would be going back to the tangling that I just cleaned up because it would mix the externalization concern with the data structure.  Mixing more of this into the ContextManager would be a bad idea for similar reasons.  The core thing that you\u0027re wanting is the ability to read contexts independently of the workspace being present.  So just file a bug report that states as much and I\u0027ll add the functionality similarly to how I added it to the Task List (via TaskListWriter).  You\u0027ll simply get a class that knows how to read and write contexts given some root path.\n\nBtw, note that I just pulled out the shared directory code out of MylarPlugin because I shouldn\u0027t have let it get in there in the first place (same modularity reason as above).  It\u0027s in mylar.sandbox now, as is the test.  If it ever starts getting used we can move it into the tasklist or into a collaborative plug-in.",
    "This was fixed for Mylar 0.4.5, which removed the need for tasks to specify context paths.  Note that paths/URLs might still be desirable to associate with tasks in the near future (e.g. if there is a context on a server), but there is no driver for that now.  I also removed the UI for allowing the user to specify the path to a context because it was ill-conceived (Mylar manages local contexts, not the user, if server contexts exist they will require another mechanism).",
    "That all sounds good. Thanks for the comments. I\u0027ll post a new report about the class for reading contexts given some root path."
  ],
  "commentCreationDates": [
    "2005-12-07T03:31:16+01:00",
    "2005-12-07T16:23:05+01:00",
    "2005-12-07T16:38:14+01:00",
    "2005-12-07T17:22:19+01:00",
    "2005-12-07T17:27:08+01:00",
    "2005-12-08T02:07:21+01:00",
    "2005-12-08T02:08:03+01:00",
    "2005-12-08T02:11:57+01:00",
    "2005-12-08T02:14:58+01:00",
    "2005-12-08T02:28:12+01:00",
    "2005-12-08T02:40:14+01:00",
    "2005-12-08T02:55:50+01:00",
    "2005-12-08T02:56:35+01:00",
    "2005-12-08T03:13:08+01:00",
    "2005-12-08T03:23:43+01:00",
    "2005-12-08T03:28:39+01:00",
    "2005-12-08T03:43:55+01:00",
    "2005-12-08T04:13:19+01:00",
    "2005-12-08T18:29:15+01:00",
    "2005-12-08T18:35:15+01:00",
    "2005-12-08T18:58:51+01:00",
    "2005-12-08T19:05:51+01:00",
    "2005-12-08T19:12:36+01:00",
    "2005-12-08T19:20:34+01:00",
    "2005-12-08T20:15:50+01:00",
    "2005-12-08T20:45:10+01:00",
    "2005-12-08T22:55:11+01:00",
    "2005-12-09T00:17:07+01:00",
    "2005-12-09T00:19:44+01:00",
    "2005-12-09T00:26:55+01:00",
    "2005-12-09T01:16:04+01:00",
    "2005-12-09T03:42:39+01:00",
    "2005-12-09T18:56:13+01:00",
    "2005-12-12T16:58:00+01:00",
    "2005-12-12T17:02:03+01:00",
    "2005-12-12T17:04:06+01:00",
    "2005-12-12T17:07:28+01:00",
    "2005-12-12T17:10:05+01:00",
    "2005-12-12T17:19:09+01:00",
    "2005-12-12T18:52:31+01:00",
    "2005-12-13T03:02:50+01:00",
    "2005-12-13T03:05:58+01:00",
    "2005-12-13T03:31:22+01:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "elements": [
        {
          "method": "junit.framework.Assert.fail",
          "source": "Assert.java:47"
        },
        {
          "method": "junit.framework.Assert.assertTrue",
          "source": "Assert.java:20"
        },
        {
          "method": "junit.framework.Assert.assertFalse",
          "source": "Assert.java:34"
        },
        {
          "method": "junit.framework.Assert.assertFalse",
          "source": "Assert.java:41"
        },
        {
          "method": "org.eclipse.mylar.tasklist.tests.ChangeMainTaskDirTest.tearDown",
          "source": "ChangeMainTaskDirTest.java:323"
        }
      ],
      "number": 0,
      "commentIndex": 21,
      "bugId": "119557",
      "date": "2005-12-08T19:05:51+01:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "normal"
    }
  ],
  "groupId": "119557",
  "bugId": "119557",
  "date": "2005-12-07T03:31:16+01:00",
  "product": "Mylyn",
  "component": "Tasks",
  "severity": "normal"
}