{
  "comments": [
    "It is not currently possible to add a plugin-relative path or platform\nURL to the list of template containers. This is bad:\n\nThe Web Tools folks have a wizard that generates JSPs, which uses\ntheir own UIs, generation operation, and another nice-but-neglected\nframework (WRF). My groups extends this, using WRF, to contribute an\nadditional page of UI and to use our generation operation. I would\nlike to be able to reuse their templates in several places, but know\nof no other way to do this other than via\n\n0 \u003c$@ include\u003e, which takes a filesystem path\n\n1 adding their template container to the path in my plugin project\u0027s\n  Properties\u003eJET Settings\n\nUnfortunately webtools\u0027 templates are in a folder in another plugin,\nwhich is not normally in my devspace--it\u0027s usually in a target\nplatform. AFAICS this makes it impractical to include\n\n* target build\u0027s names change\n\n* every developer in my group puts the build in a different place on\n  their box\n\n* the plugin\u0027s top-level folder\u0027s name will have appended versioning),\n\nand impossible to specify via JET Settings\u003eTemplate Containers, which\nonly takes URIs for files in the workspace:\n\n[12:52:04] Ed Merks So platform:/plugins/xyz/something-in-that-plugin should\nprobably work.\n[12:52:21] Tom Roche  great! i\u0027ll give that a shot! thx\n\nSo I created a file\n\n/d/eclipse/builds/20040614_1208-WB300-AD-V60D-R3/eclipse/plugins/com.ibm.etools.webtools.wizards.basic/templates/web/jsp/foo.javajetf\n\nwith the contents\n\n\u003c%\u003d\"bar\"%\u003e\n\nI imported Merks\u0027 Example1 and Example2 from the zip attached into my\ndevspace, and make Example1\u003eJET Settings\u003eTemplate Containers\u003d\n\ntemplates;platform:/plugins/com.ibm.etools.webtools.wizards.basic/templates/web/jsp\n\n(and hit Apply, OK). I then open /Example1/templates/Example.javajet\nand try to include foo.javajetf:\n\n\u003c%@ jet package\u003d\"com.example.stuff\" imports\u003d\"java.util.*\" class\u003d\"Example1\" %\u003e\nabcde\n\u003c%@ include file\u003d\"Header\"%\u003e\n\u003c%@ include file\u003d\"foo.javajetf\"%\u003e\n\u003c%\u003d\"abc\"%\u003e\n\nI get 2 redXs in the Error Log, one of which resolves to\n\n\u003e Error Jun 17, 2004 13:14:41.626 The file \u0027null\u0027 cannot be read in\n\u0027Example.javajet\u0027 at line 4 column 1\n\u003e org.eclipse.emf.codegen.jet.JETException[0]: java.io.FileNotFoundException:\nnull (The system cannot find the file specified)\n\u003e   at java.io.FileInputStream.open(Native Method)\n\u003e   at java.io.FileInputStream.\u003cinit\u003e(FileInputStream.java:106)\n\u003e   at java.io.FileInputStream.\u003cinit\u003e(FileInputStream.java:66)\n\u003e   at\nsun.net.www.protocol.file.FileURLConnection.connect(FileURLConnection.java:69)\n\u003e   at\nsun.net.www.protocol.file.FileURLConnection.getInputStream(FileURLConnection.java:156)\n\u003e   at java.net.URL.openStream(URL.java:913)\n\u003e   at org.eclipse.emf.codegen.jet.JETCompiler.openStream(JETCompiler.java:524)\n\u003e   at org.eclipse.emf.codegen.jet.JETCompiler.handleDirective(JETCompiler.java:112)\n\u003e   at\norg.eclipse.emf.codegen.jet.JETParser$DelegatingListener.handleDirective(JETParser.java:133)\n\u003e   at org.eclipse.emf.codegen.jet.JETParser$Directive.accept(JETParser.java:506)\n\u003e   at org.eclipse.emf.codegen.jet.JETParser.parse(JETParser.java:575)\n\u003e   at org.eclipse.emf.codegen.jet.JETCompiler.parse(JETCompiler.java:422)\n\u003e   at org.eclipse.emf.codegen.jet.JETCompiler.parse(JETCompiler.java:415)\n\u003e   at\norg.eclipse.emf.codegen.jet.JETCompileTemplateOperation.run(JETCompileTemplateOperation.java:195)\n\u003e   at org.eclipse.emf.codegen.jet.JETBuilder.incrementalBuild(JETBuilder.java:113)\n\u003e   at org.eclipse.emf.codegen.jet.JETBuilder.build(JETBuilder.java:63)\n\u003e   at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:558)\n\u003e   at\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:615)\n\u003e   at org.eclipse.core.runtime.Platform.run(Platform.java:758)\n\u003e   at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:154)\n\u003e   at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)\n\u003e   at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)\n\u003e   at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:226)\n\u003e   at\norg.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:615)\n\u003e   at org.eclipse.core.runtime.Platform.run(Platform.java:758)\n\u003e   at\norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:229)\n\u003e   at\norg.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:265)\n\u003e   at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:294)\n\u003e   at org.eclipse.core.internal.resources.Workspace.build(Workspace.java:198)\n\u003e   at org.eclipse.ui.actions.GlobalBuildAction$1.run(GlobalBuildAction.java:182)\n\u003e   at org.eclipse.core.internal.jobs.Worker.run(Worker.java:66)\n\nFWIW I also notice that, when I reopen Example1\u003eProperties\u003eJET\nSettings, Template Containers\u003d\n\ntemplates;\n\n[13:22:52] Tom Roche\tfwiw i also tried\nplatform://plugins/com.ibm.etools.webtools.wizards.basic/templates/web/jsp\n[13:23:07] Tom Roche\t(i.e. \u0027//\u0027)\n[13:25:48] Tom Roche\ti\u0027m wondering if the builder isn\u0027t getting hosed by\nwhatever is changing Template Containers?\n\n[14:25:29] Ed Merks\tThomas.  I\u0027m looking closely at the code and there\ndefinitely an assumption that the paths will all be in the workspace.  I\u0027m going\nto see if I can generalize this in a non-risky way...\n[14:39:18] Ed Merks\tThomas, it looks kind of scary to make a change like this so\nlate in the development cycle...\n[14:39:41] Tom Roche\tok, i\u0027ll make a bug :-(",
    "Created an attachment (id\u003d12422)\nillustrates \"template extension\" via JET Settings\u003eTemplate Containers\n\nContains Merks\u0027 Example1 and Example2 projects, which\nillustrate \"template extension\" via JET Settings\u003eTemplate Containers\n",
    "Created an attachment (id\u003d12461)\nHow to link a folder\n\nAlthough the underlying JET compiler accesses everything through URLs and so\ndoes not require things to be in the workspace, I think it would be better for\nusers in your scenario to link the folder containing the templates into the\nworkspace rather than directing the JET compiler to look outside of the\nworkspace. I\u0027m sure your users will want to see the templates they are\nextending, right?  Is this a workable solution?",
    "merks@ca.ibm.com  2004-06-18 06:31 -------\n\u003e How to link a folder\n\nThanks, but I already know how :-)\n\n\u003e Although the underlying JET compiler accesses everything through\n\u003e URLs and so does not require things to be in the workspace, I think\n\u003e it would be better for users in your scenario to link the folder\n\u003e containing the templates into the workspace rather than directing\n\u003e the JET compiler to look outside of the workspace. \n\nWhy? We haven\u0027t required users to link the folders containing their\nother code dependencies into their workspace for a very long time.\nWhy should templates be any different?\n\n\u003e I\u0027m sure your users will want to see the templates they are\n\u003e extending, right?\n\nNon sequitur: just because the templates are in some target build or\ninstalled project doesn\u0027t mean they can\u0027t be seen. They\u0027re just files\nsitting there! (Not that we have any option--if the templates were,\ne.g., jar-ed, JET would be hosed, no?)\n\n\u003e Is this a workable solution?\n\nIt\u0027s a workaround at best, more fairly a kludge. \n\nQuestions for you: Why be workplace-centric? Why not allow platform\nURIs?\n",
    "I don\u0027t see this as a code dependency, I see it as a source dependency.  (You \ncan\u0027t tell the Java compiler to look for sources outside the workspace.) Being \nworkspace centric for a tool that runs in an IDE that\u0027s centered around a \nworkspace certainly seems right. You don\u0027t think users will want to see all \ntheir templates in the IDE and that they\u0027ll be happy looking for them out in the \nfile system? \n\nA jar: scheme URL still supports openStream so that should work okay in the \nunderlying engine. \n\nIn these scenarios, are you setting up a project for a client programmatically, \nor are you setting up a project for yourself manually?",
    "Ed Merks 2004-06-18 06:31 -------\n\u003e\u003e\u003e I\u0027m sure your users will want to see the templates they are\n\u003e\u003e\u003e extending, right?\n\nTom Roche 2004-06-18 14:34 -------\n\u003e\u003e Non sequitur: just because the templates are in some target build\n\u003e\u003e or installed project doesn\u0027t mean they can\u0027t be seen. They\u0027re just\n\u003e\u003e files sitting there! (Not that we have any option--if the templates\n\u003e\u003e were, e.g., jar-ed, JET would be hosed, no?)\n\n\u003e\u003e\u003e Is this a workable solution?\n\n\u003e\u003e It\u0027s a workaround at best, more fairly a kludge. \n\n\u003e\u003e Questions for you: Why be workplace-[limited]? Why not\n\u003e\u003e allow platform URIs?\n\nEd Merks 2004-06-18 15:04 -------\n\u003e I don\u0027t see this as a code dependency, I see it as a source\n\u003e dependency. \n\nAre you familiar with the phrase, \"a distinction without a difference\"\n?-)\n\n\u003e (You can\u0027t tell the Java compiler to look for sources outside the\n\u003e workspace.) \n\nReally? I can rclick on any project in my workspace\u003eProperties\u003eJava\nBuild Path\u003eLibraries, choose Plug-in Dependencies, choose any jar,\nexpand its node, and set Source Attachment ... which, like the jar, is\nin my target platform.\n\n\u003e Being workspace centric for a tool that runs in an IDE that\u0027s\n\u003e centered around a workspace certainly seems right. \n\nOK, I\u0027ll revise the question: why be workplace-limited? Eclipse hasn\u0027t\nbeen since 1.0. It may be \"centered around\" the workspace, but it\ndoesn\u0027t _limit one to_ the workspace.\n\n\u003e You don\u0027t think users will want to see all their templates in the\n\u003e IDE and that they\u0027ll be happy looking for them out in the file\n\u003e system?\n\nWhy should they hafta care where they are located, or in what form? \nI have Java sources in my workspace that depend on other workspace\nsources as well as on compiled Java in the JRE and in target builds.\nWhen I F3 on something, I see the source--whether it\u0027s in the\nworkspace or not.\n\nIs there something about JET that prevents providing similar\nproductivity enhancement to the user? (I mean, something about the\ntechnology, not that it\u0027s the \"red-headed stepchild\" of EMF :-)\n",
    "This enhancement won\u0027t be provided until EMF 2.0.1.",
    "The code was commited to CVS.",
    "The fix is available in the M200407150937 build."
  ],
  "commentCreationDates": [
    "2004-06-17T21:43:29+02:00",
    "2004-06-17T21:47:12+02:00",
    "2004-06-18T12:31:13+02:00",
    "2004-06-18T20:34:09+02:00",
    "2004-06-18T21:04:56+02:00",
    "2004-06-18T21:45:49+02:00",
    "2004-06-23T15:06:51+02:00",
    "2004-06-30T22:37:29+02:00",
    "2004-07-15T17:46:01+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.io.FileNotFoundException",
      "message": "null (The system cannot find the file specified) \u003e",
      "elements": [
        {
          "method": "java.io.FileInputStream.open",
          "source": "Native Method"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "67708",
      "date": "2004-06-17T21:43:29+02:00",
      "product": "EMF",
      "component": "Core",
      "severity": "normal"
    }
  ],
  "groupId": "67708",
  "bugId": "67708",
  "date": "2004-06-17T21:43:29+02:00",
  "product": "EMF",
  "component": "Core",
  "severity": "normal"
}