{
  "comments": [
    "I was trying to expose the Java runtime library, by adding the JRE_LIB variable to \"AspectJ Build -\u003e Inpath\". When I try to clean and build, I get the following internal compiler error (the error occurs in an aspect which tries the use static crosscutting in a J2SE class):\n\njava.lang.IllegalStateException\nat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:616)\nat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597)\nat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:512)\nat org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:263)\nat org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:302)\nat org.a ... nternal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nIllegalStateException thrown: Wrong number of type parameters supplied\n\nI am using JDK 1.5.0, Eclipse 3.2.1, and AJDT 1.4.1.",
    "I have seen this as well.  \n\nHere is the output of the iajc ant task:\n\n     [iajc] trouble in: \n     [iajc]  class com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet extends java.util.AbstractSet implements java.util.Set:\n     [iajc]   private java.util.Set wrapped [Signature(Ljava/util/Set\u003cLjava/util/Map$Entry\u003cTK;Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase$Value\u003cTV;\u003e;\u003e;\u003e;)]\n     [iajc]   final com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase this$0\n     [iajc]   public void \u003cinit\u003e(com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase, java.util.Set):\n     [iajc]                     ALOAD_0     // Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase$EntrySet; this   (line 92)\n     [iajc]                     ALOAD_1\n     [iajc]                     PUTFIELD com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.this$0 Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase;\n     [iajc]                     ALOAD_0     // Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase$EntrySet; this\n     [iajc]                     INVOKESPECIAL java.util.AbstractSet.\u003cinit\u003e ()V\n     [iajc]     constructor-execution(void com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.\u003cinit\u003e(com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase, java.util.Set))\n     [iajc]     |               ALOAD_0     // Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase$EntrySet; this   (line 93)\n     [iajc]     |               ALOAD_2     // Ljava/util/Set; wrapped\n     [iajc]     |               PUTFIELD com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.wrapped Ljava/util/Set;\n     [iajc]     |               RETURN   (line 94)\n     [iajc]     constructor-execution(void com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.\u003cinit\u003e(com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase, java.util.Set))\n     [iajc]   end public void \u003cinit\u003e(com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase, java.util.Set)\n\n     [iajc]   public java.util.Iterator iterator():\n     [iajc]     method-execution(java.util.Iterator com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.iterator())\n     [iajc]     |               NEW com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySetIterator   (line 99)\n     [iajc]     |               DUP\n     [iajc]     |               ALOAD_0     // Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase$EntrySet; this\n     [iajc]     |               GETFIELD com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.this$0 Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase;\n     [iajc]     |               ALOAD_0     // Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase$EntrySet; this\n     [iajc]     |               GETFIELD com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.wrapped Ljava/util/Set;\n     [iajc]     | method-call(java.util.Iterator java.util.Set.iterator())\n     [iajc]     | |             INVOKEINTERFACE java.util.Set.iterator ()Ljava/util/Iterator;\n     [iajc]     | method-call(java.util.Iterator java.util.Set.iterator())\n     [iajc]     |               INVOKESPECIAL com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySetIterator.\u003cinit\u003e (Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase;Ljava/util/Iterator;)V\n     [iajc]     |               ARETURN\n     [iajc]     method-execution(java.util.Iterator com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.iterator())\n     [iajc]   end public java.util.Iterator iterator()\n\n     [iajc]   public int size():\n     [iajc]     method-execution(int com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.size())\n     [iajc]     |               ALOAD_0     // Lcom/ihg/dec/framework/commons/utils/cow/AspectJBugTestCase$EntrySet; this   (line 105)\n     [iajc]     |               GETFIELD com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.wrapped Ljava/util/Set;\n     [iajc]     | method-call(int java.util.Set.size())\n     [iajc]     | |             INVOKEINTERFACE java.util.Set.size ()I\n     [iajc]     | method-call(int java.util.Set.size())\n     [iajc]     |               IRETURN\n     [iajc]     method-execution(int com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet.size())\n     [iajc]   end public int size()\n\n     [iajc] end  class com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet\n\n     [iajc]     \n     [iajc] Exception thrown from AspectJ 1.5.3\n\n     [iajc] This might be logged as a bug already -- find current bugs at\n     [iajc]   http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\n     [iajc] Bugs for exceptions thrown have titles File:line from the top stack, \n     [iajc] e.g., \"SomeFile.java:243\"\n\n     [iajc] If you don\u0027t find the exception below in a bug, please add a new bug\n     [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\n     [iajc] To make the bug a priority, please include a test program\n     [iajc] that can reproduce this exception.\n     [iajc] Wrong number of type parameters supplied\n\n     [iajc] when weaving type com.ihg.dec.framework.commons.utils.cow.AspectJBugTestCase$EntrySet\n     [iajc] when weaving classes \n     [iajc] when weaving \n     [iajc] when batch building BuildConfig[null] #Files\u003d16\n     [iajc] Wrong number of type parameters supplied\n     [iajc] java.lang.IllegalStateException: Wrong number of type parameters supplied\n     [iajc]     at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:616)\n     [iajc]     at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597)\n     [iajc]     at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:512)\n     [iajc]     at org.aspectj.weaver.bcel.BcelClassWeaver.checkForOverride(BcelClassWeaver.java:638)\n     [iajc]     at org.aspectj.weaver.bcel.BcelClassWeaver.calculateAnyRequiredBridgeMethods(BcelClassWeaver.java:720)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1615)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1563)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1341)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1161)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:455)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:392)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:380)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:906)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:260)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:176)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:378)\n     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:253)\n     [iajc]     at org.aspectj.tools.ajc.Main.main(Main.java:88)\n\n     [iajc] Aug 6, 2007 7:30:26 PM org.aspectj.weaver.tools.Jdk14Trace info\n     [iajc] INFO: Dumping to D:\\Documents and Settings\\psimerd\\workspace\\iris-web\\.\\ajcore.20070806.193026.708.txt\n\n     [iajc] 1 fail|abort\n\nHere is the class that got the error:\n\npackage com.ihg.dec.framework.commons.utils.cow;\n\nimport java.util.AbstractSet;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.Map.Entry;\n\npublic class AspectJBugTestCase\n{\n  class Value\u003cV\u003e\n  {\n    private V value;\n\n    public Value( V value )\n    {\n      this.value \u003d value;\n    }\n\n    public V getValue()\n    {\n      return value;\n    }\n\n    public void setValue( V value )\n    {\n      this.value \u003d value;\n    }\n  }\n\n  class EntrySetEntry\u003cK, V\u003e\n    implements Entry\u003cK, V\u003e\n  {\n    private Entry\u003cK, Value\u003cV\u003e\u003e wrapped;\n\n    public EntrySetEntry( Entry\u003cK, Value\u003cV\u003e\u003e wrapped )\n    {\n      this.wrapped \u003d wrapped;\n    }\n\n    public K getKey()\n    {\n      return wrapped.getKey();\n    }\n\n    public V getValue()\n    {\n      return wrapped.getValue().getValue();\n    }\n\n    public V setValue( V value )\n    {\n      Value\u003cV\u003e old \u003d wrapped.setValue( new Value\u003cV\u003e( value ) );\n      return old \u003d\u003d null ? null : old.getValue();\n    }\n\n  }\n\n  class EntrySetIterator\u003cK, V\u003e\n    implements Iterator\u003cEntry\u003cK, V\u003e\u003e\n  {\n    private Iterator\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped;\n\n    public EntrySetIterator( Iterator\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped )\n    {\n      this.wrapped \u003d wrapped;\n    }\n\n    public boolean hasNext()\n    {\n      return wrapped.hasNext();\n    }\n\n    public Entry\u003cK, V\u003e next()\n    {\n      return new EntrySetEntry\u003cK, V\u003e( wrapped.next() );\n    }\n\n    public void remove()\n    {\n      throw new UnsupportedOperationException( \"Not implemented.\" );\n    }\n  }\n\n  class EntrySet\u003cK, V\u003e\n    extends AbstractSet\u003cEntry\u003cK, V\u003e\u003e\n    implements Set\u003cEntry\u003cK, V\u003e\u003e\n  {\n    private Set\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped;\n\n    public EntrySet( Set\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped )\n    {\n      this.wrapped \u003d wrapped;\n    }\n\n    @Override\n    public Iterator\u003cEntry\u003cK, V\u003e\u003e iterator()\n    {\n      return new EntrySetIterator\u003cK, V\u003e( wrapped.iterator() );\n    }\n\n    @Override\n    public int size()\n    {\n      return wrapped.size();\n    }\n  }\n\n  public void testIt()\n  {\n    new EntrySet\u003cString, String\u003e( new HashSet\u003cEntry\u003cString, Value\u003cString\u003e\u003e\u003e() );\n  }\n}\n\nIf I rearrange the EntrySet delcaration so that it extends AbstractSet with a non parameterized type like so:\n\npackage com.ihg.dec.framework.commons.utils.cow;\n\nimport java.util.AbstractSet;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.Map.Entry;\n\npublic class AspectJBugTestCase\n{\n  class Value\u003cV\u003e\n  {\n    private V value;\n\n    public Value( V value )\n    {\n      this.value \u003d value;\n    }\n\n    public V getValue()\n    {\n      return value;\n    }\n\n    public void setValue( V value )\n    {\n      this.value \u003d value;\n    }\n  }\n\n  class EntrySetEntry\u003cK, V\u003e\n    implements Entry\u003cK, V\u003e\n  {\n    private Entry\u003cK, Value\u003cV\u003e\u003e wrapped;\n\n    public EntrySetEntry( Entry\u003cK, Value\u003cV\u003e\u003e wrapped )\n    {\n      this.wrapped \u003d wrapped;\n    }\n\n    public K getKey()\n    {\n      return wrapped.getKey();\n    }\n\n    public V getValue()\n    {\n      return wrapped.getValue().getValue();\n    }\n\n    public V setValue( V value )\n    {\n      Value\u003cV\u003e old \u003d wrapped.setValue( new Value\u003cV\u003e( value ) );\n      return old \u003d\u003d null ? null : old.getValue();\n    }\n\n  }\n\n  class EntrySetIterator\u003cK, V, E extends Entry\u003cK,V\u003e\u003e\n    implements Iterator\u003cE\u003e\n  {\n    private Iterator\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped;\n\n    public EntrySetIterator( Iterator\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped )\n    {\n      this.wrapped \u003d wrapped;\n    }\n\n    public boolean hasNext()\n    {\n      return wrapped.hasNext();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E next()\n    {\n      return (E)new EntrySetEntry\u003cK, V\u003e( wrapped.next() );\n    }\n\n    public void remove()\n    {\n      throw new UnsupportedOperationException( \"Not implemented.\" );\n    }\n  }\n\n  class EntrySet\u003cK, V, E extends Entry\u003cK,V\u003e\u003e\n    extends AbstractSet\u003cE\u003e\n    implements Set\u003cE\u003e\n  {\n    private Set\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped;\n\n    public EntrySet( Set\u003cEntry\u003cK, Value\u003cV\u003e\u003e\u003e wrapped )\n    {\n      this.wrapped \u003d wrapped;\n    }\n\n    @Override\n    public Iterator\u003cE\u003e iterator()\n    {\n      return new EntrySetIterator\u003cK, V, E\u003e( wrapped.iterator() );\n    }\n\n    @Override\n    public int size()\n    {\n      return wrapped.size();\n    }\n  }\n\n  public void testIt()\n  {\n    new EntrySet\u003cString, String, Entry\u003cString,String\u003e\u003e( new HashSet\u003cEntry\u003cString, Value\u003cString\u003e\u003e\u003e() );\n  }\n}\n\nError goes away.",
    "I would like to add that since this prevents perfectly valid Java from compiling, the severity aught to be something higher than \"normal\"",
    "several bugs are similar to this, but this one includes testcode (hurray!) - thanks for that.",
    "I\u0027m trying to recreate using the example code in comment 1 but it just seems to compile for me.  That is using either AspectJ1.5.3 or the latest dev builds.  Dana - I don\u0027t suppose you are still working with this code are you?  Can you let me know what operating system and jvm you are using?",
    "Finally, I managed to recreate this - I had to include an aspect alongside the testcode supplied in comment #1.  The aspect was\n\naspect X {\n  declare parents: *.E* implements java.io.Serializable;\n}\n\nI needed this to ensure we would drive the bridge method building logic that is shown in the stacktrace included in this bug report (as that appeared to lead to the crash).  After showing it failing with AspectJ1.5.3, I then tested it with the latest drivers and it works fine.  Because the signature I can see at the top of the crash in comment #1 includes inner types I suspected it might be related to bug 175039 where we made a mistake processing signatures containing inner types.  And when I remove the fix for 175039 (just one line) from the latest copy of the code, it starts to fail exactly as reported here.  So I believe this was another symptom of the same problem reported in 175039.",
    "*** Bug 177215 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2007-03-12T15:27:26+01:00",
    "2007-08-07T01:38:13+02:00",
    "2007-08-07T01:42:48+02:00",
    "2007-10-26T12:54:01+02:00",
    "2007-10-29T18:08:26+01:00",
    "2007-11-08T16:10:20+01:00",
    "2007-11-08T16:13:12+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "elements": [
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:616"
        },
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:597"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getDeclaredMethods",
          "source": "ReferenceType.java:512"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.addAndRecurse",
          "source": "ResolvedType.java:263"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.addAndRecurse",
          "source": "ResolvedType.java:302"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "176991",
      "date": "2007-03-12T15:27:26+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "critical"
    },
    {
      "exceptionType": "java.lang.IllegalStateException",
      "message": "Wrong number of type parameters supplied      [iajc]",
      "elements": [
        {
          "method": "org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith",
          "source": "ResolvedMemberImpl.java:616"
        }
      ],
      "number": 1,
      "commentIndex": 1,
      "bugId": "176991",
      "date": "2007-08-07T01:38:13+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "critical"
    }
  ],
  "groupId": "176991",
  "bugId": "176991",
  "date": "2007-03-12T15:27:26+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "critical"
}