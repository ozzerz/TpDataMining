{
  "comments": [
    "This problem can be reproduced easily. Here is the code:\n--------------------------------------------------------------------\npublic interface TopInterface extends Cloneable {\n    public Object clone();\n}\npublic interface SubInterface extends TopInterface {\n}\npublic class ConcreteClass implements SubInterface {\n    public Object clone() {\n\tConcreteClass clone \u003d null;\n\ttry {\n\t    clone \u003d (ConcreteClass)super.clone();\n\t} catch (CloneNotSupportedException e) {\n\t    return null;\n\t}\n\treturn clone;\n    }\n\t\n    public String toString() {\n\treturn \"Concrete Class: \" + getClass().getName();\n    }\n}\npublic class  TestClass {\n    public static void main(String[] args) {\n\tSubInterface sub \u003d new ConcreteClass();\n\tSubInterface sub2 \u003d (SubInterface)sub.clone();\n\tSystem.out.println(sub2.toString());\n    }\n}\n---------------------------------------------------------------------------\nNow compile this using AspectJ with JDK1.3.1_04 or JDK1.4.0, ANT 1.5. (my \ncommand line looks like this: java org.aspectj.tools.ant.taskdefs.Ajc ......)\n\nAnd run the TestClass above:\n- with JRE1.3.1_04 you get \"Concrete Class: ConcreteClass\"\n- with JRE1.4.0 you get \"java.lang.AbstractMethodError at TestClass.main\n(TestClass.java:4)\"\n\n-----------------------------------------------------------------------------\n\nI don\u0027t know if this is a bug in the compilation or in the VM (as it\u0027s a \nruntime problem), but I tested compiling the test with JDK javac (1.3.0_04 and \n1.4.0) and then it worked fine. So I guess this has to do with AspectJ.",
    "This is a bug in the pure Java part of the compiler which almost certainly \nmeans that it\u0027s in the pure eclipse code that we depend on.\n\nYou should try the various eclipse code generation options for the compiler, \nsuch as -1.4 to see if it will generate code that is more compatible with your \nJVM.  It would also be helpful if you could search the core eclipse bug \ndatabase to see if this is a known bug over there.",
    "I\u0027m not sure I understand how the compiler depends on eclipse code, but I \nlooked for that bug on eclipse as well and couldn\u0027t find anything related.\nI also tried the 1.4 flag with no result. However, the ajc \"-usejavac\" flag \nfixed the problem (which make sense if this is a compiler issue).",
    "What version of the compiler are you using?  It sounds like you\u0027re using the \n1.0.6 release of ajc -- which has no dependencies on eclipse.\n\nPlease try the latest 1.1beta4 release to see if you still have this problem.  \nThere are currently no resources to support the 1.0.6 release of ajc, but the \nsource code is available if you want to look into the problem further.",
    "we tried with the 1.1beta4 release and it worked fine.\nThanks a lot.",
    "It\u0027s great to see how bugs like this are fixed for us by building on the \neclipse compiler base in 1.1."
  ],
  "commentCreationDates": [
    "2003-01-30T15:44:58+01:00",
    "2003-02-13T21:06:33+01:00",
    "2003-02-14T14:00:30+01:00",
    "2003-02-14T18:16:34+01:00",
    "2003-02-24T10:56:54+01:00",
    "2003-02-26T18:28:18+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.AbstractMethodError",
      "elements": [
        {
          "method": "TestClass.main",
          "source": "TestClass.java:4"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "30612",
      "date": "2003-01-30T15:44:58+01:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "30612",
  "bugId": "30612",
  "date": "2003-01-30T15:44:58+01:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}