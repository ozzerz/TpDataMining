{
  "comments": [
    "When bundles are first installed the Framework is forced to open the bundle file (jar file) to read the content of the manifest.  The Framework currently keeps this file open indefinately even if the bundle is never used again for the initial session.  We should consider closing the bundle file after initial install so that it may be opened lazily if needed again for the initial session.",
    "This would be intersting to look at and understand the risks etc. ",
    "I did some investigation.  A simple fix would be to have the framework close the bundle jar file after it has read all the metadata it needs from it at install time.  Then the bundle jar file would be opened on demand when a resource or class is loaded from it.\n\nThis does not gain us anything though because the extension registry will immediately load the \"plugin.xml\" file from every bundle resolved in the system on intial startup.  This causes every bundle jar file to be reopened.  On initial startup this happens when the startup level is incremented (after all the bundles have been installed and resolved).\n\nThere is no good opportunity for the framework to close the bundle jar file during intial startup because it cannot know when all the players are done reading metadata from the installed bundles.\n\nUnless someone can think of another relatively simple solution we should defer to 3.3.",
    "perhaps we should just modify both to close the JAR files?  The scenario here is where we are starting up, for the first time, some large pluign base.  The frameowrk and the registry just want one file from the bundle.  One way to look at this is to say that the JAR should only ever be kept open if we are loading code out of it and even then only if it does not time out.\n\nI am not pressing for 3.2 particularly but we should have this thought out incase the problem comes up.",
    "When you say \"modify both to close the JAR files\", I assume you mean the both the framework and the registry.  The framework can certainly to this, but the registry cannot unless we add some API for the registry to call (adding another containerism).\n\nJAR file timeouts will not solve the problem with mass installs because the files will not timeout fast enough when you are installing 1000s of bundles at one time.  This is where the osgi.bundlefile.limit can help because it closes jar files based on least recently used instead of timeouts so it does not matter how fast the bundles are installed.",
    "Perhaps it is logical thing that we can put in place where a JAR is just not kept open until some code has been loaded from it.  That way the registry would not need to know about this concept.\n\nThis of course, could have some bad sideeffects but, for example, if the flag were off by default, the init code for large product installs could run with the flag on thus eliminating the need to have all JARs open at once.",
    "Maybe, but that would require us to wrapper the InputStreams for each bundle entry so that we know when they have been completely read and/or closed, then we can close underlying zip files.\n\nThis all seems like too much complication when the problem can be solved with the new osgi.bundlefile.limit option.  An installer can be launched with this option set low (something \u003c 100).  The installer initializes the framework which causes 1000s of bundles to be installed but the osgi.bundlefile.limit prevents more than 100 files open at a given time.  Then the installer exists the initialization process and the framework shutsdown and all files are closed.",
    "well you should have said so earlier :-)",
    "Sorry for the confussion ;-)\n\nThe reason I opened this bug was because others have concerns that even with the osgi.bundlefile.limit set low for initialization you could still have a scenario where you are installing many products at the same time and the OS runs out of file handles.  But the only way this could happen is if you do not shutdown the framework after initialization before installing and initializating the next product.\n\nThis bug was an attempt to limit the amount of bundle files open accross different instances of eclipse which are performing an initialization.  IMO this is a rare case that can be avoided easily by installers.\n\nSince the fix is not simple and the gain is questionable I\u0027m removing the milestone.",
    "In a development build of our product based on Eclipse 3.2.1, we ran into:\n\n!ENTRY org.eclipse.ui.workbench.compatibility 4 0 2006-09-14 13:53:58.781\n!MESSAGE FrameworkEvent.ERROR\n!STACK 0\njava.util.zip.ZipException: Too many open files F:\\astk\\IES32-o0637.07\\eclipse\\plugins\\org.eclipse.ui.workbench.compatibility_3.2.0.I20060605-1400\\compatibility.jar\n\tat java.util.zip.ZipFile.open(Native Method)\n\tat java.util.zip.ZipFile.\u003cinit\u003e(ZipFile.java:238)\n\tat java.util.zip.ZipFile.\u003cinit\u003e(ZipFile.java:268)\n\tat org.eclipse.osgi.framework.util.SecureAction.getZipFile(SecureAction.java:226)\n\tat org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.basicOpen(ZipBundleFile.java:79)\n\tat org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getZipFile(ZipBundleFile.java:92)\n\tat org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.checkedOpen(ZipBundleFile.java:65)\n\tat org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getEntry(ZipBundleFile.java:234)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:449)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:427)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:410)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:188)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass(BundleLoader.java:334)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:386)\n\tat org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:347)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:561)\n\tat java.lang.J9VMInternals.verifyImpl(Native Method)\n\tat java.lang.J9VMInternals.verify(J9VMInternals.java:59)\n\tat java.lang.J9VMInternals.initialize(J9VMInternals.java:120)\n\tat org.eclipse.ui.internal.ActionPresentation.setActionSets(ActionPresentation.java:149)\n\tat org.eclipse.ui.internal.WorkbenchWindow.updateActionSets(WorkbenchWindow.java:2826)\n\tat org.eclipse.ui.internal.WorkbenchWindow$6.run(WorkbenchWindow.java:2636)\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)\n\tat org.eclipse.ui.internal.WorkbenchWindow.setActivePage(WorkbenchWindow.java:2597)\n\tat org.eclipse.ui.internal.WorkbenchWindow.busyOpenPage(WorkbenchWindow.java:658)\n\tat org.eclipse.ui.internal.Workbench.busyOpenWorkbenchWindow(Workbench.java:795)\n\tat org.eclipse.ui.internal.Workbench.doOpenFirstTimeWindow(Workbench.java:1437)\n\tat org.eclipse.ui.internal.Workbench.access$10(Workbench.java:1435)\n\tat org.eclipse.ui.internal.Workbench$16.run(Workbench.java:1399)\n\tat org.eclipse.ui.internal.Workbench.runStartupWithProgress(Workbench.java:1421)\n\tat org.eclipse.ui.internal.Workbench.openFirstTimeWindow(Workbench.java:1397)\n\tat org.eclipse.ui.internal.WorkbenchConfigurer.openFirstTimeWindow(WorkbenchConfigurer.java:190)\n\tat org.eclipse.ui.application.WorkbenchAdvisor.openWindows(WorkbenchAdvisor.java:708)\n\tat org.eclipse.ui.internal.Workbench.init(Workbench.java:1085)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1847)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:400)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:177)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:615)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:336)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:280)\n\tat org.eclipse.core.launcher.Main.run(Main.java:977)\n\tat org.eclipse.core.launcher.Main.main(Main.java:952)\n\nafter adding Group language fragments throughout the product. This increased \nour plugin count from 2300 to 2900. I was able to work around this by adding osgi.bundlefile.limit\u003d100. When I upped this to a high value like 9999, it\nfailed.",
    "No plans to address this issue.  Using the osgi.bundlefile.limit is the recommended way to fix these types of issues.  Unless a compelling usecase cannot be solved with the osgi.bundlefile.limit option we should not complicate the framework even more with a different solution."
  ],
  "commentCreationDates": [
    "2006-04-24T15:36:44+02:00",
    "2006-04-24T16:21:48+02:00",
    "2006-04-24T20:57:51+02:00",
    "2006-04-24T21:11:56+02:00",
    "2006-04-24T21:37:42+02:00",
    "2006-04-24T21:47:40+02:00",
    "2006-04-25T00:27:48+02:00",
    "2006-04-25T02:29:42+02:00",
    "2006-04-25T15:38:33+02:00",
    "2006-09-14T19:56:39+02:00",
    "2007-03-29T18:45:50+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.util.zip.ZipException",
      "message": "Too many open files F:\\astk\\IES32-o0637.07\\eclipse\\plugins\\org.eclipse.ui.workbench.compatibility_3.2.0.I20060605-1400\\compatibility.jar",
      "elements": [
        {
          "method": "java.util.zip.ZipFile.open",
          "source": "Native Method"
        },
        {
          "method": "java.util.zip.ZipFile.\u003cinit\u003e",
          "source": "ZipFile.java:238"
        },
        {
          "method": "java.util.zip.ZipFile.\u003cinit\u003e",
          "source": "ZipFile.java:268"
        },
        {
          "method": "org.eclipse.osgi.framework.util.SecureAction.getZipFile",
          "source": "SecureAction.java:226"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.basicOpen",
          "source": "ZipBundleFile.java:79"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getZipFile",
          "source": "ZipBundleFile.java:92"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.checkedOpen",
          "source": "ZipBundleFile.java:65"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.bundlefile.ZipBundleFile.getEntry",
          "source": "ZipBundleFile.java:234"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl",
          "source": "ClasspathManager.java:449"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl",
          "source": "ClasspathManager.java:427"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass",
          "source": "ClasspathManager.java:410"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass",
          "source": "DefaultClassLoader.java:188"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass",
          "source": "BundleLoader.java:334"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:386"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java:347"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass",
          "source": "DefaultClassLoader.java:83"
        },
        {
          "method": "java.lang.ClassLoader.loadClass",
          "source": "ClassLoader.java:561"
        },
        {
          "method": "java.lang.J9VMInternals.verifyImpl",
          "source": "Native Method"
        },
        {
          "method": "java.lang.J9VMInternals.verify",
          "source": "J9VMInternals.java:59"
        },
        {
          "method": "java.lang.J9VMInternals.initialize",
          "source": "J9VMInternals.java:120"
        },
        {
          "method": "org.eclipse.ui.internal.ActionPresentation.setActionSets",
          "source": "ActionPresentation.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow.updateActionSets",
          "source": "WorkbenchWindow.java:2826"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow$6.run",
          "source": "WorkbenchWindow.java:2636"
        },
        {
          "method": "org.eclipse.swt.custom.BusyIndicator.showWhile",
          "source": "BusyIndicator.java:67"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow.setActivePage",
          "source": "WorkbenchWindow.java:2597"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchWindow.busyOpenPage",
          "source": "WorkbenchWindow.java:658"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.busyOpenWorkbenchWindow",
          "source": "Workbench.java:795"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.doOpenFirstTimeWindow",
          "source": "Workbench.java:1437"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.access$10",
          "source": "Workbench.java:1435"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench$16.run",
          "source": "Workbench.java:1399"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runStartupWithProgress",
          "source": "Workbench.java:1421"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.openFirstTimeWindow",
          "source": "Workbench.java:1397"
        },
        {
          "method": "org.eclipse.ui.internal.WorkbenchConfigurer.openFirstTimeWindow",
          "source": "WorkbenchConfigurer.java:190"
        },
        {
          "method": "org.eclipse.ui.application.WorkbenchAdvisor.openWindows",
          "source": "WorkbenchAdvisor.java:708"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.init",
          "source": "Workbench.java:1085"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1847"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:419"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:78"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:92"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:68"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:400"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:177"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:64"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:43"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:615"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:336"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:280"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:977"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:952"
        }
      ],
      "number": 0,
      "commentIndex": 9,
      "bugId": "138182",
      "date": "2006-09-14T19:56:39+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    }
  ],
  "groupId": "138182",
  "bugId": "138182",
  "date": "2006-04-24T15:36:44+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "normal"
}