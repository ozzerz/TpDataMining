{
  "comments": [
    "I get this error when weaving a LifeRay jar (compression-filter.jar). \n\nUnhandled kind of new   -1: impdep1[254](1)\nwhen implementing on shadow constructor-call(void java.lang.NoClassDefFoundError.\u003cinit\u003e()) when weaving classes ..\n\nTo reproduce: \n\n1)extract TestCase.zip. \n2) Go to the expanded TestCase/ directory.\n\n3)do: ajc ThrowablesAspect.aj -log \"test.log\" -cp \"\u003cpath to aspectjrt.jar\u003e;lib\\commons-logging-1.0.4.jar;lib\\servlet-api.jar;lib\\util-java.jar;lib\\portal-kernel.jar\" -injars compression-filter.jar -outjar compression-filter.jar.new\n\n4) ajc will say there are 2 fail|aborts\n\nNOTE: No advice or doing \"around()\" doesn\u0027t produce the error. The error happens when having at least \"before()\" or \"after()\" advice. I tried empty advice and it still fails. \n\n\n\nFull Stack Trace:\n--------\ntrouble in: \npublic class com.liferay.filters.compression.CompressionFilter extends java.lang.Object implements javax.servlet.Filter:\n  static boolean useCompressionFilter\n  public static final String ENCODING\n  private static final String _ALREADY_FILTERED\n  private static final String _COMPRESS \u003d \"compress\"\n  private static final String _INCLUDE \u003d \"javax.servlet.include.request_uri\"\n  private static org.apache.commons.logging.Log _log\n  static Class class$com$liferay$filters$compression$CompressionFilter [Synthetic]\n  public void init(javax.servlet.FilterConfig):\n    method-execution(void com.liferay.filters.compression.CompressionFilter.init(javax.servlet.FilterConfig))\n    |               RETURN   (line 80)\n    method-execution(void com.liferay.filters.compression.CompressionFilter.init(javax.servlet.FilterConfig))\n  end public void init(javax.servlet.FilterConfig)\n\n  public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException:\n    method-execution(void com.liferay.filters.compression.CompressionFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain))\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;   (line 86)\n    | method-call(boolean org.apache.commons.logging.Log.isDebugEnabled())\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled ()Z\n    | method-call(boolean org.apache.commons.logging.Log.isDebugEnabled())\n    |               IFEQ L1\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z   (line 87)\n    |               IFEQ L0\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;   (line 88)\n    |               LDC \"Compression is enabled\"\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.debug (Ljava/lang/Object;)V\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    |               GOTO L1\n    |           L0: GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;   (line 91)\n    |               LDC \"Compression is disabled\"\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.debug (Ljava/lang/Object;)V\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    |           L1: ALOAD_1     // Ljavax/servlet/ServletRequest; req   (line 95)\n    |               CHECKCAST javax.servlet.http.HttpServletRequest\n    |               ASTORE 4     // Ljavax/servlet/http/HttpServletRequest; httpReq\n    |               ALOAD_2     // Ljavax/servlet/ServletResponse; res   (line 96)\n    |               CHECKCAST javax.servlet.http.HttpServletResponse\n    |               ASTORE 5     // Ljavax/servlet/http/HttpServletResponse; httpRes\n    |               ALOAD 4     // Ljavax/servlet/http/HttpServletRequest; httpReq   (line 98)\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.ENCODING Ljava/lang/String;\n    | method-call(void javax.servlet.http.HttpServletRequest.setCharacterEncoding(java.lang.String))\n    | |             INVOKEINTERFACE javax.servlet.http.HttpServletRequest.setCharacterEncoding (Ljava/lang/String;)V\n    | method-call(void javax.servlet.http.HttpServletRequest.setCharacterEncoding(java.lang.String))\n    |               ALOAD 4     // Ljavax/servlet/http/HttpServletRequest; httpReq   (line 100)\n    | method-call(java.lang.String com.liferay.util.Http.getCompleteURL(javax.servlet.http.HttpServletRequest))\n    | |             INVOKESTATIC com.liferay.util.Http.getCompleteURL (Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;\n    | method-call(java.lang.String com.liferay.util.Http.getCompleteURL(javax.servlet.http.HttpServletRequest))\n    |               ASTORE 6     // Ljava/lang/String; completeURL\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z   (line 102)\n    |               IFEQ L3\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionFilter; this\n    |               ALOAD 4     // Ljavax/servlet/http/HttpServletRequest; httpReq\n    | method-call(boolean com.liferay.filters.compression.CompressionFilter.isCompress(javax.servlet.http.HttpServletRequest))\n    | |             INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isCompress (Ljavax/servlet/http/HttpServletRequest;)Z\n    | method-call(boolean com.liferay.filters.compression.CompressionFilter.isCompress(javax.servlet.http.HttpServletRequest))\n    |               IFEQ L3\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionFilter; this\n    |               ALOAD 4     // Ljavax/servlet/http/HttpServletRequest; httpReq\n    | method-call(boolean com.liferay.filters.compression.CompressionFilter.isInclude(javax.servlet.http.HttpServletRequest))\n    | |             INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isInclude (Ljavax/servlet/http/HttpServletRequest;)Z\n    | method-call(boolean com.liferay.filters.compression.CompressionFilter.isInclude(javax.servlet.http.HttpServletRequest))\n    |               IFNE L3\n    |               ALOAD 4     // Ljavax/servlet/http/HttpServletRequest; httpReq\n    | method-call(boolean com.liferay.util.BrowserSniffer.acceptsGzip(javax.servlet.http.HttpServletRequest))\n    | |             INVOKESTATIC com.liferay.util.BrowserSniffer.acceptsGzip (Ljavax/servlet/http/HttpServletRequest;)Z\n    | method-call(boolean com.liferay.util.BrowserSniffer.acceptsGzip(javax.servlet.http.HttpServletRequest))\n    |               IFEQ L3\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionFilter; this\n    |               ALOAD 4     // Ljavax/servlet/http/HttpServletRequest; httpReq\n    | method-call(boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered(javax.servlet.http.HttpServletRequest))\n    | |             INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered (Ljavax/servlet/http/HttpServletRequest;)Z\n    | method-call(boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered(javax.servlet.http.HttpServletRequest))\n    |               IFNE L3\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;   (line 106)\n    | method-call(boolean org.apache.commons.logging.Log.isDebugEnabled())\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled ()Z\n    | method-call(boolean org.apache.commons.logging.Log.isDebugEnabled())\n    |               IFEQ L2\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;   (line 107)\n    |               NEW java.lang.StringBuffer\n    |               DUP\n    |               LDC \"Compressing \"\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e(java.lang.String))\n    | |             INVOKESPECIAL java.lang.StringBuffer.\u003cinit\u003e (Ljava/lang/String;)V\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e(java.lang.String))\n    |               ALOAD 6     // Ljava/lang/String; completeURL\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.append (Ljava/lang/String;)Ljava/lang/StringBuffer;\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.toString ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.debug (Ljava/lang/Object;)V\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    |           L2: ALOAD 4     // Ljavax/servlet/http/HttpServletRequest; httpReq   (line 110)\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String;\n    |               GETSTATIC java.lang.Boolean.TRUE Ljava/lang/Boolean;\n    | method-call(void javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String, java.lang.Object))\n    | |             INVOKEINTERFACE javax.servlet.http.HttpServletRequest.setAttribute (Ljava/lang/String;Ljava/lang/Object;)V\n    | method-call(void javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String, java.lang.Object))\n    |               NEW com.liferay.filters.compression.CompressionResponse   (line 112)\n    |               DUP\n    |               ALOAD 5     // Ljavax/servlet/http/HttpServletResponse; httpRes\n    | constructor-call(void com.liferay.filters.compression.CompressionResponse.\u003cinit\u003e(javax.servlet.http.HttpServletResponse))\n    | |             INVOKESPECIAL com.liferay.filters.compression.CompressionResponse.\u003cinit\u003e (Ljavax/servlet/http/HttpServletResponse;)V\n    | constructor-call(void com.liferay.filters.compression.CompressionResponse.\u003cinit\u003e(javax.servlet.http.HttpServletResponse))\n    |               ASTORE 7     // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse\n    |               ALOAD_3     // Ljavax/servlet/FilterChain; chain   (line 115)\n    |               ALOAD_1     // Ljavax/servlet/ServletRequest; req\n    |               ALOAD 7     // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse\n    | method-call(void javax.servlet.FilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse))\n    | |             INVOKEINTERFACE javax.servlet.FilterChain.doFilter (Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V\n    | method-call(void javax.servlet.FilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse))\n    |               ALOAD 7     // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse   (line 117)\n    | method-call(void com.liferay.filters.compression.CompressionResponse.finishResponse())\n    | |             INVOKEVIRTUAL com.liferay.filters.compression.CompressionResponse.finishResponse ()V\n    | method-call(void com.liferay.filters.compression.CompressionResponse.finishResponse())\n    |               GOTO L5\n    |           L3: GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;   (line 120)\n    | method-call(boolean org.apache.commons.logging.Log.isDebugEnabled())\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled ()Z\n    | method-call(boolean org.apache.commons.logging.Log.isDebugEnabled())\n    |               IFEQ L4\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;   (line 121)\n    |               NEW java.lang.StringBuffer\n    |               DUP\n    |               LDC \"Not compressing \"\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e(java.lang.String))\n    | |             INVOKESPECIAL java.lang.StringBuffer.\u003cinit\u003e (Ljava/lang/String;)V\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e(java.lang.String))\n    |               ALOAD 6     // Ljava/lang/String; completeURL\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.append (Ljava/lang/String;)Ljava/lang/StringBuffer;\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.toString ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.debug (Ljava/lang/Object;)V\n    | method-call(void org.apache.commons.logging.Log.debug(java.lang.Object))\n    |           L4: ALOAD_3     // Ljavax/servlet/FilterChain; chain   (line 124)\n    |               ALOAD_1     // Ljavax/servlet/ServletRequest; req\n    |               ALOAD_2     // Ljavax/servlet/ServletResponse; res\n    | method-call(void javax.servlet.FilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse))\n    | |             INVOKEINTERFACE javax.servlet.FilterChain.doFilter (Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V\n    | method-call(void javax.servlet.FilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse))\n    |           L5: RETURN   (line 126)\n    method-execution(void com.liferay.filters.compression.CompressionFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain))\n  end public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException\n\n  public void destroy():\n    method-execution(void com.liferay.filters.compression.CompressionFilter.destroy())\n    |               RETURN   (line 129)\n    method-execution(void com.liferay.filters.compression.CompressionFilter.destroy())\n  end public void destroy()\n\n  protected boolean isAlreadyFiltered(javax.servlet.http.HttpServletRequest):\n    method-execution(boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered(javax.servlet.http.HttpServletRequest))\n    |               ALOAD_1     // Ljavax/servlet/http/HttpServletRequest; req   (line 132)\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String;\n    | method-call(java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute(java.lang.String))\n    | |             INVOKEINTERFACE javax.servlet.http.HttpServletRequest.getAttribute (Ljava/lang/String;)Ljava/lang/Object;\n    | method-call(java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute(java.lang.String))\n    |               IFNULL L0\n    |               ICONST_1   (line 133)\n    |               IRETURN\n    |           L0: ICONST_0   (line 136)\n    |               IRETURN\n    method-execution(boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered(javax.servlet.http.HttpServletRequest))\n  end protected boolean isAlreadyFiltered(javax.servlet.http.HttpServletRequest)\n\n  protected boolean isCompress(javax.servlet.http.HttpServletRequest):\n    method-execution(boolean com.liferay.filters.compression.CompressionFilter.isCompress(javax.servlet.http.HttpServletRequest))\n    |               ALOAD_1     // Ljavax/servlet/http/HttpServletRequest; req   (line 141)\n    |               LDC \"compress\"\n    |               ICONST_1\n    | method-call(boolean com.liferay.util.ParamUtil.get(javax.servlet.ServletRequest, java.lang.String, boolean))\n    | |             INVOKESTATIC com.liferay.util.ParamUtil.get (Ljavax/servlet/ServletRequest;Ljava/lang/String;Z)Z\n    | method-call(boolean com.liferay.util.ParamUtil.get(javax.servlet.ServletRequest, java.lang.String, boolean))\n    |               IFNE L0\n    |               ICONST_0   (line 142)\n    |               IRETURN\n    |           L0: ALOAD_1     // Ljavax/servlet/http/HttpServletRequest; req   (line 151)\n    |               LDC \"p_p_state\"\n    | method-call(java.lang.String com.liferay.util.ParamUtil.getString(javax.servlet.ServletRequest, java.lang.String))\n    | |             INVOKESTATIC com.liferay.util.ParamUtil.getString (Ljavax/servlet/ServletRequest;Ljava/lang/String;)Ljava/lang/String;\n    | method-call(java.lang.String com.liferay.util.ParamUtil.getString(javax.servlet.ServletRequest, java.lang.String))\n    |               ASTORE_2     // Ljava/lang/String; windowState\n    |               ALOAD_2     // Ljava/lang/String; windowState   (line 153)\n    |               LDC \"exclusive\"\n    | method-call(boolean java.lang.String.equals(java.lang.Object))\n    | |             INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    | method-call(boolean java.lang.String.equals(java.lang.Object))\n    |               IFEQ L1\n    |               ICONST_0   (line 154)\n    |               IRETURN\n    |           L1: ICONST_1   (line 157)\n    |               IRETURN\n    method-execution(boolean com.liferay.filters.compression.CompressionFilter.isCompress(javax.servlet.http.HttpServletRequest))\n  end protected boolean isCompress(javax.servlet.http.HttpServletRequest)\n\n  protected boolean isInclude(javax.servlet.http.HttpServletRequest):\n    method-execution(boolean com.liferay.filters.compression.CompressionFilter.isInclude(javax.servlet.http.HttpServletRequest))\n    |               ALOAD_1     // Ljavax/servlet/http/HttpServletRequest; req   (line 163)\n    |               LDC \"javax.servlet.include.request_uri\"\n    | method-call(java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute(java.lang.String))\n    | |             INVOKEINTERFACE javax.servlet.http.HttpServletRequest.getAttribute (Ljava/lang/String;)Ljava/lang/Object;\n    | method-call(java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute(java.lang.String))\n    |               CHECKCAST java.lang.String\n    |               ASTORE_2     // Ljava/lang/String; uri\n    |               ALOAD_2     // Ljava/lang/String; uri   (line 165)\n    |               IFNONNULL L0\n    |               ICONST_0   (line 166)\n    |               IRETURN\n    |           L0: ICONST_1   (line 169)\n    |               IRETURN\n    method-execution(boolean com.liferay.filters.compression.CompressionFilter.isInclude(javax.servlet.http.HttpServletRequest))\n  end protected boolean isInclude(javax.servlet.http.HttpServletRequest)\n\n  static Class class(String, boolean):\n    method-execution(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    | catch java.lang.ClassNotFoundException -\u003e E0\n    | |             ALOAD_0   (line 0)\n    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))\n    | | |           INVOKESTATIC java.lang.Class.forName (Ljava/lang/String;)Ljava/lang/Class;\n    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))\n    | |             ILOAD_1\n    | |             IFNE L0\n    | | method-call(java.lang.Class java.lang.Class.getComponentType())\n    | | |           INVOKEVIRTUAL java.lang.Class.getComponentType ()Ljava/lang/Class;\n    | | method-call(java.lang.Class java.lang.Class.getComponentType())\n    | |         L0: ARETURN\n    | catch java.lang.ClassNotFoundException -\u003e E0\n    |           E0: NEW java.lang.NoClassDefFoundError\n    |               DUP_X1\n    | constructor-call(void java.lang.NoClassDefFoundError.\u003cinit\u003e())\n    | |             INVOKESPECIAL java.lang.NoClassDefFoundError.\u003cinit\u003e ()V\n    | constructor-call(void java.lang.NoClassDefFoundError.\u003cinit\u003e())\n    | method-call(java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable))\n    | |             INVOKEVIRTUAL java.lang.Throwable.initCause (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n    | method-call(java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable))\n    |               ATHROW\n    method-execution(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n  end static Class class(String, boolean)\n\n  public void \u003cinit\u003e():\n                    ALOAD_0     // Lcom/liferay/filters/compression/CompressionFilter; this   (line 52)\n                    INVOKESPECIAL java.lang.Object.\u003cinit\u003e ()V\n    constructor-execution(void com.liferay.filters.compression.CompressionFilter.\u003cinit\u003e())\n    |               RETURN\n    constructor-execution(void com.liferay.filters.compression.CompressionFilter.\u003cinit\u003e())\n  end public void \u003cinit\u003e()\n\n  private static final void \u003cclinit\u003e():\n    staticinitialization(void com.liferay.filters.compression.CompressionFilter.\u003cclinit\u003e())\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;   (line 54)\n    |               DUP\n    |               IFNONNULL L0\n    |               POP\n    |               LDC \"[Lcom.liferay.filters.compression.CompressionFilter;\"\n    |               ICONST_0\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    | |             INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class (Ljava/lang/String;Z)Ljava/lang/Class;\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    |               DUP\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;\n    | method-call(java.lang.String java.lang.Class.getName())\n    | |         L0: INVOKEVIRTUAL java.lang.Class.getName ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.Class.getName())\n    | method-call(java.lang.String com.liferay.util.SystemProperties.get(java.lang.String))\n    | |             INVOKESTATIC com.liferay.util.SystemProperties.get (Ljava/lang/String;)Ljava/lang/String;\n    | method-call(java.lang.String com.liferay.util.SystemProperties.get(java.lang.String))\n    |               ICONST_1\n    | method-call(boolean com.liferay.util.GetterUtil.getBoolean(java.lang.String, boolean))\n    | |             INVOKESTATIC com.liferay.util.GetterUtil.getBoolean (Ljava/lang/String;Z)Z\n    | method-call(boolean com.liferay.util.GetterUtil.getBoolean(java.lang.String, boolean))\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z   (line 62)\n    |               IFEQ L3\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isJBoss())\n    | |             INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJBoss ()Z   (line 63)\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isJBoss())\n    |               IFNE L1\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isJetty())\n    | |             INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJetty ()Z\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isJetty())\n    |               IFNE L1\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isJOnAS())\n    | |             INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJOnAS ()Z\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isJOnAS())\n    |               IFNE L1\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isOC4J())\n    | |             INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isOC4J ()Z\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isOC4J())\n    |               IFNE L1\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isOrion())\n    | |             INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isOrion ()Z\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isOrion())\n    |               IFNE L1\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isTomcat())\n    | |             INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isTomcat ()Z\n    | method-call(boolean com.liferay.portal.kernel.util.ServerDetector.isTomcat())\n    |               IFEQ L2\n    |           L1: ICONST_1   (line 67)\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z\n    |               GOTO L3\n    |           L2: ICONST_0   (line 70)\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z\n    |           L3: NEW java.lang.StringBuffer   (line 75)\n    |               DUP\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e())\n    | |             INVOKESPECIAL java.lang.StringBuffer.\u003cinit\u003e ()V\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e())\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;\n    |               DUP\n    |               IFNONNULL L4\n    |               POP\n    |               LDC \"[Lcom.liferay.filters.compression.CompressionFilter;\"\n    |               ICONST_0\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    | |             INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class (Ljava/lang/String;Z)Ljava/lang/Class;\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    |               DUP\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;\n    | method-call(java.lang.String java.lang.Class.getName())\n    | |         L4: INVOKEVIRTUAL java.lang.Class.getName ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.Class.getName())\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.append (Ljava/lang/String;)Ljava/lang/StringBuffer;\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    |               LDC \".encoding\"\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.append (Ljava/lang/String;)Ljava/lang/StringBuffer;\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.toString ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    | method-call(java.lang.String com.liferay.util.SystemProperties.get(java.lang.String))\n    | |             INVOKESTATIC com.liferay.util.SystemProperties.get (Ljava/lang/String;)Ljava/lang/String;\n    | method-call(java.lang.String com.liferay.util.SystemProperties.get(java.lang.String))\n    |               LDC \"UTF-8\"\n    | method-call(java.lang.String com.liferay.util.GetterUtil.getString(java.lang.String, java.lang.String))\n    | |             INVOKESTATIC com.liferay.util.GetterUtil.getString (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n    | method-call(java.lang.String com.liferay.util.GetterUtil.getString(java.lang.String, java.lang.String))\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.ENCODING Ljava/lang/String;\n    |               NEW java.lang.StringBuffer   (line 173)\n    |               DUP\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e())\n    | |             INVOKESPECIAL java.lang.StringBuffer.\u003cinit\u003e ()V\n    | constructor-call(void java.lang.StringBuffer.\u003cinit\u003e())\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;\n    |               DUP\n    |               IFNONNULL L5\n    |               POP\n    |               LDC \"[Lcom.liferay.filters.compression.CompressionFilter;\"\n    |               ICONST_0\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    | |             INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class (Ljava/lang/String;Z)Ljava/lang/Class;\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    |               DUP\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.Object))\n    | |         L5: INVOKEVIRTUAL java.lang.StringBuffer.append (Ljava/lang/Object;)Ljava/lang/StringBuffer;\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.Object))\n    |               LDC \"_ALREADY_FILTERED\"\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.append (Ljava/lang/String;)Ljava/lang/StringBuffer;\n    | method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String))\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    | |             INVOKEVIRTUAL java.lang.StringBuffer.toString ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.StringBuffer.toString())\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String;\n    |               GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;   (line 180)\n    |               DUP\n    |               IFNONNULL L6\n    |               POP\n    |               LDC \"[Lcom.liferay.filters.compression.CompressionFilter;\"\n    |               ICONST_0\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    | |             INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class (Ljava/lang/String;Z)Ljava/lang/Class;\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionFilter.class(java.lang.String, boolean))\n    |               DUP\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class;\n    | method-call(org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog(java.lang.Class))\n    | |         L6: INVOKESTATIC org.apache.commons.logging.LogFactory.getLog (Ljava/lang/Class;)Lorg/apache/commons/logging/Log;\n    | method-call(org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog(java.lang.Class))\n    |               PUTSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log;\n    |               RETURN\n    staticinitialization(void com.liferay.filters.compression.CompressionFilter.\u003cclinit\u003e())\n  end private static final void \u003cclinit\u003e()\nend public class com.liferay.filters.compression.CompressionFilter\n\n\t\nException thrown from AspectJ 1.5.2\n\nThis might be logged as a bug already -- find current bugs at\n  http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\nBugs for exceptions thrown have titles File:line from the top stack, \ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nat http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nUnhandled kind of new   -1: impdep1[254](1)\n\nwhen implementing on shadow constructor-call(void java.lang.NoClassDefFoundError.\u003cinit\u003e())\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[null] #Files\u003d1\nUnhandled kind of new   -1: impdep1[254](1)\njava.lang.RuntimeException: Unhandled kind of new   -1: impdep1[254](1)\n\tat org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup(BcelShadow.java:226)\n\tat org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:284)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:470)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2825)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:502)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:321)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:192)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:367)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:246)\n\tat org.aspectj.tools.ajc.Main.main(Main.java:86)\n\ntrouble in: \npublic class com.liferay.filters.compression.CompressionStream extends javax.servlet.ServletOutputStream:\n  private static final String _CONTENT_ENCODING \u003d \"Content-Encoding\"\n  private static final String _GZIP \u003d \"gzip\"\n  private static org.apache.commons.logging.Log _log\n  private javax.servlet.http.HttpServletResponse _res\n  private javax.servlet.ServletOutputStream _output\n  private java.io.OutputStream _bufferedOutput\n  private boolean _closed\n  static Class class$com$liferay$filters$compression$CompressionStream [Synthetic]\n  public void close() throws java.io.IOException:\n    method-execution(void com.liferay.filters.compression.CompressionStream.close())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 56)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               IFEQ L0\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    | |             INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf ()Lcom/myco/error/ThrowablesAspect;\n    | |             INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 ()V\n    | |             NEW java.io.IOException\n    | |             DUP\n    | |             INVOKESPECIAL java.io.IOException.\u003cinit\u003e ()V   (line 57)\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    |               ATHROW\n    |           L0: ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 60)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    |               INSTANCEOF java.io.ByteArrayOutputStream\n    |               IFEQ L1\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 61)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    |               CHECKCAST java.io.ByteArrayOutputStream\n    |               ASTORE_1     // Ljava/io/ByteArrayOutputStream; baos\n    |               NEW java.io.ByteArrayOutputStream   (line 63)\n    |               DUP\n    | constructor-call(void java.io.ByteArrayOutputStream.\u003cinit\u003e())\n    | |             INVOKESPECIAL java.io.ByteArrayOutputStream.\u003cinit\u003e ()V\n    | constructor-call(void java.io.ByteArrayOutputStream.\u003cinit\u003e())\n    |               ASTORE_2     // Ljava/io/ByteArrayOutputStream; compressedContent\n    |               NEW java.util.zip.GZIPOutputStream   (line 66)\n    |               DUP\n    |               ALOAD_2     // Ljava/io/ByteArrayOutputStream; compressedContent\n    | constructor-call(void java.util.zip.GZIPOutputStream.\u003cinit\u003e(java.io.OutputStream))\n    | |             INVOKESPECIAL java.util.zip.GZIPOutputStream.\u003cinit\u003e (Ljava/io/OutputStream;)V\n    | constructor-call(void java.util.zip.GZIPOutputStream.\u003cinit\u003e(java.io.OutputStream))\n    |               ASTORE_3     // Ljava/util/zip/GZIPOutputStream; gzipOutput\n    |               ALOAD_3     // Ljava/util/zip/GZIPOutputStream; gzipOutput   (line 69)\n    |               ALOAD_1     // Ljava/io/ByteArrayOutputStream; baos\n    | method-call(byte[] java.io.ByteArrayOutputStream.toByteArray())\n    | |             INVOKEVIRTUAL java.io.ByteArrayOutputStream.toByteArray ()[B\n    | method-call(byte[] java.io.ByteArrayOutputStream.toByteArray())\n    | method-call(void java.util.zip.GZIPOutputStream.write(byte[]))\n    | |             INVOKEVIRTUAL java.util.zip.GZIPOutputStream.write ([B)V\n    | method-call(void java.util.zip.GZIPOutputStream.write(byte[]))\n    |               ALOAD_3     // Ljava/util/zip/GZIPOutputStream; gzipOutput   (line 70)\n    | method-call(void java.util.zip.GZIPOutputStream.finish())\n    | |             INVOKEVIRTUAL java.util.zip.GZIPOutputStream.finish ()V\n    | method-call(void java.util.zip.GZIPOutputStream.finish())\n    |               ALOAD_2     // Ljava/io/ByteArrayOutputStream; compressedContent   (line 72)\n    | method-call(byte[] java.io.ByteArrayOutputStream.toByteArray())\n    | |             INVOKEVIRTUAL java.io.ByteArrayOutputStream.toByteArray ()[B\n    | method-call(byte[] java.io.ByteArrayOutputStream.toByteArray())\n    |               ASTORE 4     // [B compressedBytes\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 74)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse;\n    |               ALOAD 4     // [B compressedBytes\n    |               ARRAYLENGTH\n    | method-call(void javax.servlet.http.HttpServletResponse.setContentLength(int))\n    | |             INVOKEINTERFACE javax.servlet.http.HttpServletResponse.setContentLength (I)V\n    | method-call(void javax.servlet.http.HttpServletResponse.setContentLength(int))\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 75)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse;\n    |               LDC \"Content-Encoding\"\n    |               LDC \"gzip\"\n    | method-call(void javax.servlet.http.HttpServletResponse.addHeader(java.lang.String, java.lang.String))\n    | |             INVOKEINTERFACE javax.servlet.http.HttpServletResponse.addHeader (Ljava/lang/String;Ljava/lang/String;)V\n    | method-call(void javax.servlet.http.HttpServletResponse.addHeader(java.lang.String, java.lang.String))\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 77)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream;\n    |               ALOAD 4     // [B compressedBytes\n    | method-call(void javax.servlet.ServletOutputStream.write(byte[]))\n    | |             INVOKEVIRTUAL javax.servlet.ServletOutputStream.write ([B)V\n    | method-call(void javax.servlet.ServletOutputStream.write(byte[]))\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 78)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream;\n    | method-call(void javax.servlet.ServletOutputStream.flush())\n    | |             INVOKEVIRTUAL javax.servlet.ServletOutputStream.flush ()V\n    | method-call(void javax.servlet.ServletOutputStream.flush())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 79)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream;\n    | method-call(void javax.servlet.ServletOutputStream.close())\n    | |             INVOKEVIRTUAL javax.servlet.ServletOutputStream.close ()V\n    | method-call(void javax.servlet.ServletOutputStream.close())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 81)\n    |               ICONST_1\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               GOTO L2\n    |           L1: ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 83)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    |               INSTANCEOF java.util.zip.GZIPOutputStream\n    |               IFEQ L2\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 84)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    |               CHECKCAST java.util.zip.GZIPOutputStream\n    |               ASTORE_1     // Ljava/util/zip/GZIPOutputStream; gzipOutput\n    |               ALOAD_1     // Ljava/util/zip/GZIPOutputStream; gzipOutput   (line 86)\n    | method-call(void java.util.zip.GZIPOutputStream.finish())\n    | |             INVOKEVIRTUAL java.util.zip.GZIPOutputStream.finish ()V\n    | method-call(void java.util.zip.GZIPOutputStream.finish())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 88)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream;\n    | method-call(void javax.servlet.ServletOutputStream.flush())\n    | |             INVOKEVIRTUAL javax.servlet.ServletOutputStream.flush ()V\n    | method-call(void javax.servlet.ServletOutputStream.flush())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 89)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream;\n    | method-call(void javax.servlet.ServletOutputStream.close())\n    | |             INVOKEVIRTUAL javax.servlet.ServletOutputStream.close ()V\n    | method-call(void javax.servlet.ServletOutputStream.close())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 91)\n    |               ICONST_1\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |           L2: RETURN   (line 93)\n    method-execution(void com.liferay.filters.compression.CompressionStream.close())\n  end public void close() throws java.io.IOException\n\n  public void flush() throws java.io.IOException:\n    method-execution(void com.liferay.filters.compression.CompressionStream.flush())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 96)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               IFEQ L0\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    | |             INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf ()Lcom/myco/error/ThrowablesAspect;\n    | |             INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 ()V\n    | |             NEW java.io.IOException\n    | |             DUP\n    | |             INVOKESPECIAL java.io.IOException.\u003cinit\u003e ()V   (line 97)\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    |               ATHROW\n    |           L0: ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 100)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    | method-call(void java.io.OutputStream.flush())\n    | |             INVOKEVIRTUAL java.io.OutputStream.flush ()V\n    | method-call(void java.io.OutputStream.flush())\n    |               RETURN   (line 101)\n    method-execution(void com.liferay.filters.compression.CompressionStream.flush())\n  end public void flush() throws java.io.IOException\n\n  public void write(int) throws java.io.IOException:\n    method-execution(void com.liferay.filters.compression.CompressionStream.write(int))\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 104)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               IFEQ L0\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    | |             INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf ()Lcom/myco/error/ThrowablesAspect;\n    | |             INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 ()V\n    | |             NEW java.io.IOException\n    | |             DUP\n    | |             INVOKESPECIAL java.io.IOException.\u003cinit\u003e ()V   (line 105)\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    |               ATHROW\n    |           L0: ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 112)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    |               ILOAD_1     // I b\n    |               I2B\n    | method-call(void java.io.OutputStream.write(int))\n    | |             INVOKEVIRTUAL java.io.OutputStream.write (I)V\n    | method-call(void java.io.OutputStream.write(int))\n    |               RETURN   (line 113)\n    method-execution(void com.liferay.filters.compression.CompressionStream.write(int))\n  end public void write(int) throws java.io.IOException\n\n  public void write(byte[]) throws java.io.IOException:\n    method-execution(void com.liferay.filters.compression.CompressionStream.write(byte[]))\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 116)\n    |               ALOAD_1     // [B b\n    |               ICONST_0\n    |               ALOAD_1     // [B b\n    |               ARRAYLENGTH\n    | method-call(void com.liferay.filters.compression.CompressionStream.write(byte[], int, int))\n    | |             INVOKEVIRTUAL com.liferay.filters.compression.CompressionStream.write ([BII)V\n    | method-call(void com.liferay.filters.compression.CompressionStream.write(byte[], int, int))\n    |               RETURN   (line 117)\n    method-execution(void com.liferay.filters.compression.CompressionStream.write(byte[]))\n  end public void write(byte[]) throws java.io.IOException\n\n  public void write(byte[], int, int) throws java.io.IOException:\n    method-execution(void com.liferay.filters.compression.CompressionStream.write(byte[], int, int))\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 120)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               IFEQ L0\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    | |             INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf ()Lcom/myco/error/ThrowablesAspect;\n    | |             INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 ()V\n    | |             NEW java.io.IOException\n    | |             DUP\n    | |             INVOKESPECIAL java.io.IOException.\u003cinit\u003e ()V   (line 121)\n    | constructor-call(void java.io.IOException.\u003cinit\u003e())\n    |               ATHROW\n    | catch java.io.IOException -\u003e E0\n    | |         L0: ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 129)\n    | |             GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    | |             ALOAD_1     // [B b\n    | |             ILOAD_2     // I off\n    | |             ILOAD_3     // I len\n    | | method-call(void java.io.OutputStream.write(byte[], int, int))\n    | | |           INVOKEVIRTUAL java.io.OutputStream.write ([BII)V\n    | | method-call(void java.io.OutputStream.write(byte[], int, int))\n    | catch java.io.IOException -\u003e E0\n    |               GOTO L1\n    |           E0: ASTORE 4     // Ljava/io/IOException; ioe   (line 131)\n    |               GETSTATIC com.liferay.filters.compression.CompressionStream._log Lorg/apache/commons/logging/Log;   (line 132)\n    |               ALOAD 4     // Ljava/io/IOException; ioe\n    | method-call(java.lang.String java.io.IOException.getMessage())\n    | |             INVOKEVIRTUAL java.io.IOException.getMessage ()Ljava/lang/String;\n    | method-call(java.lang.String java.io.IOException.getMessage())\n    | method-call(void org.apache.commons.logging.Log.warn(java.lang.Object))\n    | |             INVOKEINTERFACE org.apache.commons.logging.Log.warn (Ljava/lang/Object;)V\n    | method-call(void org.apache.commons.logging.Log.warn(java.lang.Object))\n    |           L1: RETURN   (line 134)\n    method-execution(void com.liferay.filters.compression.CompressionStream.write(byte[], int, int))\n  end public void write(byte[], int, int) throws java.io.IOException\n\n  public boolean closed():\n    method-execution(boolean com.liferay.filters.compression.CompressionStream.closed())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 137)\n    |               GETFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               IRETURN\n    method-execution(boolean com.liferay.filters.compression.CompressionStream.closed())\n  end public boolean closed()\n\n  public void reset():\n    method-execution(void com.liferay.filters.compression.CompressionStream.reset())\n    |               RETURN   (line 141)\n    method-execution(void com.liferay.filters.compression.CompressionStream.reset())\n  end public void reset()\n\n  static Class class(String, boolean):\n    method-execution(java.lang.Class com.liferay.filters.compression.CompressionStream.class(java.lang.String, boolean))\n    | catch java.lang.ClassNotFoundException -\u003e E0\n    | |             ALOAD_0   (line 0)\n    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))\n    | | |           INVOKESTATIC java.lang.Class.forName (Ljava/lang/String;)Ljava/lang/Class;\n    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))\n    | |             ILOAD_1\n    | |             IFNE L0\n    | | method-call(java.lang.Class java.lang.Class.getComponentType())\n    | | |           INVOKEVIRTUAL java.lang.Class.getComponentType ()Ljava/lang/Class;\n    | | method-call(java.lang.Class java.lang.Class.getComponentType())\n    | |         L0: ARETURN\n    | catch java.lang.ClassNotFoundException -\u003e E0\n    |           E0: NEW java.lang.NoClassDefFoundError\n    |               DUP_X1\n    | constructor-call(void java.lang.NoClassDefFoundError.\u003cinit\u003e())\n    | |             INVOKESPECIAL java.lang.NoClassDefFoundError.\u003cinit\u003e ()V\n    | constructor-call(void java.lang.NoClassDefFoundError.\u003cinit\u003e())\n    | method-call(java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable))\n    | |             INVOKEVIRTUAL java.lang.Throwable.initCause (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n    | method-call(java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable))\n    |               ATHROW\n    method-execution(java.lang.Class com.liferay.filters.compression.CompressionStream.class(java.lang.String, boolean))\n  end static Class class(String, boolean)\n\n  private final void this():\n    method-execution(void com.liferay.filters.compression.CompressionStream.this())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 149)\n    |               ACONST_NULL\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse;\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 150)\n    |               ACONST_NULL\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream;\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 151)\n    |               ACONST_NULL\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 152)\n    |               ICONST_0\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               RETURN\n    method-execution(void com.liferay.filters.compression.CompressionStream.this())\n  end private final void this()\n\n  public void \u003cinit\u003e(javax.servlet.http.HttpServletResponse) throws java.io.IOException:\n                    ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 47)\n                    INVOKESPECIAL javax.servlet.ServletOutputStream.\u003cinit\u003e ()V\n    constructor-execution(void com.liferay.filters.compression.CompressionStream.\u003cinit\u003e(javax.servlet.http.HttpServletResponse))\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this\n    | method-call(void com.liferay.filters.compression.CompressionStream.this())\n    | |             INVOKESPECIAL com.liferay.filters.compression.CompressionStream.this ()V\n    | method-call(void com.liferay.filters.compression.CompressionStream.this())\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 49)\n    |               ALOAD_1     // Ljavax/servlet/http/HttpServletResponse; res\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse;\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 50)\n    |               ALOAD_1     // Ljavax/servlet/http/HttpServletResponse; res\n    | method-call(javax.servlet.ServletOutputStream javax.servlet.http.HttpServletResponse.getOutputStream())\n    | |             INVOKEINTERFACE javax.servlet.http.HttpServletResponse.getOutputStream ()Ljavax/servlet/ServletOutputStream;\n    | method-call(javax.servlet.ServletOutputStream javax.servlet.http.HttpServletResponse.getOutputStream())\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream;\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 51)\n    |               NEW java.io.ByteArrayOutputStream\n    |               DUP\n    | constructor-call(void java.io.ByteArrayOutputStream.\u003cinit\u003e())\n    | |             INVOKESPECIAL java.io.ByteArrayOutputStream.\u003cinit\u003e ()V\n    | constructor-call(void java.io.ByteArrayOutputStream.\u003cinit\u003e())\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream;\n    |               ALOAD_0     // Lcom/liferay/filters/compression/CompressionStream; this   (line 52)\n    |               ICONST_0\n    |               PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z\n    |               RETURN   (line 53)\n    constructor-execution(void com.liferay.filters.compression.CompressionStream.\u003cinit\u003e(javax.servlet.http.HttpServletResponse))\n  end public void \u003cinit\u003e(javax.servlet.http.HttpServletResponse) throws java.io.IOException\n\n  private static final void \u003cclinit\u003e():\n    staticinitialization(void com.liferay.filters.compression.CompressionStream.\u003cclinit\u003e())\n    |               GETSTATIC com.liferay.filters.compression.CompressionStream.class$com$liferay$filters$compression$CompressionStream Ljava/lang/Class;   (line 147)\n    |               DUP\n    |               IFNONNULL L0\n    |               POP\n    |               LDC \"[Lcom.liferay.filters.compression.CompressionStream;\"\n    |               ICONST_0\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionStream.class(java.lang.String, boolean))\n    | |             INVOKESTATIC com.liferay.filters.compression.CompressionStream.class (Ljava/lang/String;Z)Ljava/lang/Class;\n    | method-call(java.lang.Class com.liferay.filters.compression.CompressionStream.class(java.lang.String, boolean))\n    |               DUP\n    |               PUTSTATIC com.liferay.filters.compression.CompressionStream.class$com$liferay$filters$compression$CompressionStream Ljava/lang/Class;\n    | method-call(org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog(java.lang.Class))\n    | |         L0: INVOKESTATIC org.apache.commons.logging.LogFactory.getLog (Ljava/lang/Class;)Lorg/apache/commons/logging/Log;\n    | method-call(org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog(java.lang.Class))\n    |               PUTSTATIC com.liferay.filters.compression.CompressionStream._log Lorg/apache/commons/logging/Log;\n    |               RETURN\n    staticinitialization(void com.liferay.filters.compression.CompressionStream.\u003cclinit\u003e())\n  end private static final void \u003cclinit\u003e()\nend public class com.liferay.filters.compression.CompressionStream\n\n\t\nException thrown from AspectJ 1.5.2\n\nThis might be logged as a bug already -- find current bugs at\n  http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\nBugs for exceptions thrown have titles File:line from the top stack, \ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nat http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nUnhandled kind of new   -1: impdep1[254](1)\n\nwhen implementing on shadow constructor-call(void java.lang.NoClassDefFoundError.\u003cinit\u003e())\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[null] #Files\u003d1\nUnhandled kind of new   -1: impdep1[254](1)\njava.lang.RuntimeException: Unhandled kind of new   -1: impdep1[254](1)\n\tat org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup(BcelShadow.java:226)\n\tat org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:284)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:470)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2825)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:502)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:321)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:192)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:367)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:246)\n\tat org.aspectj.tools.ajc.Main.main(Main.java:86)",
    "Created an attachment (id\u003d67138)\nReproducible bug test case\n\nTest case to reproduce the bug"
  ],
  "commentCreationDates": [
    "2007-05-14T23:02:02+02:00",
    "2007-05-14T23:03:38+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "Unhandled kind of new   -1: impdep1[254](1)",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup",
          "source": "BcelShadow.java:226"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.prepareForMungers",
          "source": "BcelShadow.java:284"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Shadow.java:470"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "BcelClassWeaver.java:2825"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:502"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:115"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1574"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1525"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1305"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1127"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:321"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:192"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:887"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:244"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:163"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:112"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:60"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:367"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:246"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:86"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "186884",
      "date": "2007-05-14T23:02:02+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    },
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "Unhandled kind of new   -1: impdep1[254](1)",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup",
          "source": "BcelShadow.java:226"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelShadow.prepareForMungers",
          "source": "BcelShadow.java:284"
        },
        {
          "method": "org.aspectj.weaver.Shadow.implement",
          "source": "Shadow.java:470"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.implement",
          "source": "BcelClassWeaver.java:2825"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:502"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelClassWeaver.weave",
          "source": "BcelClassWeaver.java:115"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1574"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump",
          "source": "BcelWeaver.java:1525"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify",
          "source": "BcelWeaver.java:1305"
        },
        {
          "method": "org.aspectj.weaver.bcel.BcelWeaver.weave",
          "source": "BcelWeaver.java:1127"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave",
          "source": "AjCompilerAdapter.java:321"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling",
          "source": "AjCompilerAdapter.java:192"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0",
          "source": "CompilerAdapter.aj:70"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:367"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:887"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:244"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild",
          "source": "AjBuildManager.java:163"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.doCommand",
          "source": "AjdtCommand.java:112"
        },
        {
          "method": "org.aspectj.ajdt.ajc.AjdtCommand.runCommand",
          "source": "AjdtCommand.java:60"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.run",
          "source": "Main.java:367"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.runMain",
          "source": "Main.java:246"
        },
        {
          "method": "org.aspectj.tools.ajc.Main.main",
          "source": "Main.java:86"
        }
      ],
      "number": 1,
      "commentIndex": 0,
      "bugId": "186884",
      "date": "2007-05-14T23:02:02+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "normal"
    }
  ],
  "groupId": "186884",
  "bugId": "186884",
  "date": "2007-05-14T23:02:02+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "normal"
}