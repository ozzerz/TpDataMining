{
  "comments": [
    "Got this NPE while starting.\n\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Jan 30, 2004 14:35:21.736\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.NullPointerException\n\tat\norg.eclipse.core.runtime.adaptor.EclipseBundleData.generateManifest(EclipseBundleData.java:231)\n\tat\norg.eclipse.core.runtime.adaptor.EclipseBundleData.loadManifest(EclipseBundleData.java:207)\n\tat\norg.eclipse.core.runtime.adaptor.CachedManifest.getManifest(CachedManifest.java:31)\n\tat org.eclipse.core.runtime.adaptor.CachedManifest.get(CachedManifest.java:66)\n\tat\norg.eclipse.osgi.internal.resolver.StateBuilder.createBundleDescription(StateBuilder.java:34)\n\tat\norg.eclipse.osgi.internal.resolver.StateObjectFactoryImpl.createBundleDescription(StateObjectFactoryImpl.java:21)\n\tat\norg.eclipse.core.runtime.adaptor.EclipseAdaptor.createStateManager(EclipseAdaptor.java:88)\n\tat\norg.eclipse.osgi.framework.internal.defaultadaptor.DefaultAdaptor.initialize(DefaultAdaptor.java:112)\n\tat\norg.eclipse.osgi.framework.internal.core.Framework.initialize(Framework.java:117)\n\tat org.eclipse.osgi.framework.internal.core.Framework.\u003cinit\u003e(Framework.java:96)\n\tat org.eclipse.osgi.framework.internal.core.OSGi.createFramework(OSGi.java:90)\n\tat org.eclipse.osgi.framework.internal.core.OSGi.\u003cinit\u003e(OSGi.java:31)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:84)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:279)\n\tat org.eclipse.core.launcher.Main.run(Main.java:742)\n\tat org.eclipse.core.launcher.Main.main(Main.java:581)",
    "Build is i20040130\n\nThe execution path below shows that before an instance for the plugin converter\nis created, it is possible that we try to use the default instance (which is\nstill null).\n",
    "I finally reproduced this bug here is a scenario:\n- delete the .state file\n- delete a manifest.mf from the .config area\n\nWhen the state is missing (EclipseAdaptor#createStateManager()), it is \nrecreated from the bundle data. More precisely, the creation of the bundle \ndescription looks into the manifests to get info like bundle_host, imports, etc \nwhich triggers the loading of the manifest and its eventual creation if not \navailable. \n\nSince when this happens, the framework has not been fully initialized, the \nPluginConverter has not been initialized and ends up in the NPE we see.",
    "Pascal seems to know what is going on here...",
    "To clarify: this bug only occurs if the .state file has been deleted and a\n*generated* manifest has been deleted.\nI think this is really unlikely to happen and if the user is messing the\nconfiguration area by hand, we can not handle it.\nThe question then, is does this really worth the pain?\n\nIf we wanted to fix that, it would require the creation of the bundleData (in\ngetInstalledBundle) to check if the generated manifest is still around. Note\nthat now we are already checking if the folder/file containing the bundle has\nchanged. This would put yet an other check on the way of a fast startup.\n\nAside from this, an exploration of the code showed that the state and the\neclipse bundle data were created really early (in the adaptor initialization),\nand it is not really necessary. Moreover, it shows that there are path through\nwhich getInstalledBundles can be called twice and does the work twice !\n\nMoving to Tom for a potential reorganisation of the framework startup sequence.",
    "There may be a need for some restructuring in the code with respect to when the \nstate is created.  And as Pascal points out Adaptor.getInstalledBundles() may \nget called twice and it does the actual work twice.\n\nBut I cannot see a way to get the state to be created late enough so that we \ncan get the PluginConverter the system bundle context before the state is \ncreated.  The PluginConverter is created in EclipseAdaptor.frameworkStart() \nwhich is called when the system bundle is started.  There are too many areas \nthat the state is used during initialization and startup before the system \nbundle is actually started.  One place it is used that is unavoidable is when  \nthe resolved state is set for all of the installed bundles.  This must happen \nbefore the system bundle is started.\n\nEven if we could give the PluginConverter the context before the system bundle \nwas started, no xml parser would be registered until \nEclipseAdaptor.frameworkStart() was called or worse the xerces bundle.  So the \nPluginConverter would be useless until an XML parser was registered.",
    "Ok, so I am interesting in working this code to a) improve performance both \nspeed and if possible space (e.g, flushing the state) and b) \nunderstandability/maintainability.  Right now it is too subtle and you have to \nread alot of code for a long time before you can really understand what is \ngoing on.\n\nIdeally the bundle data would be read first.  Assuming it is all ok, the state \ncan be read and the system started.  If a bundle data is bad, toss it and and \ninc the timestamp.  When the state is loaded it will see it does not match and \nthe state will be rebuilt/reresolved.  Similarly for the registry.\n",
    "Changed title to better reflect what this defect is addressing.",
    "We should do this sooner rather than later or defer.",
    "Will not get to this in time for code freeze.",
    "*** Bug 60875 has been marked as a duplicate of this bug. ***",
    "later",
    "The startup sequence has been restructured to load the state as late as \npossible.  The Framework will not access the state until after \nFrameworkAdaptor.frameworkStart method is called.  At this point it accesses \nthe state to set the resolved status of the installed bundles.\n\nThis fixes the following problems that are mentioned in this bug:\n1)  getInstalledBundles is only called once by the framework.  Before there \nwas a possiblility of calling it twice if we detected a currupt or missing \nstate cache.\n2)  Ensures that the adaptor is properly initialized before accessing the \nstate the first time.  This allows any missing manifest files to be \nregenerated using the converter.\n\nClosing as fixed.",
    "*** Bug 191487 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2004-01-30T20:02:09+01:00",
    "2004-01-30T20:08:59+01:00",
    "2004-02-10T19:39:20+01:00",
    "2004-03-16T06:03:33+01:00",
    "2004-03-17T19:58:52+01:00",
    "2004-03-17T20:44:34+01:00",
    "2004-03-18T03:38:25+01:00",
    "2004-04-19T17:14:29+02:00",
    "2004-04-30T23:42:49+02:00",
    "2004-05-07T17:11:18+02:00",
    "2004-05-20T23:26:06+02:00",
    "2004-06-15T21:28:09+02:00",
    "2005-02-26T16:57:01+01:00",
    "2007-06-13T20:22:47+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NullPointerException",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseBundleData.generateManifest",
          "source": "EclipseBundleData.java:231"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseBundleData.loadManifest",
          "source": "EclipseBundleData.java:207"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.CachedManifest.getManifest",
          "source": "CachedManifest.java:31"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.CachedManifest.get",
          "source": "CachedManifest.java:66"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateBuilder.createBundleDescription",
          "source": "StateBuilder.java:34"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateObjectFactoryImpl.createBundleDescription",
          "source": "StateObjectFactoryImpl.java:21"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseAdaptor.createStateManager",
          "source": "EclipseAdaptor.java:88"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.defaultadaptor.DefaultAdaptor.initialize",
          "source": "DefaultAdaptor.java:112"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.initialize",
          "source": "Framework.java:117"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.\u003cinit\u003e",
          "source": "Framework.java:96"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.OSGi.createFramework",
          "source": "OSGi.java:90"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.OSGi.\u003cinit\u003e",
          "source": "OSGi.java:31"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:84"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:279"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:742"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:581"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "50993",
      "date": "2004-01-30T20:02:09+01:00",
      "product": "Platform",
      "component": "Runtime",
      "severity": "normal"
    }
  ],
  "groupId": "50993",
  "bugId": "50993",
  "date": "2004-01-30T20:02:09+01:00",
  "product": "Platform",
  "component": "Runtime",
  "severity": "normal"
}