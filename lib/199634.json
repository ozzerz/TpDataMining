{
  "comments": [
    "Created an attachment (id\u003d75887)\nThis has the list of bundles started and the stack trace\n\nBuild ID: I20070625-1500\n\nSteps To Reproduce:\nI do not know what triggers this.  It happens every single time in certain scenarios, so it should not be particularly difficult to reproduct.  The stack trace has only Equinox code on it, but I\u0027m unsure right now which array is getting the out-of-bounds condition!\n\nMore information:\nI will attach the output log from a run that fails.  Then I\u0027ll try to debug this a bit further to see if I can figure out from the code what the problem is.",
    "Here is just the stack, for people interested:\n\njava.lang.IndexOutOfBoundsException: Index: 6, Size: 6\n\tat java.util.ArrayList.RangeCheck(ArrayList.java:546)\n\tat java.util.ArrayList.remove(ArrayList.java:389)\n\tat org.eclipse.osgi.internal.module.ResolverImpl.checkCycle(ResolverImpl.java:803)\n\tat org.eclipse.osgi.internal.module.ResolverImpl.resolveBundles0(ResolverImpl.java:478)\n\tat org.eclipse.osgi.internal.module.ResolverImpl.resolveBundles(ResolverImpl.java:453)\n\tat org.eclipse.osgi.internal.module.ResolverImpl.resolve(ResolverImpl.java:340)\n\tat org.eclipse.osgi.internal.resolver.StateImpl.resolve(StateImpl.java:356)\n\tat org.eclipse.osgi.internal.resolver.StateImpl.resolve(StateImpl.java:420)\n\tat org.eclipse.osgi.framework.internal.core.PackageAdminImpl.doResolveBundles(PackageAdminImpl.java:218)\n\tat org.eclipse.osgi.framework.internal.core.PackageAdminImpl$1.run(PackageAdminImpl.java:164)\n\tat java.lang.Thread.run(Thread.java:595)",
    "I found the logical problem, though I am unsure about the cause.  The logical problem is this, in org.eclipse.osgi.internal.module.ResolverImpl:\n\nAt or around line 782 is this:\n\nfor (int i \u003d cycleSize - 1; i \u003e\u003d 0; i--) {\n  // blah blah blah\n  for (int j \u003d 0; j \u003c imports.length; j++) {\n    // blah blah blah\n    if (!imports[j].isDynamic() \u0026\u0026 !imports[j].isOptional() \u0026\u0026 imports[j].getSelectedSupplier() \u003d\u003d null) {\n      // blah blah blah\n      cycle.remove(i);  // line 803\n    }\n  }\n}\n\nHence, if there is more than one \"j\" iteration that passes that \"if\" statement then the same \"i\" will be removed twice, leading to the IndexOutOfBoundsException.\n\nTrouble is, I\u0027m not 100% sure what the code is supposed to do in this case, so I\u0027m loathe to fix it (for now).  I\u0027m going to do more and see if I can come up with the patch now that I\u0027ve found the problem!",
    "We should fix this for 3.3.1.  I will investigate.",
    "Created an attachment (id\u003d76262)\npatch\n\nI am having a hard time reproducing this bug, but I definitely see the error in the logic.\n\nThis patch is against HEAD, but should be able to be applied to the R3_3_maintenance branch.  The issue is if a bundle involved in a cycle is wired to more than one dropped export then we try to remove the bundle more than once.  An export can be dropped if a bundle exports and imports the same package and the bundle ends up *not* getting wired to its own export.\n\nI\u0027ve tried to concoct a simple testcase to reproduce this but so far in my tests the dropped exports are detected way before the final cycle check done at the end.  I now see a way to reproduce this with a more advanced testcase, but that will take me a bit more time to create for our automated tests.  In the mean time could you give this patch a try?\n\nNote that I also found a bug in ResolverConstraint while debugging this issue that is fixed in this patch.",
    "Created an attachment (id\u003d76447)\npatch\n\nSorry, I attached a completely unrelated patch earlier.  Here is the correct patch.",
    "I released the patch to HEAD.  Leaving open for 3.3.1 consideration and to develop more testcases.",
    "Simon, please review for 3.3.1 consideration.",
    "(In reply to comment #5)\n\u003e Created an attachment (id\u003d76447) [details]\n\u003e patch\n\u003e Sorry, I attached a completely unrelated patch earlier.  Here is the correct\n\u003e patch.\n\nI\u0027ll try out this patch once I get a little time after a week of travelling.  I should be able to get to it tomorrow.",
    "Patch looks fine.",
    "John, any luck testing out the patch?  We just had our first RC build for 3.3.1 so we only have a limited amount of time to release this fix before 3.3.1 is final (see http://www.eclipse.org/eclipse/development/freeze_plan_3_3_1.html).  I would like to release this fix for next weeks 3.3.1 RC build, but I wanted confirmation back from you that it fixes your problem first.  Thanks.",
    "Sorry it took so long.  The patch looks good!",
    "Thanks for confirming the patch John.  The fix has been released for 3.3.1."
  ],
  "commentCreationDates": [
    "2007-08-10T22:26:11+02:00",
    "2007-08-10T22:27:50+02:00",
    "2007-08-11T05:08:52+02:00",
    "2007-08-15T22:22:25+02:00",
    "2007-08-16T23:56:11+02:00",
    "2007-08-20T16:08:05+02:00",
    "2007-08-20T16:28:48+02:00",
    "2007-08-20T16:30:54+02:00",
    "2007-08-20T17:52:06+02:00",
    "2007-08-20T22:16:12+02:00",
    "2007-08-22T15:47:08+02:00",
    "2007-08-27T13:52:44+02:00",
    "2007-08-27T15:52:34+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IndexOutOfBoundsException",
      "message": "Index: 6, Size: 6",
      "elements": [
        {
          "method": "java.util.ArrayList.RangeCheck",
          "source": "ArrayList.java:546"
        },
        {
          "method": "java.util.ArrayList.remove",
          "source": "ArrayList.java:389"
        },
        {
          "method": "org.eclipse.osgi.internal.module.ResolverImpl.checkCycle",
          "source": "ResolverImpl.java:803"
        },
        {
          "method": "org.eclipse.osgi.internal.module.ResolverImpl.resolveBundles0",
          "source": "ResolverImpl.java:478"
        },
        {
          "method": "org.eclipse.osgi.internal.module.ResolverImpl.resolveBundles",
          "source": "ResolverImpl.java:453"
        },
        {
          "method": "org.eclipse.osgi.internal.module.ResolverImpl.resolve",
          "source": "ResolverImpl.java:340"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateImpl.resolve",
          "source": "StateImpl.java:356"
        },
        {
          "method": "org.eclipse.osgi.internal.resolver.StateImpl.resolve",
          "source": "StateImpl.java:420"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.PackageAdminImpl.doResolveBundles",
          "source": "PackageAdminImpl.java:218"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.PackageAdminImpl$1.run",
          "source": "PackageAdminImpl.java:164"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Thread.java:595"
        }
      ],
      "number": 0,
      "commentIndex": 1,
      "bugId": "199634",
      "date": "2007-08-10T22:27:50+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    }
  ],
  "groupId": "199634",
  "bugId": "199634",
  "date": "2007-08-10T22:26:11+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "normal"
}