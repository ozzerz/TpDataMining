{
  "comments": [
    "Steps to reproduce:\n1) Import the attached workspace\n2) Run the included launch-configuration \"server\"\n3) type \"start com.serversideOsgi.server.bo.person\" into the osgi-console.\n\n---------------------------------\n\nEXPECTED RESULT:\nThe code should run through and create a new DB-Entry for a Person.\n\n---------------------------------\n\nACTUAL RESULT:\njava.lang.NoClassDefFoundError: javax/transaction/Synchronization\n\tat org.hibernate.impl.SessionImpl.\u003cinit\u003e(SessionImpl.java:213)\n\tat org.hibernate.impl.SessionFactoryImpl.openSession(SessionFactoryImpl.java:473)\n\tat org.hibernate.impl.SessionFactoryImpl.openSession(SessionFactoryImpl.java:497)\n\tat org.hibernate.impl.SessionFactoryImpl.openSession(SessionFactoryImpl.java:505)\n\tat com.serversideosgi.server.bo.person.impl.PersonDAO.persist(PersonDAO.java:28)\n\tat com.serversideosgi.server.bo.person.Activator.initData(Activator.java:42)\n\tat com.serversideosgi.server.bo.person.Activator.start(Activator.java:22)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:999)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:993)\n\tat org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:974)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:346)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:260)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:252)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkCommandProvider._start(FrameworkCommandProvider.java:260)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkCommandInterpreter.execute(FrameworkCommandInterpreter.java:145)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.docommand(FrameworkConsole.java:294)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.console(FrameworkConsole.java:279)\n\tat org.eclipse.osgi.framework.internal.core.FrameworkConsole.run(FrameworkConsole.java:214)\n\tat java.lang.Thread.run(Unknown Source)\n\n\n---------------------------------\n\n4) Stop the server \n5) Open the Manifest of the org.hibernate bundle and switch to the tab \n   dependencies\n6) Remove \"javax.transaction\" from the list of imported packages \n7) Add the bundle \"javax.transaction\" to the list of required bundles.\n9) Run the included launch-configuration \"server\"\n10) type \"start com.serversideOsgi.server.bo.person\" into the osgi-console.\n\n---------------------------------\n\nEXPECTED RESULT:\ncode should run through without exception\n\n---------------------------------\n\nACTUAL RESULT:\nEverything is fine :-)\n\n---------------------------------\n\n\nContent description\n-------------------\ncom.serversideosgi.server.bo.person.Activator reads a hibernate configuration, creates a new Object to persist and tries to store this.\n\nFirst of all I thought that there might be two bundles with javax.transaction. \nBut now I think it has something to do with the special handling of java and javax classes by the framework. AFAIK they are loaded using the extension classloader, right? It seems as if exported packages are not used to resolve classes in that case. Please correct me if I am wrong.\n\n\nBernd",
    "The workspace can be downloaded from www.kolbware.de/temp/workspace-182117.zip as it is to big to attach...\n\nBernd",
    "It gives me error 404",
    "Sorry, it should work now. You\u0027ve been a bit too fast :-D\n\nBernd\n",
    "You wouldn\u0027t happen to be running on 1.6 would you.\nIf so, I bet you\u0027re getting wired to org.eclipse.osgi because its exporting the java 6 profile.\n\n\"Part\" of javax.transaction was added to rt.jar. We need to take a look however I suspect the portion of javax.transaction added was just to satisfy the excepion needs of other parts of the runtime. In that case we should consider removing javax.transaction from the profile.\n\n\n",
    "Simon,\n\nthanks for the hint :-) Yes, I am running on Java 1.6\n\nI just switched from 1.6 to 1.5. \nWhen validating, I do not get any errors. But when starting up I get the following :\nosgi\u003e !SESSION 2007-04-12 16:04:09.796 -----------------------------------------------\neclipse.buildId\u003dunknown\njava.version\u003d1.5.0_06\njava.vendor\u003dSun Microsystems Inc.\nBootLoader constants: OS\u003dwin32, ARCH\u003dx86, WS\u003dwin32, NL\u003dde_DE\nCommand-line arguments:  -dev file:C:/projects/serverside-buch-spring/_ws/_runtime/config/dev.properties -os win32 -ws win32 -arch x86 -console -consoleLog\n\n!ENTRY org.eclipse.osgi 2 0 2007-04-12 16:04:10.671\n!MESSAGE One or more bundles are not resolved because the following root constraints are not resolved:\n!SUBENTRY 1 org.eclipse.osgi 2 0 2007-04-12 16:04:10.671\n!MESSAGE Bundle initial@reference:file:../../../projects/serverside-buch-spring/_ws/org.dom4j/ was not resolved.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.stream_0.0.0.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.stream.util_0.0.0.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.stream.events_0.0.0.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.bind_0.0.0.\n\n!ENTRY org.eclipse.osgi 2 0 2007-04-12 16:04:10.671\n!MESSAGE The following is a complete list of bundles which are not resolved, see the prior log entry for the root cause if it exists:\n!SUBENTRY 1 org.eclipse.osgi 2 0 2007-04-12 16:04:10.671\n!MESSAGE Bundle initial@reference:file:../../../projects/serverside-buch-spring/_ws/com.serversideOsgi.server.bo.person/ [1] was not resolved.\n!SUBENTRY 2 com.serversideOsgi.server.bo.person 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing required bundle org.hibernate_0.0.0.\n!SUBENTRY 1 org.eclipse.osgi 2 0 2007-04-12 16:04:10.671\n!MESSAGE Bundle initial@reference:file:../../../projects/serverside-buch-spring/_ws/org.dom4j/ [9] was not resolved.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.bind_0.0.0.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.stream_0.0.0.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.stream.events_0.0.0.\n!SUBENTRY 2 org.dom4j 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package javax.xml.stream.util_0.0.0.\n!SUBENTRY 1 org.eclipse.osgi 2 0 2007-04-12 16:04:10.671\n!MESSAGE Bundle initial@reference:file:../../../projects/serverside-buch-spring/_ws/org.hibernate/ [10] was not resolved.\n!SUBENTRY 2 org.hibernate 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package org.dom4j_0.0.0.\n!SUBENTRY 2 org.hibernate 2 0 2007-04-12 16:04:10.671\n!MESSAGE Missing imported package org.dom4j.io_0.0.0.\n\n\n\nBernd\n",
    "Java 5 doesn\u0027t provide xml.bind and xml.stream. You can create and add bundles for them but I\u0027d do this if only if you\u0027re really targetting Java 5.\n\nA better/easier approach might add versions to your javax.transaction bundle\u0027s exports. e.g.\n\nExport-Package: javax.transaction; version\u003d\"1.1\",\n javax.transaction.xa; version\u003d\"1.1\"\n\nThe OSGi resolver will prefer the export with the highest version so this should fix things. Using versions in particular on your exports is also just a good practice so..\n\n--\nI\u0027m going back and forth on my thoughts on removing javax.transaction from the profile and for the moment think we should leave it in. In that case it would be essential that your javax.transaction bundle export with versions.",
    "Regarding Java 5 I think this is just a tooling issue (and thus might be worth a own bug?) If the tooling tells me that all requirements are satisfied, I expect the framework to start up normally.\n\nRegarding package versions. I have already tried that (Sorry for not mentioning) without success. I still get the same exceptions.\n\nThe manifest I tried looked like this:\nManifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: Transaction Plug-in\nBundle-SymbolicName: javax.transaction\nBundle-Version: 1.1.0\nExport-Package: javax.transaction;version\u003d\"1.1.0\",\n javax.transaction.xa;version\u003d\"1.1.0\"\n\nJust one stupid question:\nIf I have not specified a version in the package export, shouldn\u0027t the package get the version of the bundle automatically?\nThe spec says:\n\"The following attribute is part of this specification:\n? version ? The version of the named packages with syntax as defined in\nVersion on page 28. It defines the version of the associated packages. The\ndefault value is 0.0.0.\n...\nThe Framework will automatically associate each package export definition\nwith the following attributes:\n...\n? bundle-version ? The bundle version of the exporting bundle. In the case\nof a Fragment bundle, this is the host bundle?s version.\"\n\nWouldn\u0027t it be a good idea to first take the classes form the exported packages and if they could not be found there, take them from the profile? \n\nSomething else:\nWhat if I have two bundles (A and B) exporting package z. I do an import-package on z. Both bundles are containing the same package, but different classes. AFAIK, OSGi can not handle that, right? Which classes (aka which bundle) will be  chosen at run-time?\n\n\n\n",
    "(In reply to comment #7)\n\u003e Regarding Java 5 I think this is just a tooling issue (and thus might be worth\n\u003e a own bug?) If the tooling tells me that all requirements are satisfied, I\n\u003e expect the framework to start up normally.\nI would tend to agree, but in this case you have binary hibernate jars so you are not compiling any code.  If you were trying to compile the hibernate code then you would have seen compilation errors because the javax.transaction packages contained in 1.6 do not contain everything it needs.\n\n\u003e Regarding package versions. I have already tried that (Sorry for not\n\u003e mentioning) without success. I still get the same exceptions.\n\u003e The manifest I tried looked like this:\n\u003e Manifest-Version: 1.0\n\u003e Bundle-ManifestVersion: 2\n\u003e Bundle-Name: Transaction Plug-in\n\u003e Bundle-SymbolicName: javax.transaction\n\u003e Bundle-Version: 1.1.0\n\u003e Export-Package: javax.transaction;version\u003d\"1.1.0\",\n\u003e  javax.transaction.xa;version\u003d\"1.1.0\"\n\u003e Just one stupid question:\n\u003e If I have not specified a version in the package export, shouldn\u0027t the package\n\u003e get the version of the bundle automatically?\n\u003e The spec says:\n\u003e \"The following attribute is part of this specification:\n\u003e ? version ? The version of the named packages with syntax as defined in\n\u003e Version on page 28. It defines the version of the associated packages. The\n\u003e default value is 0.0.0.\n\u003e ...\n\u003e The Framework will automatically associate each package export definition\n\u003e with the following attributes:\n\u003e ...\n\u003e ? bundle-version ? The bundle version of the exporting bundle. In the case\n\u003e of a Fragment bundle, this is the host bundle?s version.\"\n\nNotice that the \"version\" attribute will still be \"0.0.0\" even though there would be a bundle-version attribute.  The version attribute is the one used for selection.  The bundle-version attribute is only used if an import-package header also uses a bundle-version matching attribute.\n\n\n\u003e Wouldn\u0027t it be a good idea to first take the classes form the exported packages\n\u003e and if they could not be found there, take them from the profile?\nIn OSGi it works a bit differently.  We only delegate to the sources you got wired to.  In this case you are getting wired to the version provided by java 1.6.\n\n\u003e Something else:\n\u003e What if I have two bundles (A and B) exporting package z. I do an\n\u003e import-package on z. Both bundles are containing the same package, but\n\u003e different classes. AFAIK, OSGi can not handle that, right? Which classes (aka\n\u003e which bundle) will be  chosen at run-time?\n\nThe specification leaves this up to the framework implementation.  If you as an importer want a package from a specific provider then you must have attributes specified on both the exporter and the importer to ensure you are wired to the correct version of the package.\n\nIn you example both the exporter and the importer should specify the version ...\n\nExport-Package: \n javax.transaction; version\u003d1.1,\n javax.transaction.xa; version\u003d1.1\n\nImport-Package: \n javax.transaction; version\u003d1.1\n\nIf hibernate really cares about getting a full 1.1 version of the javax.transaction package then it better import that package at the full version it needs or require a bundle which exports that full version.",
    "(In reply to comment #8)\n\u003e I would tend to agree, but in this case you have binary hibernate jars so you\n\u003e are not compiling any code.  If you were trying to compile the hibernate code\n\u003e then you would have seen compilation errors because the javax.transaction\n\u003e packages contained in 1.6 do not contain everything it needs.\nYes, I know. I was talking about the validate button in the launch configuration.\nI expected this button to do exactly the same what the platform does on start-up.\nSo if this action tells me that I am fine, the platform should come up without \nany missing ... errors, don\u0027t you think so?\n\n\n\u003e In OSGi it works a bit differently.  We only delegate to the sources you got\n\u003e wired to.  In this case you are getting wired to the version provided by java\n\u003e 1.6.\nHm. I think I don\u0027t get you there. I know, that you are just delegating to a \nspecific source. My point was the order of the delegation. At the moment you \nare delegating to the bootclassloader if the package is contained in the profile, \nright? it might be a good idea to have a look for the exported packages and also \nconsider using them(their classlaoders) as delegation target. My assumption is \nthat is is why the suggested solution by Simon (from comment #6: \n\u003e A better/easier approach might add versions to your javax.transaction bundle\u0027s\n\u003e exports.  \n\u003e ...\n\u003e The OSGi resolver will prefer the export with the highest version so this\n\u003e should fix things.\n) does not work. You suggested to add the version also to the import, which works \nfine. But as Simon said, the framework should take the highest version available, \nright?\n\nBernd",
    "Created an attachment (id\u003d63779)\npage 54 from r4-core-v4.1-pfd-20070212.pdf (http://jcp.org/aboutJava/communityprocess/pfd/jsr291/index.html)\n\nI just had again a look to the spec. The page which describes the loading as it should be is attached.\n\nBernd",
    "We are glossing over an important point, if you have a bundle that imports the javax.transaction with no version specified ...\n\nImport-Package: javax.transaction\n\nThen the bundle is saying id does not care at all what version of that package it gets.  On JavaSE 1.6 the execution environement exports a very limited version of the javax.transaction package.  In the hibernate case it needs a specific version of the javax.transaction package (version\u003d1.1).  In the current example the hibernate bundle will successfully resolve in a framework running on the JavaSE 1.6 EE even though the JavaSE 1.6 EE does not contain the correct version of the javax.transaction package.  The hibernate bundle must specify its constraints accurately otherwise it runs the risk of getting wired to something that does not meet its needs.\n"
  ],
  "commentCreationDates": [
    "2007-04-12T14:35:03+02:00",
    "2007-04-12T14:48:21+02:00",
    "2007-04-12T14:50:38+02:00",
    "2007-04-12T14:52:28+02:00",
    "2007-04-12T15:43:23+02:00",
    "2007-04-12T16:05:13+02:00",
    "2007-04-12T16:32:24+02:00",
    "2007-04-12T17:23:36+02:00",
    "2007-04-12T18:39:11+02:00",
    "2007-04-13T09:49:58+02:00",
    "2007-04-13T19:30:37+02:00",
    "2007-04-13T20:30:26+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "javax/transaction/Synchronization",
      "elements": [
        {
          "method": "org.hibernate.impl.SessionImpl.\u003cinit\u003e",
          "source": "SessionImpl.java:213"
        },
        {
          "method": "org.hibernate.impl.SessionFactoryImpl.openSession",
          "source": "SessionFactoryImpl.java:473"
        },
        {
          "method": "org.hibernate.impl.SessionFactoryImpl.openSession",
          "source": "SessionFactoryImpl.java:497"
        },
        {
          "method": "org.hibernate.impl.SessionFactoryImpl.openSession",
          "source": "SessionFactoryImpl.java:505"
        },
        {
          "method": "com.serversideosgi.server.bo.person.impl.PersonDAO.persist",
          "source": "PersonDAO.java:28"
        },
        {
          "method": "com.serversideosgi.server.bo.person.Activator.initData",
          "source": "Activator.java:42"
        },
        {
          "method": "com.serversideosgi.server.bo.person.Activator.start",
          "source": "Activator.java:22"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run",
          "source": "BundleContextImpl.java:999"
        },
        {
          "method": "java.security.AccessController.doPrivileged",
          "source": "Native Method"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator",
          "source": "BundleContextImpl.java:993"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleContextImpl.start",
          "source": "BundleContextImpl.java:974"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleHost.startWorker",
          "source": "BundleHost.java:346"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
          "source": "AbstractBundle.java:260"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.start",
          "source": "AbstractBundle.java:252"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkCommandProvider._start",
          "source": "FrameworkCommandProvider.java:260"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Unknown Source"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkCommandInterpreter.execute",
          "source": "FrameworkCommandInterpreter.java:145"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.docommand",
          "source": "FrameworkConsole.java:294"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.console",
          "source": "FrameworkConsole.java:279"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.FrameworkConsole.run",
          "source": "FrameworkConsole.java:214"
        },
        {
          "method": "java.lang.Thread.run",
          "source": "Unknown Source"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "182117",
      "date": "2007-04-12T14:35:03+02:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    }
  ],
  "groupId": "182117",
  "bugId": "182117",
  "date": "2007-04-12T14:35:03+02:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "normal"
}