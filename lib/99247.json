{
  "comments": [
    "TableRenderingContentProvider does not check that the load address is within \nthe range of memory block start / end address.  It could get into cases when \nthe end address becomes smaller than the start address and result in negative \narray size exception.  Content provider should handle this better and avoid \nthis exception.\n\nTo reproduce:\n1.  The memory block\u0027s base address, start address and end address change on \nevery step.\n2.  Add multiple memory blocks.\n3.  Step a few times.\n4.  Make one of the hidden memory blocks visible.\n5.  Add a new table rendering.  \n\nThe exception happens when the previous load address gets out of the range of \nthe start and end address.  The load address is remembered by the sync service \nand did not get updated because the rendering has not yet been activated since \nit does not have focus.\n\njava.lang.NegativeArraySizeException\n\tat java.lang.Throwable.\u003cinit\u003e(Throwable.java:59)\n\tat java.lang.Throwable.\u003cinit\u003e(Throwable.java:73)\n\tat java.lang.NegativeArraySizeException.\u003cinit\u003e\n(NegativeArraySizeException.java:49)\n\tat \norg.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvi\nder.makeDummyContent(TableRenderingContentProvider.java:528)\n\tat \norg.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvi\nder.getMemoryToFitTable(TableRenderingContentProvider.java)\n\tat \norg.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvi\nder.loadContentForExtendedMemoryBlock(TableRenderingContentProvider.java)\n\tat \norg.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvi\nder.inputChanged(TableRenderingContentProvider.java:88)\n\tat org.eclipse.jface.viewers.ContentViewer.setInput\n(ContentViewer.java:244)\n\tat org.eclipse.jface.viewers.StructuredViewer.setInput\n(StructuredViewer.java:1417)\n\tat org.eclipse.debug.ui.memory.AbstractTableRendering.createTableViewer\n(AbstractTableRendering.java:794)\n\tat org.eclipse.debug.ui.memory.AbstractTableRendering.createControl\n(AbstractTableRendering.java:654)\n\tat org.eclipse.debug.internal.ui.views.memory.MemoryViewTab$2.run\n(MemoryViewTab.java:100)",
    "Fixed in \n* TableRenderingContentProvider - if load address is out of range, try to load \nat base address.  This gives user a chance to recover and go to the desired \naddress.\n* If base address is out of range, display error\n* Check to make sure buffer end address \u003e buffer start address.\n* Added error messages.",
    "Darin, please verify...",
    "Fixed.",
    "Verified."
  ],
  "commentCreationDates": [
    "2005-06-09T21:39:28+02:00",
    "2005-06-09T23:18:11+02:00",
    "2005-06-09T23:18:31+02:00",
    "2005-06-09T23:18:58+02:00",
    "2005-06-16T01:10:50+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NegativeArraySizeException",
      "elements": [
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java:59"
        },
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java:73"
        },
        {
          "method": "java.lang.NegativeArraySizeException.\u003cinit\u003e",
          "source": "NegativeArraySizeException.java:49"
        },
        {
          "method": "org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.makeDummyContent",
          "source": "TableRenderingContentProvider.java:528"
        },
        {
          "method": "org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.getMemoryToFitTable",
          "source": "TableRenderingContentProvider.java"
        },
        {
          "method": "org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.loadContentForExtendedMemoryBlock",
          "source": "TableRenderingContentProvider.java"
        },
        {
          "method": "org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.inputChanged",
          "source": "TableRenderingContentProvider.java:88"
        },
        {
          "method": "org.eclipse.jface.viewers.ContentViewer.setInput",
          "source": "ContentViewer.java:244"
        },
        {
          "method": "org.eclipse.jface.viewers.StructuredViewer.setInput",
          "source": "StructuredViewer.java:1417"
        },
        {
          "method": "org.eclipse.debug.ui.memory.AbstractTableRendering.createTableViewer",
          "source": "AbstractTableRendering.java:794"
        },
        {
          "method": "org.eclipse.debug.ui.memory.AbstractTableRendering.createControl",
          "source": "AbstractTableRendering.java:654"
        },
        {
          "method": "org.eclipse.debug.internal.ui.views.memory.MemoryViewTab$2.run",
          "source": "MemoryViewTab.java:100"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "99247",
      "date": "2005-06-09T21:39:28+02:00",
      "product": "Platform",
      "component": "Debug",
      "severity": "normal"
    }
  ],
  "groupId": "99247",
  "bugId": "99247",
  "date": "2005-06-09T21:39:28+02:00",
  "product": "Platform",
  "component": "Debug",
  "severity": "normal"
}