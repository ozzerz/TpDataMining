{
  "comments": [
    "gdb prints a long bunch of messages immediately after running \"target remote ...\" when connecting to my target.  This is no problem on the command line.  However, from CDT it appears that the log stream buffer is filled, causing the MI \"RX Thread\" to wait indefinitely.  Eventually it times out, and I get an error while launching.  I think this buffer is usually drained by the console view in eclipse.  However, during launching the console has not yet been started.  Default buffer size for PipedInput/OutputStream seems to be 1024 chars.\n\nI suspended the VM in the runtime workbench while it was waiting, but before it timed out.  I will attached a stack dump for all threads in the debugger.  This is the relevant one.  If you look at the full stack dump, you\u0027ll see none of the active threads are scheduled to read from the buffer.\n\nThread [MI RX Thread] (Suspended)\n\tObject.wait(long) line: not available [native method]\n\tPipedInputStream.awaitSpace() line: 204 [local variables unavailable]\n\tPipedInputStream.receive(byte[], int, int) line: 161\n\tPipedOutputStream.write(byte[], int, int) line: 129\n\tPipedOutputStream(OutputStream).write(byte[]) line: 58\n\tRxThread.processMIOOBRecord(MIStreamRecord) line: 366\n\tRxThread.processMIOOBRecord(MIOOBRecord, List) line: 266\n\tRxThread.processMIOutput(String) line: 249\n\tRxThread.run() line: 93\n\nI resumed the JVM and this is the error I eventually see in the log:\nError 2005-12-07 12:08:25.892 Error creating session: Target is not responding (timed out)\norg.eclipse.cdt.debug.mi.core.MIException: Target is not responding (timed out)\nat org.eclipse.cdt.debug.mi.core.MISession.postCommand0(MISession.java:467)\nat org.eclipse.cdt.debug.mi.core.MISession.postCommand(MISession.java:436)\nat org.eclipse.cdt.debug.mi.core.GDBServerCDIDebugger.createLaunchSession(GDBServerCDIDebugger.java:77)\nat org.eclipse.cdt.debug.mi.core.GDBCDIDebugger.createDebuggerSession(GDBCDIDebugger.java:72)\nat com.timesys.ide.kernel.launch.KernelLaunchDelegate.debugProgram(KernelLaunchDelegate.java:111)\nat com.timesys.ide.kernel.launch.KernelLaunchDelegate.launch(KernelLaunchDelegate.java:80)\nat org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:590)\nat org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:515)\nat org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:152)\nat org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch(DebugUIPlugin.java:737)\nat org.eclipse.debug.internal.ui.DebugUIPlugin$6.run(DebugUIPlugin.java:931)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:76)\n\nThis makes me unable to connect to this target at all using Eclipse/CDT.",
    "Created an attachment (id\u003d31313)\nStack dump for all threads\n\n",
    "Jeremiah,\nThe only solution I have found for this problem (without changing the public methods of the \"GDBCDIDebugger\" class) is to create a special thread that accepts console output requests and writes it to the console streams. In this case the debugging process continues regardless if the console is available or not.\nI\u0027m not very comfortable with this solution: there could be problems with console and gdb synchronization. At the same time I\u0027ve found a bug in the console view implementation (https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d121454) and I don\u0027t know if it will be fixed in Eclipse 3.0.2.\nDo you have any ideas or suggestions?\n",
    "The \"best\" solution would obviously be to start the console view before before executing any gdb commands.  However, I understand that would almost certainly require a significant API change.  My thought would be to truncate output once the buffer is full or automatically grow the buffer.  However, PipedInput/OutputStream does not support this.  We\u0027d have to create our own stream implementation that did this.  It seems like implementing our own \"piped\" streams would be simpler and more reliable than adding extra threads.\n\nSeparately, if we decide to go with \"truncate\" we should probably be able to specify the buffer size as a preference.  Although, I\u0027d be OK with postponing that and just filing a separate enhancement request for later consideration.",
    "(In reply to comment #3)\nI am changing the target milestone to 3.1, so I will be able to make the required changes in the *CDIDebugger classes.\n",
    "Fixed in the HEAD branch. \nThe initial communication with gdb is separated from the creation of the gdb process. The console is created before the communication starts.\n\nJeremiah, please try it and verify if it works.\nYou should replace GDBServerCDIDebugger by GDBServerCDIDebugger2 in your launch configuration delegate to make it work. ",
    "*** Bug 107571 has been marked as a duplicate of this bug. ***"
  ],
  "commentCreationDates": [
    "2005-12-07T17:12:28+01:00",
    "2005-12-07T17:13:32+01:00",
    "2005-12-19T20:04:45+01:00",
    "2006-01-03T16:30:54+01:00",
    "2006-01-03T19:25:48+01:00",
    "2006-01-23T20:32:05+01:00",
    "2006-01-25T19:30:46+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.cdt.debug.mi.core.MIException",
      "message": "Target is not responding (timed out)",
      "elements": [
        {
          "method": "org.eclipse.cdt.debug.mi.core.MISession.postCommand0",
          "source": "MISession.java:467"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.MISession.postCommand",
          "source": "MISession.java:436"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.GDBServerCDIDebugger.createLaunchSession",
          "source": "GDBServerCDIDebugger.java:77"
        },
        {
          "method": "org.eclipse.cdt.debug.mi.core.GDBCDIDebugger.createDebuggerSession",
          "source": "GDBCDIDebugger.java:72"
        },
        {
          "method": "com.timesys.ide.kernel.launch.KernelLaunchDelegate.debugProgram",
          "source": "KernelLaunchDelegate.java:111"
        },
        {
          "method": "com.timesys.ide.kernel.launch.KernelLaunchDelegate.launch",
          "source": "KernelLaunchDelegate.java:80"
        },
        {
          "method": "org.eclipse.debug.internal.core.LaunchConfiguration.launch",
          "source": "LaunchConfiguration.java:590"
        },
        {
          "method": "org.eclipse.debug.internal.core.LaunchConfiguration.launch",
          "source": "LaunchConfiguration.java:515"
        },
        {
          "method": "org.eclipse.debug.internal.core.LaunchConfiguration.launch",
          "source": "LaunchConfiguration.java:152"
        },
        {
          "method": "org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch",
          "source": "DebugUIPlugin.java:737"
        },
        {
          "method": "org.eclipse.debug.internal.ui.DebugUIPlugin$6.run",
          "source": "DebugUIPlugin.java:931"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:76"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "119683",
      "date": "2005-12-07T17:12:28+01:00",
      "product": "CDT",
      "component": "cdt-debug",
      "severity": "major"
    }
  ],
  "groupId": "119683",
  "bugId": "119683",
  "date": "2005-12-07T17:12:28+01:00",
  "product": "CDT",
  "component": "cdt-debug",
  "severity": "major"
}