{
  "comments": [
    "Had 3.0M4 running fine on OS X 10.2 (Jaguar) in two configurations:  1) workspace on local drive 2) \nworkspace on UNIX-based Samba share\n\nUpgraded to OX X 10.3 (Panther).  Configuration 1 still works fine but configuration 2) now fails on \nlaunch with .log entry as follows:\n\nAlthough the log entry claims to be unable to create a lock file, the file can, in fact, be created \nmanuallly using the same Samba share.\n\nAlso included are the Eclipse.app/Contents/Info.plist file contents for local and network \nconfigurations.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n.log\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n!SESSION ----------------------------------------------------------------------\n!ENTRY org.eclipse.core.launcher 4 0 Nov 12, 2003 17:14:41.129\n!MESSAGE Exception launching the Eclipse Platform:\n!STACK\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.launcher.Main.basicRun(Main.java:299)\n        at org.eclipse.core.launcher.Main.run(Main.java:765)\n        at org.eclipse.core.launcher.Main.main(Main.java:599)\nCaused by: java.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.eclipse.core.internal.boot.InternalBootLoader.startup(InternalBootLoader.java:1049)\n        at org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:838)\n        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n        ... 7 more\nCaused by: org.eclipse.core.runtime.CoreException: Unable to create platform lock file: /Volumes/\nDEVELOPMENT/adrian/workspace/.metad\nata/.lock.\n        at org.eclipse.core.internal.runtime.InternalPlatform.createLockFile(InternalPlatform.java:225)\n        at org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup(InternalPlatform.java:677)\n        ... 14 more\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nInfo.plist (local)\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/\nPropertyList-1.0.dtd\"\u003e\n\u003cplist version\u003d\"1.0\"\u003e\n\n\u003cdict\u003e\n        \u003ckey\u003eCFBundleExecutable\u003c/key\u003e\n                \u003cstring\u003eeclipse\u003c/string\u003e\n        \u003ckey\u003eCFBundleGetInfoString\u003c/key\u003e\n                \u003cstring\u003eEclipse 3.0 for Mac OS X, Copyright IBM Corp. and others 2001, 2003. All rights \nreserved.\u003c/string\u003e\n        \u003ckey\u003eCFBundleIconFile\u003c/key\u003e\n                \u003cstring\u003eEclipse.icns\u003c/string\u003e\n        \u003ckey\u003eCFBundleIdentifier\u003c/key\u003e\n                \u003cstring\u003eorg.eclipse.eclipse\u003c/string\u003e\n        \u003ckey\u003eCFBundleInfoDictionaryVersion\u003c/key\u003e\n                \u003cstring\u003e6.0\u003c/string\u003e\n        \u003ckey\u003eCFBundleName\u003c/key\u003e\n                \u003cstring\u003eEclipse\u003c/string\u003e\n        \u003ckey\u003eCFBundlePackageType\u003c/key\u003e\n                \u003cstring\u003eAPPL\u003c/string\u003e\n        \u003ckey\u003eCFBundleShortVersionString\u003c/key\u003e\n                \u003cstring\u003e3.0\u003c/string\u003e\n        \u003ckey\u003eCFBundleSignature\u003c/key\u003e\n                \u003cstring\u003e????\u003c/string\u003e\n        \u003ckey\u003eCFBundleVersion\u003c/key\u003e\n                \u003cstring\u003e3.0\u003c/string\u003e\n\n        \u003ckey\u003eEclipse\u003c/key\u003e\n                \u003carray\u003e\n                        \u003cstring\u003e-vm\u003c/string\u003e\u003cstring\u003eEclipse.app/Contents/MacOS/java_swt\u003c/string\u003e\n                        \u003cstring\u003e-consoleLog\u003c/string\u003e\n                        \u003cstring\u003e-showlocation\u003c/string\u003e\n                        \u003cstring\u003e-data\u003c/string\u003e\u003cstring\u003e/Users/anewby/EclipseProjects/workspace\u003c/\nstring\u003e\n                        \u003cstring\u003e-vmargs\u003c/string\u003e\n                        \u003cstring\u003e-XXvm\u003d1.4.1\u003c/string\u003e\n                        \u003cstring\u003e-Xms30M\u003c/string\u003e\n                        \u003cstring\u003e-Xmx150M\u003c/string\u003e\n                \u003c/array\u003e\n\u003c/dict\u003e\n\n\u003c/plist\u003e\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nInfo.plist (network)\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/\nPropertyList-1.0.dtd\"\u003e\n\u003cplist version\u003d\"1.0\"\u003e\n\n\u003cdict\u003e\n        \u003ckey\u003eCFBundleExecutable\u003c/key\u003e\n                \u003cstring\u003eeclipse\u003c/string\u003e\n        \u003ckey\u003eCFBundleGetInfoString\u003c/key\u003e\n                \u003cstring\u003eEclipse 3.0 for Mac OS X, Copyright IBM Corp. and others 2001, 2003. All rights \nreserved.\u003c/string\u003e\n        \u003ckey\u003eCFBundleIconFile\u003c/key\u003e\n                \u003cstring\u003eEclipse.icns\u003c/string\u003e\n        \u003ckey\u003eCFBundleIdentifier\u003c/key\u003e\n                \u003cstring\u003eorg.eclipse.eclipse\u003c/string\u003e\n        \u003ckey\u003eCFBundleInfoDictionaryVersion\u003c/key\u003e\n                \u003cstring\u003e6.0\u003c/string\u003e\n        \u003ckey\u003eCFBundleName\u003c/key\u003e\n                \u003cstring\u003eEclipse\u003c/string\u003e\n        \u003ckey\u003eCFBundlePackageType\u003c/key\u003e\n                \u003cstring\u003eAPPL\u003c/string\u003e\n        \u003ckey\u003eCFBundleShortVersionString\u003c/key\u003e\n                \u003cstring\u003e3.0\u003c/string\u003e\n        \u003ckey\u003eCFBundleSignature\u003c/key\u003e\n                \u003cstring\u003e????\u003c/string\u003e\n        \u003ckey\u003eCFBundleVersion\u003c/key\u003e\n                \u003cstring\u003e3.0\u003c/string\u003e\n\n        \u003ckey\u003eEclipse\u003c/key\u003e\n                \u003carray\u003e\n                        \u003cstring\u003e-vm\u003c/string\u003e\u003cstring\u003eEclipse.app/Contents/MacOS/java_swt\u003c/string\u003e\n                        \u003cstring\u003e-consoleLog\u003c/string\u003e\n                        \u003cstring\u003e-showlocation\u003c/string\u003e\n                        \u003cstring\u003e-data\u003c/string\u003e\u003cstring\u003e/Volumes/DEVELOPMENT/adrian/workspace\u003c/\nstring\u003e\n                        \u003cstring\u003e-vmargs\u003c/string\u003e\n                        \u003cstring\u003e-XXvm\u003d1.4.1\u003c/string\u003e\n                        \u003cstring\u003e-Xms30M\u003c/string\u003e\n                        \u003cstring\u003e-Xmx150M\u003c/string\u003e\n                \u003c/array\u003e\n\u003c/dict\u003e\n\n\u003c/plist\u003e",
    "Probably a duplicate of bug 44735.\n\nPlease try running the test case in bug 44487 comment 9, passing as argument a \nsamba-based file location, and tell us what happens.\n\n",
    "running this ...\n\njava TestLock /Volumes/DEVELOPMENT/adrian/workspace/.metadata/.lock\n\nproduces this ...\n\ntrying to acquire lock once\nException in thread \"main\" java.io.IOException: Operation not supported\n        at sun.nio.ch.FileChannelImpl.lock0(Native Method)\n        at sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:773)\n        at java.nio.channels.FileChannel.tryLock(FileChannel.java:967)\n        at TestLock.acquireLock(TestLock.java:8)\n        at TestLock.main(TestLock.java:14)",
    "JVM info:\n\njava version \"1.4.1_01\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.1_01-99)\nJava HotSpot(TM) Client VM (build 1.4.1_01-27, mixed mode)",
    "If this turns out to be a bug in Apple\u0027s Java implementation, please let me know.\nI will file a radar bug.",
    "It is likely a duplicate of bug 44735, since the Java VM is the same (isn\u0027t it,\nAdrian?).\n\nIt seems your current settings do not allow locking files in the Samba-based\nfile system (and your old settings before the upgrade allowed that).\nIf you can\u0027t/don\u0027t know how to restore the old behaviour, the workaround is to\ndisable the metadata lock file, what will allow you to start, but will leave you\nunprotected against accidentally running multiple instances of Eclipse on the\nsame workspace, what may cause metadata corruption. To disable the lock file,\nyou need to specify:\n\neclipse \u003call-other-args\u003e -vmargs -Dorg.eclipse.core.runtime.ignoreLockFile\n\nSo, Adrian, can you tell any difference in the Samba-related settings between\nyour previous setup and the current one?",
    "Need a point of clarification here:\n\nI upgraded the Mac OS from Jaguar to Panther.  This moved Samba from 2.2.7a up to 3.x.  Since it\u0027s \nconceivable that the local Samba client software upgrade might have changed the environment, I\u0027ll \nlook into any config changes associated with this move.  If I understand yyou correctly, I\u0027m looking \nfor changes in locking behavior.\n\nHowever, the location of the Eclipse workspace itself is a Samba-exposed UNIX file system on a \nremote machine.  Nothing in this environment changed so I won\u0027t be able to discover any \ndifferences there.\n\nBefore I look at the client-side Samba, though, I\u0027ll go back and confirm that the behavior is fine \nwith 3.0M3.  It strikes me that if I can show a functional difference between 3.0M3 and 3.0M4 in \nthe exact same environment, that might be helpful.  Yes?\n\n",
    "3.0M3 does not show the problem behavior.  It creates and removes the .lock file as you would \nexpect.\n\nI will continue to probe my local Samba configuration as mentioned in my earlier commment but \nthis looks to me like an M4 issue, since a faulty Samba configuration should have caused the same \nerror under M3 correct?",
    "Not necessarily, the lock file code was changed in M4 to use java.nio classes.\n\nSee bug 38399.",
    "As DJ mentioned, we started using file-locking capabilities on M4.\n\nUnfortunately, there are some setups that (in some cases) do not seem to allow\nfile locking (at least in the way Java applications are enabled to acquire). We\nare investigating those cases (remote file systems on Samba/NFS, LVM-based file\nsystems).\n\nSo, since you are keeping the same server and using the same Eclipse build (M4),\nthe difference is probably related to the different client OS version or\nSamba-related settings (on the client side).",
    "Here are the smb.conf differences.  \"\u003e\" means removed; \"\u003c\" means added.  I don\u0027t really know how \nto interpret these but others might.  Of course, it doesn\u0027t say anything about which default \nbehaviors might have changed as well...\n\n\ndiff smb.conf smb.conf.applesaved \n\n25a26,27\n\u003e   client code page \u003d 437\n\u003e   coding system \u003d utf8\n30,35d31\n\u003c    dos charset \u003d 437\n\u003c    unix charset \u003d UTF-8-MAC\n\u003c    auth methods \u003d guest opendirectory\n\u003c    passdb backend \u003d opendirectorysam guest\n\u003c    printer admin \u003d @admin, @staff\n\u003c    server string \u003d Mac OS X\n49,56c45,51\n\u003c [printers]\n\u003c    comment \u003d All Printers\n\u003c    browseable \u003d no\n\u003c    printable \u003d yes\n\u003c    public \u003d no\n\u003c    writable \u003d no\n\u003c    create mode \u003d 0700\n\u003c    path \u003d /tmp\n---\n\u003e ;[printers]\n\u003e ;   comment \u003d All Printers\n\u003e ;   browseable \u003d no\n\u003e ;   printable \u003d yes\n\u003e ;   public \u003d no\n\u003e ;   writable \u003d no\n\u003e ;   create mode \u003d 0700",
    "If the settings related to the problematic mount point are in the file you\nmentioned, so the change must be on the samba client behaviour. Adrian, sorry\nfor asking it but, could you, by any chance, had been running on a previous\nrelease (\u003cM4)in your old setup?\n\nAndre, since the problem does not have anything to do with Eclipse itself, I\nbelieve that opening a PR against Apple\u0027s JDK would be a good idea. A simple\ntest case appears in bug 44487 comment 9.",
    "For sure, I know that 3.0M3 and OS X 10.2 was working properly.\n\nWhat I don\u0027t know with certainty is whether 3.0M4 ever ran properly on 10.2.  (I realize this \ncontradicts my original comment.)  Problem is, I\u0027m not now in a position to test that combination.  \nIf I had to guess, I would guess that 3.0M4/10.2 would work and that the problem was caused by \nthe OS X upgrade.  However, that\u0027s only a guess.\n\nWhat I *can* do is test 3.0M4 on a colleague\u0027s Mac that came with 10.3 (Panther) out of the box.  \nWhat that will tell us is whether 3.0M4 out of the box has a problem with Panther out of the box.  If \nI can reproduce the problem there, it seems to me that we have a legitimate problem.  No?\n\nIf anyone has any other sugestions, I\u0027m happy to try them out.  (For instance, I believe I might be \nable to repeat the lock test - or even run 3.0M4 - with a 1.3.1 JVM)",
    "OK - forget part of that - I just found out that TestLock can\u0027t be compiled with a 1.3.1 JVM.  I \nguess Eclipse would also test for JVM version and only use nio classes if 1.4 was available?  So, \nrunning Eclipse under 1.3.1 would prove nothing. Right?",
    "More information:  \n\nI can run the TestLock test from a Windows client against the same remote Samba share with no \nfailure.  So, the remote Samba share can be eliminated as a possible problem.  This Windows \nplatform also runs M4 against this remote Samba share with no locking problems, which would \nalso seem to eliminate M4.\n\nThat leaves either the Apple JVM or the Mac Samba client.\n\nIn an attempt to see if the JVM was the culprit, I ran TestLock against a local filesystem file.  On RH \nLinux 9, I got this:\n\n[newbya@dev-fpserver-01 newbya]$ java TestLock ~/myLock\ntrying to acquire lock once\ntrying to acquire lock twice\n\n(Look good to me)\n\nOn OS X 10.3, I got this:\n\n[anewby@supernova ~/scratch]$ java TestLock /.lock\ntrying to acquire lock once\nException in thread \"main\" java.io.IOException: Bad file descriptor\n        at sun.nio.ch.FileChannelImpl.release0(Native Method)\n        at sun.nio.ch.FileChannelImpl.implCloseChannel(FileChannelImpl.java:104)\n        at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:\n97)\n        at java.io.FileOutputStream.close(FileOutputStream.java:275)\n        at TestLock.acquireLock(TestLock.java:9)\n        at TestLock.main(TestLock.java:14)\n\n(Not so good)\n\nDoes this look like a JVM bug to you?",
    "So, the summary is: \n- we don\u0027t know for sure whether file locking works on a samba-based location on\nMac OS X 10.2;\n- file locking works fine with local file systems (as described in the original\ndescription).\n\nThis looks like a misconfiguration or limitation on the samba client on Mac OS X\nthat does not allow file locking. This has happened on other environments as\nwell (see bug 44735) for NFS-based locations (although it works fine for me with\nboth NFS and Samba locations).\n\nThe workaround (to disable the .metadata lock file) is described on comment 5.\n\nAdrian: above, you ran the test case against \"/.lock\". This should be the reason\nfor the error. You must provide a location to which you have R/W acess.\n\nUnless we find something on the contrary, this is a duplicate of bug 44735.\n\n*** This bug has been marked as a duplicate of 44735 ***",
    "I reran the test case (TestLock) on a local filesystem as follows.  Note that I didn\u0027t use .lock as a file \nname.  Since the test case fails even when using a filename guaranteed to have r/w access, I\u0027m not \nsure we can conclusively identify Samba as the culprit.\n\n\njava TestLock ./thisLocation\ntrying to acquire lock once\nException in thread \"main\" java.io.IOException: Bad file descriptor\n        at sun.nio.ch.FileChannelImpl.release0(Native Method)\n        at sun.nio.ch.FileChannelImpl.implCloseChannel(FileChannelImpl.java:104)\n        at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:\n97)\n        at java.io.FileOutputStream.close(FileOutputStream.java:275)\n        at TestLock.acquireLock(TestLock.java:9)\n        at TestLock.main(TestLock.java:14)",
    "See comment 16 - test case fails even when accessing local filesystem (although the original \nproblem disappears from Eclipse).  Not sure what this means apart from the test case probably \nshould not fail under these conditions, correct?",
    "Sorry for not being clear about, but the location you pass to the test case must\nbe an *existing file* location. Is that what you are doing?\n\nIf Eclipse starts fine with a local workspace, your problem running the test\ncase must be something else. I strongly believe the problem is related to the\nuse of a Samba-based file location.\n\n",
    "The test fails with an existing file location.  In this case, neither NFS nor Samba have any \ninvolvement.  I tried it with both zero- and non-zero length files.  (See below)\n\n-- First with a zero-length file ....\n\n[anewby@supernova ~/scratch]$ ls -l\ntotal 16\n-rw-r--r--  1 anewby  staff  931 16 Nov 14:37 TestLock.class\n-rw-r--r--  1 anewby  staff  714 13 Nov 12:20 TestLock.java\n-rw-r--r--  1 anewby  staff    0 17 Nov 14:57 thisLocation\n\n[anewby@supernova ~/scratch]$ java TestLock ./thisLocation \ntrying to acquire lock once\nException in thread \"main\" java.io.IOException: Bad file descriptor\n        at sun.nio.ch.FileChannelImpl.release0(Native Method)\n        at sun.nio.ch.FileChannelImpl.implCloseChannel(FileChannelImpl.java:104)\n        at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:\n97)\n        at java.io.FileOutputStream.close(FileOutputStream.java:275)\n        at TestLock.acquireLock(TestLock.java:9)\n        at TestLock.main(TestLock.java:14)\n[anewby@supernova ~/scratch]$\n\n-- Now with a non-zero length file ...\n\n[anewby@supernova ~/scratch]$ ls \u003e ./thisLocation \n[anewby@supernova ~/scratch]$ ls -l\ntotal 24\n-rw-r--r--  1 anewby  staff  931 16 Nov 14:37 TestLock.class\n-rw-r--r--  1 anewby  staff  714 13 Nov 12:20 TestLock.java\n-rw-r--r--  1 anewby  staff   42  5 Dec 15:02 thisLocation\n[anewby@supernova ~/scratch]$ java TestLock ./thisLocation \ntrying to acquire lock once\nException in thread \"main\" java.io.IOException: Bad file descriptor\n        at sun.nio.ch.FileChannelImpl.release0(Native Method)\n        at sun.nio.ch.FileChannelImpl.implCloseChannel(FileChannelImpl.java:104)\n        at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:\n97)\n        at java.io.FileOutputStream.close(FileOutputStream.java:275)\n        at TestLock.acquireLock(TestLock.java:9)\n        at TestLock.main(TestLock.java:14)\n[anewby@supernova ~/scratch]$",
    "Adrian, are you still seeing this?",
    "No further information. Marking as duplicate. Please reopen if this still\nhappens and the workaround (now in bug 55744 comment 7) does not work.\n\n*** This bug has been marked as a duplicate of 44735 ***"
  ],
  "commentCreationDates": [
    "2003-11-13T01:39:16+01:00",
    "2003-11-13T18:34:57+01:00",
    "2003-11-13T20:34:26+01:00",
    "2003-11-13T20:37:20+01:00",
    "2003-11-14T13:28:06+01:00",
    "2003-11-14T15:05:14+01:00",
    "2003-11-14T18:05:19+01:00",
    "2003-11-14T18:21:32+01:00",
    "2003-11-14T18:58:20+01:00",
    "2003-11-14T19:24:10+01:00",
    "2003-11-14T20:21:33+01:00",
    "2003-11-14T21:31:08+01:00",
    "2003-11-16T22:28:53+01:00",
    "2003-11-16T22:41:32+01:00",
    "2003-11-16T23:01:31+01:00",
    "2003-11-17T15:46:14+01:00",
    "2003-11-17T22:59:38+01:00",
    "2003-12-05T05:26:17+01:00",
    "2003-12-05T13:39:42+01:00",
    "2003-12-05T23:06:50+01:00",
    "2004-07-07T18:44:19+02:00",
    "2004-07-13T20:54:04+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.reflect.InvocationTargetException",
      "elements": [
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:299"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:765"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:599"
        }
      ],
      "causedBy": {
        "exceptionType": "java.lang.reflect.InvocationTargetException",
        "elements": [
          {
            "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "source": "Native Method"
          },
          {
            "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
            "source": "NativeMethodAccessorImpl.java:39"
          },
          {
            "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "source": "DelegatingMethodAccessorImpl.java:25"
          },
          {
            "method": "java.lang.reflect.Method.invoke",
            "source": "Method.java:324"
          },
          {
            "method": "org.eclipse.core.internal.boot.InternalBootLoader.startup",
            "source": "InternalBootLoader.java:1049"
          },
          {
            "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
            "source": "InternalBootLoader.java:838"
          },
          {
            "method": "org.eclipse.core.boot.BootLoader.run",
            "source": "BootLoader.java:461"
          }
        ],
        "causedBy": {
          "exceptionType": "org.eclipse.core.runtime.CoreException",
          "message": "Unable to create platform lock file: /Volumes/ DEVELOPMENT/adrian/workspace/.metad ata/.lock.",
          "elements": [
            {
              "method": "org.eclipse.core.internal.runtime.InternalPlatform.createLockFile",
              "source": "InternalPlatform.java:225"
            },
            {
              "method": "org.eclipse.core.internal.runtime.InternalPlatform.loaderStartup",
              "source": "InternalPlatform.java:677"
            }
          ],
          "number": 0,
          "commentIndex": 0
        },
        "number": 0,
        "commentIndex": 0
      },
      "number": 0,
      "commentIndex": 0,
      "bugId": "46548",
      "duplicateId": "44735",
      "date": "2003-11-13T01:39:16+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "Operation not supported",
      "elements": [
        {
          "method": "sun.nio.ch.FileChannelImpl.lock0",
          "source": "Native Method"
        },
        {
          "method": "sun.nio.ch.FileChannelImpl.tryLock",
          "source": "FileChannelImpl.java:773"
        },
        {
          "method": "java.nio.channels.FileChannel.tryLock",
          "source": "FileChannel.java:967"
        },
        {
          "method": "TestLock.acquireLock",
          "source": "TestLock.java:8"
        },
        {
          "method": "TestLock.main",
          "source": "TestLock.java:14"
        }
      ],
      "number": 1,
      "commentIndex": 2,
      "bugId": "46548",
      "duplicateId": "44735",
      "date": "2003-11-13T20:34:26+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "Bad file descriptor",
      "elements": [
        {
          "method": "sun.nio.ch.FileChannelImpl.release0",
          "source": "Native Method"
        },
        {
          "method": "sun.nio.ch.FileChannelImpl.implCloseChannel",
          "source": "FileChannelImpl.java:104"
        },
        {
          "method": "java.nio.channels.spi.AbstractInterruptibleChannel.close",
          "source": "AbstractInterruptibleChannel.java: 97"
        },
        {
          "method": "java.io.FileOutputStream.close",
          "source": "FileOutputStream.java:275"
        },
        {
          "method": "TestLock.acquireLock",
          "source": "TestLock.java:9"
        },
        {
          "method": "TestLock.main",
          "source": "TestLock.java:14"
        }
      ],
      "number": 2,
      "commentIndex": 14,
      "bugId": "46548",
      "duplicateId": "44735",
      "date": "2003-11-16T23:01:31+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "Bad file descriptor",
      "elements": [
        {
          "method": "sun.nio.ch.FileChannelImpl.release0",
          "source": "Native Method"
        },
        {
          "method": "sun.nio.ch.FileChannelImpl.implCloseChannel",
          "source": "FileChannelImpl.java:104"
        },
        {
          "method": "java.nio.channels.spi.AbstractInterruptibleChannel.close",
          "source": "AbstractInterruptibleChannel.java: 97"
        },
        {
          "method": "java.io.FileOutputStream.close",
          "source": "FileOutputStream.java:275"
        },
        {
          "method": "TestLock.acquireLock",
          "source": "TestLock.java:9"
        },
        {
          "method": "TestLock.main",
          "source": "TestLock.java:14"
        }
      ],
      "number": 3,
      "commentIndex": 16,
      "bugId": "46548",
      "duplicateId": "44735",
      "date": "2003-11-17T22:59:38+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "Bad file descriptor",
      "elements": [
        {
          "method": "sun.nio.ch.FileChannelImpl.release0",
          "source": "Native Method"
        },
        {
          "method": "sun.nio.ch.FileChannelImpl.implCloseChannel",
          "source": "FileChannelImpl.java:104"
        },
        {
          "method": "java.nio.channels.spi.AbstractInterruptibleChannel.close",
          "source": "AbstractInterruptibleChannel.java: 97"
        },
        {
          "method": "java.io.FileOutputStream.close",
          "source": "FileOutputStream.java:275"
        },
        {
          "method": "TestLock.acquireLock",
          "source": "TestLock.java:9"
        },
        {
          "method": "TestLock.main",
          "source": "TestLock.java:14"
        }
      ],
      "number": 4,
      "commentIndex": 19,
      "bugId": "46548",
      "duplicateId": "44735",
      "date": "2003-12-05T23:06:50+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    },
    {
      "exceptionType": "java.io.IOException",
      "message": "Bad file descriptor",
      "elements": [
        {
          "method": "sun.nio.ch.FileChannelImpl.release0",
          "source": "Native Method"
        },
        {
          "method": "sun.nio.ch.FileChannelImpl.implCloseChannel",
          "source": "FileChannelImpl.java:104"
        },
        {
          "method": "java.nio.channels.spi.AbstractInterruptibleChannel.close",
          "source": "AbstractInterruptibleChannel.java: 97"
        },
        {
          "method": "java.io.FileOutputStream.close",
          "source": "FileOutputStream.java:275"
        },
        {
          "method": "TestLock.acquireLock",
          "source": "TestLock.java:9"
        },
        {
          "method": "TestLock.main",
          "source": "TestLock.java:14"
        }
      ],
      "number": 5,
      "commentIndex": 19,
      "bugId": "46548",
      "duplicateId": "44735",
      "date": "2003-12-05T23:06:50+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    }
  ],
  "groupId": "44735",
  "bugId": "46548",
  "duplicateId": "44735",
  "date": "2003-11-13T01:39:16+01:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "major"
}