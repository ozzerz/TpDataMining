{
  "comments": [
    "I try out Contract4J 0.5 with AspectJ 1.5.2 (Build 20060629124300) and Eclipse 3.2 (Build M20060629-1905) under Windows XP SP2 and Java 1.5.0_06. So I became following exception. (You will find my testcode below the exception.) I am not sure if this bug related to Contract4J or to AspectJ!?\n\n\u003d\u003d\u003d\u003d The Exception \u003d\u003d\u003d\u003d\n\njava.lang.IllegalStateException\nat org.aspectj.weaver.asm.AsmDelegate.getFormalTypeParametersFromOuterClass(AsmDelegate.java:465)\nat org.aspectj.weaver.asm.AsmDelegate.ensureSignatureUnpacked(AsmDelegate.java:395)\nat org.aspectj.weaver.asm.AsmDelegate.getDeclaredInterfaces(AsmDelegate.java:538)\nat org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:426)\nat org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:64)\nat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1155)\nat org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1134)\nat org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1201)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:643)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:519)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1058)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:480)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:190)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:111)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:43)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:53)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:618)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:928)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope.getBinding(BlockScope.java:449)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.resolveType(QualifiedNameReference.java:903)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:326)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:829)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:422)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:178)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1088)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1137)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:519)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:271)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nIllegalStateException thrown: How come we\u0027re in AsmObjectType resolving an inner type of something that is NOT a AsmObjectType??\n\n\u003d\u003d\u003d\u003d My TestCode \u003d\u003d\u003d\u003d\n\nimport org.contract4j5.Contract;\nimport org.contract4j5.Post;\nimport org.contract4j5.Pre;\n\nimport org.contract4j5.aspects.Contract4J;\n\n// this is a dummy code!!\n\n@Contract\npublic class Foo {\n\n  private String fooField \u003d null;\n  \n  @Pre(\"nr !\u003d null\")\n  public void setFooField(String f) {\n    fooField \u003d f; \n  }\n  \n  @Post(\"$return !\u003d null\")\n  public String getFooField() {\n    return fooField;\n  }\n  \n  public static void main(String[] args) {\n    \n    Contract4J.setEnabled(Contract4J.TestType.Pre,   true); //1\n    Contract4J.setEnabled(Contract4J.TestType.Post,  true); //2 \n    Contract4J.setEnabled(Contract4J.TestType.Invar, true); //3\n    \n    Foo foo \u003d new Foo();\n    foo.setFooField(null);\n    System.out.println(foo.getFooField());\n    \n  }\n  \n}",
    "Created an attachment (id\u003d47732)\nBug reporter\u0027s example reworked as a unit test.\n\n",
    "I\u0027ve attached a slightly-reworked version of your example as a unit test. No real difference.\nI tried with the same AspectJ, Eclipse, and AJDT versions and had no problems (except that one test expression \"nr !\u003d null\" will always fail since \"nr\" is undefined..). However, there are a few possible differences:\n(i) I am using a slightly newer development version of C4J that will released as V0.6 hopefully this weekend. It mostly adds structural improvements that shouldn\u0027t be involved in this problem (famous last words...).\n(ii) I have occasionally seen similar, but not repeatable compiler errors. Usually a clean rebuild of everything makes it go away.\nSo, I suspect AspectJ ;) I will try to reproduce it on the actual V0.5 Contract4J release.",
    "Hello\n\nPerhaps, I\u0027ve found some solution in Bug 140375 (Comment 5, from Heiko Seeberger). With -Xset:activateLightweightDelegates\u003dfalse no exception will be thrown anymore.\n\nMy program don\u0027t run without some output, but this is definitely no bug.. Only my greenness with Contract4J I think.. ;)\n\nThank you.",
    "sorry. of course \u0027 ... don\u0027t run with ... \u0027 ;)\n\nwhat is the work of -Xset:activateLightweightDelegates\u003dfalse? could it be that I receive therefore no output in my program? ",
    "AspectJ keeps a \u0027world\u0027 in which it retains information about the types used in your program (so that it can answer questions about pointcut matching for example). We have several different ways that information about types can be obtained - these are captured by different \"delegate\" classes that we use like a strategy pattern. We used to only use BCEL for delegates backed by .class files, but for types that we are not going to weave into we now have the option (used by default) of using ASM for \u0027types not exposed to the weaver\u0027. The flag you are setting turns off this use of ASM for \"lighter weight\" delegates and falls back on the BCEL strategy. It should make no difference to the output of your program, only the amount of memory used (slightly more with BCEL). This bug is clearly to do with mixing up ASM and BCEL delegates in a way we weren\u0027t anticipating - hence why disabling the ASM support makes it go away...",
    "Thank you!",
    "I\u0027ve managed to recreate this bug with the AJ version in HEAD and the following simple testcase:\n\n---------------------------------------------------\npublic aspect A {\n\tpublic enum TestType {Pre};\n}\n\npublic class Foo {\n\n\tpublic static void main(String[] args) {\n\t\tA.TestType pre \u003d A.TestType.Pre;\n    }\n\n}\n----------------------------------------------------\n\nThe requirement for recreating this bug is that the aspect is compiled into a jar file which is then placed on the classpath when compiling Foo.",
    "Created an attachment (id\u003d48965)\nfailing testcase\n\nApply to the tests project.\n\nThis patch is the test program in the above comment written to fit in with the aj test harness.",
    "In answer to the exception message \"How come we\u0027re in AsmObjectType resolving an inner type of something that is NOT a AsmObjectType??\", the reason is that the enum is an inner type of an aspect and due to the fix for bug 135001 we \"fallbackToLoadingBcelDelegatesForAspects\" in BcelWorld line 302 and so create a BcelObjecType for A instead. When we come to resolve the Enum we\u0027re not an aspect and so return the AsmDelegate. Consequently the AsmDelegate is an inner type of the BcelObjectType.",
    "Two possible solutions are:\n\n1. because the aspect is a BcelObjectType then all inner types should consequently be BcelObjectTypes\n\n2. cope with the case when the inner type is an AsmDelegate whose enclosing type is an aspect which is a BcelObjectType\n",
    "Created an attachment (id\u003d49142)\nzip containing improved tests\n\nThis zip contains the following:\n\n* pr153490-tests.txt: apply to the tests project\n* jarForFoo.jar, jarForGoo.jar, jarForBar.jar: place in the tests\\bugs153\\pr153490 directory\n\nThese tests replace the previously attached ones as they include more cases:\n\n1. enum is an inner type of an aspect\n2. enum is an inner type of a class which is an inner type of an aspect\n3. enum is an inner type of an aspect which is an inner type of a class",
    "I don\u0027t think there is a need to force the delegates of inner types to be Bcel ones - the second option in comment #10 is the way to go.  As with other illegal state exceptions, it was in the code to police something we were concerned about - something that might happen in the wild and yet we hadn\u0027t been able to cover with tests.  When it arises in the wild, we look at what is happening and decide whether the behaviour is reasonable - if it is then we remove the restriction (effectively considering the \u0027illegalstate\u0027 to be a \u0027legal state\u0027).  So - I\u0027ve fixed this by allowing the mixing of delegates - the code was a mess to deal with this stuff so I\u0027ve moved quite a bit of it around, I hope it hasn\u0027t introduced new problems but you never know.  if it has then they are likely to be in the use of generic/parmeterized types.\n\ntestcases and fixes all in.",
    "fixes available in dev build."
  ],
  "commentCreationDates": [
    "2006-08-10T22:39:18+02:00",
    "2006-08-10T23:50:05+02:00",
    "2006-08-10T23:53:53+02:00",
    "2006-08-11T00:13:00+02:00",
    "2006-08-11T00:16:43+02:00",
    "2006-08-11T09:53:44+02:00",
    "2006-08-14T14:43:25+02:00",
    "2006-08-29T16:53:25+02:00",
    "2006-08-29T16:56:51+02:00",
    "2006-08-29T17:41:38+02:00",
    "2006-08-30T14:11:44+02:00",
    "2006-08-31T10:12:32+02:00",
    "2006-09-13T09:43:19+02:00",
    "2006-09-25T15:50:41+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "elements": [
        {
          "method": "org.aspectj.weaver.asm.AsmDelegate.getFormalTypeParametersFromOuterClass",
          "source": "AsmDelegate.java:465"
        },
        {
          "method": "org.aspectj.weaver.asm.AsmDelegate.ensureSignatureUnpacked",
          "source": "AsmDelegate.java:395"
        },
        {
          "method": "org.aspectj.weaver.asm.AsmDelegate.getDeclaredInterfaces",
          "source": "AsmDelegate.java:538"
        },
        {
          "method": "org.aspectj.weaver.ReferenceType.getDeclaredInterfaces",
          "source": "ReferenceType.java:426"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.getDirectSupertypes",
          "source": "ResolvedType.java:64"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.collectInterTypeMungers",
          "source": "ResolvedType.java:1155"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers",
          "source": "ResolvedType.java:1134"
        },
        {
          "method": "org.aspectj.weaver.ResolvedType.checkInterTypeMungers",
          "source": "ResolvedType.java:1201"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations",
          "source": "AjLookupEnvironment.java:643"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations",
          "source": "AjLookupEnvironment.java:519"
        },
        {
          "method": "org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom",
          "source": "AjLookupEnvironment.java:1058"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom",
          "source": "LookupEnvironment.java:480"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept",
          "source": "Compiler.java:190"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType",
          "source": "LookupEnvironment.java:111"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve",
          "source": "UnresolvedReferenceBinding.java:43"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType",
          "source": "BinaryTypeBinding.java:53"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType",
          "source": "BinaryTypeBinding.java:618"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType",
          "source": "Scope.java:928"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope.getBinding",
          "source": "BlockScope.java:449"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.resolveType",
          "source": "QualifiedNameReference.java:903"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType",
          "source": "MessageSend.java:326"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve",
          "source": "Expression.java:829"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements",
          "source": "AbstractMethodDeclaration.java:422"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements",
          "source": "MethodDeclaration.java:178"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve",
          "source": "AbstractMethodDeclaration.java:400"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve",
          "source": "TypeDeclaration.java:1088"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve",
          "source": "TypeDeclaration.java:1137"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve",
          "source": "CompilationUnitDeclaration.java:305"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process",
          "source": "Compiler.java:519"
        },
        {
          "method": "org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:329"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation",
          "source": "AjBuildManager.java:887"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild",
          "source": "AjBuildManager.java:271"
        },
        {
          "method": "org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild",
          "source": "AjBuildManager.java:170"
        },
        {
          "method": "org.aspectj.ajde.internal.CompilerAdapter.compile",
          "source": "CompilerAdapter.java:117"
        },
        {
          "method": "org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run",
          "source": "AspectJBuildManager.java:191"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "153490",
      "date": "2006-08-10T22:39:18+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "minor"
    }
  ],
  "groupId": "153490",
  "bugId": "153490",
  "date": "2006-08-10T22:39:18+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "minor"
}