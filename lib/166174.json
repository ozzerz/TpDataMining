{
  "comments": [
    "The following error happens when opening task editor using TasksUiUtil.openRepositoryTask(repository, taskId) call, in case if taskId came from jira.\n\njava.lang.RuntimeException: invalid handle for task, can not contain: -, was: MNGECLIPSE-9\n\tat org.eclipse.mylar.tasks.core.AbstractRepositoryTask.getHandle(AbstractRepositoryTask.java:138)\n\tat org.eclipse.mylar.internal.tasks.ui.TasksUiUtil.openRepositoryTask(TasksUiUtil.java:120)\n\tat org.eclipse.mylar.internal.team.ui.actions.OpenCorrespondingTaskAction.run(OpenCorrespondingTaskAction.java:105)\n\tat org.eclipse.mylar.internal.team.ui.actions.OpenCorrespondingTaskAction.run(OpenCorrespondingTaskAction.java:76)\n\tat org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:253)\n\tat org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:539)\n\tat org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:488)\n\tat org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:400)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:925)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3463)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3077)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1924)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1888)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:104)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:74)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:348)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:165)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:341)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:285)\n\tat org.eclipse.core.launcher.Main.run(Main.java:987)\n\tat org.eclipse.core.launcher.Main.main(Main.java:962)\n\n\nMore information:",
    "The problem here is that we need the ID of the task, not the key which is what we get from ILinkedTaskInfo.  We can search by key to find the corresponding task, but for now I have simply popped up message dialog prompting the user to use the Open Task dialog, and we fall back to opening with the web browser.\n\nIf you could give this a try with the JIRA task that it failed with that would be helpful.",
    "I looked again and I think that ILinkedTaskInfo.getTaskId() will either need to return the unique task ID (not JIRA key), or the name of that method needs to change.  So over to you for now.",
    "(In reply to comment #2)\n\u003e I looked again and I think that ILinkedTaskInfo.getTaskId() will either need to\n\u003e return the unique task ID (not JIRA key), or the name of that method needs to\n\u003e change.  So over to you for now.\n\nTask key for jira won\u0027t be available from the linked task info. Is is simply not available from the information we can get.\n\nBTW, why can\u0027t you just show that open task/remote task dialog (with task id filled in) if taskui can\u0027t open the editor?",
    "Not at this stage, but yes, we should do that.\n\nI know that it\u0027s not available in the comment, but either it has to be looked up when the ILinkedTaskInfo is created (either in the Task List or on server), or we have to change the name of the method to getIdLabel() to be consistent with AbstractRepositoryTask.  Thoughts?",
    "(In reply to comment #4)\n\u003e I know that it\u0027s not available in the comment, but either it has to be looked\n\u003e up when the ILinkedTaskInfo is created (either in the Task List or on server),\n\u003e or we have to change the name of the method to getIdLabel() to be consistent\n\u003e with AbstractRepositoryTask.  Thoughts?\n\nYou know that I never liked these internal ids. Anyways, I don\u0027t think implementor of ILinkedTaskInfo should know or do anything about internal task ids. Also, changing method name is probably distractive at this stage (i.e. it will break Subclipse integration).\n\nAs a workaround you can use id returned by linked task info to query internal id, but that logic should be in open corresponding task action or some utility class that action is using.",
    "OK, leaving as is for 1.0, let\u0027s revisit after.",
    "Hmm. Why it is assigned to me now?",
    "Mistake, should not have been assigned to you.",
    "The Open Repository Task dialog should show a message that an invalid task id was entered instead of logging an error to the Eclipse log.",
    "I would expect it to work without any error messages. :-)",
    "Even better :).",
    "Created an attachment (id\u003d56973)\nTemplates\n\n",
    "(From update of attachment 56973)\nSeems like wrong bug report.",
    "*** Bug 169974 has been marked as a duplicate of this bug. ***",
    "Mik, are you sure you want me to work on this? You know that I always hated that handle thing and can rip it off really quick... :-)",
    "No, what I was thinking is that we already have a bug for the handle thing (bug 170587) and that you have already fixed this particular bug, given the description.  If not please reopen.",
    "Apparently it is not fixed. Here is the new stack trace\n\njava.lang.RuntimeException: invalid handle for task, can not contain: -, was: MNGECLIPSE-171\n\tat org.eclipse.mylar.tasks.core.AbstractRepositoryTask.getHandle(AbstractRepositoryTask.java:138)\n\tat org.eclipse.mylar.tasks.ui.TasksUiUtil.openRepositoryTask(TasksUiUtil.java:121)\n\tat org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.openRemoteTask(OpenRepositoryTask.java:89)\n\tat org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.run(OpenRepositoryTask.java:51)\n\tat org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:253)\n\tat org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:229)\n\tat org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:545)\n\tat org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:490)\n\tat org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:402)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:928)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3465)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3079)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1945)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1909)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:425)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod(EclipseAppContainer.java:522)\n\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:147)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:104)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:74)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:170)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:339)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:283)\n\tat org.eclipse.core.launcher.Main.run(Main.java:984)\n\tat org.eclipse.core.launcher.Main.main(Main.java:959)\n",
    "Didn\u0027t we plan to escape/encode the task id a while back so it could legally contain dashes?",
    "(In reply to comment #18)\n\u003e Didn\u0027t we plan to escape/encode the task id a while back so it could legally\n\u003e contain dashes?\n\nIt won\u0027t help much with JIRA because it does not use this \"fancy\" way to construct handle.",
    "This should be transparently handled by AbstractRepositoryTask.getHandle() and AbstractRepositoryTask.getTaskId().",
    "(In reply to comment #20)\n\u003e This should be transparently handled by AbstractRepositoryTask.getHandle() and\n\u003e AbstractRepositoryTask.getTaskId().\n\nIt should NOT and those methods should be removed. Not sure what is stopping Mik to fix bug 170587.",
    "I agree that fixing bug 170587 is the way to go but if that is not happing for whatever reason we should add escaping for dashes in task ids (e.g. replace single dashes by two dashes).",
    "(In reply to comment #22)\n\u003e I agree that fixing bug 170587 is the way to go but if that is not happing for\n\u003e whatever reason we should add escaping for dashes in task ids (e.g. replace\n\u003e single dashes by two dashes).\n\nAgain, that won\u0027t buy anything for JIRA, because its handle is not constructed like that. So, there is no point to encode.\n\n",
    "Created an attachment (id\u003d57619)\nescape task id in repository handle\n\nThe patch allows task ids that contain dashes. It fixes opening of remote task when Jira\u0027s human-friendly task id is used. It is a fairly simple non-breaking change that lifts a limitiation of the current API. I think we should consider merging until bug 170587 is resolved.\n",
    "Created an attachment (id\u003d57620)\nmylar/context/zip\n\n",
    "Mik, why it is assigned to me again?",
    "Mik, this is still an issue. Here is the stack trace from opening JIRA task\n\njava.lang.RuntimeException: invalid handle for task, can not contain: -, was: MNG-2820\n\tat org.eclipse.mylar.internal.tasks.core.RepositoryTaskHandleUtil.getHandle(RepositoryTaskHandleUtil.java:29)\n\tat org.eclipse.mylar.tasks.core.TaskList.getTask(TaskList.java:401)\n\tat org.eclipse.mylar.internal.jira.ui.JiraTaskDataHandler.getJiraIssue(JiraTaskDataHandler.java:78)\n\tat org.eclipse.mylar.internal.jira.ui.JiraTaskDataHandler.getTaskData(JiraTaskDataHandler.java:58)\n\tat org.eclipse.mylar.tasks.ui.OpenRepositoryTaskJob.run(OpenRepositoryTaskJob.java:84)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)",
    "This will work once dashes in the task id part of the handle are escaped. We may need an additional fix for OpenRepositoryTaskJob though since the created handle would contain the JIRA key and not the task id. Hence it would be possible to have the same task with different handles.",
    "(In reply to comment #28)\n\u003e This will work once dashes in the task id part of the handle are escaped. We\n\u003e may need an additional fix for OpenRepositoryTaskJob though since the created\n\u003e handle would contain the JIRA key and not the task id. Hence it would be\n\u003e possible to have the same task with different handles.\n\nSteffen, new method TaskList.getTask(TaskList.java:401) thet Mik just added still constructing handle and throws exception if task id contains \u0027-\u0027. So, this issue will be fixed if we just remove that stupid exception. \n\nBetter fix would be to make TaskList.getTask() to search without creating handle string from passed repository url and task id.",
    "If we don\u0027t escape dashes before removing the exception we loose the ability to derive the id from the handle.\n\nI propose a method \"String AbstractRepositoryConnector.getTaskId(String key) throws CoreException\" that validates the key (e.g. checks that is is numeric) and returns the id in case of JIRA.",
    "(In reply to comment #30)\n\u003e If we don\u0027t escape dashes before removing the exception we loose the ability to\n\u003e derive the id from the handle.\n\nWhy one would need to derive id from handle?\n\n\u003e I propose a method \"String AbstractRepositoryConnector.getTaskId(String key)\n\u003e throws CoreException\" that validates the key (e.g. checks that is is numeric)\n\u003e and returns the id in case of JIRA.\n\nThat method already gone.",
    " (In reply to comment #31)\n\u003e \u003e If we don\u0027t escape dashes before removing the exception we loose the ability\n\u003e to\n\u003e \u003e derive the id from the handle.\n\u003e Why one would need to derive id from handle?\n\nMaybe it is not needed anymore. Mik, are you planning to get rid of the remaining calls to RepositoryTaskHandleUtil.getTaskId()?\n\n\u003e \u003e I propose a method \"String AbstractRepositoryConnector.getTaskId(String key)\n\u003e \u003e throws CoreException\" that validates the key (e.g. checks that is is numeric)\n\u003e \u003e and returns the id in case of JIRA.\n\u003e That method already gone.\n\nWhat do you suggest to map to the JIRA task id then or do we not need a unique handle in this case at all?\n\n",
    " (In reply to comment #32)\n\u003e What do you suggest to map to the JIRA task id then or do we not need a unique\n\u003e handle in this case at all?\n\nMy original idea was to allow to get task from the TaskList by repositoryUrl and the key. I guess it would need to be done on case by case basis.",
    " (In reply to comment #33)\n\u003e (In reply to comment #32)\n\u003e \u003e What do you suggest to map to the JIRA task id then or do we not need a unique\n\u003e \u003e handle in this case at all?\n\u003e My original idea was to allow to get task from the TaskList by repositoryUrl and\n\u003e the key. I guess it would need to be done on case by case basis.\n\nI guess I am misunderstanding this, but the task may not be in the task list at all?\n\nWe should consider making the following change in OpenRepositoryTaskJob to fix this the ambiguous task handle for JIRA:\n\nReplace RepositoryTaskHandleUtil.getHandle(repository.getUrl(), taskId)\nby RepositoryTaskHandleUtil.getHandle(repository.getUrl(), downloadedTaskData.getId()) .\n",
    "I just removed almost all of the remaining references to RepositoryTaskHandleUtil that aren\u0027t in tests or in the few places that still rely on handle creation (e.g. internals refactoring handles, opening corresponding task when no task is present in the Task List).\n\nSteffen: since it is getting too late for big changes for 2.0M1, can you make this work with either your escaping approach or the suggestion in comment#34?  Regarding the escaping, note that we are currently unable to change the stored handle format, since that would break old task contexts, history, etc.",
    "The escaping doesn\u0027t break anything because task ids in existing handles do not contain dashes. I can submit a patch later today.",
    "Yup, if the escaping just does the \"-\" for IDs that works.  I assume that you\u0027ll put this escaping into RepositoryTaskHandleUtil.getHandle() ?",
    "This does not make sense. We do know that it is not a handle already. Why do we need to escape anything then?",
    "Because we still have code that relies on parsing for the last occurrence of \u0027-\u0027.  So for 2.0M1 I can only think of two options:\n1) Escape occurrences of \u0027-\u0027 in the taskId.  However, not that JIRA should *not* be using the key as the taskId, because that will cause issues to lose identity when they move between components.  The actual ID shoudl be used, for the same reason that JIRA uses it internally--it uniquely identifies the issue no matter what its attributes are.\n2) Instead of parsing for the last occurrence of \u0027-\u0027 in RepositoryTaskHandleUtil, it may be possible to first find the repository URL, then use the rest of the string (less \u0027-\u0027) as the handle.\n\nFor now I think the best thing to do is just fix this instance of the problem by Steffen doing what he proposed in comment#34, no?",
    "(In reply to comment #39)\n\u003e Because we still have code that relies on parsing for the last occurrence of\n\u003e \u0027-\u0027.  So for 2.0M1 I can only think of two options:\n\u003e 1) Escape occurrences of \u0027-\u0027 in the taskId.  However, not that JIRA should\n\u003e *not* be using the key as the taskId, because that will cause issues to lose\n\u003e identity when they move between components.  The actual ID shoudl be used, for\n\u003e the same reason that JIRA uses it internally--it uniquely identifies the issue\n\u003e no matter what its attributes are.\n\nI agree. But the point is that there should be alternative API for searching task in the task list without using or constructing handle. You even added such API, but it is internally constructing handle, which is why we have this problem.\n\nMaybe we should instead search task in the task list by its web URL, that can be constructed by any connector from the repository URL and task key/id. I think it will be sufficient for the Open Corresponding Task use case.\n\n\u003e 2) Instead of parsing for the last occurrence of \u0027-\u0027 in\n\u003e RepositoryTaskHandleUtil, it may be possible to first find the repository URL,\n\u003e then use the rest of the string (less \u0027-\u0027) as the handle.\n\u003e \n\u003e For now I think the best thing to do is just fix this instance of the problem\n\u003e by Steffen doing what he proposed in comment#34, no?\n\nIt won\u0027t help. You are trying to fix the erorr but not the cause. If you encode handle, TaskList won\u0027t find task for it and we do know that it won\u0027t find it.",
    "Steffen\u0027s suggestion in comment#34 should work I think, it is to:\n\u003e We should consider making the following change in OpenRepositoryTaskJob to fix this the ambiguous task handle for JIRA:\n\u003e Replace RepositoryTaskHandleUtil.getHandle(repository.getUrl(), taskId) by RepositoryTaskHandleUtil.getHandle(repository.getUrl(), downloadedTaskData.getId()) .\n\nSteffen: unless you have additional suggestions, I think that we should avoid encoding the handle.\n\nEugene: I agree that we want the alternate searching mechanism.  But I need to know if it\u0027s worth not adding other 2.0M1 improvements to get it.  If the above works, is the lack of search/lookup blocking anythign else?",
    " (In reply to comment #41)\n\u003e Steffen: unless you have additional suggestions, I think that we should avoid\n\u003e encoding the handle.\n\nFine with me if we will support task ids with dashes in future version and opening of JIRA tasks is fixed somehow.",
    "(In reply to comment #41)\n\u003e Eugene: I agree that we want the alternate searching mechanism.  But I need to\n\u003e know if it\u0027s worth not adding other 2.0M1 improvements to get it.  If the above\n\u003e works, is the lack of search/lookup blocking anythign else?\n\nSorry, I am not sure what \"above\" you are referring to. Apparently new TaskList.getTask(respositoryUrl, taskId) method is not working and we have conflict with taskId vs. taskKey for JIRA. So, it seems like it will be better to replace new TaskList.getTask() method with something like TaskList.getTaskByWebUrl(taskUrl).",
    "I can add TaskList.getTaskByWebUrl(taskUrl) tomorrow.  It will do a search for now.  Will that meet this use case?\n\nBy \"above\" I was referring to the first paragraph of comment#41.\n\nThe JIRA Connector should never use the key for the ID.  That\u0027s not happening anywhere, is it?",
    " (In reply to comment #44)\n\u003e The JIRA Connector should never use the key for the ID.  That\u0027s not happening\n\u003e anywhere, is it?\n\nIf a key is entered into the open repository dialog the key would end up in the handle (right now it won\u0027t because it doesn\u0027t allow dashes). JiraTaskDataHandler.getJiraIssue() can actually keys as well as ids to download task data.",
    "(In reply to comment #44)\n\u003e I can add TaskList.getTaskByWebUrl(taskUrl) tomorrow.  It will do a search for\n\u003e now.  Will that meet this use case?\n\nNot sure what search.\n\n\u003e By \"above\" I was referring to the first paragraph of comment#41.\n\nI don\u0027t think it will help because we may have key in our hands, but no task data, so there will be no id to use.\n\n\u003e The JIRA Connector should never use the key for the ID.  That\u0027s not happening\n\u003e anywhere, is it?\n\nThat is exactly what is happening in Open Remote Task dialog and in Open Corresponding Task action. I guess for those actions, the only option is to make those things to use taskWebUrl for searching trough TaskList.",
    "I think we need to differentiate the different possible cases here:\n\nCurrent implementation:\n\n1) task is in task list: look up by handle\n TasksUiUtil.openRepositoryTask() -\u003e TaskList.getTask()\n \n - Fails for JIRA keys since handle is composed of id\n\n2) task is not in task list\n TasksUiUtil.openRepositoryTask() -\u003e AbstractRepositoryConnecotr.openRepositoryTask()\n -\u003e OpenRepositoryTaskJob.run()\n \n 2a) task data available\n Open editor\n\n - Throws exception while constructing handle but would work for JIRA since task can be retrieved by key as well as id.\n \n 2b) task data not available\n Open url: AbstractRepositoryConnecotr.getTaskWebUrl()\n\n - Works for keys but not for ids?\n",
    "Steffen, we probably should step to the starting point for those. At least for \"Open Repository Task\" and \"Open Correspond Task\" we do know repository url and key (not id). Both of those actions need to check if task is in the task list.\n\n",
    "\u003e Steffen, we probably should step to the starting point for those. At least for\n\u003e \"Open Repository Task\" and \"Open Correspond Task\" we do know repository url and\n\u003e key (not id). Both of those actions need to check if task is in the task list.\n\nDon\u0027t we need some type of mapping from keys to ids in AbstractConnector then?",
    "We could definitely add that at some point, but currently keys are JIRA-specific, so it\u0027s not API yet.\n\nSteffen: the policy you describe is in TasksUiUtil.openRepositoryTask(String repositoryUrl, String taskId, String fullUrl).  Can you just use that?  It will do the lookup based on URL if the key is not found, so I think it would make JiraHyperLink work?  But for both this and OpenRepositoryTask.openRemoteTask(..) you will need a mechanism for getting either the ID or the URL for a JIRA task given the key.  OpenRepositoryTask might need to be extended to use a connector so that it can work in a JIRA specific way.\n\nDo you want to give this a try?  If you put that mechanism in place I could also help out.",
    "(In reply to comment #49)\n\u003e Don\u0027t we need some type of mapping from keys to ids in AbstractConnector then?\n\nNot really. The use case is to be able to find existing Task by repository id and key (or by webTaskUrl, which is derived from those two an can be created by any connector). Because TaskList has list of tasks, all we need is to search trough those tasks. So, I think that searching by webTaskUrl will be less error prone and won\u0027t require TaskList to know about connectors.\n",
    "(In reply to comment #50)\n\u003e We could definitely add that at some point, but currently keys are\n\u003e JIRA-specific, so it\u0027s not API yet.\n\nThe API is AbstractRepositoryConnector.getTaskWebUrl(..) for JIRA it assumes key and not id. The reason is that this key is the identity that user see (for bugzilla that identity is the id).\n\n\u003e Steffen: the policy you describe is in TasksUiUtil.openRepositoryTask(String\n\u003e repositoryUrl, String taskId, String fullUrl).  Can you just use that?  It will\n\u003e do the lookup based on URL if the key is not found, so I think it would make\n\u003e JiraHyperLink work?  \n\nIt don\u0027t really need to know anything about key and can just use full task use wich will be the same as returned by AbstractRepositoryConnector.getTaskWebUrl()\n\n\u003e But for both this and\n\u003e OpenRepositoryTask.openRemoteTask(..) you will need a mechanism for getting\n\u003e either the ID or the URL for a JIRA task given the key.  OpenRepositoryTask\n\u003e might need to be extended to use a connector so that it can work in a JIRA\n\u003e specific way.\n\nOnce again, we can just use task web url, which can be constructed from repository url and id/key.\n\n\u003e Do you want to give this a try?  If you put that mechanism in place I could\n\u003e also help out.\n\nSo, the only missing piece is to search TaskList by webTaskUrl.\n",
    " (In reply to comment #52)\n\u003e So, the only missing piece is to search TaskList by webTaskUrl.\n\nDone: TaskList.getRepositoryTask(String taskUrl).  Currently does a search, but we can consider maintaining a map if this ends up being used frequently.  I\u0027ve updated TasksUiUtil.openRepositoryTask(String repositoryUrl, String taskId, String fullUrl) to use this method.  Let me know if you need anything else.",
    "What\u0027s left on this?  I just checked and Open Corresponding Task is working from the synchronize view.  The thing that\u0027s failing with the usual exception, e.g. \"invalid handle for task, can not contain: -, was: CAL-88\" is hyperlinking in the JIRA Task Editor.  It would be really nice to have that working for 2.0M1.  We should be freezing early aft, but a localized change like this can come anytime before 4pm PST or so.\n\nEugene, Steffen, is this a starightforward fix for either of you guys?  Anything else broken, e.g. Open Corresponding Task from a comment?",
    "Created an attachment (id\u003d59188)\nPatch for TasksUiUtil\n\nThis patch is needed to make JIRA hyperlink detector work.",
    "Created an attachment (id\u003d59189)\nmylar/context/zip\n\n",
    "There is still an issue with OpenRepositoryTaskJob.run(), so Open Corresponding Task does not work in both Sync and History view\n\nThe following logic does not work for JIRA when job is invoked from History view:\n\n\t\t\t\tRepositoryTaskData downloadedTaskData \u003d null;\n\t\t\t\tdownloadedTaskData \u003d offlineHandler.getTaskData(repository, taskId);\n\t\t\t\tif (downloadedTaskData !\u003d null) {\n\t\t\t\t\tTasksUiPlugin.getDefault().getTaskDataManager().push(RepositoryTaskHandleUtil.getHandle(repository.getUrl(), taskId), \n\t\t\t\t\t\t\tdownloadedTaskData);\n\t\t\t\t}\n\t\t\t\topenEditor(repository, RepositoryTaskHandleUtil.getHandle(repository.getUrl(), taskId), taskId, downloadedTaskData);\n\nI think that downloadedTaskData should return handle id instead of calculating it using this bad bad bad method RepositoryTaskHandleUtil.getHandle().\nMik, this would be too big change for a patch. Can you please do that?",
    "Patch didn\u0027t work because JiraHyperLink was not using the method you patched.  What I did for 2.0M1 is made JiraHyperLink.open() do the search and it works now, so it\u0027s great that we\u0027ll have your key-based hyperlinking out with 2.0M1.  Also, if you want to use it I added a TasksUiUtil.openRepositoryTask(String taskUrl) method that tries to open first with rich editor then with Browser.\n\n\t\t\tfor (ITask task : TasksUiPlugin.getTaskListManager().getTaskList().getAllTasks()) {\n\t\t\t\tif (task instanceof JiraTask) {\n\t\t\t\t\tJiraTask jiraTask \u003d (JiraTask)task;\n\t\t\t\t\tif (jiraTask.getKey() !\u003d null \u0026\u0026 jiraTask.getKey().equals(key)) {\n\t\t\t\t\t\tTasksUiUtil.refreshAndOpenTaskListElement(jiraTask);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\nRob: if there is time after 3.2 testing I\u0027ll get you to take a look at the problem when invoking from the History view.",
    "Eugene: my bad, I didn\u0027t have your latest changes synched.  I\u0027m not sure which implementation we should keep, so I\u0027ll just go with yours for now and override mine.",
    "(In reply to comment #58)\n\u003e Patch didn\u0027t work because JiraHyperLink was not using the method you patched. \n\nIt would, if you\u0027d updated from the CVS.\n\n\u003e What I did for 2.0M1 is made JiraHyperLink.open() do the search and it works\n\u003e now, so it\u0027s great that we\u0027ll have your key-based hyperlinking out with 2.0M1.\n\nThis bouncing back and forth is becoming really tiresome.\n\n\u003e Also, if you want to use it I added a TasksUiUtil.openRepositoryTask(String\n\u003e taskUrl) method that tries to open first with rich editor then with Browser.\n\nMik, you need to pass trough and really clean mess of TaskList.getTask*() and TasksUiUtil.open*() methods...",
    " (In reply to comment #60)\n\u003e Mik, you need to pass trough and really clean mess of TaskList.getTask*() and\n\u003e TasksUiUtil.open*() methods...\n\nAgreed that the back-and-forth on this bug was annoying.\n\nYes, I added a note on that to that class earlier today.  On top of this we have scatterred logic throughout the clients of the TasksUiUtil methods.  Created bug 174509 for this.\n\nYou implementation was still failing for my tests, possibly because I have some old bogus JIRA tasks in my Task List without proper repositories mapped.  I temporarily put mine back because it is safer, and made a note that we should switch back in the code.",
    "(In reply to comment #61)\n\u003e You implementation was still failing for my tests, possibly because I have some\n\u003e old bogus JIRA tasks in my Task List without proper repositories mapped.  \n\nAHA! Now you can try to delete them and maybe then you will realize what I have to deal with...",
    " (In reply to comment #61)\n\u003e You implementation was still failing for my tests, possibly because I have some\n\u003e old bogus JIRA tasks in my Task List without proper repositories mapped.  I\n\u003e temporarily put mine back because it is safer, and made a note that we should\n\u003e switch back in the code.\n\nWell, your implementation won\u0027t work either. You assuming that task for the found hyperlink should be in the task list. My implementation was capable of opening both existing and remote tasks, but may fail if there are some stale tasks (i.e. weblinked tasks or tasks from the web connector). Not sure how we can get around that, but we do know connector type and even repository for that tasks. So, maybe search should work only trough tasks from that repository, but that should be happening in the OpenRepositoryTaskJob and not in the JIRA hyperlink detector.",
    "\u003e This bouncing back and forth is becoming really tiresome.\n\nI agree and I am sorry it took me so long to understand the scope of the problem.\n\nI have to admit though that I am not very happy with the solution we have now. The JIRA API is very unclear about when it expects a key and when an id. Furthermore we still have not solved the fundamental issues that are caused by the key/id ambiguity. Instead we have patched the symptoms by using the URL for lookup which happens to be constructed by key. \n\nThe handle is constructed from a key provided by the user (it is even possible to create different handles for the same task using different casing) which is not good and still throws an exception. \n\nWe won\u0027t get this fixed in 2.0M1 but I am going to take a shot at creating a patch this weekend that will use a mapping function as mentioned in comment 49. \n",
    "Steffen: I agree.  For now I think the mapping should be restricted to the JIRA Connector, since it is the only one I know of that has this duality but there could be others downstream so it will be a candidate for generalizing.  I actually think it is a good split that JIRA has beetween a robust ID and a human-readable/writable key.  Do you want to make a new bug for this?\n\nEugene: regarding comment#63: yes, good point, we have this \"degraded functionality when task not in list limitation\" pop up in a few other places too.  Created bug 174521.  ",
    "(In reply to comment #65)\n\u003e Steffen: I agree.  For now I think the mapping should be restricted to the JIRA\n\u003e Connector...\n\nI can\u0027t take this anymore.",
    " (In reply to comment #66)\n\u003e I can\u0027t take this anymore.\n\nClearly we have a misunderstanding, and if it\u0027s because of my rushing with this to get the other release bits done I apologize.  I can Skype with you for a bit so that we can sort out what I\u0027m not understanding.",
    "(In reply to comment #64)\n\u003e We won\u0027t get this fixed in 2.0M1 but I am going to take a shot at creating a\n\u003e patch this weekend that will use a mapping function as mentioned in comment 49. \n\nSteffen, please don\u0027t do this! Each task does have web url, and each connector know how to construct that url from the user-readable key (or id). That url (and connector/repository type) is sufficient for retrieving task from the task list or even remote task. The problem we are suffering now is that common code is still constructing handles even for the cases when task instance is around and handle can be retrieved from the task.\n\nPS: the weirdest part is that I\u0027ve been waiting for about two months to see this fixed, but all it takes is to actually remove throwing this exception. So, even handle is invalid, it is usually used to get task from the task list, so there won\u0027t be task for such broken handle, but all common code fall into full task list scan after that anyways.",
    " (In reply to comment #68)\n\u003e Each task does have web url, and each connector\n\u003e know how to construct that url from the user-readable key (or id). \n\nBasically, we are now using the URL as a unique identifier for tasks (IMHO we should get rid of handles then).\n\nAbstractRepositoryConnector.getTaskWebUrl() and getTaskIdFromTaskUrl() are exactly the mapping functions is was talking about. These needs to be fixed for JIRA though. The former should work for handles as well as ids whereas the later should always return the id and never the key.\n\n\u003e PS: the weirdest part is that I\u0027ve been waiting for about two months to see this\n\u003e fixed, but all it takes is to actually remove throwing this exception. So, even\n\u003e handle is invalid, it is usually used to get task from the task list, so there\n\u003e won\u0027t be task for such broken handle, but all common code fall into full task\n\u003e list scan after that anyways.\n\nAllowing the construction of invalid handles does not seem like a good idea to me.\n\n",
    "Let\u0027s discuss this during the meeting next Tuesday.  It\u0027s an important and tricky issue.  Just fyi, while connectors can dynamically create URLs to uniquely identify tasks, we can\u0027t use that format for persisting the identity (e.g. in contexts) because URL handles contain segments that are implementation details and can change (e.g. show_bug.cgi).",
    "(In reply to comment #69)\n\u003e Basically, we are now using the URL as a unique identifier for tasks (IMHO we\n\u003e should get rid of handles then).\n\nIt doesn\u0027t have to be unique.\n\n\u003e AbstractRepositoryConnector.getTaskWebUrl() and getTaskIdFromTaskUrl() are\n\u003e exactly the mapping functions is was talking about. These needs to be fixed for\n\u003e JIRA though. The former should work for handles as well as ids whereas the\n\u003e later should always return the id and never the key.\n\nI am not quite sure about that. You will need server roundtrip or look trough TaskList to get id from JIRA task key. Since task data retrieveal will require key anyways, it seem not necessary.\n\n\u003e \u003e PS: the weirdest part is that I\u0027ve been waiting for about two months to see this\n\u003e \u003e fixed, but all it takes is to actually remove throwing this exception. So, even\n\u003e \u003e handle is invalid, it is usually used to get task from the task list, so there\n\u003e \u003e won\u0027t be task for such broken handle, but all common code fall into full task\n\u003e \u003e list scan after that anyways.\n\u003e \n\u003e Allowing the construction of invalid handles does not seem like a good idea to\n\u003e me.\n\nWell, I bet it would fix most of the current issues. I think it would be a better idea then wait another two months...",
    "\u003e \u003e AbstractRepositoryConnector.getTaskWebUrl() and getTaskIdFromTaskUrl() are\n\u003e \u003e exactly the mapping functions is was talking about. These needs to be fixed\n\u003e for\n\u003e \u003e JIRA though. The former should work for handles as well as ids whereas the\n\u003e \u003e later should always return the id and never the key.\n\u003e I am not quite sure about that. You will need server roundtrip or look trough\n\u003e TaskList to get id from JIRA task key. Since task data retrieveal will require\n\u003e key anyways, it seem not necessary.\n\nGood point. I was more arguing from an API point of view. I suggest that we make it clear by adding comments and renaming variables for JIRA when a key is expected (e.g. use these as variable names: keyOrId, key, id).\n\n\u003e \u003e \u003e PS: the weirdest part is that I\u0027ve been waiting for about two months to see\n\u003e this\n\u003e \u003e \u003e fixed, but all it takes is to actually remove throwing this exception. So,\n\u003e even\n\u003e \u003e \u003e handle is invalid, it is usually used to get task from the task list, so\n\u003e there\n\u003e \u003e \u003e won\u0027t be task for such broken handle, but all common code fall into full\n\u003e task\n\u003e \u003e \u003e list scan after that anyways.\n\u003e \u003e\n\u003e \u003e Allowing the construction of invalid handles does not seem like a good idea to\n\u003e \u003e me.\n\u003e Well, I bet it would fix most of the current issues. I think it would be a\n\u003e better idea then wait another two months...\n\nI agree. I will attach a patch shortly that does not use the broken handle for the task editor input but constructs a \"clean\" handle.\n",
    "Created an attachment (id\u003d59228)\nFixes opening of remote tasks for JIRA\n\nThis patch fixes the handle construction for remote tasks. It also escapes handles that contain dashes. Please note, that this does not mean that JIRA ever uses dashes to construct handles but other connectors might need to do that. For JIRA the task list lookup by handle will fail and it will fall back to downloading the task data.\n\nThe downside to handle escaping is that we may need to convert existing handles whenever deriving ids from handles is not required anymore and therefore the escaping can be dropped as well.\n\nI will now shut up and stop adding to the confusion.\n",
    "Created an attachment (id\u003d59896)\ndisable \"corectness\" in a favor to something that can be actually used\n\nIt seems like it is taking way to long to fix this issue. So, I am strongly suggesting to remove correctness check (as in the attached patch), so JIRA linking features will be actually usable. Mik, you can refactor it later to make it comletetly correct, but now we just have to make it work (at any price).\n\nAlso note, that commenting this makes open repository task and open correspong actions work fine for JIRA tasks. Though there is a weird bug, when opening corresponding JIRA task that is not in the Task List, task editor show internal JIRA id and not the key, which is completely confusing.",
    "Most recent patch applied, next to most recent OpenRepositoryTaskJob part of patch applied.",
    "Fyi, I did not have time to verify the behavior for JIRA.  Can do so on Friday.",
    "(In reply to comment #75)\n\u003e Most recent patch applied, next to most recent OpenRepositoryTaskJob part of\n\u003e patch applied.\n\nThanks Mik. Can you please put in a dev build with those changes and Rob\u0027s fix for JIRA detector for the text editors?",
    "I get an exception when opening a remote JIRA task. I can take a look later today.\n\norg.eclipse.core.runtime.AssertionFailedException: assertion failed: \n\tat org.eclipse.core.runtime.Assert.isTrue(Assert.java:109)\n\tat org.eclipse.core.runtime.Assert.isTrue(Assert.java:95)\n\tat org.eclipse.ui.part.MultiPageEditorPart.setActivePage(MultiPageEditorPart.java:690)\n\tat org.eclipse.ui.forms.editor.FormEditor.setActivePage(FormEditor.java:624)\n\tat org.eclipse.ui.part.MultiPageEditorPart.createPartControl(MultiPageEditorPart.java:282)\n\t[...]\n\t",
    "Added check to JiraTaskDataHandler if task was downloaded successfully and fixed the construction of handle that I missed in the original patch. I was able to open a remote JIRA task in an editor with these fixes.\n\nI think the assertion is triggered when the web browser widget is disabled and no rich editor is available.\n",
    "*** Bug 174521 has been marked as a duplicate of this bug. ***",
    "As far as I can tell we\u0027re done here.  Remaining work related to this should go on bug 149624."
  ],
  "commentCreationDates": [
    "2006-11-29T10:46:42+01:00",
    "2006-12-08T19:44:36+01:00",
    "2006-12-08T19:48:17+01:00",
    "2006-12-08T19:56:55+01:00",
    "2006-12-08T20:03:25+01:00",
    "2006-12-08T20:10:52+01:00",
    "2006-12-08T20:21:02+01:00",
    "2006-12-09T20:00:18+01:00",
    "2006-12-11T00:12:38+01:00",
    "2007-01-16T17:22:29+01:00",
    "2007-01-16T17:26:40+01:00",
    "2007-01-16T17:38:40+01:00",
    "2007-01-16T17:45:04+01:00",
    "2007-01-16T18:28:59+01:00",
    "2007-01-22T01:53:00+01:00",
    "2007-01-25T20:46:15+01:00",
    "2007-01-25T20:52:28+01:00",
    "2007-01-25T20:58:18+01:00",
    "2007-01-26T01:08:36+01:00",
    "2007-01-26T05:14:40+01:00",
    "2007-01-26T16:01:28+01:00",
    "2007-01-26T16:10:52+01:00",
    "2007-01-26T16:21:05+01:00",
    "2007-01-26T16:36:15+01:00",
    "2007-01-26T19:42:45+01:00",
    "2007-01-26T19:42:50+01:00",
    "2007-02-02T05:06:30+01:00",
    "2007-02-14T06:14:54+01:00",
    "2007-02-14T06:26:32+01:00",
    "2007-02-14T06:31:31+01:00",
    "2007-02-14T06:44:47+01:00",
    "2007-02-14T06:52:47+01:00",
    "2007-02-14T07:04:12+01:00",
    "2007-02-14T07:09:03+01:00",
    "2007-02-14T07:22:27+01:00",
    "2007-02-14T17:35:48+01:00",
    "2007-02-14T17:41:39+01:00",
    "2007-02-14T17:49:00+01:00",
    "2007-02-14T17:50:09+01:00",
    "2007-02-14T19:20:54+01:00",
    "2007-02-14T19:38:03+01:00",
    "2007-02-14T20:00:33+01:00",
    "2007-02-14T20:17:30+01:00",
    "2007-02-14T20:49:53+01:00",
    "2007-02-15T02:07:27+01:00",
    "2007-02-15T02:22:15+01:00",
    "2007-02-15T02:37:42+01:00",
    "2007-02-15T03:01:14+01:00",
    "2007-02-15T03:23:39+01:00",
    "2007-02-15T19:27:20+01:00",
    "2007-02-15T19:37:06+01:00",
    "2007-02-15T19:46:54+01:00",
    "2007-02-15T19:52:55+01:00",
    "2007-02-15T20:16:49+01:00",
    "2007-02-16T18:32:42+01:00",
    "2007-02-16T19:31:51+01:00",
    "2007-02-16T19:31:53+01:00",
    "2007-02-16T19:42:38+01:00",
    "2007-02-16T20:38:30+01:00",
    "2007-02-16T20:43:29+01:00",
    "2007-02-16T20:49:55+01:00",
    "2007-02-16T20:59:59+01:00",
    "2007-02-16T21:11:20+01:00",
    "2007-02-16T21:40:49+01:00",
    "2007-02-16T22:04:08+01:00",
    "2007-02-16T22:11:39+01:00",
    "2007-02-16T22:18:21+01:00",
    "2007-02-16T22:33:22+01:00",
    "2007-02-17T00:53:37+01:00",
    "2007-02-17T03:55:50+01:00",
    "2007-02-17T04:06:25+01:00",
    "2007-02-17T04:08:17+01:00",
    "2007-02-17T17:03:46+01:00",
    "2007-02-17T17:26:04+01:00",
    "2007-02-27T17:59:18+01:00",
    "2007-02-27T21:00:04+01:00",
    "2007-02-27T21:00:57+01:00",
    "2007-02-27T21:06:47+01:00",
    "2007-02-27T21:13:45+01:00",
    "2007-02-28T06:13:09+01:00",
    "2007-03-09T05:51:58+01:00",
    "2007-04-10T05:17:26+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "invalid handle for task, can not contain: -, was: MNGECLIPSE-9",
      "elements": [
        {
          "method": "org.eclipse.mylar.tasks.core.AbstractRepositoryTask.getHandle",
          "source": "AbstractRepositoryTask.java:138"
        },
        {
          "method": "org.eclipse.mylar.internal.tasks.ui.TasksUiUtil.openRepositoryTask",
          "source": "TasksUiUtil.java:120"
        },
        {
          "method": "org.eclipse.mylar.internal.team.ui.actions.OpenCorrespondingTaskAction.run",
          "source": "OpenCorrespondingTaskAction.java:105"
        },
        {
          "method": "org.eclipse.mylar.internal.team.ui.actions.OpenCorrespondingTaskAction.run",
          "source": "OpenCorrespondingTaskAction.java:76"
        },
        {
          "method": "org.eclipse.ui.internal.PluginAction.runWithEvent",
          "source": "PluginAction.java:253"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:539"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$2",
          "source": "ActionContributionItem.java:488"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$5.handleEvent",
          "source": "ActionContributionItem.java:400"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:925"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3463"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3077"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1924"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1888"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:419"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:78"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:104"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:74"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:348"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:165"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:341"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:285"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:987"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:962"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "166174",
      "date": "2006-11-29T10:46:42+01:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "minor"
    },
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "invalid handle for task, can not contain: -, was: MNGECLIPSE-171",
      "elements": [
        {
          "method": "org.eclipse.mylar.tasks.core.AbstractRepositoryTask.getHandle",
          "source": "AbstractRepositoryTask.java:138"
        },
        {
          "method": "org.eclipse.mylar.tasks.ui.TasksUiUtil.openRepositoryTask",
          "source": "TasksUiUtil.java:121"
        },
        {
          "method": "org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.openRemoteTask",
          "source": "OpenRepositoryTask.java:89"
        },
        {
          "method": "org.eclipse.mylar.internal.tasks.ui.actions.OpenRepositoryTask.run",
          "source": "OpenRepositoryTask.java:51"
        },
        {
          "method": "org.eclipse.ui.internal.PluginAction.runWithEvent",
          "source": "PluginAction.java:253"
        },
        {
          "method": "org.eclipse.ui.internal.WWinPluginAction.runWithEvent",
          "source": "WWinPluginAction.java:229"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection",
          "source": "ActionContributionItem.java:545"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem.access$2",
          "source": "ActionContributionItem.java:490"
        },
        {
          "method": "org.eclipse.jface.action.ActionContributionItem$5.handleEvent",
          "source": "ActionContributionItem.java:402"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:66"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:928"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:3465"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:3079"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runEventLoop",
          "source": "Workbench.java:1945"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.runUI",
          "source": "Workbench.java:1909"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.createAndRunWorkbench",
          "source": "Workbench.java:425"
        },
        {
          "method": "org.eclipse.ui.PlatformUI.createAndRunWorkbench",
          "source": "PlatformUI.java:149"
        },
        {
          "method": "org.eclipse.ui.internal.ide.IDEApplication.run",
          "source": "IDEApplication.java:95"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod",
          "source": "EclipseAppContainer.java:522"
        },
        {
          "method": "org.eclipse.equinox.internal.app.EclipseAppHandle.run",
          "source": "EclipseAppHandle.java:147"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication",
          "source": "EclipseAppLauncher.java:104"
        },
        {
          "method": "org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start",
          "source": "EclipseAppLauncher.java:74"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:354"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:170"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:585"
        },
        {
          "method": "org.eclipse.core.launcher.Main.invokeFramework",
          "source": "Main.java:339"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:283"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:984"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:959"
        }
      ],
      "number": 1,
      "commentIndex": 17,
      "bugId": "166174",
      "date": "2007-01-25T20:58:18+01:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "minor"
    },
    {
      "exceptionType": "java.lang.RuntimeException",
      "message": "invalid handle for task, can not contain: -, was: MNG-2820",
      "elements": [
        {
          "method": "org.eclipse.mylar.internal.tasks.core.RepositoryTaskHandleUtil.getHandle",
          "source": "RepositoryTaskHandleUtil.java:29"
        },
        {
          "method": "org.eclipse.mylar.tasks.core.TaskList.getTask",
          "source": "TaskList.java:401"
        },
        {
          "method": "org.eclipse.mylar.internal.jira.ui.JiraTaskDataHandler.getJiraIssue",
          "source": "JiraTaskDataHandler.java:78"
        },
        {
          "method": "org.eclipse.mylar.internal.jira.ui.JiraTaskDataHandler.getTaskData",
          "source": "JiraTaskDataHandler.java:58"
        },
        {
          "method": "org.eclipse.mylar.tasks.ui.OpenRepositoryTaskJob.run",
          "source": "OpenRepositoryTaskJob.java:84"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 2,
      "commentIndex": 27,
      "bugId": "166174",
      "date": "2007-02-14T06:14:54+01:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "minor"
    },
    {
      "exceptionType": "org.eclipse.core.runtime.AssertionFailedException",
      "message": "assertion failed:",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.Assert.isTrue",
          "source": "Assert.java:109"
        },
        {
          "method": "org.eclipse.core.runtime.Assert.isTrue",
          "source": "Assert.java:95"
        },
        {
          "method": "org.eclipse.ui.part.MultiPageEditorPart.setActivePage",
          "source": "MultiPageEditorPart.java:690"
        },
        {
          "method": "org.eclipse.ui.forms.editor.FormEditor.setActivePage",
          "source": "FormEditor.java:624"
        },
        {
          "method": "org.eclipse.ui.part.MultiPageEditorPart.createPartControl",
          "source": "MultiPageEditorPart.java:282"
        }
      ],
      "number": 3,
      "commentIndex": 78,
      "bugId": "166174",
      "date": "2007-02-27T21:13:45+01:00",
      "product": "Mylyn",
      "component": "Tasks",
      "severity": "minor"
    }
  ],
  "groupId": "166174",
  "bugId": "166174",
  "date": "2006-11-29T10:46:42+01:00",
  "product": "Mylyn",
  "component": "Tasks",
  "severity": "minor"
}