{
  "comments": [
    "This bug originally filed in glassfish(glassfish bug 3827). Abstract description from original as following:-\n\nhaving the path to the project or the project name have multibyte in it\n(project name means a directory is created with that name, under the project\nlocation you provide) \nND having the toplink jars be the ones in v2build58.\n\nthen choose some dbase connection; default is the javadb/derby\nthat comes with nb; data does not need to have  multibyte in it.\n\nThen do clean and build first, then run and you get the problems\ndescribed in netbeans issue 1195We\u0027ve seen that as in issuezilla 119567, that\nwhen multibyte is used in a path to this project,\nand when current, v2 build 58g toplink is used,\nthere are errors from toplink and the application\ndoes not run.  (if mbyte not used, there is no problem)\n\nhttp://www.netbeans.org/issues/show_bug.cgi?id\u003d119567\n\nBut its ok with toplink from v2 build 36\n(we only recently upgraded the toplink jars we use in\nnb from 36 to 58g) \n\ntoplink exception\n\njavax.persistence.Persistence.createEntityManagerFactory(\"samplePU\")\ncall fails with the following exception\n\njavax.persistence.PersistenceException:\nNo Persistence provider for EntityManager named samplePU: The following providers:\noracle.toplink.essentials.PersistenceProvider\noracle.toplink.essentials.ejb.cmp3.EntityManagerFactoryProvider\nReturned null to createEntityManagerFactory.\nat javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:154)\nat javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:83)\n...\n\nwhen a standalone (J2SE) application is executed in a directory with multibyte\ncharacters (both, the application jar file and TopLink classes are in such\ndirectory). The same application works correctly when executed in a directory\nwith ASCII characters only.",
    "following code can reproduce the bug(the code has been slightly modified from its original version provided by glassfish)\n\npublic class MultiByteDirNameTest {\n   public static void main(String[] args) throws Exception {\n       URL origURL \u003d ClassLoader.getSystemResource(\"MultiByteDirNameTest.class\");\n       System.out.println(\"origURL \u003d \" + origURL);\n       URI origURI \u003d origURL.toURI();\n       System.out.println(\"origURI \u003d \" + origURI);\n       File f \u003d new File(origURI);\n       System.out.println(\"f \u003d \" + f);\n       URI newURI \u003d f.toURI();\n       System.out.println(\"newURI \u003d \" + newURI);\n       URL newURL \u003d newURI.toURL();\n       System.out.println(\"newURL \u003d \" + newURL);\n       boolean areBothURLsSame \u003d origURL.equals(newURL);\n       System.out.println(\"areBothURLsSame \u003d \" + areBothURLsSame);\n       boolean areBothURIsSame \u003d origURI.equals(newURI);\n       System.out.println(\"areBothURIsSame \u003d \" + areBothURIsSame);\n       areBothURLsSame \u003d (URLDecoder.decode(origURL.toString(),\"UTF8\")).equals(URLDecoder.decode(newURL.toString(),\"UTF8\"));\n       System.out.println(\"decoded string areBothURLsSame \u003d \" + areBothURLsSame);\n       areBothURIsSame \u003d (URLDecoder.decode(origURI.toString(),\"UTF8\")).equals(URLDecoder.decode(newURI.toString(),\"UTF8\"));\n       System.out.println(\"decoded string areBothURIsSame \u003d \" + areBothURIsSame);\n   }\n}\n\norigURL \u003d file:/C:/Project/Essentials/%e9%a1%b9%e7%9b%ae/bin/MultiByteDirNameTest.class\norigURI \u003d file:/C:/Project/Essentials/%e9%a1%b9%e7%9b%ae/bin/MultiByteDirNameTest.class\nf \u003d C:\\Project\\Essentials\\\u0026#39033;\u0026#30446;\\bin\\MultiByteDirNameTest.class\nnewURI \u003d file:/C:/Project/Essentials/\u0026#39033;\u0026#30446;/bin/MultiByteDirNameTest.class\nnewURL \u003d file:/C:/Project/Essentials/\u0026#39033;\u0026#30446;/bin/MultiByteDirNameTest.class\nareBothURLsSame \u003d false\nareBothURIsSame \u003d false\nareBothDecodedURLsSame \u003d true\nareBothDecodedURIsSame \u003d true\n\n\n",
    "Created an attachment (id\u003d82562)\nbug209348 patch\n\n",
    "The bug has been fixed by decoding the URL of the path to the application containing persistence.xml while building the full name for persistence unit."
  ],
  "commentCreationDates": [
    "2007-11-09T15:51:36+01:00",
    "2007-11-09T19:41:28+01:00",
    "2007-11-09T19:44:06+01:00",
    "2007-11-09T19:50:19+01:00"
  ],
  "traces": [
    {
      "exceptionType": "javax.persistence.PersistenceException",
      "message": "No Persistence provider for EntityManager named samplePU: The following providers: oracle.toplink.essentials.PersistenceProvider oracle.toplink.essentials.ejb.cmp3.EntityManagerFactoryProvider Returned null to createEntityManagerFactory.",
      "elements": [
        {
          "method": "javax.persistence.Persistence.createEntityManagerFactory",
          "source": "Persistence.java:154"
        },
        {
          "method": "javax.persistence.Persistence.createEntityManagerFactory",
          "source": "Persistence.java:83"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "209348",
      "date": "2007-11-09T15:51:36+01:00",
      "product": "EPS(EclipseLink)",
      "component": "ORM",
      "severity": "normal"
    }
  ],
  "groupId": "209348",
  "bugId": "209348",
  "date": "2007-11-09T15:51:36+01:00",
  "product": "EPS(EclipseLink)",
  "component": "ORM",
  "severity": "normal"
}