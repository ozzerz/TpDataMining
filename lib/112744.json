{
  "comments": [
    "Tomcat: unecessary web-app re-deploy caused by unecessary timestamp change of\nutility project JAR\n\nTC: 5.5.9\n\nComponent: I have initially assigned to web.server as thats where the problem\ncan be seen.  However I believe the bug to be some other component and dont know\nwhich at this time.\n\n\n\nProblem:\n\nIf I externally edit a website asset (CSS file, or GIF, etc...) then I click\nRefresh on my project (this is the only way I know how to get WTP to publish the\nchange to the Tomcat server, I\u0027m still using .deployables).\n\nEclipse then for a moment examines the project, it them seems to start \"Building\nworkspace\" and very quickly completes the Refresh.\n\nThen my web-app is re-deployed by Tomcat.  This confused me to start with since\na change to a *.css file should not cause TC to automatically de-deploy the web-app.\n\nI found the cause to be that two *.jar files in WEB-INF/lib that come from\nutility projects got their timestamps updated.  Presumably they were re-built,\nbut I did not make any modification to either of those other projects.\n\n\n\nSuggested Solution Ideas:\n\nEclipse should not have rebuilt the JARs.  I presume the timestamp update was a\nre-zip of all the contents in the JAR, this is unecessary work when the utility\nproject itself has not been updated.\n\n\n\u003cguessBasedOnNoRealFacts\u003e\nOne problem might be that there is no intermediate storage of the utility JAR. \nWhat I mean by this that for each contributing utility project in use by a\nweb-app project the process of exporting the JAR should do so to an intermediate\nlocation first.  This could simple be a temporary filename in the WEB-INF/lib\ndirectory.\n\nThen for a moment you have two JARs which you can do a simple file compare on\nand then rename / copy if there is a difference (or if there is no file at all\nin WEB-INF/lib).\n\nI am unsure how the current \"export JAR from utility project to web-app project\"\nprocess works.  I _REALLY_HOPE_ it does not just truncate the existing file and\nbuild the new JAR over the top, this is very bad practice and I have already\nseen random JVM crashes (OS process coredump) that crashes out within calls to\nthe underlying zip library within the JVM (I have no proof these crashes are\nrelated to this bug).  You must remember there maybe the server JVM already\nactive and working on that JAR file and anything that has a *.jar extension is a\ncandidate for another background thread to open expecting to find a full JAR file.\n\nThe problem with overwriting in situation is that with multiple threads the\nbackground thread has the posibility of opening up what looks like a corrupted\nZIP file.  Which isn\u0027t really corrupt just incomplete as another thread is still\nwrite() to the file.\n\nIn a perfect world the update file process would be performed like:\n\n* delete WEB-INF/lib/mylib.jar.tmp\n\n* create new file empty file WEB-INF/lib/mylib.jar.tmp, some OSes allow for\nexclusive file creation, meaning you are garunteed to be the only user of the\nhost that created that file, use this option if available to Java, if you get an\nerror because some other thread/process stole your creat() then you simply\ndelete the file the other thread/process created and go again.  Do this a set\nnumber of time then abort on error if you cant get exclusive file creation.\n\n* Then write new JAR data to WEB-INF/lib/mylib.jar.tmp write to that file\n\n* Once its sucessfully written do a filesystem rename to WEB-INF/lib/mylib.jar\n\n* For the zelouts out there making the name more unique would be an even better\nsolution than simply sticking .tmp on the end.  Maybe the thread/process ID\ncould be added, something OS and JVM unique.\n\u003c/guessBasedOnNoRealFacts\u003e",
    "Just to add to this, I can observe \"deployment bouncing\".  That is during Tomcat\nserver start Eclipse correctly waits for the project build to complete, then\nexecutes the server start.\n\nBut then in the background another build starts to take place again.  Something\ngets updated and then Tomcat re-deploys the application.  \n\nThen another background build starts again.... Something gets updated and then\ntomcat re-reploys the application.  and-on, and-on...\n\nUnder such circumstances Tomcat is never stable to be able to test with, since\nits either still on its way up or it on it way down / not running yet.\n\nI have automatic building enabled, switching it off halts this bouncing.\n\n\nIf left on its own Tomcat ultimatly dies with a Thread Death, after boucing\nquite a number of times (~10 times).   My understanding of this Thread Death is\nits the result of the revoked WebappClassLoader instance used by an now dead\nweb-app instance when there is one or more threads still active in Tomcat under\nthe old context.  A long standing annoyance developers have with how Tomcat works.\n\nMy build process takes longer than deployment.  It includes two jst.utility\nprojects into a web project.\n\n\nI\u0027m not sure if its 100% the fault of the JAR timestamp changes for this one,\nwhen that occurs I sometimes see Tomcat make a log entry indicating a changed JAR.\n\nI believe its the component structural builder that exports the jst.utility\nproject into the jst.web project, or at least has some involvement in the\nprocess.  Does this builder do something in the background (after the main build) ?\n\nMy question really is, why is another project build kicked off AFTER the first\nbuild which the server starts waits for completed, when the user has not made\nany changes to the project(s).\n",
    "Hi,\nI assume that you are using 0.7 or M8? The structural builder has been removed\nin M9, and all of the assembly is done outside of the workspace now. Since this\nis a single job and not kicked off by the build, this problem should actually be\n\u0027resolved\u0027 by the fact that publish doesn\u0027t work like this anymore. Since it\nwon\u0027t republish unless you explicitly ask for it, there shouldn\u0027t be any problem\nwith Tomcat redeploying.\n\nWe still have some work to do to automatically publish in some situations (e.g.,\nwhen html files change), and republish/restart in others. We\u0027ll need to be aware\nof this issue, but I beleive it is mostly irrelevant with the M9 project structure.",
    "Eclipse+WTP 0.7.1.\n\nTim, this is good news to hear.  \n\nI see the M9 schedule is 2/3 weeks away yet, would this coming weeks I build be\nworth me pulling down and using to confirm the situation back to you.  I\u0027m happy\nto wait until M9 if necessary and feedback to this report.\n\nFYI - I also have auto-publish enabled, I\u0027m not sure how that interacts with \"it\nwont republish until you ask it to\".\n\nI only make reference to the component structural builder as I found that when I\ninvestigated why some projects would auto-export jst.utility projects into other\nprojects WEB-INF/lib that it was necessary for the builder to be in the\n.wtpmodules file.  So I shutdown eclipse, manually edited / upgraded my projects\n.wtpmodules file and did a full clean/rebuild.\n",
    "Hi Darryl,\nWhile the I-builds may not be quite as stable, this support is already in last\nweek\u0027s I-build.\n\nNote that the automatic publishing will still publish on that timed interval\nafter a change, but it will not conflict with the build cycle.",
    "Installed wtp-sdk-I20051028, but cant get any project to clean+build.\n\nProgress -\u003e Task Info: Invoking Validation on /myproject\n\n\nSIGQUIT to Eclipse JVM and inspection of the log output:\n\norg.eclipse.core.internal.resources.ResourceException: The resource tree is\nlocked for modifications.\n        at\norg.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:94)\n        at\norg.eclipse.core.internal.resources.Workspace.prepareOperation(Workspace.java:1674)\n        at org.eclipse.core.internal.resources.Resource.move(Resource.java:1189)\n...SNIP...\n\n\nFull thread dump Java HotSpot(TM) Client VM (1.5.0_05-b05 mixed mode, sharing):\n\n\"Worker-7\" daemon prio\u003d1 tid\u003d0x083147a0 nid\u003d0x3505 runnable [0xaca29000..0xaca2aec0]\n        at\norg.eclipse.core.internal.localstore.CoreFileSystemLibrary.internalGetStat(Native\nMethod)\n        at\norg.eclipse.core.internal.localstore.CoreFileSystemLibrary.getStat(CoreFileSystemLibrary.java:116)\n        at\norg.eclipse.core.internal.localstore.FileSystemResourceManager.fastIsSynchronized(FileSystemResourceManager.java:497)\n        at\norg.eclipse.core.internal.localstore.FileSystemResourceManager.isSynchronized(FileSystemResourceManager.java:385)\n        at\norg.eclipse.core.internal.resources.Resource.isSynchronized(Resource.java:1129)\n        at\norg.eclipse.jem.util.emf.workbench.WorkbenchURIConverterImpl.createPlatformResourceInputStream(WorkbenchURIConverterImpl.java:49\n7)\n        at\norg.eclipse.emf.ecore.resource.impl.URIConverterImpl.createInputStream(URIConverterImpl.java:442)\n        at\norg.eclipse.emf.ecore.resource.impl.ResourceImpl.load(ResourceImpl.java:829)\n        at\norg.eclipse.wst.common.internal.emf.resource.TranslatorResourceImpl.load(TranslatorResourceImpl.java:382)\n        - locked \u003c0x7f46e0f8\u003e (a\norg.eclipse.wst.common.componentcore.internal.impl.WTPModulesResource)\n        at\norg.eclipse.wst.common.componentcore.internal.ModuleStructuralModel.getAndLoadLocalResource(ModuleStructuralModel.java:157)\n        - locked \u003c0x7f46e0f8\u003e (a\norg.eclipse.wst.common.componentcore.internal.impl.WTPModulesResource)\n        at\norg.eclipse.wst.common.internal.emfworkbench.integration.EditModel.getResource(EditModel.java:681)\n        at \n...SNIP...\n        at\norg.eclipse.wst.validation.internal.ValidatorMetaData.checkIfValidSourceFile(ValidatorMetaData.java:333)\n        at\norg.eclipse.wst.validation.internal.ValidatorMetaData.isApplicableTo(ValidatorMetaData.java:319)\n        at\norg.eclipse.wst.validation.internal.ValidatorMetaData.isApplicableTo(ValidatorMetaData.java:309)\n        at\norg.eclipse.wst.validation.internal.FilterUtil.filterOut(FilterUtil.java:397)\n        at\norg.eclipse.wst.validation.internal.FilterUtil.filterOut(FilterUtil.java:431)\n        at\norg.eclipse.wst.validation.internal.FilterUtil$1.visit(FilterUtil.java:638)\n...SNIP...\n\n\norg.eclipse.wst.validation seems present with\norg.eclipse.wst.validation.validationbuilder configured as a Builder into most\nof my .project files.\n\nIf you have any time to comment, please advise if you want to know more about\nit, or if I should file another bug report on the issue, I would not naturally\nfile one for a work in progress I-build.\n\nI\u0027ll just regard it as an interim problem which will be fixed by M9 and wait\nuntil then to report back to you.\n\nI have kept the log file data and thread dump info and can attach if someone\nwant to see it.  The problem is reproducable and a show-stopper for me to use\nthis particular I-build.\n",
    "Hi Darryl,\nIf I understand correctly, the workspace is locking when it does a build? Please\ndo not feel hesitant about opening bugs on I-builds, especially one that is that\nbad. Please open a separate, high severity bug for that problem since it is a\ndifferent team and so that we can keep the two issues separate.",
    "Hmm... okay, I have left eclipse running for a few hours and gotten past the\nvalidation problem and disabled it, this I can work around that problem now.\n\nNow the Server\u0027s tab says I dont have any suitable projects to mount as\ncontext\u0027s in tomcat.  If I right click the server entry and \"Add/Remote\nprojects\" I get an Ok error box, \"There are no projects that can be added or\nremoved from the server\".\n\n\n\nI have upgraded to Tomcat 5.5.12 (this was tested and working ok with 0.7.1).\n\nI have deleted my old server configuration that existed, it wasn\u0027t working out\nof the box (due to invalid \u003cContext\u003eMISSING DATA\u003c/Context\u003e problem as reported\nbefore).  This context did also make reference to the .deployables dirctory,\nwhich I wasn\u0027t expecting.\n\nI have cleaned all my project Build Path from .deployable by letting Eclipse\nre-assign the default output folder (this was not possible before, it would\nalways override the setting back to .deployables).\n\nI have disabled the 3 missing component structual builders from all projects.\n\nI have manually cleaned the .deployables folder for all projects.\n\nI have shutdown eclipse and deleted\n$HOME/workspace/.metadata/.plugins/org.eclipse.wst.server.core/ directory,\nrestarted eclipse and this is been re-created.\n\nI have created a new Tomcat 5.5.12 server.\n\nBut the Add web-app dialogue has an empty list on the left, instead of the 6 or\nso projects that should be available under by workspace.\n\nMy projects are \u003cmodule-type module-type-id\u003d\"jst.web\"\u003e and every project has\nonly one module in it.\n",
    "At one point I was able to start from the top and create a Dynamic Web Project,\nthe new module shows up as available for adding to the server.\n\nWhen I restart eclipse the project exists but is now unavailable from left hand\nside list in Add/Remote web-app project.  The Server properties tab for the\nproject states this project can\u0027t be deployed to a server.\n\n\n\nI had thought the facet system was the problem, when comparing the new project\nfiles to my existing projects there is facet configuration, however manually\nupgrading my other web-projects does not resolve the problem.\n\n\nI am now in the situation where I have closed all my projects, except for Server\nand the \"New -\u003e Web Dynamic Project\" does not work.  When selecting that project\ntype from the wizard and clicking next, it does not go into the Dynamic Web\nProject wizard.  It stays in the select project type to create File -\u003e New.\nI have a server instance created that was setup on the \"Apache Tomcat v5.5\n(5.5.12)\" runtime.\n\nSTDERR/STDOUT output:\n\nUnhandled event loop exception\nReason:\nCould not find runtime Apache Tomcat v5.5 (5.5.12).\n\n\nIt looks like the server or facet system is confusing the Runtime label \"Apache\nTomcat v5.5 (5.5.12)\" with the Server instance label \"Tomcat v5.5 Server @\nlocalhost\".\n\nIf I rename Server(Project) -\u003e \"Tomcat v5.5 Server @ localhost\" as \"Apache\nTomcat v5.5 (5.5.12)\" the create new Dynamic Web Project wizard works again.\n\n\nWhen I rename the Server instance label, this change does not show up in the\nServers Tab, even after a restart.\n",
    "I20051104-2243 is looking a whole lot better for me.\n\nEclipse itself seems to be behaving, the UI mostly all adds up regarding\ndependant JAR / utility projects (for the first time in a long while).\n\nI have opened bug #115190 on the issue of the target project .class publish\nlocation.\n\nNow back to this bug report.  I\u0027m finding:\n\n\nTruncated dependancy JARs\n-------------------------\n\nWhen then the JARs that get published to the WEB-INF/lib/ directory are\ntruncated.  Meaning I only have a half-dozen (6) .class files inside, where\nthere should be well over 100, some dependant JARs are ~600Kb in JAR format.\n\nEverytime I publish the timestamp updates and a truncated file exists.\n\nI have caught it at one time with one of the 3 JARs appears to be fully formed\nwith the an older timestamp.\n\n\n\nOkay... upon more investivation in the file:\n\n/home/dlm/workspace/.metadata/.plugins/org.eclipse.wst.server.core/publish/publish3.xml\n\nwhich looks to be the current publishing catalog for my server runtime instance,\nhere is an excert:\n\n\u003cmodule\nmodule-ids\u003d\"org.eclipse.jst.j2ee.server:mywebproj#org.eclipse.jst.j2ee.server:DLMCLibraries\"\nname\u003d\"DLMCLibraries\"\u003e\n\u003cfile name\u003d\"log4j-iamalib.properties\" path\u003d\"\" stamp\u003d\"2\"/\u003e\n\u003cfolder name\u003d\"uk\" path\u003d\"\"\u003e\n\u003cfolder name\u003d\"co\" path\u003d\"uk\"\u003e\n\u003cfolder name\u003d\"dlmc\" path\u003d\"uk/co\"\u003e\n\u003cfolder name\u003d\"format\" path\u003d\"uk/co/dlmc\"\u003e\n\u003cfolder name\u003d\"csv\" path\u003d\"uk/co/dlmc/format\"\u003e\n\u003cfile name\u003d\"CsvFile.class\" path\u003d\"uk/co/dlmc/format/csv\" stamp\u003d\"2\"/\u003e\n\u003cfile name\u003d\"CsvLine.class\" path\u003d\"uk/co/dlmc/format/csv\" stamp\u003d\"2\"/\u003e\n\u003cfile name\u003d\"ICsvFieldCallback.class\" path\u003d\"uk/co/dlmc/format/csv\" stamp\u003d\"2\"/\u003e\n\u003cfile name\u003d\"Personality.class\" path\u003d\"uk/co/dlmc/format/csv\" stamp\u003d\"2\"/\u003e\n\u003c/folder\u003e\n\u003c/folder\u003e\n\u003cfolder name\u003d\"generic\" path\u003d\"uk/co/dlmc\"\u003e\n\u003cfolder name\u003d\"timer\" path\u003d\"uk/co/dlmc/generic\"\u003e\n\u003cfile name\u003d\"ITimerEvent.class\" path\u003d\"uk/co/dlmc/generic/timer\" stamp\u003d\"2\"/\u003e\n...SNIP...\n\n\nNow if I look in the published (truncated) file: WEB-INF/lib/DLMCLibraries.jar\n\n$ jar -tvf WEB-INF/lib/DLMCLibraries.jar\n  1333 Sat Nov 05 02:32:22 GMT 2005 log4j-iamalib.properties\n  2375 Sat Nov 05 02:32:22 GMT 2005 uk/co/dlmc/format/csv/CsvFile.class\n  2635 Sat Nov 05 02:32:22 GMT 2005 uk/co/dlmc/format/csv/CsvLine.class\n   203 Sat Nov 05 02:32:22 GMT 2005 uk/co/dlmc/format/csv/ICsvFieldCallback.class\n  1878 Sat Nov 05 02:32:22 GMT 2005 uk/co/dlmc/format/csv/Personality.class\n$\n\n\nSo it looks like when it hits the first \u003c/folder\u003e it stops adding to the JAR. \nThe same situation is true of all 3 JARs and comparing them to the publish4.xml\nfile entries.\n\nHope this helps...\n",
    "\"I have caught it at one time with one of the 3 JARs appears to be fully formed\nwith the an older timestamp.\"\n\nPlease discount this comment.\n\nThis is due to me putting manually pre-built JARs in WEB-INF/lib of the project\nspace, as opposed to configuring a dependant project, this was my workaround\n(fallback to ANT script that builds and copies JAR into super-project WEB-INF/lib).\n\n",
    "Created an attachment (id\u003d29376)\n./components/server/plugins/org.eclipse.jst.server.core/sjavacore/org/eclipse/jst/server/core/PublishUtil.java#addZipEntries()\nCVS v1.3\n\n./components/server/plugins/org.eclipse.jst.server.core/sjavacore/org/eclipse/jst/server/core/PublishUtil.java#addZipEntries()\nCVS v1.3 line 302:\n\nI think \"return;\" should be \"continue;\"\n\nTo allow continuation to the next File or Folder in the publish list tree at\nthe current node.  This patch has been tested and works for me on the truncated\nJAR problem.\n\n\nBack to the original problem.\n\nEverytime I click the publish button now I get a rebuilt JAR file with updated\ntimestamp.  There is also quite a long delay (considering the relative\nperformance of the computer and number of items in the published).  I have\nadded a line to the log to indicate where.\n\nIt looks like its parsing and writing out the .../publish/publish3.xml file 4\ntimes (once for 3 dependant modules and again for the actual master-project\nitself).  Maybe something to look at or just suggest where/what to look.\n\n\norg.eclipse.jst.server.tomcat.core FINEST    05/11/05 15:56.19.159 Preparing\nruntime directory\norg.eclipse.jst.server.tomcat.core FINEST    05/11/05 15:56.19.160 Backup and\npublish\norg.eclipse.jst.server.tomcat.core FINER     05/11/05 15:56.19.162 Publishing\ncatalina.policy\norg.eclipse.jst.server.tomcat.core FINER     05/11/05 15:56.19.165 Publishing\nserver.xml\norg.eclipse.jst.server.tomcat.core FINER     05/11/05 15:56.19.166 Publishing\ntomcat-users.xml\norg.eclipse.jst.server.tomcat.core FINER     05/11/05 15:56.19.167 Publishing\nweb.xml\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.19.168 Publishing module:\n[Lorg.eclipse.wst.server.core.IModule;@12f45a9\n\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c HERE \u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.28.215 Saving publish info\nto /home/dlm/workspace/.metadata/.plugins/org.eclipse.wst.server.core/publ\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.28.466 Done publishing:\n[Lorg.eclipse.wst.server.core.IModule;@12f45a9\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.28.466 Publishing module:\n[Lorg.eclipse.wst.server.core.IModule;@1c383ef\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.28.990 Saving publish info\nto /home/dlm/workspace/.metadata/.plugins/org.eclipse.wst.server.core/publ\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.29.269 Done publishing:\n[Lorg.eclipse.wst.server.core.IModule;@1c383ef\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.29.269 Publishing module:\n[Lorg.eclipse.wst.server.core.IModule;@cd8475\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.30.219 Saving publish info\nto /home/dlm/workspace/.metadata/.plugins/org.eclipse.wst.server.core/publ\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.30.462 Done publishing:\n[Lorg.eclipse.wst.server.core.IModule;@cd8475\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.30.463 Publishing module:\n[Lorg.eclipse.wst.server.core.IModule;@81e3a4\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.31.490 Saving publish info\nto /home/dlm/workspace/.metadata/.plugins/org.eclipse.wst.server.core/publ\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.31.750 Done publishing:\n[Lorg.eclipse.wst.server.core.IModule;@81e3a4\norg.eclipse.wst.server.core FINEST    05/11/05 15:56.31.750 Calling\npublishFinish()\norg.eclipse.jst.server.tomcat.core FINEST    05/11/05 15:56.31.751 Apply\ncontext configurations\norg.eclipse.jst.server.tomcat.core FINEST    05/11/05 15:56.31.778 Server.xml\nupdated with context.xml configurations\n...SNIP...\n",
    "Patch applied to HEAD stream and will be released for next I-build. In the\nfuture, please open a new bug so that we can keep the issues separate.\n\nWill try to comment on the original issue shortly.",
    "Created an attachment (id\u003d29386)\nNEW FILE\n./components/server/plugins/org.eclipse.jst.server.core/sjavacore/org/eclipse/jst/server/core/PublishUtilCopyOptions.java\n",
    "Created an attachment (id\u003d29387)\nPATCH\norg.eclipse.jst.server.core/sjavacore/org/eclipse/jst/server/core/PublishUtil.java\n",
    "Created an attachment (id\u003d29388)\nPATCH oe.jst.server.tomcat.core.diff\n",
    "The 1 new file and 2 patches achieves the following goals:\n\n* All file creation during publishing is done to a tempoary file \"file#####.tmp\"\n in the same directory as the target file.  This means that the running Tomcat\ninstance will NEVER see a partially built or truncated file, it also means if\neclipse fails to publish (lack of permissions, file system full, etc) that the\nrunning tomcat instance will still always have the old copy of the file\navailable, but the main concern for me is during the update of JARs files.  I\u0027ve\nwitness at least a dozen Tomcat JVM core dumps from libzip.so (in past 45 days).\n I suspect/guess this was due to Linux memory-mapping the JAR file, then Eclipse\ndoing a open+truncate (not an unlink(), then creat()), the consequence is that\nthe running JVM sees a now modified JAR file and crashes from corrupt looking\ndata, when it next tries to access the file.\n\n* Preservation of original file timestamps from workspace working files when\npublishing.\n\n* I have altered the #copyFile() API to allow the configuration of a last-minute\ncopy-if-modified behaviour.  The old behaviour can still be got by calling\n#copyFile(InputStream in, null, String to, null) however during a publish\noperation we really do want to preserve timestamp.\n\n* I have implemented preservation of file timestamps value for JAR files\ncontents, so all the resources inside the JAR now correctly have their\ntimestamps retained.\n\n* I have then made the timestamp of the JAR file itself get set to that the same\nvalues as the newest file inside it.  This means we can now\n\n* I have implemented last-minute copy-if-modified behaviour for JAR files too,\nthat is a content comparision is done to determine if we really really have to\nupdate the JAR.  Updating a JAR files causes a web-app reload, its dont believe\nits possible to hot-code replace, all tomcat can do is restart to flush the old\ncode out.  I plan to look at the web-app module properties page to add an option\nto allow utility project publication by JAR (as now) or by .class file to allow\nserver hot-code replacement to work when debugging.\n\n* I have introduced a #smartCreateZipFile() method, this is not yet implemented.\n I will carry on an implement that, the same effect is already achieved\nlast-minute, this method would be a performance optimization for the common case.\n\n\nI dont really understand how the sever stuff all works, but from looking over\ngenerally there are two style of publish events, one based on IServer and one on\nServerBehaviourDelegate.\n\nIts not clear if the IServer.PUBLISH_CLEAN means to clean only, or it means to\nclean then re-publish.  It would make sense for CLEAN to only clean, if you want\nre-publish too then fire off a PUBLISH_FULL event right after.  If some server\ndriver can benifit from a combined CLEAN+FULL then make a new PUBLISH_CLEAN_FULL\ntype of event.\n\nIt would also make sense to me that ServerBehaviourDelegate had two types of\nCHANGE events.  One which only updates if changed and one which forces an update\neven if the new version still looks like the old.  The option forceMtime exists\nfor a situation where updated (but unsaved) data or a garuntee that tomcat will\ntake notice of a file change and refresh.\n\nThe copy still has a number of Trace() calls still in it, maybe they will help\nyou verifying, and a number of terse think out load comments from me.\n\nI have tested every code path and it works for me and appears to achieve all my\ngoals.\n\n\nTODO Item 1) At the moment when I remove a web-app from the server instance it\ndoes not seems to clean/delete the directory where the webapp context was.  I\u0027m\nnot sure if you are aware of that situation.  The problem with leaving the\ndirectory around is that if you restart Tomcat it might be setup to auto-reploy\nany web-apps if finds lying around its webapps directory.  I think I have\nwitnessed this happening.  I think I\u0027ve also seen code that should do trick but\nnot sure why its not happening.\n\nTODO Item 2) I also think that when a web-app is added to a server instance that\na CLEAN/delete directory event should fire off first (to ensure we really are in\na clean state) before the PUBLISH_FULL.  This is a safety net, defensive design.\n\nTODO Item 3) When publishing there is a large delay, this delay also occurs when\nI modify and save any file in the web-project.  In the order of 10 to 20 seconds\nbefore file copying starts.  This is my main barrier at this time preventing me\nfrom stress testing my patchs.\n\n\n\nSorry if I am combining different bugs in the same report, but in my mind they\nare all related issues to the same productivity problem.  Please feel free to\ntell me off, I\u0027m just really pleased with the progress you\u0027ve made with removal\nof .deployables and the utility JAR function that now I can at least see the\nfinishing line to where I\u0027m trying to be.\n",
    "Created an attachment (id\u003d29405)\nNEW FILE\n./components/server/plugins/org.eclipse.jst.server.core/sjavacore/org/eclipse/jst/server/core/PublishUtilCopyOptions.java\n\nUpdated\n",
    "Created an attachment (id\u003d29406)\norg.eclipse.jst.server.core.diff\n\n\n* Fixes File.delete() usage gotcha\n\n* Adds new NLS messages relevant to new function\n\n* createZipFile returns IStatus like copyFile\n\n* Improvement in some cleanup/error code paths\n\n* Removal of static byte[BUFFER], its not thread safe and seems unecessary to\nhold onto\n\n\nTODO) audit #smartCopyfile() users\n",
    "\"Will try to comment on the original issue shortly.\"\n\nWhen you\u0027ve a spare minute would appreciate an outline of your thoughts on this patch.\n\nI realize WTP is shifting into the bug fix only era for 1.0 release, this is okay, I\u0027d just like to where this might stand with you.\n\n* Is the issue being dealt with in a better way later\n* Does this patch needs re-working to improve it and make it acceptable\n* Does this patch need testing for specific concerns\n* Or plainly this patch is never going to be possible\n",
    "Sorry, I was away for a week and trying to handle lots of bugs at the moment.\n\nI\u0027ve reviewed the code, and have tried to apply similar changes to HEAD. The main reason I haven\u0027t taken the code as-is is that we\u0027re in 1.0 shutdown and there were a couple of API changes that we can\u0027t risk at this point.\n\nI have fixed the code to set all file timestamps to the workspace timestamp of the file, and switched to use temporary files in all cases so that the server can never see partial files. However, I haven\u0027t set the zip timestamp because I don\u0027t see what this accomplishes after the following change below.\n\nThe other place that I diverged from the patch was in the copy-if-modified behaviour. The server framework has a complete delta of the changes that have occurred in the workspace since the last publish. Instead of trying to check if the file or zip file has different contents at the last minute, the publishing behaviour should just ignore the publish request if there are no changes (unless the CLEAN or FULL publish is requested), which should also be a little faster. I\u0027ve done this for the Tomcat publishing code.",
    "Changes released to I-build stream. Closing bug as per earlier comments.",
    "Great news, I can see you are snowed under with reports to deal with.\n\nI\u0027ve just taken a look at HEAD, I cant wait to test out the delta change situation.  But first can I raise some points with you.\n\n#copyFile() \u0026 #createZipFile()\n\nIt makes no sense to delete the target file before the rename, there is now a window of opportunity for the file to not exist (something I took care to avoid).  Letting the renameTo() replace the file is the perfect solution, it will return false on error leaving the out-of-date file intact all things that are good for us (the user gets an error and the runtime tree is no more out of date than it was a moment ago).\n\nYou have to set the file timestamp on the tempFile before the rename, otherwise there is a window of opportunity for the file to exist with the wrong timestamp on it (something I took care to avoid).\n\nI thought deleteOnExit() was widely regarded as a no-no for long running Java applications, since there is no way to revoke the request to delete the file on JVM exit.  What is really needed at that point is a simple delete() on the tempFile.  I dont think the tempFile.exist() test is necessary as for tempFile!\u003dnull then it must exist (or have existed and be unique to us, so we own it)\n\nThe same logic is true for the Zip file creation and update.\n\n\n(In reply to comment #20)\n\u003e can never see partial files. However, I haven\u0027t set the zip timestamp because I\n\u003e don\u0027t see what this accomplishes after the following change below.\n\nYou\u0027re right the outer ZIP timestamp does not seem to buy us anything.  But... I wanted repeated publishing operations with the same input tree to result in identical output trees (contents \u0026 timestamps) on all files.  This is not possible if the JAR is rebuilt and the current time is put on it at every publish event that touches it.\n\nThe behaviour I was striving for mimics the timestamp on the static JARs, is repeatable, and is nearer the goal of minimum number of changes to the enviroment (in which a timestamp change is a change of file version).  The fact the source of the contents are coming from another project is irrelevant to this part of the publish process.  If it were a plain static JAR or automatically exported into a JAR from the Utility Project at the end of the build cycle then the timestamp would not change no matter how many publish FULL events occured in between.  I _REALLY_ want to avoid web-app redeploys that changing the timestamp on these files creates.\n\nI\u0027m also thinking ahead into the realms of allowing a PUBLISH_FULL event while the runtime is started, todo with hot-code replace vs class file publishing.  I piped up in bug #116966 on allowing that, I want to tools to work for me, not me around them.",
    "wtp-sdk-1.0M9.zip   Wed, 30 Nov 2005 -- 07:33 (UTC)\n\nI have tested out your commits, they address all my major concerns in this area I have before WTP1.0 final.\n\nI shall in the new year re-open or put on a new report to address my Comment #22.\n",
    "Closing."
  ],
  "commentCreationDates": [
    "2005-10-16T03:22:21+02:00",
    "2005-10-31T08:01:14+01:00",
    "2005-11-01T04:15:28+01:00",
    "2005-11-01T09:56:54+01:00",
    "2005-11-01T14:45:02+01:00",
    "2005-11-02T16:50:48+01:00",
    "2005-11-02T16:58:12+01:00",
    "2005-11-02T19:30:27+01:00",
    "2005-11-03T08:51:26+01:00",
    "2005-11-05T02:42:08+01:00",
    "2005-11-05T02:53:41+01:00",
    "2005-11-05T16:09:16+01:00",
    "2005-11-05T16:22:52+01:00",
    "2005-11-06T06:58:06+01:00",
    "2005-11-06T07:02:44+01:00",
    "2005-11-06T07:06:10+01:00",
    "2005-11-06T07:55:59+01:00",
    "2005-11-07T06:17:49+01:00",
    "2005-11-07T06:39:36+01:00",
    "2005-11-24T21:15:40+01:00",
    "2005-11-27T23:48:44+01:00",
    "2005-11-28T04:04:15+01:00",
    "2005-11-28T05:11:48+01:00",
    "2005-11-30T10:54:58+01:00",
    "2005-12-13T15:18:07+01:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "The resource tree is locked for modifications.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
          "source": "WorkManager.java:94"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
          "source": "Workspace.java:1674"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.move",
          "source": "Resource.java:1189"
        }
      ],
      "number": 0,
      "commentIndex": 5,
      "bugId": "112744",
      "date": "2005-11-02T16:50:48+01:00",
      "product": "Web Tools",
      "component": "wst.server",
      "severity": "normal"
    }
  ],
  "groupId": "112744",
  "bugId": "112744",
  "date": "2005-10-16T03:22:21+02:00",
  "product": "Web Tools",
  "component": "wst.server",
  "severity": "normal"
}