{
  "comments": [
    "The current text measuring and drawing capability is insufficient to implement \ncomplex scripting.  To work around this on Windows, SWT uses an internal non-\nAPI class called BidiUtil that has some text layout functionality.  This class \nwas never intended as API so it reflects Windows centric cabability and naming.\n\nWe\u0027d like to look into implementing a Text Layout class that would expose this \ncapability as API.  The class would be added to org.eclipse.swt.graphics and \nimplemented natively where possible.  For example, on GTK we could use \nPangoLayout for the implementation.\n\nWhen we are done, StyledText should be changed to use the new class.",
    "[From a member of an Israel team working on implementing Bidi support in \nStyledText on GTK.]\n\nSo, from the functional point of view, a TextLayout class won\u0027t just replace \nBidiUtils, but will expose the latter\u0027s capabilities? Such that TextLayout will \nbe responsible for:\n\n  1) Actual processing of CTL data before rendering, in compliance with the \nUnicode Standard\n  2) Text measurement\n  3) Rendering\n\nAnything else? Should it also handle:\n  4) Cursor movement\n  5) Selection?",
    "Semion, org.eclipse.swt.graphics.text has been created and you will be getting \ncommit rights.  This is the area where we will do the work for TextLayout (or \nwhatever it ends up being called).  It\u0027s possible the work will be folded into \norg.eclipse.swt.graphics for 3.0 depending on what we decide.  For example, if \nthis package turns out to be large, we may want to keep it embedded reasons.\n\nYou will be working along with Silenio to define the API and ensure that it \ncan be implemented on the various platforms.  Along the way, we may decide to \nhack BidiUtil for GTK to \"get something running\" (which I\u0027m sure you already \nhave) or a bunch of other fun things.  Anyway, we will be able to share code \neasily and also give you better feedback about how we work.",
    "Steve, Silenio\n1. Lina Kemmel (who is our expert in Text Layout related issues) will be \nworking on TextLayout for SWT.\n2. Question 1: As far as I understand, we need to produce Textlayout class \nwhich will be \"compatible\" with four platforms (at least):\n - Layout Transform (AIX)\n - Pango (Linux)\n - Windows\n - MAC\nDo you have any information about Layout engine on MAC platform?\n3. Question 2: Did you have a chance to look at ICU \n(http://oss.software.ibm.com/icu/)? I assume that using ICU engine may be a \nshortcut for ALL TextLayout related issues in SWT with no relation to any \nspecific platform.",
    "Seems that we need commit rights for Lina for the work area.  Is this \ncorrect?  I had just assumed Semion would be doing the work because of all his \nexcellent contributions in the past.\n\nSemion, do you work with Lina?",
    "This is the site with the Mac text layout documentation:\n    \nhttp://developer.apple.com/documentation/Carbon/Reference/ATSUI_Reference/index.\nhtml\n\nI have not been able to look at ICU yet.",
    "Steve, thank you.\nAbout my work with Lina - I don\u0027t know. Probably, my boss khows this better.",
    "I guess swt goes out of its way to avoid any use of Java2D at all.  That\u0027s too \nbad since that\u0027s where the complex text layout code is.\n\nDoes eclipse just need to support the code editor?  That\u0027s much more \nstraightforward than a complete styled, line-wrapping text editor, and it means \nyou can avoid part of the bidi algorithm dealing with line break reordering, \nwhich is an added complication.\n\nFrom a quick glance at the code in BidiUtil, it appears you also rely on the \nability to pass glyph indices (encoded as chars) down to platform rendering \ncode, bypassing native analysis of the text.  It\u0027s easy enough to hack this on \nother platforms with Arabic since there are unicode code points assigned to the \nArabic shaped forms for legacy reasons, but it doesn\u0027t quite work for Hindi \n(and Indic generally) or Thai.  I suppose you are focused only on Bidi support \nand not full complex text support, and want something cross-platform at this \nlevel?\n\nIf that\u0027s all you need, java.text.Bidi plus some code for arabic shaping (e.g. \ncom.ibm.icu.text.ArabicShaping in ICU4J, see \nhttp://oss.software.ibm.com/cvs/icu4j/icu4j/src/com/ibm/icu/text/ArabicShaping.j\nava) ought to do the trick, and you can use native string rendering calls to \nrender the text without resorting to something platform-specific like \nExtTextOut.  That\u0027s essentially what we did for JDK 1.2. Hit testing is easy \nsince you have a 1-1 glyph-to-char mapping (apart from lam-alef ligatures) and \nno special glyph placement if you don\u0027t handle accents (which you really need \ncomplex text layout for anyway).\n",
    "Steve, this is correct. Please give commit rights to Lina Kemmel for the \nTextLayout work area. Semion will keep working on other SWT BIDI related issues \n(Windows, GTK mirroring, ...).  Thanks.",
    "I have applied for Lina to get rights.  She should get email soon.  Please \nping this PR if nothing happens within a week and I\u0027ll chase them on my end.",
    "BTW, great comments from Doug Felt.  Are we focused on Bidi support and not \nfull complex text?",
    "The Eclipse story is to support bidi scripts only and not complex scripts in \ngeneral. I\u0027m not aware of new requirements in this area. \n\nYou should ignore BidiUtil, it\u0027s very Windows specific and not our dream API. \nWe are using the glyph indices during rendering because they\u0027re returned to us \nduring measuring anyway - a Windows API specific optimization. We use \nStyledTextBidi to shield StyledText from the Windows specific calls of BidiUtil \nalthough even that doesn\u0027t necessarily have to live on.\n\nThe Eclipse editors use pretty much everything but word wrap. They use all the \nStyledText text styles (colors and bold). I believe there are form editors that \nuse word wrap as well. StyledText bidi support needs to work regardless of how \nthe widget is used. That\u0027s what we are supporting now and anything else would \nbe a regression.",
    "I looked at BidiUtil just in order to see how you are using native code in this \ncase.\n\nThe basic need is to render (minimally) styled bidirectional text.  Absent APIs \nthat accept styled text, you need to break this into separate rendering calls \nfor each style run, and in the presence of bidi reordering you need to \ndetermine the visual position of each run as they are no longer necessarily in \nsequence.  In order to determine the visual position you need to know the \noverall order-- from the bidi algorithm-- and the extent of each run.  For \nArabic, since the glyphs are contextually shaped, the extent can vary, so you \neither need native apis that can contextually shape the text and measure that \nform, or need to shape it yourself.  This is possible with Arabic because of \nthe Extensions-B block in Unicode which includes code points for the shaped \nforms of the glyphs.  Then it is possible to \u0027shape\u0027 the text by converting it \nto these code points, and rendering that text instead.  This makes it possible \nto handle simple Hebrew and Arabic without any native platform support at all \n(except for font support for the shaped code points).\n\nSimple accent placement (using non-spacing marks) is possible but tends to look \nrather poor, especially for Arabic, because the accents can collide with the \nbase characters, especially given their contextually varying widths and \nshapes.  Within ligatures (the various lam-alef ligatures are the only required \nones as far as I know) it\u0027s quite difficult to do proper accent placement \nwithout platform support.  One can always do a better approximation by \nexamining the glyph outlines (or bitmaps) and manually positioning the marks \nbut the native rendering calls become more complicated if they don\u0027t support \nfull positioning of individual glyphs.\n\nMy guess is your required platforms all support enough complex rendering \nbehavior that you can avoid writing this code, and use native APIs to measure \nthe extent of, and render, each style run.",
    "After experimenting with the Pango layout engine, my conclusion is that it \nshould be sufficient for laying out styled Bidi text.\nThe following Pango APIs: pango_itemize(), pango_reorder_items(), and \npango_shape() [meantime, being called from the BidiUtil] - make the StyledText \nproperly display attributed Bidi text and get correct cursor movement. (I\u0027m \nstill having a couple of issues with selection and horizontal scrolling, \nthough.)\n\nOn AIX, as Alex mentioned, we may exploit the Layout Transform functions -\nhttp://publib16.boulder.ibm.com/pseries/en_US/libs/basetrf1/layout_object_shapeb\noxchars.htm\n\nOn Mac, it seems that ATSUI is able to accept fully *styled* text, but I \nhaven\u0027t found low level APIs for manipulating Bidi text (which we may prefer in \nTextLayout for XP compatibility reasons).\n\nSo, in my opinion, native capabilities of the supported (Bidi enabled) \nplatforms may ensure good support for Bidi scripts.",
    "Created an attachment (id\u003d5604)\nProposed *preliminary* fix / enhancement\n\nAttached is a zip archive including the following sources:\n\nos.c\nos_custom.c\nos_structs.c\nos_structs.h\norg/eclipse/swt/custom/StyledText.java\norg/eclipse/swt/custom/StyledTextBidi.java\norg/eclipse/swt/internal/BidiUtil.java\norg/eclipse/swt/internal/gtk/OS.java\norg/eclipse/swt/internal/gtk/PangoAnalysis.java\norg/eclipse/swt/internal/gtk/PangoGlyphGeometry.java\norg/eclipse/swt/internal/gtk/PangoGlyphInfo.java\norg/eclipse/swt/internal/gtk/PangoGlyphString.java\norg/eclipse/swt/internal/gtk/PangoGlyphVisAttr.java\norg/eclipse/swt/internal/gtk/PangoItem.java\n\nContains implementation of a number of BidiUtil methods (which in the future\ncould be used also by the TextLayout class).\n\nPlease note that the code is not final, I\u0027m going to provide more clean up and\noptimizations.",
    "Created an attachment (id\u003d5620)\nProposed patch replacing attachment 5604\n\nRe-submitting the changes, with a little more clean up, in diff format.\nSilenio, is this format of code attachments preferable?",
    "Lina, we would prefer to use the Eclipse patch support for this.\nJust select the SWT project and use the pop-up menu \"Team-\u003eCreate Patch...\".\n\n\n",
    "Thank you very much, Felipe. I\u0027m already out of the office and will try it \ntomorrow. (And it\u0027s amazing, how many things Eclipse is able to do.)",
    "Created an attachment (id\u003d5658)\nProposed patch replacing attachments 5604 and 5620\n",
    "1. (From update of attachment 5658)\nWe are currently sending pango a raw character array (as opposed to glyph \nindices) for rendering. However, it appears that higher level pango\u0027s APIs that \nwe are using, anyway produce glyph indices before rendering. So I think that we \nshould preserve a glyph string, once returned by pando during retrieving \norder/render info, and to pass it to gdk_draw_glyphs() function.\n\n2. Implementing setKeyboardLanguage API on GTK/AIX may require Xlib-based \nsolution, such as:\na) listen for keyboard language changes and cache existing keyboard mappings, \nobtaining them via XGetKeyboardMapping() function (unless we want to support \nalso not installed keyboard languages -- e.g. to back up cases when input comes \nnot from the keyboard),\nb) load requested keymap by calling XChangeKeyboardMapping() function.\n\nCould using core Xlib (directly) be acceptable to us?\n",
    "1. what you suggest is what we do for StyledText on Windows. The Windows API we \ncall to reorder and measure text returns a reordered glyph buffer. We cache \nthat buffer and use it later for rendering.\nNot sure if this is a good idea for general text layout support.",
    "1. Knut, my suggestion is in the scope of attachment 5658, i.e. it applies only \nfor bidi text on GTK. IMO it\u0027s justified for performance reasons. If accepted, \nGTK would be yet another platform (in addition to Windows) which we pass glyphs \nfor rendering...",
    "We finally had the chance of starting locking at your code. We hope to get back\nto you with more info on it next week.\n\n",
    "Please ignore a piece of code, dealing with arrays reallocation, at the end of \nBidiUtil.getRenderInfo. It\u0027s useless, I wrote it automatically.\nAlso, I have a number of other updates, one of which fixes getting rendering \ninfo for ligatures. Except for this one, neither of the changes seems to be \ncritical. However, does it make sense to submit them now?",
    "Does your last changes involve C code ? Are they localized in only one (or two) \nclass(es) ?\nIf Yes is the answer for both question you should send your code (just the \nclass that has changed). We had a bad time to load your patch. The java code \nfor GC.getLayout was missing as well as the C code for several native methods \nsush as:\npublic static final synchronized native int pango_context_load_font(int \ncontext, int desc);\npublic static final synchronized native void pango_context_set_font_description\n(int context, int desc);\npublic static final synchronized native int pango_font_find_shaper(int font, \nint language, int ch);\npublic static final synchronized native int pango_font_map_load_font(int \nfontmap, int context, int desc);\npublic static final synchronized native int pango_ft2_font_map_for_display();\npublic static final synchronized native int pango_ft2_get_context(double dpi_x, \ndouble dpi_y);\npublic static final synchronized native void pango_glyph_string_free(int \nglyphs);\npublic static final synchronized native int pango_glyph_string_new();\npublic static final synchronized native int pango_layout_get_line(int layout, \nint line);\n\nWe also had another problems with the C code, like custom C code in:\nmemmove(int dest, PangoGlyphInfo[] src, int size);\ngdk_keymap_get_direction\n\nAnyway, we could compile the libraries and run your code but the rendering \nduring the selection is still wrong. I run on RedHat 9, my locale is en_US.UTF-\n8. I use XKB to load arabic layout keyboard for testing.\n\nFYI: we are going to be busy during this week with the release of Eclipse 3.0 \nM3. Probably next week we can get back to TextLayout.\n\n\n",
    "\u003e The java code for GC.getLayout was missing as well as the C code for several \n\u003e native methods sush as:\n\u003e public static final synchronized native int pango_context_load_font\n................................\n\u003e public static final synchronized native int pango_layout_get_line\n\nGC.getLayout is really missing for some reason, but all the mentioned native \nmethods seem to be present in the patch. Maybe there was a problem during \ncreating / applying the patch.\n\n\u003eWe also had another problems with the C code, like custom C code in:\n\u003e memmove(int dest, PangoGlyphInfo[] src, int size);\nIt\u0027s no longer used.\n\u003e gdk_keymap_get_direction\nCould you elaborate please? (I guess the problem is with the non-XKB code, and \nyou didn\u0027t just mean that it should be moved to os_custom.c, right?)\n\n\u003e rendering during the selection is still wrong\n\nIf you mean wrong highlighting, then the cause is most likely not setting \ndesired colormap on PangoContext before calling to OS.gdk_draw_layout in \ngc.drawString. Once I defined and used OS.gdk_draw_layout_with_colors(..., \ngc.getForeground().handle, gc.getBackground().handle) instead, the problem \ndisappeared.\n\nI\u0027ll submit a new patch by the next week.\nThanks and good luck with the new release.",
    "Created an attachment (id\u003d5929)\nNew proposed patch\n\nCore changes from the previous patch are:\n- StyledTextBidi.order array reflects the presence of ligatures;\n- BidiUtil.getFontAttributes provides more accurate font information;\n- added fixes for getting keyboard language, which are supposed to cover either\nXKB or non-XKB keyboard support;\n- added trial code for setting keyboard language (work on it is ongoing);\n- cosmetic changes.",
    "Lina, last time I\u0027ve load your code I made some changes:\n- put the native method in the right files\n- remove custom C code\n- rewrote some of the internal java classes (i.e. PangoGlyphGeometry) so that \nthe we could use our automatic JNI code generation.\n\nIf I load your last path I will lost all this changes (one day of work at \nleast). But anyway, after doing all that I could not see any result when \nrunning the code with the changes. Probably I did something bad during the \nmerge.\n\nI think is time to share the code in a different (simpler) way:\n- I would like you to zip your workspace and attach it here. Would be better if \nyou could first merge the code in your workspace with the HEAD and if your \nworkspace included the minimum code needed (org.eclipse.swt and \norg.eclipse.swt.gtk). I think this should be easy enough for you and for me.\n\n\n\n\n\n",
    "Lina, do you have the rights for org.eclipse.swt.graphics.text yet?  If so, \nput your work there.",
    "Steve, I have no commit rights yet.. So how I proceed?\nI\u0027m facing problems checking out the sources today, so would it be OK to attach \nhere (or maybe send directly to Felipe) only my *modified* sources (which \nfortunately have been checked out)?",
    "Created an attachment (id\u003d5965)\nZip archive containing modified sources\n\nFelipe, I attach only the modified sources. Apologies for any inconvenience.",
    "Okay, I had no problem this time:\n- load the SWT code from version 3019c\n- load Lina\u0027s code \n- compile the swt libs and copy to the right place\n- run the TextEditor example from org.eclipse.swt.examples \n\nThe code works, but again I had problem with selection. If I type a whole bunch\nof text and then select it character-by-character it fails when there is a\nligature between to character. A funny example is using lam-alef ligatures. Try\nthis:\n\n(a) Type b, hold shift and press the arrow left key\nexpect: select the \u0027alef part\u0027 of the lam-alef ligaure\nresult: select the whole ligaure \n(b) Type g, type h, hold shift and press the arrow left key\nexpect: select the \u0027alef part\u0027 of the lam-alef ligaure\nresult: it select the alef char, but render it independily, it means it draws\nalef and and lam instead of drawing alef-lam.\n\nAnother problem, still with lam-alef ligaure, according with the font I use I\ndon\u0027t get lam-alef when I type g,h (they are draw separately) . It fails with\nSans but works okay with Tahoma, so it can be a font related problem.\n\nAfter closing the example by the first time I started to crash on the X calls\nwhen attempt to run it again, the only workaround for me was to comment out all\nthe code using X calls.\n\nHere is the stack:\nAn unexpected exception has been detected in native code outside the VM.\nUnexpected Signal : 11 occurred at PC\u003d0x420744FE\nFunction\u003d(null)+0x420744FE\nLibrary\u003d/lib/tls/libc.so.6\n\nNOTE: We are unable to locate the function name symbol for the error\n      just occurred. Please refer to release documentation for possible\n      reason and solutions.\n\n\nCurrent Java thread:\n\tat org.eclipse.swt.internal.gtk.OS.XGetKeyboardMapping(Native Method)\n\tat org.eclipse.swt.internal.BidiUtil.getKeymap(BidiUtil.java:447)\n\tat org.eclipse.swt.internal.BidiUtil.\u003cclinit\u003e(BidiUtil.java:82)\n\tat org.eclipse.swt.custom.StyledTextBidi.isBidiPlatform(StyledTextBidi.java:213)\n\tat org.eclipse.swt.custom.StyledText.\u003cinit\u003e(StyledText.java:1609)\n\tat\norg.eclipse.swt.examples.texteditor.TextEditor.createStyledText(TextEditor.java:185)\n\tat org.eclipse.swt.examples.texteditor.TextEditor.open(TextEditor.java:324)\n\tat org.eclipse.swt.examples.texteditor.TextEditor.main(TextEditor.java:314)\n\nAm I the only one having this problems ?\n",
    "Sorry about the delayed response, I was out of the office. Felipe, I\u0027m \ncurrently investigating the issues you mentioned. In the meantime, I can say \nthat\n\n(a) The keystroke produces the U+FEFB character (\"ARABIC LIGATURE LAM WITH ALEF \nISOLATED FORM\"), which at some stage should be decomposed into 2 characters \nU+0644 + U+0627. I think that gtk knows to perform such a decomposition and \nstores the pre-edited string in the \u0027string\u0027 field of GdkEventKey. Do you know \nif this field (as opposed to \u0027keyval\u0027) is used to obtain keyboard input?\n(And by the way, gedit also treats lam-alef produced by \u0027b\u0027, as a single \ncharacter.)\n\nNot displaying lam-alef generated by g, h with some fonts: can you tell what\u0027s \nthe actual font assigned to Sans?\n\nRegarding the crash, I was unable to reproduce it. According to the stack it \nhappens when setting keyboard language. I\u0027ll keep investigating it.\n",
    "1) Agree with you, gedit has the same problem when using \u0027b\u0027 to print the lam-\nalef. We can live with this problem I gess. But selecting the text char by char \nstill doesn\u0027t quite work for us when there is ligature.\nExample, in an arabic keyboard, press j, o, hold shift and press arrow left.\nThe glyph khah (\u0027o\u0027) is draw alone with the selection background, the ligature \nis gone, the glyph teh (\u0027j\u0027) is only partially drawn. Can you reproduce this \nproblem ?\n\n2) I will have to check the font for you, do you want the XLFD of the font ? I \ndon\u0027t know how to do this so I will need to figure it out first.\n\n3) The crash happens to me all the time...\n",
    "Lina, here is the doc for the field string of the GdkEventKey struct:\n\"a string containing the an approximation of the text that would result from \nthis keypress. The only correct way to handle text input of text is using input \nmethods (see GtkIMContext), so this field is deprecated and should never be \nused. (gdk_unicode_to_keyval() provides a non-deprecated way of getting an \napproximate translation for a key.) The string is encoded in the encoding of \nthe current locale (Note: this for backwards compatibility: strings in GTK+ and \nGDK are typically in UTF-8.) and NUL-terminated. In some cases, the translation \nof the key code will be a single NUL byte, in which case looking at length is \nnecessary to distinguish it from the an empty translation.\"\n(source: http://developer.gnome.org/doc/API/2.0/gdk/gdk-Event-\nStructures.html#GdkEventKey)\n\nThat is all I know about it.\n",
    "Felipe, I\u0027m sorry: using the field \u0027string\u0027 was preferable in gtk1; it\u0027s \ndeprecated in gtk2 as you mentioned.\n\n1) I can reproduce the problem with rendering ligatures (and Arabic shaping in \ngeneral) during char-by-char selection. It happens because each text segment is \nrendered separately, and character shaping doesn\u0027t occur across segment \nboundaries. I guess that creating and rendering glyph string should fix this \nproblem.\n\n2) Does gedit display ligatures with this font?\nIf so, I\u0027ll appreciate if you could check the FamilyName. I don\u0027t know what\u0027s \nthe \"right\" way to do this, but I think that it can be figured out from the \nfile /etc/fonts/fonts.conf (on RedHat 9 at least):\n\n\u003c!--\n  Provide required aliases for standard names\n--\u003e\n\t\u003calias\u003e\n\t\t\u003cfamily\u003esans-serif\u003c/family\u003e\n\t\t\u003cprefer\u003e\n\t\t\t\u003cfamily\u003eLuxi Sans\u003c/family\u003e\n\t\t\t..........................\n\t\t\t\u003cfamily\u003eSimSun\u003c/family\u003e\n\t\t\u003c/prefer\u003e\n\t\u003c/alias\u003e\n\n- It should be first installed font from this list.\nThanks!",
    "2) Gedit also failed. Anyway, I longer able to reproduce the problem, neither \non Eclipse nor on Gedit. If I have to problem again I let you know (I\u0027ll try to \nprovide more details as well).\nI don\u0027t know if you still care, but here is my fonts.conf:\n\u003c!--\n  Sans-serif faces\n --\u003e\n        \u003calias\u003e\n                \u003cfamily\u003eHelvetica\u003c/family\u003e\n                \u003cfamily\u003eArial\u003c/family\u003e\n                \u003cfamily\u003eVerdana\u003c/family\u003e\n                \u003cfamily\u003eNimbus Sans L\u003c/family\u003e\n                \u003cfamily\u003eLuxi Sans\u003c/family\u003e\n                \u003cfamily\u003eKochi Gothic\u003c/family\u003e\n                \u003cfamily\u003eAR PL KaitiM GB\u003c/family\u003e\n                \u003cfamily\u003eAR PL KaitiM Big5\u003c/family\u003e\n                \u003cfamily\u003eBaekmuk Dotum\u003c/family\u003e\n                \u003cfamily\u003eSimSun\u003c/family\u003e\n                \u003cdefault\u003e\u003cfamily\u003esans-serif\u003c/family\u003e\u003c/default\u003e\n        \u003c/alias\u003e\n",
    "Created an attachment (id\u003d6152)\nPreliminary fix for char by char selection\n\nAttached includes only sources involved in changes for selection, synchronized\nwith the HEAD. Please let me know if you need a full (merged with the HEAD) set\nof bidi-related sources, I\u0027ll submit the rest.\nThe code is quite raw, but I decided to send something running before the\nweekend.\nMeantime, the problematical X calls are commented out.",
    "Felipe, can you send me your changes to the natives (and probably the tool) for \nauto-generating the JNI code?",
    "*** Bug 6782 has been marked as a duplicate of this bug. ***",
    "Created an attachment (id\u003d6458)\nXKB C example\n\nThis app illustrate how to interact with XKB, more precisely:\n- how to list the keyboard layouts in use\n- how to get the active keyboard layout\n- how to set the active keyboard layout\n- how listen to keyboard layout changes\nThat\u0027s is pretty much all we need for BidiUtil. The major problem with this\ncode is that it doesn\u0027t interact with kxkb (KDE XKB, a keyboard selector app).\nKxkb does not keep in the keyboard list in the xkb, it has its own list that\nI\u0027m not sure we can get event using KDE calls.\n\nLynna, The code I\u0027m sending is a complete different alternative of doing the\nwork. It would be interesting for you check it out. In the meantime I\u0027ll be\ngoing thru the pango part of the GTK/BidiUtil implementation.\n\nLet me know with you need help to compile/run the app.\n",
    "Felipe, the app works for me. However, the current implementation seems to \ninteract better with either KDE kxkb or Gnome Keyboard Layout Switcher (gkb-\napplet-2), configured for both xkb and xmodmap keymaps. By \"better interaction\" \nI mean our ability to keep track of keyboard layouts managed by the mentioned \nutilities.",
    "Lina, I can see a number of scenarios where your implementation doesn\u0027t work \n(regarding if the keyboard part).\nBidiUtil#isKeyboardBidi ()\nExpect:\nGet the list of keyboard layouts available and detect if it contains a bidi \nlayout (arabic or hebrew).\nActual:\nReturns if the current keyboard layout is bidi.\nPossible bug: in getKeymap the flag isBidiKeyboard can get set to true but \nnever to false.\n\nBidiUtil#getKeyboardLanguage ()\nExpect:\nReturn if the current keyboard input is bidi or not.\nActual:\nUses the default keymap to translate the letter \u0027a\u0027 to group zero and level \nzero, check if the resulting character has LTR or RTL directionality.\nBug: the group zero can be any layout the user has set.. greek, hebrew, french, \nthai, etc.\n\nBidiUtil#setKeyboardLanguage ()\nExpect:\nSet the current keyboard input to bidi or non-bidi.\nActual:\nChanges the keyboard mapping with a new collection of keysyms.\nBug: it relies in the gtk signal direction_changed, the first time the \ndirection changes to LTR it saves current keysyms, later when the user attempt \nto change the keyboard layout to bidi it uses previously saved keysysms to \nreplace the current one. And if, the user attempt to change the keyboard \ndirection *before* a direction_changed happens  ? Changing the keysyms of the \nenglish-layout keyboard to arabic-keysyms can create inconsistences, specially \nif the user has configure his machine with multiple keyboard layouts.\n\n",
    "Created an attachment (id\u003d6492)\nTesting keyboard related BidiUtils calls\n\nLina, could you run this example ? It fails no my machine.\n",
    "Part of a talking between Lynne Kues (LK) and me (FH) about StyledText bidi and \nkeyboard operations:\n\nFH:\nI would like to know from you or Knut which are the StyledText requirements on \ndealing with the keyboard. I mean why does the StyledText need to know:\nQ: The list of keyboards available (isKeyboadBidi)?\nA: to detected the present of bidi keyboard in order to enable bidi-platform \nsupport.\n\nLK:\nYes, this is a workaround for XP bug 27629.  Before this problem we were \nlooking at whether or not a bidi language was installed (not whether or not a \nbidi keyboard was active).  Even so, I think the keyboard test is the correct \nsolution - we really only want to be in bidi mode when bidi input is enabled.\n\nFH:\nQ:  The active keyboard (getKeyboardLanguage)?\nA: Setting the caret direction.\n\nLK:\nYes.   And the method is also used during setting the keyboard language.  \nWhenever the user cursors over text or clicks somewhere in the text, the \nkeyboard must change to reflect the character at the cursor position.  As part \nof setting the keyboard language, we test to see whether or not the setting is \nnecessary (i.e., if current language \u003d\u003d language we want to set, do nothing).\n\nFH:\nQ: Set the active keyboard (setKeyboardLanguage) ?\nA: set the keyboard to bidi when is when bidi-platform is true.\n\nLK:\nSee the answer above.  The StyledText changes the keyboard setting \nautomatically for the user depending on where the cursor is. Setting the \nkeyboard language is a requirement from the bidi people and is typical behavior \nfor most editors in bidi mode (e.g., WordPad).\n\nFH:\nQ: keyboard changed listener (add/removeLanguageListener) ?\nA: set caret direction (workaround a bug in windows?).\n\nLK:\nYes, to set the caret direction when the user changes the keyboard language \n(via ALT-Shift on Windows).  The listener is not working around any bug in \nwindows. \n",
    "Felipe, I\u0027m not experiencing the problems you mentioned in comment 44.\nI guess the different keyboard behavior follows from a different method of\nconfiguring it: I\u0027m used to work with gkb-applet-2 layout switcher.\n\nAlso, please find my additional comments below:\n\n\u003e BidiUtil#isKeyboardBidi ()\n\u003e Expect:\n\u003e Get the list of keyboard layouts available and detect if it contains a bidi\n\u003e layout (arabic or hebrew).\n\nMy intention was to get the list of keyboard layouts *activated* during the\ncurrent session. If not activated, I assume that the keyboard is non-bidi, even\nthough bidi layouts are potentially available.\n\n\u003e Actual:\n\u003e Returns if the current keyboard layout is bidi.\n\nFor me: Returns if bidi layout *has ever been activated*.\n\n\u003e BidiUtil#getKeyboardLanguage ()\n\n\u003e Expect:\n\u003e Return if the current keyboard input is bidi or not.\n\nFor me: Works as expected, probably because the Gnome layout switcher also uses\nXGetKeyboardMapping / XChangeKeyboardMapping and replaces keymap of the group\nzero (maybe to assure ability to handle both xkb and xmodmap keymaps).\n\n\u003e BidiUtil#setKeyboardLanguage ()\n\u003e Bug: it relies in the gtk signal direction_changed, the first time the\n\u003e direction changes to LTR it saves current keysyms, later when the user\n\u003e attempt to change the keyboard layout to bidi it uses previously saved\n\u003e keysysms to replace the current one.\n\nCurrent keysyms (either LTR or RTL) are saved for the first time in\nBidiUtil.\u003cclinit\u003e(). Later, on direction_changed signal, keymaps of the\nopposite direction (either RTL or LTR) get saved.\n\n\u003e And if, the user attempt to change the keyboard direction *before* a\n\u003e direction_changed happens  ?\n\nSorry, I\u0027m not sure I got you correctly. I think any user attempt to change the\nkeyboard direction generates direction_changed signal.\n\n\u003e Changing the keysyms of the english-layout keyboard to arabic-keysyms can\n\u003e create inconsistences, specially if the user has configure his machine with\n\u003e multiple keyboard layouts.\n\nI agree with you it may sometimes cause inconsistences, for example when\nsetting XKB by setxkbmap on command line.\n\nWould it be possible to give prerequisites of setting keyboard for Eclipse\nusers?",
    "Okay, I verified that your code works with gkb (gkb-applet-2), but if you pay \nattention you will notice that when you change the keymap the applet doesn\u0027t \nchange to reflect the new keymap. Testing your code I easily got in a \nsituation where I had a German flag in applet but I was getting arabic \nwherever I type in the desktop. The same problem happens with kxkb. Changing \nthe keymap behind the scenes causes this kind of problem.\nIf the user is using XKB with multiples keyboard the code doesn\u0027t work at all.\nI\u0027m not saying that your code is bad but you will need to perform a miracle to \nget this code working in all these different scenarios. The problem is: there \nno standard on Linux for configuring the keyboard with multiples layout.\n",
    "Created an attachment (id\u003d6526)\ngkb test\n\njust for the fun of it: c code that interacts with gkb/gconf to retrieve the\nlist of keyboard layouts. Use: gconf-editor to browse the gnome-registry.\n",
    "Lina:\nWhy didn\u0027t you use pango_itemize \u0026 pango_reorder \u0026 pango_shape ?\nUsing PangoLayout you need to create more objects and you don\u0027t need any of \nthe \"sevices\" (justify, spacing, alignment, wrap, etc) provided by PangoLayout.\n\n\n",
    "Felipe, I used the APIs mentioned in your comment 48 in earlier \nimplementations, e.g. in attachment 5620. Later, I decided to replace these by \nhigher level pango layout APIs (which internally call pango_itemize, \npango_reorder_items, pango_shape), to ensure forward compatibility with later \nversions of pango.",
    "Would it be possible to give recommendations (in the absence of a standard)\nfor configuring the keyboard? The options are:\n- gswitch applet in Gnome or kxkb in KDE;\n- XKB;\n- xmodmap.\n\nI think that gswitch applet / kxkb are more commonly used for this purpose.\n\nFelipe, I also see that problem: the applet doesn\u0027t reflect a new keymap.\n",
    "Lina: I agree with you, probably gkb/kxkb are the most commonly used. I search \nweb (http://www.freedesktop.org/, http://www.linuxbase.org/) trying to find if \nthere is, or there will be, a standard way to dealing with the keyboard but I \ndidn\u0027t find anything.\nI\u0027m also checked if gkb/kxkb have an open API that allow us to interact with \nthem and I don\u0027t think it exists.\n\nI\u0027ll need to talk to Silenio/Steve about this keyboard problem.\n\n---\n\nWhen you decided to use PangoLayout to \"ensure forward compatibility with \nlater versions of pango\", did you find any indication that pango_itemize/ \npango_reorder/pango_shape will become obsolete or deprecated in the future ?\nFrom where did you get this information ? I checked gtk plans and apis and I \ncouldn\u0027t find any indication that using those API will compromise \ncompatibility with newer versions of pango.\n\nI don\u0027t have any serious problem on using PangoLayout if we need to. But if we \ncan avoid it is better because we will have less structs to handle and I also \nthing that using pango_itemize/ pango_reorder/pango_shape makes the code more \nstraight forward and simple.\n",
    "Lina: here some cases where the code fails (walkback):\n\ntype lam (g)\ntype shadda (~)  - note: lam is move to right ! the point shadda is place in the\nwrong place.\nTry to select the text from the right-to-left: walkback:\nException in thread \"main\" java.lang.IllegalArgumentException: Argument not valid\n\tat org.eclipse.swt.SWT.error(SWT.java:2355)\n\tat org.eclipse.swt.SWT.error(SWT.java:2299)\n\tat org.eclipse.swt.custom.DefaultContent.error(DefaultContent.java:673)\n\tat org.eclipse.swt.custom.DefaultContent.getLineAtOffset(DefaultContent.java:567)\n\tat org.eclipse.swt.custom.StyledText.doMouseLocationChange(StyledText.java:2796)\n\tat org.eclipse.swt.custom.StyledText.handleMouseMove(StyledText.java:5361)\n\tat org.eclipse.swt.custom.StyledText$12.handleEvent(StyledText.java:5086)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:962)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1815)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1595)\n\tat tests.SimpleStyledText.main(SimpleStyledText.java:71)\n\nOther test:\ntype shadda (~)\ntype lam (g)\n\nWalkback:\n\n(\u003cunknown\u003e:12151): Gdk-CRITICAL **: file gdkpixmap-x11.c: line 180\n(gdk_pixmap_new): assertion `(width !\u003d 0) \u0026\u0026 (height !\u003d 0)\u0027 failed\nException in thread \"main\" org.eclipse.swt.SWTError: No more handles\n\tat org.eclipse.swt.SWT.error(SWT.java:2395)\n\tat org.eclipse.swt.SWT.error(SWT.java:2299)\n\tat org.eclipse.swt.graphics.GC.drawSubstring(GC.java:953)\n\tat org.eclipse.swt.internal.BidiUtil.drawChars(BidiUtil.java:498)\n\tat org.eclipse.swt.custom.StyledTextBidi.drawChars(StyledTextBidi.java:348)\n\tat org.eclipse.swt.custom.StyledTextBidi.drawBidiText(StyledTextBidi.java:319)\n\tat org.eclipse.swt.custom.StyledTextRenderer.drawText(StyledTextRenderer.java:295)\n\tat\norg.eclipse.swt.custom.StyledTextRenderer.drawStyledLine(StyledTextRenderer.java:258)\n\tat org.eclipse.swt.custom.StyledTextRenderer.drawLine(StyledTextRenderer.java:144)\n\tat org.eclipse.swt.custom.StyledText.performPaint(StyledText.java:6082)\n\tat org.eclipse.swt.custom.StyledText.handleTextChanged(StyledText.java:5479)\n\n",
    "Lina: Question:\n\nWhy you didn\u0027t use drawGlyphs ?\nI mean, since we had to get the glyphs anyway would no be to use them to draw\n(better performance I think).\n",
    "Lina, looking your code closely, I see that you use the index k to loop thru \nchars and glyphs, the code assumes that the glyph corresponded to the char at \nk is the glyph at k. This is wrong. Using my example I tested:\nTyping in arabic: a \u003cdad\u003e + g \u003clam\u003e + h \u003calef\u003e + q \u003csheen\u003e\ngot the output:\n\u003csheen\u003e dx 25 LO 0 VO 2\n\u003clam\u003e dx 14 LO 1 VO 1\n\u003calef\u003e dx 21 LO 2 VO 1\n\u003cdad\u003e dx 0 LO 3 VO 0\n\nThe dx of alef should be ZERO, the dx of dad should be 21. Futher, I\u0027m not \nsure if the visual order of the ligature lam-alef should be the same (vo 1 in \nthis case).\n\nTest using arrow key to select, cause of this bug it is need a extra keystroke \nto select the last char in the run.\n",
    "Created an attachment (id\u003d6561)\npango test\n\nJust for the fun of it: This is my pango test c example, although this is the\nfirst time I try to implement it I think this code does the right thing on\ncomputing dx and ordering.\n",
    "First of all, sorry about the delayed response: during the past week I was\nunexpectedly out of the office.\n\nFelipe, I do not assume that the glyph corresponded to the char at\nk is the glyph at k, and the a \u003cdad\u003e + g \u003clam\u003e + h \u003calef\u003e + q \u003csheen\u003e output\ndemonstrates complex (as opposed to one-to-one) glyph-to-char\nmapping. Also, you can see in the code that in some cases\n   order[logOffset] \u003d order[logOffset + direction]\ni.e. 2 or more character indices are mapped to the same glyph index.\n\nI think that the output is correct:\n\n1) order (this is arranged in logical order):\n\u003cdad\u003e LO 0 VO 2\n\u003calef\u003e LO 1 VO 1\n\u003clam\u003e LO 2 VO 1\n\u003csheen\u003e LO 3 VO 0\n\n2) dx (and this one is created for glyph string, in visual order):\n\u003csheen\u003e dx 25\n\u003clam-alef\u003e dx 14\n\u003cdad\u003e dx 21\n\nThe \"zero-width dx\" doesn\u0027t belong no any glyph, it\u0027s extra array member that \nshould be ignored by the StyledText (on Windows as well).\n\nDo you agree with that?\n\nI\u0027m unable to reproduce the lam/shadda problem.\nRunning your c example (which works fine!), I see that lam + shadda, shadda +\nlam, or dad + lam + alef + sheen behave identically as they use to in the\nStyledText. However, I\u0027m not in sync with the HEAD; I\u0027ll try to upgrade code to\nsee what happens.\n\n-----------------\n\nI also thought of glyph rendering on gtk for performance reasons.\n\nHowever, http://developer.gnome.org/doc/API/2.0/gdk/gdk-Drawing-\nPrimitives.html#gdk-draw-glyphs claims that \"...99% of text rendering should be\ndone using gdk_draw_layout() instead [of gdk_draw_glyphs()]\".\nI think that gdk_draw_layout() is apparently able to handle various\nfont/rendering details, thus using it safer that gdk_draw_glyphs. What do you\nthink?\n\n---------------------\n\nRegarding (a) PangoLayout vs. (b) pango_itemize/pango_reorder_items/pango_shape,\nI recalled why I used (a):\n\n- when using (b) with some fonts, after calling itemize and reorder, I still\nhad some PangoAnalysis fields uninitialized, and had to set them manually. I\nsuppose such pango problems will get fixed in the future.\nHowever, it\u0027s possible that I was doing something wrong. Should I recheck this?\n\n- with (b) I had more structs to handle.\n\n- Sorry that I forgot to say this before: According to the Unicode Bidi\nAlgorithm, bidi resolution (itemization) should apply to entire paragraph,\nreordering - per separate line of text after line breaking. As far as I\nunderstand, StyledText doesn\u0027t implement this approach at present (on any\nplatform). I suggest to do so. If you decide to implement it, (a) - as opposed\nto (b) - will provide convenient interface for handling multiline text. And,\nupon your agreement, I could investigate the StyledText code closer to see how\nto implement it.\n\n----------------\n\nPlease let me know if you need additional clarifications. - Thanks.\n",
    "\"The \"zero-width dx\" doesn\u0027t belong no any glyph, it\u0027s extra array member that \nshould be ignored by the StyledText (on Windows as well).\n\nDo you agree with that?\"\n\nIt makes sense now. Though, I don\u0027t think Windows works this way. Did you test \nthe case I described (using arrow key to select text) ?  \n\nAbout the lam/shadda problem, I got the same bug on gedit, I believe this is \npango bug not ours.\n\n\"I think that gdk_draw_layout() is apparently able to handle various\nfont/rendering details, thus using it safer that gdk_draw_glyphs. What do you\nthink? \"\n\nI think this is a excellent idea, actually, this is whole point of this work.\nWe should start implement a TextLayout class, which will uses platform support \nto deal with all the complexity of internationalized text handling. Then we \nchange StyledText to use it.\n\nI checked ATSUI (the mac text layout) and it is (at least seems) pretty good.\n\nWe also need to decide (a) if we will need Uniscribe for Windows or not; (b) \nif our TextLayout will provide API for caret placement and hit testing; (c)it \nwill provide API for text highlighting.\n\nPersonally, I think TextLayout should shield the StyledText from dealing with \ninternationalized text particularities as possible as it can.\n\nI still don\u0027t know what to do about the APIs dealing with the keyboard, right \nnow I think we should not export (make public API) any of them and on the \nplatforms where its possible SWT would deal with behind the scenes.\n",
    "Testing a \u003cdad\u003e + g \u003clam\u003e + h \u003calef\u003e + q \u003csheen\u003e char-by-char selection:\n\nFelipe: For me the extra keystroke occurs when selecting the lam-alef, but not\nthe last character. And it seems to be okay.\n\nLogical selection is processed in respect to the logical sequence of characters, \nnot glyphs. Each keystroke selects one character. I need 2 keystrokes to\nhighlight the lam-alef glyph consisting of 2 characters: one keystroke selects\nlam, the second keystroke - alef (or vice versa depending on the selection\ndirection).\n\nThe same behavior shows the StyledText on Windows.\n\nThe only problem is: when the caret is located logically between the characters\nlam and alef, it should be visually in the middle of a lam-alef glyph. Please\nsee the Windows notepad. I\u0027m not sure there is a standard about it, though.\n\nAs for gedit, it works buggy here.",
    "I just released some code into org.eclipse.swt.graphics.text, it contains:\n-An initial (prototype) API for TextLayout and TextStyle\n-Hack implementation (partial) of this API on GTK \n-Test case example \n\nAt this point we are mainly investigating platform features and which are the \nStyledText needs.\nOur working items are:\n- Investigate the StyledText and verify if the API is we are proposing on \nTextLayout cover all its needs.\n- Write a hack implementation of TextLayout on Win32 (using Uniscribe probably)\n- Write a hack implementation of TextLayout on Carbon \n\nThese hack implementation on each platform (carbon, gtk, win32) are important \nto help us to define a SWT public API that can be implemented on all our \nplatforms. Of course, in the future, we will need an emulated implementation \nfor photon and motif, it doesn\u0027t need to deal with arabic or anything but has \nto work for western scripts in general.\n\nLina, please load the code, choose one working item that you prefer or suggest \nsomething else. Either way let me know in what you are currently working on so \nwe won\u0027t duplicate efforts. I\u0027m currently playing (reading docs, writting test \ncode, etc) with cursor positioning, hit test, and draw selection (text \nhighlighting).\n",
    "Felipe, I suggest that I investigate and modify the StyledText to adopt the new\nAPIs, and - if needed - supply missing APIs for GTK. Is that okay?\n\n-----------\n\nWhat do you think about using Pango on Win32?",
    "Okay, I won\u0027t be working on StyledText then. Lina, do you think that the logic \nof cursor movement and hit test should be provide by the TextLayout object ? \nCurrently StyledText is dealing if this problem by it self. And how about text \nhighlighting, should it be implement by StyledText or TextLayout (Uniscribe \nand ATSUI both have API for doing that)? I believe it all should be done by \nTextLayout. What do you think ?\n\nIf you need new APIs when changing StyledText you should add them to \nTextLayout or request me to do so. Be careful, the APIs on TextLayout should \nbe possible to implement across different platforms.\n(NOTE: StyledText can\u0027t import org.eclipse.swt.internal.gtk.OS! or any other \ninternal SWT API.)\n\nI\u0027m having a pretty bad time using PangoLayout to implement cursor movement \nand hit test. Anyway I\u0027ll be releasing the code I\u0027m working daily even though \nit\u0027s broken so you\u0027ll up to date with what I\u0027m doing.\n\nAbout, using pango on windows, I just clicked on the link \"Gtk+ Win32\" on \nww.gtk.org and the whole page talks about bugs, crashes, licenses issues and \nall kind of problem in general. Don\u0027t know, I\u0027ll talk to SSQ about it.\n",
    "I thought a little bit more: If we use Pango on Win32 we\u0027ll be forcing all \nwindows eclipse user to install pango in their machines, this is not a option.",
    "Felipe, I also think that cursor movement and hit test should be provided by \nthe TextLayout. The same about text highlighting (assuming that it actually \ncomes to xy position \u003c-\u003e char index translations).\nShould this approach be conditioned by the presence of appropriate native APIs? \n(no, in my opinion.)\n\nAs for Win32, neither Win32 APIs nor Uniscribe (as opposed to Pango or ATSUI) \nseems to be capable to handle attributed text. So, to ensure coherence between \nstyle runs and directional runs, it appears that we\u0027ll need to preserve the \nStyledText[Bidi] logic (even if delegated to the TextLayout). What do you think?\n\nCould gtk+ for Win32 installation occur behind the scene, becoming a part of \nthe standard eclipse installation? (But even so, we\u0027ll still be forcing all \nwindows eclipse users to install pango in their machines...)",
    "I gave up by now trying to use pango_layout_move_cursor_visually, it might \nturn out that we don\u0027t need it anyway. The only API for cursor positioning is \ngetCursorPosition(int) which takes a character offset and returns the \nappropriate Rectangle to place the caret. I still have problems with care \npositioning when crossing a direction boundary though.\nHit text is working (xy -\u003e character offset).\n\nYou can actually use Uniscribe to draw attributed text, but you have to do it \nby hand, no high level APIs, check:\nhttp://msdn.microsoft.com/library/en-us/intl/uniscrib_9t2d.asp\n\"Before using Uniscribe, an application divides the paragraph into runs, that \nis, a string of characters with the same style. The style depends on what the \napplication has implemented, but typically includes such attributes as font, \nsize, and color. Uniscribe divides the paragraph into items -- strings that \nhave the same script and direction. The application applies the item \ninformation to produce runs that are unique in script and direction.\"\n\nMy problem with using Uniscribe is that it is not support on NT.\n",
    "Felipe, I wanted to try your testcase, but failed to build \norg.eclipse.graphics.text, having a number of undefined methods, such as \npango_layout_move_cursor_visually. Can you please put the missing natives at \nthe org.eclipse.graphics.text repository?",
    "Please sync:\norg.eclipse.swt\norg.eclipse.swt.gtk\norg.eclipse.swt.graphics.text\nAfter doing that you should be able to run the example.\nPlease, fell free to create other examples, junit test, whatever you need. You \nmight want to add a copy of the StyleText to org.eclipse.swt.graphics.text so \nyou can edit and commit its changes.\n\n",
    "I have released some trial changes for TextLayout.getCursorPosition(), into \norg.eclipse.swt.graphics.text, into a separate folder org.eclipse.swt.20031111 \n(bad name, but I couldn\u0027t figure out how to rename it).\nThis code selects \"weak\" or \"strong\" cursor position according to the match \nbetween the cursor level and the base direction. It seems to work, but \nsometimes I see two carets at once; however, the \"extra\" caret disappears when \nforcing repaint.",
    "Lina, you can release your changes in the main file, I don\u0027t mind. Actually, \nit would make easier to see the differences. You can add comments to help me \nto understand your changes if you think is necessary. We have to agree with \nthe API and its implementation, if we agree that a change is bad we can always \nuse CVS retrieve a old version.\n\nThe two carets you are seeing is a bug either on the example or in swt/gtk (it \ndoesn\u0027t happen on win32/uniscribe). Don\u0027t bother.\n\nI\u0027m not quite sure when the api getCursorPosition() should use strong or weak \nrect. I don\u0027t agree with the native GTK implementation myself. The solution \ncould be add a boolean traling parameter to the function and let to the client \nto decide.\n\nAt this point I know we\u0027ll need to add a moveCursor api and probably another \napi to return if the current position is over a boundary direction so the \nclient can set a splitter caret or other kind of special caret.\n",
    "Felipe, I agree with you that getCursorPosition() may be enhanced by additional \nparameter. However, it seems to me that we can rely on strong / weak \nrectangles - under condition that the embedding level at the insertion point is \nproperly calculated. So I think this additional parameter could reflect (or \nhelp figure out) the cursor level.\n\nI\u0027m currently working on the StyledText, trying to use some of the TextLayout \nAPIs; but maybe it makes sense to focus on the TextLayout implementation first? \nWhat do you think?",
    "I believe we need to understand the StyleText needs in order design a better \nTextLayout API. But if you want to put more efforts into the TextLayout \nimplementation its fine. You can either improve GTKs implementation or start a \nCarbon implementation. Hopefully this week I\u0027ll be release a working Uniscribe \nimplementation and I\u0027ll let you to take over it.\n",
    "Do you still need org.eclipse.swt.20031111 ? Or can it be purge from CVS ? \nI vote to create a new folder \"Eclipse SWT PI\" with \nsubfolders \"gtk\",\"win32,\"carbon\", etc where we can put native code that still \nwasn\u0027t release in org.eclipse.swt.\n\nCode format, insert new line before opening brace, sometimes you do it \nsometimes you don\u0027t, in SWT, we never do it.\n\nYour changes in getCursorPosition, internally it determines the level at \nposition and used it to figure out if the cursor should be at the lead edge or \nat trailing edge. I didn\u0027t test but the idea is right in my opnion. Still, I \nthink we need an API to return the level (I think BidiUtil used to use the \nidea of class for this) at a certain index, this will provide support for \nclients to set a special caret according with the direction on that position. \nKnowing the level a certain pos the client can also find the level at `pos - \n1` to detect direction boundaries if it wants to use special carets in this \ncase (spliter caret or dual-caret).\nWhat do you think ?\n\nI see that you need APIs to get text width, line width, draw line and others. \nWe can have these, but then we need to add coherent set of APIs to work if \nlines, something like:\nint getLineCount();\nPoint getLineBounds(int); // or Point getLineExtent(int)\nint getLineOffset(int);\n\nI have to talk to SSQ about these API.",
    "Felipe, I no longer need org.eclipse.swt.20031111, thanks.\n\nI also think that we need API to get the level, so that clients could select \ncaret shape, set keyboard language.\n\nRegarding adding line-related APIs, I think it may depend on the way supported \nplatforms handle lines (if any). As for pango, for example, I\u0027m going to \ninvestigate if it counts for a \"line\" a \"logical line\" or a \"wrapped line\" \n(which is important for getting line widths, offsets, count etc.).\n\nAt present editing, navigation, line iteration of styled text content is \nprovided by the WrappedContent and the DefaultContent classes. Do you think it \nshould be delegated to the TextLayout?\n",
    "\nLINA: \"Regarding adding line-related APIs, I think it may depend on the way \nsupported platforms handle lines (if any). As for pango, for example, I\u0027m \ngoing to investigate if it counts for a \"line\" a \"logical line\" or a \"wrapped \nline\" (which is important for getting line widths, offsets, count etc.).\"\n\nFELIPE: On windows the whole paragraph and lines handling is done by us, \ntherefore we can do whatever we want. Pango, line count returns the number \nof \"wrapped lines\".\n\nLINA: \"At present editing, navigation, line iteration of styled text content \nis provided by the WrappedContent and the DefaultContent classes. Do you think \nit should be delegated to the TextLayout? \"\n\nFELIPE: Not sure yet (I didn\u0027t look at StyledText). I would say styled text \ncontent would make sense to delegate to TextLayout. Navigation, should stay on \nStyledText. I don\u0027t quite know what editing and line iteration involve in this \nscope. \n",
    "To clarify: StyledTextContent (their DefaultContent/WrappedContent \nimplementations) stores and provides read/write access to the text model.\nStyledText handles all navigation and presentation.\nI don\u0027t think StyledTextContent implementations should ever know about the \npresentation/layout. It\u0027s just the \"dumb\" storage.",
    "Because Bug6782 was returned as duplicate of this enhancement,\nI would like to clarify my requirements described in the Bug.\n\nI have a GEF based editor, which must be enhanced to support bidirectional \nlanguage.  To accomplish this, I was planning to use the following APIs in \nBidiUtil class.\n\n- isBidiPlatform()\n- getRenderInfo()\n- drawGlyph()\n- addLanguageListener()\n- removeLanguageListener()\n- setKeyboardLanguage()\n\nIf your TextLayout class is expected as a public class to expose bidi \ncapability, I would like it to have the following four functions.\n\n- retrieving glyphs with their width information in a flexible fashion\n  (getRenderInfo() allows us to control reordering and shaping.\n   It is important because we want sometimes to override the default behavior\n   of reordering and shaping.)\n- drawing the glyphs\n- listening to an event of keyoboard layout chagne\n- setting keyboard layout to any available language\n\nBy the way, I was not able to find TestLayout class in eclipse 3.0M6 build.\nDo you have any planned date when it will be integrated in a build?",
    "Since I noticed TextLayout class was integrated in the M8 build, I have \nstudied the feasibility of using the class instead of BidiUtil class for my \neditor.  The following is the result corresponding to my original request:\n\n\u003e - retrieving glyphs with their width information in a flexible fashion\n\u003e   (getRenderInfo() allows us to control reordering and shaping.\n\u003e    It is important because we want sometimes to override the default behavior\n\u003e    of reordering and shaping.)\nThe width of each glyph can be retrieved by calling TextLayout.getOffset() \ntwice.  This is okay for my editor.\nHowever TextLayout class calculates shaping completly within the class and do \nnot allow us to override the default behavior.  This is not enough flexible \nfor my editor.  For example, I need sometimes choose middle form or final form \nnot initial form for a character even if it is the first one in a text \nstring.  Also there are cases that I need choose initial form or middle form \nfor the last character in a text string.  I would also like to control the \ndigit shape.\n\n\u003e - drawing the glyphs\nTextLayout.draw() satisfies this requirement.\n\n\u003e - listening to an event of keyoboard layout chagne\n\u003e - setting keyboard layout to any available language\nThese IME-related functions are missing in TextLayout.  I guess TextLayout \nclass is not designed as the complete replacement of BidiUtil but partial \nreplacement of it, only layout-related functions.  If so, should I stick to \nBug6782 on these functions?\n\nSummary of the result:\n- TextLayout does not allow us to override the default behavior on shaping.\n- TextLayout does not provide any IME-related functions.\n\nI would like to request further enhancement for these missing functions.\n\n\n",
    "\u003e TextLayout does not allow us to override the default behavior on shaping.\n\nThe default shaping behavior can be overriden, either in your application code \nor SWT, by using bidi control characters (zero-width joiner/non-joiner) or pre-\nshaped presentation forms (U+FExx range). The latter sounds preferable, since \nit doesn\u0027t expand the original string.\n\nWhat do you think?",
    "\"either in your application code or SWT\"\nImplement it in the application, here some reasons:\n1) This features is not in Eclipse plan 3.0 and probably never will.\n2) ATSUI, Pango, Uniscribe do not offer any API to help with this feature. \nTextLayout should be the same.\n3) Add setSegments() API to TextLayout to implement StyledText \nBidiSegmentsListener was bad, we just did it cause it was regression.\n",
    "SQ,\nWe need access to a TextLayout\u0027s TextStyles and their Fonts in order to \nsimulate Zoom functionality in Draw2d.  Please add the necessary API asap so \nwe can get this into M9.",
    "Okay, I will use zwj and zwnj for my editor to control shaping and use rlo, \nlro, and pdf to control reordering.  Also GEF team is going to add some APIs \nso that we can use TextLayout class for a GEF based editor.\nNow our editor is going to have the ability to render bidirectional characters \nwith TextLayout class and GEF\u0027s enhancement. Thanks.\n\nAs for IME functions, what do you think?   I can not complete bidi enabling of \nmy editor without these functions.",
    "To control reordering you can use TextLayout#setSegments(), we had to add it \nbecause StyledText needs it. \nI\u0027ll look at \"IME functions\" after Eclipse 3.0 only.\n\nRight now we have more people asking for italic support (StyledText) and \nunderline.\n",
    "Felipe,\nThanks for the suggestion.  Unfortunately TextLayout#setSegments() is slightly \ndifferent from what I needed here.  It allows us to insert LRM or RLM at any \nposition but the marks only affect to characters of neutral type next to \nthem.  What I am trying to do is rendering whole string in non-Arabic in right-\nto-left direction or rendering whole string in Arabic in left-to-right \ndirection.  That is why I wanted to insert LRO, RLO, or PDF.  If you can \nenhance setSegments() to have the ability, it would be helpful for us but I do \nnot think it is mandatory.\n\nThough I understand you have other works having priority over IME related \nfunctions, I would like you to try to provide IME related functions as well in \neclipse 3.0.\n",
    "Closing problem report.\n\nPlease enter a new problem report for each defect or feature request still \nreamining.\n",
    "I have opened another one for IME related functions, Bug62431."
  ],
  "commentCreationDates": [
    "2003-07-10T18:04:54+02:00",
    "2003-07-14T14:50:45+02:00",
    "2003-07-14T18:34:46+02:00",
    "2003-07-15T08:41:26+02:00",
    "2003-07-15T17:49:44+02:00",
    "2003-07-15T18:13:02+02:00",
    "2003-07-15T18:28:32+02:00",
    "2003-07-16T01:06:22+02:00",
    "2003-07-16T13:39:46+02:00",
    "2003-07-17T00:36:56+02:00",
    "2003-07-17T00:38:22+02:00",
    "2003-07-17T02:29:03+02:00",
    "2003-07-17T17:55:25+02:00",
    "2003-07-24T22:47:31+02:00",
    "2003-07-31T22:49:28+02:00",
    "2003-08-03T15:33:56+02:00",
    "2003-08-05T19:07:54+02:00",
    "2003-08-05T22:51:19+02:00",
    "2003-08-06T21:24:50+02:00",
    "2003-08-08T16:13:16+02:00",
    "2003-08-08T16:29:08+02:00",
    "2003-08-12T19:03:46+02:00",
    "2003-08-23T00:06:31+02:00",
    "2003-08-24T18:11:29+02:00",
    "2003-08-26T18:02:44+02:00",
    "2003-08-26T21:31:25+02:00",
    "2003-09-01T19:14:00+02:00",
    "2003-09-02T22:17:23+02:00",
    "2003-09-03T18:07:57+02:00",
    "2003-09-03T19:51:48+02:00",
    "2003-09-03T22:40:48+02:00",
    "2003-09-09T22:24:24+02:00",
    "2003-09-15T19:35:43+02:00",
    "2003-09-15T21:41:37+02:00",
    "2003-09-15T21:44:39+02:00",
    "2003-09-16T15:10:10+02:00",
    "2003-09-16T17:20:17+02:00",
    "2003-09-18T18:50:51+02:00",
    "2003-09-21T17:55:38+02:00",
    "2003-09-30T23:27:20+02:00",
    "2003-10-16T23:35:33+02:00",
    "2003-10-19T17:04:07+02:00",
    "2003-10-20T18:24:32+02:00",
    "2003-10-20T18:30:01+02:00",
    "2003-10-21T22:31:20+02:00",
    "2003-10-22T20:15:29+02:00",
    "2003-10-22T23:55:04+02:00",
    "2003-10-22T23:58:20+02:00",
    "2003-10-23T00:05:05+02:00",
    "2003-10-23T17:31:07+02:00",
    "2003-10-23T21:18:31+02:00",
    "2003-10-23T22:30:56+02:00",
    "2003-10-24T20:43:43+02:00",
    "2003-10-24T20:47:07+02:00",
    "2003-10-27T15:11:33+01:00",
    "2003-10-27T15:35:12+01:00",
    "2003-10-29T18:17:28+01:00",
    "2003-10-29T20:41:02+01:00",
    "2003-10-30T14:54:50+01:00",
    "2003-11-04T18:18:44+01:00",
    "2003-11-05T17:04:30+01:00",
    "2003-11-05T17:45:12+01:00",
    "2003-11-05T23:37:40+01:00",
    "2003-11-06T11:45:19+01:00",
    "2003-11-06T16:55:37+01:00",
    "2003-11-10T12:59:44+01:00",
    "2003-11-10T16:48:07+01:00",
    "2003-11-11T20:03:58+01:00",
    "2003-11-11T20:51:59+01:00",
    "2003-11-12T20:54:14+01:00",
    "2003-11-12T21:27:56+01:00",
    "2003-11-18T23:48:03+01:00",
    "2003-11-19T17:57:59+01:00",
    "2003-11-19T18:11:21+01:00",
    "2003-11-19T22:54:43+01:00",
    "2004-01-27T09:33:30+01:00",
    "2004-04-05T16:35:36+02:00",
    "2004-04-14T19:10:49+02:00",
    "2004-04-14T21:02:53+02:00",
    "2004-04-21T22:19:01+02:00",
    "2004-04-27T09:22:16+02:00",
    "2004-04-27T18:37:44+02:00",
    "2004-04-28T13:17:30+02:00",
    "2004-05-14T17:22:41+02:00",
    "2004-05-17T03:12:40+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Argument not valid",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2355"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2299"
        },
        {
          "method": "org.eclipse.swt.custom.DefaultContent.error",
          "source": "DefaultContent.java:673"
        },
        {
          "method": "org.eclipse.swt.custom.DefaultContent.getLineAtOffset",
          "source": "DefaultContent.java:567"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.doMouseLocationChange",
          "source": "StyledText.java:2796"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.handleMouseMove",
          "source": "StyledText.java:5361"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText$12.handleEvent",
          "source": "StyledText.java:5086"
        },
        {
          "method": "org.eclipse.swt.widgets.EventTable.sendEvent",
          "source": "EventTable.java:82"
        },
        {
          "method": "org.eclipse.swt.widgets.Widget.sendEvent",
          "source": "Widget.java:962"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.runDeferredEvents",
          "source": "Display.java:1815"
        },
        {
          "method": "org.eclipse.swt.widgets.Display.readAndDispatch",
          "source": "Display.java:1595"
        },
        {
          "method": "tests.SimpleStyledText.main",
          "source": "SimpleStyledText.java:71"
        }
      ],
      "number": 0,
      "commentIndex": 52,
      "bugId": "39881",
      "date": "2003-10-24T20:43:43+02:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "normal"
    },
    {
      "exceptionType": "org.eclipse.swt.SWTError",
      "message": "No more handles",
      "elements": [
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2395"
        },
        {
          "method": "org.eclipse.swt.SWT.error",
          "source": "SWT.java:2299"
        },
        {
          "method": "org.eclipse.swt.graphics.GC.drawSubstring",
          "source": "GC.java:953"
        },
        {
          "method": "org.eclipse.swt.internal.BidiUtil.drawChars",
          "source": "BidiUtil.java:498"
        },
        {
          "method": "org.eclipse.swt.custom.StyledTextBidi.drawChars",
          "source": "StyledTextBidi.java:348"
        },
        {
          "method": "org.eclipse.swt.custom.StyledTextBidi.drawBidiText",
          "source": "StyledTextBidi.java:319"
        },
        {
          "method": "org.eclipse.swt.custom.StyledTextRenderer.drawText",
          "source": "StyledTextRenderer.java:295"
        },
        {
          "method": "org.eclipse.swt.custom.StyledTextRenderer.drawStyledLine",
          "source": "StyledTextRenderer.java:258"
        },
        {
          "method": "org.eclipse.swt.custom.StyledTextRenderer.drawLine",
          "source": "StyledTextRenderer.java:144"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.performPaint",
          "source": "StyledText.java:6082"
        },
        {
          "method": "org.eclipse.swt.custom.StyledText.handleTextChanged",
          "source": "StyledText.java:5479"
        }
      ],
      "number": 1,
      "commentIndex": 52,
      "bugId": "39881",
      "date": "2003-10-24T20:43:43+02:00",
      "product": "Platform",
      "component": "SWT",
      "severity": "normal"
    }
  ],
  "groupId": "39881",
  "bugId": "39881",
  "date": "2003-07-10T18:04:54+02:00",
  "product": "Platform",
  "component": "SWT",
  "severity": "normal"
}