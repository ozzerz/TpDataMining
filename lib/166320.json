{
  "comments": [
    "Build ID: M20060921-0945\n\nSteps To Reproduce:\n1. Launch the OSGI container with a space in the OSGI installation location.\n\n\nMore information:\nThe problem is probably SystemBundleData.getOSGIBase(): It converts a\njava.net.URL into a java.io.File by using new File(URL.getPath()) which escapes\nspaces with %20 (and so other special characters will most likely fail as well on unicode file systems).\n\nThis throws IOExceptions that is catched later on but ignored with the comment \u003cquote\u003ethis can never happen because we created those uris and we are GODs\u003c/quote\u003e.\n\nThere is a workaround however, you can set the System Property \"osgi.framework\" to the location of the osgi jar file and that will dodge this code. However even\nthat workaround is bugged as the url needs to be something of the following type file:C:/api/lib/org.eclipse.osgi_v20069988.jar. Notice the missing slashes but a substring is done which requires this.",
    "How are you launching Equinox.  I looks like you are using \n\njava -jar org.eclipse.osgi_\u003cversion\u003e.jar\n\nPlease confirm, thanks.",
    "This works for me if I use the supported EclipseLauncher class to launch Equinox.  This sets the osgi.framework property automatically and correctly handles when spaces are used in the install location.",
    "Created an attachment (id\u003d57257)\nRunFramework.java\n\nSource code for a small test program demonstrating the bug",
    "I just added an attachement demonstrating the issue. I used the 3.2.0 release (since that\u0027s whats getting embedded in our product) but I checked the latest CVS version of SystemBundleData in the osgi project and it\u0027s still bugged (see http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.osgi/defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/SystemBundleData.java?revision\u003d1.3\u0026view\u003dmarkup) . \n\nThis java program creates an OSGi container directly. We use this for embedding API\u0027s, in server instances and when running plugins inside an applet. For running the program you would only need the org.eclipse.osgi plugin jar in your classpath. \n\nIt refers to two plugins that it tries to install but this will only happen when there is no space in the absolute pathname of the org.eclipse.osgi jar. If it works then the program will print out \nInstalling plugin org.eclipse.osgi.services_3.1.100.v20060601.jar\nInstalling plugin org.eclipse.osgi.util_3.1.100.v20060601.jar\nand exit gracefully. \n\nWhen however there is space in the absolute pathname of org.eclipse.osgi plugin jar, then it will not work. It will stacktrace with \njava.lang.IllegalStateException\n\tat org.eclipse.osgi.internal.baseadaptor.BaseStorage.getBundleContent(BaseStorage.java:590)\n\tat org.eclipse.osgi.internal.baseadaptor.BaseStorage.createBundleFile(BaseStorage.java:600)\n\tat org.eclipse.osgi.baseadaptor.BaseAdaptor.createBundleFile(BaseAdaptor.java:491)\n\tat org.eclipse.osgi.baseadaptor.BaseData.getBundleFile(BaseData.java:367)\n\tat org.eclipse.osgi.baseadaptor.BaseData.getEntry(BaseData.java:93)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getEntry(AbstractBundle.java:1281)\n\tat org.eclipse.osgi.framework.internal.core.Framework.findVMProfile(Framework.java:393)\n\tat org.eclipse.osgi.framework.internal.core.Framework.loadVMProfile(Framework.java:312)\n\tat org.eclipse.osgi.framework.internal.core.Framework.initialize(Framework.java:187)\n\tat org.eclipse.osgi.framework.internal.core.Framework.\u003cinit\u003e(Framework.java:112)\n\tat org.eclipse.osgi.framework.internal.core.OSGi.createFramework(OSGi.java:90)\n\tat org.eclipse.osgi.framework.internal.core.OSGi.\u003cinit\u003e(OSGi.java:31)\n\tat RunFramework.main(RunFramework.java:33)\n\nDepending on what exactly you are doing at startup of the framework, the trace can differ a bit, but it is all caused by the same issue. The storagehooks for the bundle (or additional bundles) are not registered correctly. The culprit is the above mentioned SystemBundleData.getOSGIBase() which is just plain dodgy code. \n\n\tprivate File getOsgiBase() {\n\t\tString frameworkLocation \u003d FrameworkProperties.getProperty(SystemBundleData.OSGI_FRAMEWORK);\n\t\tif (frameworkLocation !\u003d null)\n\t\t\t// TODO assumes the location is a file URL\n\t\t\treturn new File(frameworkLocation.substring(5));\n\t\ttry {\n\t\t\tURL url \u003d getClass().getProtectionDomain().getCodeSource().getLocation();\n\t\t\t// assumes file URL\n\t\t\treturn new File(url.getPath());\n\t\t} catch (Throwable e) {\n\t\t\t// do nothing\n\t\t}\n\t\tframeworkLocation \u003d FrameworkProperties.getProperty(\"user.dir\"); //$NON-NLS-1$\n\t\tif (frameworkLocation !\u003d null)\n\t\t\treturn new File(frameworkLocation);\n\t\treturn null;\n\t}\n\nThe normal condition with this test program would be that the property is not found, asking the url from the class(). However this URL in a string form, contains a %20 escape code for each space. So return new File(url.getPath()) is just plain wrong.\n\nIt would seem at first sight that setting the system property for the osgi framework location is a simple workarround were it not that this code is also bugged concerning the substring. This is probably developped on a Unix system. The file: protocol requires according to the RFC file:// to be the start of the URI. However, the Java VM is bugged in that it eliminates sequences of more than two forward slashes. It however overlooks that this causes problems for hierarchical URI\u0027s which do not require a hostname. So if you set the system property correctly this would become file://C:/temp/osgi.jar or file:///tmp/osgi.jar depending if you are on windows or unix. So if nobody touches this property in code the substring with index 5 is clearly wrong. I suspect that who wrote this code orginally had some other code setting the property which would cause on unix the string to be file:/tmp/osgi.jar due to the JVM bug (this actually not a valid file: URI at all).\n\nIn any case it should be clear that getOSGIBase() method needs some fixing, regardless of my usecase.",
    "See Erik\u0027s comment",
    "Thanks for the testcase.  I understand your points, this code is really here as a last resort.  It assumes that the property is set ahead of time by the supported EclipseStarter launcher class.  With that said it should do the proper decoding to handle special chars.\n\nBut I would like to better understand how double slashes \"//\" will cause problems.  On all Eclipse supported platforms that I know of Java will ignore the initial double slash.  So if you set the property to file://\u003csome path\u003e we will end up doing new File(\"//C:/temp/osgi.jar\") or new File (\"///tmp/osgi.jar\").  This will end up with a File object that points to C:/temp/osgi.jar and /tmp/osgi.jar respectively.  In my tests this all seems to work fine.  If this is causing problems then we have some other areas that need to be fixed.\n",
    "Note that there\u0027s a distinction for URIs between \u0027file:///c:/\u0027 and \u0027file:c:/\u0027 -- the former, the protocol is \u0027file\u0027 and the host is empty; in the latter, the file:c: is the protocol (which may not exist). The behaviour should have the file://\u003chost\u003e/ as part of the URL, and if \u0027host\u0027 is left empty for the file you end up with file:///tmp or file:///c:/temp.\n\nNB on Mac OS X, the new File(\"///tmp/the dir\") works OK and maps to \"/tmp/the dir\". I too don\u0027t believe that the URL\u0027s path should be used as a direct file path; for example, the URL may also have non-ASCII characters which would be appropriately encoded in URL escape sequences. \n\nLet me know if there\u0027s anything specific you\u0027d need me to test for the Mac OS X platform for this.",
    "Well, I don\u0027t know exactly which OS and/or jdk version or vendor had issues with it. In this situation it did not fail as I had already found the problem and saw that I could do a workarround with the property. I used the value of file:c:/temp/ which as Alex correctly mentions is an invalid file: URI, but works due to the substring(5). I know however that I have seen similar code fail (the reason I knew about the forward slash elimination in the java classes). \n\nIt still seems kind of dodgy to me to rely on this behavior. I\u0027m wondering what this would do with Windows UNC paths for network shares for example (may be an absurd use case but still)",
    "UNC paths are not unreasonable.  Infact we have other places in the code that do the same dodgy thing and have comments that it is done to properly construct UNC paths from file URL (probably ill formed ones).  I do think this is dodgy, but I\u0027m concerned about changing this code everywhere and breaking some usecase.\n\nSorry for treading lightly here but this has proven to be a very sensitive area to change.",
    "No problem. I completely agree, it should not be done lightly. \n\nI have my own personal nightmares about the file protocol. Being cross platform in this regard is not easy, especially if it ever needs to be passed on remotely to another platform. And in some cases, as soon as it goes somewhere through the java.net.URI normalize methods (possibly in 3th party code) it can break because of the forward slash elimination. I can imagine that not only equinox and the platform but maybe a host of other projects have similar issues in their code.\n\nHowever, when the property is not set (by running the equinox kernel seperatly) and the url to file conversion is done, it\u0027s just plain wrong. Any url which contained an escaped character would fail, spaces being obvious on english systems, I wonder what would happen on far eastern installations. So I think that could be fixed without to much impact. It would only widen the number of installations were the code would work correctly.\n\nApart from that it may be a good idea to file another bug to look for other occurences of File(URL.getPath()) constructs."
  ],
  "commentCreationDates": [
    "2006-11-30T08:49:30+01:00",
    "2006-11-30T14:41:04+01:00",
    "2007-01-09T22:05:25+01:00",
    "2007-01-22T15:03:04+01:00",
    "2007-01-22T15:22:24+01:00",
    "2007-01-22T15:25:54+01:00",
    "2007-01-22T16:51:30+01:00",
    "2007-01-22T17:42:19+01:00",
    "2007-01-23T14:51:36+01:00",
    "2007-01-23T15:20:41+01:00",
    "2007-01-23T15:57:00+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalStateException",
      "elements": [
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.BaseStorage.getBundleContent",
          "source": "BaseStorage.java:590"
        },
        {
          "method": "org.eclipse.osgi.internal.baseadaptor.BaseStorage.createBundleFile",
          "source": "BaseStorage.java:600"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.BaseAdaptor.createBundleFile",
          "source": "BaseAdaptor.java:491"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.BaseData.getBundleFile",
          "source": "BaseData.java:367"
        },
        {
          "method": "org.eclipse.osgi.baseadaptor.BaseData.getEntry",
          "source": "BaseData.java:93"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.AbstractBundle.getEntry",
          "source": "AbstractBundle.java:1281"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.findVMProfile",
          "source": "Framework.java:393"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.loadVMProfile",
          "source": "Framework.java:312"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.initialize",
          "source": "Framework.java:187"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.Framework.\u003cinit\u003e",
          "source": "Framework.java:112"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.OSGi.createFramework",
          "source": "OSGi.java:90"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.OSGi.\u003cinit\u003e",
          "source": "OSGi.java:31"
        },
        {
          "method": "RunFramework.main",
          "source": "RunFramework.java:33"
        }
      ],
      "number": 0,
      "commentIndex": 4,
      "bugId": "166320",
      "date": "2007-01-22T15:22:24+01:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "major"
    }
  ],
  "groupId": "166320",
  "bugId": "166320",
  "date": "2006-11-30T08:49:30+01:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "major"
}