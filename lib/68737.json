{
  "comments": [
    "Try this:\nSet up a JUnit test that fails.\nRun the JUnit test.\nClick on the failed test in the upper half of the JUnit view (\"Failures\").\nThe stack trace for the failed test appears in the lower half of the JUnit view.\nDouble click a line in the stack trace.\n\nExpected behaviour:\nAn editor containing the source line clicked in the stack trace should have\nopened.  The cursor should be on the indicated line.\n\nCurrent behaviour:\nNothing happens.",
    "Which build are you using. Do you have anything in the log.",
    "I\u0027m using 3.0GA, build 200406251208.  No, there isn\u0027t anything in the .log-file.\n\nDoes this work for you?\n",
    "This works for me under Windows XP using the following test case:\n\npublic class Testing extends TestCase {\n\tpublic void testOne() {\n\t\tAssert.fail();\n\t}\n}\n",
    "The same test case works for me under Linux GTK as well.\n\nThe editor opens and the statement causing the assertion failure is \nhiglighted. Do you have steps to reproduce this ?",
    "I can provoke this using your example test case as well.\n\nJust to make sure there\u0027s no mis-understanding here, can you confirm that you\nare clicking on stack frames in the stack trace in the lower / right pane rather\nthan clicking in the upper / left test-case-failures pane?\n\nStarting with an empty data-dir I can reproduce this thusly:\nStart Eclipse.\nOn the Welcome page, click \"Workbench\".\nFile-\u003eNew-\u003eProject...\nCreate a Java project.\nName the project \"test\" and click Finish.\nSay \"yes\" to the question about switching to the Java perspective.\nRight click the \"test\" project in the Package Explorer.\nNew-\u003eJUnit Test Case.\nSay \"yes\" to adding junit.jar to the build path.\nName the new class \"Test\".  Click Finish.\nAdd the following method:\n\npublic void testOne() {\n  Assert.fail();\n}\n\nMake sure the imports are complete so that the file builds OK.\nSave the file.\nGo to the start of the file (to make sure the result from clicking on the stack\ntrace is obvious).\nRun-\u003eRun As-\u003eJUnit test\nThe JUnit pane appears.  The failed test is marked in the upper pane.\nDouble click the line \"at Test.testOne()V(Test.java:18)\" line in the stack trace.\n\nNothing happens.  The cursor doesn\u0027t move.\n\nDouble click the line \"at\njava.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown\nSource)\".\n\nNothing happens.  There\u0027s no complaint about that the source code isn\u0027t available.\n",
    "This seems to be a problem with the \"encoding\" of the stack trace. The line \nlooks like this in my example:\n\nat Testing.testOne(Testing.java:6)\n\nwhich VM are you using ?\n",
    "I\u0027m running JRockit 1.4.2_04.\n\nIf I run a program with new Exception().printStackTrace() in it I get this from\nJRockit:\n\njava.lang.Exception\n        at PrintStackTrace.printStackTrace()V(PrintStackTrace.java:17)\n        at PrintStackTrace.callMe()V(PrintStackTrace.java:12)\n        at PrintStackTrace.main([Ljava.lang.String;)V(PrintStackTrace.java:22)\n\nIf I run the same program with SUN\u0027s 1.4.1 VM, I get this:\n\njava.lang.Exception\n        at PrintStackTrace.printStackTrace(PrintStackTrace.java:17)\n        at PrintStackTrace.callMe(PrintStackTrace.java:12)\n        at PrintStackTrace.main(PrintStackTrace.java:22)\n\nSo the reason is JRockit is printing the method descriptors in addition to the\nmethod name in the stack traces.\n",
    "Note to self (or whoever else is interested):\n\nThe code to change is in\n\"http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.jdt.junit/src/org/eclipse/jdt/internal/junit/ui/FailureTrace.java?rev\u003dHEAD\u0026content-type\u003dtext/vnd.viewcvs-markup\",\nin method createOpenEditorAction(String).\n",
    "Created an attachment (id\u003d14699)\nStack trace parser that works for both JRockit and SUN stack traces\n\nLook for the last starting parentheses rather than the first ones.  Works for\nboth JRockit and SUN using these two test cases:\n\n\tat PrintStackTrace.printStackTrace(PrintStackTrace.java:17)\n\tat PrintStackTrace.printStackTrace()V(PrintStackTrace.java:17)\n",
    "patch released - thanks",
    "John,\n\nI had to revert the patch you provided due to the fact that you didn\u0027t agreed on\nproviding your contribution under the EPL.",
    "I opened bug 85951 for reimplementing the function under EPL.",
    "Drik,\n\nIf the three lines I wrote are even copyrightable, I hereby declare them to be\nin the public domain, and you can do with them whatever you like, including\nre-releasing them under any license you see fit.\n\nHave fun.\n",
    "I have reapplied the patch."
  ],
  "commentCreationDates": [
    "2004-06-28T13:04:08+02:00",
    "2004-06-28T18:53:53+02:00",
    "2004-06-29T08:58:26+02:00",
    "2004-06-30T12:06:32+02:00",
    "2004-06-30T12:28:59+02:00",
    "2004-06-30T15:23:41+02:00",
    "2004-07-01T10:58:23+02:00",
    "2004-07-01T12:05:33+02:00",
    "2004-08-31T09:59:50+02:00",
    "2004-09-22T16:51:56+02:00",
    "2004-09-22T17:14:44+02:00",
    "2005-02-21T10:24:32+01:00",
    "2005-02-21T12:02:38+01:00",
    "2005-02-22T08:27:51+01:00",
    "2005-02-22T17:07:01+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.Exception",
      "elements": [
        {
          "method": "PrintStackTrace.printStackTrace",
          "source": "PrintStackTrace.java:17"
        },
        {
          "method": "PrintStackTrace.callMe",
          "source": "PrintStackTrace.java:12"
        },
        {
          "method": "PrintStackTrace.main",
          "source": "PrintStackTrace.java:22"
        }
      ],
      "number": 0,
      "commentIndex": 7,
      "bugId": "68737",
      "date": "2004-07-01T12:05:33+02:00",
      "product": "JDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "68737",
  "bugId": "68737",
  "date": "2004-06-28T13:04:08+02:00",
  "product": "JDT",
  "component": "UI",
  "severity": "normal"
}