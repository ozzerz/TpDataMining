{
  "comments": [
    "I\u0027ve been using Hyades to profile Eclipse and peering casually under the hood \nwith Process Explorer (from sysinternals). I noticed that when the target \nworkbench exits, the monitoring workbench sticks at 30% CPU utilization \nforever. I let it sit there contemplating its navel for 30 min., but it stayed \nat 30%. I have reproduced the same behavior with Java2Demo from Sun as the \ntarget application. It is not reproducible with a really trivial application. \nIt is not reproducible with 3.0.2.\n\nIn the profiling monitor view, the entry for my run never stops \nsaying \"...collecting\", either. Obviously it isn\u0027t collecting - the underlying \ntarget process is long since gone - but this is probably a red herring. Hyades \ntruly isn\u0027t processing data any longer, as far as I can tell: The view data \ndoesn\u0027t change if refresh or re-open the views. Something else is wrapped \naround the axle.\n\nIf I drop back to  Hyades/TPTP 3.0.2 in the monitoring workbench, the same \nprofiling exercise doesn\u0027t exhibit the lingering CPU load; a short time after \nthe target app exits, the monitoring workbench drops back to effectively no CPU \ncycles.\n\nI\u0027ve found the good behavior of 3.0.2 and the bad behavior of 3.3 to be \nreproducible, at least on my machine configuration (provided below). \n\nI haven\u0027t yet been able to figure out who is sucking the CPU cycles. The \nTCPFlusher and XMLParser threads are active, but don\u0027t look busy at first \nblush. One not very scientific examination suggested it is the UI that\u0027s busy \n(down in swt), but doing what?! And what is it about profiling that provokes it \nto lingering busyness?\n\nHere\u0027s what I was doing:\n\nThe monitoring Eclipse is based on an IES 3.0.2 200501191352 build, running \nunder the IBM 1.4.2 JRE: J2RE 1.4.2 IBM Windows 32 build cn142-20040926, with a \n784M java heap (-vmargs -Xmx784M). This is true both in the v3.0.2 case that \nworks and the v3.3 case the sucks CPU cycles. The RAC version doesn\u0027t seem to \nmatter either way, but I\u0027ve mostly used a 3.3. runtime pkg.\n\nThe target workbench is based on an IES build, running under the SUN 1.4.2_07 \nJRE. It is brought up via the monitoring workbench, as an external Java \napplication. I bring it up to the welcome page, on an empty workspace and then \nshut it down. The launch config is based on this command line:\n\njava -Xmx300M -cp f:\\Perf\\Test\\eclipse\\eclipse\\startup.jar \norg.eclipse.core.launcher.Main -os win32 -ws win32 -arch x86 -data \nf:\\Perf\\Test\\eclipse\\eclipse\\workspace -showlocation\n\nFilters are: \n\norg.eclipse* INCLUDE\n* EXCLUDE\n\nAlternatively, you can use Java2Demo with these filters:\n\njava2d.* INCLUDE\n* EXCLUDE\n\nJava2Demo is less painful, of course, in that it doesn\u0027t take nearly as long to \ncome up under profiling. :-) I can package up the project I\u0027m using for you, if \nthat would be useful.\n\nThe profiling configuration used is the Execution History - Statistical, with \nthe only change from defaults being the filter set.\n\nGot all that? :-) So, the steps are:\n\n1. Launch the monitoring workbench and opening the profiling perspective.\n2. Profile the target workbench as an external Java application, using the info \ndescribed above, or profile Java2Demo as a Java App resident in the workbench.\n3. When the target app comes up, shut it down.\n4. Use Process Explorer or the tool of your choice to take note of when the \ntarget workbench actually exits so you now for sure the PUT is gone - it can \ntake non-trivial time after the GUI goes bye-bye.\n5. Using Process Explorer or the tool of your choice, notice that the \nmonitoring workbench consumes 30% of the CPU time forever.\n\nYour mileage may differ, given differences in hardware. My hardware \u0026 OS \nconfiguration is:\n\nDual 3.0 MHz Xeon \nhyper-threading enabled, so it thinks it is a quad processor\n4G RAM\nWindows XP, SP1\n\nAll 4 (virtual) CPU\u0027s are loaded when the workbench is behaving badly.",
    "In my haste to get out the door last night, I forgot to mention which Hyades \n3.3 driver I was using. I\u0027ve reproduced this behavior with both a March 17 \ndriver and a March 31 driver (20050331_1053).",
    "Please try with an IBM JRE and see if you have the same problem.\n\nUse -DPerfUtil.debug\u003dtrue on the command line and output the stdin and stdout to\nfiles like here:\n\njava -DPerfUtil.debug\u003dtrue -Xmx300M -cp f:\\Perf\\Test\\eclipse\\eclipse\\startup.jar \norg.eclipse.core.launcher.Main -os win32 -ws win32 -arch x86 -data \nf:\\Perf\\Test\\eclipse\\eclipse\\workspace -showlocation 1\u003e1 2\u003e2\n\nYou can also try to get a Java dump by pressing Ctrl-Break in the Java command\nwindow (after you terminate the target process) to see the call stack dumps on\neach thread.",
    "Created an attachment (id\u003d19785)\n3 java cores \u0026 PerfUtil.debug output from bad Java2D run\n",
    "Marius, I\u0027m a little suprised you expected changing the JRE used by the PUT \n(program under test) might affect the lingering CPU utilization in the \nmonitoring workbench, but I tried it anyway: It makes no difference. Note that \nthe *monitoring* workbench has been using the IBM 1.4.2 JRE all along.\n\nI\u0027ve added an attachment that includes the stdout from PerfUtil.debug (there \nwas nothing on stderr) and also 3 java core dumps. You only asked for 1, but \nsince it smells a little like a threading problem, I thought it might be useful \nto have more than one sample of the thread stacks.\n\nThese dumps \u0026 the stdout data was generated using Java2Demo as the PUT instead \nof eclipse...that way I don\u0027t have to wait 10 min. for the PUT to come up! \n\n2 other items of note: \n\n(1) This morning, I thought I saw this same linger behavior when collecting \nmemory analysis data (with instance details) instead of full execution history, \nbut I can\u0027t swear to it. I didn\u0027t pursue since we already had a pretty reliable \nway of reproducing it, at least in my env.\n\n(2) Twice when I was gathering the dumps, etc. for you, I had a run which did \nnot demonstrate the bad behavior. So, though it is reproducible pretty \nreliability (I\u0027d say at least 80% of the time), it does not in fact seem to \nhappen every time.\n\n",
    "Sorry, I overlooked your note and missed that you used the IBM JRE for the\nmonitored workbench, although it might make a difference on the PUT if you run\nSUN  or IBM because of the behavior (which might be different) of the profiling\nagent and JVM on a hyper-threaded CPU.\n\nI think this is threading problem which happens especially on hyper-threaded\nmachines so I would try to debug the Java2Demo on a single hyper-threaded CPU.\n",
    "OK, you\u0027re on your own now. :-) My available configurations are either a \ndecidedly not hyper-threaded single CPU laptop which is hard-pressed to gather \nthis amount of execution history data at the best of times, or the dual \nprocessor desktop I reported the problem on. I can disable the hyper-threading, \nbut I haven\u0027t found a way to disable one of the physical CPU\u0027s.\n\nIf it would help, I should be able to give you guys Remote Desktop access to \nthe dual processor system. It is being pretty heavily utilized this week due to \na special project, but only after 11:30AM your time. And after this week, it \nwill have much higher availability.\n\nI take it you guys aren\u0027t able to reproduce this behavior on any of your \nsystems?",
    "Reassigning to Marius since he\u0027s already looking into it.",
    "After a few days of testing I realized that the problem happens before the\nloaders are called (even when the loaders are not called).\n\nI reassign this to Samson to continue the investigation of that part of the code.\n\nI will attach a few patches for both 3.3 and 4.0 to allow you to see the how the\nevents are flown (and how many).\n\nYou\u0027ll see on the Java console output (make sure you run the workbench using\njava.exe) of the monitoring workbench something like:\n\niD1\u003e\nlE\u003e384554\nwB\u003e142\nwB\u003c\nlE\u003c\niD1\u003c\n\nthese being the phases of fragment handling (id\u003dincoming data from TCPDataServer\n,le\u003dload event in XMLLoader,wb\u003dwrite/pass buffer to the XML parser input\nstream), the first number is the current fragment count and the second is the\ncurrent fragment length.\n\nPlease apply the patches and run the following scenarios (I tested on a P4 3.2\nwith hyper-threading enabled, 2 Gb RAM, using IBM and SUN JVM):\n\n1) profile Eclipse with both full memory and execution details (including\ninstance level information) use only include org.eclipse* and exclude * in the\nfilter\n2) import a large trace file (several Mb) with full details enabled in the\nimport wizard\n\nIn the first case the TPTP agent communication layer is involved and I got very\nconsistently OutOfMemory (with over 1Gb heap dumps and less then 3000 events\nprocessed ) and rarely:\n\njava.lang.ArrayIndexOutOfBoundsException\n\tat\norg.eclipse.hyades.internal.execution.local.common.TCPDataServer$BufferFlusher.processData(TCPDataServer.java:329)\n\tat\norg.eclipse.hyades.internal.execution.local.common.TCPDataServer$BufferFlusher.processData(TCPDataServer.java:368)\n\tat\norg.eclipse.hyades.internal.execution.local.common.TCPDataServer$BufferFlusher.run(TCPDataServer.java:431)\n\n\nIn the second the case just the loaders are called and everything works fine (I\nimported about 500K events without any problem).\n\nThe problem I think is with too many object created (and not collected yet,\nalthough nobody refers them) in a short period of time, the heap being expanded\nup to the limit of the memory so the OutOfMemory happens and hangs the\ncommunication layer (the UI is still remains responsive, but no new data is loaded).\n\nPlease let me know if you need help in reproducing this problem.",
    "Created an attachment (id\u003d19955)\no.e.h.execution-4.0-patch.txt\n",
    "Created an attachment (id\u003d19956)\no.e.h.execution.local-3.3-patch.txt\n",
    "Created an attachment (id\u003d19957)\no.e.h.models.hierarchy-3.3-patch.txt\n",
    "Created an attachment (id\u003d19958)\no.e.h.trace.ui-3.3-patch.txt\n",
    "Created an attachment (id\u003d19959)\no.e.h.trace.ui-4.0-patch.txt\n",
    "Created an attachment (id\u003d19960)\no.e.t.platform.models-4.0-patch.txt\n",
    "Marius, I\u0027m a little concerned about whether you and I are observing the same \nproblem. I am not (necessarily) running out of memory when I see the linger.\n\nI\u0027m running a monitoring workbench with the Java heap size bumped up to 784M - \n1024M. If you target eclipse and collect full execution history, you can snarf \nall that up PDQ. But a brief Java2Demo run (as in just let the UI come up and \nrun for a few seconds) doesn\u0027t come anywhere near consuming the whole heap, I \nbelieve.\n\nI can\u0027t monitor the Java heap per se with the tools I have at hand, but things \nlike the Private Bytes and Working Set size only get up around 140M in this \ncase (as opposed to 1G+ with Eclipse as the target app). However, I still see \nthe lingering 30% CPU utilization in this case.\n\nIt is pretty evident in perfmon when we\u0027ve sucked all the available memory - \nyou get a very characteristic CPU utilization pattern - and I don\u0027t see it in \nthis instance.\n\nJust another data point for you guys, to muddy the waters further. :-)",
    "Kim, if you have time please apply the patches, rerun the Java2Demo scenario and\nlet us know what is the console output when the linger happens.\n\nDo you get the lingering when you profile to file ? You can see that by checking\nif the console output stopped to grow (after you apply the patches).",
    "The problem with the patches, I\u0027m afraid, is that they\u0027re source patches. To \napply them, I have to go check the sources out and build my own hyades plugins -\n something I don\u0027t generally have lying around. Quite honestly, I do not have \ntime to do this this week. Concerned as I am about this problem, I have a big \ndeadline this Friday. If you want to shoot me a jar file or two that I can drop \ninto my workbench, I can try that out in a matter of minutes. Otherwise, I \nwon\u0027t get to this until next week. Sorry.",
    "Just to bring this up to date with reality: I got a new driver last Monday (the \n4/19 driver) as well as hard reboot thanks to a power outage. I no longer see \nthis lingering CPU utilization. That\u0027s the good news. \n\nThe bad news is that instead of being too busy, now we\u0027re not busy enough: The \nworkbench/RAServer/monitored application triumverate now goes through periods \nof total inactivity lasting from several seconds through inifinity; most often, \nthe dead spots are about 1 min. in length.\n\nThat is, there are long periods of time when absolutely nothing is happening. \nThe system is idle and so is are all the participants in the profiling process. \nThere is no CPU, disk, or TCP activity from the monitoring workbench, RAServer, \nor the PUT (Program Under Test). No one is doing nothin\u0027 to nobody. \n\nUsually, the lapses last 30-60 seconds, but sometimes, they all go away and \nnever come back - I let it run out for 30 min. at one point. I can sometimes \nkick things back into action by using \"Bring to front\" in Process Explorer on \nthe monitored application, which presumably sends some kind of interrupt - \nshock therapy. :-)\n\nFor all I know, this problem was there before, but masked by the lingering CPU \nutilization problem. I do not know if this is new behavior in 3.3.\n\nSamson did some debugging on my system last week. I\u0027m not sure what the outcome \nwas. \n\nSince I\u0027m no longer seeing the lingering utilization problem, do you guys want \nme to close this and open a new defect about the narcoleptic behavior?\n\nBTW, Marius, I did try to apply your patches last week (even though the problem \nthey\u0027re designed to diagnose went away), but a piece is missing. Some getChars \nmethod in loader utils? If you still want me to collect this data, we can clear \nup the compilation problem via email - you know where to find me. :-)",
    "Can\u0027t be contained in 3.3.  Moving to 4.0i4 per today call.",
    "Kim here is the missing method:\n\tpublic static char[] getChars(StringBuffer sb2) {\n\t\tchar[] c \u003d new char[sb2.length()];\n\t\tsb2.getChars(0,sb2.length(),c,0);\n\t\treturn c;\n\t}\t\n\nAll the patches are already in the latest 3.3 or 4.0 you just need to update the\nplugins and enable tracing on debug/PerfUtil and debug/eventsFlow in Launch\nconfiguration Tracing on org.eclipse.hyades.models.hierarchy plugin.",
    "Hi Kim. Can you close this one and open a new one for the new symptom? Thanks.",
    "Re-filed as 98031. I replicated the severity, assignee, etc. from this defect. \nHope that was the right thing to do.",
    "Opened bug 98031 to capture the different behaviour."
  ],
  "commentCreationDates": [
    "2005-04-06T03:25:07+02:00",
    "2005-04-06T18:16:59+02:00",
    "2005-04-11T21:51:26+02:00",
    "2005-04-12T01:05:22+02:00",
    "2005-04-12T01:07:06+02:00",
    "2005-04-12T21:40:56+02:00",
    "2005-04-12T22:01:08+02:00",
    "2005-04-14T17:49:14+02:00",
    "2005-04-15T22:57:36+02:00",
    "2005-04-15T22:58:20+02:00",
    "2005-04-15T22:58:40+02:00",
    "2005-04-15T22:58:52+02:00",
    "2005-04-15T22:59:06+02:00",
    "2005-04-15T22:59:22+02:00",
    "2005-04-15T22:59:36+02:00",
    "2005-04-15T23:43:13+02:00",
    "2005-04-20T21:46:31+02:00",
    "2005-04-21T03:31:50+02:00",
    "2005-05-02T19:31:16+02:00",
    "2005-05-09T23:20:13+02:00",
    "2005-05-10T23:24:19+02:00",
    "2005-06-01T17:14:19+02:00",
    "2005-06-02T01:29:06+02:00",
    "2005-06-08T18:37:48+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.ArrayIndexOutOfBoundsException",
      "elements": [
        {
          "method": "org.eclipse.hyades.internal.execution.local.common.TCPDataServer$BufferFlusher.processData",
          "source": "TCPDataServer.java:329"
        },
        {
          "method": "org.eclipse.hyades.internal.execution.local.common.TCPDataServer$BufferFlusher.processData",
          "source": "TCPDataServer.java:368"
        },
        {
          "method": "org.eclipse.hyades.internal.execution.local.common.TCPDataServer$BufferFlusher.run",
          "source": "TCPDataServer.java:431"
        }
      ],
      "number": 0,
      "commentIndex": 8,
      "bugId": "90401",
      "date": "2005-04-15T22:57:36+02:00",
      "product": "TPTP Agent Controller",
      "component": "Platform.Collection",
      "severity": "major"
    }
  ],
  "groupId": "90401",
  "bugId": "90401",
  "date": "2005-04-06T03:25:07+02:00",
  "product": "TPTP Agent Controller",
  "component": "Platform.Collection",
  "severity": "major"
}