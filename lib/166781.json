{
  "comments": [
    "Build ID: M20060921-0945\n\nSteps To Reproduce:\n\"Internal error\" when trying to convert SDB to IBM rules using IBM JDK 1.42\n\nHow its been used...\nFastXPathAPI api \u003d new FastXPathAPI(null);\napi.getFastXPathEngine().getExpressionJavaSource(XPATHExpression, cbe, true, null,null,new CompilerPostProcessor(null, null)\n\nCalling FastXPathAPI api shown in the stack trace causing this error. \n\nExtention point can\u0027t be use to get the FastXPathAPI object since it is protected.\n\nError does not occur when using IBM JDK 1.5\n\nStack trace:\njava.lang.LinkageError: JVMCL048:redefine of class TestXPath (\u0026name\u003d2C662598).\nold_cb\u003d1397F68, new_cb\u003d11448E8, (\u0026old_name\u003d2C662598) old_name\u003dTestXPath\nat java.lang.ClassLoader.defineClass0(Native Method)\nat java.lang.ClassLoader.defineClass(ClassLoader.java(Compiled Code))\nat java.lang.ClassLoader.defineClass(ClassLoader.java:710)\nat\norg.eclipse.tptp.platform.provisional.fastxpath.compiler.EclipseCompiler$MyClassLoader.defineClass(EclipseCompiler.java:331)\nat\norg.eclipse.tptp.platform.provisional.fastxpath.compiler.EclipseCompiler$1.acceptResult(EclipseCompiler.java:119)\nat org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:417)\nat\norg.eclipse.tptp.platform.provisional.fastxpath.compiler.EclipseCompiler.generateClass(EclipseCompiler.java:131)\nat\norg.eclipse.tptp.platform.provisional.jre14.fastxpath.compiler.CompilerHelper.buildCompiledExpression(CompilerHelper.java:150)\nat\norg.eclipse.tptp.platform.provisional.jre14.fastxpath.FastXPathEngine.getExpressionJavaSource(FastXPathEngine.java:202)\nat\n\n\nMore information:",
    "Targetting to 4.4",
    "Praful, the problem is in your code, you should do the following:\nin the transformer class add a field\n\nprivate static int i \u003d 0;\n\nand us it to generate different class names like this\n\ncp.setClassName(\"TestXPath_\" + i++);\n\nand you should be fine. No code changes on the TPTP side are required.",
    "Same code was working in TPTP 4.2.0\nSince TPTP has added performance fix for XPATH rules, this is been broken. I will make the change as you suggested.\nI am just wondering here that by doing what you are suggesting, is each xpath rule will create different class for it? Is this change will have any performance hit?",
    "Praful from the code that I\u0027ve seen you are creating a class anyway, my code snippet is only setting a different name to each new class. In 4.2 it worked because we were creating a class loader for each XPathExpression, we do reuse the class loader in 4.2.1.",
    "Increasing priority as a major should be fixed in 4.4.",
    "If bug 162562 will be fixed I will fix this also, if the compile code is removed I  will return this defect as WONTFIX.",
    "If this is fixed it will be fixed in the Fast XPATH implementation in the Platform.Models component.",
    "Fix in CVS."
  ],
  "commentCreationDates": [
    "2006-12-05T14:16:59+01:00",
    "2006-12-05T14:44:40+01:00",
    "2006-12-07T22:34:35+01:00",
    "2006-12-12T15:18:29+01:00",
    "2006-12-12T19:09:28+01:00",
    "2007-01-12T07:59:53+01:00",
    "2007-01-18T15:18:27+01:00",
    "2007-01-22T20:51:15+01:00",
    "2007-04-27T18:01:19+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.LinkageError",
      "message": "JVMCL048:redefine of class TestXPath (\u0026name\u003d2C662598). old_cb\u003d1397F68, new_cb\u003d11448E8, (\u0026old_name\u003d2C662598) old_name\u003dTestXPath",
      "elements": [
        {
          "method": "java.lang.ClassLoader.defineClass0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java(Compiled Code)"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:710"
        },
        {
          "method": "org.eclipse.tptp.platform.provisional.fastxpath.compiler.EclipseCompiler$MyClassLoader.defineClass",
          "source": "EclipseCompiler.java:331"
        },
        {
          "method": "org.eclipse.tptp.platform.provisional.fastxpath.compiler.EclipseCompiler$1.acceptResult",
          "source": "EclipseCompiler.java:119"
        },
        {
          "method": "org.eclipse.jdt.internal.compiler.Compiler.compile",
          "source": "Compiler.java:417"
        },
        {
          "method": "org.eclipse.tptp.platform.provisional.fastxpath.compiler.EclipseCompiler.generateClass",
          "source": "EclipseCompiler.java:131"
        },
        {
          "method": "org.eclipse.tptp.platform.provisional.jre14.fastxpath.compiler.CompilerHelper.buildCompiledExpression",
          "source": "CompilerHelper.java:150"
        },
        {
          "method": "org.eclipse.tptp.platform.provisional.jre14.fastxpath.FastXPathEngine.getExpressionJavaSource",
          "source": "FastXPathEngine.java:202"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "166781",
      "date": "2006-12-05T14:16:59+01:00",
      "product": "TPTP Profiling",
      "component": "Platform.Model",
      "severity": "major"
    }
  ],
  "groupId": "166781",
  "bugId": "166781",
  "date": "2006-12-05T14:16:59+01:00",
  "product": "TPTP Profiling",
  "component": "Platform.Model",
  "severity": "major"
}