{
  "comments": [
    "When creating a new plug-in project with the manifest.mf option, we create the \nplugin.xml as usual, and then we pass it to the plugin converter to create a \nmanifest.mf file.\n\nThis conversion is lossy when it comes to exported libraries.\nSo if the plugin.xml contained:\n\u003clibrary name\u003d\"foo.jar\"\u003e\n   \u003cexport name\u003d\"*\"/\u003e\n\u003c/library\u003e\n\nThe resulting header would be:\nBundle-Classpath:foo.jar\nwithout any Provide-Package header.\n\nThis is probably due to the fact that foo.jar does not exist at the time of \nthe project creation, and you could not figure out what packages are in it.\n\nThis is a big problem for us now, since the new editor will also give the user \nan opportunity to create a manifest.mf file for an existing plugin.  We don\u0027t \nwant to lose that \"export\" information, as the project contains code in source \nfolders.\n\nWe would be more than happy to pass the names of the packages to be exported \nto the converter, as long as the file generated is correct.",
    "Suggest that in this scenario you call the converter and get back the \ndictionary and then add the headers you want.  Ifyou know the list of packages, \nyou should just be able to \n   Dictionary headers \u003d conveter.convertManifest(...);\n   headers.put(\"Provide-Packages\", \u003cyour CSV of packages\u003e);\n   converter.writeManifest(file, headers, flag);\n\n",
    "Good enough for me.",
    "Wassim is happy :) Closing.",
    "Reopening to ensure this scenario works at runtime.  PDE will make sure \nconversion via the link on the runtime page of the manifest editor works as \nper comment #1.\n\nJust received word from the WSADIE team that the following scenario fails at \nruntime.  This happened in M8.  If it is already fixed, please close.\n\na plugin.xml whose library tag contains the following exports, results in a \nclassloading error from a class whose package is clearly exported.\n\n\u003cexport name\u003d\"com.ibm.adapter.framework.api.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.api.properties.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.api.query.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.api.registry.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.common.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.common.properties.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.spi.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.spi.properties.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.spi.query.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.spi.registry.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.framework.spi.util.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.j2c.api.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.j2c.spi.writer.*\" /\u003e\n\u003cexport name\u003d\"com.ibm.adapter.plugin.*\" /\u003e\n\n\n\n.:!STACK 0\njava.lang.NoClassDefFoundError: \ncom.ibm.adapter.framework.spi.BaseWorkspaceResourceWriter\n                at java.lang.Throwable.\u003cinit\u003e(Throwable.java)\n                at java.lang.Throwable.\u003cinit\u003e(Throwable.java)\n                at java.lang.NoClassDefFoundError.\u003cinit\u003e\n(NoClassDefFoundError.java:52)\n                at java.lang.ClassLoader.defineClassImpl(Native Method)\n                at java.lang.ClassLoader.defineClass(ClassLoader.java)\n                at \norg.eclipse.osgi.framework.internal.defaultadaptor.DefaultClassLoader.defineCla\nss(DefaultClassLoader.java)\n                at \norg.eclipse.core.runtime.adaptor.EclipseClassLoader.defineClass\n(EclipseClassLoader.java)\n                at \norg.eclipse.osgi.framework.internal.defaultadaptor.DefaultClassLoader.findClass\nImpl(DefaultClassLoader.java)\n                at \norg.eclipse.osgi.framework.internal.defaultadaptor.DefaultClassLoader.findClass\n(DefaultClassLoader.java)\n                at \norg.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.findLocalClass\n(AbstractClassLoader.java)\n                at \norg.eclipse.core.runtime.adaptor.EclipseClassLoader.findLocalClass\n(EclipseClassLoader.java)\n                at \norg.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass\n(BundleLoader.java)\n                at \norg.eclipse.osgi.framework.internal.core.BundleLoader.requireClass\n(BundleLoader.java)\n                at \norg.eclipse.osgi.framework.internal.core.BundleLoader.findRequiredClass\n(BundleLoader.java)\n                at \norg.eclipse.osgi.framework.internal.core.BundleLoader.findClass\n(BundleLoader.java)\n                at \norg.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.loadClass\n(AbstractClassLoader.java)\n\n",
    "do you want to move this to PDE?",
    "I will ensure that the runtime scenarios work properly, and reassign to PDE if \nnecessary.",
    "Done."
  ],
  "commentCreationDates": [
    "2004-05-10T19:26:04+02:00",
    "2004-05-17T23:34:26+02:00",
    "2004-05-17T23:36:58+02:00",
    "2004-05-21T04:11:25+02:00",
    "2004-06-07T20:54:21+02:00",
    "2004-06-07T21:06:33+02:00",
    "2004-06-07T21:23:02+02:00",
    "2004-10-27T07:45:47+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.NoClassDefFoundError",
      "message": "com.ibm.adapter.framework.spi.BaseWorkspaceResourceWriter",
      "elements": [
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java"
        },
        {
          "method": "java.lang.Throwable.\u003cinit\u003e",
          "source": "Throwable.java"
        },
        {
          "method": "java.lang.NoClassDefFoundError.\u003cinit\u003e",
          "source": "NoClassDefFoundError.java:52"
        },
        {
          "method": "java.lang.ClassLoader.defineClassImpl",
          "source": "Native Method"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.defaultadaptor.DefaultClassLoader.defineClass",
          "source": "DefaultClassLoader.java"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseClassLoader.defineClass",
          "source": "EclipseClassLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.defaultadaptor.DefaultClassLoader.findClassImpl",
          "source": "DefaultClassLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.defaultadaptor.DefaultClassLoader.findClass",
          "source": "DefaultClassLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.findLocalClass",
          "source": "AbstractClassLoader.java"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseClassLoader.findLocalClass",
          "source": "EclipseClassLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass",
          "source": "BundleLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.requireClass",
          "source": "BundleLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findRequiredClass",
          "source": "BundleLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.internal.core.BundleLoader.findClass",
          "source": "BundleLoader.java"
        },
        {
          "method": "org.eclipse.osgi.framework.adaptor.core.AbstractClassLoader.loadClass",
          "source": "AbstractClassLoader.java"
        }
      ],
      "number": 0,
      "commentIndex": 4,
      "bugId": "61627",
      "date": "2004-06-07T20:54:21+02:00",
      "product": "PDE",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "61627",
  "bugId": "61627",
  "date": "2004-05-10T19:26:04+02:00",
  "product": "PDE",
  "component": "UI",
  "severity": "normal"
}