{
  "comments": [
    "The Eclipse compiler generates classes that throw a java.lang.VerifyError when \nthey are loaded. If Sun\u0027s javac or IBM\u0027s jikes is used to compile the same \nclass, no error occurs.\n\nThis happens when an inner class accesses a protected field belonging to the \nbase class of the outer class if the base class and the outer class are in \ndifferent packages. (Hope that makes sense!)\n\njava.lang.VerifyError: (class: oranges/Derived$Inner, method: bug signature: ()\nV) Incompatible type for getting or setting field\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:140)\n\tat Main.main(Main.java:4)\nException in thread \"main\"",
    "Created an attachment (id\u003d4277)\nBug demonstration classes\n\nThe VerifyError.jar file contains a simple Eclipse project to demonstrate the\nbug. I contains classes that I\u0027ve compiled using 2.1 rc3a - you may run it by\ntyping \"java -jar VerifyError.jar\". Tested with java 1.4.1_01 and 1.4.1_02",
    "The bug is in the innerclass emulation. \n\nIn reference from Derived$Inner.bug() to \u0027c.foo\u0027, we generate code as if \u0027c\u0027 \nwas defined in enclosing type Derived (where it is defined at depth 0).\n\nMethod void bug()\n   0 getstatic #29 \u003cField java.io.PrintStream out\u003e\n   3 aload_0\n   4 getfield #16 \u003cField oranges.Derived this$0\u003e // SHOULD NOT BE HERE\n   7 getfield #18 \u003cField oranges.Derived c\u003e\n  10 invokestatic #35 \u003cMethod java.lang.String access$0(oranges.Derived)\u003e\n  13 invokevirtual #41 \u003cMethod void println(java.lang.String)\u003e\n  16 return\n}",
    "As a workaround, you may simply write \u0027this.c.foo\u0027 instead of \u0027c.foo\u0027.",
    "Problem isolated. #setDepth implementation weren\u0027t doing anything when depth is \nset to zero (can occur for QualifiedNameReferences when binding subsequent \nfields).\n\nFix is quite simple.",
    "Created an attachment (id\u003d4279)\nsetDepth patch\n",
    "Tushar - isn\u0027t the workaround a viable solution for 2.1 ?",
    "Yes, the workaround is good :-) Thanks for the quick turnaround Philippe :-)\n\n\n",
    "+1",
    "+1",
    "+1",
    "+1",
    "Fix released for integration",
    "Verified."
  ],
  "commentCreationDates": [
    "2003-03-21T12:46:34+01:00",
    "2003-03-21T12:54:36+01:00",
    "2003-03-21T13:33:21+01:00",
    "2003-03-21T13:34:21+01:00",
    "2003-03-21T13:50:02+01:00",
    "2003-03-21T13:52:03+01:00",
    "2003-03-21T14:25:52+01:00",
    "2003-03-21T14:44:58+01:00",
    "2003-03-21T15:37:30+01:00",
    "2003-03-24T17:31:38+01:00",
    "2003-03-24T18:03:07+01:00",
    "2003-03-24T18:30:12+01:00",
    "2003-03-25T17:00:32+01:00",
    "2003-03-28T11:45:28+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.VerifyError",
      "message": "(class: oranges/Derived$Inner, method: bug signature: () V) Incompatible type for getting or setting field",
      "elements": [
        {
          "method": "java.lang.Class.forName0",
          "source": "Native Method"
        },
        {
          "method": "java.lang.Class.forName",
          "source": "Class.java:140"
        },
        {
          "method": "Main.main",
          "source": "Main.java:4"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "35456",
      "date": "2003-03-21T12:46:34+01:00",
      "product": "JDT",
      "component": "Core",
      "severity": "critical"
    }
  ],
  "groupId": "35456",
  "bugId": "35456",
  "date": "2003-03-21T12:46:34+01:00",
  "product": "JDT",
  "component": "Core",
  "severity": "critical"
}