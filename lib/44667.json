{
  "comments": [
    "Build: 3.0 M4\n\nIf an editor is opened, and then the file is immediatley deleted, the deletion\nfails because the background quick diff job is still running.  This currently\ncauses UI test suites to fail because the tests open editors, and the tearDown\ndeletes the file immediately afterwards.\n\nThe failing test is:\n\norg.eclipse.ui.tests.api.IDeprecatedWorkbenchPageTest#testOpenEditor\n\nThe failure is made more likely by hacking FileUtil.createFile to create a\nlarger file (by default it creates an empty file).\n\nWhen I manually hack ExtendedTextEditor as follows:\n\n\tprotected boolean isPrefQuickDiffAlwaysOn() {\n\t\treturn false;\n\t}\n\nThen the tests never fail, because quick diff does not run.",
    "Created an attachment (id\u003d6402)\nPatch file on org.eclipse.ui.tests to reproduce failure\n",
    "investigating",
    "Applied attachment 6402 and observed the said test failures. Deleting a project\nfails with a ResourceException. A typical stack trace follows below.\n\nI have not tested whether these go away when disabling quick diff but easily\nbelieve it. I do not think however that it is safe to expect that a checked\nexception will not be thrown from a method that declares it in such a general\nway as IResource::delete.\n\nThe problem is really of a more general nature and is a product of the\nbackground activities introduced recently, quick diff being one of them.\nApparently, the JDT refactoring tests had similar problems with background\nbuilding, so the Job infrastructure now provides a facility to synchronize with\npossible background jobs. Following an excerpt from dirk and john arthorne\u0027s\nconversation:\n\n\u003cquote\u003e\nFor your tests, there is another possibility.  There is a method\nIJobManager.join(Object family), that will block until all background jobs in a\ngiven family complete (this is what TestingSupport.waitForBuild uses).  If you\nspecify a family of \"null\", it will block until *all* background jobs complete.\n I think this satisfies what you were asking for:\n\n1.) we create a project with some packages\n2.) we create some CUs\n3.) we perform some operations on the CUs\n\nnew step: Platform.getJobManager().join(null, null);\n\n4.) we do some test result validation (some of the validation\n     relies on a build workspace)\n\u003c/quote\u003e\n\nNote that you\u0027ll have to wait a long time under some circumstances.\n\nAs a temporary workaround, you could change the quickdiff default preference\nbefore running your test.\n\nIf you find that quick diff should not be enabled per default for usability\nreasons see bug 41344.\n\norg.eclipse.core.internal.resources.ResourceException: Problems encountered\nwhile deleting resources.\n\tat\norg.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:169)\n\tat\norg.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:699)\n\tat org.eclipse.core.internal.resources.Resource.delete(Resource.java:649)\n\tat org.eclipse.core.internal.resources.Project.delete(Project.java:274)\n\tat org.eclipse.ui.tests.util.FileUtil.deleteProject(FileUtil.java:59)\n\tat org.eclipse.ui.tests.api.IWorkbenchPageTest.tearDown(IWorkbenchPageTest.java:59)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:395)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:279)\n\tat\norg.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:30)\n\tat\norg.eclipse.pde.internal.junit.runtime.UITestApplication.runEventLoop(UITestApplication.java:35)\n\tat org.eclipse.ui.internal.Workbench.run(Workbench.java:2330)\n\tat\norg.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)\n\tat org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:299)\n\tat org.eclipse.core.launcher.Main.run(Main.java:765)\n\tat org.eclipse.core.launcher.Main.main(Main.java:599)\n",
    "Closing for now, as I don\u0027t think this is a bug.\n\nJohn / Tod, did you observe any other exceptions but the ones declared and\nthrown by IProject::delete? If yes, please reopen.",
    "I entered this so we would have a record of why the Platform UI tests were\nfailing.  Since the platform UI tests will continue to fail until we do\nsomething, I don\u0027t think closing it is the right answer.  Having said that, the\nsolution might not lie in platform text.  In comparable situations, we have\naddressed the problem by modifying the test suites.  I\u0027m going to reopen until\nwe come up with a solution.  Since nobody likes to own these bugs, I\u0027ll move it\ninto my bucket for now.",
    "I should add that the general solution quoted above (IJobManager.join(null)) is\ninvalid.  Since it will cause the suites to block until jobs like incremental\nsnapshot finish, it will cause test suites to take forever.\n\nIn the auto-build situation, I added an API field that exposed the \"family name\"\nof the auto-build job, allowing clients to join only that job.  If the quick\ndiff job family name was also exposed, the platform UI test suites would be able\nto join it. I acknowledge that this doesn\u0027t solve the problem in general, since\narbitrary unrelated components can launch jobs that a given componenent\u0027s test\nsuites may not know about.\n",
    "I also think it is wrong to typify this as not being a bug as this is \nsomething that users could easily do while working.\n\nHere is the possible scenario\n1) Editor is open\n2) Select a file\n3) Delete it \n\nYou can then get a core exception on a file delete as it is trying to close an \neditor. The Quick diff job should either complete or cancel before the delete \nis run.",
    "Ok, I agree with the last couple of comments. Closing was probably a friday late\nevening reaction...\n\nTod, I see that quick diff should not interfere with the deletion but rather\nquietly fail / return. I suspect the deletion fails while I access an underlying\nIFile, which is then blocked.\n\n- Can the file be obtained in a non-blocking way? (Keeping reading would just\nthrow an IOException, which is fine).\n- If no: I guess qd has to register as a resource listener and cancel itself if\nits being deleted.\n- Aside: don\u0027t we have the same problem say if, say, a user creates a file,\nsaves it (compiler kicks in and might lock the resource) and tries to delete it?",
    "What we would rather have is a warning about the lock on the file - delaying \nthe deletion waiting for QuickDiff to finish would be fine - especially as it \nhappens infrequently and very quickly when it does.\n\nJohn is there a way that the QuickDiff can obtain a file lock and block \ndeletions renames etc. while it is working?",
    "Of course! I don\u0027t know why I didn\u0027t think of this before.  The background quick\ndiff job can set a scheduling rule.  The job will not run until you have\n\"exclusive\" access to the rule, and while your job is running, other threads\ntrying to obtain that rule will block.  IResource extends ISchedulingRule, so\nyou can use the IFile instance as the job scheduling rule.",
    "Good. This will of course be an option, even better were if quickdiff had some\nkind of Phantom reference on the file and wouldn\u0027t have to block anyone... but\nthis can wait till Monday.",
    "fixed \u003e 20031013\n\nadded a beginRule / endRule pair around the file access as per John\u0027s\nsuggestion. The tests pass without a problem now even with above \"large file\" patch.\n\nhappy testin\u0027 ...",
    "Verified with the contents of HEAD. I have re-enstated the error checking in \nHEAD."
  ],
  "commentCreationDates": [
    "2003-10-10T18:13:58+02:00",
    "2003-10-10T18:15:59+02:00",
    "2003-10-10T18:38:36+02:00",
    "2003-10-10T19:36:39+02:00",
    "2003-10-10T19:39:46+02:00",
    "2003-10-10T19:46:28+02:00",
    "2003-10-10T19:52:02+02:00",
    "2003-10-10T19:59:06+02:00",
    "2003-10-10T21:20:25+02:00",
    "2003-10-10T21:42:41+02:00",
    "2003-10-10T21:57:43+02:00",
    "2003-10-10T22:29:44+02:00",
    "2003-10-13T11:14:44+02:00",
    "2003-10-14T15:44:09+02:00"
  ],
  "traces": [
    {
      "exceptionType": "org.eclipse.core.internal.resources.ResourceException",
      "message": "Problems encountered while deleting resources.",
      "elements": [
        {
          "method": "org.eclipse.core.internal.localstore.FileSystemResourceManager.delete",
          "source": "FileSystemResourceManager.java:169"
        },
        {
          "method": "org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject",
          "source": "ResourceTree.java:699"
        },
        {
          "method": "org.eclipse.core.internal.resources.Resource.delete",
          "source": "Resource.java:649"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.delete",
          "source": "Project.java:274"
        },
        {
          "method": "org.eclipse.ui.tests.util.FileUtil.deleteProject",
          "source": "FileUtil.java:59"
        },
        {
          "method": "org.eclipse.ui.tests.api.IWorkbenchPageTest.tearDown",
          "source": "IWorkbenchPageTest.java:59"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:130"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "junit.framework.TestSuite.runTest",
          "source": "TestSuite.java:208"
        },
        {
          "method": "junit.framework.TestSuite.run",
          "source": "TestSuite.java:203"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:395"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:279"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:30"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.UITestApplication.runEventLoop",
          "source": "UITestApplication.java:35"
        },
        {
          "method": "org.eclipse.ui.internal.Workbench.run",
          "source": "Workbench.java:2330"
        },
        {
          "method": "org.eclipse.core.internal.boot.InternalBootLoader.run",
          "source": "InternalBootLoader.java:858"
        },
        {
          "method": "org.eclipse.core.boot.BootLoader.run",
          "source": "BootLoader.java:461"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:39"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:25"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:324"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:299"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:765"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:599"
        }
      ],
      "number": 0,
      "commentIndex": 3,
      "bugId": "44667",
      "date": "2003-10-10T19:36:39+02:00",
      "product": "Platform",
      "component": "Text",
      "severity": "major"
    }
  ],
  "groupId": "44667",
  "bugId": "44667",
  "date": "2003-10-10T18:13:58+02:00",
  "product": "Platform",
  "component": "Text",
  "severity": "major"
}