{
  "comments": [
    "When trying to do CTRL+Space to content assist, log gets an\nIndexOutOfBoundsException in FunctionPrototypeSummary. I did a little debugging\non it, though I found the following:\nOECU \u003d org.eclipse.cdt.ui\nIn the OECU.CCompletionProcessor Class in method\nprivate void addProjectCompletions(IProject project, IRegion region, String\nfrag, ArrayList completions) \n----\nif (kind \u003d\u003d TagFlags.T_FUNCTION || kind \u003d\u003d TagFlags.T_PROTOTYPE) {\n    fname \u003d fname + \"()\";\n}\n// ----\u003e THIS ONE SEEMS OK\nif(tags[i].getPattern() !\u003d null) {\n    try {\n        fproto \u003d new FunctionPrototypeSummary(tags[i].getPattern());\n    } catch(Exception ex) {\n        fproto \u003d null;\n    }\n}\n// ----\u003e HERE THE EXCEPTION WILL BE THROWN IN THE CONSTRUCTION\nif(fproto \u003d\u003d null) {\n    fproto \u003d new FunctionPrototypeSummary(fname);\n}\n\n//System.out.println(\"tagmatch \" + fname + \" proto \" + fproto + \" type\" +\ntags[i].getKind());\nif (kind !\u003d TagFlags.T_MEMBER) {\n    CCompletionProposal proposal;\n    proposal \u003d new CCompletionProposal(fname, \n                                       region.getOffset(), \n                                       region.getLength(),\n                                       getTagImage(kind), \n                                       fproto.getPrototypeString(true),\n                                       3);\n    completions.add(proposal);\n    //No summary information available yet\n    String fargs \u003d fproto.getArguments();\n    if(fargs !\u003d null \u0026\u0026 fargs.length() \u003e 0) {\n        proposal.setContextInformation(new ContextInformation(fname, fargs));\n    }\n}\n-----\n\nWithin the FunctionPrototypeSummary Constructor, there is a search of the first\nindex of an \u0027(\u0027 and \u0027)\u0027 which returns -1. This isn\u0027t catched by any method. \n\nThough, I think, you either make FunctionPrototypeSummary Constructor safe by\nchecking for -1, or you try to catch it in CCompletionProcessor. \n---- My changes \nprivate void addProjectCompletions(IProject project, IRegion region, String\nfrag, ArrayList completions) {\n    IndexModel model \u003d IndexModel.getDefault();\n    // Added for later use (kesselhaus@gmx.net)\n    String protostring \u003d \"\";\n    ITagEntry[] tags \u003d model.query(project, frag + \"*\", false, false);\n    if (tags !\u003d null \u0026\u0026 tags.length \u003e 0) {\n        for (int i \u003d 0; i \u003c tags.length; i++) {\n            String fname \u003d tags[i].getTagName();\n            FunctionPrototypeSummary fproto \u003d null;\n            int kind \u003d tags[i].getKind();\n            if (kind \u003d\u003d TagFlags.T_FUNCTION || kind \u003d\u003d TagFlags.T_PROTOTYPE) {\n                fname \u003d fname + \"()\";\n            }\n            if(tags[i].getPattern() !\u003d null) {\n                try {\n                    fproto \u003d new FunctionPrototypeSummary(tags[i].getPattern());\n                    protostring \u003d fproto.getPrototypeString(true);\n                } catch(Exception ex) {\n                    fproto \u003d null;\n                }\n            }\n            /** Changed for Exception catching from FPrototypeSummary\n             * when fname is no function (kesselhaus@gmx.net)\n             */\n            if(fproto \u003d\u003d null) {\n                try { \n                    fproto \u003d new FunctionPrototypeSummary(fname);\n                    protostring \u003d fproto.getPrototypeString(true);\n                } catch( Exception e) {\n                    // fname was not a function! (kesselhaus@gmx.net)\n                    protostring \u003d fname;\n                }\n            }\n            if (kind !\u003d TagFlags.T_MEMBER) {\n                CCompletionProposal proposal \u003d \n                        new CCompletionProposal(\n                                fname, \n                                region.getOffset(), \n                                region.getLength(),\n                                getTagImage(kind),\n                                // changed cause of exception catch\n(kesselhaus@gmx.net)  \n                                // fproto.getPrototypeString(true),\n                                protostring,\n                                3);\n                completions.add(proposal);\n                //No summary information available yet\n                /** changed (kesselhaus@gmx.net)\n                 *  if fproto is null because it was not a function and throwed\n                 *  an exception above\n                 */\n                String fargs \u003d (fproto !\u003d null)?fproto.getArguments():\"\";\n                if(fargs !\u003d null \u0026\u0026 fargs.length() \u003e 0) {\n                    proposal.setContextInformation(new ContextInformation(fname,\nfargs));\n                }\n            }\n        }\n    }\n}\n----\nThis will get rid of the Exception thrown, though, I don\u0027t know what your\nintentions are on this.",
    "Thomas you\u0027ve look at this can you look.\nBogdan, this also affects the information that the indexer is\nproviding.\n\nLet me know if any of you can take a look, to the patch sent by kesselhaus\n\nThanks",
    "Made some time to look at your bug, agree with the analysis but not on the remedy.\n\nFunctionPrototypeSummary() is buggy and should be fix.\n\nit could be advertising that it throws an exception or as you rightly\nnotice by handling the -1 return from lastIndexOf()\n\nI\u0027m not a fan of code like this:\ntry {\n..\n} catch (Exception e) {\n}\n\nit will hide real errors.\n\nDo you have a test case ?",
    "Created an attachment (id\u003d5555)\nCleanups to constructor of FunctionPrototypeSummary and in CCompletionProcessor\n",
    "I\u0027ve provided an improved (IMHO) patch and submitted it to cdt-patch.\n\nThomas",
    "Sorry about the late answer. \n \nWell, since I do not know the intentions of the CDT team about this code and how your guidelines \nare on such issues, I just did the Exception-catch. This could have been done also by catching the \nArrayIndexOutOfBoundsException to be more precise, and not just catching all exceptions. \n \nI also had some idea on the FunctionPrototypeSummary, but I think as you wrote it, it could be ok \ntoo. I also had an thought about the CCom?pletionProcessor doing an  \nswitch(tags[i].getKind()) { \ncase CLASS: ... \ncase MEMBER: ... \ncase FUNCTION: ... \n... protostring \u003d new FunctionPrototypeSummary(tags[i].getPattern()).getProtostring(); \n} \n \nor such alike. \n \nHowever, fixing the FunctionPrototypeSummary itself is the better solution. \n \nSomething I had in mind was, that there is some kind of information maybe left. \nIf the Model or whatever keeps track where you stay in the Editor, you could probably narrow the \npattern search to something more specific, like just search for classes, or just functions. \n \nWhen I stay at: \nClassA myvar; myvar.  \nthen there should be infos just about functions or members. \nIf I write: \nCl\u003cCTRL+Space\u003e \nthere should be infos about variables, members, etc. \nThough, the list could be kept clean. Right now, you get all it finds on the pattern, making the list \nlarge and hard to browse through. \n \nJust my 2 cent.  \n \n ",
    "@Thomas Fletcher\nI just looked into the cdt-patch-archive, but couldn\u0027t find it.\nCould you point me to the patch, to take a look and test it?",
    "@Thomas Fletcher:\nToday, I found your patch and applied it. There is still one more exception\nthrow. Sorry to tell you that. \n\nFunctionPrototypeSummary.java:41 ff.\n-----\nint nameend \u003d leftbracket - 1;\nwhile(proto.charAt(nameend) \u003d\u003d \u0027 \u0027) {\n    nameend--;\n}\n-----\n\n2 Test cases are: I have some cpp-source. \n\n\tretval \u003d new CCmvcCorbaSessionHandler;\n\tretval.\u003chit CTRL+Space here\u003e\n\treturn retval; \nor:\n\tretval \u003d new CCmvcCorbaSessionHandler;\n\tCCm\u003chit CTRL+Space here\u003e\n\treturn retval; \n\nThis will throw again:\n!SESSION Jul 28, 2003 01:11:34.328 ---------------------------------------------\njava.version\u003d1.4.2\njava.vendor\u003dSun Microsystems Inc.\nBootLoader constants: OS\u003dwin32, ARCH\u003dx86, WS\u003dwin32, NL\u003dde_DE\nCommand-line arguments: -os win32 -ws win32 -arch x86 -install\nfile:D:/Programme/eclipse/\n!ENTRY org.eclipse.cdt.ui 4 4 Jul 28, 2003 01:11:34.328\n!MESSAGE Error\n!STACK 0\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.charAt(String.java:444)\n\tat\norg.eclipse.cdt.ui.FunctionPrototypeSummary.\u003cinit\u003e(FunctionPrototypeSummary.java:42)\n\tat\norg.eclipse.cdt.internal.ui.text.CCompletionProcessor.addProjectCompletions(CCompletionProcessor.java:438)\n\tat\norg.eclipse.cdt.internal.ui.text.CCompletionProcessor.addProposalsFromModel(CCompletionProcessor.java:399)\n...",
    "More Info: Just debugged with the applied patch from Thomas.\nSuppose I make an Standard Make C++ Project. Create with the Class Wizard or by\nhand the following:\n--- TestClass.h START ---\n#ifndef TESTCLASS_H\n#define TESTCLASS_H\n\nclass OneMoreClass {\npublic:\n    OneMoreClass();\n    ~OneMoreClass();\n    void method1();\n    int method2();\n};\n\nclass TestClass {\npublic:\n    TestClass();\n    ~TestClass();\n};\n#endif // TESTCLASS_H\n--- TestClass.h END ---\n\n--- TestClass.cpp START ---\n#include \"TestClass.h\"\nTestClass::TestClass() {\n    On\u003chit-CTRL+SPACE\u003e\n}\nTestClass::~TestClass() {\n}\n--- TestClass.cpp END ---\nThis will generate an ITagEntry[] with 6 entries. The entry at index 1 is of\ntype TagFlags.T_PROTOTYPE, whatever this type means. The tags[i].getPattern() in\nCCompletionProcessor.addProjectCompletions(...) at line 436:\n\nif (kind \u003d\u003d TagFlags.T_FUNCTION || kind \u003d\u003d TagFlags.T_PROTOTYPE) {\n    fname \u003d fname + \"()\";\n    String pattern \u003d tags[i].getPattern(); \u003c--- THIS CAN RETURN \"\"\n    if(pattern !\u003d null) { \u003c-- and will not be checked here\n        fproto \u003d new FunctionPrototypeSummary(pattern); \u003c-- and will throw\nexceptions here\n    }\n    if(fproto \u003d\u003d null) {\n        fproto \u003d new FunctionPrototypeSummary(fname);\n    }\n}\n\nwill return \"\", not just null! Though, the FunctionPrototypeSummary CTOR will\nnot find \u0027(\u0027 or \u0027)\u0027, and adds \"()\" to the empty proto-string parameter.\nBut then you try to look for nameend and namestart, which in fact results in:\n\n    nameend \u003d 0 - 1;\n    while( proto.charAt(-1) \u003d\u003d \u0027 \u0027) \u003c--- ERROR StringIndexOutOfBoundsException!\n\nSorry to tell you, that your patch doesn\u0027t fix all the bugs.\n",
    "Created an attachment (id\u003d5560)\nMinor Fixes, probably the same as Thomas one\n\nThis is just prework, the main changes are in the other patch",
    "Created an attachment (id\u003d5561)\nMain/Enhanced Patch for FunctionPrototypeSummary\n\nThis does work for me, so take a look on it please.\nThis one separates the proto String into\n\nfname\t   - the methods name\nfcontext   - like Class Name where the method is in\nfargumnets - arguments of the method\nfreturn    - return type _and_ eventually any modifiers like virtual, extern, \n\t     static etc., this is a little more tricky to separate and maybe\n\t     to much time consuming for a proposal\ngetContext() - return the Context of the function\n",
    "Created an attachment (id\u003d5562)\nA Test Class for the FunctionPrototypeSummary Class Functionality\n\nThis one is actually just a copy of FunctionPrototypeSummary with an main\nmethod and an String array containing some tests for different proto-strings.\nThese Strings could be provided by the TagsEntry from CCompletionProcessor",
    "@kesselhaus\n\nThis is nice work.  Part of the problem is that the interface for the\nCTags/Indexer ITagEntry piece is not well defined in terms of what it \ncan return (for example \"\" really isn\u0027t all that useful as a return and\nreally that should be the fix in this case, not to return an empty string)\nas valid values.\n\nThis work (as you may have seen on the mailing list) is going to be totally\nreplaced by the new indexer so it would be more worthwhile to better/properly\nset up the interfaces to have no ambiguity about what is going to be returned\nrather than hack and slash around it.\n\nThomas",
    "Well, Thomas, I\u0027ve seen the problem in the ITagEntry stuff already. I also came to the same \nconclusion, but as you know, the Indexer stuff still is in flux, and I was in need of at least some \ncode completion. ;) And it works, even though, you get most entries twice (once from pattern, \nonce from fname, the one will write Context::method() the other will just write the Context. \nWell but I can live for a little while with it, and I think about digging into the new Indexer Part a little \nmore in my spare time. \n \nI\u0027m not pretty sure, where the info gets into the tags file. I just have something what I believe it \ndoes. Though the new Indexer will completely replace the old Indexer? In what kind of storage is \nthat information then held, same kind of index file, the big rising DOM? What kind of information is \nstored there, so I\u0027ll maybe get more \u0026 better answers on search patterns. I mean I found also \nsome SearchJob etc. classes but nowhere something yet returning infos about what had been \nfound. You can fill the searchjob, but how to get infos back? \n \n \nI know, it doesn\u0027t really belong here, but I had some really wierd thoughts about the indexing and \nthe texthover-help which shall provide infos also for not easliy indexable libs. I little while ago I \nstumbled across java based RDBMS. I was actually on the search for some really leightweight DBM \nlike database for a project here. So there is hsqldb. This seems to be really lightweight and can \ndriven in In-memory, Standalone and client-server mode. As I said, it was an real weird thought \nabout having some RDBMS tumble across several tables select by context,type, etc.. Adding new \nLibraries Info Hoverhelp or even Help could be held in DB, index searched,... \nhttp://hsqldb.sourceforge.net/web/hsqlFeatures.html  \nif someone just has interest on an discussion. If my cdt-dev@ account would work sometimes i \nwould post an discussion there too.  \n \nAnyway, back to work. ",
    "Long and interresting debate  ... 8-)\nso who\u0027s patch is left standing ?\n\nNeed to know, so I can apply.\n\nSorry, but I did not read the entire thread.\n\nThanks guys.",
    "Well, if nobody else wants to. ;)\n\nAlain, if you don\u0027t mind, take my two patches for now. But be aware of, that\nthey don\u0027t have the whole path in them, unfortunately. I realized it to late, sorry.\n\nThe other question is, how long the ctags indexer will be used. As Thomas said,\nthe CTags-Indexer Interface isn\u0027t that sophisticated as the new Indexer will be.\n\n",
    "\nSigh ... I had comments but they are gone now. Silly browser!\n\nI agree with the last two patches, but I don\u0027t know that we have defined\nthe IFunctionPrototypeSummary adequately to handle C++, and we have \ndefinitely not properly defined the CTags component in terms of valid\nreturn values.  I would propose that we no longer concentrate on fixing\nthe CTags stuff, but rather concentrate on making sure that the pieces\nwhich will be re-used are well defined (ie make sure that the FunctionPrototype\nSummary, if you want it to handle class methods, is defined as such in the\ninterface.",
    "PR was targeted at 2.0 but was not resolved at release time. Changing target \nto 2.1",
    "Fleeping to fix.\n\nBogdan completely remove the CTags implementation.\n\nPlease reopen if I\u0027ve missed something."
  ],
  "commentCreationDates": [
    "2003-07-19T21:22:36+02:00",
    "2003-07-22T16:28:35+02:00",
    "2003-07-24T04:00:28+02:00",
    "2003-07-25T14:00:09+02:00",
    "2003-07-25T14:01:13+02:00",
    "2003-07-25T17:10:00+02:00",
    "2003-07-25T22:47:42+02:00",
    "2003-07-28T01:23:10+02:00",
    "2003-07-28T02:22:22+02:00",
    "2003-07-28T09:51:58+02:00",
    "2003-07-28T09:57:23+02:00",
    "2003-07-28T10:00:45+02:00",
    "2003-07-28T16:23:09+02:00",
    "2003-07-28T18:01:24+02:00",
    "2003-07-30T21:16:08+02:00",
    "2003-08-05T19:24:05+02:00",
    "2003-08-06T14:29:36+02:00",
    "2004-07-07T22:46:20+02:00",
    "2004-11-04T15:19:43+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: -1",
      "elements": [
        {
          "method": "java.lang.String.charAt",
          "source": "String.java:444"
        },
        {
          "method": "org.eclipse.cdt.ui.FunctionPrototypeSummary.\u003cinit\u003e",
          "source": "FunctionPrototypeSummary.java:42"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.text.CCompletionProcessor.addProjectCompletions",
          "source": "CCompletionProcessor.java:438"
        },
        {
          "method": "org.eclipse.cdt.internal.ui.text.CCompletionProcessor.addProposalsFromModel",
          "source": "CCompletionProcessor.java:399"
        }
      ],
      "number": 0,
      "commentIndex": 7,
      "bugId": "40520",
      "date": "2003-07-28T01:23:10+02:00",
      "product": "CDT",
      "component": "UI",
      "severity": "normal"
    }
  ],
  "groupId": "40520",
  "bugId": "40520",
  "date": "2003-07-19T21:22:36+02:00",
  "product": "CDT",
  "component": "UI",
  "severity": "normal"
}