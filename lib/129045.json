{
  "comments": [
    "Subclipse users that have upgraded to 3.2M5 are reporting that they cannot checkout projects using Subclipse.  The following exception occurs:\n\njava.lang.IllegalArgumentException: Attempted to beginRule: R/, does not match outer scope rule: P/SimpleJava\nat org.eclipse.core.runtime.Assert.isLegal(Assert.java:58)\nat org.eclipse.core.internal.jobs.ThreadJob.illegalPush(ThreadJob.java:116)\nat org.eclipse.core.internal.jobs.ThreadJob.push(ThreadJob.java:225)\nat org.eclipse.core.internal.jobs.ImplicitJobs.begin(ImplicitJobs.java:58)\nat org.eclipse.core.internal.jobs.JobManager.beginRule(JobManager.java:218)\nat org.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:96)\nat org.eclipse.core.internal.resources.Workspace.prepareOperation(Workspace.java:1681)\nat org.eclipse.core.internal.resources.Project.open(Project.java:832)\nat org.eclipse.core.internal.resources.Project.open(Project.java:890)\nat org.tigris.subversion.subclipse.core.commands.CheckoutCommand.basicRun(CheckoutCommand.java:116)\nat org.tigris.subversion.subclipse.core.commands.CheckoutCommand$1.run(CheckoutCommand.java:210)\n\nWe are running project.open(null) in our code that triggers this.  The problem seems to be due to a change in this function:\n\npublic ISchedulingRule modifyRule(IResource resource) {\n\t//modifying the project description requires the root\n\tif (resource.getType() \u003d\u003d IResource.PROJECT)\n\t\treturn workspace.getRoot();\n\tIPath path \u003d resource.getFullPath();\n\t//modifying the project description may cause linked resources to be created or deleted\n\tif (path.segmentCount() \u003d\u003d 2 \u0026\u0026 path.segment(1).equals(IProjectDescription.DESCRIPTION_FILE_NAME))\n\t\treturn parent(resource);\n\treturn resource;\n}\n\nThanks",
    "Change was made in the Resources component.",
    "Thanks.  I was reassigning it at the same time as you.  I did not look at the package closely enough.\n\nThis problem seems to have been caused by the change in bug#: 127562",
    "Can you paste in the full stack?  Someone must be doing a beginRule or workspace.run with only the project as a scheduling rule. You are correct that this was caused by the fix for bug 127562, but that fix was needed and clients that are well behaved should not be affected.",
    "I will paste the full stack at the end.\n\nWe are the ones defining the project as the Scheduling rule.  Would it really make sense for us to lock the entire workspace root during a lengthy checkout process?\n\nOur current code in question looks like this:\n\n\t\t\t\tPlatform.getJobManager().beginRule(localFolders[i], monitor);\n\nWhere the referenced item is the project being checked out.  Any change we make would have to work correctly on Eclipse 3.0.\n\njava.lang.IllegalArgumentException: Attempted to beginRule: R/, does not match outer scope rule: P/SimpleJava\nat org.eclipse.core.runtime.Assert.isLegal(Assert.java:58)\nat org.eclipse.core.internal.jobs.ThreadJob.illegalPush(ThreadJob.java:116)\nat org.eclipse.core.internal.jobs.ThreadJob.push(ThreadJob.java:225)\nat org.eclipse.core.internal.jobs.ImplicitJobs.begin(ImplicitJobs.java:58)\nat org.eclipse.core.internal.jobs.JobManager.beginRule(JobManager.java:218)\nat org.eclipse.core.internal.resources.WorkManager.checkIn(WorkManager.java:96)\nat org.eclipse.core.internal.resources.Workspace.prepareOperation(Workspace.java:1681)\nat org.eclipse.core.internal.resources.Project.open(Project.java:832)\nat org.eclipse.core.internal.resources.Project.open(Project.java:890)\nat org.tigris.subversion.subclipse.core.commands.CheckoutCommand.basicRun(CheckoutCommand.java:116)\nat org.tigris.subversion.subclipse.core.commands.CheckoutCommand$1.run(CheckoutCommand.java:210)\nat org.tigris.subversion.subclipse.core.SVNProviderPlugin$6.run(SVNProviderPlugin.java:441)\nat org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1733)\nat org.tigris.subversion.subclipse.core.SVNProviderPlugin.run(SVNProviderPlugin.java:436)\nat org.tigris.subversion.subclipse.core.commands.CheckoutCommand.run(CheckoutCommand.java:208)\nat org.tigris.subversion.subclipse.ui.operations.CheckoutAsProjectOperation.execute(CheckoutAsProjectOperation.java:60)\nat org.tigris.subversion.subclipse.ui.operations.CheckoutAsProjectOperation.execute(CheckoutAsProjectOperation.java:45)\nat org.tigris.subversion.subclipse.ui.operations.SVNOperation.run(SVNOperation.java:90)\nat org.eclipse.team.internal.ui.actions.JobRunnableContext.run(JobRunnableContext.java:144)\nat org.eclipse.team.internal.ui.actions.JobRunnableContext$ResourceJob.runInWorkspace(JobRunnableContext.java:72)\nat org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:38)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\n\n\n",
    "There\u0027s an open enhancement to improve this: bug 128709.  CC yourself on that bug, which we are considering for M6.\n\nWhat you really should be doing is using the ResourceRuleFactory.  This would insulate you from hard-coding a specific scheduling rule, and allow us to change the rule in the future. For opening project p, you would use\n\nISchedulingRule rule \u003d IWorkspace.getRuleFactory().modifyRule(p);\n\nAnd then do: IWorkspace.run(runnable, rule, 0, null), or IJobManager.beginRule(rule);",
    "(In reply to comment #5)\n\u003e There\u0027s an open enhancement to improve this: bug 128709.  CC yourself on that\n\u003e bug, which we are considering for M6.\n\u003e \n\u003e What you really should be doing is using the ResourceRuleFactory.  This would\n\u003e insulate you from hard-coding a specific scheduling rule, and allow us to\n\u003e change the rule in the future. For opening project p, you would use\n\u003e \n\u003e ISchedulingRule rule \u003d IWorkspace.getRuleFactory().modifyRule(p);\n\u003e \n\u003e And then do: IWorkspace.run(runnable, rule, 0, null), or\n\u003e IJobManager.beginRule(rule);\n\nWhile I can see where it would make sense to use this code for getting the rules it would still have undesirable side effects.  For example, calling modifyRule() for he project is now going to lock the entire workspace during the checkout.  That is not acceptable, we might as well have a modal dialog up if we are going to do that.  An openRule() would not really help because we cannot use that in Eclipse 3.0 code unless we stick with hard coding the rules.\n\nOur TeamProvider class has a getRuleFactory() method.  Is there some way we can provide our own subclassed ResourceRuleFactory that would restore the previous behavior?  It doesn\u0027t seem so as I do not see where IProject#open will use it.\n\nCouldn\u0027t you potentially go back and solve the original problem by introducing a new rule that is called when setting the project description?  \n\n",
    "OK, I am experimenting with doing it the way you suggested.  This certainly makes it all work correctly as expected.  What I am looking for is side-effects of locking the workspace.  Now I am a bit confused by what I am seeing.  Basically, with this change, I am seeing what I expected.  I can start a checkout and put it in the background.  I can then open and edit a Java file while it is running, but when I try to save I am locked up until it finishes.\n\nHere is where I get confused.  I see the same behavior in Eclipse 3.0, with our without this change.  If we were locking the project with our rule in that version, shouldn\u0027t I have been able to edit and save source in an unrelated project?\n\nAs it stands now, I will probably just commit the change to work the way you suggested but I am not understanding why this was not working the way I thought it was before.",
    "\u003e Couldn\u0027t you potentially go back and solve the original problem by introducing\n\u003e a new rule that is called when setting the project description?  \n\nI considered this, but it would be a breaking change, because setDescription says it uses modifyRule.  I.e., a well behaved client will likely do (this is pseudo-code):\n\nISchedulingRule rule \u003d factory.modifyRule(project);\ntry {\n  beginRule(rule);\n  project.setDescription(...);\n} finally {\n  endRule(rule);\n}\n\nThis is roughly what was happening in bug 127562.  If modifyRule() returns the project, this code may fail.",
    "Re: comment #7 - it depends on what scheduling rule the editor save code is using.  If the editor save code locks the workspace, then it won\u0027t run concurrently with checkout no matter what rule you use.  This may have been the case in 3.0 - I don\u0027t remember.",
    "I\u0027m going to mark this is as a dup for openRule request.\n\n*** This bug has been marked as a duplicate of 128709 ***"
  ],
  "commentCreationDates": [
    "2006-02-22T20:28:14+01:00",
    "2006-02-22T20:43:47+01:00",
    "2006-02-22T20:44:51+01:00",
    "2006-02-22T20:55:56+01:00",
    "2006-02-22T21:00:04+01:00",
    "2006-02-22T21:53:29+01:00",
    "2006-02-23T15:23:25+01:00",
    "2006-02-23T16:09:01+01:00",
    "2006-02-24T18:33:43+01:00",
    "2006-02-24T18:35:18+01:00",
    "2006-02-24T18:36:47+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Attempted to beginRule: R/, does not match outer scope rule: P/SimpleJava",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.Assert.isLegal",
          "source": "Assert.java:58"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.illegalPush",
          "source": "ThreadJob.java:116"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.push",
          "source": "ThreadJob.java:225"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:58"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:218"
        },
        {
          "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
          "source": "WorkManager.java:96"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
          "source": "Workspace.java:1681"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.open",
          "source": "Project.java:832"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.open",
          "source": "Project.java:890"
        },
        {
          "method": "org.tigris.subversion.subclipse.core.commands.CheckoutCommand.basicRun",
          "source": "CheckoutCommand.java:116"
        },
        {
          "method": "org.tigris.subversion.subclipse.core.commands.CheckoutCommand$1.run",
          "source": "CheckoutCommand.java:210"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "129045",
      "duplicateId": "128709",
      "date": "2006-02-22T20:28:14+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.IllegalArgumentException",
      "message": "Attempted to beginRule: R/, does not match outer scope rule: P/SimpleJava",
      "elements": [
        {
          "method": "org.eclipse.core.runtime.Assert.isLegal",
          "source": "Assert.java:58"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.illegalPush",
          "source": "ThreadJob.java:116"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ThreadJob.push",
          "source": "ThreadJob.java:225"
        },
        {
          "method": "org.eclipse.core.internal.jobs.ImplicitJobs.begin",
          "source": "ImplicitJobs.java:58"
        },
        {
          "method": "org.eclipse.core.internal.jobs.JobManager.beginRule",
          "source": "JobManager.java:218"
        },
        {
          "method": "org.eclipse.core.internal.resources.WorkManager.checkIn",
          "source": "WorkManager.java:96"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.prepareOperation",
          "source": "Workspace.java:1681"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.open",
          "source": "Project.java:832"
        },
        {
          "method": "org.eclipse.core.internal.resources.Project.open",
          "source": "Project.java:890"
        },
        {
          "method": "org.tigris.subversion.subclipse.core.commands.CheckoutCommand.basicRun",
          "source": "CheckoutCommand.java:116"
        },
        {
          "method": "org.tigris.subversion.subclipse.core.commands.CheckoutCommand$1.run",
          "source": "CheckoutCommand.java:210"
        },
        {
          "method": "org.tigris.subversion.subclipse.core.SVNProviderPlugin$6.run",
          "source": "SVNProviderPlugin.java:441"
        },
        {
          "method": "org.eclipse.core.internal.resources.Workspace.run",
          "source": "Workspace.java:1733"
        },
        {
          "method": "org.tigris.subversion.subclipse.core.SVNProviderPlugin.run",
          "source": "SVNProviderPlugin.java:436"
        },
        {
          "method": "org.tigris.subversion.subclipse.core.commands.CheckoutCommand.run",
          "source": "CheckoutCommand.java:208"
        },
        {
          "method": "org.tigris.subversion.subclipse.ui.operations.CheckoutAsProjectOperation.execute",
          "source": "CheckoutAsProjectOperation.java:60"
        },
        {
          "method": "org.tigris.subversion.subclipse.ui.operations.CheckoutAsProjectOperation.execute",
          "source": "CheckoutAsProjectOperation.java:45"
        },
        {
          "method": "org.tigris.subversion.subclipse.ui.operations.SVNOperation.run",
          "source": "SVNOperation.java:90"
        },
        {
          "method": "org.eclipse.team.internal.ui.actions.JobRunnableContext.run",
          "source": "JobRunnableContext.java:144"
        },
        {
          "method": "org.eclipse.team.internal.ui.actions.JobRunnableContext$ResourceJob.runInWorkspace",
          "source": "JobRunnableContext.java:72"
        },
        {
          "method": "org.eclipse.core.internal.resources.InternalWorkspaceJob.run",
          "source": "InternalWorkspaceJob.java:38"
        },
        {
          "method": "org.eclipse.core.internal.jobs.Worker.run",
          "source": "Worker.java:58"
        }
      ],
      "number": 1,
      "commentIndex": 4,
      "bugId": "129045",
      "duplicateId": "128709",
      "date": "2006-02-22T21:00:04+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "major"
    }
  ],
  "groupId": "128709",
  "bugId": "129045",
  "duplicateId": "128709",
  "date": "2006-02-22T20:28:14+01:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "major"
}