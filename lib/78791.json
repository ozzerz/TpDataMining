{
  "comments": [
    "build i1116.\n\nThere were session test failures so we backed out of the \"background refresh on\nproject open\" changes.\n\nWe commented out code so it always does a refreshLocal when the user opens a\nproject. This will be a performance hit but we feel that is ok for now since\npeople don\u0027t commonly open/close their projects.",
    "Note that always doing a refreshLocal is the old behaviour anyway...",
    "On Windows, it is possible to cause similar failures by running the test suite\nseveral times. For instance:\n\nTestSuite suite \u003d new TestSuite(...);\nfor (int i \u003d 0; i \u003c 100; i++)\n  suite.addTest(org.eclipse.core.tests.resources.usecase.SnapshotTest.suite());\nreturn suite;\n\nSo far, we haven\u0027t been able to reproduce the failures that happened on Linux.",
    "Long story short: the \"background refresh during project open\" code is still\nreleased.\n\nHere is what is happening in the snapshot tests: \n\n- create MyProject\n- open MyProject (M_USED \u003d\u003d false on entry, M_USED \u003d\u003d true on exit)\n- create resources in MyProject\n- close MyProject (writes out tree to disk)\n- snapshot\n- exit\n- start\n- assert MyProject exists\n- assert MyProject is closed\n- open MyProject (M_USED \u003d\u003d false so we don\u0027t read the tree in from disk)\n- resources aren\u0027t in the tree\n\nWhy is the M_USED flag \u003d\u003d false when we open the project?\n\nM_USED \u003d\u003d true in the old code when opening a project. All we are doing is\nwriting out the int and reading it back in. Why would M_USED ever be false if we\nare reading it from disk since it represents \"I have used this project before\nand its not new\"?\n\nI can\u0027t reproduce this in a non-session test.\n\nBlah.",
    "Here is the stack trace...\n\njunit.framework.AssertionFailedError: 2.2 /MyProject/folder110 unexpectedly does\nnot exist in the workspace\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat\norg.eclipse.core.tests.resources.ResourceTest.assertExistsInWorkspace(ResourceTest.java:231)\n\tat\norg.eclipse.core.tests.resources.ResourceTest.assertExistsInWorkspace(ResourceTest.java:204)\n\tat\norg.eclipse.core.tests.resources.usecase.Snapshot2Test.testVerifyPreviousSession(Snapshot2Test.java:107)\n\tat\norg.eclipse.core.tests.resources.usecase.SnapshotTest.test2(SnapshotTest.java:49)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)\n\tat java.lang.reflect.Method.invoke(Method.java:391)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:421)\n\tat\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:305)\n\tat\norg.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:30)\n\tat\norg.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:26)\n\tat\norg.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:220)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:273)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:129)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)\n\tat java.lang.reflect.Method.invoke(Method.java:391)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:185)\n\tat org.eclipse.core.launcher.Main.run(Main.java:684)\n\tat org.eclipse.core.launcher.Main.main(Main.java:668)\n\n\n",
    "We can close this now, can\u0027t we?",
    "They are still failing for me occasionally.",
    "Fixed.  To reproduce:\n\n1) Create a project (M_USED\u003dfalse)\n2) Cause a snapshot to occur\n3) Open and close the project (M_USED\u003dtrue)\n4) Snapshot again\n5) Shutdown and restart\n\n -\u003e M_USED flag is false\n\nThe only difference between the two snapshotted trees is that the M_USED flag is\nset after step 3.  The ResourceComparator did not look at the M_USED flag, so\nthis appeared to be unchanged when the delta was computed.  The fix was to add a\nflag that caused ResourceComparator to check the M_USED bit when computing\ndeltas for workspace save and snapshot.  Fix released."
  ],
  "commentCreationDates": [
    "2004-11-16T21:04:19+01:00",
    "2004-11-16T21:06:48+01:00",
    "2004-11-16T21:28:01+01:00",
    "2004-11-17T04:16:00+01:00",
    "2004-11-17T04:19:06+01:00",
    "2004-11-18T19:55:00+01:00",
    "2004-11-18T20:04:07+01:00",
    "2004-11-19T17:22:07+01:00"
  ],
  "traces": [
    {
      "exceptionType": "junit.framework.AssertionFailedError",
      "message": "2.2 /MyProject/folder110 unexpectedly does not exist in the workspace",
      "elements": [
        {
          "method": "junit.framework.Assert.fail",
          "source": "Assert.java:47"
        },
        {
          "method": "org.eclipse.core.tests.resources.ResourceTest.assertExistsInWorkspace",
          "source": "ResourceTest.java:231"
        },
        {
          "method": "org.eclipse.core.tests.resources.ResourceTest.assertExistsInWorkspace",
          "source": "ResourceTest.java:204"
        },
        {
          "method": "org.eclipse.core.tests.resources.usecase.Snapshot2Test.testVerifyPreviousSession",
          "source": "Snapshot2Test.java:107"
        },
        {
          "method": "org.eclipse.core.tests.resources.usecase.SnapshotTest.test2",
          "source": "SnapshotTest.java:49"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:85"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:58"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:60"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:391"
        },
        {
          "method": "junit.framework.TestCase.runTest",
          "source": "TestCase.java:154"
        },
        {
          "method": "junit.framework.TestCase.runBare",
          "source": "TestCase.java:127"
        },
        {
          "method": "junit.framework.TestResult$1.protect",
          "source": "TestResult.java:106"
        },
        {
          "method": "junit.framework.TestResult.runProtected",
          "source": "TestResult.java:124"
        },
        {
          "method": "junit.framework.TestResult.run",
          "source": "TestResult.java:109"
        },
        {
          "method": "junit.framework.TestCase.run",
          "source": "TestCase.java:118"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
          "source": "RemoteTestRunner.java:421"
        },
        {
          "method": "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
          "source": "RemoteTestRunner.java:305"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main",
          "source": "RemotePluginTestRunner.java:30"
        },
        {
          "method": "org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run",
          "source": "CoreTestApplication.java:26"
        },
        {
          "method": "org.eclipse.core.internal.runtime.PlatformActivator$1.run",
          "source": "PlatformActivator.java:220"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:273"
        },
        {
          "method": "org.eclipse.core.runtime.adaptor.EclipseStarter.run",
          "source": "EclipseStarter.java:129"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke0",
          "source": "Native Method"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:85"
        },
        {
          "method": "sun.reflect.NativeMethodAccessorImpl.invoke",
          "source": "NativeMethodAccessorImpl.java:58"
        },
        {
          "method": "sun.reflect.DelegatingMethodAccessorImpl.invoke",
          "source": "DelegatingMethodAccessorImpl.java:60"
        },
        {
          "method": "java.lang.reflect.Method.invoke",
          "source": "Method.java:391"
        },
        {
          "method": "org.eclipse.core.launcher.Main.basicRun",
          "source": "Main.java:185"
        },
        {
          "method": "org.eclipse.core.launcher.Main.run",
          "source": "Main.java:684"
        },
        {
          "method": "org.eclipse.core.launcher.Main.main",
          "source": "Main.java:668"
        }
      ],
      "number": 0,
      "commentIndex": 4,
      "bugId": "78791",
      "date": "2004-11-17T04:19:06+01:00",
      "product": "Platform",
      "component": "Resources",
      "severity": "normal"
    }
  ],
  "groupId": "78791",
  "bugId": "78791",
  "date": "2004-11-16T21:04:19+01:00",
  "product": "Platform",
  "component": "Resources",
  "severity": "normal"
}