{
  "comments": [
    "If a host bundle and a fragment bundle are not signed by the same signer (this\nincludes cases where one is signed and the other is not), then a host and\nfragment bundle cannot define classes in the same package.  I tried this on\nboth the Sun and IBM VMs and got similar exceptions.  Here is the one thrown by\nSun.\n\nCaused by: java.lang.SecurityException: class\n\"org.eclipse.core.runtime.IExtensionPoint\"\u0027s signer information does not match\nsigner information of other classes in the same package\n        at java.lang.ClassLoader.checkCerts(ClassLoader.java:611)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:532)\n\nThe Framework correctly sets up the CodeSource objects for each defined class.  The CodeSource holds the signer information which the VM uses to check the certificates.  In this case the host and fragment have different\nprotection domains and each has a different set of certificates.\n\nOne possible work around is to pass null for the classname when calling defineClass.  If we did this then the bundle classloader would likely need to do an additional check after the class is defined to ensure the className is the same as the one expected.  \n\nTo reproduce you must enable runtime verification of bundle signatures (osgi.support.signature.verify\u003dtrue).  The easiest way to reproduce is to launch from your workspace with only org.eclipse.equinox.registry in your workspace and a signed version of org.eclipse.core.runtime.compatibility.registry in your target.  In this case the host bundle org.eclipse.equinox.registry is not signed but the fragment is.\n\nI raised this issue against OSGi CPEG.  The discussion from that bug report was to work around it by passing null to defineClass.",
    "Is it possible to clarify what\u0027s the intended behavior should be?\n\nTo me having a security exception when bundle and its fragment are signed by different signers seems to be an expected outcome. It goes well with the \"do not use package names from other bundles\" approach. It helps close holes created by manipulation of classpaths variables.\n\nIs the problem here in how the exception is reported or that there is an exception in the first place?\n",
    "To me this seems like unwanted behavior.  The OSGi specification explicitly allows fragment bundles to contribute to existing packages in their host bundles.  It makes no claims that both host and fragment must be signed with the same certificates.\n\nWe now sign all Eclipse bundles.  If this behavior continues then we are basically saying that no fragment can contribute to the same package has our host bundles unless you get that fragment signed by Eclipse or you resign the Eclipse host bundles with your own certificates.  Both are nearly impossible to expect from deployers IMO.  This will limit the ways we allow down stream product the ability to extend our bundles."
  ],
  "commentCreationDates": [
    "2007-02-09T17:58:19+01:00",
    "2007-02-12T15:49:21+01:00",
    "2007-02-12T18:30:24+01:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.SecurityException",
      "message": "class \"org.eclipse.core.runtime.IExtensionPoint\"\u0027s signer information does not match signer information of other classes in the same package",
      "elements": [
        {
          "method": "java.lang.ClassLoader.checkCerts",
          "source": "ClassLoader.java:611"
        },
        {
          "method": "java.lang.ClassLoader.defineClass",
          "source": "ClassLoader.java:532"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "173673",
      "date": "2007-02-09T17:58:19+01:00",
      "product": "Equinox",
      "component": "Framework",
      "severity": "normal"
    }
  ],
  "groupId": "173673",
  "bugId": "173673",
  "date": "2007-02-09T17:58:19+01:00",
  "product": "Equinox",
  "component": "Framework",
  "severity": "normal"
}