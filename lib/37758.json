{
  "comments": [
    "I have an aspect that I would like to weave into the JDK 1.4 rt.jar file.  I \ncompiled the aspect separately and tried to weave it into rt.jar using the \nfollowing procedure:\n \n1. Generate a \u0027unitTestAspects.jar\u0027 file from ajc by compiling my aspect and \nusing the -outjar option to put the compiled aspect into a jar.\n \n2. Ran the ajc compiler as follows:\n \n   ajc -injars rt.jar -aspectpath unitTestAspects.jar -outjar rt_aj.jar\n \nAfter fixing an OutOfMemory error by increasing the memory available to ajc, I \nran the compiler once again.  After a period of time the compiler aborted with \nthe following:\n \njava.lang.StackOverflowError\n        at org.aspectj.weaver.bcel.Utility.getSourceLine(Utility.java:436)\n        at org.aspectj.weaver.bcel.Utility.getSourceLine(Utility.java:436)\n        ...\n \nI\u0027m running with AspectJ 1.1rc2 on Windows XP with JDK 1.4.01.",
    "Created an attachment (id\u003d4892)\nAspect used in failed compilation\n",
    "I can\u0027t reproduce this under Windows XP with SUN J2SDK 1.4.1_01.  Can you \nconfirm the exact version of JVM that you\u0027re seeing this in?  (I assume \n1.4.0_01?)  Can you also try the same experiment with the latest from SUN to \nsee if this is a bug they\u0027ve fixed in their rt.jar?\n\nFinally, some more info might be helpful.  Could you copy the full text of the \nconsole created by your command?  Also, could you add the following to your \naspect?\n\n    declare warning: staticinitialization(*): \"static initializer\";\n\nThis will generate a warning for every class that is woven, which is the \neasiest way to generate that debugging info today.",
    "\u003eI can\u0027t reproduce this under Windows XP with SUN J2SDK 1.4.1_01.  \n\u003eCan you confirm the exact version of JVM that you\u0027re seeing this in?\n\nI was using 1.4.1_01.  I downloaded the latest release (not beta) version of 1.\n4.1 today (1.4.1_02).  The rt.jar has a date/time of 2/20/2003 1:17PM.  Using \nthis file I still have the same problem.\n\n\u003eFinally, some more info might be helpful.  Could you copy the full text \n\u003eof the console created by your command?  Also, could you add the following\n\u003eto your aspect? [...]\n\nHere is a slightly edited version of the output from my compile attempt.  I \ndeleted duplicate lines in the stack overflow, and I deleted most of the \n\u0027warning\u0027 messages generated by the addition to the aspect you had me make:\n\nC:\\dev\\java\\Aspect Development - Error\u003eajc -injars lib\\rt.jar -aspectpath \naspects\\unitTestAspects.jar -outjar lib\\rt_aj.jar \n\nC:\\dev\\java\\Aspect Development - Error\\com\\sun\\corba\\se\\ActivationIDL\\Activator.\njava:0 static initializer\nC:\\dev\\java\\Aspect Development - \nError\\com\\sun\\corba\\se\\ActivationIDL\\ActivatorHelper.java:13 static initializer\nC:\\dev\\java\\Aspect Development - \nError\\com\\sun\\corba\\se\\ActivationIDL\\ActivatorHolder.java:0 static initializer\n\n[... bunch of similar lines deleted ...]\n\n\nC:\\dev\\java\\Aspect Development - Error\\java\\awt\\im\\InputMethodHighlight.java:67 \nstatic initializer\nABORT\nException thrown from AspectJ 1.1rc2\n\nThis might be logged as a bug already -- find current bugs at\n  http://bugs.eclipse.org/bugs/buglist.cgi?product\u003dAspectJ\u0026component\u003dCompiler\n\nBugs for exceptions thrown have titles File:line from the top stack, \ne.g., \"SomeFile.java:243\"\n\nIf you don\u0027t find the exception below in a bug, please add a new bug\nat http://bugs.eclipse.org/bugs/enter_bug.cgi?product\u003dAspectJ\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nnull\njava.lang.StackOverflowError\n\tat org.aspectj.weaver.bcel.Utility.getSourceLine(Utility.java:436)\n\tat org.aspectj.weaver.bcel.Utility.getSourceLine(Utility.java:436)\n\t[... bunch of identical lines deleted ...]\n\n1 fail|abort, 7383 warnings\n\nI\u0027m also going to post an attachment which is a zip file of the directory with \nthe code used to produce this error.",
    "Created an attachment (id\u003d4919)\nDirectory containing code, batch files, jars which are used to reproduce the\nbug.\n\nHere is a zip file containing a test directory which can be used to reproduce\nthis bug.  In addition to this directory, you would need the AspectJ 1.1r2 code\nrelease and possibly the JSDK 1.4.1_02 release.  I also didn\u0027t include the\nrt.jar file that I was using as an injar, and I didn\u0027t include the junit.jar\nwhich is referenced by the code (made the zip file too big to upload).\tFor my\ntest, you need to have rt.jar and junit.jar (3.8.1) residing in the \u0027lib\u0027\ndirectory of this zipped archive.",
    "This is fixed in the tree with a minimal test in bugs/lines.\n\nThe reason this bug was hard to reproduce is that it is very sensitive to the \nexact VM and environment that the compiler is run in.  It is caused by a \n(tail) recursive method that tries to find the line number for an instruction \nbeing called enough times to exceed the JVMs maximum stack size.  This method \nhas been changed to use iteration instead of recursion to avoid this issue.\n\nFor those who care, this would not be a bug if the JVM properly implemented \ntail-recursion...\n\nThanks for providing such a detailed demonstration of the bug.  This made it \npossible to track down this odd bug that is very sensitive to the details of \nthe JVM and environment.  For example, this bug doesn\u0027t show up when running \nthe compiler under a 1.3 JVM even when weaving into the rt.jar from 1.4 (which \nis what I was doing when first attempting to reproduce the bug)."
  ],
  "commentCreationDates": [
    "2003-05-16T15:02:21+02:00",
    "2003-05-16T15:07:40+02:00",
    "2003-05-19T22:36:53+02:00",
    "2003-05-20T20:24:06+02:00",
    "2003-05-20T20:31:43+02:00",
    "2003-05-21T20:05:42+02:00"
  ],
  "traces": [
    {
      "exceptionType": "java.lang.StackOverflowError",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.Utility.getSourceLine",
          "source": "Utility.java:436"
        },
        {
          "method": "org.aspectj.weaver.bcel.Utility.getSourceLine",
          "source": "Utility.java:436"
        }
      ],
      "number": 0,
      "commentIndex": 0,
      "bugId": "37758",
      "date": "2003-05-16T15:02:21+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    },
    {
      "exceptionType": "java.lang.StackOverflowError",
      "elements": [
        {
          "method": "org.aspectj.weaver.bcel.Utility.getSourceLine",
          "source": "Utility.java:436"
        },
        {
          "method": "org.aspectj.weaver.bcel.Utility.getSourceLine",
          "source": "Utility.java:436"
        }
      ],
      "number": 1,
      "commentIndex": 3,
      "bugId": "37758",
      "date": "2003-05-20T20:24:06+02:00",
      "product": "AspectJ",
      "component": "Compiler",
      "severity": "major"
    }
  ],
  "groupId": "37758",
  "bugId": "37758",
  "date": "2003-05-16T15:02:21+02:00",
  "product": "AspectJ",
  "component": "Compiler",
  "severity": "major"
}